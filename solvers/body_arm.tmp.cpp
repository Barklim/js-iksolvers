/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-05-22 07:20:29.289175
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[0]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[4]);
x11=IKcos(j[5]);
x12=((1.0)*x6);
x13=((1.0)*x1);
x14=((1.0)*x9);
x15=((1.0)*x0);
x16=((1.0)*x10);
x17=((0.265)*x1);
x18=(x3*x4);
x19=(x1*x4);
x20=(x5*x7);
x21=(x2*x3);
x22=(x13*x2);
x23=((0.27)*x1*x2);
x24=((1.0)*x21);
x25=(x22*x7);
x26=((((-1.0)*x22))+x18);
x27=((((-1.0)*x18))+x22);
x28=((((-1.0)*x24))+(((-1.0)*x13*x4)));
x29=(x26*x6);
x30=(x26*x9);
x31=(x27*x5);
x32=(x10*x28);
x33=((((-1.0)*x15*x18))+((x0*x22)));
x34=((((-1.0)*x18*x7))+x25);
x35=(((x0*x13*x4))+((x15*x21)));
x36=(((x13*x4*x7))+((x24*x7)));
x37=(x10*x33);
x38=(x35*x6);
x39=((((-1.0)*x35*x5))+((x6*x7)));
x40=(((x0*x12))+(((1.0)*x36*x5)));
x41=((((-1.0)*x12*x36))+((x15*x5)));
x42=((((-1.0)*x12*x35))+(((-1.0)*x20)));
eerot[0]=(((x11*(((((-1.0)*x14*x42))+(((-1.0)*x16*x33))))))+((x39*x8)));
eerot[1]=(((x8*((((x42*x9))+x37))))+((x11*x39)));
eerot[2]=(((x33*x9))+((x10*((x38+x20)))));
eetrans[0]=(((x0*x17))+(((0.1)*x0))+(((-1.0)*x0*x23))+(((0.27)*x0*x18)));
eerot[3]=(((x11*((((x10*x34))+((x41*x9))))))+((x40*x8)));
eerot[4]=(((x11*x40))+((x8*(((((-1.0)*x14*x41))+(((-1.0)*x16*x34)))))));
eerot[5]=(((x10*x41))+((x9*((((x18*x7))+(((-1.0)*x25)))))));
eetrans[1]=((((-0.1)*x7))+((x23*x7))+(((-1.0)*x17*x7))+(((-0.27)*x18*x7)));
eerot[6]=(((x31*x8))+((x11*((((x29*x9))+x32)))));
eerot[7]=(((x8*(((((-1.0)*x12*x30))+(((-1.0)*x16*x28))))))+((x11*x31)));
eerot[8]=(((x9*((x19+x21))))+((x10*x29)));
eetrans[2]=((0.35)+(((0.265)*x3))+(((-0.27)*x19))+(((-0.27)*x21)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r01;
new_r01=((-1.0)*r00);
new_r02=r02;
new_px=px;
new_r10=((-1.0)*r11);
new_r11=r10;
new_r12=((-1.0)*r12);
new_py=((-1.0)*py);
new_r20=((-1.0)*r21);
new_r21=r20;
new_r22=((-1.0)*r22);
new_pz=((0.35)+(((-1.0)*pz)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x43=((1.0)*px);
IkReal x44=((1.0)*pz);
IkReal x45=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x45))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x44)));
rxp0_2=((((-1.0)*r10*x43))+((py*r00)));
rxp1_0=((((-1.0)*r21*x45))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x44)));
rxp1_2=((((-1.0)*r11*x43))+((py*r01)));
rxp2_0=((((-1.0)*r22*x45))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x44))+((px*r22)));
rxp2_2=((((-1.0)*r12*x43))+((py*r02)));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x47 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x47.valid){
continue;
}
IkReal x46=x47.value;
j0array[0]=((-1.0)*x46);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x46)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
sj2array[0]=((0.930293501048218)+(((1.39762403913347)*py*sj0))+(((-6.98812019566737)*pp))+(((1.39762403913347)*cj0*px)));
if( sj2array[0] >= -1-IKFAST_SINCOS_THRESH && sj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKasin(sj2array[0]);
    cj2array[0] = IKcos(j2array[0]);
    sj2array[1] = sj2array[0];
    j2array[1] = j2array[0] > 0 ? (IKPI-j2array[0]) : (-IKPI-j2array[0]);
    cj2array[1] = -cj2array[0];
}
else if( isnan(sj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[3];
IkReal x48=((2700.0)*cj2);
IkReal x49=(cj0*px);
IkReal x50=((2700.0)*sj2);
IkReal x51=(py*sj0);
j1eval[0]=((1.00017470300489)+(((-1.0)*sj2)));
j1eval[1]=IKsign(((1431.25)+(((-1431.0)*sj2))));
j1eval[2]=((IKabs(((-265.0)+(((2650.0)*x49))+(((2650.0)*x51))+((pz*x48))+(((-1.0)*x49*x50))+(((270.0)*sj2))+(((-1.0)*x50*x51)))))+(IKabs(((((-2650.0)*pz))+((x48*x49))+(((-270.0)*cj2))+((x48*x51))+((pz*x50))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x52=(py*sj0);
IkReal x53=((27.0)*sj2);
IkReal x54=(cj0*px);
IkReal x55=(cj2*pz);
IkReal x56=((100.0)*pz);
IkReal x57=((10.188679245283)*sj2);
j1eval[0]=((1.0)+(((-10.0)*x52))+(((-10.0)*x54))+(((-1.0188679245283)*sj2))+(((10.188679245283)*x55))+((x52*x57))+((x54*x57)));
j1eval[1]=IKsign(((2.65)+(((27.0)*x55))+(((-26.5)*x54))+(((-26.5)*x52))+(((-2.7)*sj2))+((x53*x54))+((x52*x53))));
j1eval[2]=((IKabs(((-14.3125)+(((14.31)*sj2))+((pz*x56))+(((7.29)*(cj2*cj2))))))+(IKabs(((((-10.0)*pz))+((x52*x56))+(((-7.155)*cj2))+(((7.29)*cj2*sj2))+((x54*x56))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x58=cj0*cj0;
IkReal x59=py*py;
IkReal x60=(cj0*px);
IkReal x61=((27.0)*cj2);
IkReal x62=((27.0)*sj2);
IkReal x63=(py*sj0);
IkReal x64=((100.0)*x58);
IkReal x65=((1.0)+(((100.0)*x59))+(((100.0)*(pz*pz)))+(((-1.0)*x59*x64))+(((-20.0)*x60))+(((-20.0)*x63))+(((200.0)*x60*x63))+((x64*(px*px))));
j1eval[0]=x65;
j1eval[1]=IKsign(x65);
j1eval[2]=((IKabs(((-2.65)+(((26.5)*x63))+(((26.5)*x60))+(((-1.0)*x60*x62))+((pz*x61))+(((-1.0)*x62*x63))+(((2.7)*sj2)))))+(IKabs((((x60*x61))+(((-2.7)*cj2))+((x61*x63))+((pz*x62))+(((-26.5)*pz))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x66=cj0*cj0;
IkReal x67=py*py;
IkReal x68=(py*sj0);
IkReal x69=((27.0)*sj2);
IkReal x70=((27.0)*cj2);
IkReal x71=(cj0*px);
IkReal x72=((100.0)*x66);
IkReal x73=((27.0)*x71);
CheckValue<IkReal> x74 = IKatan2WithCheck(IkReal(((-2.65)+(((26.5)*x68))+((pz*x70))+(((26.5)*x71))+(((-1.0)*x68*x69))+(((-1.0)*x69*x71))+(((2.7)*sj2)))),((((-2.7)*cj2))+((x68*x70))+((x70*x71))+((pz*x69))+(((-26.5)*pz))),IKFAST_ATAN2_MAGTHRESH);
if(!x74.valid){
continue;
}
CheckValue<IkReal> x75=IKPowWithIntegerCheck(IKsign(((1.0)+((x72*(px*px)))+(((100.0)*(pz*pz)))+(((-20.0)*x68))+(((-20.0)*x71))+(((-1.0)*x67*x72))+(((200.0)*x68*x71))+(((100.0)*x67)))),-1);
if(!x75.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x74.value)+(((1.5707963267949)*(x75.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x76=IKcos(j1);
IkReal x77=IKsin(j1);
IkReal x78=(cj0*px);
IkReal x79=((0.27)*cj2);
IkReal x80=(py*sj0);
IkReal x81=((1.0)*pz);
IkReal x82=((0.27)*sj2);
IkReal x83=((0.27)*x76);
IkReal x84=((1.0)*x76);
IkReal x85=(x77*x80);
evalcond[0]=(((x76*x82))+(((-0.265)*x76))+(((-1.0)*x81))+((x77*x79)));
evalcond[1]=((0.1)+(((0.265)*x77))+(((-1.0)*x77*x82))+((x76*x79))+(((-1.0)*x80))+(((-1.0)*x78)));
evalcond[2]=((-0.265)+(((-0.1)*x77))+x82+x85+(((-1.0)*x76*x81))+((x77*x78)));
evalcond[3]=((((-1.0)*x80*x84))+(((0.1)*x76))+(((-1.0)*x77*x81))+(((-1.0)*x78*x84))+x79);
evalcond[4]=((-0.007325)+(((0.53)*x85))+(((-0.053)*x77))+(((0.2)*x78))+(((0.2)*x80))+(((0.53)*x77*x78))+(((-1.0)*pp))+(((-0.53)*pz*x76)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x386=((27.0)*sj2);
IkReal x387=(py*sj0);
IkReal x388=(cj0*px);
IkReal x389=((100.0)*pz);
CheckValue<IkReal> x390=IKPowWithIntegerCheck(IKsign(((2.65)+((x386*x388))+((x386*x387))+(((-26.5)*x387))+(((-26.5)*x388))+(((-2.7)*sj2))+(((27.0)*cj2*pz)))),-1);
if(!x390.valid){
continue;
}
CheckValue<IkReal> x391 = IKatan2WithCheck(IkReal(((-14.3125)+(((14.31)*sj2))+((pz*x389))+(((7.29)*(cj2*cj2))))),(((x387*x389))+((x388*x389))+(((-10.0)*pz))+(((-7.155)*cj2))+(((7.29)*cj2*sj2))),IKFAST_ATAN2_MAGTHRESH);
if(!x391.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x390.value)))+(x391.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x392=IKcos(j1);
IkReal x393=IKsin(j1);
IkReal x394=(cj0*px);
IkReal x395=((0.27)*cj2);
IkReal x396=(py*sj0);
IkReal x397=((1.0)*pz);
IkReal x398=((0.27)*sj2);
IkReal x399=((0.27)*x392);
IkReal x400=((1.0)*x392);
IkReal x401=(x393*x396);
evalcond[0]=((((-1.0)*x397))+(((-0.265)*x392))+((x393*x395))+((x392*x398)));
evalcond[1]=((0.1)+(((-1.0)*x396))+(((-1.0)*x394))+(((0.265)*x393))+(((-1.0)*x393*x398))+((x392*x395)));
evalcond[2]=((-0.265)+x398+x401+(((-0.1)*x393))+(((-1.0)*x392*x397))+((x393*x394)));
evalcond[3]=((((-1.0)*x394*x400))+x395+(((0.1)*x392))+(((-1.0)*x396*x400))+(((-1.0)*x393*x397)));
evalcond[4]=((-0.007325)+(((0.2)*x394))+(((0.2)*x396))+(((-0.053)*x393))+(((0.53)*x393*x394))+(((0.53)*x401))+(((-1.0)*pp))+(((-0.53)*pz*x392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x402=((2700.0)*pz);
IkReal x403=(cj0*px);
IkReal x404=((2700.0)*py*sj0);
CheckValue<IkReal> x405=IKPowWithIntegerCheck(IKsign(((1431.25)+(((-1431.0)*sj2)))),-1);
if(!x405.valid){
continue;
}
CheckValue<IkReal> x406 = IKatan2WithCheck(IkReal(((-265.0)+(((2650.0)*x403))+(((-2700.0)*sj2*x403))+(((-1.0)*sj2*x404))+(((2650.0)*py*sj0))+(((270.0)*sj2))+((cj2*x402)))),((((-2650.0)*pz))+((sj2*x402))+(((2700.0)*cj2*x403))+(((-270.0)*cj2))+((cj2*x404))),IKFAST_ATAN2_MAGTHRESH);
if(!x406.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x405.value)))+(x406.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x407=IKcos(j1);
IkReal x408=IKsin(j1);
IkReal x409=(cj0*px);
IkReal x410=((0.27)*cj2);
IkReal x411=(py*sj0);
IkReal x412=((1.0)*pz);
IkReal x413=((0.27)*sj2);
IkReal x414=((0.27)*x407);
IkReal x415=((1.0)*x407);
IkReal x416=(x408*x411);
evalcond[0]=(((x407*x413))+(((-0.265)*x407))+((x408*x410))+(((-1.0)*x412)));
evalcond[1]=((0.1)+((x407*x410))+(((0.265)*x408))+(((-1.0)*x408*x413))+(((-1.0)*x409))+(((-1.0)*x411)));
evalcond[2]=((-0.265)+((x408*x409))+x413+x416+(((-0.1)*x408))+(((-1.0)*x407*x412)));
evalcond[3]=((((0.1)*x407))+x410+(((-1.0)*x411*x415))+(((-1.0)*x408*x412))+(((-1.0)*x409*x415)));
evalcond[4]=((-0.007325)+(((-0.53)*pz*x407))+(((0.53)*x416))+(((-1.0)*pp))+(((0.53)*x408*x409))+(((0.2)*x411))+(((0.2)*x409))+(((-0.053)*x408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x86=((1.0)*cj0);
IkReal x87=(r11*sj0);
IkReal x88=(sj1*sj2);
IkReal x89=(r10*sj0);
IkReal x90=(cj0*r00);
IkReal x91=(cj1*cj2);
IkReal x92=(cj0*r01);
IkReal x93=(r12*sj0);
IkReal x94=(cj0*r02);
IkReal x95=(x91+(((-1.0)*x88)));
IkReal x96=(x88+(((-1.0)*x91)));
IkReal x97=(sj0*x96);
IkReal x98=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
IkReal x99=(cj0*x98);
new_r00=(((r00*sj0))+(((-1.0)*r10*x86)));
new_r01=(((r01*sj0))+(((-1.0)*r11*x86)));
new_r02=((((-1.0)*r12*x86))+((r02*sj0)));
new_r10=(((x89*x98))+((r20*x95))+((x90*x98)));
new_r11=(((r21*x95))+((x87*x98))+((x92*x98)));
new_r12=(((x93*x98))+((r22*x95))+((x94*x98)));
new_r20=(((x89*x96))+((r20*x98))+((x90*x96)));
new_r21=(((r21*x98))+((x87*x96))+((x92*x96)));
new_r22=(((x93*x96))+((r22*x98))+((x94*x96)));
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=new_r22;
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j5eval[2];
IkReal x100=((1.0)*cj0);
IkReal x101=(r11*sj0);
IkReal x102=(sj1*sj2);
IkReal x103=(r10*sj0);
IkReal x104=(cj0*r00);
IkReal x105=(cj1*cj2);
IkReal x106=(cj0*r01);
IkReal x107=(r12*sj0);
IkReal x108=(cj0*r02);
IkReal x109=(x105+(((-1.0)*x102)));
IkReal x110=(x102+(((-1.0)*x105)));
IkReal x111=(sj0*x110);
IkReal x112=x98;
IkReal x113=(cj0*x112);
new_r00=(((r00*sj0))+(((-1.0)*r10*x100)));
new_r01=((((-1.0)*r11*x100))+((r01*sj0)));
new_r02=((((-1.0)*r12*x100))+((r02*sj0)));
new_r10=(((x103*x112))+((r20*x109))+((x104*x112)));
new_r11=(((x106*x112))+((r21*x109))+((x101*x112)));
new_r12=(((r22*x109))+((x108*x112))+((x107*x112)));
new_r20=(((x103*x110))+((r20*x112))+((x104*x110)));
new_r21=(((x106*x110))+((r21*x112))+((x101*x110)));
new_r22=(((r22*x112))+((x108*x110))+((x107*x110)));
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x114=((1.0)*cj0);
IkReal x115=(r11*sj0);
IkReal x116=(sj1*sj2);
IkReal x117=(r10*sj0);
IkReal x118=(cj0*r00);
IkReal x119=(cj1*cj2);
IkReal x120=(cj0*r01);
IkReal x121=(r12*sj0);
IkReal x122=(cj0*r02);
IkReal x123=(x119+(((-1.0)*x116)));
IkReal x124=(x116+(((-1.0)*x119)));
IkReal x125=(sj0*x124);
IkReal x126=x98;
IkReal x127=(cj0*x126);
new_r00=(((r00*sj0))+(((-1.0)*r10*x114)));
new_r01=(((r01*sj0))+(((-1.0)*r11*x114)));
new_r02=((((-1.0)*r12*x114))+((r02*sj0)));
new_r10=(((x117*x126))+((r20*x123))+((x118*x126)));
new_r11=(((r21*x123))+((x120*x126))+((x115*x126)));
new_r12=(((x121*x126))+((r22*x123))+((x122*x126)));
new_r20=(((x117*x124))+((r20*x126))+((x118*x124)));
new_r21=(((r21*x126))+((x120*x124))+((x115*x124)));
new_r22=(((x121*x124))+((r22*x126))+((x122*x124)));
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r12;
evalcond[3]=new_r02;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x129 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x129.valid){
continue;
}
IkReal x128=x129.value;
j3array[0]=((-1.0)*x128);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x128)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x130=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj3*x130))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x130))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x130))+(((-1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x130))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj3*x130))+(((-1.0)*new_r00*sj3))), ((((-1.0)*sj3*x130))+((cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x131=IKsin(j5);
IkReal x132=IKcos(j5);
IkReal x133=((1.0)*sj3);
IkReal x134=(sj3*x131);
IkReal x135=((1.0)*x132);
IkReal x136=((1.0)*x131);
IkReal x137=(cj3*x135);
evalcond[0]=(((new_r11*sj3))+x131+((cj3*new_r01)));
evalcond[1]=(((new_r10*sj3))+(((-1.0)*x135))+((cj3*new_r00)));
evalcond[2]=(((cj3*x131))+((sj3*x132))+new_r01);
evalcond[3]=(x134+(((-1.0)*x137))+new_r00);
evalcond[4]=(x134+(((-1.0)*x137))+new_r11);
evalcond[5]=((((-1.0)*new_r00*x133))+(((-1.0)*x136))+((cj3*new_r10)));
evalcond[6]=((((-1.0)*new_r01*x133))+(((-1.0)*x135))+((cj3*new_r11)));
evalcond[7]=((((-1.0)*cj3*x136))+(((-1.0)*x132*x133))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r12;
evalcond[3]=new_r02;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x139 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x139.valid){
continue;
}
IkReal x138=x139.value;
j3array[0]=((-1.0)*x138);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x138)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x140=((1.0)*cj3);
if( IKabs(((((-1.0)*new_r01*x140))+(((-1.0)*new_r11*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj3))+(((-1.0)*new_r11*x140)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x140))+(((-1.0)*new_r11*sj3))))+IKsqr((((new_r01*sj3))+(((-1.0)*new_r11*x140))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*new_r01*x140))+(((-1.0)*new_r11*sj3))), (((new_r01*sj3))+(((-1.0)*new_r11*x140))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x141=IKsin(j5);
IkReal x142=IKcos(j5);
IkReal x143=((1.0)*sj3);
IkReal x144=(cj3*x141);
IkReal x145=((1.0)*x142);
IkReal x146=(x142*x143);
evalcond[0]=(((new_r11*sj3))+x141+((cj3*new_r01)));
evalcond[1]=(x141+((cj3*new_r10))+(((-1.0)*new_r00*x143)));
evalcond[2]=((((-1.0)*new_r01*x143))+x142+((cj3*new_r11)));
evalcond[3]=((((-1.0)*x145))+((new_r10*sj3))+((cj3*new_r00)));
evalcond[4]=(((cj3*x142))+new_r11+((sj3*x141)));
evalcond[5]=((((-1.0)*x146))+x144+new_r01);
evalcond[6]=((((-1.0)*x146))+x144+new_r10);
evalcond[7]=((((-1.0)*cj3*x145))+(((-1.0)*x141*x143))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x148=IKPowWithIntegerCheck(sj4,-1);
if(!x148.valid){
continue;
}
IkReal x147=x148.value;
CheckValue<IkReal> x149=IKPowWithIntegerCheck(new_r02,-1);
if(!x149.valid){
continue;
}
if( IKabs((x147*(x149.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r12*new_r12))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x147)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x147*(x149.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r12*new_r12)))))))+IKsqr(((-1.0)*new_r12*x147))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x147*(x149.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r12*new_r12)))))), ((-1.0)*new_r12*x147));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x150=IKsin(j3);
IkReal x151=IKcos(j3);
IkReal x152=((1.0)*cj4);
IkReal x153=((1.0)*sj4);
IkReal x154=(sj4*x151);
IkReal x155=(new_r02*x150);
IkReal x156=(new_r12*x151);
evalcond[0]=(x154+new_r12);
evalcond[1]=((((-1.0)*x150*x153))+new_r02);
evalcond[2]=(((new_r12*x150))+((new_r02*x151)));
evalcond[3]=(sj4+x156+(((-1.0)*x155)));
evalcond[4]=(((cj4*x155))+(((-1.0)*new_r22*x153))+(((-1.0)*x152*x156)));
evalcond[5]=((((-1.0)*new_r20*x152))+(((-1.0)*new_r00*x150*x153))+((new_r10*x154)));
evalcond[6]=(((new_r11*x154))+(((-1.0)*new_r21*x152))+(((-1.0)*new_r01*x150*x153)));
evalcond[7]=((1.0)+((new_r12*x154))+(((-1.0)*x153*x155))+(((-1.0)*new_r22*x152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x157=((1.0)*cj0);
IkReal x158=(r11*sj0);
IkReal x159=(sj1*sj2);
IkReal x160=(r10*sj0);
IkReal x161=(cj0*r00);
IkReal x162=(cj1*cj2);
IkReal x163=(cj0*r01);
IkReal x164=(r12*sj0);
IkReal x165=(cj0*r02);
IkReal x166=(x162+(((-1.0)*x159)));
IkReal x167=(x159+(((-1.0)*x162)));
IkReal x168=(sj0*x167);
IkReal x169=x98;
IkReal x170=(cj0*x169);
new_r00=(((r00*sj0))+(((-1.0)*r10*x157)));
new_r01=(((r01*sj0))+(((-1.0)*r11*x157)));
new_r02=(((r02*sj0))+(((-1.0)*r12*x157)));
new_r10=(((x161*x169))+((r20*x166))+((x160*x169)));
new_r11=(((r21*x166))+((x158*x169))+((x163*x169)));
new_r12=(((r22*x166))+((x164*x169))+((x165*x169)));
new_r20=(((x161*x167))+((r20*x169))+((x160*x167)));
new_r21=(((r21*x169))+((x158*x167))+((x163*x167)));
new_r22=(((r22*x169))+((x164*x167))+((x165*x167)));
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x171=((1.0)*cj0);
IkReal x172=(r11*sj0);
IkReal x173=(sj1*sj2);
IkReal x174=(r10*sj0);
IkReal x175=(cj0*r00);
IkReal x176=(cj1*cj2);
IkReal x177=(cj0*r01);
IkReal x178=(r12*sj0);
IkReal x179=(cj0*r02);
IkReal x180=((((-1.0)*x173))+x176);
IkReal x181=((((-1.0)*x176))+x173);
IkReal x182=(sj0*x181);
IkReal x183=x98;
IkReal x184=(cj0*x183);
new_r00=(((r00*sj0))+(((-1.0)*r10*x171)));
new_r01=((((-1.0)*r11*x171))+((r01*sj0)));
new_r02=(((r02*sj0))+(((-1.0)*r12*x171)));
new_r10=(((x174*x183))+((r20*x180))+((x175*x183)));
new_r11=(((x177*x183))+((x172*x183))+((r21*x180)));
new_r12=(((x178*x183))+((x179*x183))+((r22*x180)));
new_r20=(((x174*x181))+((r20*x183))+((x175*x181)));
new_r21=(((x177*x181))+((x172*x181))+((r21*x183)));
new_r22=(((x178*x181))+((x179*x181))+((r22*x183)));
j5eval[0]=sj4;
j5eval[1]=cj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x185=((1.0)*cj0);
IkReal x186=(r11*sj0);
IkReal x187=(sj1*sj2);
IkReal x188=(r10*sj0);
IkReal x189=(cj0*r00);
IkReal x190=(cj1*cj2);
IkReal x191=(cj0*r01);
IkReal x192=(r12*sj0);
IkReal x193=(cj0*r02);
IkReal x194=((((-1.0)*x187))+x190);
IkReal x195=((((-1.0)*x190))+x187);
IkReal x196=(sj0*x195);
IkReal x197=x98;
IkReal x198=(cj0*x197);
new_r00=(((r00*sj0))+(((-1.0)*r10*x185)));
new_r01=((((-1.0)*r11*x185))+((r01*sj0)));
new_r02=((((-1.0)*r12*x185))+((r02*sj0)));
new_r10=(((x188*x197))+((x189*x197))+((r20*x194)));
new_r11=(((x186*x197))+((x191*x197))+((r21*x194)));
new_r12=(((x193*x197))+((x192*x197))+((r22*x194)));
new_r20=(((x188*x195))+((x189*x195))+((r20*x197)));
new_r21=(((x186*x195))+((x191*x195))+((r21*x197)));
new_r22=(((x193*x195))+((x192*x195))+((r22*x197)));
j5eval[0]=sj4;
j5eval[1]=cj4;
j5eval[2]=sj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x199=(cj3*new_r12);
IkReal x200=(new_r02*sj3);
IkReal x201=(((new_r12*sj3))+((cj3*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r12;
evalcond[3]=new_r02;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x201;
evalcond[7]=x201;
evalcond[8]=(x199+(((-1.0)*x200)));
evalcond[9]=((((-1.0)*x199))+x200);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x202=((1.0)*new_r01);
if( IKabs(((((-1.0)*new_r00*sj3))+(((-1.0)*cj3*x202)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj3*new_r00))+(((-1.0)*sj3*x202)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*sj3))+(((-1.0)*cj3*x202))))+IKsqr((((cj3*new_r00))+(((-1.0)*sj3*x202))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*new_r00*sj3))+(((-1.0)*cj3*x202))), (((cj3*new_r00))+(((-1.0)*sj3*x202))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x203=IKsin(j5);
IkReal x204=IKcos(j5);
IkReal x205=((1.0)*sj3);
IkReal x206=(sj3*x203);
IkReal x207=((1.0)*x204);
IkReal x208=((1.0)*x203);
IkReal x209=(cj3*x207);
evalcond[0]=(((new_r11*sj3))+x203+((cj3*new_r01)));
evalcond[1]=(((new_r10*sj3))+(((-1.0)*x207))+((cj3*new_r00)));
evalcond[2]=(((sj3*x204))+((cj3*x203))+new_r01);
evalcond[3]=((((-1.0)*x209))+x206+new_r00);
evalcond[4]=((((-1.0)*x209))+x206+new_r11);
evalcond[5]=((((-1.0)*new_r00*x205))+(((-1.0)*x208))+((cj3*new_r10)));
evalcond[6]=((((-1.0)*x207))+((cj3*new_r11))+(((-1.0)*new_r01*x205)));
evalcond[7]=((((-1.0)*x204*x205))+new_r10+(((-1.0)*cj3*x208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x210=(((new_r12*sj3))+((cj3*new_r02)));
IkReal x211=((((-1.0)*new_r02*sj3))+((cj3*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r12;
evalcond[3]=new_r02;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x210;
evalcond[7]=x210;
evalcond[8]=x211;
evalcond[9]=x211;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x212=((1.0)*cj3);
if( IKabs(((((-1.0)*new_r01*x212))+(((-1.0)*new_r11*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r11*x212))+((new_r01*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x212))+(((-1.0)*new_r11*sj3))))+IKsqr(((((-1.0)*new_r11*x212))+((new_r01*sj3))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*new_r01*x212))+(((-1.0)*new_r11*sj3))), ((((-1.0)*new_r11*x212))+((new_r01*sj3))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x213=IKsin(j5);
IkReal x214=IKcos(j5);
IkReal x215=((1.0)*sj3);
IkReal x216=(cj3*x213);
IkReal x217=((1.0)*x214);
IkReal x218=(x214*x215);
evalcond[0]=(((new_r11*sj3))+x213+((cj3*new_r01)));
evalcond[1]=(x213+((cj3*new_r10))+(((-1.0)*new_r00*x215)));
evalcond[2]=(x214+(((-1.0)*new_r01*x215))+((cj3*new_r11)));
evalcond[3]=(((new_r10*sj3))+((cj3*new_r00))+(((-1.0)*x217)));
evalcond[4]=(((sj3*x213))+((cj3*x214))+new_r11);
evalcond[5]=(x216+new_r01+(((-1.0)*x218)));
evalcond[6]=(x216+new_r10+(((-1.0)*x218)));
evalcond[7]=((((-1.0)*cj3*x217))+(((-1.0)*x213*x215))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x219=((1.0)*sj3);
IkReal x220=(((new_r12*sj3))+((cj3*new_r02)));
IkReal x221=(((cj3*new_r10))+(((-1.0)*new_r00*x219)));
IkReal x222=((((-1.0)*new_r01*x219))+((cj3*new_r11)));
IkReal x223=((1.0)+(((-1.0)*new_r02*x219))+((cj3*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj3+new_r12);
evalcond[3]=(new_r02+(((-1.0)*x219)));
evalcond[4]=x220;
evalcond[5]=x220;
evalcond[6]=x223;
evalcond[7]=x221;
evalcond[8]=x222;
evalcond[9]=x221;
evalcond[10]=x222;
evalcond[11]=x223;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r20, new_r21);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x224=IKcos(j5);
IkReal x225=IKsin(j5);
IkReal x226=((1.0)*new_r12);
IkReal x227=((1.0)*x224);
IkReal x228=((1.0)*x225);
evalcond[0]=(new_r20+(((-1.0)*x228)));
evalcond[1]=(new_r21+(((-1.0)*x227)));
evalcond[2]=(((new_r12*x224))+new_r00);
evalcond[3]=(((new_r02*x225))+new_r11);
evalcond[4]=((((-1.0)*x225*x226))+new_r01);
evalcond[5]=(new_r10+(((-1.0)*new_r02*x227)));
evalcond[6]=((((-1.0)*new_r01*x226))+x225+((new_r02*new_r11)));
evalcond[7]=(((new_r02*new_r10))+(((-1.0)*x227))+(((-1.0)*new_r00*x226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x229=(cj3*new_r12);
IkReal x230=(new_r01*sj3);
IkReal x231=((1.0)*cj3);
IkReal x232=(new_r00*sj3);
IkReal x233=(new_r02*sj3);
IkReal x234=(((new_r12*sj3))+((cj3*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x231))+new_r12);
evalcond[3]=(sj3+new_r02);
evalcond[4]=x234;
evalcond[5]=x234;
evalcond[6]=((-1.0)+x229+(((-1.0)*x233)));
evalcond[7]=(((cj3*new_r10))+(((-1.0)*x232)));
evalcond[8]=(((cj3*new_r11))+(((-1.0)*x230)));
evalcond[9]=(x232+(((-1.0)*new_r10*x231)));
evalcond[10]=(x230+(((-1.0)*new_r11*x231)));
evalcond[11]=((1.0)+x233+(((-1.0)*x229)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x235=IKsin(j5);
IkReal x236=IKcos(j5);
IkReal x237=((1.0)*new_r02);
IkReal x238=((1.0)*x236);
evalcond[0]=(x235+new_r20);
evalcond[1]=(x236+new_r21);
evalcond[2]=(((new_r12*x235))+new_r01);
evalcond[3]=(((new_r02*x236))+new_r10);
evalcond[4]=((((-1.0)*new_r12*x238))+new_r00);
evalcond[5]=((((-1.0)*x235*x237))+new_r11);
evalcond[6]=(((new_r01*new_r12))+x235+(((-1.0)*new_r11*x237)));
evalcond[7]=(((new_r00*new_r12))+(((-1.0)*x238))+(((-1.0)*new_r10*x237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x239=(new_r22+(((-1.0)*cj4)));
IkReal x240=(sj4+new_r12);
IkReal x241=((1.0)*cj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=x239;
evalcond[2]=x239;
evalcond[3]=x240;
evalcond[4]=new_r02;
evalcond[5]=x240;
evalcond[6]=((((-1.0)*new_r12*x241))+(((-1.0)*new_r22*sj4)));
evalcond[7]=(((new_r10*sj4))+(((-1.0)*new_r20*x241)));
evalcond[8]=(((new_r11*sj4))+(((-1.0)*new_r21*x241)));
evalcond[9]=((1.0)+((new_r12*sj4))+(((-1.0)*new_r22*x241)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x242=IKsin(j5);
IkReal x243=IKcos(j5);
IkReal x244=((1.0)*new_r22);
evalcond[0]=(x242+new_r01);
evalcond[1]=(((new_r12*x242))+new_r20);
evalcond[2]=(((new_r12*x243))+new_r21);
evalcond[3]=((((-1.0)*x243))+new_r00);
evalcond[4]=((((-1.0)*x243*x244))+new_r11);
evalcond[5]=((((-1.0)*x242*x244))+new_r10);
evalcond[6]=(((new_r12*new_r20))+x242+(((-1.0)*new_r10*x244)));
evalcond[7]=(((new_r12*new_r21))+x243+(((-1.0)*new_r11*x244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x245=(new_r22+(((-1.0)*cj4)));
IkReal x246=((1.0)*cj4);
IkReal x247=((1.0)*new_r12);
IkReal x248=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=x245;
evalcond[2]=x245;
evalcond[3]=((((-1.0)*x248))+new_r12);
evalcond[4]=new_r02;
evalcond[5]=(sj4+(((-1.0)*x247)));
evalcond[6]=(((cj4*new_r12))+(((-1.0)*new_r22*x248)));
evalcond[7]=((((-1.0)*new_r20*x246))+(((-1.0)*new_r10*x248)));
evalcond[8]=((((-1.0)*new_r21*x246))+(((-1.0)*new_r11*x248)));
evalcond[9]=((1.0)+(((-1.0)*sj4*x247))+(((-1.0)*new_r22*x246)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x249=IKsin(j5);
IkReal x250=IKcos(j5);
IkReal x251=((1.0)*new_r12);
IkReal x252=((1.0)*x249);
IkReal x253=((1.0)*x250);
evalcond[0]=(x249+(((-1.0)*new_r01)));
evalcond[1]=(((new_r22*x250))+new_r11);
evalcond[2]=((((-1.0)*x249*x251))+new_r20);
evalcond[3]=((((-1.0)*x250*x251))+new_r21);
evalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x253)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*new_r22*x252)));
evalcond[6]=(x249+((new_r10*new_r22))+(((-1.0)*new_r20*x251)));
evalcond[7]=((((-1.0)*new_r21*x251))+x250+((new_r11*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x254=(new_r22+(((-1.0)*cj4)));
IkReal x255=((1.0)*cj4);
IkReal x256=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x254;
evalcond[2]=x254;
evalcond[3]=new_r12;
evalcond[4]=(new_r02+(((-1.0)*x256)));
evalcond[5]=(sj4+(((-1.0)*new_r02)));
evalcond[6]=(((cj4*new_r02))+(((-1.0)*new_r22*x256)));
evalcond[7]=((((-1.0)*new_r20*x255))+(((-1.0)*new_r00*x256)));
evalcond[8]=((((-1.0)*new_r21*x255))+(((-1.0)*new_r01*x256)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x255))+(((-1.0)*new_r02*x256)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x257=IKcos(j5);
IkReal x258=IKsin(j5);
IkReal x259=((1.0)*new_r02);
evalcond[0]=(x258+new_r11);
evalcond[1]=(new_r10+(((-1.0)*x257)));
evalcond[2]=(((new_r22*x257))+new_r01);
evalcond[3]=(((new_r22*x258))+new_r00);
evalcond[4]=(new_r20+(((-1.0)*x258*x259)));
evalcond[5]=((((-1.0)*x257*x259))+new_r21);
evalcond[6]=(((new_r00*new_r22))+x258+(((-1.0)*new_r20*x259)));
evalcond[7]=((((-1.0)*new_r21*x259))+((new_r01*new_r22))+x257);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x260=(new_r22+(((-1.0)*cj4)));
IkReal x261=(sj4+new_r02);
IkReal x262=((1.0)*cj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x260;
evalcond[2]=x260;
evalcond[3]=new_r12;
evalcond[4]=x261;
evalcond[5]=x261;
evalcond[6]=((((-1.0)*new_r22*sj4))+(((-1.0)*new_r02*x262)));
evalcond[7]=(((new_r00*sj4))+(((-1.0)*new_r20*x262)));
evalcond[8]=(((new_r01*sj4))+(((-1.0)*new_r21*x262)));
evalcond[9]=((1.0)+((new_r02*sj4))+(((-1.0)*new_r22*x262)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x263=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x263.valid){
continue;
}
CheckValue<IkReal> x264 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),((-1.0)*new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x264.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x263.value)))+(x264.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x265=IKsin(j5);
IkReal x266=IKcos(j5);
IkReal x267=((1.0)*new_r22);
evalcond[0]=(new_r20+((new_r02*x265)));
evalcond[1]=(new_r21+((new_r02*x266)));
evalcond[2]=(x265+(((-1.0)*new_r11)));
evalcond[3]=(new_r01+(((-1.0)*x266*x267)));
evalcond[4]=((((-1.0)*x265*x267))+new_r00);
evalcond[5]=((((-1.0)*x266))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r00*x267))+x265+((new_r02*new_r20)));
evalcond[7]=((((-1.0)*new_r01*x267))+x266+((new_r02*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x269=IKPowWithIntegerCheck(sj4,-1);
if(!x269.valid){
continue;
}
IkReal x268=x269.value;
CheckValue<IkReal> x270=IKPowWithIntegerCheck(cj4,-1);
if(!x270.valid){
continue;
}
CheckValue<IkReal> x271=IKPowWithIntegerCheck(sj3,-1);
if(!x271.valid){
continue;
}
if( IKabs((new_r20*x268)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x268*(x270.value)*(x271.value)*(((((-1.0)*new_r01*sj4))+(((-1.0)*cj3*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x268))+IKsqr((x268*(x270.value)*(x271.value)*(((((-1.0)*new_r01*sj4))+(((-1.0)*cj3*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((new_r20*x268), (x268*(x270.value)*(x271.value)*(((((-1.0)*new_r01*sj4))+(((-1.0)*cj3*new_r20))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x272=IKsin(j5);
IkReal x273=IKcos(j5);
IkReal x274=(cj4*sj3);
IkReal x275=(cj3*new_r10);
IkReal x276=(cj3*new_r11);
IkReal x277=((1.0)*sj3);
IkReal x278=((1.0)*cj4);
IkReal x279=((1.0)*sj4);
IkReal x280=(cj4*x272);
IkReal x281=((1.0)*x273);
evalcond[0]=((((-1.0)*x272*x279))+new_r20);
evalcond[1]=((((-1.0)*x273*x279))+new_r21);
evalcond[2]=(((new_r11*sj3))+x272+((cj3*new_r01)));
evalcond[3]=(((new_r10*sj3))+((cj3*new_r00))+(((-1.0)*x281)));
evalcond[4]=(((x273*x274))+new_r01+((cj3*x272)));
evalcond[5]=(((x272*x274))+(((-1.0)*cj3*x281))+new_r00);
evalcond[6]=(((sj3*x272))+(((-1.0)*cj3*x273*x278))+new_r11);
evalcond[7]=((((-1.0)*x272*x278))+(((-1.0)*new_r00*x277))+x275);
evalcond[8]=((((-1.0)*x273*x278))+(((-1.0)*new_r01*x277))+x276);
evalcond[9]=((((-1.0)*x273*x277))+(((-1.0)*cj3*x272*x278))+new_r10);
evalcond[10]=(x272+((new_r00*x274))+(((-1.0)*new_r20*x279))+(((-1.0)*x275*x278)));
evalcond[11]=((((-1.0)*new_r21*x279))+x273+((new_r01*x274))+(((-1.0)*x276*x278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x283=IKPowWithIntegerCheck(sj4,-1);
if(!x283.valid){
continue;
}
IkReal x282=x283.value;
CheckValue<IkReal> x284=IKPowWithIntegerCheck(cj3,-1);
if(!x284.valid){
continue;
}
if( IKabs((new_r20*x282)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x282*(x284.value)*((((new_r00*sj4))+((cj4*new_r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x282))+IKsqr((x282*(x284.value)*((((new_r00*sj4))+((cj4*new_r20*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((new_r20*x282), (x282*(x284.value)*((((new_r00*sj4))+((cj4*new_r20*sj3))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x285=IKsin(j5);
IkReal x286=IKcos(j5);
IkReal x287=(cj4*sj3);
IkReal x288=(cj3*new_r10);
IkReal x289=(cj3*new_r11);
IkReal x290=((1.0)*sj3);
IkReal x291=((1.0)*cj4);
IkReal x292=((1.0)*sj4);
IkReal x293=(cj4*x285);
IkReal x294=((1.0)*x286);
evalcond[0]=((((-1.0)*x285*x292))+new_r20);
evalcond[1]=((((-1.0)*x286*x292))+new_r21);
evalcond[2]=(((new_r11*sj3))+x285+((cj3*new_r01)));
evalcond[3]=(((new_r10*sj3))+(((-1.0)*x294))+((cj3*new_r00)));
evalcond[4]=(((x286*x287))+((cj3*x285))+new_r01);
evalcond[5]=(((x285*x287))+(((-1.0)*cj3*x294))+new_r00);
evalcond[6]=(((sj3*x285))+(((-1.0)*cj3*x286*x291))+new_r11);
evalcond[7]=((((-1.0)*x285*x291))+x288+(((-1.0)*new_r00*x290)));
evalcond[8]=((((-1.0)*new_r01*x290))+(((-1.0)*x286*x291))+x289);
evalcond[9]=((((-1.0)*x286*x290))+new_r10+(((-1.0)*cj3*x285*x291)));
evalcond[10]=((((-1.0)*new_r20*x292))+x285+(((-1.0)*x288*x291))+((new_r00*x287)));
evalcond[11]=((((-1.0)*new_r21*x292))+(((-1.0)*x289*x291))+x286+((new_r01*x287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x295=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x295.valid){
continue;
}
CheckValue<IkReal> x296 = IKatan2WithCheck(IkReal(new_r20),new_r21,IKFAST_ATAN2_MAGTHRESH);
if(!x296.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x295.value)))+(x296.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x297=IKsin(j5);
IkReal x298=IKcos(j5);
IkReal x299=(cj4*sj3);
IkReal x300=(cj3*new_r10);
IkReal x301=(cj3*new_r11);
IkReal x302=((1.0)*sj3);
IkReal x303=((1.0)*cj4);
IkReal x304=((1.0)*sj4);
IkReal x305=(cj4*x297);
IkReal x306=((1.0)*x298);
evalcond[0]=((((-1.0)*x297*x304))+new_r20);
evalcond[1]=((((-1.0)*x298*x304))+new_r21);
evalcond[2]=(((new_r11*sj3))+x297+((cj3*new_r01)));
evalcond[3]=(((new_r10*sj3))+((cj3*new_r00))+(((-1.0)*x306)));
evalcond[4]=(((cj3*x297))+((x298*x299))+new_r01);
evalcond[5]=((((-1.0)*cj3*x306))+((x297*x299))+new_r00);
evalcond[6]=((((-1.0)*cj3*x298*x303))+new_r11+((sj3*x297)));
evalcond[7]=((((-1.0)*x297*x303))+x300+(((-1.0)*new_r00*x302)));
evalcond[8]=((((-1.0)*x298*x303))+x301+(((-1.0)*new_r01*x302)));
evalcond[9]=((((-1.0)*x298*x302))+(((-1.0)*cj3*x297*x303))+new_r10);
evalcond[10]=((((-1.0)*new_r20*x304))+((new_r00*x299))+x297+(((-1.0)*x300*x303)));
evalcond[11]=((((-1.0)*x301*x303))+(((-1.0)*new_r21*x304))+x298+((new_r01*x299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x307=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x307.valid){
continue;
}
CheckValue<IkReal> x308 = IKatan2WithCheck(IkReal(new_r20),new_r21,IKFAST_ATAN2_MAGTHRESH);
if(!x308.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x307.value)))+(x308.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x309=((1.0)*sj4);
evalcond[0]=((((-1.0)*x309*(IKsin(j5))))+new_r20);
evalcond[1]=((((-1.0)*x309*(IKcos(j5))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[2];
IkReal x310=((1.0)*cj0);
IkReal x311=(r11*sj0);
IkReal x312=(sj1*sj2);
IkReal x313=(r10*sj0);
IkReal x314=(cj0*r00);
IkReal x315=(cj1*cj2);
IkReal x316=(cj0*r01);
IkReal x317=(r12*sj0);
IkReal x318=(cj0*r02);
IkReal x319=(x315+(((-1.0)*x312)));
IkReal x320=(x312+(((-1.0)*x315)));
IkReal x321=(sj0*x320);
IkReal x322=x98;
IkReal x323=(cj0*x322);
new_r00=(((r00*sj0))+(((-1.0)*r10*x310)));
new_r01=(((r01*sj0))+(((-1.0)*r11*x310)));
new_r02=((((-1.0)*r12*x310))+((r02*sj0)));
new_r10=(((r20*x319))+((x313*x322))+((x314*x322)));
new_r11=(((x316*x322))+((x311*x322))+((r21*x319)));
new_r12=(((x318*x322))+((x317*x322))+((r22*x319)));
new_r20=(((r20*x322))+((x313*x320))+((x314*x320)));
new_r21=(((r21*x322))+((x316*x320))+((x311*x320)));
new_r22=(((x318*x320))+((r22*x322))+((x317*x320)));
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x324=((1.0)*cj0);
IkReal x325=(r11*sj0);
IkReal x326=(sj1*sj2);
IkReal x327=(r10*sj0);
IkReal x328=(cj0*r00);
IkReal x329=(cj1*cj2);
IkReal x330=(cj0*r01);
IkReal x331=(r12*sj0);
IkReal x332=(cj0*r02);
IkReal x333=((((-1.0)*x326))+x329);
IkReal x334=((((-1.0)*x329))+x326);
IkReal x335=(sj0*x334);
IkReal x336=x98;
IkReal x337=(cj0*x336);
new_r00=(((r00*sj0))+(((-1.0)*r10*x324)));
new_r01=(((r01*sj0))+(((-1.0)*r11*x324)));
new_r02=((((-1.0)*r12*x324))+((r02*sj0)));
new_r10=(((r20*x333))+((x327*x336))+((x328*x336)));
new_r11=(((x330*x336))+((r21*x333))+((x325*x336)));
new_r12=(((r22*x333))+((x331*x336))+((x332*x336)));
new_r20=(((r20*x336))+((x327*x334))+((x328*x334)));
new_r21=(((x330*x334))+((r21*x336))+((x325*x334)));
new_r22=(((r22*x336))+((x331*x334))+((x332*x334)));
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r12;
evalcond[3]=new_r02;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x338=IKPowWithIntegerCheck(IKsign((((new_r01*new_r12))+(((-1.0)*new_r02*new_r11)))),-1);
if(!x338.valid){
continue;
}
CheckValue<IkReal> x339 = IKatan2WithCheck(IkReal((new_r02*sj5)),((-1.0)*new_r12*sj5),IKFAST_ATAN2_MAGTHRESH);
if(!x339.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x338.value)))+(x339.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x340=IKcos(j3);
IkReal x341=IKsin(j3);
IkReal x342=((1.0)*cj5);
IkReal x343=(sj5*x341);
IkReal x344=(cj5*x341);
IkReal x345=(sj5*x340);
IkReal x346=((1.0)*x341);
IkReal x347=(x340*x342);
evalcond[0]=(((new_r02*x340))+((new_r12*x341)));
evalcond[1]=(sj5+((new_r11*x341))+((new_r01*x340)));
evalcond[2]=((((-1.0)*new_r02*x346))+((new_r12*x340)));
evalcond[3]=(x344+x345+new_r01);
evalcond[4]=(x343+new_r00+(((-1.0)*x347)));
evalcond[5]=(x343+new_r11+(((-1.0)*x347)));
evalcond[6]=(((new_r00*x340))+((new_r10*x341))+(((-1.0)*x342)));
evalcond[7]=((((-1.0)*x341*x342))+new_r10+(((-1.0)*x345)));
evalcond[8]=((((-1.0)*sj5))+((new_r10*x340))+(((-1.0)*new_r00*x346)));
evalcond[9]=(((new_r11*x340))+(((-1.0)*new_r01*x346))+(((-1.0)*x342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r12;
evalcond[3]=new_r02;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x348 = IKatan2WithCheck(IkReal((new_r01*new_r02)),((-1.0)*new_r01*new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x348.valid){
continue;
}
CheckValue<IkReal> x349=IKPowWithIntegerCheck(IKsign((((new_r12*sj5))+((cj5*new_r02)))),-1);
if(!x349.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x348.value)+(((1.5707963267949)*(x349.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x350=IKcos(j3);
IkReal x351=IKsin(j3);
IkReal x352=((1.0)*cj5);
IkReal x353=(sj5*x350);
IkReal x354=(cj5*x350);
IkReal x355=((1.0)*x351);
IkReal x356=(x351*x352);
evalcond[0]=(((new_r02*x350))+((new_r12*x351)));
evalcond[1]=(((new_r01*x350))+sj5+((new_r11*x351)));
evalcond[2]=((((-1.0)*new_r02*x355))+((new_r12*x350)));
evalcond[3]=(((sj5*x351))+x354+new_r11);
evalcond[4]=((((-1.0)*x356))+x353+new_r01);
evalcond[5]=(sj5+(((-1.0)*new_r00*x355))+((new_r10*x350)));
evalcond[6]=(cj5+(((-1.0)*new_r01*x355))+((new_r11*x350)));
evalcond[7]=((((-1.0)*x356))+x353+new_r10);
evalcond[8]=((((-1.0)*x352))+((new_r10*x351))+((new_r00*x350)));
evalcond[9]=(new_r00+(((-1.0)*sj5*x355))+(((-1.0)*x350*x352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x358=IKPowWithIntegerCheck(sj4,-1);
if(!x358.valid){
continue;
}
IkReal x357=x358.value;
CheckValue<IkReal> x359=IKPowWithIntegerCheck(new_r11,-1);
if(!x359.valid){
continue;
}
if( IKabs((x357*(x359.value)*((((new_r01*new_r12))+(((-1.0)*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x357)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x357*(x359.value)*((((new_r01*new_r12))+(((-1.0)*sj4*sj5))))))+IKsqr(((-1.0)*new_r12*x357))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x357*(x359.value)*((((new_r01*new_r12))+(((-1.0)*sj4*sj5))))), ((-1.0)*new_r12*x357));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[18];
IkReal x360=IKsin(j3);
IkReal x361=IKcos(j3);
IkReal x362=((1.0)*cj5);
IkReal x363=((1.0)*cj4);
IkReal x364=((1.0)*sj4);
IkReal x365=(new_r11*x361);
IkReal x366=(sj5*x361);
IkReal x367=(cj4*x361);
IkReal x368=(sj4*x361);
IkReal x369=(cj4*x360);
IkReal x370=((1.0)*x360);
IkReal x371=(x360*x364);
evalcond[0]=(x368+new_r12);
evalcond[1]=((((-1.0)*x371))+new_r02);
evalcond[2]=(((new_r02*x361))+((new_r12*x360)));
evalcond[3]=(sj5+((new_r01*x361))+((new_r11*x360)));
evalcond[4]=(sj4+(((-1.0)*new_r02*x370))+((new_r12*x361)));
evalcond[5]=(x366+((cj5*x369))+new_r01);
evalcond[6]=((((-1.0)*x362))+((new_r00*x361))+((new_r10*x360)));
evalcond[7]=((((-1.0)*x361*x362))+((sj5*x369))+new_r00);
evalcond[8]=((((-1.0)*x362*x367))+((sj5*x360))+new_r11);
evalcond[9]=((((-1.0)*x363*x366))+(((-1.0)*x360*x362))+new_r10);
evalcond[10]=((((-1.0)*new_r00*x370))+(((-1.0)*sj5*x363))+((new_r10*x361)));
evalcond[11]=((((-1.0)*cj4*x362))+x365+(((-1.0)*new_r01*x370)));
evalcond[12]=((((-1.0)*new_r12*x361*x363))+(((-1.0)*new_r22*x364))+((new_r02*x369)));
evalcond[13]=((((-1.0)*new_r00*x371))+(((-1.0)*new_r20*x363))+((new_r10*x368)));
evalcond[14]=(((sj4*x365))+(((-1.0)*new_r01*x371))+(((-1.0)*new_r21*x363)));
evalcond[15]=((1.0)+(((-1.0)*new_r22*x363))+(((-1.0)*new_r02*x371))+((new_r12*x368)));
evalcond[16]=((((-1.0)*new_r10*x361*x363))+sj5+(((-1.0)*new_r20*x364))+((new_r00*x369)));
evalcond[17]=((((-1.0)*x363*x365))+cj5+((new_r01*x369))+(((-1.0)*new_r21*x364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x372=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x372.valid){
continue;
}
CheckValue<IkReal> x373 = IKatan2WithCheck(IkReal(new_r02),((-1.0)*new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x373.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x372.value)))+(x373.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[18];
IkReal x374=IKsin(j3);
IkReal x375=IKcos(j3);
IkReal x376=((1.0)*cj5);
IkReal x377=((1.0)*cj4);
IkReal x378=((1.0)*sj4);
IkReal x379=(new_r11*x375);
IkReal x380=(sj5*x375);
IkReal x381=(cj4*x375);
IkReal x382=(sj4*x375);
IkReal x383=(cj4*x374);
IkReal x384=((1.0)*x374);
IkReal x385=(x374*x378);
evalcond[0]=(x382+new_r12);
evalcond[1]=((((-1.0)*x385))+new_r02);
evalcond[2]=(((new_r12*x374))+((new_r02*x375)));
evalcond[3]=(sj5+((new_r01*x375))+((new_r11*x374)));
evalcond[4]=(((new_r12*x375))+sj4+(((-1.0)*new_r02*x384)));
evalcond[5]=(x380+((cj5*x383))+new_r01);
evalcond[6]=((((-1.0)*x376))+((new_r00*x375))+((new_r10*x374)));
evalcond[7]=(((sj5*x383))+new_r00+(((-1.0)*x375*x376)));
evalcond[8]=((((-1.0)*x376*x381))+((sj5*x374))+new_r11);
evalcond[9]=((((-1.0)*x374*x376))+new_r10+(((-1.0)*x377*x380)));
evalcond[10]=((((-1.0)*new_r00*x384))+(((-1.0)*sj5*x377))+((new_r10*x375)));
evalcond[11]=((((-1.0)*cj4*x376))+(((-1.0)*new_r01*x384))+x379);
evalcond[12]=((((-1.0)*new_r12*x375*x377))+((new_r02*x383))+(((-1.0)*new_r22*x378)));
evalcond[13]=((((-1.0)*new_r20*x377))+(((-1.0)*new_r00*x385))+((new_r10*x382)));
evalcond[14]=((((-1.0)*new_r21*x377))+((sj4*x379))+(((-1.0)*new_r01*x385)));
evalcond[15]=((1.0)+(((-1.0)*new_r22*x377))+((new_r12*x382))+(((-1.0)*new_r02*x385)));
evalcond[16]=((((-1.0)*new_r20*x378))+sj5+((new_r00*x383))+(((-1.0)*new_r10*x375*x377)));
evalcond[17]=((((-1.0)*new_r21*x378))+cj5+((new_r01*x383))+(((-1.0)*x377*x379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "9deed4f1a71b1f9720c53decad09f2eb"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

#include "emscripten.h"

extern "C" {

int EMSCRIPTEN_KEEPALIVE _GetNumJoints() {
    return GetNumJoints();
}

IkReal* EMSCRIPTEN_KEEPALIVE _ComputeFk(const IkReal* j) {
    IkReal eetrans[3] = {0};
    IkReal eerot[9] = {0};
    IkReal ret[12] = {0};
//    char buffer [256] = {0};
    ComputeFk(j, eetrans, eerot);
    for(int i = 0; i < 3; ++i) {
            ret[i] = eetrans[i];
//        sprintf(buffer + strlen(buffer), "%.15f,", eetrans[i]);
    }
    for(int i = 0; i < 9 - 1; ++i) {
    ret[i + 3] = eerot[i];
//        sprintf(buffer + strlen(buffer), "%.15f,", eerot[i]);
    }
//    sprintf(buffer + strlen(buffer), "%.15f", eerot[9 - 1]);
    return ret;
}

//
//std::vector<IkReal> TrueComputeIk(int argc, char** argv) {
//    std::vector<IkReal> solvalues(GetNumJoints());
//    if( argc != 12+GetNumFreeParameters()+1 ) {
//        printf("\nKAKAKAK Usage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
//               "Returns the ik solutions given the transformation of the end effector specified by\n"
//               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
//               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
//    }
//
//    IkSolutionList<IkReal> solutions;
//    std::vector<IkReal> vfree(GetNumFreeParameters());
//    IkReal eerot[9],eetrans[3];
//    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
//    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
//    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
//    for(std::size_t i = 0; i < vfree.size(); ++i)
//        vfree[i] = atof(argv[13+i]);
//    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);
//
//    if( !bSuccess ) {
//        fprintf(stderr,"Failed to get ik solution\n");
//    }
//
//    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
//    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
//        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
//        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
//        std::vector<IkReal> vsolfree(sol.GetFree().size());
//        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
//        for( std::size_t j = 0; j < solvalues.size(); ++j)
//            printf("%.15f, ", solvalues[j]);
//        printf("\n");
//    }
//    return solvalues;
//}

}
