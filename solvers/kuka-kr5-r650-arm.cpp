/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-05-18 22:44:38.966663
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[0]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=((0.295)*x7);
x13=((0.052)*x1);
x14=((1.0)*x6);
x15=((0.052)*x7);
x16=((0.27)*x4);
x17=((1.0)*x7);
x18=((0.052)*x6);
x19=((1.0)*x0);
x20=((0.09)*x7);
x21=(x0*x5);
x22=(x2*x4);
x23=(x0*x3);
x24=(x1*x3);
x25=((-1.0)*x9);
x26=((-1.0)*x8);
x27=(x1*x2);
x28=(x3*x4);
x29=(x6*x8);
x30=(x17*x5);
x31=(x0*x14);
x32=(x17*x22);
x33=((((-1.0)*x24))+x22);
x34=(x27+x28);
x35=(x33*x5);
x36=(x33*x6);
x37=(((x1*x23))+(((-1.0)*x19*x22)));
x38=((((-1.0)*x32))+((x24*x7)));
x39=(x36*x9);
x40=(x19*(((((-1.0)*x27))+(((-1.0)*x28)))));
x41=(x17*(((((-1.0)*x27))+(((-1.0)*x28)))));
x42=(x37*x8);
x43=(x41*x5);
x44=(x41*x6);
x45=((-1.0)*x41);
x46=(((x40*x5))+((x6*x7)));
x47=((((-1.0)*x14*x40))+x30);
x48=((((-1.0)*x19*x5))+(((-1.0)*x14*x41)));
x49=(x47*x9);
eerot[0]=(((x8*(((((-1.0)*x30))+((x40*x6))))))+((x37*x9)));
eerot[1]=(((x11*x46))+((x10*(((((-1.0)*x42))+(((-1.0)*x49)))))));
eerot[2]=(((x11*((x49+x42))))+((x10*x46)));
IkReal x50=(x0*x22);
eetrans[0]=((((0.09)*x0*x27))+((x0*x16))+(((0.295)*x1*x23))+(((-0.295)*x50))+(((0.09)*x23*x4))+(((0.075)*x0))+((x8*((((x18*x40))+(((-1.0)*x15*x5))))))+((x9*(((((-0.052)*x50))+((x13*x23)))))));
eerot[3]=(((x9*(((((-1.0)*x17*x24))+x32))))+((x48*x8)));
eerot[4]=(((x11*(((((-1.0)*x43))+x31))))+((x10*((((x48*x9))+((x38*x8)))))));
eerot[5]=(((x10*(((((-1.0)*x43))+x31))))+((x11*((((x26*x38))+((x25*(((((-1.0)*x44))+(((-1.0)*x21)))))))))));
IkReal x51=((1.0)*x20);
IkReal x52=((1.0)*x7);
eetrans[1]=((((-1.0)*x16*x52))+(((-1.0)*x12*x24))+(((-0.075)*x7))+(((-1.0)*x27*x51))+(((-1.0)*x28*x51))+((x8*(((((-1.0)*x18*x41))+(((-0.052)*x21))))))+((x12*x22))+((x9*(((((-1.0)*x13*x3*x52))+((x15*x22)))))));
eerot[6]=(((x9*(((((-1.0)*x27))+(((-1.0)*x28))))))+((x29*x33)));
eerot[7]=(((x11*x35))+((x10*((((x34*x8))+x39)))));
eerot[8]=(((x11*((((x26*x34))+((x25*x36))))))+((x10*x35)));
IkReal x53=((1.0)*x13);
eetrans[2]=((0.335)+((x29*(((((0.052)*x22))+(((-1.0)*x3*x53))))))+(((0.27)*x1))+(((-0.09)*x22))+((x9*(((((-1.0)*x2*x53))+(((-0.052)*x28))))))+(((-0.295)*x28))+(((-0.295)*x27))+(((0.09)*x24)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r02;
new_r01=r01;
new_r02=((-1.0)*r00);
new_px=((((-0.052)*r00))+px);
new_r10=((-1.0)*r12);
new_r11=((-1.0)*r11);
new_r12=r10;
new_py=((((-1.0)*py))+(((0.052)*r10)));
new_r20=((-1.0)*r22);
new_r21=((-1.0)*r21);
new_r22=r20;
new_pz=((0.335)+(((-1.0)*pz))+(((0.052)*r20)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x54=((1.0)*px);
IkReal x55=((1.0)*pz);
IkReal x56=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x56))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x55)));
rxp0_2=((((-1.0)*r10*x54))+((py*r00)));
rxp1_0=((((-1.0)*r21*x56))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x55)));
rxp1_2=((((-1.0)*r11*x54))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x56)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x55)));
rxp2_2=((((-1.0)*r12*x54))+((py*r02)));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x58 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x58.valid){
continue;
}
IkReal x57=x58.value;
j0array[0]=((-1.0)*x57);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x57)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((0.975090511065744)+(((0.900637787314419)*py*sj0))+(((-6.00425191542946)*pp))+(((0.900637787314419)*cj0*px)))) < -1-IKFAST_SINCOS_THRESH || (((0.975090511065744)+(((0.900637787314419)*py*sj0))+(((-6.00425191542946)*pp))+(((0.900637787314419)*cj0*px)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x59=IKasin(((0.975090511065744)+(((0.900637787314419)*py*sj0))+(((-6.00425191542946)*pp))+(((0.900637787314419)*cj0*px))));
j2array[0]=((-2.84547750771483)+(((-1.0)*x59)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((0.296115145874965)+x59);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[2];
IkReal x60=(cj0*px);
IkReal x61=((0.295)*cj2);
IkReal x62=(py*sj0);
IkReal x63=((43.7037037037037)*cj2);
IkReal x64=((13.3333333333333)*sj2);
IkReal x65=(cj2*pz);
IkReal x66=((0.09)*sj2);
IkReal x67=(pz*sj2);
j1eval[0]=(sj2+(((43.7037037037037)*x67))+(((3.27777777777778)*cj2))+(((-13.3333333333333)*x65))+(((-1.0)*x60*x63))+(((-1.0)*x60*x64))+(((-40.0)*pz))+(((-1.0)*x62*x64))+(((-1.0)*x62*x63)));
j1eval[1]=IKsign(((((-1.0)*x61*x62))+(((0.00675)*sj2))+(((0.295)*x67))+(((-0.27)*pz))+(((0.022125)*cj2))+(((-0.09)*x65))+(((-1.0)*x60*x61))+(((-1.0)*x60*x66))+(((-1.0)*x62*x66))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x68=cj2*cj2;
IkReal x69=(cj0*px);
IkReal x70=(pz*sj2);
IkReal x71=((13.3333333333333)*cj2);
IkReal x72=(py*sj0);
IkReal x73=((43.7037037037037)*sj2);
IkReal x74=((0.295)*sj2);
IkReal x75=(cj2*sj2);
IkReal x76=((0.09)*cj2);
IkReal x77=(cj2*pz);
j1eval[0]=((3.0)+(((43.7037037037037)*x77))+cj2+((x69*x73))+(((-40.0)*x72))+(((-1.0)*x71*x72))+(((-3.27777777777778)*sj2))+(((-1.0)*x69*x71))+((x72*x73))+(((-40.0)*x69))+(((13.3333333333333)*x70)));
j1eval[1]=((IKabs(((-0.159925)+(((0.1593)*sj2))+(((0.078925)*x68))+(pz*pz)+(((0.0531)*x75))+(((-0.0486)*cj2)))))+(IKabs(((0.02655)+(((0.078925)*x75))+((pz*x72))+(((-0.075)*pz))+(((-0.0243)*sj2))+(((-0.0531)*x68))+(((-0.07965)*cj2))+((pz*x69))))));
j1eval[2]=IKsign(((0.02025)+(((-0.022125)*sj2))+(((0.00675)*cj2))+((x69*x74))+(((0.295)*x77))+(((-1.0)*x72*x76))+(((-1.0)*x69*x76))+((x72*x74))+(((0.09)*x70))+(((-0.27)*x72))+(((-0.27)*x69))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x78=cj0*cj0;
IkReal x79=py*py;
IkReal x80=px*px;
IkReal x81=pz*pz;
IkReal x82=(py*sj0);
IkReal x83=(cj0*px);
IkReal x84=(x78*x79);
IkReal x85=(x78*x80);
IkReal x86=(x82*x83);
j1eval[0]=((-1.0)+(((177.777777777778)*x84))+(((26.6666666666667)*x82))+(((26.6666666666667)*x83))+(((-177.777777777778)*x79))+(((-177.777777777778)*x85))+(((-177.777777777778)*x81))+(((-355.555555555556)*x86)));
j1eval[1]=IKsign(((-0.005625)+(((0.15)*x82))+(((0.15)*x83))+(((-2.0)*x86))+x84+(((-1.0)*x81))+(((-1.0)*x85))+(((-1.0)*x79))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x87=py*py;
IkReal x88=cj0*cj0;
IkReal x89=(cj0*px);
IkReal x90=((0.295)*cj2);
IkReal x91=((0.09)*sj2);
IkReal x92=(py*sj0);
IkReal x93=((0.295)*sj2);
IkReal x94=((0.09)*cj2);
CheckValue<IkReal> x95=IKPowWithIntegerCheck(IKsign(((-0.005625)+(((0.15)*x89))+(((0.15)*x92))+(((-2.0)*x89*x92))+(((-1.0)*x87))+(((-1.0)*(pz*pz)))+(((-1.0)*x88*(px*px)))+((x87*x88)))),-1);
if(!x95.valid){
continue;
}
CheckValue<IkReal> x96 = IKatan2WithCheck(IkReal(((0.02025)+(((-0.022125)*sj2))+(((-1.0)*pz*x90))+(((-1.0)*pz*x91))+((x89*x93))+((x92*x93))+(((0.00675)*cj2))+(((-1.0)*x92*x94))+(((-0.27)*x92))+(((-1.0)*x89*x94))+(((-0.27)*x89)))),((((-1.0)*pz*x93))+(((0.00675)*sj2))+(((0.27)*pz))+(((-1.0)*x90*x92))+(((-1.0)*x91*x92))+((pz*x94))+(((0.022125)*cj2))+(((-1.0)*x89*x90))+(((-1.0)*x89*x91))),IKFAST_ATAN2_MAGTHRESH);
if(!x96.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x95.value)))+(x96.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x97=IKsin(j1);
IkReal x98=IKcos(j1);
IkReal x99=(cj0*px);
IkReal x100=((0.09)*cj2);
IkReal x101=(py*sj0);
IkReal x102=((0.295)*sj2);
IkReal x103=((1.0)*pz);
IkReal x104=((0.09)*sj2);
IkReal x105=((0.295)*cj2);
IkReal x106=((0.295)*x97);
IkReal x107=((1.0)*x98);
IkReal x108=((0.54)*x97);
evalcond[0]=((-0.27)+(((-1.0)*x103*x98))+((x101*x97))+(((-1.0)*x100))+((x97*x99))+x102+(((-0.075)*x97)));
evalcond[1]=((((-1.0)*x107*x99))+(((-1.0)*x103*x97))+(((-1.0)*x101*x107))+(((0.075)*x98))+x104+x105);
evalcond[2]=(((x102*x98))+(((-1.0)*x103))+(((-1.0)*x100*x98))+((x105*x97))+(((-0.27)*x98))+((x104*x97)));
evalcond[3]=((0.0166)+(((0.15)*x99))+(((-0.54)*pz*x98))+(((-1.0)*pp))+((x108*x99))+(((0.15)*x101))+((x101*x108))+(((-0.0405)*x97)));
evalcond[4]=((0.075)+(((-1.0)*x102*x97))+((x100*x97))+(((-1.0)*x99))+(((0.27)*x97))+((x105*x98))+(((-1.0)*x101))+((x104*x98)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x470=cj2*cj2;
IkReal x471=(cj0*px);
IkReal x472=((0.295)*sj2);
IkReal x473=(cj2*sj2);
IkReal x474=((0.09)*cj2);
IkReal x475=(py*sj0);
CheckValue<IkReal> x476=IKPowWithIntegerCheck(IKsign(((0.02025)+(((-0.022125)*sj2))+((x471*x472))+(((0.09)*pz*sj2))+(((0.295)*cj2*pz))+((x472*x475))+(((0.00675)*cj2))+(((-1.0)*x471*x474))+(((-0.27)*x475))+(((-0.27)*x471))+(((-1.0)*x474*x475)))),-1);
if(!x476.valid){
continue;
}
CheckValue<IkReal> x477 = IKatan2WithCheck(IkReal(((-0.159925)+(((0.1593)*sj2))+(pz*pz)+(((0.078925)*x470))+(((0.0531)*x473))+(((-0.0486)*cj2)))),((0.02655)+(((-0.0531)*x470))+(((-0.075)*pz))+(((-0.0243)*sj2))+(((0.078925)*x473))+((pz*x471))+((pz*x475))+(((-0.07965)*cj2))),IKFAST_ATAN2_MAGTHRESH);
if(!x477.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x476.value)))+(x477.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x478=IKsin(j1);
IkReal x479=IKcos(j1);
IkReal x480=(cj0*px);
IkReal x481=((0.09)*cj2);
IkReal x482=(py*sj0);
IkReal x483=((0.295)*sj2);
IkReal x484=((1.0)*pz);
IkReal x485=((0.09)*sj2);
IkReal x486=((0.295)*cj2);
IkReal x487=((0.295)*x478);
IkReal x488=((1.0)*x479);
IkReal x489=((0.54)*x478);
evalcond[0]=((-0.27)+(((-1.0)*x481))+((x478*x480))+((x478*x482))+x483+(((-1.0)*x479*x484))+(((-0.075)*x478)));
evalcond[1]=((((0.075)*x479))+x485+x486+(((-1.0)*x480*x488))+(((-1.0)*x482*x488))+(((-1.0)*x478*x484)));
evalcond[2]=((((-1.0)*x484))+((x478*x485))+((x478*x486))+(((-1.0)*x479*x481))+(((-0.27)*x479))+((x479*x483)));
evalcond[3]=((0.0166)+(((-1.0)*pp))+(((0.15)*x480))+(((0.15)*x482))+((x480*x489))+(((-0.0405)*x478))+((x482*x489))+(((-0.54)*pz*x479)));
evalcond[4]=((0.075)+(((0.27)*x478))+(((-1.0)*x482))+(((-1.0)*x480))+((x478*x481))+((x479*x486))+((x479*x485))+(((-1.0)*x478*x483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x490=cj2*cj2;
IkReal x491=((0.295)*cj2);
IkReal x492=(cj0*px);
IkReal x493=(cj2*sj2);
IkReal x494=(py*sj0);
IkReal x495=((1.0)*pz);
IkReal x496=((0.09)*sj2);
CheckValue<IkReal> x497=IKPowWithIntegerCheck(IKsign(((((-1.0)*x494*x496))+(((0.00675)*sj2))+(((-1.0)*x491*x494))+(((-1.0)*x491*x492))+(((-0.09)*cj2*pz))+(((0.295)*pz*sj2))+(((-0.27)*pz))+(((0.022125)*cj2))+(((-1.0)*x492*x496)))),-1);
if(!x497.valid){
continue;
}
CheckValue<IkReal> x498 = IKatan2WithCheck(IkReal(((0.02655)+(((-1.0)*x494*x495))+(((-0.0243)*sj2))+(((-0.07965)*cj2))+(((0.075)*pz))+(((0.078925)*x493))+(((-0.0531)*x490))+(((-1.0)*x492*x495)))),((-0.0081)+(pz*pz)+(((-0.078925)*x490))+(((-0.0531)*x493))),IKFAST_ATAN2_MAGTHRESH);
if(!x498.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x497.value)))+(x498.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x499=IKsin(j1);
IkReal x500=IKcos(j1);
IkReal x501=(cj0*px);
IkReal x502=((0.09)*cj2);
IkReal x503=(py*sj0);
IkReal x504=((0.295)*sj2);
IkReal x505=((1.0)*pz);
IkReal x506=((0.09)*sj2);
IkReal x507=((0.295)*cj2);
IkReal x508=((0.295)*x499);
IkReal x509=((1.0)*x500);
IkReal x510=((0.54)*x499);
evalcond[0]=((-0.27)+(((-1.0)*x502))+(((-0.075)*x499))+x504+((x499*x503))+((x499*x501))+(((-1.0)*x500*x505)));
evalcond[1]=((((-1.0)*x499*x505))+(((-1.0)*x501*x509))+(((-1.0)*x503*x509))+x506+x507+(((0.075)*x500)));
evalcond[2]=(((x500*x504))+(((-1.0)*x505))+((x499*x507))+((x499*x506))+(((-0.27)*x500))+(((-1.0)*x500*x502)));
evalcond[3]=((0.0166)+((x501*x510))+((x503*x510))+(((-0.54)*pz*x500))+(((0.15)*x501))+(((0.15)*x503))+(((-1.0)*pp))+(((-0.0405)*x499)));
evalcond[4]=((0.075)+(((0.27)*x499))+((x500*x506))+((x500*x507))+(((-1.0)*x499*x504))+(((-1.0)*x501))+(((-1.0)*x503))+((x499*x502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x109=((1.0)*cj0);
IkReal x110=(r11*sj0);
IkReal x111=(r10*sj0);
IkReal x112=((1.0)*cj2);
IkReal x113=(cj1*sj2);
IkReal x114=(r12*sj0);
IkReal x115=(((cj2*sj1))+x113);
IkReal x116=((((-1.0)*cj1*x112))+((sj1*sj2)));
IkReal x117=(sj0*x116);
IkReal x118=(cj0*x115);
IkReal x119=(cj0*x116);
IkReal x120=((((-1.0)*sj1*x112))+(((-1.0)*x113)));
new_r00=(((x111*x115))+((r20*x116))+((r00*x118)));
new_r01=(((x110*x115))+((r21*x116))+((r01*x118)));
new_r02=(((r22*x116))+((r02*x118))+((x114*x115)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x109)));
new_r11=((((-1.0)*r11*x109))+((r01*sj0)));
new_r12=((((-1.0)*r12*x109))+((r02*sj0)));
new_r20=(((x111*x116))+((r00*x119))+((r20*x120)));
new_r21=(((x110*x116))+((r21*x120))+((r01*x119)));
new_r22=(((r02*x119))+((x114*x116))+((r22*x120)));
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=new_r22;
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3eval[2];
IkReal x121=((1.0)*cj0);
IkReal x122=(r11*sj0);
IkReal x123=(r10*sj0);
IkReal x124=((1.0)*cj2);
IkReal x125=(cj1*sj2);
IkReal x126=(r12*sj0);
IkReal x127=(((cj2*sj1))+x125);
IkReal x128=x116;
IkReal x129=(sj0*x128);
IkReal x130=(cj0*x127);
IkReal x131=(cj0*x128);
IkReal x132=x120;
new_r00=(((r00*x130))+((x123*x127))+((r20*x128)));
new_r01=(((r21*x128))+((x122*x127))+((r01*x130)));
new_r02=(((r02*x130))+((r22*x128))+((x126*x127)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x121)));
new_r11=(((r01*sj0))+(((-1.0)*r11*x121)));
new_r12=((((-1.0)*r12*x121))+((r02*sj0)));
new_r20=(((r00*x131))+((x123*x128))+((r20*x132)));
new_r21=(((r21*x132))+((x122*x128))+((r01*x131)));
new_r22=(((r02*x131))+((r22*x132))+((x126*x128)));
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x133=((1.0)*cj0);
IkReal x134=(r11*sj0);
IkReal x135=(r10*sj0);
IkReal x136=((1.0)*cj2);
IkReal x137=(cj1*sj2);
IkReal x138=(r12*sj0);
IkReal x139=(((cj2*sj1))+x137);
IkReal x140=x116;
IkReal x141=(sj0*x140);
IkReal x142=(cj0*x139);
IkReal x143=(cj0*x140);
IkReal x144=x120;
new_r00=(((r20*x140))+((x135*x139))+((r00*x142)));
new_r01=(((r01*x142))+((r21*x140))+((x134*x139)));
new_r02=(((x138*x139))+((r02*x142))+((r22*x140)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x133)));
new_r11=(((r01*sj0))+(((-1.0)*r11*x133)));
new_r12=((((-1.0)*r12*x133))+((r02*sj0)));
new_r20=(((r20*x144))+((r00*x143))+((x135*x140)));
new_r21=(((r01*x143))+((r21*x144))+((x134*x140)));
new_r22=(((x138*x140))+((r02*x143))+((r22*x144)));
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x146 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x146.valid){
continue;
}
IkReal x145=x146.value;
j3array[0]=((-1.0)*x145);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x145)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x147=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj3*x147))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x147))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x147))+(((-1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x147))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj3*x147))+(((-1.0)*new_r00*sj3))), ((((-1.0)*sj3*x147))+((cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x148=IKsin(j5);
IkReal x149=IKcos(j5);
IkReal x150=((1.0)*sj3);
IkReal x151=((1.0)*x149);
IkReal x152=(sj3*x148);
IkReal x153=((1.0)*x148);
IkReal x154=(cj3*x151);
evalcond[0]=(((new_r11*sj3))+x148+((cj3*new_r01)));
evalcond[1]=(((cj3*x148))+new_r01+((sj3*x149)));
evalcond[2]=((((-1.0)*x151))+((new_r10*sj3))+((cj3*new_r00)));
evalcond[3]=((((-1.0)*x153))+((cj3*new_r10))+(((-1.0)*new_r00*x150)));
evalcond[4]=((((-1.0)*x151))+((cj3*new_r11))+(((-1.0)*new_r01*x150)));
evalcond[5]=((((-1.0)*x154))+x152+new_r00);
evalcond[6]=((((-1.0)*x154))+x152+new_r11);
evalcond[7]=((((-1.0)*cj3*x153))+new_r10+(((-1.0)*x149*x150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x156 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x156.valid){
continue;
}
IkReal x155=x156.value;
j3array[0]=((-1.0)*x155);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x155)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x157=((1.0)*sj3);
if( IKabs((((cj3*new_r01))+(((-1.0)*new_r00*x157)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x157)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj3*new_r01))+(((-1.0)*new_r00*x157))))+IKsqr(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x157))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj3*new_r01))+(((-1.0)*new_r00*x157))), ((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x157))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x158=IKsin(j5);
IkReal x159=IKcos(j5);
IkReal x160=((1.0)*sj3);
IkReal x161=((1.0)*x158);
IkReal x162=(sj3*x159);
IkReal x163=((1.0)*x159);
IkReal x164=(cj3*x161);
evalcond[0]=(((new_r10*sj3))+x159+((cj3*new_r00)));
evalcond[1]=((((-1.0)*x161))+((new_r11*sj3))+((cj3*new_r01)));
evalcond[2]=(((cj3*x159))+new_r00+((sj3*x158)));
evalcond[3]=((((-1.0)*new_r00*x160))+(((-1.0)*x161))+((cj3*new_r10)));
evalcond[4]=((((-1.0)*x163))+((cj3*new_r11))+(((-1.0)*new_r01*x160)));
evalcond[5]=((((-1.0)*x164))+x162+new_r01);
evalcond[6]=((((-1.0)*x164))+x162+new_r10);
evalcond[7]=((((-1.0)*x158*x160))+(((-1.0)*cj3*x163))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x166=IKPowWithIntegerCheck(sj4,-1);
if(!x166.valid){
continue;
}
IkReal x165=x166.value;
CheckValue<IkReal> x167=IKPowWithIntegerCheck(new_r12,-1);
if(!x167.valid){
continue;
}
if( IKabs((x165*(x167.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r02*new_r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x165)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x165*(x167.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r02*new_r02)))))))+IKsqr((new_r02*x165))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x165*(x167.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r02*new_r02)))))), (new_r02*x165));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x168=IKcos(j3);
IkReal x169=IKsin(j3);
IkReal x170=((1.0)*sj4);
IkReal x171=((1.0)*cj4);
IkReal x172=(new_r12*x169);
IkReal x173=(new_r02*x168);
evalcond[0]=((((-1.0)*x168*x170))+new_r02);
evalcond[1]=(new_r12+(((-1.0)*x169*x170)));
evalcond[2]=(((new_r12*x168))+(((-1.0)*new_r02*x169)));
evalcond[3]=((((-1.0)*x170))+x173+x172);
evalcond[4]=(((new_r22*sj4))+(((-1.0)*x171*x173))+(((-1.0)*x171*x172)));
evalcond[5]=((((-1.0)*new_r20*x171))+(((-1.0)*new_r00*x168*x170))+(((-1.0)*new_r10*x169*x170)));
evalcond[6]=((((-1.0)*new_r21*x171))+(((-1.0)*new_r11*x169*x170))+(((-1.0)*new_r01*x168*x170)));
evalcond[7]=((1.0)+(((-1.0)*x170*x172))+(((-1.0)*x170*x173))+(((-1.0)*new_r22*x171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x174=((1.0)*cj0);
IkReal x175=(r11*sj0);
IkReal x176=(r10*sj0);
IkReal x177=((1.0)*cj2);
IkReal x178=(cj1*sj2);
IkReal x179=(r12*sj0);
IkReal x180=(((cj2*sj1))+x178);
IkReal x181=x116;
IkReal x182=(sj0*x181);
IkReal x183=(cj0*x180);
IkReal x184=(cj0*x181);
IkReal x185=x120;
new_r00=(((x176*x180))+((r00*x183))+((r20*x181)));
new_r01=(((r01*x183))+((x175*x180))+((r21*x181)));
new_r02=(((x179*x180))+((r02*x183))+((r22*x181)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x174)));
new_r11=((((-1.0)*r11*x174))+((r01*sj0)));
new_r12=(((r02*sj0))+(((-1.0)*r12*x174)));
new_r20=(((x176*x181))+((r00*x184))+((r20*x185)));
new_r21=(((r01*x184))+((x175*x181))+((r21*x185)));
new_r22=(((x179*x181))+((r02*x184))+((r22*x185)));
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x186=((1.0)*cj0);
IkReal x187=(r11*sj0);
IkReal x188=(r10*sj0);
IkReal x189=((1.0)*cj2);
IkReal x190=(cj1*sj2);
IkReal x191=(r12*sj0);
IkReal x192=(((cj2*sj1))+x190);
IkReal x193=x116;
IkReal x194=(sj0*x193);
IkReal x195=(cj0*x192);
IkReal x196=(cj0*x193);
IkReal x197=x120;
new_r00=(((r00*x195))+((x188*x192))+((r20*x193)));
new_r01=(((x187*x192))+((r01*x195))+((r21*x193)));
new_r02=(((x191*x192))+((r22*x193))+((r02*x195)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x186)));
new_r11=((((-1.0)*r11*x186))+((r01*sj0)));
new_r12=((((-1.0)*r12*x186))+((r02*sj0)));
new_r20=(((r00*x196))+((x188*x193))+((r20*x197)));
new_r21=(((x187*x193))+((r01*x196))+((r21*x197)));
new_r22=(((x191*x193))+((r22*x197))+((r02*x196)));
j5eval[0]=sj3;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x198=((1.0)*cj0);
IkReal x199=(r11*sj0);
IkReal x200=(r10*sj0);
IkReal x201=((1.0)*cj2);
IkReal x202=(cj1*sj2);
IkReal x203=(r12*sj0);
IkReal x204=(((cj2*sj1))+x202);
IkReal x205=x116;
IkReal x206=(sj0*x205);
IkReal x207=(cj0*x204);
IkReal x208=(cj0*x205);
IkReal x209=x120;
new_r00=(((x200*x204))+((r00*x207))+((r20*x205)));
new_r01=(((r01*x207))+((r21*x205))+((x199*x204)));
new_r02=(((r22*x205))+((x203*x204))+((r02*x207)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x198)));
new_r11=(((r01*sj0))+(((-1.0)*r11*x198)));
new_r12=((((-1.0)*r12*x198))+((r02*sj0)));
new_r20=(((x200*x205))+((r00*x208))+((r20*x209)));
new_r21=(((r01*x208))+((r21*x209))+((x199*x205)));
new_r22=(((r22*x209))+((x203*x205))+((r02*x208)));
j5eval[0]=cj3;
j5eval[1]=cj4;
j5eval[2]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x210=(new_r22+(((-1.0)*cj4)));
IkReal x211=((((-1.0)*sj4))+new_r12);
IkReal x212=((1.0)*cj4);
IkReal x213=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x210;
evalcond[2]=x210;
evalcond[3]=new_r02;
evalcond[4]=x211;
evalcond[5]=x211;
evalcond[6]=((((-1.0)*new_r12*x212))+((new_r22*sj4)));
evalcond[7]=((((-1.0)*new_r10*x213))+(((-1.0)*new_r20*x212)));
evalcond[8]=((((-1.0)*new_r11*x213))+(((-1.0)*new_r21*x212)));
evalcond[9]=((1.0)+(((-1.0)*new_r12*x213))+(((-1.0)*new_r22*x212)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x214 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x214.valid){
continue;
}
CheckValue<IkReal> x215=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x215.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x214.value)+(((1.5707963267949)*(x215.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x216=IKsin(j5);
IkReal x217=IKcos(j5);
IkReal x218=((1.0)*new_r22);
IkReal x219=((1.0)*x216);
IkReal x220=((1.0)*x217);
evalcond[0]=(new_r20+((new_r12*x217)));
evalcond[1]=(((new_r22*x216))+new_r11);
evalcond[2]=((((-1.0)*new_r12*x219))+new_r21);
evalcond[3]=((((-1.0)*x217*x218))+new_r10);
evalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x219)));
evalcond[5]=((((-1.0)*new_r01))+(((-1.0)*x220)));
evalcond[6]=((((-1.0)*new_r10*x218))+((new_r12*new_r20))+x217);
evalcond[7]=((((-1.0)*new_r11*x218))+((new_r12*new_r21))+(((-1.0)*x219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x221=(new_r22+(((-1.0)*cj4)));
IkReal x222=((1.0)*cj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x221;
evalcond[2]=x221;
evalcond[3]=new_r02;
evalcond[4]=(sj4+new_r12);
evalcond[5]=((((-1.0)*sj4))+(((-1.0)*new_r12)));
evalcond[6]=(((cj4*new_r12))+((new_r22*sj4)));
evalcond[7]=(((new_r10*sj4))+(((-1.0)*new_r20*x222)));
evalcond[8]=(((new_r11*sj4))+(((-1.0)*new_r21*x222)));
evalcond[9]=((1.0)+((new_r12*sj4))+(((-1.0)*new_r22*x222)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r00, new_r01);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x223=IKsin(j5);
IkReal x224=IKcos(j5);
IkReal x225=((1.0)*new_r12);
IkReal x226=((1.0)*x223);
IkReal x227=((1.0)*x224);
evalcond[0]=(((new_r12*x223))+new_r21);
evalcond[1]=(new_r00+(((-1.0)*x226)));
evalcond[2]=(new_r01+(((-1.0)*x227)));
evalcond[3]=((((-1.0)*x224*x225))+new_r20);
evalcond[4]=(((new_r22*x223))+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*new_r22*x227)));
evalcond[6]=(x224+((new_r10*new_r22))+(((-1.0)*new_r20*x225)));
evalcond[7]=(((new_r11*new_r22))+(((-1.0)*new_r21*x225))+(((-1.0)*x226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x228=(new_r12*sj3);
IkReal x229=(new_r11*sj3);
IkReal x230=((1.0)*sj3);
IkReal x231=((1.0)*cj3);
IkReal x232=((((-1.0)*new_r02*x230))+((cj3*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x231))+new_r02);
evalcond[3]=((((-1.0)*x230))+new_r12);
evalcond[4]=x232;
evalcond[5]=x232;
evalcond[6]=((-1.0)+x228+((cj3*new_r02)));
evalcond[7]=(x229+((cj3*new_r01)));
evalcond[8]=(((new_r10*sj3))+((cj3*new_r00)));
evalcond[9]=((((-1.0)*new_r10*x230))+(((-1.0)*new_r00*x231)));
evalcond[10]=((((-1.0)*new_r01*x231))+(((-1.0)*x229)));
evalcond[11]=((1.0)+(((-1.0)*new_r02*x231))+(((-1.0)*x228)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x233=IKcos(j5);
IkReal x234=IKsin(j5);
IkReal x235=((1.0)*new_r12);
IkReal x236=((1.0)*x234);
IkReal x237=((1.0)*x233);
evalcond[0]=(x233+new_r20);
evalcond[1]=((((-1.0)*x236))+new_r21);
evalcond[2]=(((new_r12*x233))+new_r01);
evalcond[3]=(((new_r12*x234))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x237))+new_r11);
evalcond[5]=((((-1.0)*new_r02*x236))+new_r10);
evalcond[6]=((((-1.0)*x236))+((new_r02*new_r10))+(((-1.0)*new_r00*x235)));
evalcond[7]=((((-1.0)*x237))+((new_r02*new_r11))+(((-1.0)*new_r01*x235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x238=((((-1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x239=(((new_r10*sj3))+((cj3*new_r00)));
IkReal x240=(((new_r11*sj3))+((cj3*new_r01)));
IkReal x241=((1.0)+((new_r12*sj3))+((cj3*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj3+new_r02);
evalcond[3]=(sj3+new_r12);
evalcond[4]=x238;
evalcond[5]=x238;
evalcond[6]=x241;
evalcond[7]=x240;
evalcond[8]=x239;
evalcond[9]=x239;
evalcond[10]=x240;
evalcond[11]=x241;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x242=IKcos(j5);
IkReal x243=IKsin(j5);
IkReal x244=((1.0)*new_r02);
IkReal x245=((1.0)*x242);
IkReal x246=((1.0)*x243);
evalcond[0]=(x243+new_r21);
evalcond[1]=((((-1.0)*x245))+new_r20);
evalcond[2]=(new_r11+((new_r02*x242)));
evalcond[3]=(new_r10+((new_r02*x243)));
evalcond[4]=((((-1.0)*new_r12*x245))+new_r01);
evalcond[5]=((((-1.0)*new_r12*x246))+new_r00);
evalcond[6]=(((new_r00*new_r12))+(((-1.0)*new_r10*x244))+(((-1.0)*x246)));
evalcond[7]=(((new_r01*new_r12))+(((-1.0)*new_r11*x244))+(((-1.0)*x245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x247=(new_r12*sj3);
IkReal x248=((1.0)*new_r02);
IkReal x249=((((-1.0)*sj3*x248))+((cj3*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x249;
evalcond[7]=x249;
evalcond[8]=(x247+((cj3*new_r02)));
evalcond[9]=((((-1.0)*x247))+(((-1.0)*cj3*x248)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x250=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj3*x250))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x250))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x250))+(((-1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x250))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj3*x250))+(((-1.0)*new_r00*sj3))), ((((-1.0)*sj3*x250))+((cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x251=IKsin(j5);
IkReal x252=IKcos(j5);
IkReal x253=((1.0)*sj3);
IkReal x254=((1.0)*x252);
IkReal x255=(sj3*x251);
IkReal x256=((1.0)*x251);
IkReal x257=(cj3*x254);
evalcond[0]=(((new_r11*sj3))+x251+((cj3*new_r01)));
evalcond[1]=(((cj3*x251))+((sj3*x252))+new_r01);
evalcond[2]=(((new_r10*sj3))+((cj3*new_r00))+(((-1.0)*x254)));
evalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x253))+(((-1.0)*x256)));
evalcond[4]=((((-1.0)*new_r01*x253))+((cj3*new_r11))+(((-1.0)*x254)));
evalcond[5]=(x255+new_r00+(((-1.0)*x257)));
evalcond[6]=(x255+new_r11+(((-1.0)*x257)));
evalcond[7]=((((-1.0)*x252*x253))+(((-1.0)*cj3*x256))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x258=((((-1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x259=(((new_r12*sj3))+((cj3*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x258;
evalcond[7]=x258;
evalcond[8]=x259;
evalcond[9]=x259;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x260=((1.0)*sj3);
if( IKabs(((((-1.0)*new_r00*x260))+((cj3*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x260))+(((-1.0)*cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x260))+((cj3*new_r01))))+IKsqr(((((-1.0)*new_r01*x260))+(((-1.0)*cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*new_r00*x260))+((cj3*new_r01))), ((((-1.0)*new_r01*x260))+(((-1.0)*cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x261=IKsin(j5);
IkReal x262=IKcos(j5);
IkReal x263=((1.0)*sj3);
IkReal x264=((1.0)*x261);
IkReal x265=(sj3*x262);
IkReal x266=((1.0)*x262);
IkReal x267=(cj3*x264);
evalcond[0]=(((new_r10*sj3))+x262+((cj3*new_r00)));
evalcond[1]=(((new_r11*sj3))+((cj3*new_r01))+(((-1.0)*x264)));
evalcond[2]=(((sj3*x261))+new_r00+((cj3*x262)));
evalcond[3]=((((-1.0)*new_r00*x263))+((cj3*new_r10))+(((-1.0)*x264)));
evalcond[4]=((((-1.0)*new_r01*x263))+((cj3*new_r11))+(((-1.0)*x266)));
evalcond[5]=(x265+new_r01+(((-1.0)*x267)));
evalcond[6]=(x265+new_r10+(((-1.0)*x267)));
evalcond[7]=((((-1.0)*cj3*x266))+(((-1.0)*x261*x263))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x268=(new_r22+(((-1.0)*cj4)));
IkReal x269=((((-1.0)*sj4))+new_r02);
IkReal x270=((1.0)*cj4);
IkReal x271=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=x268;
evalcond[2]=x268;
evalcond[3]=x269;
evalcond[4]=new_r12;
evalcond[5]=x269;
evalcond[6]=(((new_r22*sj4))+(((-1.0)*new_r02*x270)));
evalcond[7]=((((-1.0)*new_r00*x271))+(((-1.0)*new_r20*x270)));
evalcond[8]=((((-1.0)*new_r01*x271))+(((-1.0)*new_r21*x270)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x270))+(((-1.0)*new_r02*x271)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x272=IKcos(j5);
IkReal x273=IKsin(j5);
IkReal x274=((1.0)*new_r22);
IkReal x275=((1.0)*x273);
evalcond[0]=(new_r20+((new_r02*x272)));
evalcond[1]=((((-1.0)*x275))+new_r10);
evalcond[2]=((((-1.0)*x272))+new_r11);
evalcond[3]=(((new_r22*x273))+new_r01);
evalcond[4]=((((-1.0)*new_r02*x275))+new_r21);
evalcond[5]=((((-1.0)*x272*x274))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x274))+x272+((new_r02*new_r20)));
evalcond[7]=((((-1.0)*new_r01*x274))+(((-1.0)*x275))+((new_r02*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x276=(new_r22+(((-1.0)*cj4)));
IkReal x277=((1.0)*cj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=x276;
evalcond[2]=x276;
evalcond[3]=(sj4+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*sj4))+(((-1.0)*new_r02)));
evalcond[6]=(((cj4*new_r02))+((new_r22*sj4)));
evalcond[7]=(((new_r00*sj4))+(((-1.0)*new_r20*x277)));
evalcond[8]=(((new_r01*sj4))+(((-1.0)*new_r21*x277)));
evalcond[9]=((1.0)+((new_r02*sj4))+(((-1.0)*new_r22*x277)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x278 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x278.valid){
continue;
}
CheckValue<IkReal> x279=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x279.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x278.value)+(((1.5707963267949)*(x279.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x280=IKsin(j5);
IkReal x281=IKcos(j5);
IkReal x282=((1.0)*new_r02);
IkReal x283=((1.0)*x280);
IkReal x284=((1.0)*x281);
evalcond[0]=(((new_r02*x280))+new_r21);
evalcond[1]=((((-1.0)*x281*x282))+new_r20);
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x283)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x284)));
evalcond[4]=((((-1.0)*new_r01))+((new_r22*x280)));
evalcond[5]=((((-1.0)*new_r22*x284))+(((-1.0)*new_r00)));
evalcond[6]=(((new_r00*new_r22))+x281+(((-1.0)*new_r20*x282)));
evalcond[7]=(((new_r01*new_r22))+(((-1.0)*x283))+(((-1.0)*new_r21*x282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x286=IKPowWithIntegerCheck(sj4,-1);
if(!x286.valid){
continue;
}
IkReal x285=x286.value;
CheckValue<IkReal> x287=IKPowWithIntegerCheck(cj3,-1);
if(!x287.valid){
continue;
}
CheckValue<IkReal> x288=IKPowWithIntegerCheck(cj4,-1);
if(!x288.valid){
continue;
}
if( IKabs((x285*(x287.value)*(x288.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x285)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x285*(x287.value)*(x288.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4))))))+IKsqr(((-1.0)*new_r20*x285))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x285*(x287.value)*(x288.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4))))), ((-1.0)*new_r20*x285));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x289=IKsin(j5);
IkReal x290=IKcos(j5);
IkReal x291=(cj3*new_r00);
IkReal x292=(cj3*cj4);
IkReal x293=((1.0)*sj3);
IkReal x294=((1.0)*x289);
IkReal x295=(sj3*x289);
IkReal x296=((1.0)*x290);
evalcond[0]=(((sj4*x290))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*sj4*x294)));
evalcond[2]=(((new_r11*sj3))+((cj3*new_r01))+((cj4*x289)));
evalcond[3]=((((-1.0)*x294))+((cj3*new_r10))+(((-1.0)*new_r00*x293)));
evalcond[4]=((((-1.0)*new_r01*x293))+(((-1.0)*x296))+((cj3*new_r11)));
evalcond[5]=(((x289*x292))+new_r01+((sj3*x290)));
evalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x296))+x291);
evalcond[7]=(x295+new_r00+(((-1.0)*x292*x296)));
evalcond[8]=(((cj4*x295))+(((-1.0)*cj3*x296))+new_r11);
evalcond[9]=((((-1.0)*cj3*x294))+new_r10+(((-1.0)*cj4*x290*x293)));
evalcond[10]=(((new_r20*sj4))+(((-1.0)*cj4*x291))+(((-1.0)*cj4*new_r10*x293))+x290);
evalcond[11]=((((-1.0)*new_r01*x292))+(((-1.0)*x294))+(((-1.0)*cj4*new_r11*x293))+((new_r21*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x298=IKPowWithIntegerCheck(sj4,-1);
if(!x298.valid){
continue;
}
IkReal x297=x298.value;
CheckValue<IkReal> x299=IKPowWithIntegerCheck(sj3,-1);
if(!x299.valid){
continue;
}
if( IKabs((x297*(x299.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x297)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x297*(x299.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))))+IKsqr(((-1.0)*new_r20*x297))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x297*(x299.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))), ((-1.0)*new_r20*x297));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x300=IKsin(j5);
IkReal x301=IKcos(j5);
IkReal x302=(cj3*new_r00);
IkReal x303=(cj3*cj4);
IkReal x304=((1.0)*sj3);
IkReal x305=((1.0)*x300);
IkReal x306=(sj3*x300);
IkReal x307=((1.0)*x301);
evalcond[0]=(((sj4*x301))+new_r20);
evalcond[1]=((((-1.0)*sj4*x305))+new_r21);
evalcond[2]=(((new_r11*sj3))+((cj3*new_r01))+((cj4*x300)));
evalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x304))+(((-1.0)*x305)));
evalcond[4]=((((-1.0)*new_r01*x304))+((cj3*new_r11))+(((-1.0)*x307)));
evalcond[5]=(((sj3*x301))+new_r01+((x300*x303)));
evalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x307))+x302);
evalcond[7]=((((-1.0)*x303*x307))+x306+new_r00);
evalcond[8]=((((-1.0)*cj3*x307))+new_r11+((cj4*x306)));
evalcond[9]=((((-1.0)*cj3*x305))+(((-1.0)*cj4*x301*x304))+new_r10);
evalcond[10]=(((new_r20*sj4))+x301+(((-1.0)*cj4*x302))+(((-1.0)*cj4*new_r10*x304)));
evalcond[11]=((((-1.0)*new_r01*x303))+(((-1.0)*cj4*new_r11*x304))+((new_r21*sj4))+(((-1.0)*x305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x308=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x308.valid){
continue;
}
CheckValue<IkReal> x309 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x309.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x308.value)))+(x309.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x310=IKsin(j5);
IkReal x311=IKcos(j5);
IkReal x312=(cj3*new_r00);
IkReal x313=(cj3*cj4);
IkReal x314=((1.0)*sj3);
IkReal x315=((1.0)*x310);
IkReal x316=(sj3*x310);
IkReal x317=((1.0)*x311);
evalcond[0]=(((sj4*x311))+new_r20);
evalcond[1]=((((-1.0)*sj4*x315))+new_r21);
evalcond[2]=(((cj4*x310))+((new_r11*sj3))+((cj3*new_r01)));
evalcond[3]=((((-1.0)*new_r00*x314))+(((-1.0)*x315))+((cj3*new_r10)));
evalcond[4]=((((-1.0)*x317))+((cj3*new_r11))+(((-1.0)*new_r01*x314)));
evalcond[5]=(((x310*x313))+new_r01+((sj3*x311)));
evalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x317))+x312);
evalcond[7]=((((-1.0)*x313*x317))+x316+new_r00);
evalcond[8]=(((cj4*x316))+new_r11+(((-1.0)*cj3*x317)));
evalcond[9]=((((-1.0)*cj4*x311*x314))+new_r10+(((-1.0)*cj3*x315)));
evalcond[10]=((((-1.0)*cj4*new_r10*x314))+((new_r20*sj4))+x311+(((-1.0)*cj4*x312)));
evalcond[11]=((((-1.0)*new_r01*x313))+(((-1.0)*cj4*new_r11*x314))+(((-1.0)*x315))+((new_r21*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x318=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x318.valid){
continue;
}
CheckValue<IkReal> x319 = IKatan2WithCheck(IkReal(new_r12),new_r02,IKFAST_ATAN2_MAGTHRESH);
if(!x319.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x318.value)))+(x319.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x320=IKcos(j3);
IkReal x321=IKsin(j3);
IkReal x322=((1.0)*sj4);
IkReal x323=((1.0)*cj4);
IkReal x324=(new_r12*x321);
IkReal x325=(new_r02*x320);
evalcond[0]=((((-1.0)*x320*x322))+new_r02);
evalcond[1]=((((-1.0)*x321*x322))+new_r12);
evalcond[2]=(((new_r12*x320))+(((-1.0)*new_r02*x321)));
evalcond[3]=((((-1.0)*x322))+x324+x325);
evalcond[4]=((((-1.0)*x323*x325))+(((-1.0)*x323*x324))+((new_r22*sj4)));
evalcond[5]=((((-1.0)*new_r10*x321*x322))+(((-1.0)*new_r00*x320*x322))+(((-1.0)*new_r20*x323)));
evalcond[6]=((((-1.0)*new_r01*x320*x322))+(((-1.0)*new_r11*x321*x322))+(((-1.0)*new_r21*x323)));
evalcond[7]=((1.0)+(((-1.0)*new_r22*x323))+(((-1.0)*x322*x324))+(((-1.0)*x322*x325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x326=((1.0)*cj0);
IkReal x327=(r11*sj0);
IkReal x328=(r10*sj0);
IkReal x329=((1.0)*cj2);
IkReal x330=(cj1*sj2);
IkReal x331=(r12*sj0);
IkReal x332=(((cj2*sj1))+x330);
IkReal x333=x116;
IkReal x334=(sj0*x333);
IkReal x335=(cj0*x332);
IkReal x336=(cj0*x333);
IkReal x337=x120;
new_r00=(((r00*x335))+((r20*x333))+((x328*x332)));
new_r01=(((r01*x335))+((r21*x333))+((x327*x332)));
new_r02=(((r22*x333))+((x331*x332))+((r02*x335)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x326)));
new_r11=(((r01*sj0))+(((-1.0)*r11*x326)));
new_r12=((((-1.0)*r12*x326))+((r02*sj0)));
new_r20=(((r00*x336))+((r20*x337))+((x328*x333)));
new_r21=(((r01*x336))+((r21*x337))+((x327*x333)));
new_r22=(((r22*x337))+((x331*x333))+((r02*x336)));
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x338=((1.0)*cj0);
IkReal x339=(r11*sj0);
IkReal x340=(r10*sj0);
IkReal x341=((1.0)*cj2);
IkReal x342=(cj1*sj2);
IkReal x343=(r12*sj0);
IkReal x344=(((cj2*sj1))+x342);
IkReal x345=x116;
IkReal x346=(sj0*x345);
IkReal x347=(cj0*x344);
IkReal x348=(cj0*x345);
IkReal x349=x120;
new_r00=(((r00*x347))+((r20*x345))+((x340*x344)));
new_r01=(((r01*x347))+((r21*x345))+((x339*x344)));
new_r02=(((r22*x345))+((r02*x347))+((x343*x344)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x338)));
new_r11=(((r01*sj0))+(((-1.0)*r11*x338)));
new_r12=(((r02*sj0))+(((-1.0)*r12*x338)));
new_r20=(((r00*x348))+((r20*x349))+((x340*x345)));
new_r21=(((r01*x348))+((r21*x349))+((x339*x345)));
new_r22=(((r22*x349))+((r02*x348))+((x343*x345)));
j5eval[0]=sj3;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x350=((1.0)*cj0);
IkReal x351=(r11*sj0);
IkReal x352=(r10*sj0);
IkReal x353=((1.0)*cj2);
IkReal x354=(cj1*sj2);
IkReal x355=(r12*sj0);
IkReal x356=(((cj2*sj1))+x354);
IkReal x357=x116;
IkReal x358=(sj0*x357);
IkReal x359=(cj0*x356);
IkReal x360=(cj0*x357);
IkReal x361=x120;
new_r00=(((x352*x356))+((r00*x359))+((r20*x357)));
new_r01=(((r21*x357))+((r01*x359))+((x351*x356)));
new_r02=(((x355*x356))+((r22*x357))+((r02*x359)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x350)));
new_r11=((((-1.0)*r11*x350))+((r01*sj0)));
new_r12=((((-1.0)*r12*x350))+((r02*sj0)));
new_r20=(((r20*x361))+((r00*x360))+((x352*x357)));
new_r21=(((r01*x360))+((x351*x357))+((r21*x361)));
new_r22=(((x355*x357))+((r22*x361))+((r02*x360)));
j5eval[0]=cj3;
j5eval[1]=cj4;
j5eval[2]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x362=(new_r22+(((-1.0)*cj4)));
IkReal x363=((((-1.0)*sj4))+new_r12);
IkReal x364=((1.0)*cj4);
IkReal x365=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x362;
evalcond[2]=x362;
evalcond[3]=new_r02;
evalcond[4]=x363;
evalcond[5]=x363;
evalcond[6]=((((-1.0)*new_r12*x364))+((new_r22*sj4)));
evalcond[7]=((((-1.0)*new_r20*x364))+(((-1.0)*new_r10*x365)));
evalcond[8]=((((-1.0)*new_r11*x365))+(((-1.0)*new_r21*x364)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x364))+(((-1.0)*new_r12*x365)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x366 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x366.valid){
continue;
}
CheckValue<IkReal> x367=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x367.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x366.value)+(((1.5707963267949)*(x367.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x368=IKsin(j5);
IkReal x369=IKcos(j5);
IkReal x370=((1.0)*new_r22);
IkReal x371=((1.0)*x368);
IkReal x372=((1.0)*x369);
evalcond[0]=(new_r20+((new_r12*x369)));
evalcond[1]=(((new_r22*x368))+new_r11);
evalcond[2]=((((-1.0)*new_r12*x371))+new_r21);
evalcond[3]=((((-1.0)*x369*x370))+new_r10);
evalcond[4]=((((-1.0)*x371))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x372))+(((-1.0)*new_r01)));
evalcond[6]=(x369+((new_r12*new_r20))+(((-1.0)*new_r10*x370)));
evalcond[7]=((((-1.0)*x371))+((new_r12*new_r21))+(((-1.0)*new_r11*x370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x373=(new_r22+(((-1.0)*cj4)));
IkReal x374=((1.0)*cj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x373;
evalcond[2]=x373;
evalcond[3]=new_r02;
evalcond[4]=(sj4+new_r12);
evalcond[5]=((((-1.0)*sj4))+(((-1.0)*new_r12)));
evalcond[6]=(((cj4*new_r12))+((new_r22*sj4)));
evalcond[7]=((((-1.0)*new_r20*x374))+((new_r10*sj4)));
evalcond[8]=((((-1.0)*new_r21*x374))+((new_r11*sj4)));
evalcond[9]=((1.0)+((new_r12*sj4))+(((-1.0)*new_r22*x374)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r00, new_r01);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x375=IKsin(j5);
IkReal x376=IKcos(j5);
IkReal x377=((1.0)*new_r12);
IkReal x378=((1.0)*x375);
IkReal x379=((1.0)*x376);
evalcond[0]=(((new_r12*x375))+new_r21);
evalcond[1]=((((-1.0)*x378))+new_r00);
evalcond[2]=((((-1.0)*x379))+new_r01);
evalcond[3]=((((-1.0)*x376*x377))+new_r20);
evalcond[4]=((((-1.0)*new_r11))+((new_r22*x375)));
evalcond[5]=((((-1.0)*new_r22*x379))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r20*x377))+x376+((new_r10*new_r22)));
evalcond[7]=((((-1.0)*new_r21*x377))+(((-1.0)*x378))+((new_r11*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x380=(new_r12*sj3);
IkReal x381=(new_r11*sj3);
IkReal x382=((1.0)*sj3);
IkReal x383=((1.0)*cj3);
IkReal x384=((((-1.0)*new_r02*x382))+((cj3*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x383))+new_r02);
evalcond[3]=((((-1.0)*x382))+new_r12);
evalcond[4]=x384;
evalcond[5]=x384;
evalcond[6]=((-1.0)+x380+((cj3*new_r02)));
evalcond[7]=(x381+((cj3*new_r01)));
evalcond[8]=(((new_r10*sj3))+((cj3*new_r00)));
evalcond[9]=((((-1.0)*new_r10*x382))+(((-1.0)*new_r00*x383)));
evalcond[10]=((((-1.0)*new_r01*x383))+(((-1.0)*x381)));
evalcond[11]=((1.0)+(((-1.0)*new_r02*x383))+(((-1.0)*x380)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x385=IKcos(j5);
IkReal x386=IKsin(j5);
IkReal x387=((1.0)*new_r12);
IkReal x388=((1.0)*x386);
IkReal x389=((1.0)*x385);
evalcond[0]=(x385+new_r20);
evalcond[1]=((((-1.0)*x388))+new_r21);
evalcond[2]=(((new_r12*x385))+new_r01);
evalcond[3]=(((new_r12*x386))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x389))+new_r11);
evalcond[5]=((((-1.0)*new_r02*x388))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x387))+(((-1.0)*x388))+((new_r02*new_r10)));
evalcond[7]=((((-1.0)*new_r01*x387))+(((-1.0)*x389))+((new_r02*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x390=((((-1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x391=(((new_r10*sj3))+((cj3*new_r00)));
IkReal x392=(((new_r11*sj3))+((cj3*new_r01)));
IkReal x393=((1.0)+((new_r12*sj3))+((cj3*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj3+new_r02);
evalcond[3]=(sj3+new_r12);
evalcond[4]=x390;
evalcond[5]=x390;
evalcond[6]=x393;
evalcond[7]=x392;
evalcond[8]=x391;
evalcond[9]=x391;
evalcond[10]=x392;
evalcond[11]=x393;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x394=IKcos(j5);
IkReal x395=IKsin(j5);
IkReal x396=((1.0)*new_r02);
IkReal x397=((1.0)*x394);
IkReal x398=((1.0)*x395);
evalcond[0]=(x395+new_r21);
evalcond[1]=((((-1.0)*x397))+new_r20);
evalcond[2]=(new_r11+((new_r02*x394)));
evalcond[3]=(new_r10+((new_r02*x395)));
evalcond[4]=((((-1.0)*new_r12*x397))+new_r01);
evalcond[5]=((((-1.0)*new_r12*x398))+new_r00);
evalcond[6]=((((-1.0)*x398))+((new_r00*new_r12))+(((-1.0)*new_r10*x396)));
evalcond[7]=((((-1.0)*x397))+((new_r01*new_r12))+(((-1.0)*new_r11*x396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x399=(new_r12*sj3);
IkReal x400=((1.0)*new_r02);
IkReal x401=(((cj3*new_r12))+(((-1.0)*sj3*x400)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x401;
evalcond[7]=x401;
evalcond[8]=(x399+((cj3*new_r02)));
evalcond[9]=((((-1.0)*x399))+(((-1.0)*cj3*x400)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x402=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj3*x402))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj3*new_r00))+(((-1.0)*sj3*x402)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x402))+(((-1.0)*new_r00*sj3))))+IKsqr((((cj3*new_r00))+(((-1.0)*sj3*x402))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj3*x402))+(((-1.0)*new_r00*sj3))), (((cj3*new_r00))+(((-1.0)*sj3*x402))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x403=IKsin(j5);
IkReal x404=IKcos(j5);
IkReal x405=((1.0)*sj3);
IkReal x406=((1.0)*x404);
IkReal x407=(sj3*x403);
IkReal x408=((1.0)*x403);
IkReal x409=(cj3*x406);
evalcond[0]=(((new_r11*sj3))+x403+((cj3*new_r01)));
evalcond[1]=(((sj3*x404))+new_r01+((cj3*x403)));
evalcond[2]=(((new_r10*sj3))+((cj3*new_r00))+(((-1.0)*x406)));
evalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x405))+(((-1.0)*x408)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*new_r01*x405))+(((-1.0)*x406)));
evalcond[5]=(x407+new_r00+(((-1.0)*x409)));
evalcond[6]=(x407+new_r11+(((-1.0)*x409)));
evalcond[7]=((((-1.0)*cj3*x408))+(((-1.0)*x404*x405))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x410=((((-1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x411=(((new_r12*sj3))+((cj3*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x410;
evalcond[7]=x410;
evalcond[8]=x411;
evalcond[9]=x411;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x412=((1.0)*sj3);
if( IKabs((((cj3*new_r01))+(((-1.0)*new_r00*x412)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x412)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj3*new_r01))+(((-1.0)*new_r00*x412))))+IKsqr(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x412))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj3*new_r01))+(((-1.0)*new_r00*x412))), ((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x412))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x413=IKsin(j5);
IkReal x414=IKcos(j5);
IkReal x415=((1.0)*sj3);
IkReal x416=((1.0)*x413);
IkReal x417=(sj3*x414);
IkReal x418=((1.0)*x414);
IkReal x419=(cj3*x416);
evalcond[0]=(((new_r10*sj3))+x414+((cj3*new_r00)));
evalcond[1]=(((new_r11*sj3))+((cj3*new_r01))+(((-1.0)*x416)));
evalcond[2]=(((sj3*x413))+new_r00+((cj3*x414)));
evalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x415))+(((-1.0)*x416)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*x418))+(((-1.0)*new_r01*x415)));
evalcond[5]=(x417+new_r01+(((-1.0)*x419)));
evalcond[6]=(x417+new_r10+(((-1.0)*x419)));
evalcond[7]=((((-1.0)*cj3*x418))+(((-1.0)*x413*x415))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x420=(new_r22+(((-1.0)*cj4)));
IkReal x421=((((-1.0)*sj4))+new_r02);
IkReal x422=((1.0)*cj4);
IkReal x423=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=x420;
evalcond[2]=x420;
evalcond[3]=x421;
evalcond[4]=new_r12;
evalcond[5]=x421;
evalcond[6]=(((new_r22*sj4))+(((-1.0)*new_r02*x422)));
evalcond[7]=((((-1.0)*new_r00*x423))+(((-1.0)*new_r20*x422)));
evalcond[8]=((((-1.0)*new_r21*x422))+(((-1.0)*new_r01*x423)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x422))+(((-1.0)*new_r02*x423)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x424=IKcos(j5);
IkReal x425=IKsin(j5);
IkReal x426=((1.0)*new_r22);
IkReal x427=((1.0)*x425);
evalcond[0]=(new_r20+((new_r02*x424)));
evalcond[1]=((((-1.0)*x427))+new_r10);
evalcond[2]=((((-1.0)*x424))+new_r11);
evalcond[3]=(((new_r22*x425))+new_r01);
evalcond[4]=((((-1.0)*new_r02*x427))+new_r21);
evalcond[5]=((((-1.0)*x424*x426))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x426))+x424+((new_r02*new_r20)));
evalcond[7]=((((-1.0)*x427))+((new_r02*new_r21))+(((-1.0)*new_r01*x426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x428=(new_r22+(((-1.0)*cj4)));
IkReal x429=((1.0)*cj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=x428;
evalcond[2]=x428;
evalcond[3]=(sj4+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*sj4))+(((-1.0)*new_r02)));
evalcond[6]=(((cj4*new_r02))+((new_r22*sj4)));
evalcond[7]=(((new_r00*sj4))+(((-1.0)*new_r20*x429)));
evalcond[8]=(((new_r01*sj4))+(((-1.0)*new_r21*x429)));
evalcond[9]=((1.0)+((new_r02*sj4))+(((-1.0)*new_r22*x429)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x430 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x430.valid){
continue;
}
CheckValue<IkReal> x431=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x431.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x430.value)+(((1.5707963267949)*(x431.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x432=IKsin(j5);
IkReal x433=IKcos(j5);
IkReal x434=((1.0)*new_r02);
IkReal x435=((1.0)*x432);
IkReal x436=((1.0)*x433);
evalcond[0]=(new_r21+((new_r02*x432)));
evalcond[1]=((((-1.0)*x433*x434))+new_r20);
evalcond[2]=((((-1.0)*x435))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x436))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*new_r01))+((new_r22*x432)));
evalcond[5]=((((-1.0)*new_r00))+(((-1.0)*new_r22*x436)));
evalcond[6]=(((new_r00*new_r22))+x433+(((-1.0)*new_r20*x434)));
evalcond[7]=((((-1.0)*x435))+((new_r01*new_r22))+(((-1.0)*new_r21*x434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x438=IKPowWithIntegerCheck(sj4,-1);
if(!x438.valid){
continue;
}
IkReal x437=x438.value;
CheckValue<IkReal> x439=IKPowWithIntegerCheck(cj3,-1);
if(!x439.valid){
continue;
}
CheckValue<IkReal> x440=IKPowWithIntegerCheck(cj4,-1);
if(!x440.valid){
continue;
}
if( IKabs((x437*(x439.value)*(x440.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x437)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x437*(x439.value)*(x440.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4))))))+IKsqr(((-1.0)*new_r20*x437))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x437*(x439.value)*(x440.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4))))), ((-1.0)*new_r20*x437));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x441=IKsin(j5);
IkReal x442=IKcos(j5);
IkReal x443=(cj3*new_r00);
IkReal x444=(cj3*cj4);
IkReal x445=((1.0)*sj3);
IkReal x446=((1.0)*x441);
IkReal x447=(sj3*x441);
IkReal x448=((1.0)*x442);
evalcond[0]=(((sj4*x442))+new_r20);
evalcond[1]=((((-1.0)*sj4*x446))+new_r21);
evalcond[2]=(((cj4*x441))+((new_r11*sj3))+((cj3*new_r01)));
evalcond[3]=((((-1.0)*x446))+(((-1.0)*new_r00*x445))+((cj3*new_r10)));
evalcond[4]=((((-1.0)*x448))+(((-1.0)*new_r01*x445))+((cj3*new_r11)));
evalcond[5]=(((x441*x444))+((sj3*x442))+new_r01);
evalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x448))+x443);
evalcond[7]=((((-1.0)*x444*x448))+x447+new_r00);
evalcond[8]=((((-1.0)*cj3*x448))+((cj4*x447))+new_r11);
evalcond[9]=((((-1.0)*cj4*x442*x445))+(((-1.0)*cj3*x446))+new_r10);
evalcond[10]=(((new_r20*sj4))+(((-1.0)*cj4*new_r10*x445))+(((-1.0)*cj4*x443))+x442);
evalcond[11]=((((-1.0)*x446))+(((-1.0)*new_r01*x444))+(((-1.0)*cj4*new_r11*x445))+((new_r21*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x450=IKPowWithIntegerCheck(sj4,-1);
if(!x450.valid){
continue;
}
IkReal x449=x450.value;
CheckValue<IkReal> x451=IKPowWithIntegerCheck(sj3,-1);
if(!x451.valid){
continue;
}
if( IKabs((x449*(x451.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x449)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x449*(x451.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))))+IKsqr(((-1.0)*new_r20*x449))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x449*(x451.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))), ((-1.0)*new_r20*x449));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x452=IKsin(j5);
IkReal x453=IKcos(j5);
IkReal x454=(cj3*new_r00);
IkReal x455=(cj3*cj4);
IkReal x456=((1.0)*sj3);
IkReal x457=((1.0)*x452);
IkReal x458=(sj3*x452);
IkReal x459=((1.0)*x453);
evalcond[0]=(((sj4*x453))+new_r20);
evalcond[1]=((((-1.0)*sj4*x457))+new_r21);
evalcond[2]=(((cj4*x452))+((new_r11*sj3))+((cj3*new_r01)));
evalcond[3]=((((-1.0)*new_r00*x456))+(((-1.0)*x457))+((cj3*new_r10)));
evalcond[4]=((((-1.0)*new_r01*x456))+(((-1.0)*x459))+((cj3*new_r11)));
evalcond[5]=(((sj3*x453))+((x452*x455))+new_r01);
evalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x459))+x454);
evalcond[7]=(x458+(((-1.0)*x455*x459))+new_r00);
evalcond[8]=(((cj4*x458))+new_r11+(((-1.0)*cj3*x459)));
evalcond[9]=((((-1.0)*cj4*x453*x456))+new_r10+(((-1.0)*cj3*x457)));
evalcond[10]=(((new_r20*sj4))+(((-1.0)*cj4*x454))+(((-1.0)*cj4*new_r10*x456))+x453);
evalcond[11]=((((-1.0)*x457))+(((-1.0)*cj4*new_r11*x456))+(((-1.0)*new_r01*x455))+((new_r21*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x460=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x460.valid){
continue;
}
CheckValue<IkReal> x461 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x461.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x460.value)))+(x461.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x462=IKsin(j5);
IkReal x463=IKcos(j5);
IkReal x464=(cj3*new_r00);
IkReal x465=(cj3*cj4);
IkReal x466=((1.0)*sj3);
IkReal x467=((1.0)*x462);
IkReal x468=(sj3*x462);
IkReal x469=((1.0)*x463);
evalcond[0]=(((sj4*x463))+new_r20);
evalcond[1]=((((-1.0)*sj4*x467))+new_r21);
evalcond[2]=(((cj4*x462))+((new_r11*sj3))+((cj3*new_r01)));
evalcond[3]=((((-1.0)*x467))+(((-1.0)*new_r00*x466))+((cj3*new_r10)));
evalcond[4]=((((-1.0)*new_r01*x466))+(((-1.0)*x469))+((cj3*new_r11)));
evalcond[5]=(((sj3*x463))+new_r01+((x462*x465)));
evalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x469))+x464);
evalcond[7]=((((-1.0)*x465*x469))+x468+new_r00);
evalcond[8]=(((cj4*x468))+new_r11+(((-1.0)*cj3*x469)));
evalcond[9]=((((-1.0)*cj4*x463*x466))+new_r10+(((-1.0)*cj3*x467)));
evalcond[10]=(((new_r20*sj4))+(((-1.0)*cj4*x464))+x463+(((-1.0)*cj4*new_r10*x466)));
evalcond[11]=((((-1.0)*x467))+(((-1.0)*cj4*new_r11*x466))+(((-1.0)*new_r01*x465))+((new_r21*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "91a2b4cd201a030d8d22848745147445"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
