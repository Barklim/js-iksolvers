{"version":3,"file":"./solvers/kr30l16_arm.html","sources":["./solvers/kr30l16_arm.tmp.cpp"],"names":[],"mappingstMA;AAAA;AAAA;;;;;;;;AAFA;AAAA;AAAA;;;;;AA4MA;;;;;;;;;;;;;;;AAovFA;AACA;AACA;AACA;AAAA;AACA;;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAEA;;AAAA;AAAA;AACA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AACA","sourcesContent":["/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE\n/// \\author Rosen Diankov\n///\n/// Licensed under the Apache License, Version 2.0 (the \"License\");\n/// you may not use this file except in compliance with the License.\n/// You may obtain a copy of the License at\n///     http://www.apache.org/licenses/LICENSE-2.0\n/// \n/// Unless required by applicable law or agreed to in writing, software\n/// distributed under the License is distributed on an \"AS IS\" BASIS,\n/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n/// See the License for the specific language governing permissions and\n/// limitations under the License.\n///\n/// ikfast version 0x10000048 generated on 2015-05-22 19:40:53.347109\n/// To compile with gcc:\n///     gcc -lstdc++ ik.cpp\n/// To compile without any main function as a shared object (might need -llapack):\n///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp\n#define IKFAST_HAS_LIBRARY\n#include \"ikfast.h\" // found inside share/openrave-X.Y/python/ikfast.h\nusing namespace ikfast;\n\n// check if the included ikfast version matches what this file was compiled with\n#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]\nIKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);\n\n#include <cmath>\n#include <vector>\n#include <limits>\n#include <algorithm>\n#include <complex>\n\n#ifndef IKFAST_ASSERT\n#include <stdexcept>\n#include <sstream>\n#include <iostream>\n\n#ifdef _MSC_VER\n#ifndef __PRETTY_FUNCTION__\n#define __PRETTY_FUNCTION__ __FUNCDNAME__\n#endif\n#endif\n\n#ifndef __PRETTY_FUNCTION__\n#define __PRETTY_FUNCTION__ __func__\n#endif\n\n#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << \"ikfast exception: \" << __FILE__ << \":\" << __LINE__ << \": \" <<__PRETTY_FUNCTION__ << \": Assertion '\" << #b << \"' failed\"; throw std::runtime_error(ss.str()); } }\n\n#endif\n\n#if defined(_MSC_VER)\n#define IKFAST_ALIGNED16(x) __declspec(align(16)) x\n#else\n#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))\n#endif\n\n#define IK2PI  ((IkReal)6.28318530717959)\n#define IKPI  ((IkReal)3.14159265358979)\n#define IKPI_2  ((IkReal)1.57079632679490)\n\n#ifdef _MSC_VER\n#ifndef isnan\n#define isnan _isnan\n#endif\n#ifndef isinf\n#define isinf _isinf\n#endif\n//#ifndef isfinite\n//#define isfinite _isfinite\n//#endif\n#endif // _MSC_VER\n\n// lapack routines\nextern \"C\" {\n  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);\n  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);\n  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);\n  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);\n  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);\n  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);\n}\n\nusing namespace std; // necessary to get std math routines\n\n#ifdef IKFAST_NAMESPACE\nnamespace IKFAST_NAMESPACE {\n#endif\n\ninline float IKabs(float f) { return fabsf(f); }\ninline double IKabs(double f) { return fabs(f); }\n\ninline float IKsqr(float f) { return f*f; }\ninline double IKsqr(double f) { return f*f; }\n\ninline float IKlog(float f) { return logf(f); }\ninline double IKlog(double f) { return log(f); }\n\n// allows asin and acos to exceed 1\n#ifndef IKFAST_SINCOS_THRESH\n#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)\n#endif\n\n// used to check input to atan2 for degenerate cases\n#ifndef IKFAST_ATAN2_MAGTHRESH\n#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)\n#endif\n\n// minimum distance of separate solutions\n#ifndef IKFAST_SOLUTION_THRESH\n#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)\n#endif\n\n// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate\n#ifndef IKFAST_EVALCOND_THRESH\n#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)\n#endif\n\n\ninline float IKasin(float f)\n{\nIKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver\nif( f <= -1 ) return float(-IKPI_2);\nelse if( f >= 1 ) return float(IKPI_2);\nreturn asinf(f);\n}\ninline double IKasin(double f)\n{\nIKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver\nif( f <= -1 ) return -IKPI_2;\nelse if( f >= 1 ) return IKPI_2;\nreturn asin(f);\n}\n\n// return positive value in [0,y)\ninline float IKfmod(float x, float y)\n{\n    while(x < 0) {\n        x += y;\n    }\n    return fmodf(x,y);\n}\n\n// return positive value in [0,y)\ninline double IKfmod(double x, double y)\n{\n    while(x < 0) {\n        x += y;\n    }\n    return fmod(x,y);\n}\n\ninline float IKacos(float f)\n{\nIKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver\nif( f <= -1 ) return float(IKPI);\nelse if( f >= 1 ) return float(0);\nreturn acosf(f);\n}\ninline double IKacos(double f)\n{\nIKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver\nif( f <= -1 ) return IKPI;\nelse if( f >= 1 ) return 0;\nreturn acos(f);\n}\ninline float IKsin(float f) { return sinf(f); }\ninline double IKsin(double f) { return sin(f); }\ninline float IKcos(float f) { return cosf(f); }\ninline double IKcos(double f) { return cos(f); }\ninline float IKtan(float f) { return tanf(f); }\ninline double IKtan(double f) { return tan(f); }\ninline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }\ninline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }\ninline float IKatan2Simple(float fy, float fx) {\n    return atan2f(fy,fx);\n}\ninline float IKatan2(float fy, float fx) {\n    if( isnan(fy) ) {\n        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned\n        return float(IKPI_2);\n    }\n    else if( isnan(fx) ) {\n        return 0;\n    }\n    return atan2f(fy,fx);\n}\ninline double IKatan2Simple(double fy, double fx) {\n    return atan2(fy,fx);\n}\ninline double IKatan2(double fy, double fx) {\n    if( isnan(fy) ) {\n        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned\n        return IKPI_2;\n    }\n    else if( isnan(fx) ) {\n        return 0;\n    }\n    return atan2(fy,fx);\n}\n\ntemplate <typename T>\nstruct CheckValue\n{\n    T value;\n    bool valid;\n};\n\ntemplate <typename T>\ninline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)\n{\n    CheckValue<T> ret;\n    ret.valid = false;\n    ret.value = 0;\n    if( !isnan(fy) && !isnan(fx) ) {\n        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {\n            ret.value = IKatan2Simple(fy,fx);\n            ret.valid = true;\n        }\n    }\n    return ret;\n}\n\ninline float IKsign(float f) {\n    if( f > 0 ) {\n        return float(1);\n    }\n    else if( f < 0 ) {\n        return float(-1);\n    }\n    return 0;\n}\n\ninline double IKsign(double f) {\n    if( f > 0 ) {\n        return 1.0;\n    }\n    else if( f < 0 ) {\n        return -1.0;\n    }\n    return 0;\n}\n\ntemplate <typename T>\ninline CheckValue<T> IKPowWithIntegerCheck(T f, int n)\n{\n    CheckValue<T> ret;\n    ret.valid = true;\n    if( n == 0 ) {\n        ret.value = 1.0;\n        return ret;\n    }\n    else if( n == 1 )\n    {\n        ret.value = f;\n        return ret;\n    }\n    else if( n < 0 )\n    {\n        if( f == 0 )\n        {\n            ret.valid = false;\n            ret.value = (T)1.0e30;\n            return ret;\n        }\n        if( n == -1 ) {\n            ret.value = T(1.0)/f;\n            return ret;\n        }\n    }\n\n    int num = n > 0 ? n : -n;\n    if( num == 2 ) {\n        ret.value = f*f;\n    }\n    else if( num == 3 ) {\n        ret.value = f*f*f;\n    }\n    else {\n        ret.value = 1.0;\n        while(num>0) {\n            if( num & 1 ) {\n                ret.value *= f;\n            }\n            num >>= 1;\n            f *= f;\n        }\n    }\n    \n    if( n < 0 ) {\n        ret.value = T(1.0)/ret.value;\n    }\n    return ret;\n}\n\n/// solves the forward kinematics equations.\n/// \\param pfree is an array specifying the free joints of the chain.\nIKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {\nIkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54;\nx0=IKcos(j[0]);\nx1=IKcos(j[1]);\nx2=IKcos(j[2]);\nx3=IKsin(j[1]);\nx4=IKsin(j[2]);\nx5=IKcos(j[3]);\nx6=IKsin(j[0]);\nx7=IKsin(j[3]);\nx8=IKcos(j[4]);\nx9=IKsin(j[4]);\nx10=IKcos(j[5]);\nx11=IKsin(j[5]);\nx12=((1.545)*x6);\nx13=((1.895)*x5);\nx14=((0.145)*x0);\nx15=((1.545)*x0);\nx16=((2.16)*x5);\nx17=((1.0)*x8);\nx18=((1.0)*x6);\nx19=((1.0)*x0);\nx20=((1.895)*x6);\nx21=((1.895)*x0);\nx22=((1.0)*x9);\nx23=(x0*x7);\nx24=(x11*x7);\nx25=(x3*x4);\nx26=(x1*x2);\nx27=(x3*x6);\nx28=(x1*x4);\nx29=(x5*x9);\nx30=(x2*x3);\nx31=(x19*x7);\nx32=((1.0)*x26);\nx33=(x19*x25);\nx34=((((-1.0)*x32))+x25);\nx35=((((1.0)*x28))+(((1.0)*x30)));\nx36=(x34*x7);\nx37=(x34*x5*x8);\nx38=(x35*x9);\nx39=((((-1.0)*x19*x26))+x33);\nx40=(x18*(((((-1.0)*x26))+x25)));\nx41=(x19*((x30+x28)));\nx42=((-1.0)*x41);\nx43=(x18*(((((-1.0)*x30))+(((-1.0)*x28)))));\nx44=(x18*((x30+x28)));\nx45=(x39*x9);\nx46=(x40*x9);\nx47=(x43*x5);\nx48=(x44*x7);\nx49=(x41*x7);\nx50=(((x42*x5))+((x6*x7)));\nx51=(((x5*x6))+x49);\nx52=((((-1.0)*x31))+x47);\nx53=((((-1.0)*x48))+((x19*x5)));\nx54=(x50*x8);\neerot[0]=(((x50*x9))+((x8*(((((-1.0)*x33))+((x0*x26)))))));\neerot[1]=(((x11*(((((-1.0)*x22*x39))+(((-1.0)*x17*x50))))))+((x10*x51)));\neerot[2]=(((x11*x51))+((x10*((x45+x54)))));\nIkReal x55=((1.0)*x14);\neetrans[0]=((((-1.0)*x15*x25))+(((-1.2)*x0*x3))+(((0.35)*x0))+((x8*(((((-1.0)*x21*x26))+((x21*x25))))))+((x9*(((((-1.0)*x20*x7))+(((-1.0)*x13*x42))))))+((x11*(((((-2.16)*x49))+(((-1.0)*x16*x6))))))+(((-1.0)*x30*x55))+(((-1.0)*x28*x55))+((x10*(((((-2.16)*x45))+(((-2.16)*x54))))))+((x15*x26)));\neerot[3]=(((x9*(((((-1.0)*x47))+x31))))+((x40*x8)));\neerot[4]=(((x11*((x46+((x52*x8))))))+((x10*x53)));\neerot[5]=(((x10*(((((-1.0)*x22*x40))+(((-1.0)*x17*x52))))))+((x11*x53)));\neetrans[1]=(((x9*(((((-1.0)*x21*x7))+((x13*x43))))))+(((-1.0)*x12*x26))+(((-0.35)*x6))+(((1.2)*x27))+(((0.145)*x2*x27))+(((0.145)*x28*x6))+((x8*((((x20*x26))+(((-1.0)*x20*x25))))))+((x10*(((((2.16)*x8*(((((-1.0)*x23))+x47))))+(((2.16)*x46))))))+((x12*x25))+((x11*(((((2.16)*x48))+(((-1.0)*x0*x16)))))));\neerot[6]=(((x35*x8))+((x29*(((((-1.0)*x25))+x32)))));\neerot[7]=(((x10*x36))+((x11*((x38+x37)))));\neerot[8]=(((x10*(((((-1.0)*x17*x34*x5))+(((-1.0)*x22*x35))))))+((x24*x34)));\neetrans[2]=((0.815)+((x29*(((((1.895)*x25))+(((-1.895)*x26))))))+((x10*(((((2.16)*x38))+((x16*x34*x8))))))+((x8*(((((-1.895)*x30))+(((-1.895)*x28))))))+(((1.545)*x30))+(((1.2)*x1))+(((-0.145)*x25))+((x24*(((((2.16)*x26))+(((-2.16)*x25))))))+(((1.545)*x28))+(((0.145)*x26)));\n}\n\nIKFAST_API int GetNumFreeParameters() { return 0; }\nIKFAST_API int* GetFreeParameters() { return NULL; }\nIKFAST_API int GetNumJoints() { return 6; }\n\nIKFAST_API int GetIkRealSize() { return sizeof(IkReal); }\n\nIKFAST_API int GetIkType() { return 0x67000001; }\n\nclass IKSolver {\npublic:\nIkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;\nunsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;\n\nIkReal j100, cj100, sj100;\nunsigned char _ij100[2], _nj100;\nbool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {\nj0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; \nfor(int dummyiter = 0; dummyiter < 1; ++dummyiter) {\n    solutions.Clear();\nr00 = eerot[0*3+0];\nr01 = eerot[0*3+1];\nr02 = eerot[0*3+2];\nr10 = eerot[1*3+0];\nr11 = eerot[1*3+1];\nr12 = eerot[1*3+2];\nr20 = eerot[2*3+0];\nr21 = eerot[2*3+1];\nr22 = eerot[2*3+2];\npx = eetrans[0]; py = eetrans[1]; pz = eetrans[2];\n\nnew_r00=r02;\nnew_r01=r01;\nnew_r02=((-1.0)*r00);\nnew_px=((((2.16)*r02))+(((1.895)*r00))+px);\nnew_r10=((-1.0)*r12);\nnew_r11=((-1.0)*r11);\nnew_r12=r10;\nnew_py=((((-2.16)*r12))+(((-1.0)*py))+(((-1.895)*r10)));\nnew_r20=((-1.0)*r22);\nnew_r21=((-1.0)*r21);\nnew_r22=r20;\nnew_pz=((0.815)+(((-1.895)*r20))+(((-2.16)*r22))+(((-1.0)*pz)));\nr00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;\nIkReal x56=((1.0)*px);\nIkReal x57=((1.0)*pz);\nIkReal x58=((1.0)*py);\npp=((px*px)+(py*py)+(pz*pz));\nnpx=(((px*r00))+((py*r10))+((pz*r20)));\nnpy=(((px*r01))+((py*r11))+((pz*r21)));\nnpz=(((px*r02))+((py*r12))+((pz*r22)));\nrxp0_0=((((-1.0)*r20*x58))+((pz*r10)));\nrxp0_1=(((px*r20))+(((-1.0)*r00*x57)));\nrxp0_2=((((-1.0)*r10*x56))+((py*r00)));\nrxp1_0=((((-1.0)*r21*x58))+((pz*r11)));\nrxp1_1=(((px*r21))+(((-1.0)*r01*x57)));\nrxp1_2=((((-1.0)*r11*x56))+((py*r01)));\nrxp2_0=(((pz*r12))+(((-1.0)*r22*x58)));\nrxp2_1=(((px*r22))+(((-1.0)*r02*x57)));\nrxp2_2=((((-1.0)*r12*x56))+((py*r02)));\n{\nIkReal j0eval[1];\nj0eval[0]=((IKabs(px))+(IKabs(py)));\nif( IKabs(j0eval[0]) < 0.0000010000000000  )\n{\ncontinue; // no branches [j0, j1, j2]\n\n} else\n{\n{\nIkReal j0array[2], cj0array[2], sj0array[2];\nbool j0valid[2]={false};\n_nj0 = 2;\nCheckValue<IkReal> x60 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);\nif(!x60.valid){\ncontinue;\n}\nIkReal x59=x60.value;\nj0array[0]=((-1.0)*x59);\nsj0array[0]=IKsin(j0array[0]);\ncj0array[0]=IKcos(j0array[0]);\nj0array[1]=((3.14159265358979)+(((-1.0)*x59)));\nsj0array[1]=IKsin(j0array[1]);\ncj0array[1]=IKcos(j0array[1]);\nif( j0array[0] > IKPI )\n{\n    j0array[0]-=IK2PI;\n}\nelse if( j0array[0] < -IKPI )\n{    j0array[0]+=IK2PI;\n}\nj0valid[0] = true;\nif( j0array[1] > IKPI )\n{\n    j0array[1]-=IK2PI;\n}\nelse if( j0array[1] < -IKPI )\n{    j0array[1]+=IK2PI;\n}\nj0valid[1] = true;\nfor(int ij0 = 0; ij0 < 2; ++ij0)\n{\nif( !j0valid[ij0] )\n{\n    continue;\n}\n_ij0[0] = ij0; _ij0[1] = -1;\nfor(int iij0 = ij0+1; iij0 < 2; ++iij0)\n{\nif( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )\n{\n    j0valid[iij0]=false; _ij0[1] = iij0; break; \n}\n}\nj0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];\n\n{\nIkReal j2array[2], cj2array[2], sj2array[2];\nbool j2valid[2]={false};\n_nj2 = 2;\nif( (((1.00033716573729)+(((-0.268507244765817)*pp))+(((0.187955071336072)*py*sj0))+(((0.187955071336072)*cj0*px)))) < -1-IKFAST_SINCOS_THRESH || (((1.00033716573729)+(((-0.268507244765817)*pp))+(((0.187955071336072)*py*sj0))+(((0.187955071336072)*cj0*px)))) > 1+IKFAST_SINCOS_THRESH )\n    continue;\nIkReal x61=IKasin(((1.00033716573729)+(((-0.268507244765817)*pp))+(((0.187955071336072)*py*sj0))+(((0.187955071336072)*cj0*px))));\nj2array[0]=((-0.09357703178482)+(((-1.0)*x61)));\nsj2array[0]=IKsin(j2array[0]);\ncj2array[0]=IKcos(j2array[0]);\nj2array[1]=((3.04801562180497)+x61);\nsj2array[1]=IKsin(j2array[1]);\ncj2array[1]=IKcos(j2array[1]);\nif( j2array[0] > IKPI )\n{\n    j2array[0]-=IK2PI;\n}\nelse if( j2array[0] < -IKPI )\n{    j2array[0]+=IK2PI;\n}\nj2valid[0] = true;\nif( j2array[1] > IKPI )\n{\n    j2array[1]-=IK2PI;\n}\nelse if( j2array[1] < -IKPI )\n{    j2array[1]+=IK2PI;\n}\nj2valid[1] = true;\nfor(int ij2 = 0; ij2 < 2; ++ij2)\n{\nif( !j2valid[ij2] )\n{\n    continue;\n}\n_ij2[0] = ij2; _ij2[1] = -1;\nfor(int iij2 = ij2+1; iij2 < 2; ++iij2)\n{\nif( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )\n{\n    j2valid[iij2]=false; _ij2[1] = iij2; break; \n}\n}\nj2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];\n\n{\nIkReal j1eval[3];\nIkReal x62=cj2*cj2;\nIkReal x63=(pz*sj2);\nIkReal x64=(cj2*sj2);\nIkReal x65=(cj0*px);\nIkReal x66=((30.4433497536946)*cj2);\nIkReal x67=((1.545)*cj2);\nIkReal x68=(cj2*pz);\nIkReal x69=(py*sj0);\nIkReal x70=(sj2*x69);\nj1eval[0]=((((-1.0)*x66*x69))+(((-1.0)*sj2))+(((-23.6453201970443)*pz))+(((-30.4433497536946)*x63))+(((-2.85714285714286)*x68))+(((2.85714285714286)*x70))+(((2.85714285714286)*sj2*x65))+(((-1.0)*x65*x66))+(((10.6551724137931)*cj2)));\nj1eval[1]=IKsign(((((0.145)*sj2*x65))+(((-1.0)*x67*x69))+(((-1.545)*x63))+(((0.54075)*cj2))+(((-0.145)*x68))+(((-1.0)*x65*x67))+(((-1.2)*pz))+(((0.145)*x70))+(((-0.05075)*sj2))));\nj1eval[2]=((IKabs(((-0.224025)+(((-0.35)*pz))+(((0.44805)*x62))+(((2.366)*x64))+(((-0.174)*sj2))+(((1.854)*cj2))+((pz*x69))+((pz*x65)))))+(IKabs(((-0.021025)+(((-2.366)*x62))+(((0.44805)*x64))+(pz*pz)))));\nif( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal j1eval[2];\nIkReal x71=(cj0*px);\nIkReal x72=(pz*sj2);\nIkReal x73=((30.4433497536946)*sj2);\nIkReal x74=(py*sj0);\nIkReal x75=((1.545)*sj2);\nIkReal x76=((2.85714285714286)*cj2);\nIkReal x77=(cj2*pz);\nIkReal x78=((0.145)*cj2);\nj1eval[0]=((-8.27586206896552)+(((-30.4433497536946)*x77))+(((-10.6551724137931)*sj2))+(((2.85714285714286)*x72))+(((23.6453201970443)*x71))+(((23.6453201970443)*x74))+((x73*x74))+((x74*x76))+(((-1.0)*cj2))+((x71*x76))+((x71*x73)));\nj1eval[1]=IKsign(((-0.42)+(((1.2)*x74))+(((1.2)*x71))+(((-1.545)*x77))+(((-0.05075)*cj2))+((x74*x75))+((x74*x78))+(((0.145)*x72))+((x71*x75))+((x71*x78))+(((-0.54075)*sj2))));\nif( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j1eval[2];\nIkReal x79=py*py;\nIkReal x80=cj0*cj0;\nIkReal x81=px*px;\nIkReal x82=pz*pz;\nIkReal x83=(cj0*px);\nIkReal x84=(py*sj0);\nIkReal x85=(x79*x80);\nIkReal x86=(x80*x81);\nj1eval[0]=((-1.0)+(((-8.16326530612245)*x79))+(((8.16326530612245)*x85))+(((-16.3265306122449)*x83*x84))+(((-8.16326530612245)*x82))+(((-8.16326530612245)*x86))+(((5.71428571428571)*x83))+(((5.71428571428571)*x84)));\nj1eval[1]=IKsign(((-0.1225)+(((-2.0)*x83*x84))+x85+(((-1.0)*x86))+(((-1.0)*x82))+(((-1.0)*x79))+(((0.7)*x83))+(((0.7)*x84))));\nif( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )\n{\ncontinue; // no branches [j1]\n\n} else\n{\n{\nIkReal j1array[1], cj1array[1], sj1array[1];\nbool j1valid[1]={false};\n_nj1 = 1;\nIkReal x87=py*py;\nIkReal x88=cj0*cj0;\nIkReal x89=(py*sj0);\nIkReal x90=(cj0*px);\nIkReal x91=((1.545)*sj2);\nIkReal x92=((1.545)*cj2);\nIkReal x93=((0.145)*cj2);\nIkReal x94=((0.145)*sj2);\nCheckValue<IkReal> x95=IKPowWithIntegerCheck(IKsign(((-0.1225)+(((-2.0)*x89*x90))+(((-1.0)*x87))+(((-1.0)*(pz*pz)))+(((-1.0)*x88*(px*px)))+(((0.7)*x89))+(((0.7)*x90))+((x87*x88)))),-1);\nif(!x95.valid){\ncontinue;\n}\nCheckValue<IkReal> x96 = IKatan2WithCheck(IkReal(((-0.42)+(((-1.0)*pz*x94))+(((1.2)*x90))+((x89*x91))+((x89*x93))+((pz*x92))+((x90*x91))+((x90*x93))+(((-0.05075)*cj2))+(((1.2)*x89))+(((-0.54075)*sj2)))),((((1.2)*pz))+((x89*x94))+(((-1.0)*x90*x92))+((pz*x93))+((pz*x91))+(((0.54075)*cj2))+((x90*x94))+(((-0.05075)*sj2))+(((-1.0)*x89*x92))),IKFAST_ATAN2_MAGTHRESH);\nif(!x96.valid){\ncontinue;\n}\nj1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x95.value)))+(x96.value));\nsj1array[0]=IKsin(j1array[0]);\ncj1array[0]=IKcos(j1array[0]);\nif( j1array[0] > IKPI )\n{\n    j1array[0]-=IK2PI;\n}\nelse if( j1array[0] < -IKPI )\n{    j1array[0]+=IK2PI;\n}\nj1valid[0] = true;\nfor(int ij1 = 0; ij1 < 1; ++ij1)\n{\nif( !j1valid[ij1] )\n{\n    continue;\n}\n_ij1[0] = ij1; _ij1[1] = -1;\nfor(int iij1 = ij1+1; iij1 < 1; ++iij1)\n{\nif( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )\n{\n    j1valid[iij1]=false; _ij1[1] = iij1; break; \n}\n}\nj1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];\n{\nIkReal evalcond[5];\nIkReal x97=IKsin(j1);\nIkReal x98=IKcos(j1);\nIkReal x99=((0.145)*sj2);\nIkReal x100=(cj0*px);\nIkReal x101=(py*sj0);\nIkReal x102=((0.145)*cj2);\nIkReal x103=((1.545)*cj2);\nIkReal x104=((1.545)*sj2);\nIkReal x105=((1.0)*x98);\nIkReal x106=((2.4)*x97);\nIkReal x107=(pz*x98);\nevalcond[0]=((1.2)+((x100*x97))+((x101*x97))+x104+x107+x102+(((-0.35)*x97)));\nevalcond[1]=((((-1.0)*x101*x105))+(((-1.0)*x100*x105))+(((0.35)*x98))+x103+((pz*x97))+(((-1.0)*x99)));\nevalcond[2]=((((1.2)*x98))+((x103*x97))+((x102*x98))+pz+(((-1.0)*x97*x99))+((x104*x98)));\nevalcond[3]=((0.84555)+(((0.7)*x100))+(((0.7)*x101))+(((-1.0)*x101*x106))+(((-1.0)*x100*x106))+(((0.84)*x97))+(((-1.0)*pp))+(((-2.4)*x107)));\nevalcond[4]=((0.35)+(((-1.0)*x98*x99))+(((-1.0)*x102*x97))+((x103*x98))+(((-1.2)*x97))+(((-1.0)*x100))+(((-1.0)*x101))+(((-1.0)*x104*x97)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j1array[1], cj1array[1], sj1array[1];\nbool j1valid[1]={false};\n_nj1 = 1;\nIkReal x377=cj2*cj2;\nIkReal x378=(cj2*sj2);\nIkReal x379=(cj0*px);\nIkReal x380=(py*sj0);\nIkReal x381=((1.545)*sj2);\nIkReal x382=((0.145)*cj2);\nIkReal x383=((1.0)*pz);\nCheckValue<IkReal> x384=IKPowWithIntegerCheck(IKsign(((-0.42)+(((1.2)*x380))+(((-1.545)*cj2*pz))+((x379*x382))+((x379*x381))+(((0.145)*pz*sj2))+(((-0.05075)*cj2))+((x380*x381))+((x380*x382))+(((1.2)*x379))+(((-0.54075)*sj2)))),-1);\nif(!x384.valid){\ncontinue;\n}\nCheckValue<IkReal> x385 = IKatan2WithCheck(IkReal(((-3.827025)+(((-0.44805)*x378))+(pz*pz)+(((-0.348)*cj2))+(((-3.708)*sj2))+(((2.366)*x377)))),((-0.224025)+(((-1.0)*x380*x383))+(((-1.0)*x379*x383))+(((-0.174)*sj2))+(((1.854)*cj2))+(((0.35)*pz))+(((0.44805)*x377))+(((2.366)*x378))),IKFAST_ATAN2_MAGTHRESH);\nif(!x385.valid){\ncontinue;\n}\nj1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x384.value)))+(x385.value));\nsj1array[0]=IKsin(j1array[0]);\ncj1array[0]=IKcos(j1array[0]);\nif( j1array[0] > IKPI )\n{\n    j1array[0]-=IK2PI;\n}\nelse if( j1array[0] < -IKPI )\n{    j1array[0]+=IK2PI;\n}\nj1valid[0] = true;\nfor(int ij1 = 0; ij1 < 1; ++ij1)\n{\nif( !j1valid[ij1] )\n{\n    continue;\n}\n_ij1[0] = ij1; _ij1[1] = -1;\nfor(int iij1 = ij1+1; iij1 < 1; ++iij1)\n{\nif( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )\n{\n    j1valid[iij1]=false; _ij1[1] = iij1; break; \n}\n}\nj1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];\n{\nIkReal evalcond[5];\nIkReal x386=IKsin(j1);\nIkReal x387=IKcos(j1);\nIkReal x388=((0.145)*sj2);\nIkReal x389=(cj0*px);\nIkReal x390=(py*sj0);\nIkReal x391=((0.145)*cj2);\nIkReal x392=((1.545)*cj2);\nIkReal x393=((1.545)*sj2);\nIkReal x394=((1.0)*x387);\nIkReal x395=((2.4)*x386);\nIkReal x396=(pz*x387);\nevalcond[0]=((1.2)+((x386*x389))+x396+x391+x393+(((-0.35)*x386))+((x386*x390)));\nevalcond[1]=((((0.35)*x387))+(((-1.0)*x389*x394))+x392+(((-1.0)*x388))+(((-1.0)*x390*x394))+((pz*x386)));\nevalcond[2]=((((1.2)*x387))+pz+(((-1.0)*x386*x388))+((x387*x391))+((x387*x393))+((x386*x392)));\nevalcond[3]=((0.84555)+(((-1.0)*x389*x395))+(((0.7)*x390))+(((-1.0)*pp))+(((-1.0)*x390*x395))+(((0.84)*x386))+(((-2.4)*x396))+(((0.7)*x389)));\nevalcond[4]=((0.35)+(((-1.0)*x390))+(((-1.0)*x386*x391))+(((-1.0)*x386*x393))+(((-1.0)*x387*x388))+(((-1.0)*x389))+(((-1.2)*x386))+((x387*x392)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j1array[1], cj1array[1], sj1array[1];\nbool j1valid[1]={false};\n_nj1 = 1;\nIkReal x397=cj2*cj2;\nIkReal x398=((1.545)*cj2);\nIkReal x399=(cj0*px);\nIkReal x400=(py*sj0);\nIkReal x401=(cj2*sj2);\nIkReal x402=((0.145)*sj2);\nCheckValue<IkReal> x403 = IKatan2WithCheck(IkReal(((-0.224025)+((pz*x400))+(((-0.35)*pz))+((pz*x399))+(((-0.174)*sj2))+(((1.854)*cj2))+(((2.366)*x401))+(((0.44805)*x397)))),((-0.021025)+(pz*pz)+(((-2.366)*x397))+(((0.44805)*x401))),IKFAST_ATAN2_MAGTHRESH);\nif(!x403.valid){\ncontinue;\n}\nCheckValue<IkReal> x404=IKPowWithIntegerCheck(IKsign(((((-1.0)*x398*x399))+(((0.54075)*cj2))+(((-0.145)*cj2*pz))+(((-1.0)*x398*x400))+(((-1.545)*pz*sj2))+((x399*x402))+((x400*x402))+(((-1.2)*pz))+(((-0.05075)*sj2)))),-1);\nif(!x404.valid){\ncontinue;\n}\nj1array[0]=((-1.5707963267949)+(x403.value)+(((1.5707963267949)*(x404.value))));\nsj1array[0]=IKsin(j1array[0]);\ncj1array[0]=IKcos(j1array[0]);\nif( j1array[0] > IKPI )\n{\n    j1array[0]-=IK2PI;\n}\nelse if( j1array[0] < -IKPI )\n{    j1array[0]+=IK2PI;\n}\nj1valid[0] = true;\nfor(int ij1 = 0; ij1 < 1; ++ij1)\n{\nif( !j1valid[ij1] )\n{\n    continue;\n}\n_ij1[0] = ij1; _ij1[1] = -1;\nfor(int iij1 = ij1+1; iij1 < 1; ++iij1)\n{\nif( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )\n{\n    j1valid[iij1]=false; _ij1[1] = iij1; break; \n}\n}\nj1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];\n{\nIkReal evalcond[5];\nIkReal x405=IKsin(j1);\nIkReal x406=IKcos(j1);\nIkReal x407=((0.145)*sj2);\nIkReal x408=(cj0*px);\nIkReal x409=(py*sj0);\nIkReal x410=((0.145)*cj2);\nIkReal x411=((1.545)*cj2);\nIkReal x412=((1.545)*sj2);\nIkReal x413=((1.0)*x406);\nIkReal x414=((2.4)*x405);\nIkReal x415=(pz*x406);\nevalcond[0]=((1.2)+(((-0.35)*x405))+((x405*x409))+((x405*x408))+x412+x410+x415);\nevalcond[1]=(((pz*x405))+x411+(((-1.0)*x408*x413))+(((-1.0)*x407))+(((0.35)*x406))+(((-1.0)*x409*x413)));\nevalcond[2]=((((1.2)*x406))+((x405*x411))+((x406*x412))+((x406*x410))+pz+(((-1.0)*x405*x407)));\nevalcond[3]=((0.84555)+(((0.7)*x409))+(((0.7)*x408))+(((0.84)*x405))+(((-2.4)*x415))+(((-1.0)*pp))+(((-1.0)*x408*x414))+(((-1.0)*x409*x414)));\nevalcond[4]=((0.35)+(((-1.2)*x405))+(((-1.0)*x406*x407))+((x406*x411))+(((-1.0)*x405*x412))+(((-1.0)*x405*x410))+(((-1.0)*x409))+(((-1.0)*x408)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n}\n}\n}\n}\n\n}\n\n}\n}\nreturn solutions.GetNumSolutions()>0;\n}\ninline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {\nfor(int rotationiter = 0; rotationiter < 1; ++rotationiter) {\nIkReal x108=((1.0)*cj0);\nIkReal x109=(r11*sj0);\nIkReal x110=(cj0*r00);\nIkReal x111=(r10*sj0);\nIkReal x112=(cj0*r01);\nIkReal x113=(cj2*sj1);\nIkReal x114=((1.0)*cj1);\nIkReal x115=(r12*sj0);\nIkReal x116=(cj0*r02);\nIkReal x117=((((-1.0)*cj2*x114))+((sj1*sj2)));\nIkReal x118=(((cj1*sj2))+x113);\nIkReal x119=(sj0*x117);\nIkReal x120=((((-1.0)*x113))+(((-1.0)*sj2*x114)));\nIkReal x121=(cj0*x120);\nnew_r00=(((x111*x120))+((r20*x117))+((x110*x120)));\nnew_r01=(((x112*x120))+((r21*x117))+((x109*x120)));\nnew_r02=(((r22*x117))+((x115*x120))+((x116*x120)));\nnew_r10=(((r00*sj0))+(((-1.0)*r10*x108)));\nnew_r11=((((-1.0)*r11*x108))+((r01*sj0)));\nnew_r12=((((-1.0)*r12*x108))+((r02*sj0)));\nnew_r20=(((x110*x117))+((x111*x117))+((r20*x118)));\nnew_r21=(((x112*x117))+((x109*x117))+((r21*x118)));\nnew_r22=(((r22*x118))+((x116*x117))+((x115*x117)));\n{\nIkReal j4array[2], cj4array[2], sj4array[2];\nbool j4valid[2]={false};\n_nj4 = 2;\ncj4array[0]=new_r22;\nif( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j4valid[0] = j4valid[1] = true;\n    j4array[0] = IKacos(cj4array[0]);\n    sj4array[0] = IKsin(j4array[0]);\n    cj4array[1] = cj4array[0];\n    j4array[1] = -j4array[0];\n    sj4array[1] = -sj4array[0];\n}\nelse if( isnan(cj4array[0]) )\n{\n    // probably any value will work\n    j4valid[0] = true;\n    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;\n}\nfor(int ij4 = 0; ij4 < 2; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 2; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n\n{\nIkReal j5eval[2];\nIkReal x122=((1.0)*cj0);\nIkReal x123=(r11*sj0);\nIkReal x124=(cj0*r00);\nIkReal x125=(r10*sj0);\nIkReal x126=(cj0*r01);\nIkReal x127=(cj2*sj1);\nIkReal x128=((1.0)*cj1);\nIkReal x129=(r12*sj0);\nIkReal x130=(cj0*r02);\nIkReal x131=x117;\nIkReal x132=(((cj1*sj2))+x127);\nIkReal x133=(sj0*x131);\nIkReal x134=x120;\nIkReal x135=(cj0*x134);\nnew_r00=(((x124*x134))+((x125*x134))+((r20*x131)));\nnew_r01=(((r21*x131))+((x123*x134))+((x126*x134)));\nnew_r02=(((x129*x134))+((r22*x131))+((x130*x134)));\nnew_r10=(((r00*sj0))+(((-1.0)*r10*x122)));\nnew_r11=(((r01*sj0))+(((-1.0)*r11*x122)));\nnew_r12=((((-1.0)*r12*x122))+((r02*sj0)));\nnew_r20=(((x124*x131))+((x125*x131))+((r20*x132)));\nnew_r21=(((r21*x132))+((x123*x131))+((x126*x131)));\nnew_r22=(((x129*x131))+((r22*x132))+((x130*x131)));\nj5eval[0]=sj4;\nj5eval[1]=IKsign(sj4);\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j3eval[1];\nIkReal x136=((1.0)*cj0);\nIkReal x137=(r11*sj0);\nIkReal x138=(cj0*r00);\nIkReal x139=(r10*sj0);\nIkReal x140=(cj0*r01);\nIkReal x141=(cj2*sj1);\nIkReal x142=((1.0)*cj1);\nIkReal x143=(r12*sj0);\nIkReal x144=(cj0*r02);\nIkReal x145=x117;\nIkReal x146=(((cj1*sj2))+x141);\nIkReal x147=(sj0*x145);\nIkReal x148=x120;\nIkReal x149=(cj0*x148);\nnew_r00=(((r20*x145))+((x138*x148))+((x139*x148)));\nnew_r01=(((x140*x148))+((x137*x148))+((r21*x145)));\nnew_r02=(((x144*x148))+((r22*x145))+((x143*x148)));\nnew_r10=(((r00*sj0))+(((-1.0)*r10*x136)));\nnew_r11=(((r01*sj0))+(((-1.0)*r11*x136)));\nnew_r12=((((-1.0)*r12*x136))+((r02*sj0)));\nnew_r20=(((r20*x146))+((x138*x145))+((x139*x145)));\nnew_r21=(((x140*x145))+((x137*x145))+((r21*x146)));\nnew_r22=(((x144*x145))+((r22*x146))+((x143*x145)));\nj3eval[0]=sj4;\nif( IKabs(j3eval[0]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[6];\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));\nevalcond[1]=((-1.0)+new_r22);\nevalcond[2]=new_r02;\nevalcond[3]=new_r12;\nevalcond[4]=new_r21;\nevalcond[5]=new_r20;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j3array[2], cj3array[2], sj3array[2];\nbool j3valid[2]={false};\n_nj3 = 2;\nCheckValue<IkReal> x151 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);\nif(!x151.valid){\ncontinue;\n}\nIkReal x150=x151.value;\nj3array[0]=((-1.0)*x150);\nsj3array[0]=IKsin(j3array[0]);\ncj3array[0]=IKcos(j3array[0]);\nj3array[1]=((3.14159265358979)+(((-1.0)*x150)));\nsj3array[1]=IKsin(j3array[1]);\ncj3array[1]=IKcos(j3array[1]);\nif( j3array[0] > IKPI )\n{\n    j3array[0]-=IK2PI;\n}\nelse if( j3array[0] < -IKPI )\n{    j3array[0]+=IK2PI;\n}\nj3valid[0] = true;\nif( j3array[1] > IKPI )\n{\n    j3array[1]-=IK2PI;\n}\nelse if( j3array[1] < -IKPI )\n{    j3array[1]+=IK2PI;\n}\nj3valid[1] = true;\nfor(int ij3 = 0; ij3 < 2; ++ij3)\n{\nif( !j3valid[ij3] )\n{\n    continue;\n}\n_ij3[0] = ij3; _ij3[1] = -1;\nfor(int iij3 = ij3+1; iij3 < 2; ++iij3)\n{\nif( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )\n{\n    j3valid[iij3]=false; _ij3[1] = iij3; break; \n}\n}\nj3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];\n{\nIkReal evalcond[1];\nevalcond[0]=((((-1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x152=((1.0)*new_r01);\nif( IKabs(((((-1.0)*cj3*x152))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x152))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x152))+(((-1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x152))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((((-1.0)*cj3*x152))+(((-1.0)*new_r00*sj3))), ((((-1.0)*sj3*x152))+((cj3*new_r00))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x153=IKsin(j5);\nIkReal x154=IKcos(j5);\nIkReal x155=((1.0)*cj3);\nIkReal x156=(sj3*x153);\nIkReal x157=((1.0)*x154);\nIkReal x158=(x154*x155);\nevalcond[0]=(((new_r11*sj3))+x153+((cj3*new_r01)));\nevalcond[1]=(((new_r00*sj3))+x153+(((-1.0)*new_r10*x155)));\nevalcond[2]=(((new_r01*sj3))+x154+(((-1.0)*new_r11*x155)));\nevalcond[3]=(((cj3*x153))+new_r01+((sj3*x154)));\nevalcond[4]=((((-1.0)*x157))+((new_r10*sj3))+((cj3*new_r00)));\nevalcond[5]=((((-1.0)*x158))+x156+new_r00);\nevalcond[6]=((((-1.0)*x158))+x156+new_r11);\nevalcond[7]=((((-1.0)*x153*x155))+(((-1.0)*sj3*x157))+new_r10);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));\nevalcond[1]=((1.0)+new_r22);\nevalcond[2]=new_r02;\nevalcond[3]=new_r12;\nevalcond[4]=new_r21;\nevalcond[5]=new_r20;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j3array[2], cj3array[2], sj3array[2];\nbool j3valid[2]={false};\n_nj3 = 2;\nCheckValue<IkReal> x160 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);\nif(!x160.valid){\ncontinue;\n}\nIkReal x159=x160.value;\nj3array[0]=((-1.0)*x159);\nsj3array[0]=IKsin(j3array[0]);\ncj3array[0]=IKcos(j3array[0]);\nj3array[1]=((3.14159265358979)+(((-1.0)*x159)));\nsj3array[1]=IKsin(j3array[1]);\ncj3array[1]=IKcos(j3array[1]);\nif( j3array[0] > IKPI )\n{\n    j3array[0]-=IK2PI;\n}\nelse if( j3array[0] < -IKPI )\n{    j3array[0]+=IK2PI;\n}\nj3valid[0] = true;\nif( j3array[1] > IKPI )\n{\n    j3array[1]-=IK2PI;\n}\nelse if( j3array[1] < -IKPI )\n{    j3array[1]+=IK2PI;\n}\nj3valid[1] = true;\nfor(int ij3 = 0; ij3 < 2; ++ij3)\n{\nif( !j3valid[ij3] )\n{\n    continue;\n}\n_ij3[0] = ij3; _ij3[1] = -1;\nfor(int iij3 = ij3+1; iij3 < 2; ++iij3)\n{\nif( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )\n{\n    j3valid[iij3]=false; _ij3[1] = iij3; break; \n}\n}\nj3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];\n{\nIkReal evalcond[1];\nevalcond[0]=((((-1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x161=((1.0)*sj3);\nif( IKabs(((((-1.0)*new_r00*x161))+((cj3*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x161)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x161))+((cj3*new_r01))))+IKsqr(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x161))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((((-1.0)*new_r00*x161))+((cj3*new_r01))), ((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x161))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x162=IKcos(j5);\nIkReal x163=IKsin(j5);\nIkReal x164=((1.0)*cj3);\nIkReal x165=(sj3*x162);\nIkReal x166=((1.0)*x163);\nIkReal x167=(x163*x164);\nevalcond[0]=(((new_r10*sj3))+x162+((cj3*new_r00)));\nevalcond[1]=(((new_r00*sj3))+(((-1.0)*new_r10*x164))+x163);\nevalcond[2]=(((new_r01*sj3))+(((-1.0)*new_r11*x164))+x162);\nevalcond[3]=((((-1.0)*x166))+((new_r11*sj3))+((cj3*new_r01)));\nevalcond[4]=(((sj3*x163))+((cj3*x162))+new_r00);\nevalcond[5]=((((-1.0)*x167))+x165+new_r01);\nevalcond[6]=((((-1.0)*x167))+x165+new_r10);\nevalcond[7]=((((-1.0)*x162*x164))+new_r11+(((-1.0)*sj3*x166)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j3, j5]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j3array[1], cj3array[1], sj3array[1];\nbool j3valid[1]={false};\n_nj3 = 1;\nCheckValue<IkReal> x169=IKPowWithIntegerCheck(sj4,-1);\nif(!x169.valid){\ncontinue;\n}\nIkReal x168=x169.value;\nCheckValue<IkReal> x170=IKPowWithIntegerCheck(new_r12,-1);\nif(!x170.valid){\ncontinue;\n}\nif( IKabs((x168*(x170.value)*(((-1.0)+(new_r02*new_r02)+(cj4*cj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r02*x168)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x168*(x170.value)*(((-1.0)+(new_r02*new_r02)+(cj4*cj4)))))+IKsqr(((-1.0)*new_r02*x168))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj3array[0]=IKatan2((x168*(x170.value)*(((-1.0)+(new_r02*new_r02)+(cj4*cj4)))), ((-1.0)*new_r02*x168));\nsj3array[0]=IKsin(j3array[0]);\ncj3array[0]=IKcos(j3array[0]);\nif( j3array[0] > IKPI )\n{\n    j3array[0]-=IK2PI;\n}\nelse if( j3array[0] < -IKPI )\n{    j3array[0]+=IK2PI;\n}\nj3valid[0] = true;\nfor(int ij3 = 0; ij3 < 1; ++ij3)\n{\nif( !j3valid[ij3] )\n{\n    continue;\n}\n_ij3[0] = ij3; _ij3[1] = -1;\nfor(int iij3 = ij3+1; iij3 < 1; ++iij3)\n{\nif( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )\n{\n    j3valid[iij3]=false; _ij3[1] = iij3; break; \n}\n}\nj3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];\n{\nIkReal evalcond[8];\nIkReal x171=IKcos(j3);\nIkReal x172=IKsin(j3);\nIkReal x173=((1.0)*cj4);\nIkReal x174=(new_r02*x171);\nIkReal x175=(sj4*x172);\nIkReal x176=(sj4*x171);\nIkReal x177=(new_r12*x172);\nevalcond[0]=(x176+new_r02);\nevalcond[1]=(x175+new_r12);\nevalcond[2]=((((-1.0)*new_r02*x172))+((new_r12*x171)));\nevalcond[3]=(sj4+x174+x177);\nevalcond[4]=(((cj4*x174))+((cj4*x177))+((new_r22*sj4)));\nevalcond[5]=(((new_r00*x176))+((new_r10*x175))+(((-1.0)*new_r20*x173)));\nevalcond[6]=(((new_r01*x176))+(((-1.0)*new_r21*x173))+((new_r11*x175)));\nevalcond[7]=((1.0)+((new_r12*x175))+((sj4*x174))+(((-1.0)*new_r22*x173)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nIkReal j5eval[2];\nIkReal x178=((1.0)*cj0);\nIkReal x179=(r11*sj0);\nIkReal x180=(cj0*r00);\nIkReal x181=(r10*sj0);\nIkReal x182=(cj0*r01);\nIkReal x183=(cj2*sj1);\nIkReal x184=((1.0)*cj1);\nIkReal x185=(r12*sj0);\nIkReal x186=(cj0*r02);\nIkReal x187=x117;\nIkReal x188=(((cj1*sj2))+x183);\nIkReal x189=(sj0*x187);\nIkReal x190=x120;\nIkReal x191=(cj0*x190);\nnew_r00=(((x180*x190))+((r20*x187))+((x181*x190)));\nnew_r01=(((x179*x190))+((r21*x187))+((x182*x190)));\nnew_r02=(((x186*x190))+((x185*x190))+((r22*x187)));\nnew_r10=(((r00*sj0))+(((-1.0)*r10*x178)));\nnew_r11=((((-1.0)*r11*x178))+((r01*sj0)));\nnew_r12=(((r02*sj0))+(((-1.0)*r12*x178)));\nnew_r20=(((x180*x187))+((r20*x188))+((x181*x187)));\nnew_r21=(((x179*x187))+((r21*x188))+((x182*x187)));\nnew_r22=(((x186*x187))+((x185*x187))+((r22*x188)));\nj5eval[0]=sj4;\nj5eval[1]=IKsign(sj4);\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j5eval[2];\nIkReal x192=((1.0)*cj0);\nIkReal x193=(r11*sj0);\nIkReal x194=(cj0*r00);\nIkReal x195=(r10*sj0);\nIkReal x196=(cj0*r01);\nIkReal x197=(cj2*sj1);\nIkReal x198=((1.0)*cj1);\nIkReal x199=(r12*sj0);\nIkReal x200=(cj0*r02);\nIkReal x201=x117;\nIkReal x202=(((cj1*sj2))+x197);\nIkReal x203=(sj0*x201);\nIkReal x204=x120;\nIkReal x205=(cj0*x204);\nnew_r00=(((x194*x204))+((x195*x204))+((r20*x201)));\nnew_r01=(((x196*x204))+((r21*x201))+((x193*x204)));\nnew_r02=(((r22*x201))+((x200*x204))+((x199*x204)));\nnew_r10=(((r00*sj0))+(((-1.0)*r10*x192)));\nnew_r11=(((r01*sj0))+(((-1.0)*r11*x192)));\nnew_r12=((((-1.0)*r12*x192))+((r02*sj0)));\nnew_r20=(((x194*x201))+((x195*x201))+((r20*x202)));\nnew_r21=(((x196*x201))+((r21*x202))+((x193*x201)));\nnew_r22=(((r22*x202))+((x200*x201))+((x199*x201)));\nj5eval[0]=sj4;\nj5eval[1]=sj3;\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j5eval[2];\nIkReal x206=((1.0)*cj0);\nIkReal x207=(r11*sj0);\nIkReal x208=(cj0*r00);\nIkReal x209=(r10*sj0);\nIkReal x210=(cj0*r01);\nIkReal x211=(cj2*sj1);\nIkReal x212=((1.0)*cj1);\nIkReal x213=(r12*sj0);\nIkReal x214=(cj0*r02);\nIkReal x215=x117;\nIkReal x216=(((cj1*sj2))+x211);\nIkReal x217=(sj0*x215);\nIkReal x218=x120;\nIkReal x219=(cj0*x218);\nnew_r00=(((x208*x218))+((x209*x218))+((r20*x215)));\nnew_r01=(((r21*x215))+((x210*x218))+((x207*x218)));\nnew_r02=(((x214*x218))+((x213*x218))+((r22*x215)));\nnew_r10=(((r00*sj0))+(((-1.0)*r10*x206)));\nnew_r11=((((-1.0)*r11*x206))+((r01*sj0)));\nnew_r12=((((-1.0)*r12*x206))+((r02*sj0)));\nnew_r20=(((x208*x215))+((x209*x215))+((r20*x216)));\nnew_r21=(((r21*x216))+((x210*x215))+((x207*x215)));\nnew_r22=(((x214*x215))+((x213*x215))+((r22*x216)));\nj5eval[0]=sj4;\nj5eval[1]=cj3;\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[10];\nbool bgotonextstatement = true;\ndo\n{\nIkReal x220=(cj3*new_r12);\nIkReal x221=(new_r02*sj3);\nIkReal x222=(((new_r12*sj3))+((cj3*new_r02)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));\nevalcond[1]=((-1.0)+new_r22);\nevalcond[2]=new_r02;\nevalcond[3]=new_r12;\nevalcond[4]=new_r21;\nevalcond[5]=new_r20;\nevalcond[6]=(x220+(((-1.0)*x221)));\nevalcond[7]=(x221+(((-1.0)*x220)));\nevalcond[8]=x222;\nevalcond[9]=x222;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x223=((1.0)*new_r01);\nif( IKabs(((((-1.0)*cj3*x223))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x223))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x223))+(((-1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x223))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((((-1.0)*cj3*x223))+(((-1.0)*new_r00*sj3))), ((((-1.0)*sj3*x223))+((cj3*new_r00))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x224=IKsin(j5);\nIkReal x225=IKcos(j5);\nIkReal x226=((1.0)*cj3);\nIkReal x227=(sj3*x224);\nIkReal x228=((1.0)*x225);\nIkReal x229=(x225*x226);\nevalcond[0]=(((new_r11*sj3))+x224+((cj3*new_r01)));\nevalcond[1]=((((-1.0)*new_r10*x226))+((new_r00*sj3))+x224);\nevalcond[2]=((((-1.0)*new_r11*x226))+((new_r01*sj3))+x225);\nevalcond[3]=(((cj3*x224))+((sj3*x225))+new_r01);\nevalcond[4]=(((new_r10*sj3))+((cj3*new_r00))+(((-1.0)*x228)));\nevalcond[5]=(x227+new_r00+(((-1.0)*x229)));\nevalcond[6]=(x227+new_r11+(((-1.0)*x229)));\nevalcond[7]=((((-1.0)*x224*x226))+(((-1.0)*sj3*x228))+new_r10);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x230=(cj3*new_r12);\nIkReal x231=(new_r12*sj3);\nIkReal x232=(new_r02*sj3);\nIkReal x233=(cj3*new_r02);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));\nevalcond[1]=((1.0)+new_r22);\nevalcond[2]=new_r02;\nevalcond[3]=new_r12;\nevalcond[4]=new_r21;\nevalcond[5]=new_r20;\nevalcond[6]=(x230+(((-1.0)*x232)));\nevalcond[7]=(x232+(((-1.0)*x230)));\nevalcond[8]=(x233+x231);\nevalcond[9]=((((-1.0)*x231))+(((-1.0)*x233)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x234=((1.0)*sj3);\nif( IKabs((((cj3*new_r01))+(((-1.0)*new_r00*x234)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x234)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj3*new_r01))+(((-1.0)*new_r00*x234))))+IKsqr(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x234))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2((((cj3*new_r01))+(((-1.0)*new_r00*x234))), ((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x234))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x235=IKcos(j5);\nIkReal x236=IKsin(j5);\nIkReal x237=((1.0)*cj3);\nIkReal x238=(sj3*x235);\nIkReal x239=((1.0)*x236);\nIkReal x240=(x236*x237);\nevalcond[0]=(((new_r10*sj3))+x235+((cj3*new_r00)));\nevalcond[1]=(((new_r00*sj3))+x236+(((-1.0)*new_r10*x237)));\nevalcond[2]=(((new_r01*sj3))+x235+(((-1.0)*new_r11*x237)));\nevalcond[3]=(((new_r11*sj3))+(((-1.0)*x239))+((cj3*new_r01)));\nevalcond[4]=(((cj3*x235))+new_r00+((sj3*x236)));\nevalcond[5]=(x238+(((-1.0)*x240))+new_r01);\nevalcond[6]=(x238+(((-1.0)*x240))+new_r10);\nevalcond[7]=((((-1.0)*x235*x237))+(((-1.0)*sj3*x239))+new_r11);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x241=(new_r22+(((-1.0)*cj4)));\nIkReal x242=(sj4+new_r12);\nIkReal x243=((1.0)*cj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));\nevalcond[1]=x241;\nevalcond[2]=x241;\nevalcond[3]=new_r02;\nevalcond[4]=x242;\nevalcond[5]=x242;\nevalcond[6]=(((cj4*new_r12))+((new_r22*sj4)));\nevalcond[7]=(((new_r10*sj4))+(((-1.0)*new_r20*x243)));\nevalcond[8]=(((new_r11*sj4))+(((-1.0)*new_r21*x243)));\nevalcond[9]=((1.0)+((new_r12*sj4))+(((-1.0)*new_r22*x243)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x244=IKcos(j5);\nIkReal x245=IKsin(j5);\nIkReal x246=((1.0)*new_r12);\nIkReal x247=((1.0)*x244);\nevalcond[0]=(x245+new_r00);\nevalcond[1]=(x244+new_r01);\nevalcond[2]=(((new_r12*x244))+new_r20);\nevalcond[3]=(((new_r22*x245))+new_r11);\nevalcond[4]=((((-1.0)*x245*x246))+new_r21);\nevalcond[5]=((((-1.0)*new_r22*x247))+new_r10);\nevalcond[6]=((((-1.0)*new_r21*x246))+x245+((new_r11*new_r22)));\nevalcond[7]=((((-1.0)*new_r20*x246))+((new_r10*new_r22))+(((-1.0)*x247)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x248=(new_r22+(((-1.0)*cj4)));\nIkReal x249=((1.0)*cj4);\nIkReal x250=((1.0)*new_r12);\nIkReal x251=((1.0)*sj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));\nevalcond[1]=x248;\nevalcond[2]=x248;\nevalcond[3]=new_r02;\nevalcond[4]=(new_r12+(((-1.0)*x251)));\nevalcond[5]=(sj4+(((-1.0)*x250)));\nevalcond[6]=(((new_r22*sj4))+(((-1.0)*new_r12*x249)));\nevalcond[7]=((((-1.0)*new_r10*x251))+(((-1.0)*new_r20*x249)));\nevalcond[8]=((((-1.0)*new_r11*x251))+(((-1.0)*new_r21*x249)));\nevalcond[9]=((1.0)+(((-1.0)*new_r22*x249))+(((-1.0)*sj4*x250)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(new_r00, new_r01);\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x252=IKsin(j5);\nIkReal x253=IKcos(j5);\nIkReal x254=((1.0)*new_r11);\nIkReal x255=((1.0)*new_r10);\nIkReal x256=((1.0)*x253);\nevalcond[0]=(((new_r12*x252))+new_r21);\nevalcond[1]=(x252+(((-1.0)*new_r00)));\nevalcond[2]=(x253+(((-1.0)*new_r01)));\nevalcond[3]=(new_r20+(((-1.0)*new_r12*x256)));\nevalcond[4]=(((new_r22*x252))+(((-1.0)*x254)));\nevalcond[5]=((((-1.0)*new_r22*x256))+(((-1.0)*x255)));\nevalcond[6]=(((new_r12*new_r21))+x252+(((-1.0)*new_r22*x254)));\nevalcond[7]=(((new_r12*new_r20))+(((-1.0)*new_r22*x255))+(((-1.0)*x256)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x257=(new_r22+(((-1.0)*cj4)));\nIkReal x258=(sj4+new_r02);\nIkReal x259=((1.0)*cj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));\nevalcond[1]=x257;\nevalcond[2]=x257;\nevalcond[3]=x258;\nevalcond[4]=new_r12;\nevalcond[5]=x258;\nevalcond[6]=(((cj4*new_r02))+((new_r22*sj4)));\nevalcond[7]=(((new_r00*sj4))+(((-1.0)*new_r20*x259)));\nevalcond[8]=((((-1.0)*new_r21*x259))+((new_r01*sj4)));\nevalcond[9]=((1.0)+((new_r02*sj4))+(((-1.0)*new_r22*x259)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(new_r10, new_r11);\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x260=IKcos(j5);\nIkReal x261=IKsin(j5);\nIkReal x262=((1.0)*new_r02);\nIkReal x263=((1.0)*x260);\nevalcond[0]=(new_r20+((new_r02*x260)));\nevalcond[1]=(x261+(((-1.0)*new_r10)));\nevalcond[2]=(x260+(((-1.0)*new_r11)));\nevalcond[3]=(((new_r22*x261))+new_r01);\nevalcond[4]=((((-1.0)*x261*x262))+new_r21);\nevalcond[5]=((((-1.0)*new_r22*x263))+new_r00);\nevalcond[6]=(((new_r01*new_r22))+(((-1.0)*new_r21*x262))+x261);\nevalcond[7]=(((new_r00*new_r22))+(((-1.0)*new_r20*x262))+(((-1.0)*x263)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x264=(new_r22+(((-1.0)*cj4)));\nIkReal x265=((1.0)*cj4);\nIkReal x266=((1.0)*sj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));\nevalcond[1]=x264;\nevalcond[2]=x264;\nevalcond[3]=(new_r02+(((-1.0)*x266)));\nevalcond[4]=new_r12;\nevalcond[5]=(sj4+(((-1.0)*new_r02)));\nevalcond[6]=(((new_r22*sj4))+(((-1.0)*new_r02*x265)));\nevalcond[7]=((((-1.0)*new_r00*x266))+(((-1.0)*new_r20*x265)));\nevalcond[8]=((((-1.0)*new_r01*x266))+(((-1.0)*new_r21*x265)));\nevalcond[9]=((1.0)+(((-1.0)*new_r22*x265))+(((-1.0)*new_r02*x266)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x267=IKsin(j5);\nIkReal x268=IKcos(j5);\nIkReal x269=((1.0)*new_r00);\nIkReal x270=((1.0)*new_r01);\nIkReal x271=((1.0)*x268);\nevalcond[0]=(x267+new_r10);\nevalcond[1]=(x268+new_r11);\nevalcond[2]=(new_r21+((new_r02*x267)));\nevalcond[3]=((((-1.0)*new_r02*x271))+new_r20);\nevalcond[4]=(((new_r22*x267))+(((-1.0)*x270)));\nevalcond[5]=((((-1.0)*new_r22*x271))+(((-1.0)*x269)));\nevalcond[6]=((((-1.0)*new_r22*x270))+x267+((new_r02*new_r21)));\nevalcond[7]=((((-1.0)*new_r22*x269))+(((-1.0)*x271))+((new_r02*new_r20)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j5]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x273=IKPowWithIntegerCheck(sj4,-1);\nif(!x273.valid){\ncontinue;\n}\nIkReal x272=x273.value;\nCheckValue<IkReal> x274=IKPowWithIntegerCheck(cj3,-1);\nif(!x274.valid){\ncontinue;\n}\nif( IKabs(((-1.0)*new_r21*x272)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x272*(x274.value)*((((new_r11*sj4))+(((-1.0)*cj4*new_r21*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x272))+IKsqr((x272*(x274.value)*((((new_r11*sj4))+(((-1.0)*cj4*new_r21*sj3))))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((-1.0)*new_r21*x272), (x272*(x274.value)*((((new_r11*sj4))+(((-1.0)*cj4*new_r21*sj3))))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[12];\nIkReal x275=IKsin(j5);\nIkReal x276=IKcos(j5);\nIkReal x277=(cj3*new_r00);\nIkReal x278=(cj3*cj4);\nIkReal x279=(cj4*sj3);\nIkReal x280=((1.0)*cj3);\nIkReal x281=(sj3*x275);\nIkReal x282=((1.0)*x276);\nevalcond[0]=(new_r21+((sj4*x275)));\nevalcond[1]=((((-1.0)*sj4*x282))+new_r20);\nevalcond[2]=(((new_r00*sj3))+x275+(((-1.0)*new_r10*x280)));\nevalcond[3]=(((new_r01*sj3))+x276+(((-1.0)*new_r11*x280)));\nevalcond[4]=(((cj4*x275))+((new_r11*sj3))+((cj3*new_r01)));\nevalcond[5]=(((x275*x278))+((sj3*x276))+new_r01);\nevalcond[6]=(((new_r10*sj3))+x277+(((-1.0)*cj4*x282)));\nevalcond[7]=(x281+new_r00+(((-1.0)*x278*x282)));\nevalcond[8]=(((x275*x279))+(((-1.0)*x276*x280))+new_r11);\nevalcond[9]=(new_r10+(((-1.0)*x279*x282))+(((-1.0)*x275*x280)));\nevalcond[10]=(x275+((new_r01*x278))+((new_r21*sj4))+((new_r11*x279)));\nevalcond[11]=(((new_r20*sj4))+((cj4*x277))+(((-1.0)*x282))+((new_r10*x279)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x284=IKPowWithIntegerCheck(sj4,-1);\nif(!x284.valid){\ncontinue;\n}\nIkReal x283=x284.value;\nCheckValue<IkReal> x285=IKPowWithIntegerCheck(sj3,-1);\nif(!x285.valid){\ncontinue;\n}\nif( IKabs(((-1.0)*new_r21*x283)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x283*(x285.value)*(((((-1.0)*new_r01*sj4))+((cj3*cj4*new_r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x283))+IKsqr((x283*(x285.value)*(((((-1.0)*new_r01*sj4))+((cj3*cj4*new_r21))))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((-1.0)*new_r21*x283), (x283*(x285.value)*(((((-1.0)*new_r01*sj4))+((cj3*cj4*new_r21))))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[12];\nIkReal x286=IKsin(j5);\nIkReal x287=IKcos(j5);\nIkReal x288=(cj3*new_r00);\nIkReal x289=(cj3*cj4);\nIkReal x290=(cj4*sj3);\nIkReal x291=((1.0)*cj3);\nIkReal x292=(sj3*x286);\nIkReal x293=((1.0)*x287);\nevalcond[0]=(new_r21+((sj4*x286)));\nevalcond[1]=(new_r20+(((-1.0)*sj4*x293)));\nevalcond[2]=((((-1.0)*new_r10*x291))+((new_r00*sj3))+x286);\nevalcond[3]=((((-1.0)*new_r11*x291))+((new_r01*sj3))+x287);\nevalcond[4]=(((new_r11*sj3))+((cj3*new_r01))+((cj4*x286)));\nevalcond[5]=(((x286*x289))+((sj3*x287))+new_r01);\nevalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x293))+x288);\nevalcond[7]=((((-1.0)*x289*x293))+x292+new_r00);\nevalcond[8]=(((x286*x290))+(((-1.0)*x287*x291))+new_r11);\nevalcond[9]=((((-1.0)*x290*x293))+(((-1.0)*x286*x291))+new_r10);\nevalcond[10]=(((new_r11*x290))+x286+((new_r21*sj4))+((new_r01*x289)));\nevalcond[11]=(((new_r20*sj4))+(((-1.0)*x293))+((new_r10*x290))+((cj4*x288)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x294 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);\nif(!x294.valid){\ncontinue;\n}\nCheckValue<IkReal> x295=IKPowWithIntegerCheck(IKsign(sj4),-1);\nif(!x295.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(x294.value)+(((1.5707963267949)*(x295.value))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[12];\nIkReal x296=IKsin(j5);\nIkReal x297=IKcos(j5);\nIkReal x298=(cj3*new_r00);\nIkReal x299=(cj3*cj4);\nIkReal x300=(cj4*sj3);\nIkReal x301=((1.0)*cj3);\nIkReal x302=(sj3*x296);\nIkReal x303=((1.0)*x297);\nevalcond[0]=(((sj4*x296))+new_r21);\nevalcond[1]=((((-1.0)*sj4*x303))+new_r20);\nevalcond[2]=(((new_r00*sj3))+x296+(((-1.0)*new_r10*x301)));\nevalcond[3]=(((new_r01*sj3))+x297+(((-1.0)*new_r11*x301)));\nevalcond[4]=(((new_r11*sj3))+((cj4*x296))+((cj3*new_r01)));\nevalcond[5]=(((x296*x299))+new_r01+((sj3*x297)));\nevalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x303))+x298);\nevalcond[7]=(x302+(((-1.0)*x299*x303))+new_r00);\nevalcond[8]=((((-1.0)*x297*x301))+((x296*x300))+new_r11);\nevalcond[9]=((((-1.0)*x296*x301))+new_r10+(((-1.0)*x300*x303)));\nevalcond[10]=(((new_r11*x300))+x296+((new_r01*x299))+((new_r21*sj4)));\nevalcond[11]=(((new_r20*sj4))+((new_r10*x300))+((cj4*x298))+(((-1.0)*x303)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x304 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);\nif(!x304.valid){\ncontinue;\n}\nCheckValue<IkReal> x305=IKPowWithIntegerCheck(IKsign(sj4),-1);\nif(!x305.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(x304.value)+(((1.5707963267949)*(x305.value))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[2];\nevalcond[0]=(((sj4*(IKsin(j5))))+new_r21);\nevalcond[1]=((((-1.0)*sj4*(IKcos(j5))))+new_r20);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nIkReal j3eval[2];\nIkReal x306=((1.0)*cj0);\nIkReal x307=(r11*sj0);\nIkReal x308=(cj0*r00);\nIkReal x309=(r10*sj0);\nIkReal x310=(cj0*r01);\nIkReal x311=(cj2*sj1);\nIkReal x312=((1.0)*cj1);\nIkReal x313=(r12*sj0);\nIkReal x314=(cj0*r02);\nIkReal x315=x117;\nIkReal x316=(((cj1*sj2))+x311);\nIkReal x317=(sj0*x315);\nIkReal x318=x120;\nIkReal x319=(cj0*x318);\nnew_r00=(((r20*x315))+((x308*x318))+((x309*x318)));\nnew_r01=(((x310*x318))+((x307*x318))+((r21*x315)));\nnew_r02=(((x314*x318))+((r22*x315))+((x313*x318)));\nnew_r10=(((r00*sj0))+(((-1.0)*r10*x306)));\nnew_r11=(((r01*sj0))+(((-1.0)*r11*x306)));\nnew_r12=(((r02*sj0))+(((-1.0)*r12*x306)));\nnew_r20=(((r20*x316))+((x308*x315))+((x309*x315)));\nnew_r21=(((x310*x315))+((x307*x315))+((r21*x316)));\nnew_r22=(((x314*x315))+((r22*x316))+((x313*x315)));\nj3eval[0]=sj4;\nj3eval[1]=IKsign(sj4);\nif( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j3eval[1];\nIkReal x320=((1.0)*cj0);\nIkReal x321=(r11*sj0);\nIkReal x322=(cj0*r00);\nIkReal x323=(r10*sj0);\nIkReal x324=(cj0*r01);\nIkReal x325=(cj2*sj1);\nIkReal x326=((1.0)*cj1);\nIkReal x327=(r12*sj0);\nIkReal x328=(cj0*r02);\nIkReal x329=x117;\nIkReal x330=(((cj1*sj2))+x325);\nIkReal x331=(sj0*x329);\nIkReal x332=x120;\nIkReal x333=(cj0*x332);\nnew_r00=(((r20*x329))+((x323*x332))+((x322*x332)));\nnew_r01=(((r21*x329))+((x324*x332))+((x321*x332)));\nnew_r02=(((r22*x329))+((x327*x332))+((x328*x332)));\nnew_r10=(((r00*sj0))+(((-1.0)*r10*x320)));\nnew_r11=(((r01*sj0))+(((-1.0)*r11*x320)));\nnew_r12=((((-1.0)*r12*x320))+((r02*sj0)));\nnew_r20=(((x322*x329))+((x323*x329))+((r20*x330)));\nnew_r21=(((r21*x330))+((x324*x329))+((x321*x329)));\nnew_r22=(((r22*x330))+((x328*x329))+((x327*x329)));\nj3eval[0]=sj4;\nif( IKabs(j3eval[0]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[6];\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));\nevalcond[1]=((-1.0)+new_r22);\nevalcond[2]=new_r02;\nevalcond[3]=new_r12;\nevalcond[4]=new_r21;\nevalcond[5]=new_r20;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j3array[1], cj3array[1], sj3array[1];\nbool j3valid[1]={false};\n_nj3 = 1;\nCheckValue<IkReal> x334=IKPowWithIntegerCheck(IKsign((((new_r01*new_r12))+(((-1.0)*new_r02*new_r11)))),-1);\nif(!x334.valid){\ncontinue;\n}\nCheckValue<IkReal> x335 = IKatan2WithCheck(IkReal((new_r02*sj5)),((-1.0)*new_r12*sj5),IKFAST_ATAN2_MAGTHRESH);\nif(!x335.valid){\ncontinue;\n}\nj3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x334.value)))+(x335.value));\nsj3array[0]=IKsin(j3array[0]);\ncj3array[0]=IKcos(j3array[0]);\nif( j3array[0] > IKPI )\n{\n    j3array[0]-=IK2PI;\n}\nelse if( j3array[0] < -IKPI )\n{    j3array[0]+=IK2PI;\n}\nj3valid[0] = true;\nfor(int ij3 = 0; ij3 < 1; ++ij3)\n{\nif( !j3valid[ij3] )\n{\n    continue;\n}\n_ij3[0] = ij3; _ij3[1] = -1;\nfor(int iij3 = ij3+1; iij3 < 1; ++iij3)\n{\nif( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )\n{\n    j3valid[iij3]=false; _ij3[1] = iij3; break; \n}\n}\nj3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];\n{\nIkReal evalcond[10];\nIkReal x336=IKcos(j3);\nIkReal x337=IKsin(j3);\nIkReal x338=(sj5*x337);\nIkReal x339=(cj5*x337);\nIkReal x340=(sj5*x336);\nIkReal x341=((1.0)*x336);\nIkReal x342=(cj5*x341);\nevalcond[0]=(((new_r12*x337))+((new_r02*x336)));\nevalcond[1]=(((new_r12*x336))+(((-1.0)*new_r02*x337)));\nevalcond[2]=(sj5+((new_r01*x336))+((new_r11*x337)));\nevalcond[3]=(x339+x340+new_r01);\nevalcond[4]=(sj5+(((-1.0)*new_r10*x341))+((new_r00*x337)));\nevalcond[5]=((((-1.0)*new_r11*x341))+cj5+((new_r01*x337)));\nevalcond[6]=(x338+new_r00+(((-1.0)*x342)));\nevalcond[7]=(x338+new_r11+(((-1.0)*x342)));\nevalcond[8]=(((new_r00*x336))+((new_r10*x337))+(((-1.0)*cj5)));\nevalcond[9]=((((-1.0)*x339))+new_r10+(((-1.0)*x340)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));\nevalcond[1]=((1.0)+new_r22);\nevalcond[2]=new_r02;\nevalcond[3]=new_r12;\nevalcond[4]=new_r21;\nevalcond[5]=new_r20;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j3array[1], cj3array[1], sj3array[1];\nbool j3valid[1]={false};\n_nj3 = 1;\nCheckValue<IkReal> x343 = IKatan2WithCheck(IkReal((cj5*new_r02)),((-1.0)*cj5*new_r12),IKFAST_ATAN2_MAGTHRESH);\nif(!x343.valid){\ncontinue;\n}\nCheckValue<IkReal> x344=IKPowWithIntegerCheck(IKsign((((new_r00*new_r12))+(((-1.0)*new_r02*new_r10)))),-1);\nif(!x344.valid){\ncontinue;\n}\nj3array[0]=((-1.5707963267949)+(x343.value)+(((1.5707963267949)*(x344.value))));\nsj3array[0]=IKsin(j3array[0]);\ncj3array[0]=IKcos(j3array[0]);\nif( j3array[0] > IKPI )\n{\n    j3array[0]-=IK2PI;\n}\nelse if( j3array[0] < -IKPI )\n{    j3array[0]+=IK2PI;\n}\nj3valid[0] = true;\nfor(int ij3 = 0; ij3 < 1; ++ij3)\n{\nif( !j3valid[ij3] )\n{\n    continue;\n}\n_ij3[0] = ij3; _ij3[1] = -1;\nfor(int iij3 = ij3+1; iij3 < 1; ++iij3)\n{\nif( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )\n{\n    j3valid[iij3]=false; _ij3[1] = iij3; break; \n}\n}\nj3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];\n{\nIkReal evalcond[10];\nIkReal x345=IKcos(j3);\nIkReal x346=IKsin(j3);\nIkReal x347=(cj5*x346);\nIkReal x348=(cj5*x345);\nIkReal x349=((1.0)*x345);\nIkReal x350=((1.0)*x346);\nIkReal x351=(sj5*x349);\nevalcond[0]=(((new_r02*x345))+((new_r12*x346)));\nevalcond[1]=(((new_r12*x345))+(((-1.0)*new_r02*x350)));\nevalcond[2]=(cj5+((new_r00*x345))+((new_r10*x346)));\nevalcond[3]=(((sj5*x346))+x348+new_r00);\nevalcond[4]=(sj5+(((-1.0)*new_r10*x349))+((new_r00*x346)));\nevalcond[5]=((((-1.0)*new_r11*x349))+cj5+((new_r01*x346)));\nevalcond[6]=((((-1.0)*x351))+x347+new_r01);\nevalcond[7]=((((-1.0)*x351))+x347+new_r10);\nevalcond[8]=((((-1.0)*sj5))+((new_r11*x346))+((new_r01*x345)));\nevalcond[9]=(new_r11+(((-1.0)*sj5*x350))+(((-1.0)*x348)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j3]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j3array[1], cj3array[1], sj3array[1];\nbool j3valid[1]={false};\n_nj3 = 1;\nCheckValue<IkReal> x353=IKPowWithIntegerCheck(sj4,-1);\nif(!x353.valid){\ncontinue;\n}\nIkReal x352=x353.value;\nCheckValue<IkReal> x354=IKPowWithIntegerCheck(new_r12,-1);\nif(!x354.valid){\ncontinue;\n}\nif( IKabs((x352*(x354.value)*(((-1.0)+(new_r02*new_r02)+(cj4*cj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r02*x352)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x352*(x354.value)*(((-1.0)+(new_r02*new_r02)+(cj4*cj4)))))+IKsqr(((-1.0)*new_r02*x352))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj3array[0]=IKatan2((x352*(x354.value)*(((-1.0)+(new_r02*new_r02)+(cj4*cj4)))), ((-1.0)*new_r02*x352));\nsj3array[0]=IKsin(j3array[0]);\ncj3array[0]=IKcos(j3array[0]);\nif( j3array[0] > IKPI )\n{\n    j3array[0]-=IK2PI;\n}\nelse if( j3array[0] < -IKPI )\n{    j3array[0]+=IK2PI;\n}\nj3valid[0] = true;\nfor(int ij3 = 0; ij3 < 1; ++ij3)\n{\nif( !j3valid[ij3] )\n{\n    continue;\n}\n_ij3[0] = ij3; _ij3[1] = -1;\nfor(int iij3 = ij3+1; iij3 < 1; ++iij3)\n{\nif( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )\n{\n    j3valid[iij3]=false; _ij3[1] = iij3; break; \n}\n}\nj3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];\n{\nIkReal evalcond[18];\nIkReal x355=IKcos(j3);\nIkReal x356=IKsin(j3);\nIkReal x357=((1.0)*cj4);\nIkReal x358=((1.0)*cj5);\nIkReal x359=(cj4*x355);\nIkReal x360=(sj4*x356);\nIkReal x361=((1.0)*x355);\nIkReal x362=(sj4*x355);\nIkReal x363=(cj4*x356);\nIkReal x364=(cj5*x356);\nevalcond[0]=(x362+new_r02);\nevalcond[1]=(x360+new_r12);\nevalcond[2]=((((-1.0)*new_r02*x356))+((new_r12*x355)));\nevalcond[3]=(sj4+((new_r02*x355))+((new_r12*x356)));\nevalcond[4]=(sj5+(((-1.0)*new_r10*x361))+((new_r00*x356)));\nevalcond[5]=(((new_r01*x356))+cj5+(((-1.0)*new_r11*x361)));\nevalcond[6]=(((sj5*x359))+x364+new_r01);\nevalcond[7]=(((new_r01*x355))+((cj4*sj5))+((new_r11*x356)));\nevalcond[8]=(((sj5*x356))+(((-1.0)*cj5*x355*x357))+new_r00);\nevalcond[9]=(((sj5*x363))+new_r11+(((-1.0)*x355*x358)));\nevalcond[10]=((((-1.0)*cj5*x357))+((new_r10*x356))+((new_r00*x355)));\nevalcond[11]=((((-1.0)*sj5*x361))+new_r10+(((-1.0)*x357*x364)));\nevalcond[12]=(((new_r22*sj4))+((new_r02*x359))+((new_r12*x363)));\nevalcond[13]=(((new_r00*x362))+(((-1.0)*new_r20*x357))+((new_r10*x360)));\nevalcond[14]=(((new_r01*x362))+(((-1.0)*new_r21*x357))+((new_r11*x360)));\nevalcond[15]=(((new_r01*x359))+sj5+((new_r21*sj4))+((new_r11*x363)));\nevalcond[16]=((1.0)+(((-1.0)*new_r22*x357))+((new_r02*x362))+((new_r12*x360)));\nevalcond[17]=(((new_r20*sj4))+(((-1.0)*x358))+((new_r10*x363))+((new_r00*x359)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j3array[1], cj3array[1], sj3array[1];\nbool j3valid[1]={false};\n_nj3 = 1;\nCheckValue<IkReal> x365=IKPowWithIntegerCheck(IKsign(sj4),-1);\nif(!x365.valid){\ncontinue;\n}\nCheckValue<IkReal> x366 = IKatan2WithCheck(IkReal(((-1.0)*new_r12)),((-1.0)*new_r02),IKFAST_ATAN2_MAGTHRESH);\nif(!x366.valid){\ncontinue;\n}\nj3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x365.value)))+(x366.value));\nsj3array[0]=IKsin(j3array[0]);\ncj3array[0]=IKcos(j3array[0]);\nif( j3array[0] > IKPI )\n{\n    j3array[0]-=IK2PI;\n}\nelse if( j3array[0] < -IKPI )\n{    j3array[0]+=IK2PI;\n}\nj3valid[0] = true;\nfor(int ij3 = 0; ij3 < 1; ++ij3)\n{\nif( !j3valid[ij3] )\n{\n    continue;\n}\n_ij3[0] = ij3; _ij3[1] = -1;\nfor(int iij3 = ij3+1; iij3 < 1; ++iij3)\n{\nif( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )\n{\n    j3valid[iij3]=false; _ij3[1] = iij3; break; \n}\n}\nj3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];\n{\nIkReal evalcond[18];\nIkReal x367=IKcos(j3);\nIkReal x368=IKsin(j3);\nIkReal x369=((1.0)*cj4);\nIkReal x370=((1.0)*cj5);\nIkReal x371=(cj4*x367);\nIkReal x372=(sj4*x368);\nIkReal x373=((1.0)*x367);\nIkReal x374=(sj4*x367);\nIkReal x375=(cj4*x368);\nIkReal x376=(cj5*x368);\nevalcond[0]=(x374+new_r02);\nevalcond[1]=(x372+new_r12);\nevalcond[2]=((((-1.0)*new_r02*x368))+((new_r12*x367)));\nevalcond[3]=(sj4+((new_r02*x367))+((new_r12*x368)));\nevalcond[4]=(sj5+((new_r00*x368))+(((-1.0)*new_r10*x373)));\nevalcond[5]=(cj5+((new_r01*x368))+(((-1.0)*new_r11*x373)));\nevalcond[6]=(x376+((sj5*x371))+new_r01);\nevalcond[7]=(((cj4*sj5))+((new_r01*x367))+((new_r11*x368)));\nevalcond[8]=(((sj5*x368))+(((-1.0)*cj5*x367*x369))+new_r00);\nevalcond[9]=((((-1.0)*x367*x370))+((sj5*x375))+new_r11);\nevalcond[10]=((((-1.0)*cj5*x369))+((new_r00*x367))+((new_r10*x368)));\nevalcond[11]=((((-1.0)*sj5*x373))+(((-1.0)*x369*x376))+new_r10);\nevalcond[12]=(((new_r12*x375))+((new_r22*sj4))+((new_r02*x371)));\nevalcond[13]=((((-1.0)*new_r20*x369))+((new_r00*x374))+((new_r10*x372)));\nevalcond[14]=(((new_r01*x374))+((new_r11*x372))+(((-1.0)*new_r21*x369)));\nevalcond[15]=(sj5+((new_r01*x371))+((new_r21*sj4))+((new_r11*x375)));\nevalcond[16]=((1.0)+((new_r12*x372))+(((-1.0)*new_r22*x369))+((new_r02*x374)));\nevalcond[17]=(((new_r20*sj4))+(((-1.0)*x370))+((new_r00*x371))+((new_r10*x375)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n}\n}\n\n}\n\n}\n}\n}\n}\n}};\n\n\n/// solves the inverse kinematics equations.\n/// \\param pfree is an array specifying the free joints of the chain.\nIKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {\nIKSolver solver;\nreturn solver.ComputeIk(eetrans,eerot,pfree,solutions);\n}\n\nIKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {\nIKSolver solver;\nreturn solver.ComputeIk(eetrans,eerot,pfree,solutions);\n}\n\nIKFAST_API const char* GetKinematicsHash() { return \"6781f5b9fb4cec330e08bca0c06f7a43\"; }\n\nIKFAST_API const char* GetIkFastVersion() { return \"0x10000048\"; }\n\n#ifdef IKFAST_NAMESPACE\n} // end namespace\n#endif\n\n#ifndef IKFAST_NO_MAIN\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef IKFAST_NAMESPACE\nusing namespace IKFAST_NAMESPACE;\n#endif\nint main(int argc, char** argv)\n{\n    if( argc != 12+GetNumFreeParameters()+1 ) {\n        printf(\"\\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\\n\\n\"\n               \"Returns the ik solutions given the transformation of the end effector specified by\\n\"\n               \"a 3x3 rotation R (rXX), and a 3x1 translation (tX).\\n\"\n               \"There are %d free parameters that have to be specified.\\n\\n\",GetNumFreeParameters());\n        return 1;\n    }\n\n    IkSolutionList<IkReal> solutions;\n    std::vector<IkReal> vfree(GetNumFreeParameters());\n    IkReal eerot[9],eetrans[3];\n    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);\n    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);\n    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);\n    for(std::size_t i = 0; i < vfree.size(); ++i)\n        vfree[i] = atof(argv[13+i]);\n    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);\n\n    if( !bSuccess ) {\n        fprintf(stderr,\"Failed to get ik solution\\n\");\n        return -1;\n    }\n\n    printf(\"Found %d ik solutions:\\n\", (int)solutions.GetNumSolutions());\n    std::vector<IkReal> solvalues(GetNumJoints());\n    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {\n        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);\n        printf(\"sol%d (free=%d): \", (int)i, (int)sol.GetFree().size());\n        std::vector<IkReal> vsolfree(sol.GetFree().size());\n        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);\n        for( std::size_t j = 0; j < solvalues.size(); ++j)\n            printf(\"%.15f, \", solvalues[j]);\n        printf(\"\\n\");\n    }\n    return 0;\n}\n\n#endif\n\nchar* ComputeFkWrapper(const IkReal* j) {\n    IkReal eetrans[3] = {0};\n    IkReal eerot[9] = {0};\n    char buffer [256] = {0};\n    ComputeFk(j, eetrans, eerot);\n    for(int i = 0; i < 3; ++i)\n        sprintf(buffer + strlen(buffer), \"%.15f,\", eetrans[i]);\n    for(int i = 0; i < 9 - 1; ++i)\n        sprintf(buffer + strlen(buffer), \"%.15f,\", eerot[i]);\n    sprintf(buffer + strlen(buffer), \"%.15f\", eerot[9 - 1]);\n    return buffer;\n}\n\nstd::vector<IkReal> TrueComputeIk(int argc, char** argv)\n{\n    std::vector<IkReal> solvalues(GetNumJoints());\n    if( argc != 12+GetNumFreeParameters()+1 ) {\n        printf(\"\\nKAKAKAK Usage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\\n\\n\"\n               \"Returns the ik solutions given the transformation of the end effector specified by\\n\"\n               \"a 3x3 rotation R (rXX), and a 3x1 translation (tX).\\n\"\n               \"There are %d free parameters that have to be specified.\\n\\n\",GetNumFreeParameters());\n    }\n\n    IkSolutionList<IkReal> solutions;\n    std::vector<IkReal> vfree(GetNumFreeParameters());\n    IkReal eerot[9],eetrans[3];\n    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);\n    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);\n    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);\n    for(std::size_t i = 0; i < vfree.size(); ++i)\n        vfree[i] = atof(argv[13+i]);\n    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);\n\n    if( !bSuccess ) {\n        fprintf(stderr,\"Failed to get ik solution\\n\");\n    }\n\n    printf(\"Found %d ik solutions:\\n\", (int)solutions.GetNumSolutions());\n    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {\n        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);\n        printf(\"sol%d (free=%d): \", (int)i, (int)sol.GetFree().size());\n        std::vector<IkReal> vsolfree(sol.GetFree().size());\n        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);\n        for( std::size_t j = 0; j < solvalues.size(); ++j)\n            printf(\"%.15f, \", solvalues[j]);\n        printf(\"\\n\");\n    }\n    return solvalues;\n}\n"]}