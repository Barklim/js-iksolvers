{"version":3,"file":"./solvers/body_arm.html","sources":["./solvers/body_arm.tmp.cpp"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4SA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;AAzLA;AAAA;AAAA;;;;;;;;AAFA;AAAA;AAAA;;;;;AA+LA;;;;;;;;;;;;;;;AA89FA;AACA;AACA;AACA;AAAA;AACA;;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAEA;;AAAA;AAAA;AACA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AACA","sourcesContent":["/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE\n/// \\author Rosen Diankov\n///\n/// Licensed under the Apache License, Version 2.0 (the \"License\");\n/// you may not use this file except in compliance with the License.\n/// You may obtain a copy of the License at\n///     http://www.apache.org/licenses/LICENSE-2.0\n/// \n/// Unless required by applicable law or agreed to in writing, software\n/// distributed under the License is distributed on an \"AS IS\" BASIS,\n/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n/// See the License for the specific language governing permissions and\n/// limitations under the License.\n///\n/// ikfast version 0x10000048 generated on 2015-05-22 07:20:29.289175\n/// To compile with gcc:\n///     gcc -lstdc++ ik.cpp\n/// To compile without any main function as a shared object (might need -llapack):\n///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp\n#define IKFAST_HAS_LIBRARY\n#include \"ikfast.h\" // found inside share/openrave-X.Y/python/ikfast.h\nusing namespace ikfast;\n\n// check if the included ikfast version matches what this file was compiled with\n#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]\nIKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);\n\n#include <cmath>\n#include <vector>\n#include <limits>\n#include <algorithm>\n#include <complex>\n\n#ifndef IKFAST_ASSERT\n#include <stdexcept>\n#include <sstream>\n#include <iostream>\n\n#ifdef _MSC_VER\n#ifndef __PRETTY_FUNCTION__\n#define __PRETTY_FUNCTION__ __FUNCDNAME__\n#endif\n#endif\n\n#ifndef __PRETTY_FUNCTION__\n#define __PRETTY_FUNCTION__ __func__\n#endif\n\n#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << \"ikfast exception: \" << __FILE__ << \":\" << __LINE__ << \": \" <<__PRETTY_FUNCTION__ << \": Assertion '\" << #b << \"' failed\"; throw std::runtime_error(ss.str()); } }\n\n#endif\n\n#if defined(_MSC_VER)\n#define IKFAST_ALIGNED16(x) __declspec(align(16)) x\n#else\n#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))\n#endif\n\n#define IK2PI  ((IkReal)6.28318530717959)\n#define IKPI  ((IkReal)3.14159265358979)\n#define IKPI_2  ((IkReal)1.57079632679490)\n\n#ifdef _MSC_VER\n#ifndef isnan\n#define isnan _isnan\n#endif\n#ifndef isinf\n#define isinf _isinf\n#endif\n//#ifndef isfinite\n//#define isfinite _isfinite\n//#endif\n#endif // _MSC_VER\n\n// lapack routines\nextern \"C\" {\n  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);\n  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);\n  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);\n  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);\n  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);\n  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);\n}\n\nusing namespace std; // necessary to get std math routines\n\n#ifdef IKFAST_NAMESPACE\nnamespace IKFAST_NAMESPACE {\n#endif\n\ninline float IKabs(float f) { return fabsf(f); }\ninline double IKabs(double f) { return fabs(f); }\n\ninline float IKsqr(float f) { return f*f; }\ninline double IKsqr(double f) { return f*f; }\n\ninline float IKlog(float f) { return logf(f); }\ninline double IKlog(double f) { return log(f); }\n\n// allows asin and acos to exceed 1\n#ifndef IKFAST_SINCOS_THRESH\n#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)\n#endif\n\n// used to check input to atan2 for degenerate cases\n#ifndef IKFAST_ATAN2_MAGTHRESH\n#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)\n#endif\n\n// minimum distance of separate solutions\n#ifndef IKFAST_SOLUTION_THRESH\n#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)\n#endif\n\n// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate\n#ifndef IKFAST_EVALCOND_THRESH\n#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)\n#endif\n\n\ninline float IKasin(float f)\n{\nIKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver\nif( f <= -1 ) return float(-IKPI_2);\nelse if( f >= 1 ) return float(IKPI_2);\nreturn asinf(f);\n}\ninline double IKasin(double f)\n{\nIKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver\nif( f <= -1 ) return -IKPI_2;\nelse if( f >= 1 ) return IKPI_2;\nreturn asin(f);\n}\n\n// return positive value in [0,y)\ninline float IKfmod(float x, float y)\n{\n    while(x < 0) {\n        x += y;\n    }\n    return fmodf(x,y);\n}\n\n// return positive value in [0,y)\ninline double IKfmod(double x, double y)\n{\n    while(x < 0) {\n        x += y;\n    }\n    return fmod(x,y);\n}\n\ninline float IKacos(float f)\n{\nIKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver\nif( f <= -1 ) return float(IKPI);\nelse if( f >= 1 ) return float(0);\nreturn acosf(f);\n}\ninline double IKacos(double f)\n{\nIKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver\nif( f <= -1 ) return IKPI;\nelse if( f >= 1 ) return 0;\nreturn acos(f);\n}\ninline float IKsin(float f) { return sinf(f); }\ninline double IKsin(double f) { return sin(f); }\ninline float IKcos(float f) { return cosf(f); }\ninline double IKcos(double f) { return cos(f); }\ninline float IKtan(float f) { return tanf(f); }\ninline double IKtan(double f) { return tan(f); }\ninline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }\ninline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }\ninline float IKatan2Simple(float fy, float fx) {\n    return atan2f(fy,fx);\n}\ninline float IKatan2(float fy, float fx) {\n    if( isnan(fy) ) {\n        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned\n        return float(IKPI_2);\n    }\n    else if( isnan(fx) ) {\n        return 0;\n    }\n    return atan2f(fy,fx);\n}\ninline double IKatan2Simple(double fy, double fx) {\n    return atan2(fy,fx);\n}\ninline double IKatan2(double fy, double fx) {\n    if( isnan(fy) ) {\n        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned\n        return IKPI_2;\n    }\n    else if( isnan(fx) ) {\n        return 0;\n    }\n    return atan2(fy,fx);\n}\n\ntemplate <typename T>\nstruct CheckValue\n{\n    T value;\n    bool valid;\n};\n\ntemplate <typename T>\ninline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)\n{\n    CheckValue<T> ret;\n    ret.valid = false;\n    ret.value = 0;\n    if( !isnan(fy) && !isnan(fx) ) {\n        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {\n            ret.value = IKatan2Simple(fy,fx);\n            ret.valid = true;\n        }\n    }\n    return ret;\n}\n\ninline float IKsign(float f) {\n    if( f > 0 ) {\n        return float(1);\n    }\n    else if( f < 0 ) {\n        return float(-1);\n    }\n    return 0;\n}\n\ninline double IKsign(double f) {\n    if( f > 0 ) {\n        return 1.0;\n    }\n    else if( f < 0 ) {\n        return -1.0;\n    }\n    return 0;\n}\n\ntemplate <typename T>\ninline CheckValue<T> IKPowWithIntegerCheck(T f, int n)\n{\n    CheckValue<T> ret;\n    ret.valid = true;\n    if( n == 0 ) {\n        ret.value = 1.0;\n        return ret;\n    }\n    else if( n == 1 )\n    {\n        ret.value = f;\n        return ret;\n    }\n    else if( n < 0 )\n    {\n        if( f == 0 )\n        {\n            ret.valid = false;\n            ret.value = (T)1.0e30;\n            return ret;\n        }\n        if( n == -1 ) {\n            ret.value = T(1.0)/f;\n            return ret;\n        }\n    }\n\n    int num = n > 0 ? n : -n;\n    if( num == 2 ) {\n        ret.value = f*f;\n    }\n    else if( num == 3 ) {\n        ret.value = f*f*f;\n    }\n    else {\n        ret.value = 1.0;\n        while(num>0) {\n            if( num & 1 ) {\n                ret.value *= f;\n            }\n            num >>= 1;\n            f *= f;\n        }\n    }\n    \n    if( n < 0 ) {\n        ret.value = T(1.0)/ret.value;\n    }\n    return ret;\n}\n\n/// solves the forward kinematics equations.\n/// \\param pfree is an array specifying the free joints of the chain.\nIKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {\nIkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42;\nx0=IKcos(j[0]);\nx1=IKsin(j[1]);\nx2=IKsin(j[2]);\nx3=IKcos(j[1]);\nx4=IKcos(j[2]);\nx5=IKsin(j[3]);\nx6=IKcos(j[3]);\nx7=IKsin(j[0]);\nx8=IKsin(j[5]);\nx9=IKcos(j[4]);\nx10=IKsin(j[4]);\nx11=IKcos(j[5]);\nx12=((1.0)*x6);\nx13=((1.0)*x1);\nx14=((1.0)*x9);\nx15=((1.0)*x0);\nx16=((1.0)*x10);\nx17=((0.265)*x1);\nx18=(x3*x4);\nx19=(x1*x4);\nx20=(x5*x7);\nx21=(x2*x3);\nx22=(x13*x2);\nx23=((0.27)*x1*x2);\nx24=((1.0)*x21);\nx25=(x22*x7);\nx26=((((-1.0)*x22))+x18);\nx27=((((-1.0)*x18))+x22);\nx28=((((-1.0)*x24))+(((-1.0)*x13*x4)));\nx29=(x26*x6);\nx30=(x26*x9);\nx31=(x27*x5);\nx32=(x10*x28);\nx33=((((-1.0)*x15*x18))+((x0*x22)));\nx34=((((-1.0)*x18*x7))+x25);\nx35=(((x0*x13*x4))+((x15*x21)));\nx36=(((x13*x4*x7))+((x24*x7)));\nx37=(x10*x33);\nx38=(x35*x6);\nx39=((((-1.0)*x35*x5))+((x6*x7)));\nx40=(((x0*x12))+(((1.0)*x36*x5)));\nx41=((((-1.0)*x12*x36))+((x15*x5)));\nx42=((((-1.0)*x12*x35))+(((-1.0)*x20)));\neerot[0]=(((x11*(((((-1.0)*x14*x42))+(((-1.0)*x16*x33))))))+((x39*x8)));\neerot[1]=(((x8*((((x42*x9))+x37))))+((x11*x39)));\neerot[2]=(((x33*x9))+((x10*((x38+x20)))));\neetrans[0]=(((x0*x17))+(((0.1)*x0))+(((-1.0)*x0*x23))+(((0.27)*x0*x18)));\neerot[3]=(((x11*((((x10*x34))+((x41*x9))))))+((x40*x8)));\neerot[4]=(((x11*x40))+((x8*(((((-1.0)*x14*x41))+(((-1.0)*x16*x34)))))));\neerot[5]=(((x10*x41))+((x9*((((x18*x7))+(((-1.0)*x25)))))));\neetrans[1]=((((-0.1)*x7))+((x23*x7))+(((-1.0)*x17*x7))+(((-0.27)*x18*x7)));\neerot[6]=(((x31*x8))+((x11*((((x29*x9))+x32)))));\neerot[7]=(((x8*(((((-1.0)*x12*x30))+(((-1.0)*x16*x28))))))+((x11*x31)));\neerot[8]=(((x9*((x19+x21))))+((x10*x29)));\neetrans[2]=((0.35)+(((0.265)*x3))+(((-0.27)*x19))+(((-0.27)*x21)));\n}\n\nIKFAST_API int GetNumFreeParameters() { return 0; }\nIKFAST_API int* GetFreeParameters() { return NULL; }\nIKFAST_API int GetNumJoints() { return 6; }\n\nIKFAST_API int GetIkRealSize() { return sizeof(IkReal); }\n\nIKFAST_API int GetIkType() { return 0x67000001; }\n\nclass IKSolver {\npublic:\nIkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;\nunsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;\n\nIkReal j100, cj100, sj100;\nunsigned char _ij100[2], _nj100;\nbool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {\nj0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; \nfor(int dummyiter = 0; dummyiter < 1; ++dummyiter) {\n    solutions.Clear();\nr00 = eerot[0*3+0];\nr01 = eerot[0*3+1];\nr02 = eerot[0*3+2];\nr10 = eerot[1*3+0];\nr11 = eerot[1*3+1];\nr12 = eerot[1*3+2];\nr20 = eerot[2*3+0];\nr21 = eerot[2*3+1];\nr22 = eerot[2*3+2];\npx = eetrans[0]; py = eetrans[1]; pz = eetrans[2];\n\nnew_r00=r01;\nnew_r01=((-1.0)*r00);\nnew_r02=r02;\nnew_px=px;\nnew_r10=((-1.0)*r11);\nnew_r11=r10;\nnew_r12=((-1.0)*r12);\nnew_py=((-1.0)*py);\nnew_r20=((-1.0)*r21);\nnew_r21=r20;\nnew_r22=((-1.0)*r22);\nnew_pz=((0.35)+(((-1.0)*pz)));\nr00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;\nIkReal x43=((1.0)*px);\nIkReal x44=((1.0)*pz);\nIkReal x45=((1.0)*py);\npp=((px*px)+(py*py)+(pz*pz));\nnpx=(((px*r00))+((py*r10))+((pz*r20)));\nnpy=(((px*r01))+((py*r11))+((pz*r21)));\nnpz=(((px*r02))+((py*r12))+((pz*r22)));\nrxp0_0=((((-1.0)*r20*x45))+((pz*r10)));\nrxp0_1=(((px*r20))+(((-1.0)*r00*x44)));\nrxp0_2=((((-1.0)*r10*x43))+((py*r00)));\nrxp1_0=((((-1.0)*r21*x45))+((pz*r11)));\nrxp1_1=(((px*r21))+(((-1.0)*r01*x44)));\nrxp1_2=((((-1.0)*r11*x43))+((py*r01)));\nrxp2_0=((((-1.0)*r22*x45))+((pz*r12)));\nrxp2_1=((((-1.0)*r02*x44))+((px*r22)));\nrxp2_2=((((-1.0)*r12*x43))+((py*r02)));\n{\nIkReal j0eval[1];\nj0eval[0]=((IKabs(px))+(IKabs(py)));\nif( IKabs(j0eval[0]) < 0.0000010000000000  )\n{\ncontinue; // no branches [j0, j1, j2]\n\n} else\n{\n{\nIkReal j0array[2], cj0array[2], sj0array[2];\nbool j0valid[2]={false};\n_nj0 = 2;\nCheckValue<IkReal> x47 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);\nif(!x47.valid){\ncontinue;\n}\nIkReal x46=x47.value;\nj0array[0]=((-1.0)*x46);\nsj0array[0]=IKsin(j0array[0]);\ncj0array[0]=IKcos(j0array[0]);\nj0array[1]=((3.14159265358979)+(((-1.0)*x46)));\nsj0array[1]=IKsin(j0array[1]);\ncj0array[1]=IKcos(j0array[1]);\nif( j0array[0] > IKPI )\n{\n    j0array[0]-=IK2PI;\n}\nelse if( j0array[0] < -IKPI )\n{    j0array[0]+=IK2PI;\n}\nj0valid[0] = true;\nif( j0array[1] > IKPI )\n{\n    j0array[1]-=IK2PI;\n}\nelse if( j0array[1] < -IKPI )\n{    j0array[1]+=IK2PI;\n}\nj0valid[1] = true;\nfor(int ij0 = 0; ij0 < 2; ++ij0)\n{\nif( !j0valid[ij0] )\n{\n    continue;\n}\n_ij0[0] = ij0; _ij0[1] = -1;\nfor(int iij0 = ij0+1; iij0 < 2; ++iij0)\n{\nif( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )\n{\n    j0valid[iij0]=false; _ij0[1] = iij0; break; \n}\n}\nj0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];\n\n{\nIkReal j2array[2], cj2array[2], sj2array[2];\nbool j2valid[2]={false};\n_nj2 = 2;\nsj2array[0]=((0.930293501048218)+(((1.39762403913347)*py*sj0))+(((-6.98812019566737)*pp))+(((1.39762403913347)*cj0*px)));\nif( sj2array[0] >= -1-IKFAST_SINCOS_THRESH && sj2array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j2valid[0] = j2valid[1] = true;\n    j2array[0] = IKasin(sj2array[0]);\n    cj2array[0] = IKcos(j2array[0]);\n    sj2array[1] = sj2array[0];\n    j2array[1] = j2array[0] > 0 ? (IKPI-j2array[0]) : (-IKPI-j2array[0]);\n    cj2array[1] = -cj2array[0];\n}\nelse if( isnan(sj2array[0]) )\n{\n    // probably any value will work\n    j2valid[0] = true;\n    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;\n}\nfor(int ij2 = 0; ij2 < 2; ++ij2)\n{\nif( !j2valid[ij2] )\n{\n    continue;\n}\n_ij2[0] = ij2; _ij2[1] = -1;\nfor(int iij2 = ij2+1; iij2 < 2; ++iij2)\n{\nif( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )\n{\n    j2valid[iij2]=false; _ij2[1] = iij2; break; \n}\n}\nj2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];\n\n{\nIkReal j1eval[3];\nIkReal x48=((2700.0)*cj2);\nIkReal x49=(cj0*px);\nIkReal x50=((2700.0)*sj2);\nIkReal x51=(py*sj0);\nj1eval[0]=((1.00017470300489)+(((-1.0)*sj2)));\nj1eval[1]=IKsign(((1431.25)+(((-1431.0)*sj2))));\nj1eval[2]=((IKabs(((-265.0)+(((2650.0)*x49))+(((2650.0)*x51))+((pz*x48))+(((-1.0)*x49*x50))+(((270.0)*sj2))+(((-1.0)*x50*x51)))))+(IKabs(((((-2650.0)*pz))+((x48*x49))+(((-270.0)*cj2))+((x48*x51))+((pz*x50))))));\nif( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal j1eval[3];\nIkReal x52=(py*sj0);\nIkReal x53=((27.0)*sj2);\nIkReal x54=(cj0*px);\nIkReal x55=(cj2*pz);\nIkReal x56=((100.0)*pz);\nIkReal x57=((10.188679245283)*sj2);\nj1eval[0]=((1.0)+(((-10.0)*x52))+(((-10.0)*x54))+(((-1.0188679245283)*sj2))+(((10.188679245283)*x55))+((x52*x57))+((x54*x57)));\nj1eval[1]=IKsign(((2.65)+(((27.0)*x55))+(((-26.5)*x54))+(((-26.5)*x52))+(((-2.7)*sj2))+((x53*x54))+((x52*x53))));\nj1eval[2]=((IKabs(((-14.3125)+(((14.31)*sj2))+((pz*x56))+(((7.29)*(cj2*cj2))))))+(IKabs(((((-10.0)*pz))+((x52*x56))+(((-7.155)*cj2))+(((7.29)*cj2*sj2))+((x54*x56))))));\nif( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal j1eval[3];\nIkReal x58=cj0*cj0;\nIkReal x59=py*py;\nIkReal x60=(cj0*px);\nIkReal x61=((27.0)*cj2);\nIkReal x62=((27.0)*sj2);\nIkReal x63=(py*sj0);\nIkReal x64=((100.0)*x58);\nIkReal x65=((1.0)+(((100.0)*x59))+(((100.0)*(pz*pz)))+(((-1.0)*x59*x64))+(((-20.0)*x60))+(((-20.0)*x63))+(((200.0)*x60*x63))+((x64*(px*px))));\nj1eval[0]=x65;\nj1eval[1]=IKsign(x65);\nj1eval[2]=((IKabs(((-2.65)+(((26.5)*x63))+(((26.5)*x60))+(((-1.0)*x60*x62))+((pz*x61))+(((-1.0)*x62*x63))+(((2.7)*sj2)))))+(IKabs((((x60*x61))+(((-2.7)*cj2))+((x61*x63))+((pz*x62))+(((-26.5)*pz))))));\nif( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )\n{\ncontinue; // no branches [j1]\n\n} else\n{\n{\nIkReal j1array[1], cj1array[1], sj1array[1];\nbool j1valid[1]={false};\n_nj1 = 1;\nIkReal x66=cj0*cj0;\nIkReal x67=py*py;\nIkReal x68=(py*sj0);\nIkReal x69=((27.0)*sj2);\nIkReal x70=((27.0)*cj2);\nIkReal x71=(cj0*px);\nIkReal x72=((100.0)*x66);\nIkReal x73=((27.0)*x71);\nCheckValue<IkReal> x74 = IKatan2WithCheck(IkReal(((-2.65)+(((26.5)*x68))+((pz*x70))+(((26.5)*x71))+(((-1.0)*x68*x69))+(((-1.0)*x69*x71))+(((2.7)*sj2)))),((((-2.7)*cj2))+((x68*x70))+((x70*x71))+((pz*x69))+(((-26.5)*pz))),IKFAST_ATAN2_MAGTHRESH);\nif(!x74.valid){\ncontinue;\n}\nCheckValue<IkReal> x75=IKPowWithIntegerCheck(IKsign(((1.0)+((x72*(px*px)))+(((100.0)*(pz*pz)))+(((-20.0)*x68))+(((-20.0)*x71))+(((-1.0)*x67*x72))+(((200.0)*x68*x71))+(((100.0)*x67)))),-1);\nif(!x75.valid){\ncontinue;\n}\nj1array[0]=((-1.5707963267949)+(x74.value)+(((1.5707963267949)*(x75.value))));\nsj1array[0]=IKsin(j1array[0]);\ncj1array[0]=IKcos(j1array[0]);\nif( j1array[0] > IKPI )\n{\n    j1array[0]-=IK2PI;\n}\nelse if( j1array[0] < -IKPI )\n{    j1array[0]+=IK2PI;\n}\nj1valid[0] = true;\nfor(int ij1 = 0; ij1 < 1; ++ij1)\n{\nif( !j1valid[ij1] )\n{\n    continue;\n}\n_ij1[0] = ij1; _ij1[1] = -1;\nfor(int iij1 = ij1+1; iij1 < 1; ++iij1)\n{\nif( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )\n{\n    j1valid[iij1]=false; _ij1[1] = iij1; break; \n}\n}\nj1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];\n{\nIkReal evalcond[5];\nIkReal x76=IKcos(j1);\nIkReal x77=IKsin(j1);\nIkReal x78=(cj0*px);\nIkReal x79=((0.27)*cj2);\nIkReal x80=(py*sj0);\nIkReal x81=((1.0)*pz);\nIkReal x82=((0.27)*sj2);\nIkReal x83=((0.27)*x76);\nIkReal x84=((1.0)*x76);\nIkReal x85=(x77*x80);\nevalcond[0]=(((x76*x82))+(((-0.265)*x76))+(((-1.0)*x81))+((x77*x79)));\nevalcond[1]=((0.1)+(((0.265)*x77))+(((-1.0)*x77*x82))+((x76*x79))+(((-1.0)*x80))+(((-1.0)*x78)));\nevalcond[2]=((-0.265)+(((-0.1)*x77))+x82+x85+(((-1.0)*x76*x81))+((x77*x78)));\nevalcond[3]=((((-1.0)*x80*x84))+(((0.1)*x76))+(((-1.0)*x77*x81))+(((-1.0)*x78*x84))+x79);\nevalcond[4]=((-0.007325)+(((0.53)*x85))+(((-0.053)*x77))+(((0.2)*x78))+(((0.2)*x80))+(((0.53)*x77*x78))+(((-1.0)*pp))+(((-0.53)*pz*x76)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j1array[1], cj1array[1], sj1array[1];\nbool j1valid[1]={false};\n_nj1 = 1;\nIkReal x386=((27.0)*sj2);\nIkReal x387=(py*sj0);\nIkReal x388=(cj0*px);\nIkReal x389=((100.0)*pz);\nCheckValue<IkReal> x390=IKPowWithIntegerCheck(IKsign(((2.65)+((x386*x388))+((x386*x387))+(((-26.5)*x387))+(((-26.5)*x388))+(((-2.7)*sj2))+(((27.0)*cj2*pz)))),-1);\nif(!x390.valid){\ncontinue;\n}\nCheckValue<IkReal> x391 = IKatan2WithCheck(IkReal(((-14.3125)+(((14.31)*sj2))+((pz*x389))+(((7.29)*(cj2*cj2))))),(((x387*x389))+((x388*x389))+(((-10.0)*pz))+(((-7.155)*cj2))+(((7.29)*cj2*sj2))),IKFAST_ATAN2_MAGTHRESH);\nif(!x391.valid){\ncontinue;\n}\nj1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x390.value)))+(x391.value));\nsj1array[0]=IKsin(j1array[0]);\ncj1array[0]=IKcos(j1array[0]);\nif( j1array[0] > IKPI )\n{\n    j1array[0]-=IK2PI;\n}\nelse if( j1array[0] < -IKPI )\n{    j1array[0]+=IK2PI;\n}\nj1valid[0] = true;\nfor(int ij1 = 0; ij1 < 1; ++ij1)\n{\nif( !j1valid[ij1] )\n{\n    continue;\n}\n_ij1[0] = ij1; _ij1[1] = -1;\nfor(int iij1 = ij1+1; iij1 < 1; ++iij1)\n{\nif( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )\n{\n    j1valid[iij1]=false; _ij1[1] = iij1; break; \n}\n}\nj1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];\n{\nIkReal evalcond[5];\nIkReal x392=IKcos(j1);\nIkReal x393=IKsin(j1);\nIkReal x394=(cj0*px);\nIkReal x395=((0.27)*cj2);\nIkReal x396=(py*sj0);\nIkReal x397=((1.0)*pz);\nIkReal x398=((0.27)*sj2);\nIkReal x399=((0.27)*x392);\nIkReal x400=((1.0)*x392);\nIkReal x401=(x393*x396);\nevalcond[0]=((((-1.0)*x397))+(((-0.265)*x392))+((x393*x395))+((x392*x398)));\nevalcond[1]=((0.1)+(((-1.0)*x396))+(((-1.0)*x394))+(((0.265)*x393))+(((-1.0)*x393*x398))+((x392*x395)));\nevalcond[2]=((-0.265)+x398+x401+(((-0.1)*x393))+(((-1.0)*x392*x397))+((x393*x394)));\nevalcond[3]=((((-1.0)*x394*x400))+x395+(((0.1)*x392))+(((-1.0)*x396*x400))+(((-1.0)*x393*x397)));\nevalcond[4]=((-0.007325)+(((0.2)*x394))+(((0.2)*x396))+(((-0.053)*x393))+(((0.53)*x393*x394))+(((0.53)*x401))+(((-1.0)*pp))+(((-0.53)*pz*x392)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j1array[1], cj1array[1], sj1array[1];\nbool j1valid[1]={false};\n_nj1 = 1;\nIkReal x402=((2700.0)*pz);\nIkReal x403=(cj0*px);\nIkReal x404=((2700.0)*py*sj0);\nCheckValue<IkReal> x405=IKPowWithIntegerCheck(IKsign(((1431.25)+(((-1431.0)*sj2)))),-1);\nif(!x405.valid){\ncontinue;\n}\nCheckValue<IkReal> x406 = IKatan2WithCheck(IkReal(((-265.0)+(((2650.0)*x403))+(((-2700.0)*sj2*x403))+(((-1.0)*sj2*x404))+(((2650.0)*py*sj0))+(((270.0)*sj2))+((cj2*x402)))),((((-2650.0)*pz))+((sj2*x402))+(((2700.0)*cj2*x403))+(((-270.0)*cj2))+((cj2*x404))),IKFAST_ATAN2_MAGTHRESH);\nif(!x406.valid){\ncontinue;\n}\nj1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x405.value)))+(x406.value));\nsj1array[0]=IKsin(j1array[0]);\ncj1array[0]=IKcos(j1array[0]);\nif( j1array[0] > IKPI )\n{\n    j1array[0]-=IK2PI;\n}\nelse if( j1array[0] < -IKPI )\n{    j1array[0]+=IK2PI;\n}\nj1valid[0] = true;\nfor(int ij1 = 0; ij1 < 1; ++ij1)\n{\nif( !j1valid[ij1] )\n{\n    continue;\n}\n_ij1[0] = ij1; _ij1[1] = -1;\nfor(int iij1 = ij1+1; iij1 < 1; ++iij1)\n{\nif( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )\n{\n    j1valid[iij1]=false; _ij1[1] = iij1; break; \n}\n}\nj1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];\n{\nIkReal evalcond[5];\nIkReal x407=IKcos(j1);\nIkReal x408=IKsin(j1);\nIkReal x409=(cj0*px);\nIkReal x410=((0.27)*cj2);\nIkReal x411=(py*sj0);\nIkReal x412=((1.0)*pz);\nIkReal x413=((0.27)*sj2);\nIkReal x414=((0.27)*x407);\nIkReal x415=((1.0)*x407);\nIkReal x416=(x408*x411);\nevalcond[0]=(((x407*x413))+(((-0.265)*x407))+((x408*x410))+(((-1.0)*x412)));\nevalcond[1]=((0.1)+((x407*x410))+(((0.265)*x408))+(((-1.0)*x408*x413))+(((-1.0)*x409))+(((-1.0)*x411)));\nevalcond[2]=((-0.265)+((x408*x409))+x413+x416+(((-0.1)*x408))+(((-1.0)*x407*x412)));\nevalcond[3]=((((0.1)*x407))+x410+(((-1.0)*x411*x415))+(((-1.0)*x408*x412))+(((-1.0)*x409*x415)));\nevalcond[4]=((-0.007325)+(((-0.53)*pz*x407))+(((0.53)*x416))+(((-1.0)*pp))+(((0.53)*x408*x409))+(((0.2)*x411))+(((0.2)*x409))+(((-0.053)*x408)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n}\n}\n}\n}\n\n}\n\n}\n}\nreturn solutions.GetNumSolutions()>0;\n}\ninline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {\nfor(int rotationiter = 0; rotationiter < 1; ++rotationiter) {\nIkReal x86=((1.0)*cj0);\nIkReal x87=(r11*sj0);\nIkReal x88=(sj1*sj2);\nIkReal x89=(r10*sj0);\nIkReal x90=(cj0*r00);\nIkReal x91=(cj1*cj2);\nIkReal x92=(cj0*r01);\nIkReal x93=(r12*sj0);\nIkReal x94=(cj0*r02);\nIkReal x95=(x91+(((-1.0)*x88)));\nIkReal x96=(x88+(((-1.0)*x91)));\nIkReal x97=(sj0*x96);\nIkReal x98=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));\nIkReal x99=(cj0*x98);\nnew_r00=(((r00*sj0))+(((-1.0)*r10*x86)));\nnew_r01=(((r01*sj0))+(((-1.0)*r11*x86)));\nnew_r02=((((-1.0)*r12*x86))+((r02*sj0)));\nnew_r10=(((x89*x98))+((r20*x95))+((x90*x98)));\nnew_r11=(((r21*x95))+((x87*x98))+((x92*x98)));\nnew_r12=(((x93*x98))+((r22*x95))+((x94*x98)));\nnew_r20=(((x89*x96))+((r20*x98))+((x90*x96)));\nnew_r21=(((r21*x98))+((x87*x96))+((x92*x96)));\nnew_r22=(((x93*x96))+((r22*x98))+((x94*x96)));\n{\nIkReal j4array[2], cj4array[2], sj4array[2];\nbool j4valid[2]={false};\n_nj4 = 2;\ncj4array[0]=new_r22;\nif( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j4valid[0] = j4valid[1] = true;\n    j4array[0] = IKacos(cj4array[0]);\n    sj4array[0] = IKsin(j4array[0]);\n    cj4array[1] = cj4array[0];\n    j4array[1] = -j4array[0];\n    sj4array[1] = -sj4array[0];\n}\nelse if( isnan(cj4array[0]) )\n{\n    // probably any value will work\n    j4valid[0] = true;\n    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;\n}\nfor(int ij4 = 0; ij4 < 2; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 2; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n\n{\nIkReal j5eval[2];\nIkReal x100=((1.0)*cj0);\nIkReal x101=(r11*sj0);\nIkReal x102=(sj1*sj2);\nIkReal x103=(r10*sj0);\nIkReal x104=(cj0*r00);\nIkReal x105=(cj1*cj2);\nIkReal x106=(cj0*r01);\nIkReal x107=(r12*sj0);\nIkReal x108=(cj0*r02);\nIkReal x109=(x105+(((-1.0)*x102)));\nIkReal x110=(x102+(((-1.0)*x105)));\nIkReal x111=(sj0*x110);\nIkReal x112=x98;\nIkReal x113=(cj0*x112);\nnew_r00=(((r00*sj0))+(((-1.0)*r10*x100)));\nnew_r01=((((-1.0)*r11*x100))+((r01*sj0)));\nnew_r02=((((-1.0)*r12*x100))+((r02*sj0)));\nnew_r10=(((x103*x112))+((r20*x109))+((x104*x112)));\nnew_r11=(((x106*x112))+((r21*x109))+((x101*x112)));\nnew_r12=(((r22*x109))+((x108*x112))+((x107*x112)));\nnew_r20=(((x103*x110))+((r20*x112))+((x104*x110)));\nnew_r21=(((x106*x110))+((r21*x112))+((x101*x110)));\nnew_r22=(((r22*x112))+((x108*x110))+((x107*x110)));\nj5eval[0]=sj4;\nj5eval[1]=IKsign(sj4);\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j3eval[1];\nIkReal x114=((1.0)*cj0);\nIkReal x115=(r11*sj0);\nIkReal x116=(sj1*sj2);\nIkReal x117=(r10*sj0);\nIkReal x118=(cj0*r00);\nIkReal x119=(cj1*cj2);\nIkReal x120=(cj0*r01);\nIkReal x121=(r12*sj0);\nIkReal x122=(cj0*r02);\nIkReal x123=(x119+(((-1.0)*x116)));\nIkReal x124=(x116+(((-1.0)*x119)));\nIkReal x125=(sj0*x124);\nIkReal x126=x98;\nIkReal x127=(cj0*x126);\nnew_r00=(((r00*sj0))+(((-1.0)*r10*x114)));\nnew_r01=(((r01*sj0))+(((-1.0)*r11*x114)));\nnew_r02=((((-1.0)*r12*x114))+((r02*sj0)));\nnew_r10=(((x117*x126))+((r20*x123))+((x118*x126)));\nnew_r11=(((r21*x123))+((x120*x126))+((x115*x126)));\nnew_r12=(((x121*x126))+((r22*x123))+((x122*x126)));\nnew_r20=(((x117*x124))+((r20*x126))+((x118*x124)));\nnew_r21=(((r21*x126))+((x120*x124))+((x115*x124)));\nnew_r22=(((x121*x124))+((r22*x126))+((x122*x124)));\nj3eval[0]=sj4;\nif( IKabs(j3eval[0]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[6];\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));\nevalcond[1]=((-1.0)+new_r22);\nevalcond[2]=new_r12;\nevalcond[3]=new_r02;\nevalcond[4]=new_r20;\nevalcond[5]=new_r21;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j3array[2], cj3array[2], sj3array[2];\nbool j3valid[2]={false};\n_nj3 = 2;\nCheckValue<IkReal> x129 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);\nif(!x129.valid){\ncontinue;\n}\nIkReal x128=x129.value;\nj3array[0]=((-1.0)*x128);\nsj3array[0]=IKsin(j3array[0]);\ncj3array[0]=IKcos(j3array[0]);\nj3array[1]=((3.14159265358979)+(((-1.0)*x128)));\nsj3array[1]=IKsin(j3array[1]);\ncj3array[1]=IKcos(j3array[1]);\nif( j3array[0] > IKPI )\n{\n    j3array[0]-=IK2PI;\n}\nelse if( j3array[0] < -IKPI )\n{    j3array[0]+=IK2PI;\n}\nj3valid[0] = true;\nif( j3array[1] > IKPI )\n{\n    j3array[1]-=IK2PI;\n}\nelse if( j3array[1] < -IKPI )\n{    j3array[1]+=IK2PI;\n}\nj3valid[1] = true;\nfor(int ij3 = 0; ij3 < 2; ++ij3)\n{\nif( !j3valid[ij3] )\n{\n    continue;\n}\n_ij3[0] = ij3; _ij3[1] = -1;\nfor(int iij3 = ij3+1; iij3 < 2; ++iij3)\n{\nif( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )\n{\n    j3valid[iij3]=false; _ij3[1] = iij3; break; \n}\n}\nj3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];\n{\nIkReal evalcond[1];\nevalcond[0]=((((-1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x130=((1.0)*new_r01);\nif( IKabs(((((-1.0)*cj3*x130))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x130))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x130))+(((-1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x130))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((((-1.0)*cj3*x130))+(((-1.0)*new_r00*sj3))), ((((-1.0)*sj3*x130))+((cj3*new_r00))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x131=IKsin(j5);\nIkReal x132=IKcos(j5);\nIkReal x133=((1.0)*sj3);\nIkReal x134=(sj3*x131);\nIkReal x135=((1.0)*x132);\nIkReal x136=((1.0)*x131);\nIkReal x137=(cj3*x135);\nevalcond[0]=(((new_r11*sj3))+x131+((cj3*new_r01)));\nevalcond[1]=(((new_r10*sj3))+(((-1.0)*x135))+((cj3*new_r00)));\nevalcond[2]=(((cj3*x131))+((sj3*x132))+new_r01);\nevalcond[3]=(x134+(((-1.0)*x137))+new_r00);\nevalcond[4]=(x134+(((-1.0)*x137))+new_r11);\nevalcond[5]=((((-1.0)*new_r00*x133))+(((-1.0)*x136))+((cj3*new_r10)));\nevalcond[6]=((((-1.0)*new_r01*x133))+(((-1.0)*x135))+((cj3*new_r11)));\nevalcond[7]=((((-1.0)*cj3*x136))+(((-1.0)*x132*x133))+new_r10);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));\nevalcond[1]=((1.0)+new_r22);\nevalcond[2]=new_r12;\nevalcond[3]=new_r02;\nevalcond[4]=new_r20;\nevalcond[5]=new_r21;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j3array[2], cj3array[2], sj3array[2];\nbool j3valid[2]={false};\n_nj3 = 2;\nCheckValue<IkReal> x139 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);\nif(!x139.valid){\ncontinue;\n}\nIkReal x138=x139.value;\nj3array[0]=((-1.0)*x138);\nsj3array[0]=IKsin(j3array[0]);\ncj3array[0]=IKcos(j3array[0]);\nj3array[1]=((3.14159265358979)+(((-1.0)*x138)));\nsj3array[1]=IKsin(j3array[1]);\ncj3array[1]=IKcos(j3array[1]);\nif( j3array[0] > IKPI )\n{\n    j3array[0]-=IK2PI;\n}\nelse if( j3array[0] < -IKPI )\n{    j3array[0]+=IK2PI;\n}\nj3valid[0] = true;\nif( j3array[1] > IKPI )\n{\n    j3array[1]-=IK2PI;\n}\nelse if( j3array[1] < -IKPI )\n{    j3array[1]+=IK2PI;\n}\nj3valid[1] = true;\nfor(int ij3 = 0; ij3 < 2; ++ij3)\n{\nif( !j3valid[ij3] )\n{\n    continue;\n}\n_ij3[0] = ij3; _ij3[1] = -1;\nfor(int iij3 = ij3+1; iij3 < 2; ++iij3)\n{\nif( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )\n{\n    j3valid[iij3]=false; _ij3[1] = iij3; break; \n}\n}\nj3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];\n{\nIkReal evalcond[1];\nevalcond[0]=((((-1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x140=((1.0)*cj3);\nif( IKabs(((((-1.0)*new_r01*x140))+(((-1.0)*new_r11*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj3))+(((-1.0)*new_r11*x140)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x140))+(((-1.0)*new_r11*sj3))))+IKsqr((((new_r01*sj3))+(((-1.0)*new_r11*x140))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((((-1.0)*new_r01*x140))+(((-1.0)*new_r11*sj3))), (((new_r01*sj3))+(((-1.0)*new_r11*x140))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x141=IKsin(j5);\nIkReal x142=IKcos(j5);\nIkReal x143=((1.0)*sj3);\nIkReal x144=(cj3*x141);\nIkReal x145=((1.0)*x142);\nIkReal x146=(x142*x143);\nevalcond[0]=(((new_r11*sj3))+x141+((cj3*new_r01)));\nevalcond[1]=(x141+((cj3*new_r10))+(((-1.0)*new_r00*x143)));\nevalcond[2]=((((-1.0)*new_r01*x143))+x142+((cj3*new_r11)));\nevalcond[3]=((((-1.0)*x145))+((new_r10*sj3))+((cj3*new_r00)));\nevalcond[4]=(((cj3*x142))+new_r11+((sj3*x141)));\nevalcond[5]=((((-1.0)*x146))+x144+new_r01);\nevalcond[6]=((((-1.0)*x146))+x144+new_r10);\nevalcond[7]=((((-1.0)*cj3*x145))+(((-1.0)*x141*x143))+new_r00);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j3, j5]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j3array[1], cj3array[1], sj3array[1];\nbool j3valid[1]={false};\n_nj3 = 1;\nCheckValue<IkReal> x148=IKPowWithIntegerCheck(sj4,-1);\nif(!x148.valid){\ncontinue;\n}\nIkReal x147=x148.value;\nCheckValue<IkReal> x149=IKPowWithIntegerCheck(new_r02,-1);\nif(!x149.valid){\ncontinue;\n}\nif( IKabs((x147*(x149.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r12*new_r12))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x147)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x147*(x149.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r12*new_r12)))))))+IKsqr(((-1.0)*new_r12*x147))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj3array[0]=IKatan2((x147*(x149.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r12*new_r12)))))), ((-1.0)*new_r12*x147));\nsj3array[0]=IKsin(j3array[0]);\ncj3array[0]=IKcos(j3array[0]);\nif( j3array[0] > IKPI )\n{\n    j3array[0]-=IK2PI;\n}\nelse if( j3array[0] < -IKPI )\n{    j3array[0]+=IK2PI;\n}\nj3valid[0] = true;\nfor(int ij3 = 0; ij3 < 1; ++ij3)\n{\nif( !j3valid[ij3] )\n{\n    continue;\n}\n_ij3[0] = ij3; _ij3[1] = -1;\nfor(int iij3 = ij3+1; iij3 < 1; ++iij3)\n{\nif( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )\n{\n    j3valid[iij3]=false; _ij3[1] = iij3; break; \n}\n}\nj3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];\n{\nIkReal evalcond[8];\nIkReal x150=IKsin(j3);\nIkReal x151=IKcos(j3);\nIkReal x152=((1.0)*cj4);\nIkReal x153=((1.0)*sj4);\nIkReal x154=(sj4*x151);\nIkReal x155=(new_r02*x150);\nIkReal x156=(new_r12*x151);\nevalcond[0]=(x154+new_r12);\nevalcond[1]=((((-1.0)*x150*x153))+new_r02);\nevalcond[2]=(((new_r12*x150))+((new_r02*x151)));\nevalcond[3]=(sj4+x156+(((-1.0)*x155)));\nevalcond[4]=(((cj4*x155))+(((-1.0)*new_r22*x153))+(((-1.0)*x152*x156)));\nevalcond[5]=((((-1.0)*new_r20*x152))+(((-1.0)*new_r00*x150*x153))+((new_r10*x154)));\nevalcond[6]=(((new_r11*x154))+(((-1.0)*new_r21*x152))+(((-1.0)*new_r01*x150*x153)));\nevalcond[7]=((1.0)+((new_r12*x154))+(((-1.0)*x153*x155))+(((-1.0)*new_r22*x152)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nIkReal j5eval[2];\nIkReal x157=((1.0)*cj0);\nIkReal x158=(r11*sj0);\nIkReal x159=(sj1*sj2);\nIkReal x160=(r10*sj0);\nIkReal x161=(cj0*r00);\nIkReal x162=(cj1*cj2);\nIkReal x163=(cj0*r01);\nIkReal x164=(r12*sj0);\nIkReal x165=(cj0*r02);\nIkReal x166=(x162+(((-1.0)*x159)));\nIkReal x167=(x159+(((-1.0)*x162)));\nIkReal x168=(sj0*x167);\nIkReal x169=x98;\nIkReal x170=(cj0*x169);\nnew_r00=(((r00*sj0))+(((-1.0)*r10*x157)));\nnew_r01=(((r01*sj0))+(((-1.0)*r11*x157)));\nnew_r02=(((r02*sj0))+(((-1.0)*r12*x157)));\nnew_r10=(((x161*x169))+((r20*x166))+((x160*x169)));\nnew_r11=(((r21*x166))+((x158*x169))+((x163*x169)));\nnew_r12=(((r22*x166))+((x164*x169))+((x165*x169)));\nnew_r20=(((x161*x167))+((r20*x169))+((x160*x167)));\nnew_r21=(((r21*x169))+((x158*x167))+((x163*x167)));\nnew_r22=(((r22*x169))+((x164*x167))+((x165*x167)));\nj5eval[0]=sj4;\nj5eval[1]=IKsign(sj4);\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j5eval[2];\nIkReal x171=((1.0)*cj0);\nIkReal x172=(r11*sj0);\nIkReal x173=(sj1*sj2);\nIkReal x174=(r10*sj0);\nIkReal x175=(cj0*r00);\nIkReal x176=(cj1*cj2);\nIkReal x177=(cj0*r01);\nIkReal x178=(r12*sj0);\nIkReal x179=(cj0*r02);\nIkReal x180=((((-1.0)*x173))+x176);\nIkReal x181=((((-1.0)*x176))+x173);\nIkReal x182=(sj0*x181);\nIkReal x183=x98;\nIkReal x184=(cj0*x183);\nnew_r00=(((r00*sj0))+(((-1.0)*r10*x171)));\nnew_r01=((((-1.0)*r11*x171))+((r01*sj0)));\nnew_r02=(((r02*sj0))+(((-1.0)*r12*x171)));\nnew_r10=(((x174*x183))+((r20*x180))+((x175*x183)));\nnew_r11=(((x177*x183))+((x172*x183))+((r21*x180)));\nnew_r12=(((x178*x183))+((x179*x183))+((r22*x180)));\nnew_r20=(((x174*x181))+((r20*x183))+((x175*x181)));\nnew_r21=(((x177*x181))+((x172*x181))+((r21*x183)));\nnew_r22=(((x178*x181))+((x179*x181))+((r22*x183)));\nj5eval[0]=sj4;\nj5eval[1]=cj3;\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j5eval[3];\nIkReal x185=((1.0)*cj0);\nIkReal x186=(r11*sj0);\nIkReal x187=(sj1*sj2);\nIkReal x188=(r10*sj0);\nIkReal x189=(cj0*r00);\nIkReal x190=(cj1*cj2);\nIkReal x191=(cj0*r01);\nIkReal x192=(r12*sj0);\nIkReal x193=(cj0*r02);\nIkReal x194=((((-1.0)*x187))+x190);\nIkReal x195=((((-1.0)*x190))+x187);\nIkReal x196=(sj0*x195);\nIkReal x197=x98;\nIkReal x198=(cj0*x197);\nnew_r00=(((r00*sj0))+(((-1.0)*r10*x185)));\nnew_r01=((((-1.0)*r11*x185))+((r01*sj0)));\nnew_r02=((((-1.0)*r12*x185))+((r02*sj0)));\nnew_r10=(((x188*x197))+((x189*x197))+((r20*x194)));\nnew_r11=(((x186*x197))+((x191*x197))+((r21*x194)));\nnew_r12=(((x193*x197))+((x192*x197))+((r22*x194)));\nnew_r20=(((x188*x195))+((x189*x195))+((r20*x197)));\nnew_r21=(((x186*x195))+((x191*x195))+((r21*x197)));\nnew_r22=(((x193*x195))+((x192*x195))+((r22*x197)));\nj5eval[0]=sj4;\nj5eval[1]=cj4;\nj5eval[2]=sj3;\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[12];\nbool bgotonextstatement = true;\ndo\n{\nIkReal x199=(cj3*new_r12);\nIkReal x200=(new_r02*sj3);\nIkReal x201=(((new_r12*sj3))+((cj3*new_r02)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));\nevalcond[1]=((-1.0)+new_r22);\nevalcond[2]=new_r12;\nevalcond[3]=new_r02;\nevalcond[4]=new_r20;\nevalcond[5]=new_r21;\nevalcond[6]=x201;\nevalcond[7]=x201;\nevalcond[8]=(x199+(((-1.0)*x200)));\nevalcond[9]=((((-1.0)*x199))+x200);\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x202=((1.0)*new_r01);\nif( IKabs(((((-1.0)*new_r00*sj3))+(((-1.0)*cj3*x202)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj3*new_r00))+(((-1.0)*sj3*x202)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*sj3))+(((-1.0)*cj3*x202))))+IKsqr((((cj3*new_r00))+(((-1.0)*sj3*x202))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((((-1.0)*new_r00*sj3))+(((-1.0)*cj3*x202))), (((cj3*new_r00))+(((-1.0)*sj3*x202))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x203=IKsin(j5);\nIkReal x204=IKcos(j5);\nIkReal x205=((1.0)*sj3);\nIkReal x206=(sj3*x203);\nIkReal x207=((1.0)*x204);\nIkReal x208=((1.0)*x203);\nIkReal x209=(cj3*x207);\nevalcond[0]=(((new_r11*sj3))+x203+((cj3*new_r01)));\nevalcond[1]=(((new_r10*sj3))+(((-1.0)*x207))+((cj3*new_r00)));\nevalcond[2]=(((sj3*x204))+((cj3*x203))+new_r01);\nevalcond[3]=((((-1.0)*x209))+x206+new_r00);\nevalcond[4]=((((-1.0)*x209))+x206+new_r11);\nevalcond[5]=((((-1.0)*new_r00*x205))+(((-1.0)*x208))+((cj3*new_r10)));\nevalcond[6]=((((-1.0)*x207))+((cj3*new_r11))+(((-1.0)*new_r01*x205)));\nevalcond[7]=((((-1.0)*x204*x205))+new_r10+(((-1.0)*cj3*x208)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x210=(((new_r12*sj3))+((cj3*new_r02)));\nIkReal x211=((((-1.0)*new_r02*sj3))+((cj3*new_r12)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));\nevalcond[1]=((1.0)+new_r22);\nevalcond[2]=new_r12;\nevalcond[3]=new_r02;\nevalcond[4]=new_r20;\nevalcond[5]=new_r21;\nevalcond[6]=x210;\nevalcond[7]=x210;\nevalcond[8]=x211;\nevalcond[9]=x211;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x212=((1.0)*cj3);\nif( IKabs(((((-1.0)*new_r01*x212))+(((-1.0)*new_r11*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r11*x212))+((new_r01*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x212))+(((-1.0)*new_r11*sj3))))+IKsqr(((((-1.0)*new_r11*x212))+((new_r01*sj3))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((((-1.0)*new_r01*x212))+(((-1.0)*new_r11*sj3))), ((((-1.0)*new_r11*x212))+((new_r01*sj3))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x213=IKsin(j5);\nIkReal x214=IKcos(j5);\nIkReal x215=((1.0)*sj3);\nIkReal x216=(cj3*x213);\nIkReal x217=((1.0)*x214);\nIkReal x218=(x214*x215);\nevalcond[0]=(((new_r11*sj3))+x213+((cj3*new_r01)));\nevalcond[1]=(x213+((cj3*new_r10))+(((-1.0)*new_r00*x215)));\nevalcond[2]=(x214+(((-1.0)*new_r01*x215))+((cj3*new_r11)));\nevalcond[3]=(((new_r10*sj3))+((cj3*new_r00))+(((-1.0)*x217)));\nevalcond[4]=(((sj3*x213))+((cj3*x214))+new_r11);\nevalcond[5]=(x216+new_r01+(((-1.0)*x218)));\nevalcond[6]=(x216+new_r10+(((-1.0)*x218)));\nevalcond[7]=((((-1.0)*cj3*x217))+(((-1.0)*x213*x215))+new_r00);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x219=((1.0)*sj3);\nIkReal x220=(((new_r12*sj3))+((cj3*new_r02)));\nIkReal x221=(((cj3*new_r10))+(((-1.0)*new_r00*x219)));\nIkReal x222=((((-1.0)*new_r01*x219))+((cj3*new_r11)));\nIkReal x223=((1.0)+(((-1.0)*new_r02*x219))+((cj3*new_r12)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));\nevalcond[1]=new_r22;\nevalcond[2]=(cj3+new_r12);\nevalcond[3]=(new_r02+(((-1.0)*x219)));\nevalcond[4]=x220;\nevalcond[5]=x220;\nevalcond[6]=x223;\nevalcond[7]=x221;\nevalcond[8]=x222;\nevalcond[9]=x221;\nevalcond[10]=x222;\nevalcond[11]=x223;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(new_r20, new_r21);\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x224=IKcos(j5);\nIkReal x225=IKsin(j5);\nIkReal x226=((1.0)*new_r12);\nIkReal x227=((1.0)*x224);\nIkReal x228=((1.0)*x225);\nevalcond[0]=(new_r20+(((-1.0)*x228)));\nevalcond[1]=(new_r21+(((-1.0)*x227)));\nevalcond[2]=(((new_r12*x224))+new_r00);\nevalcond[3]=(((new_r02*x225))+new_r11);\nevalcond[4]=((((-1.0)*x225*x226))+new_r01);\nevalcond[5]=(new_r10+(((-1.0)*new_r02*x227)));\nevalcond[6]=((((-1.0)*new_r01*x226))+x225+((new_r02*new_r11)));\nevalcond[7]=(((new_r02*new_r10))+(((-1.0)*x227))+(((-1.0)*new_r00*x226)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x229=(cj3*new_r12);\nIkReal x230=(new_r01*sj3);\nIkReal x231=((1.0)*cj3);\nIkReal x232=(new_r00*sj3);\nIkReal x233=(new_r02*sj3);\nIkReal x234=(((new_r12*sj3))+((cj3*new_r02)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));\nevalcond[1]=new_r22;\nevalcond[2]=((((-1.0)*x231))+new_r12);\nevalcond[3]=(sj3+new_r02);\nevalcond[4]=x234;\nevalcond[5]=x234;\nevalcond[6]=((-1.0)+x229+(((-1.0)*x233)));\nevalcond[7]=(((cj3*new_r10))+(((-1.0)*x232)));\nevalcond[8]=(((cj3*new_r11))+(((-1.0)*x230)));\nevalcond[9]=(x232+(((-1.0)*new_r10*x231)));\nevalcond[10]=(x230+(((-1.0)*new_r11*x231)));\nevalcond[11]=((1.0)+x233+(((-1.0)*x229)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x235=IKsin(j5);\nIkReal x236=IKcos(j5);\nIkReal x237=((1.0)*new_r02);\nIkReal x238=((1.0)*x236);\nevalcond[0]=(x235+new_r20);\nevalcond[1]=(x236+new_r21);\nevalcond[2]=(((new_r12*x235))+new_r01);\nevalcond[3]=(((new_r02*x236))+new_r10);\nevalcond[4]=((((-1.0)*new_r12*x238))+new_r00);\nevalcond[5]=((((-1.0)*x235*x237))+new_r11);\nevalcond[6]=(((new_r01*new_r12))+x235+(((-1.0)*new_r11*x237)));\nevalcond[7]=(((new_r00*new_r12))+(((-1.0)*x238))+(((-1.0)*new_r10*x237)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x239=(new_r22+(((-1.0)*cj4)));\nIkReal x240=(sj4+new_r12);\nIkReal x241=((1.0)*cj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));\nevalcond[1]=x239;\nevalcond[2]=x239;\nevalcond[3]=x240;\nevalcond[4]=new_r02;\nevalcond[5]=x240;\nevalcond[6]=((((-1.0)*new_r12*x241))+(((-1.0)*new_r22*sj4)));\nevalcond[7]=(((new_r10*sj4))+(((-1.0)*new_r20*x241)));\nevalcond[8]=(((new_r11*sj4))+(((-1.0)*new_r21*x241)));\nevalcond[9]=((1.0)+((new_r12*sj4))+(((-1.0)*new_r22*x241)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((-1.0)*new_r01), new_r00);\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x242=IKsin(j5);\nIkReal x243=IKcos(j5);\nIkReal x244=((1.0)*new_r22);\nevalcond[0]=(x242+new_r01);\nevalcond[1]=(((new_r12*x242))+new_r20);\nevalcond[2]=(((new_r12*x243))+new_r21);\nevalcond[3]=((((-1.0)*x243))+new_r00);\nevalcond[4]=((((-1.0)*x243*x244))+new_r11);\nevalcond[5]=((((-1.0)*x242*x244))+new_r10);\nevalcond[6]=(((new_r12*new_r20))+x242+(((-1.0)*new_r10*x244)));\nevalcond[7]=(((new_r12*new_r21))+x243+(((-1.0)*new_r11*x244)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x245=(new_r22+(((-1.0)*cj4)));\nIkReal x246=((1.0)*cj4);\nIkReal x247=((1.0)*new_r12);\nIkReal x248=((1.0)*sj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));\nevalcond[1]=x245;\nevalcond[2]=x245;\nevalcond[3]=((((-1.0)*x248))+new_r12);\nevalcond[4]=new_r02;\nevalcond[5]=(sj4+(((-1.0)*x247)));\nevalcond[6]=(((cj4*new_r12))+(((-1.0)*new_r22*x248)));\nevalcond[7]=((((-1.0)*new_r20*x246))+(((-1.0)*new_r10*x248)));\nevalcond[8]=((((-1.0)*new_r21*x246))+(((-1.0)*new_r11*x248)));\nevalcond[9]=((1.0)+(((-1.0)*sj4*x247))+(((-1.0)*new_r22*x246)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(new_r01, ((-1.0)*new_r00));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x249=IKsin(j5);\nIkReal x250=IKcos(j5);\nIkReal x251=((1.0)*new_r12);\nIkReal x252=((1.0)*x249);\nIkReal x253=((1.0)*x250);\nevalcond[0]=(x249+(((-1.0)*new_r01)));\nevalcond[1]=(((new_r22*x250))+new_r11);\nevalcond[2]=((((-1.0)*x249*x251))+new_r20);\nevalcond[3]=((((-1.0)*x250*x251))+new_r21);\nevalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x253)));\nevalcond[5]=((((-1.0)*new_r10))+(((-1.0)*new_r22*x252)));\nevalcond[6]=(x249+((new_r10*new_r22))+(((-1.0)*new_r20*x251)));\nevalcond[7]=((((-1.0)*new_r21*x251))+x250+((new_r11*new_r22)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x254=(new_r22+(((-1.0)*cj4)));\nIkReal x255=((1.0)*cj4);\nIkReal x256=((1.0)*sj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));\nevalcond[1]=x254;\nevalcond[2]=x254;\nevalcond[3]=new_r12;\nevalcond[4]=(new_r02+(((-1.0)*x256)));\nevalcond[5]=(sj4+(((-1.0)*new_r02)));\nevalcond[6]=(((cj4*new_r02))+(((-1.0)*new_r22*x256)));\nevalcond[7]=((((-1.0)*new_r20*x255))+(((-1.0)*new_r00*x256)));\nevalcond[8]=((((-1.0)*new_r21*x255))+(((-1.0)*new_r01*x256)));\nevalcond[9]=((1.0)+(((-1.0)*new_r22*x255))+(((-1.0)*new_r02*x256)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((-1.0)*new_r11), new_r10);\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x257=IKcos(j5);\nIkReal x258=IKsin(j5);\nIkReal x259=((1.0)*new_r02);\nevalcond[0]=(x258+new_r11);\nevalcond[1]=(new_r10+(((-1.0)*x257)));\nevalcond[2]=(((new_r22*x257))+new_r01);\nevalcond[3]=(((new_r22*x258))+new_r00);\nevalcond[4]=(new_r20+(((-1.0)*x258*x259)));\nevalcond[5]=((((-1.0)*x257*x259))+new_r21);\nevalcond[6]=(((new_r00*new_r22))+x258+(((-1.0)*new_r20*x259)));\nevalcond[7]=((((-1.0)*new_r21*x259))+((new_r01*new_r22))+x257);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x260=(new_r22+(((-1.0)*cj4)));\nIkReal x261=(sj4+new_r02);\nIkReal x262=((1.0)*cj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));\nevalcond[1]=x260;\nevalcond[2]=x260;\nevalcond[3]=new_r12;\nevalcond[4]=x261;\nevalcond[5]=x261;\nevalcond[6]=((((-1.0)*new_r22*sj4))+(((-1.0)*new_r02*x262)));\nevalcond[7]=(((new_r00*sj4))+(((-1.0)*new_r20*x262)));\nevalcond[8]=(((new_r01*sj4))+(((-1.0)*new_r21*x262)));\nevalcond[9]=((1.0)+((new_r02*sj4))+(((-1.0)*new_r22*x262)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x263=IKPowWithIntegerCheck(IKsign(new_r02),-1);\nif(!x263.valid){\ncontinue;\n}\nCheckValue<IkReal> x264 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),((-1.0)*new_r21),IKFAST_ATAN2_MAGTHRESH);\nif(!x264.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x263.value)))+(x264.value));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x265=IKsin(j5);\nIkReal x266=IKcos(j5);\nIkReal x267=((1.0)*new_r22);\nevalcond[0]=(new_r20+((new_r02*x265)));\nevalcond[1]=(new_r21+((new_r02*x266)));\nevalcond[2]=(x265+(((-1.0)*new_r11)));\nevalcond[3]=(new_r01+(((-1.0)*x266*x267)));\nevalcond[4]=((((-1.0)*x265*x267))+new_r00);\nevalcond[5]=((((-1.0)*x266))+(((-1.0)*new_r10)));\nevalcond[6]=((((-1.0)*new_r00*x267))+x265+((new_r02*new_r20)));\nevalcond[7]=((((-1.0)*new_r01*x267))+x266+((new_r02*new_r21)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j5]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x269=IKPowWithIntegerCheck(sj4,-1);\nif(!x269.valid){\ncontinue;\n}\nIkReal x268=x269.value;\nCheckValue<IkReal> x270=IKPowWithIntegerCheck(cj4,-1);\nif(!x270.valid){\ncontinue;\n}\nCheckValue<IkReal> x271=IKPowWithIntegerCheck(sj3,-1);\nif(!x271.valid){\ncontinue;\n}\nif( IKabs((new_r20*x268)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x268*(x270.value)*(x271.value)*(((((-1.0)*new_r01*sj4))+(((-1.0)*cj3*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x268))+IKsqr((x268*(x270.value)*(x271.value)*(((((-1.0)*new_r01*sj4))+(((-1.0)*cj3*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2((new_r20*x268), (x268*(x270.value)*(x271.value)*(((((-1.0)*new_r01*sj4))+(((-1.0)*cj3*new_r20))))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[12];\nIkReal x272=IKsin(j5);\nIkReal x273=IKcos(j5);\nIkReal x274=(cj4*sj3);\nIkReal x275=(cj3*new_r10);\nIkReal x276=(cj3*new_r11);\nIkReal x277=((1.0)*sj3);\nIkReal x278=((1.0)*cj4);\nIkReal x279=((1.0)*sj4);\nIkReal x280=(cj4*x272);\nIkReal x281=((1.0)*x273);\nevalcond[0]=((((-1.0)*x272*x279))+new_r20);\nevalcond[1]=((((-1.0)*x273*x279))+new_r21);\nevalcond[2]=(((new_r11*sj3))+x272+((cj3*new_r01)));\nevalcond[3]=(((new_r10*sj3))+((cj3*new_r00))+(((-1.0)*x281)));\nevalcond[4]=(((x273*x274))+new_r01+((cj3*x272)));\nevalcond[5]=(((x272*x274))+(((-1.0)*cj3*x281))+new_r00);\nevalcond[6]=(((sj3*x272))+(((-1.0)*cj3*x273*x278))+new_r11);\nevalcond[7]=((((-1.0)*x272*x278))+(((-1.0)*new_r00*x277))+x275);\nevalcond[8]=((((-1.0)*x273*x278))+(((-1.0)*new_r01*x277))+x276);\nevalcond[9]=((((-1.0)*x273*x277))+(((-1.0)*cj3*x272*x278))+new_r10);\nevalcond[10]=(x272+((new_r00*x274))+(((-1.0)*new_r20*x279))+(((-1.0)*x275*x278)));\nevalcond[11]=((((-1.0)*new_r21*x279))+x273+((new_r01*x274))+(((-1.0)*x276*x278)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x283=IKPowWithIntegerCheck(sj4,-1);\nif(!x283.valid){\ncontinue;\n}\nIkReal x282=x283.value;\nCheckValue<IkReal> x284=IKPowWithIntegerCheck(cj3,-1);\nif(!x284.valid){\ncontinue;\n}\nif( IKabs((new_r20*x282)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x282*(x284.value)*((((new_r00*sj4))+((cj4*new_r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x282))+IKsqr((x282*(x284.value)*((((new_r00*sj4))+((cj4*new_r20*sj3))))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2((new_r20*x282), (x282*(x284.value)*((((new_r00*sj4))+((cj4*new_r20*sj3))))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[12];\nIkReal x285=IKsin(j5);\nIkReal x286=IKcos(j5);\nIkReal x287=(cj4*sj3);\nIkReal x288=(cj3*new_r10);\nIkReal x289=(cj3*new_r11);\nIkReal x290=((1.0)*sj3);\nIkReal x291=((1.0)*cj4);\nIkReal x292=((1.0)*sj4);\nIkReal x293=(cj4*x285);\nIkReal x294=((1.0)*x286);\nevalcond[0]=((((-1.0)*x285*x292))+new_r20);\nevalcond[1]=((((-1.0)*x286*x292))+new_r21);\nevalcond[2]=(((new_r11*sj3))+x285+((cj3*new_r01)));\nevalcond[3]=(((new_r10*sj3))+(((-1.0)*x294))+((cj3*new_r00)));\nevalcond[4]=(((x286*x287))+((cj3*x285))+new_r01);\nevalcond[5]=(((x285*x287))+(((-1.0)*cj3*x294))+new_r00);\nevalcond[6]=(((sj3*x285))+(((-1.0)*cj3*x286*x291))+new_r11);\nevalcond[7]=((((-1.0)*x285*x291))+x288+(((-1.0)*new_r00*x290)));\nevalcond[8]=((((-1.0)*new_r01*x290))+(((-1.0)*x286*x291))+x289);\nevalcond[9]=((((-1.0)*x286*x290))+new_r10+(((-1.0)*cj3*x285*x291)));\nevalcond[10]=((((-1.0)*new_r20*x292))+x285+(((-1.0)*x288*x291))+((new_r00*x287)));\nevalcond[11]=((((-1.0)*new_r21*x292))+(((-1.0)*x289*x291))+x286+((new_r01*x287)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x295=IKPowWithIntegerCheck(IKsign(sj4),-1);\nif(!x295.valid){\ncontinue;\n}\nCheckValue<IkReal> x296 = IKatan2WithCheck(IkReal(new_r20),new_r21,IKFAST_ATAN2_MAGTHRESH);\nif(!x296.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x295.value)))+(x296.value));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[12];\nIkReal x297=IKsin(j5);\nIkReal x298=IKcos(j5);\nIkReal x299=(cj4*sj3);\nIkReal x300=(cj3*new_r10);\nIkReal x301=(cj3*new_r11);\nIkReal x302=((1.0)*sj3);\nIkReal x303=((1.0)*cj4);\nIkReal x304=((1.0)*sj4);\nIkReal x305=(cj4*x297);\nIkReal x306=((1.0)*x298);\nevalcond[0]=((((-1.0)*x297*x304))+new_r20);\nevalcond[1]=((((-1.0)*x298*x304))+new_r21);\nevalcond[2]=(((new_r11*sj3))+x297+((cj3*new_r01)));\nevalcond[3]=(((new_r10*sj3))+((cj3*new_r00))+(((-1.0)*x306)));\nevalcond[4]=(((cj3*x297))+((x298*x299))+new_r01);\nevalcond[5]=((((-1.0)*cj3*x306))+((x297*x299))+new_r00);\nevalcond[6]=((((-1.0)*cj3*x298*x303))+new_r11+((sj3*x297)));\nevalcond[7]=((((-1.0)*x297*x303))+x300+(((-1.0)*new_r00*x302)));\nevalcond[8]=((((-1.0)*x298*x303))+x301+(((-1.0)*new_r01*x302)));\nevalcond[9]=((((-1.0)*x298*x302))+(((-1.0)*cj3*x297*x303))+new_r10);\nevalcond[10]=((((-1.0)*new_r20*x304))+((new_r00*x299))+x297+(((-1.0)*x300*x303)));\nevalcond[11]=((((-1.0)*x301*x303))+(((-1.0)*new_r21*x304))+x298+((new_r01*x299)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x307=IKPowWithIntegerCheck(IKsign(sj4),-1);\nif(!x307.valid){\ncontinue;\n}\nCheckValue<IkReal> x308 = IKatan2WithCheck(IkReal(new_r20),new_r21,IKFAST_ATAN2_MAGTHRESH);\nif(!x308.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x307.value)))+(x308.value));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[2];\nIkReal x309=((1.0)*sj4);\nevalcond[0]=((((-1.0)*x309*(IKsin(j5))))+new_r20);\nevalcond[1]=((((-1.0)*x309*(IKcos(j5))))+new_r21);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nIkReal j3eval[2];\nIkReal x310=((1.0)*cj0);\nIkReal x311=(r11*sj0);\nIkReal x312=(sj1*sj2);\nIkReal x313=(r10*sj0);\nIkReal x314=(cj0*r00);\nIkReal x315=(cj1*cj2);\nIkReal x316=(cj0*r01);\nIkReal x317=(r12*sj0);\nIkReal x318=(cj0*r02);\nIkReal x319=(x315+(((-1.0)*x312)));\nIkReal x320=(x312+(((-1.0)*x315)));\nIkReal x321=(sj0*x320);\nIkReal x322=x98;\nIkReal x323=(cj0*x322);\nnew_r00=(((r00*sj0))+(((-1.0)*r10*x310)));\nnew_r01=(((r01*sj0))+(((-1.0)*r11*x310)));\nnew_r02=((((-1.0)*r12*x310))+((r02*sj0)));\nnew_r10=(((r20*x319))+((x313*x322))+((x314*x322)));\nnew_r11=(((x316*x322))+((x311*x322))+((r21*x319)));\nnew_r12=(((x318*x322))+((x317*x322))+((r22*x319)));\nnew_r20=(((r20*x322))+((x313*x320))+((x314*x320)));\nnew_r21=(((r21*x322))+((x316*x320))+((x311*x320)));\nnew_r22=(((x318*x320))+((r22*x322))+((x317*x320)));\nj3eval[0]=sj4;\nj3eval[1]=IKsign(sj4);\nif( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j3eval[1];\nIkReal x324=((1.0)*cj0);\nIkReal x325=(r11*sj0);\nIkReal x326=(sj1*sj2);\nIkReal x327=(r10*sj0);\nIkReal x328=(cj0*r00);\nIkReal x329=(cj1*cj2);\nIkReal x330=(cj0*r01);\nIkReal x331=(r12*sj0);\nIkReal x332=(cj0*r02);\nIkReal x333=((((-1.0)*x326))+x329);\nIkReal x334=((((-1.0)*x329))+x326);\nIkReal x335=(sj0*x334);\nIkReal x336=x98;\nIkReal x337=(cj0*x336);\nnew_r00=(((r00*sj0))+(((-1.0)*r10*x324)));\nnew_r01=(((r01*sj0))+(((-1.0)*r11*x324)));\nnew_r02=((((-1.0)*r12*x324))+((r02*sj0)));\nnew_r10=(((r20*x333))+((x327*x336))+((x328*x336)));\nnew_r11=(((x330*x336))+((r21*x333))+((x325*x336)));\nnew_r12=(((r22*x333))+((x331*x336))+((x332*x336)));\nnew_r20=(((r20*x336))+((x327*x334))+((x328*x334)));\nnew_r21=(((x330*x334))+((r21*x336))+((x325*x334)));\nnew_r22=(((r22*x336))+((x331*x334))+((x332*x334)));\nj3eval[0]=sj4;\nif( IKabs(j3eval[0]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[6];\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));\nevalcond[1]=((-1.0)+new_r22);\nevalcond[2]=new_r12;\nevalcond[3]=new_r02;\nevalcond[4]=new_r20;\nevalcond[5]=new_r21;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j3array[1], cj3array[1], sj3array[1];\nbool j3valid[1]={false};\n_nj3 = 1;\nCheckValue<IkReal> x338=IKPowWithIntegerCheck(IKsign((((new_r01*new_r12))+(((-1.0)*new_r02*new_r11)))),-1);\nif(!x338.valid){\ncontinue;\n}\nCheckValue<IkReal> x339 = IKatan2WithCheck(IkReal((new_r02*sj5)),((-1.0)*new_r12*sj5),IKFAST_ATAN2_MAGTHRESH);\nif(!x339.valid){\ncontinue;\n}\nj3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x338.value)))+(x339.value));\nsj3array[0]=IKsin(j3array[0]);\ncj3array[0]=IKcos(j3array[0]);\nif( j3array[0] > IKPI )\n{\n    j3array[0]-=IK2PI;\n}\nelse if( j3array[0] < -IKPI )\n{    j3array[0]+=IK2PI;\n}\nj3valid[0] = true;\nfor(int ij3 = 0; ij3 < 1; ++ij3)\n{\nif( !j3valid[ij3] )\n{\n    continue;\n}\n_ij3[0] = ij3; _ij3[1] = -1;\nfor(int iij3 = ij3+1; iij3 < 1; ++iij3)\n{\nif( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )\n{\n    j3valid[iij3]=false; _ij3[1] = iij3; break; \n}\n}\nj3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];\n{\nIkReal evalcond[10];\nIkReal x340=IKcos(j3);\nIkReal x341=IKsin(j3);\nIkReal x342=((1.0)*cj5);\nIkReal x343=(sj5*x341);\nIkReal x344=(cj5*x341);\nIkReal x345=(sj5*x340);\nIkReal x346=((1.0)*x341);\nIkReal x347=(x340*x342);\nevalcond[0]=(((new_r02*x340))+((new_r12*x341)));\nevalcond[1]=(sj5+((new_r11*x341))+((new_r01*x340)));\nevalcond[2]=((((-1.0)*new_r02*x346))+((new_r12*x340)));\nevalcond[3]=(x344+x345+new_r01);\nevalcond[4]=(x343+new_r00+(((-1.0)*x347)));\nevalcond[5]=(x343+new_r11+(((-1.0)*x347)));\nevalcond[6]=(((new_r00*x340))+((new_r10*x341))+(((-1.0)*x342)));\nevalcond[7]=((((-1.0)*x341*x342))+new_r10+(((-1.0)*x345)));\nevalcond[8]=((((-1.0)*sj5))+((new_r10*x340))+(((-1.0)*new_r00*x346)));\nevalcond[9]=(((new_r11*x340))+(((-1.0)*new_r01*x346))+(((-1.0)*x342)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));\nevalcond[1]=((1.0)+new_r22);\nevalcond[2]=new_r12;\nevalcond[3]=new_r02;\nevalcond[4]=new_r20;\nevalcond[5]=new_r21;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j3array[1], cj3array[1], sj3array[1];\nbool j3valid[1]={false};\n_nj3 = 1;\nCheckValue<IkReal> x348 = IKatan2WithCheck(IkReal((new_r01*new_r02)),((-1.0)*new_r01*new_r12),IKFAST_ATAN2_MAGTHRESH);\nif(!x348.valid){\ncontinue;\n}\nCheckValue<IkReal> x349=IKPowWithIntegerCheck(IKsign((((new_r12*sj5))+((cj5*new_r02)))),-1);\nif(!x349.valid){\ncontinue;\n}\nj3array[0]=((-1.5707963267949)+(x348.value)+(((1.5707963267949)*(x349.value))));\nsj3array[0]=IKsin(j3array[0]);\ncj3array[0]=IKcos(j3array[0]);\nif( j3array[0] > IKPI )\n{\n    j3array[0]-=IK2PI;\n}\nelse if( j3array[0] < -IKPI )\n{    j3array[0]+=IK2PI;\n}\nj3valid[0] = true;\nfor(int ij3 = 0; ij3 < 1; ++ij3)\n{\nif( !j3valid[ij3] )\n{\n    continue;\n}\n_ij3[0] = ij3; _ij3[1] = -1;\nfor(int iij3 = ij3+1; iij3 < 1; ++iij3)\n{\nif( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )\n{\n    j3valid[iij3]=false; _ij3[1] = iij3; break; \n}\n}\nj3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];\n{\nIkReal evalcond[10];\nIkReal x350=IKcos(j3);\nIkReal x351=IKsin(j3);\nIkReal x352=((1.0)*cj5);\nIkReal x353=(sj5*x350);\nIkReal x354=(cj5*x350);\nIkReal x355=((1.0)*x351);\nIkReal x356=(x351*x352);\nevalcond[0]=(((new_r02*x350))+((new_r12*x351)));\nevalcond[1]=(((new_r01*x350))+sj5+((new_r11*x351)));\nevalcond[2]=((((-1.0)*new_r02*x355))+((new_r12*x350)));\nevalcond[3]=(((sj5*x351))+x354+new_r11);\nevalcond[4]=((((-1.0)*x356))+x353+new_r01);\nevalcond[5]=(sj5+(((-1.0)*new_r00*x355))+((new_r10*x350)));\nevalcond[6]=(cj5+(((-1.0)*new_r01*x355))+((new_r11*x350)));\nevalcond[7]=((((-1.0)*x356))+x353+new_r10);\nevalcond[8]=((((-1.0)*x352))+((new_r10*x351))+((new_r00*x350)));\nevalcond[9]=(new_r00+(((-1.0)*sj5*x355))+(((-1.0)*x350*x352)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j3]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j3array[1], cj3array[1], sj3array[1];\nbool j3valid[1]={false};\n_nj3 = 1;\nCheckValue<IkReal> x358=IKPowWithIntegerCheck(sj4,-1);\nif(!x358.valid){\ncontinue;\n}\nIkReal x357=x358.value;\nCheckValue<IkReal> x359=IKPowWithIntegerCheck(new_r11,-1);\nif(!x359.valid){\ncontinue;\n}\nif( IKabs((x357*(x359.value)*((((new_r01*new_r12))+(((-1.0)*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r12*x357)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x357*(x359.value)*((((new_r01*new_r12))+(((-1.0)*sj4*sj5))))))+IKsqr(((-1.0)*new_r12*x357))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj3array[0]=IKatan2((x357*(x359.value)*((((new_r01*new_r12))+(((-1.0)*sj4*sj5))))), ((-1.0)*new_r12*x357));\nsj3array[0]=IKsin(j3array[0]);\ncj3array[0]=IKcos(j3array[0]);\nif( j3array[0] > IKPI )\n{\n    j3array[0]-=IK2PI;\n}\nelse if( j3array[0] < -IKPI )\n{    j3array[0]+=IK2PI;\n}\nj3valid[0] = true;\nfor(int ij3 = 0; ij3 < 1; ++ij3)\n{\nif( !j3valid[ij3] )\n{\n    continue;\n}\n_ij3[0] = ij3; _ij3[1] = -1;\nfor(int iij3 = ij3+1; iij3 < 1; ++iij3)\n{\nif( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )\n{\n    j3valid[iij3]=false; _ij3[1] = iij3; break; \n}\n}\nj3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];\n{\nIkReal evalcond[18];\nIkReal x360=IKsin(j3);\nIkReal x361=IKcos(j3);\nIkReal x362=((1.0)*cj5);\nIkReal x363=((1.0)*cj4);\nIkReal x364=((1.0)*sj4);\nIkReal x365=(new_r11*x361);\nIkReal x366=(sj5*x361);\nIkReal x367=(cj4*x361);\nIkReal x368=(sj4*x361);\nIkReal x369=(cj4*x360);\nIkReal x370=((1.0)*x360);\nIkReal x371=(x360*x364);\nevalcond[0]=(x368+new_r12);\nevalcond[1]=((((-1.0)*x371))+new_r02);\nevalcond[2]=(((new_r02*x361))+((new_r12*x360)));\nevalcond[3]=(sj5+((new_r01*x361))+((new_r11*x360)));\nevalcond[4]=(sj4+(((-1.0)*new_r02*x370))+((new_r12*x361)));\nevalcond[5]=(x366+((cj5*x369))+new_r01);\nevalcond[6]=((((-1.0)*x362))+((new_r00*x361))+((new_r10*x360)));\nevalcond[7]=((((-1.0)*x361*x362))+((sj5*x369))+new_r00);\nevalcond[8]=((((-1.0)*x362*x367))+((sj5*x360))+new_r11);\nevalcond[9]=((((-1.0)*x363*x366))+(((-1.0)*x360*x362))+new_r10);\nevalcond[10]=((((-1.0)*new_r00*x370))+(((-1.0)*sj5*x363))+((new_r10*x361)));\nevalcond[11]=((((-1.0)*cj4*x362))+x365+(((-1.0)*new_r01*x370)));\nevalcond[12]=((((-1.0)*new_r12*x361*x363))+(((-1.0)*new_r22*x364))+((new_r02*x369)));\nevalcond[13]=((((-1.0)*new_r00*x371))+(((-1.0)*new_r20*x363))+((new_r10*x368)));\nevalcond[14]=(((sj4*x365))+(((-1.0)*new_r01*x371))+(((-1.0)*new_r21*x363)));\nevalcond[15]=((1.0)+(((-1.0)*new_r22*x363))+(((-1.0)*new_r02*x371))+((new_r12*x368)));\nevalcond[16]=((((-1.0)*new_r10*x361*x363))+sj5+(((-1.0)*new_r20*x364))+((new_r00*x369)));\nevalcond[17]=((((-1.0)*x363*x365))+cj5+((new_r01*x369))+(((-1.0)*new_r21*x364)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j3array[1], cj3array[1], sj3array[1];\nbool j3valid[1]={false};\n_nj3 = 1;\nCheckValue<IkReal> x372=IKPowWithIntegerCheck(IKsign(sj4),-1);\nif(!x372.valid){\ncontinue;\n}\nCheckValue<IkReal> x373 = IKatan2WithCheck(IkReal(new_r02),((-1.0)*new_r12),IKFAST_ATAN2_MAGTHRESH);\nif(!x373.valid){\ncontinue;\n}\nj3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x372.value)))+(x373.value));\nsj3array[0]=IKsin(j3array[0]);\ncj3array[0]=IKcos(j3array[0]);\nif( j3array[0] > IKPI )\n{\n    j3array[0]-=IK2PI;\n}\nelse if( j3array[0] < -IKPI )\n{    j3array[0]+=IK2PI;\n}\nj3valid[0] = true;\nfor(int ij3 = 0; ij3 < 1; ++ij3)\n{\nif( !j3valid[ij3] )\n{\n    continue;\n}\n_ij3[0] = ij3; _ij3[1] = -1;\nfor(int iij3 = ij3+1; iij3 < 1; ++iij3)\n{\nif( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )\n{\n    j3valid[iij3]=false; _ij3[1] = iij3; break; \n}\n}\nj3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];\n{\nIkReal evalcond[18];\nIkReal x374=IKsin(j3);\nIkReal x375=IKcos(j3);\nIkReal x376=((1.0)*cj5);\nIkReal x377=((1.0)*cj4);\nIkReal x378=((1.0)*sj4);\nIkReal x379=(new_r11*x375);\nIkReal x380=(sj5*x375);\nIkReal x381=(cj4*x375);\nIkReal x382=(sj4*x375);\nIkReal x383=(cj4*x374);\nIkReal x384=((1.0)*x374);\nIkReal x385=(x374*x378);\nevalcond[0]=(x382+new_r12);\nevalcond[1]=((((-1.0)*x385))+new_r02);\nevalcond[2]=(((new_r12*x374))+((new_r02*x375)));\nevalcond[3]=(sj5+((new_r01*x375))+((new_r11*x374)));\nevalcond[4]=(((new_r12*x375))+sj4+(((-1.0)*new_r02*x384)));\nevalcond[5]=(x380+((cj5*x383))+new_r01);\nevalcond[6]=((((-1.0)*x376))+((new_r00*x375))+((new_r10*x374)));\nevalcond[7]=(((sj5*x383))+new_r00+(((-1.0)*x375*x376)));\nevalcond[8]=((((-1.0)*x376*x381))+((sj5*x374))+new_r11);\nevalcond[9]=((((-1.0)*x374*x376))+new_r10+(((-1.0)*x377*x380)));\nevalcond[10]=((((-1.0)*new_r00*x384))+(((-1.0)*sj5*x377))+((new_r10*x375)));\nevalcond[11]=((((-1.0)*cj4*x376))+(((-1.0)*new_r01*x384))+x379);\nevalcond[12]=((((-1.0)*new_r12*x375*x377))+((new_r02*x383))+(((-1.0)*new_r22*x378)));\nevalcond[13]=((((-1.0)*new_r20*x377))+(((-1.0)*new_r00*x385))+((new_r10*x382)));\nevalcond[14]=((((-1.0)*new_r21*x377))+((sj4*x379))+(((-1.0)*new_r01*x385)));\nevalcond[15]=((1.0)+(((-1.0)*new_r22*x377))+((new_r12*x382))+(((-1.0)*new_r02*x385)));\nevalcond[16]=((((-1.0)*new_r20*x378))+sj5+((new_r00*x383))+(((-1.0)*new_r10*x375*x377)));\nevalcond[17]=((((-1.0)*new_r21*x378))+cj5+((new_r01*x383))+(((-1.0)*x377*x379)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n}\n}\n\n}\n\n}\n}\n}\n}\n}};\n\n\n/// solves the inverse kinematics equations.\n/// \\param pfree is an array specifying the free joints of the chain.\nIKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {\nIKSolver solver;\nreturn solver.ComputeIk(eetrans,eerot,pfree,solutions);\n}\n\nIKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {\nIKSolver solver;\nreturn solver.ComputeIk(eetrans,eerot,pfree,solutions);\n}\n\nIKFAST_API const char* GetKinematicsHash() { return \"9deed4f1a71b1f9720c53decad09f2eb\"; }\n\nIKFAST_API const char* GetIkFastVersion() { return \"0x10000048\"; }\n\n#ifdef IKFAST_NAMESPACE\n} // end namespace\n#endif\n\n#ifndef IKFAST_NO_MAIN\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef IKFAST_NAMESPACE\nusing namespace IKFAST_NAMESPACE;\n#endif\nint main(int argc, char** argv)\n{\n    if( argc != 12+GetNumFreeParameters()+1 ) {\n        printf(\"\\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\\n\\n\"\n               \"Returns the ik solutions given the transformation of the end effector specified by\\n\"\n               \"a 3x3 rotation R (rXX), and a 3x1 translation (tX).\\n\"\n               \"There are %d free parameters that have to be specified.\\n\\n\",GetNumFreeParameters());\n        return 1;\n    }\n\n    IkSolutionList<IkReal> solutions;\n    std::vector<IkReal> vfree(GetNumFreeParameters());\n    IkReal eerot[9],eetrans[3];\n    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);\n    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);\n    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);\n    for(std::size_t i = 0; i < vfree.size(); ++i)\n        vfree[i] = atof(argv[13+i]);\n    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);\n\n    if( !bSuccess ) {\n        fprintf(stderr,\"Failed to get ik solution\\n\");\n        return -1;\n    }\n\n    printf(\"Found %d ik solutions:\\n\", (int)solutions.GetNumSolutions());\n    std::vector<IkReal> solvalues(GetNumJoints());\n    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {\n        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);\n        printf(\"sol%d (free=%d): \", (int)i, (int)sol.GetFree().size());\n        std::vector<IkReal> vsolfree(sol.GetFree().size());\n        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);\n        for( std::size_t j = 0; j < solvalues.size(); ++j)\n            printf(\"%.15f, \", solvalues[j]);\n        printf(\"\\n\");\n    }\n    return 0;\n}\n\n#endif\n\nchar* ComputeFkWrapper(const IkReal* j) {\n    IkReal eetrans[3] = {0};\n    IkReal eerot[9] = {0};\n    char buffer [256] = {0};\n    ComputeFk(j, eetrans, eerot);\n    for(int i = 0; i < 3; ++i)\n        sprintf(buffer + strlen(buffer), \"%.15f,\", eetrans[i]);\n    for(int i = 0; i < 9 - 1; ++i)\n        sprintf(buffer + strlen(buffer), \"%.15f,\", eerot[i]);\n    sprintf(buffer + strlen(buffer), \"%.15f\", eerot[9 - 1]);\n    return buffer;\n}\n\nstd::vector<IkReal> TrueComputeIk(int argc, char** argv)\n{\n    std::vector<IkReal> solvalues(GetNumJoints());\n    if( argc != 12+GetNumFreeParameters()+1 ) {\n        printf(\"\\nKAKAKAK Usage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\\n\\n\"\n               \"Returns the ik solutions given the transformation of the end effector specified by\\n\"\n               \"a 3x3 rotation R (rXX), and a 3x1 translation (tX).\\n\"\n               \"There are %d free parameters that have to be specified.\\n\\n\",GetNumFreeParameters());\n    }\n\n    IkSolutionList<IkReal> solutions;\n    std::vector<IkReal> vfree(GetNumFreeParameters());\n    IkReal eerot[9],eetrans[3];\n    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);\n    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);\n    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);\n    for(std::size_t i = 0; i < vfree.size(); ++i)\n        vfree[i] = atof(argv[13+i]);\n    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);\n\n    if( !bSuccess ) {\n        fprintf(stderr,\"Failed to get ik solution\\n\");\n    }\n\n    printf(\"Found %d ik solutions:\\n\", (int)solutions.GetNumSolutions());\n    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {\n        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);\n        printf(\"sol%d (free=%d): \", (int)i, (int)sol.GetFree().size());\n        std::vector<IkReal> vsolfree(sol.GetFree().size());\n        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);\n        for( std::size_t j = 0; j < solvalues.size(); ++j)\n            printf(\"%.15f, \", solvalues[j]);\n        printf(\"\\n\");\n    }\n    return solvalues;\n}\n"]}