/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-05-22 07:12:06.403968
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53;
x0=IKcos(j[1]);
x1=IKcos(j[2]);
x2=IKsin(j[4]);
x3=IKcos(j[4]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKcos(j[6]);
x9=IKsin(j[5]);
x10=IKsin(j[6]);
x11=IKcos(j[5]);
x12=IKcos(j[0]);
x13=IKsin(j[0]);
x14=((1.0)*x1);
x15=((1.0)*x5);
x16=((1.0)*x4);
x17=((0.2617)*x1);
x18=((0.2617)*x13);
x19=((0.3102)*x0);
x20=(x6*x7);
x21=((-1.0)*x2);
x22=((-1.0)*x0);
x23=(x1*x3);
x24=((-1.0)*x3);
x25=(x0*x6);
x26=(x12*x4);
x27=(x0*x5);
x28=(x13*x7);
x29=(x12*x7);
x30=(x0*x14*x2);
x31=(x14*x29);
x32=((1.0)*x13*x25);
x33=((((-1.0)*x15*x7))+((x25*x4)));
x34=(((x27*x4))+x20);
x35=((((-1.0)*x31))+((x13*x4)));
x36=(((x1*x28))+x26);
x37=((((-1.0)*x13*x16))+x31);
x38=((((-1.0)*x12*x14))+((x16*x28)));
x39=(x11*x34);
x40=((((-1.0)*x13*x14))+(((-1.0)*x16*x29)));
x41=(x3*x35);
x42=(x3*x33);
x43=(x38*x5);
x44=(x40*x6);
x45=(x21*x37);
x46=(((x38*x6))+((x13*x27)));
x47=(x44+(((-1.0)*x0*x12*x15)));
x48=(((x40*x5))+((x12*x25)));
x49=(((x12*x22*x5))+x44);
x50=(x11*x48);
x51=(x3*x47);
x52=(((x21*(((((-1.0)*x12*x16))+(((-1.0)*x14*x28))))))+((x24*x46)));
x53=(x52*x9);
eerot[0]=(((x8*((((x0*x23))+((x2*x33))))))+((x10*((((x9*((x30+((x24*x33))))))+x39)))));
eerot[1]=(((x8*((((x9*(((((-1.0)*x42))+x30))))+x39))))+((x10*((((x22*x23))+((x21*x33)))))));
eerot[2]=(((x34*x9))+((x11*(((((-1.0)*x30))+x42)))));
eetrans[0]=((0.1744)+(((-0.2617)*x20))+(((-0.3102)*x7))+(((-0.2617)*x27*x4)));
eerot[3]=(((x8*((((x2*x47))+x41))))+((x10*((((x9*((x45+((x24*x47))))))+x50)))));
eerot[4]=(((x8*((((x9*((x45+((x24*x49))))))+x50))))+((x10*((((x21*x49))+((x24*x35)))))));
eerot[5]=(((x48*x9))+((x11*((((x2*x37))+x51)))));
eetrans[1]=((((-0.2617)*x12*x25))+(((-1.0)*x12*x19))+((x5*(((((0.2617)*x26*x7))+((x13*x17)))))));
eerot[6]=(((x8*((((x21*x46))+((x24*x36))))))+(((-1.0)*x10*(((((1.0)*x11*(((((-1.0)*x32))+x43))))+(((1.0)*x53)))))));
eerot[7]=(((x10*((((x3*x36))+((x2*x46))))))+((x8*(((((-1.0)*x11*((((x13*x22*x6))+x43))))+(((-1.0)*x53)))))));
eerot[8]=(((x9*((x32+(((-1.0)*x15*x38))))))+((x11*x52)));
eetrans[2]=((((-1.0)*x13*x19))+((x5*((((x18*x4*x7))+(((-1.0)*x12*x17))))))+(((-1.0)*x18*x25)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j10,cj10,sj10,htj10,j10mul,j11,cj11,sj11,htj11,j11mul,j13,cj13,sj13,htj13,j13mul,j14,cj14,sj14,htj14,j14mul,j15,cj15,sj15,htj15,j15mul,j16,cj16,sj16,htj16,j16mul,j12,cj12,sj12,htj12,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij10[2], _nj10,_ij11[2], _nj11,_ij13[2], _nj13,_ij14[2], _nj14,_ij15[2], _nj15,_ij16[2], _nj16,_ij12[2], _nj12;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j10=numeric_limits<IkReal>::quiet_NaN(); _ij10[0] = -1; _ij10[1] = -1; _nj10 = -1; j11=numeric_limits<IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; j13=numeric_limits<IkReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1; j14=numeric_limits<IkReal>::quiet_NaN(); _ij14[0] = -1; _ij14[1] = -1; _nj14 = -1; j15=numeric_limits<IkReal>::quiet_NaN(); _ij15[0] = -1; _ij15[1] = -1; _nj15 = -1; j16=numeric_limits<IkReal>::quiet_NaN(); _ij16[0] = -1; _ij16[1] = -1; _nj16 = -1;  _ij12[0] = -1; _ij12[1] = -1; _nj12 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j12=pfree[0]; cj12=cos(pfree[0]); sj12=sin(pfree[0]), htj12=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r20);
new_r01=((-1.0)*r21);
new_r02=((-1.0)*r22);
new_px=((-1.0)*pz);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=py;
new_r20=r00;
new_r21=r01;
new_r22=r02;
new_pz=((-0.1744)+px);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x54=((1.0)*px);
IkReal x55=((1.0)*pz);
IkReal x56=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x56))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x55)));
rxp0_2=((((-1.0)*r10*x54))+((py*r00)));
rxp1_0=((((-1.0)*r21*x56))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x55)));
rxp1_2=((((-1.0)*r11*x54))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x56)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x55)));
rxp2_2=((((-1.0)*r12*x54))+((py*r02)));
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
cj13array[0]=((-1.01448798425806)+(((6.1592025754336)*pp)));
if( cj13array[0] >= -1-IKFAST_SINCOS_THRESH && cj13array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j13valid[0] = j13valid[1] = true;
    j13array[0] = IKacos(cj13array[0]);
    sj13array[0] = IKsin(j13array[0]);
    cj13array[1] = cj13array[0];
    j13array[1] = -j13array[0];
    sj13array[1] = -sj13array[0];
}
else if( isnan(cj13array[0]) )
{
    // probably any value will work
    j13valid[0] = true;
    cj13array[0] = 1; sj13array[0] = 0; j13array[0] = 0;
}
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IkReal j10eval[2];
j10eval[0]=((px*px)+(py*py));
j10eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
j11eval[0]=((1.40499940937601)+(((sj12*sj12)*(sj13*sj13)))+(cj13*cj13)+(((2.3706534199465)*cj13)));
j11eval[1]=((IKabs((sj12*sj13)))+(((3.82116927779901)*(IKabs(((-0.3102)+(((-0.2617)*cj13))))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x57=px*px;
IkReal x58=py*py;
IkReal x59=cj12*cj12;
IkReal x60=py*py*py*py;
IkReal x61=sj12*sj12;
IkReal x62=sj12*sj12*sj12*sj12;
IkReal x63=cj12*cj12*cj12*cj12;
IkReal x64=(px*py);
IkReal x65=(x57*x58);
IkReal x66=((2.0)*x59*x61);
j10eval[0]=(((x60*x66))+((x60*x62))+((x60*x63))+((x62*x65))+((x63*x65))+((x65*x66)));
j10eval[1]=((IKabs((((x58*x59))+((x58*x61)))))+(IKabs((((x59*x64))+((x61*x64))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j10, j11]

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
IkReal x67=py*py;
IkReal x68=cj12*cj12;
IkReal x69=sj12*sj12;
IkReal x70=(px*py);
IkReal x71=(((x69*x70))+((x68*x70)));
IkReal x72=(((x67*x68))+((x67*x69)));
CheckValue<IkReal> x75 = IKatan2WithCheck(IkReal(x71),x72,IKFAST_ATAN2_MAGTHRESH);
if(!x75.valid){
continue;
}
IkReal x73=((1.0)*(x75.value));
if((((x71*x71)+(x72*x72))) < -0.00001)
continue;
CheckValue<IkReal> x76=IKPowWithIntegerCheck(IKabs(IKsqrt(((x71*x71)+(x72*x72)))),-1);
if(!x76.valid){
continue;
}
if( (((0.2617)*cj12*py*sj13*(x76.value))) < -1-IKFAST_SINCOS_THRESH || (((0.2617)*cj12*py*sj13*(x76.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x74=IKasin(((0.2617)*cj12*py*sj13*(x76.value)));
j10array[0]=((((-1.0)*x73))+x74);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x73))+(((-1.0)*x74)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x77=sj12*sj12;
IkReal x78=cj12*cj12;
IkReal x79=px*px;
IkReal x80=IKsin(j10);
IkReal x81=IKcos(j10);
IkReal x82=((1.0)*px);
IkReal x83=((1.0)*x79);
IkReal x84=((0.2617)*cj12*sj13);
evalcond[0]=(((x80*(((((-1.0)*py*x78*x82))+(((-1.0)*py*x77*x82))))))+((px*x84))+((x81*(((((-1.0)*x77*x83))+(((-1.0)*x78*x83)))))));
evalcond[1]=((((-1.0)*x81*x82))+(((-1.0)*py*x80))+x84);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[3];
IkReal x85=(px*sj10);
IkReal x86=(sj12*sj13);
IkReal x87=(cj10*py);
IkReal x88=((10000.0)*pz);
IkReal x89=((2617.0)*cj13);
j11eval[0]=((((-1.0)*pz*x86))+(((-1.0)*cj13*x85))+(((-1.18532670997325)*x85))+((cj13*x87))+(((1.18532670997325)*x87)));
j11eval[1]=((IKabs((((x85*x88))+(((-1.0)*x87*x88))+(((684.8689)*cj13*x86))+(((811.7934)*x86)))))+(IKabs(((-962.2404)+((pz*x88))+(((-1623.5868)*cj13))+(((-684.8689)*(cj13*cj13)))))));
j11eval[2]=IKsign(((((3102.0)*x87))+(((-3102.0)*x85))+(((-2617.0)*pz*x86))+(((-1.0)*x85*x89))+((x87*x89))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x90=(px*sj10);
IkReal x91=(cj10*py);
IkReal x92=((15510000.0)*pz);
IkReal x93=(sj12*sj13);
IkReal x94=((4058967.0)*cj13);
IkReal x95=((6542500.0)*pp);
j11eval[0]=((((1.18532670997325)*x91))+(((-1.0)*pz*x93))+(((-1.0)*cj13*x90))+(((-1.18532670997325)*x90))+((cj13*x91)));
j11eval[1]=((IKabs(((-215101.59825)+(((-7755000.0)*pp))+((pz*x92))+(((-181470.303875)*cj13))+(((-1.0)*cj13*x95)))))+(IKabs(((((181470.303875)*x93))+(((-1.0)*x91*x92))+((x90*x92))+((x93*x95))))));
j11eval[2]=IKsign(((((-1.0)*x90*x94))+(((-4811202.0)*x90))+(((-4058967.0)*pz*x93))+(((4811202.0)*x91))+((x91*x94))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x96=cj12*cj12;
IkReal x97=cj13*cj13;
IkReal x98=(sj12*sj13);
IkReal x99=(cj10*py);
IkReal x100=((26170000.0)*pz);
IkReal x101=((26170000.0)*px*sj10);
IkReal x102=(x96*x97);
j11eval[0]=((-2.40499940937601)+(((-2.3706534199465)*cj13))+x96+(((-1.0)*x102)));
j11eval[1]=((IKabs(((((31020000.0)*x99))+((x100*x98))+(((-31020000.0)*px*sj10))+(((-1.0)*cj13*x101))+(((26170000.0)*cj13*x99)))))+(IKabs(((((31020000.0)*pz))+((x101*x98))+((cj13*x100))+(((-26170000.0)*x98*x99))))));
j11eval[2]=IKsign(((-16471093.0)+(((-16235868.0)*cj13))+(((6848689.0)*x96))+(((-6848689.0)*x102))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j11]

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x103=cj12*cj12;
IkReal x104=(px*sj10);
IkReal x105=(cj10*py);
IkReal x106=((26170000.0)*cj13);
IkReal x107=((26170000.0)*sj12*sj13);
IkReal x108=((6848689.0)*x103);
CheckValue<IkReal> x109 = IKatan2WithCheck(IkReal(((((31020000.0)*pz))+((pz*x106))+((x104*x107))+(((-1.0)*x105*x107)))),((((-1.0)*x104*x106))+(((31020000.0)*x105))+((pz*x107))+((x105*x106))+(((-31020000.0)*x104))),IKFAST_ATAN2_MAGTHRESH);
if(!x109.valid){
continue;
}
CheckValue<IkReal> x110=IKPowWithIntegerCheck(IKsign(((-16471093.0)+(((-16235868.0)*cj13))+x108+(((-1.0)*x108*(cj13*cj13))))),-1);
if(!x110.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x109.value)+(((1.5707963267949)*(x110.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x111=IKsin(j11);
IkReal x112=IKcos(j11);
IkReal x113=(sj12*sj13);
IkReal x114=((0.2617)*cj13);
IkReal x115=(cj10*py);
IkReal x116=(px*sj10);
IkReal x117=((1.0)*cj12);
IkReal x118=(cj10*px);
IkReal x119=((1.0)*pz);
IkReal x120=((1.0)*sj12);
IkReal x121=(py*sj10);
IkReal x122=((0.2617)*x111);
IkReal x123=((0.6204)*x112);
IkReal x124=(pz*x112);
evalcond[0]=((((-1.0)*x111*x114))+(((-0.2617)*x112*x113))+(((-0.3102)*x111))+(((-1.0)*x119)));
evalcond[1]=((-0.3102)+(((-1.0)*x111*x119))+((x112*x116))+(((-1.0)*x114))+(((-1.0)*x112*x115)));
evalcond[2]=((-0.02773715)+(((-1.0)*x115*x123))+(((-0.6204)*pz*x111))+(((-1.0)*pp))+((x116*x123)));
evalcond[3]=((((-1.0)*x113*x122))+((x112*x114))+x115+(((0.3102)*x112))+(((-1.0)*x116)));
evalcond[4]=((((-1.0)*x118*x120))+(((-1.0)*x120*x121))+((cj12*x111*x115))+(((-1.0)*x111*x116*x117))+(((-1.0)*x117*x124)));
evalcond[5]=((((-1.0)*x111*x115*x120))+(((-1.0)*x117*x118))+(((0.2617)*sj13))+(((-1.0)*x117*x121))+((sj12*x124))+((sj12*x111*x116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x603=(sj12*sj13);
IkReal x604=((6542500.0)*pp);
IkReal x605=(cj10*py);
IkReal x606=((15510000.0)*pz);
IkReal x607=(px*sj10);
IkReal x608=((4058967.0)*cj13);
CheckValue<IkReal> x609=IKPowWithIntegerCheck(IKsign((((x605*x608))+(((-4058967.0)*pz*x603))+(((-4811202.0)*x607))+(((4811202.0)*x605))+(((-1.0)*x607*x608)))),-1);
if(!x609.valid){
continue;
}
CheckValue<IkReal> x610 = IKatan2WithCheck(IkReal(((((181470.303875)*x603))+(((-1.0)*x605*x606))+((x606*x607))+((x603*x604)))),((-215101.59825)+(((-7755000.0)*pp))+(((-1.0)*cj13*x604))+(((-181470.303875)*cj13))+((pz*x606))),IKFAST_ATAN2_MAGTHRESH);
if(!x610.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x609.value)))+(x610.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x611=IKsin(j11);
IkReal x612=IKcos(j11);
IkReal x613=(sj12*sj13);
IkReal x614=((0.2617)*cj13);
IkReal x615=(cj10*py);
IkReal x616=(px*sj10);
IkReal x617=((1.0)*cj12);
IkReal x618=(cj10*px);
IkReal x619=((1.0)*pz);
IkReal x620=((1.0)*sj12);
IkReal x621=(py*sj10);
IkReal x622=((0.2617)*x611);
IkReal x623=((0.6204)*x612);
IkReal x624=(pz*x612);
evalcond[0]=((((-0.3102)*x611))+(((-1.0)*x611*x614))+(((-1.0)*x619))+(((-0.2617)*x612*x613)));
evalcond[1]=((-0.3102)+(((-1.0)*x612*x615))+(((-1.0)*x611*x619))+((x612*x616))+(((-1.0)*x614)));
evalcond[2]=((-0.02773715)+(((-0.6204)*pz*x611))+((x616*x623))+(((-1.0)*pp))+(((-1.0)*x615*x623)));
evalcond[3]=(((x612*x614))+(((-1.0)*x616))+(((0.3102)*x612))+x615+(((-1.0)*x613*x622)));
evalcond[4]=((((-1.0)*x611*x616*x617))+((cj12*x611*x615))+(((-1.0)*x620*x621))+(((-1.0)*x617*x624))+(((-1.0)*x618*x620)));
evalcond[5]=((((-1.0)*x611*x615*x620))+((sj12*x611*x616))+(((0.2617)*sj13))+(((-1.0)*x617*x621))+(((-1.0)*x617*x618))+((sj12*x624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x625=(sj12*sj13);
IkReal x626=((10000.0)*pz);
IkReal x627=(px*sj10);
IkReal x628=(cj10*py);
IkReal x629=((2617.0)*cj13);
CheckValue<IkReal> x630=IKPowWithIntegerCheck(IKsign((((x628*x629))+(((-1.0)*x627*x629))+(((3102.0)*x628))+(((-3102.0)*x627))+(((-2617.0)*pz*x625)))),-1);
if(!x630.valid){
continue;
}
CheckValue<IkReal> x631 = IKatan2WithCheck(IkReal(((((811.7934)*x625))+(((684.8689)*cj13*x625))+(((-1.0)*x626*x628))+((x626*x627)))),((-962.2404)+((pz*x626))+(((-1623.5868)*cj13))+(((-684.8689)*(cj13*cj13)))),IKFAST_ATAN2_MAGTHRESH);
if(!x631.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x630.value)))+(x631.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x632=IKsin(j11);
IkReal x633=IKcos(j11);
IkReal x634=(sj12*sj13);
IkReal x635=((0.2617)*cj13);
IkReal x636=(cj10*py);
IkReal x637=(px*sj10);
IkReal x638=((1.0)*cj12);
IkReal x639=(cj10*px);
IkReal x640=((1.0)*pz);
IkReal x641=((1.0)*sj12);
IkReal x642=(py*sj10);
IkReal x643=((0.2617)*x632);
IkReal x644=((0.6204)*x633);
IkReal x645=(pz*x633);
evalcond[0]=((((-0.2617)*x633*x634))+(((-1.0)*x640))+(((-0.3102)*x632))+(((-1.0)*x632*x635)));
evalcond[1]=((-0.3102)+(((-1.0)*x635))+(((-1.0)*x633*x636))+(((-1.0)*x632*x640))+((x633*x637)));
evalcond[2]=((-0.02773715)+((x637*x644))+(((-0.6204)*pz*x632))+(((-1.0)*pp))+(((-1.0)*x636*x644)));
evalcond[3]=((((0.3102)*x633))+x636+(((-1.0)*x637))+(((-1.0)*x634*x643))+((x633*x635)));
evalcond[4]=(((cj12*x632*x636))+(((-1.0)*x641*x642))+(((-1.0)*x639*x641))+(((-1.0)*x632*x637*x638))+(((-1.0)*x638*x645)));
evalcond[5]=(((sj12*x645))+(((0.2617)*sj13))+(((-1.0)*x638*x639))+((sj12*x632*x637))+(((-1.0)*x632*x636*x641))+(((-1.0)*x638*x642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
IkReal x646=((-0.3102)+(((-0.2617)*cj13)));
CheckValue<IkReal> x649 = IKatan2WithCheck(IkReal(((-0.2617)*sj12*sj13)),x646,IKFAST_ATAN2_MAGTHRESH);
if(!x649.valid){
continue;
}
IkReal x647=((1.0)*(x649.value));
if((((x646*x646)+(((0.06848689)*(sj12*sj12)*(sj13*sj13))))) < -0.00001)
continue;
CheckValue<IkReal> x650=IKPowWithIntegerCheck(IKabs(IKsqrt(((x646*x646)+(((0.06848689)*(sj12*sj12)*(sj13*sj13)))))),-1);
if(!x650.valid){
continue;
}
if( ((pz*(x650.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x650.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x648=IKasin((pz*(x650.value)));
j11array[0]=((((-1.0)*x647))+x648);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x648))+(((-1.0)*x647)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];

{
IkReal j10eval[3];
IkReal x651=pz*pz;
IkReal x652=(cj11*pp);
IkReal x653=((2617.0)*cj13);
IkReal x654=((10000.0)*pz*sj11);
IkReal x655=(cj11*x651);
IkReal x656=((2617.0)*cj11*cj12*sj13);
j10eval[0]=((((-1.0)*x655))+x652);
j10eval[1]=((IKabs(((((3102.0)*px))+((py*x656))+((px*x654))+((px*x653)))))+(IKabs((((px*x656))+(((-3102.0)*py))+(((-1.0)*py*x653))+(((-1.0)*py*x654))))));
j10eval[2]=IKsign(((((-10000.0)*x655))+(((10000.0)*x652))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x657=pz*pz;
IkReal x658=((25000000.0)*pp);
IkReal x659=(cj11*pp);
IkReal x660=((15510000.0)*pz*sj11);
IkReal x661=(cj11*x657);
IkReal x662=((4058967.0)*cj11*cj12*sj13);
j10eval[0]=((((-1.0)*x661))+x659);
j10eval[1]=((IKabs((((px*x660))+(((693428.75)*px))+((py*x662))+((px*x658)))))+(IKabs((((px*x662))+(((-693428.75)*py))+(((-1.0)*py*x660))+(((-1.0)*py*x658))))));
j10eval[2]=IKsign(((((15510000.0)*x659))+(((-15510000.0)*x661))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x663=pz*pz;
IkReal x664=(cj11*py);
IkReal x665=((2617.0)*cj13);
IkReal x666=((2617.0)*sj13);
IkReal x667=(sj11*sj12);
IkReal x668=(cj11*px);
j10eval[0]=((((-1.0)*x663))+pp);
j10eval[1]=IKsign(((((-10000.0)*x663))+(((10000.0)*pp))));
j10eval[2]=((IKabs((((cj12*py*x666))+(((-1.0)*px*x666*x667))+((x665*x668))+(((3102.0)*x668)))))+(IKabs(((((-3102.0)*x664))+((cj12*px*x666))+((py*x666*x667))+(((-1.0)*x664*x665))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x669=((1.0)*pp);
IkReal x670=((-0.3102)+(((-0.2617)*cj13))+(((-1.0)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j11)))), 6.28318530717959)));
evalcond[1]=((0.16471093)+(((-1.0)*x669))+(((0.16235868)*cj13)));
evalcond[2]=x670;
evalcond[3]=((-0.02773715)+(((-1.0)*x669))+(((-0.6204)*pz)));
evalcond[4]=x670;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x671=pz*pz;
IkReal x672=(sj12*sj13);
IkReal x673=(cj12*sj13);
j10eval[0]=(pp+(((-1.0)*x671)));
j10eval[1]=((IKabs((((py*x673))+(((-1.0)*px*x672)))))+(IKabs((((py*x672))+((px*x673))))));
j10eval[2]=IKsign(((((-10000.0)*x671))+(((10000.0)*pp))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x674=pz*pz;
IkReal x675=cj12*cj12;
IkReal x676=(py*sj13);
IkReal x677=(cj12*sj12);
IkReal x678=(px*sj13);
IkReal x679=(cj12*pp);
IkReal x680=(cj12*x674);
j10eval[0]=(x679+(((-1.0)*x680)));
j10eval[1]=IKsign(((((10000.0)*x679))+(((-10000.0)*x680))));
j10eval[2]=((IKabs((((x676*x677))+((x675*x678)))))+(IKabs(((((-1.0)*x677*x678))+((x675*x676))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x681=cj12*cj12;
IkReal x682=pz*pz;
IkReal x683=(py*sj13);
IkReal x684=(cj12*sj12);
IkReal x685=(pp*sj12);
IkReal x686=(px*sj13);
IkReal x687=(sj12*x682);
j10eval[0]=(x685+(((-1.0)*x687)));
j10eval[1]=((IKabs((((x683*x684))+((x681*x686))+(((-1.0)*x686)))))+(IKabs(((((-1.0)*x681*x683))+x683+((x684*x686))))));
j10eval[2]=IKsign(((((10000.0)*x685))+(((-10000.0)*x687))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x688=((1.0)*pp);
IkReal x689=x670;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
evalcond[1]=((0.16471093)+(((-1.0)*x688))+(((0.16235868)*cj13)));
evalcond[2]=x689;
evalcond[3]=((-0.02773715)+(((-1.0)*x688))+(((-0.6204)*pz)));
evalcond[4]=x689;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[4];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
IkReal x690=pz*pz;
j10eval[0]=(pp+(((-1.0)*x690)));
j10eval[1]=IKsign(((((-10000.0)*x690))+(((10000.0)*pp))));
j10eval[2]=6848689.0;
j10eval[3]=sj13;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x691=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
evalcond[1]=((0.32706961)+(((-1.0)*x691)));
evalcond[2]=((-0.5719)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((-1.0)*x691))+(((-0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
sj13=0;
cj13=1.0;
j13=0;
j10eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x693 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x693.valid){
continue;
}
IkReal x692=x693.value;
j10array[0]=((-1.0)*x692);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x692)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j10))))+(((-1.0)*py*(IKsin(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x694=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
evalcond[1]=((0.00235225)+(((-1.0)*x694)));
evalcond[2]=((-0.0485)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((-1.0)*x694))+(((-0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j10eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x696 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x696.valid){
continue;
}
IkReal x695=x696.value;
j10array[0]=((-1.0)*x695);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x695)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j10))))+(((-1.0)*py*(IKsin(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x697=((2617.0)*sj13);
CheckValue<IkReal> x698 = IKatan2WithCheck(IkReal((py*x697)),(px*x697),IKFAST_ATAN2_MAGTHRESH);
if(!x698.valid){
continue;
}
CheckValue<IkReal> x699=IKPowWithIntegerCheck(IKsign(((((-10000.0)*(pz*pz)))+(((10000.0)*pp)))),-1);
if(!x699.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x698.value)+(((1.5707963267949)*(x699.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x700=IKsin(j10);
IkReal x701=IKcos(j10);
IkReal x702=((1.0)*x700);
evalcond[0]=((((-1.0)*px*x702))+((py*x701)));
evalcond[1]=((((-1.0)*py*x702))+(((-1.0)*px*x701))+(((0.2617)*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x703=((1.0)*pp);
IkReal x704=x670;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
evalcond[1]=((0.16471093)+(((-1.0)*x703))+(((0.16235868)*cj13)));
evalcond[2]=x704;
evalcond[3]=((-0.02773715)+(((-1.0)*x703))+(((-0.6204)*pz)));
evalcond[4]=x704;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[4];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x705=pz*pz;
j10eval[0]=((((-1.0)*pp))+x705);
j10eval[1]=6848689.0;
j10eval[2]=sj13;
j10eval[3]=IKsign(((((-10000.0)*pp))+(((10000.0)*x705))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x706=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
evalcond[1]=((0.32706961)+(((-1.0)*x706)));
evalcond[2]=((-0.5719)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((-1.0)*x706))+(((-0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj13=0;
cj13=1.0;
j13=0;
j10eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x708 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x708.valid){
continue;
}
IkReal x707=x708.value;
j10array[0]=((-1.0)*x707);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x707)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j10))))+(((-1.0)*py*(IKsin(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x709=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
evalcond[1]=((0.00235225)+(((-1.0)*x709)));
evalcond[2]=((-0.0485)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((-1.0)*x709))+(((-0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j10eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x711 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x711.valid){
continue;
}
IkReal x710=x711.value;
j10array[0]=((-1.0)*x710);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x710)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j10))))+(((-1.0)*py*(IKsin(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x712=((2617.0)*sj13);
CheckValue<IkReal> x713 = IKatan2WithCheck(IkReal((py*x712)),(px*x712),IKFAST_ATAN2_MAGTHRESH);
if(!x713.valid){
continue;
}
CheckValue<IkReal> x714=IKPowWithIntegerCheck(IKsign(((((10000.0)*(pz*pz)))+(((-10000.0)*pp)))),-1);
if(!x714.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x713.value)+(((1.5707963267949)*(x714.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x715=IKsin(j10);
IkReal x716=IKcos(j10);
IkReal x717=((1.0)*x715);
evalcond[0]=((((-1.0)*px*x717))+((py*x716)));
evalcond[1]=((((-1.0)*px*x716))+(((-0.2617)*sj13))+(((-1.0)*py*x717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x718=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
evalcond[1]=((0.32706961)+(((-1.0)*x718)));
evalcond[2]=((-0.5719)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((-1.0)*x718))+(((-0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
sj13=0;
cj13=1.0;
j13=0;
j10eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
sj13=0;
cj13=1.0;
j13=0;
IkReal x719=((1.0)*px);
j10eval[0]=((IKabs(((((-1.0)*cj12*x719))+(((-1.0)*py*sj12)))))+(IKabs(((((-1.0)*sj12*x719))+((cj12*py))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
sj13=0;
cj13=1.0;
j13=0;
IkReal x720=((1.0)*cj12);
j10eval[0]=((IKabs((((px*sj12))+(((-1.0)*py*x720)))))+(IKabs(((((-1.0)*px*x720))+(((-1.0)*py*sj12))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j10]

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
IkReal x721=((1.0)*py);
CheckValue<IkReal> x723 = IKatan2WithCheck(IkReal(((((-1.0)*sj12*x721))+(((-1.0)*cj12*px)))),(((px*sj12))+(((-1.0)*cj12*x721))),IKFAST_ATAN2_MAGTHRESH);
if(!x723.valid){
continue;
}
IkReal x722=x723.value;
j10array[0]=((-1.0)*x722);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x722)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x724=IKsin(j10);
IkReal x725=IKcos(j10);
IkReal x726=(py*x725);
IkReal x727=((1.0)*x724);
IkReal x728=((1.0)*px*x725);
evalcond[0]=((((-1.0)*px*x727))+x726);
evalcond[1]=((((-1.0)*x728))+(((-1.0)*py*x727)));
evalcond[2]=((((-1.0)*sj12*x728))+(((-1.0)*py*sj12*x727))+(((-1.0)*cj12*px*x727))+((cj12*x726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
IkReal x729=((1.0)*sj12);
CheckValue<IkReal> x731 = IKatan2WithCheck(IkReal((((cj12*py))+(((-1.0)*px*x729)))),((((-1.0)*py*x729))+(((-1.0)*cj12*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x731.valid){
continue;
}
IkReal x730=x731.value;
j10array[0]=((-1.0)*x730);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x730)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x732=IKsin(j10);
IkReal x733=IKcos(j10);
IkReal x734=(py*x733);
IkReal x735=((1.0)*x732);
IkReal x736=((1.0)*px*x733);
evalcond[0]=((((-1.0)*px*x735))+x734);
evalcond[1]=((((-1.0)*x736))+(((-1.0)*py*x735)));
evalcond[2]=((((-1.0)*cj12*py*x735))+((px*sj12*x732))+(((-1.0)*cj12*x736))+(((-1.0)*sj12*x734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x738 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x738.valid){
continue;
}
IkReal x737=x738.value;
j10array[0]=((-1.0)*x737);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x737)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x739=IKcos(j10);
IkReal x740=IKsin(j10);
IkReal x741=((1.0)*px);
IkReal x742=((1.0)*py);
IkReal x743=(cj12*x739);
IkReal x744=(sj12*x742);
IkReal x745=(cj12*x740);
evalcond[0]=((((-1.0)*x740*x742))+(((-1.0)*x739*x741)));
evalcond[1]=(((py*x743))+(((-1.0)*sj12*x739*x741))+(((-1.0)*x740*x744))+(((-1.0)*x741*x745)));
evalcond[2]=((((-1.0)*x742*x745))+((px*sj12*x740))+(((-1.0)*x741*x743))+(((-1.0)*x739*x744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x746=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
evalcond[1]=((0.00235225)+(((-1.0)*x746)));
evalcond[2]=((-0.0485)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((-1.0)*x746))+(((-0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j10eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x747=((1.0)*px);
j10eval[0]=((IKabs(((((-1.0)*cj12*x747))+(((-1.0)*py*sj12)))))+(IKabs((((cj12*py))+(((-1.0)*sj12*x747))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x748=((1.0)*cj12);
j10eval[0]=((IKabs(((((-1.0)*px*x748))+(((-1.0)*py*sj12)))))+(IKabs((((px*sj12))+(((-1.0)*py*x748))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j10]

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
IkReal x749=((1.0)*py);
CheckValue<IkReal> x751 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*px))+(((-1.0)*sj12*x749)))),((((-1.0)*cj12*x749))+((px*sj12))),IKFAST_ATAN2_MAGTHRESH);
if(!x751.valid){
continue;
}
IkReal x750=x751.value;
j10array[0]=((-1.0)*x750);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x750)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x752=IKsin(j10);
IkReal x753=IKcos(j10);
IkReal x754=(py*x753);
IkReal x755=((1.0)*x752);
IkReal x756=((1.0)*px*x753);
evalcond[0]=((((-1.0)*px*x755))+x754);
evalcond[1]=((((-1.0)*py*x755))+(((-1.0)*x756)));
evalcond[2]=((((-1.0)*cj12*px*x755))+((cj12*x754))+(((-1.0)*py*sj12*x755))+(((-1.0)*sj12*x756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
IkReal x757=((1.0)*sj12);
CheckValue<IkReal> x759 = IKatan2WithCheck(IkReal((((cj12*py))+(((-1.0)*px*x757)))),((((-1.0)*py*x757))+(((-1.0)*cj12*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x759.valid){
continue;
}
IkReal x758=x759.value;
j10array[0]=((-1.0)*x758);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x758)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x760=IKsin(j10);
IkReal x761=IKcos(j10);
IkReal x762=(py*x761);
IkReal x763=((1.0)*x760);
IkReal x764=((1.0)*px*x761);
evalcond[0]=((((-1.0)*px*x763))+x762);
evalcond[1]=((((-1.0)*py*x763))+(((-1.0)*x764)));
evalcond[2]=((((-1.0)*cj12*x764))+(((-1.0)*sj12*x762))+(((-1.0)*cj12*py*x763))+((px*sj12*x760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x766 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x766.valid){
continue;
}
IkReal x765=x766.value;
j10array[0]=((-1.0)*x765);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x765)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x767=IKcos(j10);
IkReal x768=IKsin(j10);
IkReal x769=((1.0)*px);
IkReal x770=((1.0)*py);
IkReal x771=(cj12*x767);
IkReal x772=(sj12*x770);
IkReal x773=(cj12*x768);
evalcond[0]=((((-1.0)*x768*x770))+(((-1.0)*x767*x769)));
evalcond[1]=((((-1.0)*x768*x772))+(((-1.0)*sj12*x767*x769))+(((-1.0)*x769*x773))+((py*x771)));
evalcond[2]=(((px*sj12*x768))+(((-1.0)*x767*x772))+(((-1.0)*x769*x771))+(((-1.0)*x770*x773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x774=((1.0)*pp);
IkReal x775=x670;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
evalcond[1]=((0.16471093)+(((0.16235868)*cj13))+(((-1.0)*x774)));
evalcond[2]=x775;
evalcond[3]=((-0.02773715)+(((-1.0)*x774))+(((-0.6204)*pz)));
evalcond[4]=x775;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[4];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x776=pz*pz;
j10eval[0]=((((-1.0)*pp))+x776);
j10eval[1]=IKsign(((((-10000.0)*pp))+(((10000.0)*x776))));
j10eval[2]=6848689.0;
j10eval[3]=sj13;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x777=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
evalcond[1]=((0.32706961)+(((-1.0)*x777)));
evalcond[2]=((-0.5719)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((-1.0)*x777))+(((-0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj13=0;
cj13=1.0;
j13=0;
j10eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x779 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x779.valid){
continue;
}
IkReal x778=x779.value;
j10array[0]=((-1.0)*x778);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x778)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j10))))+(((-1.0)*py*(IKsin(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x780=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
evalcond[1]=((0.00235225)+(((-1.0)*x780)));
evalcond[2]=((-0.0485)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((-1.0)*x780))+(((-0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j10eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x782 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x782.valid){
continue;
}
IkReal x781=x782.value;
j10array[0]=((-1.0)*x781);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x781)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j10))))+(((-1.0)*py*(IKsin(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x783=IKPowWithIntegerCheck(IKsign(((((10000.0)*(pz*pz)))+(((-10000.0)*pp)))),-1);
if(!x783.valid){
continue;
}
CheckValue<IkReal> x784 = IKatan2WithCheck(IkReal(((2617.0)*px*sj13)),((-2617.0)*py*sj13),IKFAST_ATAN2_MAGTHRESH);
if(!x784.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x783.value)))+(x784.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x785=IKcos(j10);
IkReal x786=IKsin(j10);
IkReal x787=((1.0)*x786);
evalcond[0]=((((-1.0)*px*x785))+(((-1.0)*py*x787)));
evalcond[1]=((((-1.0)*px*x787))+((py*x785))+(((-0.2617)*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x788=((1.0)*pp);
IkReal x789=x670;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
evalcond[1]=((0.16471093)+(((-1.0)*x788))+(((0.16235868)*cj13)));
evalcond[2]=x789;
evalcond[3]=((-0.02773715)+(((-1.0)*x788))+(((-0.6204)*pz)));
evalcond[4]=x789;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[4];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x790=pz*pz;
j10eval[0]=(pp+(((-1.0)*x790)));
j10eval[1]=IKsign(((((-10000.0)*x790))+(((10000.0)*pp))));
j10eval[2]=6848689.0;
j10eval[3]=sj13;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x791=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
evalcond[1]=((0.32706961)+(((-1.0)*x791)));
evalcond[2]=((-0.5719)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((-1.0)*x791))+(((-0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj13=0;
cj13=1.0;
j13=0;
j10eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x793 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x793.valid){
continue;
}
IkReal x792=x793.value;
j10array[0]=((-1.0)*x792);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x792)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j10))))+(((-1.0)*py*(IKsin(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x794=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
evalcond[1]=((0.00235225)+(((-1.0)*x794)));
evalcond[2]=((-0.0485)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((-1.0)*x794))+(((-0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j10eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x796 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x796.valid){
continue;
}
IkReal x795=x796.value;
j10array[0]=((-1.0)*x795);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x795)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j10))))+(((-1.0)*py*(IKsin(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x797 = IKatan2WithCheck(IkReal(((2617.0)*px*sj13)),((-2617.0)*py*sj13),IKFAST_ATAN2_MAGTHRESH);
if(!x797.valid){
continue;
}
CheckValue<IkReal> x798=IKPowWithIntegerCheck(IKsign(((((-10000.0)*(pz*pz)))+(((10000.0)*pp)))),-1);
if(!x798.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x797.value)+(((1.5707963267949)*(x798.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x799=IKcos(j10);
IkReal x800=IKsin(j10);
IkReal x801=((1.0)*x800);
evalcond[0]=((((-1.0)*py*x801))+(((-1.0)*px*x799)));
evalcond[1]=((((-1.0)*px*x801))+(((0.2617)*sj13))+((py*x799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x802=cj12*cj12;
IkReal x803=((2617.0)*sj13);
IkReal x804=(cj12*sj12);
IkReal x805=((10000.0)*sj12);
CheckValue<IkReal> x806=IKPowWithIntegerCheck(IKsign(((((-1.0)*x805*(pz*pz)))+((pp*x805)))),-1);
if(!x806.valid){
continue;
}
CheckValue<IkReal> x807 = IKatan2WithCheck(IkReal(((((-1.0)*px*x803))+((py*x803*x804))+((px*x802*x803)))),((((-1.0)*py*x802*x803))+((py*x803))+((px*x803*x804))),IKFAST_ATAN2_MAGTHRESH);
if(!x807.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x806.value)))+(x807.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x808=IKsin(j10);
IkReal x809=IKcos(j10);
IkReal x810=((0.2617)*sj13);
IkReal x811=((1.0)*sj12);
IkReal x812=((1.0)*px);
IkReal x813=(py*x809);
IkReal x814=(cj12*x812);
IkReal x815=(py*x808);
evalcond[0]=((((-1.0)*x808*x812))+(((-1.0)*sj12*x810))+x813);
evalcond[1]=((((-1.0)*x809*x812))+(((-1.0)*x815))+((cj12*x810)));
evalcond[2]=((((-1.0)*x808*x814))+(((-1.0)*x811*x815))+((cj12*x813))+(((-1.0)*px*x809*x811)));
evalcond[3]=((((-1.0)*x809*x814))+(((-1.0)*x811*x813))+(((-1.0)*cj12*x815))+x810+((px*sj12*x808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x816=cj12*cj12;
IkReal x817=((10000.0)*cj12);
IkReal x818=((2617.0)*sj13*x816);
IkReal x819=((2617.0)*cj12*sj12*sj13);
CheckValue<IkReal> x820 = IKatan2WithCheck(IkReal((((py*x818))+(((-1.0)*px*x819)))),(((py*x819))+((px*x818))),IKFAST_ATAN2_MAGTHRESH);
if(!x820.valid){
continue;
}
CheckValue<IkReal> x821=IKPowWithIntegerCheck(IKsign(((((-1.0)*x817*(pz*pz)))+((pp*x817)))),-1);
if(!x821.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x820.value)+(((1.5707963267949)*(x821.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x822=IKsin(j10);
IkReal x823=IKcos(j10);
IkReal x824=((0.2617)*sj13);
IkReal x825=((1.0)*sj12);
IkReal x826=((1.0)*px);
IkReal x827=(py*x823);
IkReal x828=(cj12*x826);
IkReal x829=(py*x822);
evalcond[0]=((((-1.0)*x822*x826))+x827+(((-1.0)*sj12*x824)));
evalcond[1]=((((-1.0)*x823*x826))+(((-1.0)*x829))+((cj12*x824)));
evalcond[2]=((((-1.0)*x822*x828))+(((-1.0)*px*x823*x825))+((cj12*x827))+(((-1.0)*x825*x829)));
evalcond[3]=(((px*sj12*x822))+(((-1.0)*x823*x828))+(((-1.0)*cj12*x829))+x824+(((-1.0)*x825*x827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x830=((2617.0)*sj12*sj13);
IkReal x831=((2617.0)*cj12*sj13);
CheckValue<IkReal> x832=IKPowWithIntegerCheck(IKsign(((((-10000.0)*(pz*pz)))+(((10000.0)*pp)))),-1);
if(!x832.valid){
continue;
}
CheckValue<IkReal> x833 = IKatan2WithCheck(IkReal(((((-1.0)*px*x830))+((py*x831)))),(((py*x830))+((px*x831))),IKFAST_ATAN2_MAGTHRESH);
if(!x833.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x832.value)))+(x833.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x834=IKsin(j10);
IkReal x835=IKcos(j10);
IkReal x836=((0.2617)*sj13);
IkReal x837=((1.0)*sj12);
IkReal x838=((1.0)*px);
IkReal x839=(py*x835);
IkReal x840=(cj12*x838);
IkReal x841=(py*x834);
evalcond[0]=((((-1.0)*x834*x838))+(((-1.0)*sj12*x836))+x839);
evalcond[1]=((((-1.0)*x835*x838))+(((-1.0)*x841))+((cj12*x836)));
evalcond[2]=((((-1.0)*x837*x841))+(((-1.0)*x834*x840))+(((-1.0)*px*x835*x837))+((cj12*x839)));
evalcond[3]=(((px*sj12*x834))+(((-1.0)*x835*x840))+(((-1.0)*cj12*x841))+(((-1.0)*x837*x839))+x836);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x842=((1.0)*pp);
IkReal x843=((0.2617)*cj13);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j11)))), 6.28318530717959)));
evalcond[1]=((0.16471093)+(((-1.0)*x842))+(((0.16235868)*cj13)));
evalcond[2]=((0.3102)+(((-1.0)*pz))+x843);
evalcond[3]=((-0.02773715)+(((0.6204)*pz))+(((-1.0)*x842)));
evalcond[4]=((-0.3102)+(((-1.0)*x843))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x844=pz*pz;
IkReal x845=(sj12*sj13);
IkReal x846=(cj12*sj13);
j10eval[0]=(pp+(((-1.0)*x844)));
j10eval[1]=IKsign(((((-10000.0)*x844))+(((10000.0)*pp))));
j10eval[2]=((IKabs((((py*x846))+((px*x845)))))+(IKabs(((((-1.0)*py*x845))+((px*x846))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x847=pz*pz;
IkReal x848=cj12*cj12;
IkReal x849=((1.0)*px);
IkReal x850=(cj12*pp);
IkReal x851=(cj12*x847);
IkReal x852=(cj12*sj12*sj13);
IkReal x853=(sj13*x848);
j10eval[0]=((((-1.0)*x850))+x851);
j10eval[1]=IKsign(((((10000.0)*x851))+(((-10000.0)*x850))));
j10eval[2]=((IKabs(((((-1.0)*x849*x853))+((py*x852)))))+(IKabs(((((-1.0)*x849*x852))+(((-1.0)*py*x853))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x854=pz*pz;
IkReal x855=cj12*cj12;
IkReal x856=(cj12*sj12);
IkReal x857=(py*sj13);
IkReal x858=(pp*sj12);
IkReal x859=((1.0)*px*sj13);
IkReal x860=(sj12*x854);
j10eval[0]=((((-1.0)*x858))+x860);
j10eval[1]=IKsign(((((-10000.0)*x858))+(((10000.0)*x860))));
j10eval[2]=((IKabs(((((-1.0)*x856*x859))+x857+(((-1.0)*x855*x857)))))+(IKabs(((((-1.0)*x859))+((px*sj13*x855))+(((-1.0)*x856*x857))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x861=((1.0)*pp);
IkReal x862=((0.2617)*cj13);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
evalcond[1]=((0.16471093)+(((-1.0)*x861))+(((0.16235868)*cj13)));
evalcond[2]=((0.3102)+(((-1.0)*pz))+x862);
evalcond[3]=((-0.02773715)+(((-1.0)*x861))+(((0.6204)*pz)));
evalcond[4]=((-0.3102)+(((-1.0)*x862))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[4];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
IkReal x863=pz*pz;
j10eval[0]=((((-1.0)*x863))+pp);
j10eval[1]=IKsign(((((-10000.0)*x863))+(((10000.0)*pp))));
j10eval[2]=6848689.0;
j10eval[3]=sj13;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x864=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
evalcond[1]=((0.32706961)+(((-1.0)*x864)));
evalcond[2]=((0.5719)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((-1.0)*x864))+(((0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
sj13=0;
cj13=1.0;
j13=0;
j10eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x866 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x866.valid){
continue;
}
IkReal x865=x866.value;
j10array[0]=((-1.0)*x865);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x865)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j10))))+(((-1.0)*py*(IKsin(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x867=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
evalcond[1]=((0.00235225)+(((-1.0)*x867)));
evalcond[2]=((0.0485)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((-1.0)*x867))+(((0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j10eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x869 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x869.valid){
continue;
}
IkReal x868=x869.value;
j10array[0]=((-1.0)*x868);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x868)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j10))))+(((-1.0)*py*(IKsin(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x870=((2617.0)*sj13);
CheckValue<IkReal> x871 = IKatan2WithCheck(IkReal((py*x870)),(px*x870),IKFAST_ATAN2_MAGTHRESH);
if(!x871.valid){
continue;
}
CheckValue<IkReal> x872=IKPowWithIntegerCheck(IKsign(((((-10000.0)*(pz*pz)))+(((10000.0)*pp)))),-1);
if(!x872.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x871.value)+(((1.5707963267949)*(x872.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x873=IKsin(j10);
IkReal x874=IKcos(j10);
IkReal x875=((1.0)*x873);
evalcond[0]=(((py*x874))+(((-1.0)*px*x875)));
evalcond[1]=((((0.2617)*sj13))+(((-1.0)*py*x875))+(((-1.0)*px*x874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x876=((1.0)*pp);
IkReal x877=((0.2617)*cj13);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
evalcond[1]=((0.16471093)+(((0.16235868)*cj13))+(((-1.0)*x876)));
evalcond[2]=((0.3102)+(((-1.0)*pz))+x877);
evalcond[3]=((-0.02773715)+(((0.6204)*pz))+(((-1.0)*x876)));
evalcond[4]=((-0.3102)+pz+(((-1.0)*x877)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[4];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x878=pz*pz;
j10eval[0]=((((-1.0)*pp))+x878);
j10eval[1]=6848689.0;
j10eval[2]=sj13;
j10eval[3]=IKsign(((((-10000.0)*pp))+(((10000.0)*x878))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x879=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
evalcond[1]=((0.32706961)+(((-1.0)*x879)));
evalcond[2]=((0.5719)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((0.6204)*pz))+(((-1.0)*x879)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj13=0;
cj13=1.0;
j13=0;
j10eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x881 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x881.valid){
continue;
}
IkReal x880=x881.value;
j10array[0]=((-1.0)*x880);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x880)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j10))))+(((-1.0)*py*(IKsin(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x882=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
evalcond[1]=((0.00235225)+(((-1.0)*x882)));
evalcond[2]=((0.0485)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((0.6204)*pz))+(((-1.0)*x882)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j10eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x884 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x884.valid){
continue;
}
IkReal x883=x884.value;
j10array[0]=((-1.0)*x883);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x883)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j10))))+(((-1.0)*py*(IKsin(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x885=((2617.0)*sj13);
CheckValue<IkReal> x886 = IKatan2WithCheck(IkReal((py*x885)),(px*x885),IKFAST_ATAN2_MAGTHRESH);
if(!x886.valid){
continue;
}
CheckValue<IkReal> x887=IKPowWithIntegerCheck(IKsign(((((10000.0)*(pz*pz)))+(((-10000.0)*pp)))),-1);
if(!x887.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x886.value)+(((1.5707963267949)*(x887.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x888=IKsin(j10);
IkReal x889=IKcos(j10);
IkReal x890=((1.0)*x888);
evalcond[0]=(((py*x889))+(((-1.0)*px*x890)));
evalcond[1]=((((-1.0)*py*x890))+(((-1.0)*px*x889))+(((-0.2617)*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x891=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
evalcond[1]=((0.32706961)+(((-1.0)*x891)));
evalcond[2]=((0.5719)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((-1.0)*x891))+(((0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
sj13=0;
cj13=1.0;
j13=0;
j10eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
sj13=0;
cj13=1.0;
j13=0;
IkReal x892=((1.0)*py);
j10eval[0]=((IKabs((((cj12*px))+(((-1.0)*sj12*x892)))))+(IKabs(((((-1.0)*cj12*x892))+(((-1.0)*px*sj12))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
sj13=0;
cj13=1.0;
j13=0;
IkReal x893=((1.0)*cj12);
j10eval[0]=((IKabs(((((-1.0)*py*x893))+(((-1.0)*px*sj12)))))+(IKabs((((py*sj12))+(((-1.0)*px*x893))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j10]

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
IkReal x894=((1.0)*cj12);
CheckValue<IkReal> x896 = IKatan2WithCheck(IkReal((((py*sj12))+(((-1.0)*px*x894)))),((((-1.0)*py*x894))+(((-1.0)*px*sj12))),IKFAST_ATAN2_MAGTHRESH);
if(!x896.valid){
continue;
}
IkReal x895=x896.value;
j10array[0]=((-1.0)*x895);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x895)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x897=IKsin(j10);
IkReal x898=IKcos(j10);
IkReal x899=(py*x898);
IkReal x900=(px*x897);
IkReal x901=((1.0)*py*x897);
IkReal x902=((1.0)*px*x898);
evalcond[0]=((((-1.0)*x900))+x899);
evalcond[1]=((((-1.0)*x902))+(((-1.0)*x901)));
evalcond[2]=((((-1.0)*cj12*x899))+(((-1.0)*sj12*x901))+(((-1.0)*sj12*x902))+((cj12*x900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
IkReal x903=((1.0)*py);
CheckValue<IkReal> x905 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*x903))+(((-1.0)*px*sj12)))),(((cj12*px))+(((-1.0)*sj12*x903))),IKFAST_ATAN2_MAGTHRESH);
if(!x905.valid){
continue;
}
IkReal x904=x905.value;
j10array[0]=((-1.0)*x904);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x904)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x906=IKsin(j10);
IkReal x907=IKcos(j10);
IkReal x908=(py*x907);
IkReal x909=((1.0)*x906);
IkReal x910=((1.0)*px*x907);
evalcond[0]=((((-1.0)*px*x909))+x908);
evalcond[1]=((((-1.0)*py*x909))+(((-1.0)*x910)));
evalcond[2]=((((-1.0)*px*sj12*x909))+(((-1.0)*cj12*x910))+((sj12*x908))+(((-1.0)*cj12*py*x909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x912 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x912.valid){
continue;
}
IkReal x911=x912.value;
j10array[0]=((-1.0)*x911);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x911)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x913=IKsin(j10);
IkReal x914=IKcos(j10);
IkReal x915=(cj12*x913);
IkReal x916=((1.0)*cj12*x914);
IkReal x917=((1.0)*py*x913);
IkReal x918=((1.0)*px*x914);
evalcond[0]=((((-1.0)*x918))+(((-1.0)*x917)));
evalcond[1]=(((px*x915))+(((-1.0)*py*x916))+(((-1.0)*sj12*x918))+(((-1.0)*sj12*x917)));
evalcond[2]=((((-1.0)*px*sj12*x913))+(((-1.0)*px*x916))+(((-1.0)*py*x915))+((py*sj12*x914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x919=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
evalcond[1]=((0.00235225)+(((-1.0)*x919)));
evalcond[2]=((0.0485)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((-1.0)*x919))+(((0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j10eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x920=((1.0)*py);
j10eval[0]=((IKabs(((((-1.0)*sj12*x920))+((cj12*px)))))+(IKabs(((((-1.0)*cj12*x920))+(((-1.0)*px*sj12))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x921=((1.0)*cj12);
j10eval[0]=((IKabs(((((-1.0)*py*x921))+(((-1.0)*px*sj12)))))+(IKabs(((((-1.0)*px*x921))+((py*sj12))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j10]

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
IkReal x922=((1.0)*cj12);
CheckValue<IkReal> x924 = IKatan2WithCheck(IkReal(((((-1.0)*px*x922))+((py*sj12)))),((((-1.0)*py*x922))+(((-1.0)*px*sj12))),IKFAST_ATAN2_MAGTHRESH);
if(!x924.valid){
continue;
}
IkReal x923=x924.value;
j10array[0]=((-1.0)*x923);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x923)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x925=IKsin(j10);
IkReal x926=IKcos(j10);
IkReal x927=(py*x926);
IkReal x928=(px*x925);
IkReal x929=((1.0)*py*x925);
IkReal x930=((1.0)*px*x926);
evalcond[0]=((((-1.0)*x928))+x927);
evalcond[1]=((((-1.0)*x929))+(((-1.0)*x930)));
evalcond[2]=((((-1.0)*sj12*x929))+(((-1.0)*sj12*x930))+(((-1.0)*cj12*x927))+((cj12*x928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
IkReal x931=((1.0)*py);
CheckValue<IkReal> x933 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*x931))+(((-1.0)*px*sj12)))),((((-1.0)*sj12*x931))+((cj12*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x933.valid){
continue;
}
IkReal x932=x933.value;
j10array[0]=((-1.0)*x932);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x932)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x934=IKsin(j10);
IkReal x935=IKcos(j10);
IkReal x936=(py*x935);
IkReal x937=((1.0)*x934);
IkReal x938=((1.0)*px*x935);
evalcond[0]=((((-1.0)*px*x937))+x936);
evalcond[1]=((((-1.0)*py*x937))+(((-1.0)*x938)));
evalcond[2]=((((-1.0)*px*sj12*x937))+(((-1.0)*cj12*x938))+((sj12*x936))+(((-1.0)*cj12*py*x937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x940 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x940.valid){
continue;
}
IkReal x939=x940.value;
j10array[0]=((-1.0)*x939);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x939)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x941=IKsin(j10);
IkReal x942=IKcos(j10);
IkReal x943=(cj12*x941);
IkReal x944=((1.0)*cj12*x942);
IkReal x945=((1.0)*py*x941);
IkReal x946=((1.0)*px*x942);
evalcond[0]=((((-1.0)*x946))+(((-1.0)*x945)));
evalcond[1]=((((-1.0)*py*x944))+((px*x943))+(((-1.0)*sj12*x945))+(((-1.0)*sj12*x946)));
evalcond[2]=(((py*sj12*x942))+(((-1.0)*py*x943))+(((-1.0)*px*x944))+(((-1.0)*px*sj12*x941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x947=((1.0)*pp);
IkReal x948=((0.2617)*cj13);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
evalcond[1]=((0.16471093)+(((-1.0)*x947))+(((0.16235868)*cj13)));
evalcond[2]=((0.3102)+(((-1.0)*pz))+x948);
evalcond[3]=((-0.02773715)+(((-1.0)*x947))+(((0.6204)*pz)));
evalcond[4]=((-0.3102)+(((-1.0)*x948))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[4];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x949=pz*pz;
j10eval[0]=((((-1.0)*x949))+pp);
j10eval[1]=IKsign(((((-10000.0)*x949))+(((10000.0)*pp))));
j10eval[2]=6848689.0;
j10eval[3]=sj13;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x950=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
evalcond[1]=((0.32706961)+(((-1.0)*x950)));
evalcond[2]=((0.5719)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((0.6204)*pz))+(((-1.0)*x950)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj13=0;
cj13=1.0;
j13=0;
j10eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x952 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x952.valid){
continue;
}
IkReal x951=x952.value;
j10array[0]=((-1.0)*x951);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x951)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j10))))+(((-1.0)*py*(IKsin(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x953=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
evalcond[1]=((0.00235225)+(((-1.0)*x953)));
evalcond[2]=((0.0485)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((0.6204)*pz))+(((-1.0)*x953)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j10eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x955 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x955.valid){
continue;
}
IkReal x954=x955.value;
j10array[0]=((-1.0)*x954);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x954)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j10))))+(((-1.0)*py*(IKsin(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x956 = IKatan2WithCheck(IkReal(((2617.0)*px*sj13)),((-2617.0)*py*sj13),IKFAST_ATAN2_MAGTHRESH);
if(!x956.valid){
continue;
}
CheckValue<IkReal> x957=IKPowWithIntegerCheck(IKsign(((((-10000.0)*(pz*pz)))+(((10000.0)*pp)))),-1);
if(!x957.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x956.value)+(((1.5707963267949)*(x957.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x958=IKcos(j10);
IkReal x959=IKsin(j10);
IkReal x960=((1.0)*x959);
evalcond[0]=((((-1.0)*py*x960))+(((-1.0)*px*x958)));
evalcond[1]=((((0.2617)*sj13))+((py*x958))+(((-1.0)*px*x960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x961=((1.0)*pp);
IkReal x962=((0.2617)*cj13);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
evalcond[1]=((0.16471093)+(((0.16235868)*cj13))+(((-1.0)*x961)));
evalcond[2]=((0.3102)+(((-1.0)*pz))+x962);
evalcond[3]=((-0.02773715)+(((0.6204)*pz))+(((-1.0)*x961)));
evalcond[4]=((-0.3102)+pz+(((-1.0)*x962)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[4];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x963=pz*pz;
j10eval[0]=((((-1.0)*pp))+x963);
j10eval[1]=IKsign(((((10000.0)*x963))+(((-10000.0)*pp))));
j10eval[2]=6848689.0;
j10eval[3]=sj13;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x964=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
evalcond[1]=((0.32706961)+(((-1.0)*x964)));
evalcond[2]=((0.5719)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((0.6204)*pz))+(((-1.0)*x964)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj13=0;
cj13=1.0;
j13=0;
j10eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x966 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x966.valid){
continue;
}
IkReal x965=x966.value;
j10array[0]=((-1.0)*x965);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x965)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j10))))+(((-1.0)*py*(IKsin(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x967=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
evalcond[1]=((0.00235225)+(((-1.0)*x967)));
evalcond[2]=((0.0485)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((0.6204)*pz))+(((-1.0)*x967)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[1];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j10eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x969 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x969.valid){
continue;
}
IkReal x968=x969.value;
j10array[0]=((-1.0)*x968);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+(((-1.0)*x968)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*px*(IKcos(j10))))+(((-1.0)*py*(IKsin(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x970=IKPowWithIntegerCheck(IKsign(((((10000.0)*(pz*pz)))+(((-10000.0)*pp)))),-1);
if(!x970.valid){
continue;
}
CheckValue<IkReal> x971 = IKatan2WithCheck(IkReal(((2617.0)*px*sj13)),((-2617.0)*py*sj13),IKFAST_ATAN2_MAGTHRESH);
if(!x971.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x970.value)))+(x971.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x972=IKcos(j10);
IkReal x973=IKsin(j10);
IkReal x974=((1.0)*x973);
evalcond[0]=((((-1.0)*py*x974))+(((-1.0)*px*x972)));
evalcond[1]=((((-1.0)*px*x974))+((py*x972))+(((-0.2617)*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x975=cj12*cj12;
IkReal x976=((2617.0)*sj13);
IkReal x977=(cj12*sj12);
IkReal x978=((10000.0)*sj12);
CheckValue<IkReal> x979=IKPowWithIntegerCheck(IKsign((((x978*(pz*pz)))+(((-1.0)*pp*x978)))),-1);
if(!x979.valid){
continue;
}
CheckValue<IkReal> x980 = IKatan2WithCheck(IkReal(((((-1.0)*px*x976))+(((-1.0)*py*x976*x977))+((px*x975*x976)))),((((-1.0)*py*x975*x976))+((py*x976))+(((-1.0)*px*x976*x977))),IKFAST_ATAN2_MAGTHRESH);
if(!x980.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x979.value)))+(x980.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x981=IKsin(j10);
IkReal x982=IKcos(j10);
IkReal x983=((0.2617)*sj13);
IkReal x984=(cj12*px);
IkReal x985=(py*x982);
IkReal x986=((1.0)*x982);
IkReal x987=((1.0)*py*x981);
IkReal x988=((1.0)*px*x981);
evalcond[0]=((((-1.0)*x988))+((sj12*x983))+x985);
evalcond[1]=((((-1.0)*px*x986))+(((-1.0)*x987))+((cj12*x983)));
evalcond[2]=(((x981*x984))+(((-1.0)*px*sj12*x986))+(((-1.0)*cj12*x985))+(((-1.0)*sj12*x987)));
evalcond[3]=((((-1.0)*cj12*x987))+((sj12*x985))+(((-1.0)*x984*x986))+x983+(((-1.0)*sj12*x988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x989=cj12*cj12;
IkReal x990=((10000.0)*cj12);
IkReal x991=((2617.0)*sj13*x989);
IkReal x992=((2617.0)*cj12*sj12*sj13);
CheckValue<IkReal> x993=IKPowWithIntegerCheck(IKsign((((x990*(pz*pz)))+(((-1.0)*pp*x990)))),-1);
if(!x993.valid){
continue;
}
CheckValue<IkReal> x994 = IKatan2WithCheck(IkReal(((((-1.0)*px*x992))+(((-1.0)*py*x991)))),((((-1.0)*px*x991))+((py*x992))),IKFAST_ATAN2_MAGTHRESH);
if(!x994.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x993.value)))+(x994.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x995=IKsin(j10);
IkReal x996=IKcos(j10);
IkReal x997=((0.2617)*sj13);
IkReal x998=(cj12*px);
IkReal x999=(py*x996);
IkReal x1000=((1.0)*x996);
IkReal x1001=((1.0)*py*x995);
IkReal x1002=((1.0)*px*x995);
evalcond[0]=((((-1.0)*x1002))+x999+((sj12*x997)));
evalcond[1]=(((cj12*x997))+(((-1.0)*x1001))+(((-1.0)*px*x1000)));
evalcond[2]=((((-1.0)*sj12*x1001))+(((-1.0)*px*sj12*x1000))+((x995*x998))+(((-1.0)*cj12*x999)));
evalcond[3]=((((-1.0)*sj12*x1002))+(((-1.0)*x1000*x998))+(((-1.0)*cj12*x1001))+x997+((sj12*x999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1003=((2617.0)*sj12*sj13);
IkReal x1004=((2617.0)*cj12*sj13);
CheckValue<IkReal> x1005 = IKatan2WithCheck(IkReal((((px*x1003))+((py*x1004)))),(((px*x1004))+(((-1.0)*py*x1003))),IKFAST_ATAN2_MAGTHRESH);
if(!x1005.valid){
continue;
}
CheckValue<IkReal> x1006=IKPowWithIntegerCheck(IKsign(((((-10000.0)*(pz*pz)))+(((10000.0)*pp)))),-1);
if(!x1006.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1005.value)+(((1.5707963267949)*(x1006.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x1007=IKsin(j10);
IkReal x1008=IKcos(j10);
IkReal x1009=((0.2617)*sj13);
IkReal x1010=(cj12*px);
IkReal x1011=(py*x1008);
IkReal x1012=((1.0)*x1008);
IkReal x1013=((1.0)*py*x1007);
IkReal x1014=((1.0)*px*x1007);
evalcond[0]=(x1011+(((-1.0)*x1014))+((sj12*x1009)));
evalcond[1]=(((cj12*x1009))+(((-1.0)*px*x1012))+(((-1.0)*x1013)));
evalcond[2]=((((-1.0)*cj12*x1011))+(((-1.0)*px*sj12*x1012))+((x1007*x1010))+(((-1.0)*sj12*x1013)));
evalcond[3]=((((-1.0)*x1010*x1012))+x1009+(((-1.0)*cj12*x1013))+(((-1.0)*sj12*x1014))+((sj12*x1011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1015=((3102.0)*cj11);
IkReal x1016=((2617.0)*cj11*cj13);
IkReal x1017=((2617.0)*cj12*sj13);
IkReal x1018=((2617.0)*sj11*sj12*sj13);
CheckValue<IkReal> x1019=IKPowWithIntegerCheck(IKsign(((((-10000.0)*(pz*pz)))+(((10000.0)*pp)))),-1);
if(!x1019.valid){
continue;
}
CheckValue<IkReal> x1020 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1018))+((py*x1017))+((px*x1015))+((px*x1016)))),((((-1.0)*py*x1015))+(((-1.0)*py*x1016))+((py*x1018))+((px*x1017))),IKFAST_ATAN2_MAGTHRESH);
if(!x1020.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1019.value)))+(x1020.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1021=IKsin(j10);
IkReal x1022=IKcos(j10);
IkReal x1023=(cj12*sj11);
IkReal x1024=((0.2617)*cj13);
IkReal x1025=((0.6204)*cj11);
IkReal x1026=((1.0)*px);
IkReal x1027=(pz*sj11);
IkReal x1028=(sj11*sj12);
IkReal x1029=((0.2617)*sj13);
IkReal x1030=(cj11*pz);
IkReal x1031=((1.0)*cj12);
IkReal x1032=(py*x1022);
IkReal x1033=(px*x1021);
IkReal x1034=(py*x1021);
evalcond[0]=((((-1.0)*x1034))+(((-1.0)*x1022*x1026))+((cj12*x1029)));
evalcond[1]=((-0.3102)+(((-1.0)*cj11*x1032))+(((-1.0)*x1027))+(((-1.0)*x1024))+((cj11*x1033)));
evalcond[2]=((-0.02773715)+(((-1.0)*x1025*x1032))+(((-0.6204)*x1027))+(((-1.0)*pp))+((x1025*x1033)));
evalcond[3]=((((-1.0)*x1028*x1029))+(((0.3102)*cj11))+x1032+(((-1.0)*x1021*x1026))+((cj11*x1024)));
evalcond[4]=((((-1.0)*sj12*x1034))+(((-1.0)*x1021*x1023*x1026))+((x1023*x1032))+(((-1.0)*x1030*x1031))+(((-1.0)*sj12*x1022*x1026)));
evalcond[5]=(x1029+((x1028*x1033))+(((-1.0)*x1031*x1034))+(((-1.0)*cj12*x1022*x1026))+((sj12*x1030))+(((-1.0)*x1028*x1032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1035=((25000000.0)*pp);
IkReal x1036=((15510000.0)*cj11);
IkReal x1037=((15510000.0)*pz*sj11);
IkReal x1038=((4058967.0)*cj11*cj12*sj13);
CheckValue<IkReal> x1039 = IKatan2WithCheck(IkReal((((px*x1035))+((px*x1037))+(((693428.75)*px))+((py*x1038)))),((((-1.0)*py*x1035))+(((-1.0)*py*x1037))+((px*x1038))+(((-693428.75)*py))),IKFAST_ATAN2_MAGTHRESH);
if(!x1039.valid){
continue;
}
CheckValue<IkReal> x1040=IKPowWithIntegerCheck(IKsign((((pp*x1036))+(((-1.0)*x1036*(pz*pz))))),-1);
if(!x1040.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1039.value)+(((1.5707963267949)*(x1040.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1041=IKsin(j10);
IkReal x1042=IKcos(j10);
IkReal x1043=(cj12*sj11);
IkReal x1044=((0.2617)*cj13);
IkReal x1045=((0.6204)*cj11);
IkReal x1046=((1.0)*px);
IkReal x1047=(pz*sj11);
IkReal x1048=(sj11*sj12);
IkReal x1049=((0.2617)*sj13);
IkReal x1050=(cj11*pz);
IkReal x1051=((1.0)*cj12);
IkReal x1052=(py*x1042);
IkReal x1053=(px*x1041);
IkReal x1054=(py*x1041);
evalcond[0]=((((-1.0)*x1042*x1046))+(((-1.0)*x1054))+((cj12*x1049)));
evalcond[1]=((-0.3102)+(((-1.0)*cj11*x1052))+((cj11*x1053))+(((-1.0)*x1047))+(((-1.0)*x1044)));
evalcond[2]=((-0.02773715)+(((-1.0)*x1045*x1052))+(((-1.0)*pp))+((x1045*x1053))+(((-0.6204)*x1047)));
evalcond[3]=((((0.3102)*cj11))+x1052+((cj11*x1044))+(((-1.0)*x1041*x1046))+(((-1.0)*x1048*x1049)));
evalcond[4]=(((x1043*x1052))+(((-1.0)*sj12*x1042*x1046))+(((-1.0)*x1050*x1051))+(((-1.0)*x1041*x1043*x1046))+(((-1.0)*sj12*x1054)));
evalcond[5]=(x1049+(((-1.0)*cj12*x1042*x1046))+((x1048*x1053))+(((-1.0)*x1048*x1052))+((sj12*x1050))+(((-1.0)*x1051*x1054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1055=((10000.0)*cj11);
IkReal x1056=((2617.0)*cj13);
IkReal x1057=((10000.0)*pz*sj11);
IkReal x1058=((2617.0)*cj11*cj12*sj13);
CheckValue<IkReal> x1059 = IKatan2WithCheck(IkReal(((((3102.0)*px))+((px*x1057))+((px*x1056))+((py*x1058)))),(((px*x1058))+(((-1.0)*py*x1056))+(((-1.0)*py*x1057))+(((-3102.0)*py))),IKFAST_ATAN2_MAGTHRESH);
if(!x1059.valid){
continue;
}
CheckValue<IkReal> x1060=IKPowWithIntegerCheck(IKsign((((pp*x1055))+(((-1.0)*x1055*(pz*pz))))),-1);
if(!x1060.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1059.value)+(((1.5707963267949)*(x1060.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1061=IKsin(j10);
IkReal x1062=IKcos(j10);
IkReal x1063=(cj12*sj11);
IkReal x1064=((0.2617)*cj13);
IkReal x1065=((0.6204)*cj11);
IkReal x1066=((1.0)*px);
IkReal x1067=(pz*sj11);
IkReal x1068=(sj11*sj12);
IkReal x1069=((0.2617)*sj13);
IkReal x1070=(cj11*pz);
IkReal x1071=((1.0)*cj12);
IkReal x1072=(py*x1062);
IkReal x1073=(px*x1061);
IkReal x1074=(py*x1061);
evalcond[0]=((((-1.0)*x1062*x1066))+((cj12*x1069))+(((-1.0)*x1074)));
evalcond[1]=((-0.3102)+((cj11*x1073))+(((-1.0)*cj11*x1072))+(((-1.0)*x1064))+(((-1.0)*x1067)));
evalcond[2]=((-0.02773715)+(((-1.0)*pp))+(((-0.6204)*x1067))+(((-1.0)*x1065*x1072))+((x1065*x1073)));
evalcond[3]=((((0.3102)*cj11))+x1072+(((-1.0)*x1061*x1066))+(((-1.0)*x1068*x1069))+((cj11*x1064)));
evalcond[4]=((((-1.0)*sj12*x1062*x1066))+(((-1.0)*x1070*x1071))+(((-1.0)*x1061*x1063*x1066))+((x1063*x1072))+(((-1.0)*sj12*x1074)));
evalcond[5]=(((x1068*x1073))+(((-1.0)*cj12*x1062*x1066))+x1069+(((-1.0)*x1071*x1074))+((sj12*x1070))+(((-1.0)*x1068*x1072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x1077 = IKatan2WithCheck(IkReal(((-1.0)*px)),((-1.0)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x1077.valid){
continue;
}
IkReal x1075=((1.0)*(x1077.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x1078=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x1078.valid){
continue;
}
if( (((0.2617)*cj12*sj13*(x1078.value))) < -1-IKFAST_SINCOS_THRESH || (((0.2617)*cj12*sj13*(x1078.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1076=IKasin(((0.2617)*cj12*sj13*(x1078.value)));
j10array[0]=((((-1.0)*x1076))+(((-1.0)*x1075)));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
j10array[1]=((3.14159265358979)+x1076+(((-1.0)*x1075)));
sj10array[1]=IKsin(j10array[1]);
cj10array[1]=IKcos(j10array[1]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
if( j10array[1] > IKPI )
{
    j10array[1]-=IK2PI;
}
else if( j10array[1] < -IKPI )
{    j10array[1]+=IK2PI;
}
j10valid[1] = true;
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
IkReal j11eval[3];
IkReal x1079=(px*sj10);
IkReal x1080=(sj12*sj13);
IkReal x1081=(cj10*py);
IkReal x1082=((10000.0)*pz);
IkReal x1083=((2617.0)*cj13);
j11eval[0]=((((-1.0)*pz*x1080))+(((-1.0)*cj13*x1079))+((cj13*x1081))+(((-1.18532670997325)*x1079))+(((1.18532670997325)*x1081)));
j11eval[1]=((IKabs(((-962.2404)+((pz*x1082))+(((-1623.5868)*cj13))+(((-684.8689)*(cj13*cj13))))))+(IKabs((((x1079*x1082))+(((684.8689)*cj13*x1080))+(((811.7934)*x1080))+(((-1.0)*x1081*x1082))))));
j11eval[2]=IKsign((((x1081*x1083))+(((-2617.0)*pz*x1080))+(((-3102.0)*x1079))+(((-1.0)*x1079*x1083))+(((3102.0)*x1081))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x1084=(px*sj10);
IkReal x1085=(cj10*py);
IkReal x1086=((15510000.0)*pz);
IkReal x1087=(sj12*sj13);
IkReal x1088=((4058967.0)*cj13);
IkReal x1089=((6542500.0)*pp);
j11eval[0]=((((-1.0)*pz*x1087))+((cj13*x1085))+(((-1.0)*cj13*x1084))+(((1.18532670997325)*x1085))+(((-1.18532670997325)*x1084)));
j11eval[1]=((IKabs(((-215101.59825)+((pz*x1086))+(((-7755000.0)*pp))+(((-1.0)*cj13*x1089))+(((-181470.303875)*cj13)))))+(IKabs(((((181470.303875)*x1087))+((x1087*x1089))+(((-1.0)*x1085*x1086))+((x1084*x1086))))));
j11eval[2]=IKsign(((((-4811202.0)*x1084))+(((4811202.0)*x1085))+(((-1.0)*x1084*x1088))+((x1085*x1088))+(((-4058967.0)*pz*x1087))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x1090=cj12*cj12;
IkReal x1091=cj13*cj13;
IkReal x1092=(sj12*sj13);
IkReal x1093=(cj10*py);
IkReal x1094=((26170000.0)*pz);
IkReal x1095=((26170000.0)*px*sj10);
IkReal x1096=(x1090*x1091);
j11eval[0]=((-2.40499940937601)+x1090+(((-1.0)*x1096))+(((-2.3706534199465)*cj13)));
j11eval[1]=((IKabs(((((-26170000.0)*x1092*x1093))+(((31020000.0)*pz))+((cj13*x1094))+((x1092*x1095)))))+(IKabs(((((-1.0)*cj13*x1095))+(((-31020000.0)*px*sj10))+(((26170000.0)*cj13*x1093))+(((31020000.0)*x1093))+((x1092*x1094))))));
j11eval[2]=IKsign(((-16471093.0)+(((-16235868.0)*cj13))+(((-6848689.0)*x1096))+(((6848689.0)*x1090))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j11]

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1097=cj12*cj12;
IkReal x1098=(px*sj10);
IkReal x1099=(cj10*py);
IkReal x1100=((26170000.0)*cj13);
IkReal x1101=((26170000.0)*sj12*sj13);
IkReal x1102=((6848689.0)*x1097);
CheckValue<IkReal> x1103 = IKatan2WithCheck(IkReal(((((31020000.0)*pz))+((x1098*x1101))+(((-1.0)*x1099*x1101))+((pz*x1100)))),((((-1.0)*x1098*x1100))+((x1099*x1100))+(((31020000.0)*x1099))+((pz*x1101))+(((-31020000.0)*x1098))),IKFAST_ATAN2_MAGTHRESH);
if(!x1103.valid){
continue;
}
CheckValue<IkReal> x1104=IKPowWithIntegerCheck(IKsign(((-16471093.0)+x1102+(((-16235868.0)*cj13))+(((-1.0)*x1102*(cj13*cj13))))),-1);
if(!x1104.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1103.value)+(((1.5707963267949)*(x1104.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x1105=IKsin(j11);
IkReal x1106=IKcos(j11);
IkReal x1107=(sj12*sj13);
IkReal x1108=((0.2617)*cj13);
IkReal x1109=(cj10*py);
IkReal x1110=(px*sj10);
IkReal x1111=((1.0)*cj12);
IkReal x1112=(cj10*px);
IkReal x1113=((1.0)*pz);
IkReal x1114=((1.0)*sj12);
IkReal x1115=(py*sj10);
IkReal x1116=((0.2617)*x1105);
IkReal x1117=((0.6204)*x1106);
IkReal x1118=(pz*x1106);
evalcond[0]=((((-0.3102)*x1105))+(((-0.2617)*x1106*x1107))+(((-1.0)*x1113))+(((-1.0)*x1105*x1108)));
evalcond[1]=((-0.3102)+(((-1.0)*x1108))+(((-1.0)*x1105*x1113))+((x1106*x1110))+(((-1.0)*x1106*x1109)));
evalcond[2]=((-0.02773715)+(((-1.0)*x1109*x1117))+((x1110*x1117))+(((-0.6204)*pz*x1105))+(((-1.0)*pp)));
evalcond[3]=(x1109+(((-1.0)*x1110))+(((-1.0)*x1107*x1116))+(((0.3102)*x1106))+((x1106*x1108)));
evalcond[4]=((((-1.0)*x1114*x1115))+(((-1.0)*x1112*x1114))+((cj12*x1105*x1109))+(((-1.0)*x1105*x1110*x1111))+(((-1.0)*x1111*x1118)));
evalcond[5]=(((sj12*x1118))+(((-1.0)*x1105*x1109*x1114))+(((0.2617)*sj13))+((sj12*x1105*x1110))+(((-1.0)*x1111*x1115))+(((-1.0)*x1111*x1112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1119=(sj12*sj13);
IkReal x1120=((6542500.0)*pp);
IkReal x1121=(cj10*py);
IkReal x1122=((15510000.0)*pz);
IkReal x1123=(px*sj10);
IkReal x1124=((4058967.0)*cj13);
CheckValue<IkReal> x1125=IKPowWithIntegerCheck(IKsign((((x1121*x1124))+(((-1.0)*x1123*x1124))+(((-4058967.0)*pz*x1119))+(((-4811202.0)*x1123))+(((4811202.0)*x1121)))),-1);
if(!x1125.valid){
continue;
}
CheckValue<IkReal> x1126 = IKatan2WithCheck(IkReal(((((-1.0)*x1121*x1122))+((x1119*x1120))+((x1122*x1123))+(((181470.303875)*x1119)))),((-215101.59825)+(((-1.0)*cj13*x1120))+(((-7755000.0)*pp))+((pz*x1122))+(((-181470.303875)*cj13))),IKFAST_ATAN2_MAGTHRESH);
if(!x1126.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1125.value)))+(x1126.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x1127=IKsin(j11);
IkReal x1128=IKcos(j11);
IkReal x1129=(sj12*sj13);
IkReal x1130=((0.2617)*cj13);
IkReal x1131=(cj10*py);
IkReal x1132=(px*sj10);
IkReal x1133=((1.0)*cj12);
IkReal x1134=(cj10*px);
IkReal x1135=((1.0)*pz);
IkReal x1136=((1.0)*sj12);
IkReal x1137=(py*sj10);
IkReal x1138=((0.2617)*x1127);
IkReal x1139=((0.6204)*x1128);
IkReal x1140=(pz*x1128);
evalcond[0]=((((-1.0)*x1127*x1130))+(((-0.3102)*x1127))+(((-1.0)*x1135))+(((-0.2617)*x1128*x1129)));
evalcond[1]=((-0.3102)+(((-1.0)*x1128*x1131))+(((-1.0)*x1127*x1135))+(((-1.0)*x1130))+((x1128*x1132)));
evalcond[2]=((-0.02773715)+(((-1.0)*x1131*x1139))+(((-1.0)*pp))+(((-0.6204)*pz*x1127))+((x1132*x1139)));
evalcond[3]=(x1131+(((0.3102)*x1128))+((x1128*x1130))+(((-1.0)*x1132))+(((-1.0)*x1129*x1138)));
evalcond[4]=((((-1.0)*x1134*x1136))+(((-1.0)*x1133*x1140))+(((-1.0)*x1136*x1137))+(((-1.0)*x1127*x1132*x1133))+((cj12*x1127*x1131)));
evalcond[5]=((((0.2617)*sj13))+((sj12*x1140))+(((-1.0)*x1127*x1131*x1136))+((sj12*x1127*x1132))+(((-1.0)*x1133*x1137))+(((-1.0)*x1133*x1134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1141=(sj12*sj13);
IkReal x1142=((10000.0)*pz);
IkReal x1143=(px*sj10);
IkReal x1144=(cj10*py);
IkReal x1145=((2617.0)*cj13);
CheckValue<IkReal> x1146 = IKatan2WithCheck(IkReal(((((811.7934)*x1141))+((x1142*x1143))+(((-1.0)*x1142*x1144))+(((684.8689)*cj13*x1141)))),((-962.2404)+((pz*x1142))+(((-1623.5868)*cj13))+(((-684.8689)*(cj13*cj13)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1146.valid){
continue;
}
CheckValue<IkReal> x1147=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1143*x1145))+(((-3102.0)*x1143))+(((3102.0)*x1144))+((x1144*x1145))+(((-2617.0)*pz*x1141)))),-1);
if(!x1147.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1146.value)+(((1.5707963267949)*(x1147.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x1148=IKsin(j11);
IkReal x1149=IKcos(j11);
IkReal x1150=(sj12*sj13);
IkReal x1151=((0.2617)*cj13);
IkReal x1152=(cj10*py);
IkReal x1153=(px*sj10);
IkReal x1154=((1.0)*cj12);
IkReal x1155=(cj10*px);
IkReal x1156=((1.0)*pz);
IkReal x1157=((1.0)*sj12);
IkReal x1158=(py*sj10);
IkReal x1159=((0.2617)*x1148);
IkReal x1160=((0.6204)*x1149);
IkReal x1161=(pz*x1149);
evalcond[0]=((((-1.0)*x1156))+(((-0.3102)*x1148))+(((-0.2617)*x1149*x1150))+(((-1.0)*x1148*x1151)));
evalcond[1]=((-0.3102)+((x1149*x1153))+(((-1.0)*x1151))+(((-1.0)*x1149*x1152))+(((-1.0)*x1148*x1156)));
evalcond[2]=((-0.02773715)+((x1153*x1160))+(((-1.0)*x1152*x1160))+(((-0.6204)*pz*x1148))+(((-1.0)*pp)));
evalcond[3]=(x1152+((x1149*x1151))+(((0.3102)*x1149))+(((-1.0)*x1153))+(((-1.0)*x1150*x1159)));
evalcond[4]=((((-1.0)*x1157*x1158))+(((-1.0)*x1155*x1157))+((cj12*x1148*x1152))+(((-1.0)*x1148*x1153*x1154))+(((-1.0)*x1154*x1161)));
evalcond[5]=((((-1.0)*x1154*x1155))+(((-1.0)*x1154*x1158))+((sj12*x1161))+((sj12*x1148*x1153))+(((0.2617)*sj13))+(((-1.0)*x1148*x1152*x1157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x125=(cj12*cj13);
IkReal x126=((1.0)*sj10);
IkReal x127=(cj11*cj12);
IkReal x128=(cj11*cj13);
IkReal x129=(sj11*sj13);
IkReal x130=((1.0)*cj10);
IkReal x131=(cj12*sj11);
IkReal x132=(cj12*sj13);
IkReal x133=(cj10*x132);
IkReal x134=((1.0)*cj13*sj11);
IkReal x135=((-1.0)*sj10);
IkReal x136=((1.0)*cj11*sj13);
IkReal x137=(((cj10*sj12))+((sj10*x131)));
IkReal x138=(((sj10*sj12))+(((-1.0)*x130*x131)));
IkReal x139=((((-1.0)*x129))+((sj12*x128)));
IkReal x140=((((-1.0)*x128))+((sj12*x129)));
IkReal x141=((((-1.0)*sj12*x134))+(((-1.0)*x136)));
IkReal x142=((((-1.0)*sj12*x136))+(((-1.0)*x134)));
IkReal x143=(cj10*x141);
IkReal x144=(((cj10*x140))+((sj10*x132)));
IkReal x145=(x133+(((-1.0)*x126*x140)));
IkReal x146=(x143+((x125*x135)));
IkReal x147=((((-1.0)*x126*x141))+(((-1.0)*x125*x130)));
new_r00=(((r00*x137))+((r20*x127))+((r10*x138)));
new_r01=(((r21*x127))+((r01*x137))+((r11*x138)));
new_r02=(((r02*x137))+((r22*x127))+((r12*x138)));
new_r10=(((r10*((x143+(((-1.0)*x125*x126))))))+((r00*((((x135*x141))+(((-1.0)*cj10*x125))))))+((r20*x139)));
new_r11=(((r01*x147))+((r21*x139))+((r11*x146)));
new_r12=(((r22*x139))+((r02*x147))+((r12*x146)));
new_r20=(((r20*x142))+((r00*x145))+((r10*x144)));
new_r21=(((r01*x145))+((r21*x142))+((r11*x144)));
new_r22=(((r02*((((x135*x140))+x133))))+((r22*x142))+((r12*x144)));
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
sj15array[0]=((-1.0)*new_r22);
if( sj15array[0] >= -1-IKFAST_SINCOS_THRESH && sj15array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j15valid[0] = j15valid[1] = true;
    j15array[0] = IKasin(sj15array[0]);
    cj15array[0] = IKcos(j15array[0]);
    sj15array[1] = sj15array[0];
    j15array[1] = j15array[0] > 0 ? (IKPI-j15array[0]) : (-IKPI-j15array[0]);
    cj15array[1] = -cj15array[0];
}
else if( isnan(sj15array[0]) )
{
    // probably any value will work
    j15valid[0] = true;
    cj15array[0] = 1; sj15array[0] = 0; j15array[0] = 0;
}
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

{
IkReal j14eval[2];
IkReal x148=(cj12*cj13);
IkReal x149=((1.0)*sj10);
IkReal x150=(cj11*cj12);
IkReal x151=(cj11*cj13);
IkReal x152=(sj11*sj13);
IkReal x153=((1.0)*cj10);
IkReal x154=(cj12*sj11);
IkReal x155=(cj12*sj13);
IkReal x156=(cj10*x155);
IkReal x157=((1.0)*cj13*sj11);
IkReal x158=((-1.0)*sj10);
IkReal x159=((1.0)*cj11*sj13);
IkReal x160=x137;
IkReal x161=x138;
IkReal x162=x139;
IkReal x163=x140;
IkReal x164=x141;
IkReal x165=x142;
IkReal x166=(cj10*x164);
IkReal x167=(((cj10*x163))+((sj10*x155)));
IkReal x168=(x156+(((-1.0)*x149*x163)));
IkReal x169=(x166+((x148*x158)));
IkReal x170=((((-1.0)*x148*x153))+(((-1.0)*x149*x164)));
new_r00=(((r00*x160))+((r20*x150))+((r10*x161)));
new_r01=(((r01*x160))+((r21*x150))+((r11*x161)));
new_r02=(((r12*x161))+((r22*x150))+((r02*x160)));
new_r10=(((r10*((x166+(((-1.0)*x148*x149))))))+((r20*x162))+((r00*(((((-1.0)*cj10*x148))+((x158*x164)))))));
new_r11=(((r01*x170))+((r21*x162))+((r11*x169)));
new_r12=(((r22*x162))+((r12*x169))+((r02*x170)));
new_r20=(((r00*x168))+((r20*x165))+((r10*x167)));
new_r21=(((r01*x168))+((r21*x165))+((r11*x167)));
new_r22=(((r22*x165))+((r02*((x156+((x158*x163))))))+((r12*x167)));
j14eval[0]=cj15;
j14eval[1]=IKsign(cj15);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x171=(cj12*cj13);
IkReal x172=((1.0)*sj10);
IkReal x173=(cj11*cj12);
IkReal x174=(cj11*cj13);
IkReal x175=(sj11*sj13);
IkReal x176=((1.0)*cj10);
IkReal x177=(cj12*sj11);
IkReal x178=(cj12*sj13);
IkReal x179=(cj10*x178);
IkReal x180=((1.0)*cj13*sj11);
IkReal x181=((-1.0)*sj10);
IkReal x182=((1.0)*cj11*sj13);
IkReal x183=x137;
IkReal x184=x138;
IkReal x185=x139;
IkReal x186=x140;
IkReal x187=x141;
IkReal x188=x142;
IkReal x189=(cj10*x187);
IkReal x190=(((sj10*x178))+((cj10*x186)));
IkReal x191=(x179+(((-1.0)*x172*x186)));
IkReal x192=(x189+((x171*x181)));
IkReal x193=((((-1.0)*x171*x176))+(((-1.0)*x172*x187)));
new_r00=(((r00*x183))+((r20*x173))+((r10*x184)));
new_r01=(((r01*x183))+((r21*x173))+((r11*x184)));
new_r02=(((r22*x173))+((r12*x184))+((r02*x183)));
new_r10=(((r00*(((((-1.0)*cj10*x171))+((x181*x187))))))+((r10*((x189+(((-1.0)*x171*x172))))))+((r20*x185)));
new_r11=(((r01*x193))+((r21*x185))+((r11*x192)));
new_r12=(((r12*x192))+((r02*x193))+((r22*x185)));
new_r20=(((r00*x191))+((r20*x188))+((r10*x190)));
new_r21=(((r01*x191))+((r21*x188))+((r11*x190)));
new_r22=(((r12*x190))+((r02*((x179+((x181*x186))))))+((r22*x188)));
j14eval[0]=cj15;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
evalcond[5]=new_r12;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x195 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x195.valid){
continue;
}
IkReal x194=x195.value;
j14array[0]=((-1.0)*x194);
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
j14array[1]=((3.14159265358979)+(((-1.0)*x194)));
sj14array[1]=IKsin(j14array[1]);
cj14array[1]=IKcos(j14array[1]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
if( j14array[1] > IKPI )
{
    j14array[1]-=IK2PI;
}
else if( j14array[1] < -IKPI )
{    j14array[1]+=IK2PI;
}
j14valid[1] = true;
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j14))))+((new_r12*(IKcos(j14)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x196=((1.0)*cj14);
if( IKabs(((((-1.0)*new_r01*x196))+(((-1.0)*new_r11*sj14)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r11*x196))+((new_r01*sj14)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x196))+(((-1.0)*new_r11*sj14))))+IKsqr(((((-1.0)*new_r11*x196))+((new_r01*sj14))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((-1.0)*new_r01*x196))+(((-1.0)*new_r11*sj14))), ((((-1.0)*new_r11*x196))+((new_r01*sj14))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x197=IKsin(j16);
IkReal x198=IKcos(j16);
IkReal x199=((1.0)*sj14);
IkReal x200=(cj14*x197);
IkReal x201=((1.0)*x198);
IkReal x202=(x198*x199);
evalcond[0]=(((cj14*new_r01))+x197+((new_r11*sj14)));
evalcond[1]=(((cj14*new_r10))+x197+(((-1.0)*new_r00*x199)));
evalcond[2]=(((cj14*new_r11))+x198+(((-1.0)*new_r01*x199)));
evalcond[3]=(((cj14*new_r00))+(((-1.0)*x201))+((new_r10*sj14)));
evalcond[4]=(((sj14*x197))+new_r11+((cj14*x198)));
evalcond[5]=((((-1.0)*x202))+x200+new_r01);
evalcond[6]=((((-1.0)*x202))+x200+new_r10);
evalcond[7]=((((-1.0)*x197*x199))+new_r00+(((-1.0)*cj14*x201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
evalcond[5]=new_r12;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x204 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x204.valid){
continue;
}
IkReal x203=x204.value;
j14array[0]=((-1.0)*x203);
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
j14array[1]=((3.14159265358979)+(((-1.0)*x203)));
sj14array[1]=IKsin(j14array[1]);
cj14array[1]=IKcos(j14array[1]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
if( j14array[1] > IKPI )
{
    j14array[1]-=IK2PI;
}
else if( j14array[1] < -IKPI )
{    j14array[1]+=IK2PI;
}
j14valid[1] = true;
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j14))))+((new_r12*(IKcos(j14)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x205=((1.0)*new_r01);
if( IKabs(((((-1.0)*new_r11*sj14))+(((-1.0)*cj14*x205)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj14*new_r11))+(((-1.0)*sj14*x205)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj14))+(((-1.0)*cj14*x205))))+IKsqr((((cj14*new_r11))+(((-1.0)*sj14*x205))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((-1.0)*new_r11*sj14))+(((-1.0)*cj14*x205))), (((cj14*new_r11))+(((-1.0)*sj14*x205))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x206=IKsin(j16);
IkReal x207=IKcos(j16);
IkReal x208=((1.0)*sj14);
IkReal x209=((1.0)*x207);
IkReal x210=(sj14*x206);
IkReal x211=((1.0)*x206);
IkReal x212=(cj14*x209);
evalcond[0]=(((cj14*new_r01))+x206+((new_r11*sj14)));
evalcond[1]=(((cj14*new_r00))+(((-1.0)*x209))+((new_r10*sj14)));
evalcond[2]=(((cj14*x206))+((sj14*x207))+new_r01);
evalcond[3]=(x210+new_r11+(((-1.0)*x212)));
evalcond[4]=((((-1.0)*new_r00*x208))+((cj14*new_r10))+(((-1.0)*x211)));
evalcond[5]=(((cj14*new_r11))+(((-1.0)*x209))+(((-1.0)*new_r01*x208)));
evalcond[6]=(x210+new_r00+(((-1.0)*x212)));
evalcond[7]=((((-1.0)*x207*x208))+(((-1.0)*cj14*x211))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14, j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x214=IKPowWithIntegerCheck(cj15,-1);
if(!x214.valid){
continue;
}
IkReal x213=x214.value;
CheckValue<IkReal> x215=IKPowWithIntegerCheck(new_r12,-1);
if(!x215.valid){
continue;
}
CheckValue<IkReal> x216=IKPowWithIntegerCheck(x213,-2);
if(!x216.valid){
continue;
}
if( IKabs(((-1.0)*new_r02*x213)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x213*(x215.value)*(((((-1.0)*(new_r02*new_r02)))+(x216.value))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r02*x213))+IKsqr((x213*(x215.value)*(((((-1.0)*(new_r02*new_r02)))+(x216.value)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*new_r02*x213), (x213*(x215.value)*(((((-1.0)*(new_r02*new_r02)))+(x216.value)))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x217=IKsin(j14);
IkReal x218=IKcos(j14);
IkReal x219=((1.0)*sj15);
IkReal x220=((1.0)*cj15);
IkReal x221=(cj15*x217);
IkReal x222=(cj15*x218);
IkReal x223=(new_r02*x217);
IkReal x224=(new_r12*x218);
evalcond[0]=(x221+new_r02);
evalcond[1]=((((-1.0)*x218*x220))+new_r12);
evalcond[2]=(((new_r02*x218))+((new_r12*x217)));
evalcond[3]=(x224+(((-1.0)*x220))+(((-1.0)*x223)));
evalcond[4]=((((-1.0)*new_r20*x219))+((new_r10*x222))+(((-1.0)*new_r00*x217*x220)));
evalcond[5]=((((-1.0)*new_r21*x219))+((new_r11*x222))+(((-1.0)*new_r01*x217*x220)));
evalcond[6]=((((-1.0)*x219*x224))+((sj15*x223))+(((-1.0)*new_r22*x220)));
evalcond[7]=((-1.0)+((new_r12*x222))+(((-1.0)*x220*x223))+(((-1.0)*new_r22*x219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[2];
IkReal x225=(cj12*cj13);
IkReal x226=((1.0)*sj10);
IkReal x227=(cj11*cj12);
IkReal x228=(cj11*cj13);
IkReal x229=(sj11*sj13);
IkReal x230=((1.0)*cj10);
IkReal x231=(cj12*sj11);
IkReal x232=(cj12*sj13);
IkReal x233=(cj10*x232);
IkReal x234=((1.0)*cj13*sj11);
IkReal x235=((-1.0)*sj10);
IkReal x236=((1.0)*cj11*sj13);
IkReal x237=x137;
IkReal x238=x138;
IkReal x239=x139;
IkReal x240=x140;
IkReal x241=x141;
IkReal x242=x142;
IkReal x243=(cj10*x241);
IkReal x244=(((sj10*x232))+((cj10*x240)));
IkReal x245=((((-1.0)*x226*x240))+x233);
IkReal x246=(x243+((x225*x235)));
IkReal x247=((((-1.0)*x225*x230))+(((-1.0)*x226*x241)));
new_r00=(((r20*x227))+((r10*x238))+((r00*x237)));
new_r01=(((r11*x238))+((r01*x237))+((r21*x227)));
new_r02=(((r02*x237))+((r22*x227))+((r12*x238)));
new_r10=(((r20*x239))+((r00*(((((-1.0)*cj10*x225))+((x235*x241))))))+((r10*(((((-1.0)*x225*x226))+x243)))));
new_r11=(((r01*x247))+((r11*x246))+((r21*x239)));
new_r12=(((r02*x247))+((r12*x246))+((r22*x239)));
new_r20=(((r00*x245))+((r10*x244))+((r20*x242)));
new_r21=(((r21*x242))+((r01*x245))+((r11*x244)));
new_r22=(((r22*x242))+((r02*((x233+((x235*x240))))))+((r12*x244)));
j16eval[0]=cj15;
j16eval[1]=IKsign(cj15);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x248=(cj12*cj13);
IkReal x249=((1.0)*sj10);
IkReal x250=(cj11*cj12);
IkReal x251=(cj11*cj13);
IkReal x252=(sj11*sj13);
IkReal x253=((1.0)*cj10);
IkReal x254=(cj12*sj11);
IkReal x255=(cj12*sj13);
IkReal x256=(cj10*x255);
IkReal x257=((1.0)*cj13*sj11);
IkReal x258=((-1.0)*sj10);
IkReal x259=((1.0)*cj11*sj13);
IkReal x260=x137;
IkReal x261=x138;
IkReal x262=x139;
IkReal x263=x140;
IkReal x264=x141;
IkReal x265=x142;
IkReal x266=(cj10*x264);
IkReal x267=(((sj10*x255))+((cj10*x263)));
IkReal x268=((((-1.0)*x249*x263))+x256);
IkReal x269=(((x248*x258))+x266);
IkReal x270=((((-1.0)*x249*x264))+(((-1.0)*x248*x253)));
new_r00=(((r20*x250))+((r00*x260))+((r10*x261)));
new_r01=(((r21*x250))+((r11*x261))+((r01*x260)));
new_r02=(((r02*x260))+((r12*x261))+((r22*x250)));
new_r10=(((r00*(((((-1.0)*cj10*x248))+((x258*x264))))))+((r10*(((((-1.0)*x248*x249))+x266))))+((r20*x262)));
new_r11=(((r21*x262))+((r01*x270))+((r11*x269)));
new_r12=(((r02*x270))+((r22*x262))+((r12*x269)));
new_r20=(((r00*x268))+((r10*x267))+((r20*x265)));
new_r21=(((r21*x265))+((r11*x267))+((r01*x268)));
new_r22=(((r22*x265))+((r12*x267))+((r02*((((x258*x263))+x256)))));
j16eval[0]=cj15;
j16eval[1]=sj14;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
IkReal x271=(cj12*cj13);
IkReal x272=((1.0)*sj10);
IkReal x273=(cj11*cj12);
IkReal x274=(cj11*cj13);
IkReal x275=(sj11*sj13);
IkReal x276=((1.0)*cj10);
IkReal x277=(cj12*sj11);
IkReal x278=(cj12*sj13);
IkReal x279=(cj10*x278);
IkReal x280=((1.0)*cj13*sj11);
IkReal x281=((-1.0)*sj10);
IkReal x282=((1.0)*cj11*sj13);
IkReal x283=x137;
IkReal x284=x138;
IkReal x285=x139;
IkReal x286=x140;
IkReal x287=x141;
IkReal x288=x142;
IkReal x289=(cj10*x287);
IkReal x290=(((cj10*x286))+((sj10*x278)));
IkReal x291=(x279+(((-1.0)*x272*x286)));
IkReal x292=(((x271*x281))+x289);
IkReal x293=((((-1.0)*x271*x276))+(((-1.0)*x272*x287)));
new_r00=(((r00*x283))+((r10*x284))+((r20*x273)));
new_r01=(((r01*x283))+((r11*x284))+((r21*x273)));
new_r02=(((r22*x273))+((r02*x283))+((r12*x284)));
new_r10=(((r00*(((((-1.0)*cj10*x271))+((x281*x287))))))+((r10*(((((-1.0)*x271*x272))+x289))))+((r20*x285)));
new_r11=(((r21*x285))+((r01*x293))+((r11*x292)));
new_r12=(((r12*x292))+((r22*x285))+((r02*x293)));
new_r20=(((r00*x291))+((r10*x290))+((r20*x288)));
new_r21=(((r21*x288))+((r01*x291))+((r11*x290)));
new_r22=(((r12*x290))+((r22*x288))+((r02*((x279+((x281*x286)))))));
j16eval[0]=cj15;
j16eval[1]=cj14;
j16eval[2]=sj15;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x294=(new_r12*sj14);
IkReal x295=(new_r02*sj14);
IkReal x296=(cj14*new_r12);
IkReal x297=(cj14*new_r02);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
evalcond[5]=new_r12;
evalcond[6]=(x294+x297);
evalcond[7]=((((-1.0)*x297))+(((-1.0)*x294)));
evalcond[8]=((((-1.0)*x295))+x296);
evalcond[9]=((((-1.0)*x296))+x295);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x298=((1.0)*cj14);
if( IKabs(((((-1.0)*new_r01*x298))+(((-1.0)*new_r11*sj14)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r11*x298))+((new_r01*sj14)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x298))+(((-1.0)*new_r11*sj14))))+IKsqr(((((-1.0)*new_r11*x298))+((new_r01*sj14))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((-1.0)*new_r01*x298))+(((-1.0)*new_r11*sj14))), ((((-1.0)*new_r11*x298))+((new_r01*sj14))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x299=IKsin(j16);
IkReal x300=IKcos(j16);
IkReal x301=((1.0)*sj14);
IkReal x302=(cj14*x299);
IkReal x303=((1.0)*x300);
IkReal x304=(x300*x301);
evalcond[0]=(((cj14*new_r01))+x299+((new_r11*sj14)));
evalcond[1]=(((cj14*new_r10))+x299+(((-1.0)*new_r00*x301)));
evalcond[2]=(((cj14*new_r11))+x300+(((-1.0)*new_r01*x301)));
evalcond[3]=(((cj14*new_r00))+((new_r10*sj14))+(((-1.0)*x303)));
evalcond[4]=(((cj14*x300))+((sj14*x299))+new_r11);
evalcond[5]=(x302+new_r01+(((-1.0)*x304)));
evalcond[6]=(x302+new_r10+(((-1.0)*x304)));
evalcond[7]=((((-1.0)*cj14*x303))+(((-1.0)*x299*x301))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x305=(new_r12*sj14);
IkReal x306=(cj14*new_r02);
IkReal x307=(((cj14*new_r12))+(((-1.0)*new_r02*sj14)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
evalcond[5]=new_r12;
evalcond[6]=(x306+x305);
evalcond[7]=((((-1.0)*x306))+(((-1.0)*x305)));
evalcond[8]=x307;
evalcond[9]=x307;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x308=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj14*x308))+(((-1.0)*new_r11*sj14)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj14*new_r11))+(((-1.0)*sj14*x308)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj14*x308))+(((-1.0)*new_r11*sj14))))+IKsqr((((cj14*new_r11))+(((-1.0)*sj14*x308))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((-1.0)*cj14*x308))+(((-1.0)*new_r11*sj14))), (((cj14*new_r11))+(((-1.0)*sj14*x308))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x309=IKsin(j16);
IkReal x310=IKcos(j16);
IkReal x311=((1.0)*sj14);
IkReal x312=((1.0)*x310);
IkReal x313=(sj14*x309);
IkReal x314=((1.0)*x309);
IkReal x315=(cj14*x312);
evalcond[0]=(((cj14*new_r01))+x309+((new_r11*sj14)));
evalcond[1]=(((cj14*new_r00))+(((-1.0)*x312))+((new_r10*sj14)));
evalcond[2]=(((sj14*x310))+((cj14*x309))+new_r01);
evalcond[3]=(x313+(((-1.0)*x315))+new_r11);
evalcond[4]=((((-1.0)*new_r00*x311))+((cj14*new_r10))+(((-1.0)*x314)));
evalcond[5]=(((cj14*new_r11))+(((-1.0)*x312))+(((-1.0)*new_r01*x311)));
evalcond[6]=(x313+(((-1.0)*x315))+new_r00);
evalcond[7]=((((-1.0)*x310*x311))+(((-1.0)*cj14*x314))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x316=(sj15+new_r22);
IkReal x317=((1.0)*sj15);
IkReal x318=((1.0)*cj15);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j14)))), 6.28318530717959)));
evalcond[1]=x316;
evalcond[2]=x316;
evalcond[3]=(cj15+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*x318))+(((-1.0)*new_r02)));
evalcond[6]=((((-1.0)*new_r00*x318))+(((-1.0)*new_r20*x317)));
evalcond[7]=((((-1.0)*new_r21*x317))+(((-1.0)*new_r01*x318)));
evalcond[8]=((((-1.0)*new_r22*x318))+((new_r02*sj15)));
evalcond[9]=((-1.0)+(((-1.0)*new_r02*x318))+(((-1.0)*new_r22*x317)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x319=IKsin(j16);
IkReal x320=IKcos(j16);
IkReal x321=((1.0)*new_r22);
IkReal x322=((1.0)*x320);
IkReal x323=((1.0)*x319);
evalcond[0]=(x319+new_r11);
evalcond[1]=((((-1.0)*x322))+new_r10);
evalcond[2]=((((-1.0)*new_r02*x323))+new_r20);
evalcond[3]=((((-1.0)*new_r02*x322))+new_r21);
evalcond[4]=((((-1.0)*x319*x321))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x320*x321))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*x323))+(((-1.0)*new_r00*x321))+((new_r02*new_r20)));
evalcond[7]=((((-1.0)*x322))+(((-1.0)*new_r01*x321))+((new_r02*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x324=(sj15+new_r22);
IkReal x325=((((-1.0)*cj15))+new_r02);
IkReal x326=((1.0)*sj15);
IkReal x327=((1.0)*cj15);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j14)))), 6.28318530717959)));
evalcond[1]=x324;
evalcond[2]=x324;
evalcond[3]=x325;
evalcond[4]=new_r12;
evalcond[5]=x325;
evalcond[6]=(((cj15*new_r00))+(((-1.0)*new_r20*x326)));
evalcond[7]=(((cj15*new_r01))+(((-1.0)*new_r21*x326)));
evalcond[8]=((((-1.0)*new_r22*x327))+(((-1.0)*new_r02*x326)));
evalcond[9]=((-1.0)+(((-1.0)*new_r22*x326))+((cj15*new_r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x328=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x328.valid){
continue;
}
CheckValue<IkReal> x329 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),((-1.0)*new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x329.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x328.value)))+(x329.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x330=IKsin(j16);
IkReal x331=IKcos(j16);
IkReal x332=((1.0)*new_r02);
IkReal x333=((1.0)*x331);
IkReal x334=((1.0)*x330);
evalcond[0]=(((new_r02*x330))+new_r20);
evalcond[1]=(((new_r02*x331))+new_r21);
evalcond[2]=(x330+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*new_r22*x334))+new_r00);
evalcond[4]=((((-1.0)*new_r22*x333))+new_r01);
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x333)));
evalcond[6]=(((new_r00*new_r22))+(((-1.0)*new_r20*x332))+(((-1.0)*x334)));
evalcond[7]=(((new_r01*new_r22))+(((-1.0)*new_r21*x332))+(((-1.0)*x333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x335=((1.0)*sj14);
IkReal x336=(cj14*new_r02);
IkReal x337=(((cj14*new_r10))+(((-1.0)*new_r00*x335)));
IkReal x338=(((cj14*new_r11))+(((-1.0)*new_r01*x335)));
IkReal x339=((-1.0)+((cj14*new_r12))+(((-1.0)*new_r02*x335)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(sj14+new_r02);
evalcond[3]=((((-1.0)*cj14))+new_r12);
evalcond[4]=(x336+((new_r12*sj14)));
evalcond[5]=((((-1.0)*x336))+(((-1.0)*new_r12*x335)));
evalcond[6]=x339;
evalcond[7]=x337;
evalcond[8]=x338;
evalcond[9]=x337;
evalcond[10]=x338;
evalcond[11]=x339;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x340=IKsin(j16);
IkReal x341=IKcos(j16);
IkReal x342=((1.0)*new_r02);
IkReal x343=((1.0)*x341);
evalcond[0]=(x340+new_r20);
evalcond[1]=(x341+new_r21);
evalcond[2]=(((new_r12*x340))+new_r01);
evalcond[3]=(((new_r02*x341))+new_r10);
evalcond[4]=((((-1.0)*x340*x342))+new_r11);
evalcond[5]=((((-1.0)*new_r12*x343))+new_r00);
evalcond[6]=((((-1.0)*new_r11*x342))+((new_r01*new_r12))+x340);
evalcond[7]=((((-1.0)*new_r10*x342))+((new_r00*new_r12))+(((-1.0)*x343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x344=((1.0)*sj14);
IkReal x345=(cj14*new_r10);
IkReal x346=(cj14*new_r12);
IkReal x347=((1.0)*cj14);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(new_r02+(((-1.0)*x344)));
evalcond[3]=(cj14+new_r12);
evalcond[4]=(((cj14*new_r02))+((new_r12*sj14)));
evalcond[5]=((((-1.0)*new_r02*x347))+(((-1.0)*new_r12*x344)));
evalcond[6]=((1.0)+(((-1.0)*new_r02*x344))+x346);
evalcond[7]=(x345+(((-1.0)*new_r00*x344)));
evalcond[8]=(((cj14*new_r11))+(((-1.0)*new_r01*x344)));
evalcond[9]=(((new_r00*sj14))+(((-1.0)*x345)));
evalcond[10]=((((-1.0)*new_r11*x347))+((new_r01*sj14)));
evalcond[11]=((-1.0)+((new_r02*sj14))+(((-1.0)*x346)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(new_r20, new_r21);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x348=IKsin(j16);
IkReal x349=IKcos(j16);
IkReal x350=((1.0)*new_r12);
IkReal x351=((1.0)*x349);
IkReal x352=((1.0)*x348);
evalcond[0]=((((-1.0)*x352))+new_r20);
evalcond[1]=((((-1.0)*x351))+new_r21);
evalcond[2]=(((new_r02*x348))+new_r11);
evalcond[3]=(((new_r12*x349))+new_r00);
evalcond[4]=((((-1.0)*x348*x350))+new_r01);
evalcond[5]=((((-1.0)*new_r02*x351))+new_r10);
evalcond[6]=(x348+(((-1.0)*new_r01*x350))+((new_r02*new_r11)));
evalcond[7]=((((-1.0)*x351))+((new_r02*new_r10))+(((-1.0)*new_r00*x350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x353=(sj15+new_r22);
IkReal x354=((((-1.0)*cj15))+new_r12);
IkReal x355=((1.0)*sj15);
IkReal x356=((1.0)*cj15);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
evalcond[1]=x353;
evalcond[2]=x353;
evalcond[3]=new_r02;
evalcond[4]=x354;
evalcond[5]=x354;
evalcond[6]=(((cj15*new_r10))+(((-1.0)*new_r20*x355)));
evalcond[7]=(((cj15*new_r11))+(((-1.0)*new_r21*x355)));
evalcond[8]=((((-1.0)*new_r22*x356))+(((-1.0)*new_r12*x355)));
evalcond[9]=((-1.0)+(((-1.0)*new_r22*x355))+((cj15*new_r12)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x357=IKsin(j16);
IkReal x358=IKcos(j16);
IkReal x359=((1.0)*new_r12);
IkReal x360=((1.0)*x358);
IkReal x361=((1.0)*x357);
evalcond[0]=(x357+new_r01);
evalcond[1]=(new_r20+((new_r12*x357)));
evalcond[2]=(new_r21+((new_r12*x358)));
evalcond[3]=((((-1.0)*x360))+new_r00);
evalcond[4]=((((-1.0)*new_r22*x360))+new_r11);
evalcond[5]=((((-1.0)*new_r22*x361))+new_r10);
evalcond[6]=((((-1.0)*x361))+((new_r10*new_r22))+(((-1.0)*new_r20*x359)));
evalcond[7]=((((-1.0)*x360))+((new_r11*new_r22))+(((-1.0)*new_r21*x359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x362=(sj15+new_r22);
IkReal x363=((1.0)*cj15);
IkReal x364=((1.0)*sj15);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j14)))), 6.28318530717959)));
evalcond[1]=x362;
evalcond[2]=x362;
evalcond[3]=new_r02;
evalcond[4]=(cj15+new_r12);
evalcond[5]=((((-1.0)*x363))+(((-1.0)*new_r12)));
evalcond[6]=((((-1.0)*new_r20*x364))+(((-1.0)*new_r10*x363)));
evalcond[7]=((((-1.0)*new_r11*x363))+(((-1.0)*new_r21*x364)));
evalcond[8]=((((-1.0)*new_r22*x363))+((new_r12*sj15)));
evalcond[9]=((-1.0)+(((-1.0)*new_r22*x364))+(((-1.0)*new_r12*x363)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x365=IKsin(j16);
IkReal x366=IKcos(j16);
IkReal x367=((1.0)*new_r10);
IkReal x368=((1.0)*x366);
IkReal x369=((1.0)*x365);
evalcond[0]=(x365+(((-1.0)*new_r01)));
evalcond[1]=(((new_r22*x366))+new_r11);
evalcond[2]=((((-1.0)*new_r12*x369))+new_r20);
evalcond[3]=((((-1.0)*new_r12*x368))+new_r21);
evalcond[4]=((((-1.0)*x368))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x367))+(((-1.0)*new_r22*x369)));
evalcond[6]=((((-1.0)*x369))+(((-1.0)*new_r22*x367))+((new_r12*new_r20)));
evalcond[7]=((((-1.0)*new_r11*new_r22))+(((-1.0)*x368))+((new_r12*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x371=IKPowWithIntegerCheck(cj15,-1);
if(!x371.valid){
continue;
}
IkReal x370=x371.value;
CheckValue<IkReal> x372=IKPowWithIntegerCheck(cj14,-1);
if(!x372.valid){
continue;
}
CheckValue<IkReal> x373=IKPowWithIntegerCheck(sj15,-1);
if(!x373.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*x370)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x370*(x372.value)*(x373.value)*(((((-1.0)*cj15*new_r11))+((new_r20*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*x370))+IKsqr((x370*(x372.value)*(x373.value)*(((((-1.0)*cj15*new_r11))+((new_r20*sj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((-1.0)*new_r20*x370), (x370*(x372.value)*(x373.value)*(((((-1.0)*cj15*new_r11))+((new_r20*sj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[12];
IkReal x374=IKsin(j16);
IkReal x375=IKcos(j16);
IkReal x376=((1.0)*cj14);
IkReal x377=((1.0)*sj14);
IkReal x378=(sj14*sj15);
IkReal x379=((1.0)*cj15);
IkReal x380=((1.0)*x375);
IkReal x381=((1.0)*x374);
IkReal x382=(sj15*x375);
IkReal x383=(cj14*x374);
evalcond[0]=(((cj15*x374))+new_r20);
evalcond[1]=(((cj15*x375))+new_r21);
evalcond[2]=(((cj14*new_r01))+x374+((new_r11*sj14)));
evalcond[3]=(((cj14*new_r00))+(((-1.0)*x380))+((new_r10*sj14)));
evalcond[4]=(((sj14*x374))+((cj14*x382))+new_r11);
evalcond[5]=((((-1.0)*new_r00*x377))+((sj15*x374))+((cj14*new_r10)));
evalcond[6]=(((cj14*new_r11))+x382+(((-1.0)*new_r01*x377)));
evalcond[7]=(x383+new_r01+(((-1.0)*x377*x382)));
evalcond[8]=(((sj15*x383))+new_r10+(((-1.0)*x375*x377)));
evalcond[9]=((((-1.0)*sj15*x374*x377))+new_r00+(((-1.0)*x375*x376)));
evalcond[10]=((((-1.0)*new_r10*sj15*x376))+(((-1.0)*new_r20*x379))+((new_r00*x378))+(((-1.0)*x381)));
evalcond[11]=((((-1.0)*new_r21*x379))+((new_r01*x378))+(((-1.0)*new_r11*sj15*x376))+(((-1.0)*x380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x385=IKPowWithIntegerCheck(cj15,-1);
if(!x385.valid){
continue;
}
IkReal x384=x385.value;
CheckValue<IkReal> x386=IKPowWithIntegerCheck(sj14,-1);
if(!x386.valid){
continue;
}
if( IKabs((x384*(x386.value)*(((((-1.0)*cj15*new_r11))+((cj14*new_r21*sj15)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*x384)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x384*(x386.value)*(((((-1.0)*cj15*new_r11))+((cj14*new_r21*sj15))))))+IKsqr(((-1.0)*new_r21*x384))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2((x384*(x386.value)*(((((-1.0)*cj15*new_r11))+((cj14*new_r21*sj15))))), ((-1.0)*new_r21*x384));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[12];
IkReal x387=IKsin(j16);
IkReal x388=IKcos(j16);
IkReal x389=((1.0)*cj14);
IkReal x390=((1.0)*sj14);
IkReal x391=(sj14*sj15);
IkReal x392=((1.0)*cj15);
IkReal x393=((1.0)*x388);
IkReal x394=((1.0)*x387);
IkReal x395=(sj15*x388);
IkReal x396=(cj14*x387);
evalcond[0]=(((cj15*x387))+new_r20);
evalcond[1]=(((cj15*x388))+new_r21);
evalcond[2]=(((cj14*new_r01))+x387+((new_r11*sj14)));
evalcond[3]=((((-1.0)*x393))+((cj14*new_r00))+((new_r10*sj14)));
evalcond[4]=(((sj14*x387))+new_r11+((cj14*x395)));
evalcond[5]=(((cj14*new_r10))+((sj15*x387))+(((-1.0)*new_r00*x390)));
evalcond[6]=((((-1.0)*new_r01*x390))+((cj14*new_r11))+x395);
evalcond[7]=(x396+(((-1.0)*x390*x395))+new_r01);
evalcond[8]=((((-1.0)*x388*x390))+new_r10+((sj15*x396)));
evalcond[9]=((((-1.0)*sj15*x387*x390))+new_r00+(((-1.0)*x388*x389)));
evalcond[10]=((((-1.0)*x394))+(((-1.0)*new_r10*sj15*x389))+((new_r00*x391))+(((-1.0)*new_r20*x392)));
evalcond[11]=((((-1.0)*x393))+(((-1.0)*new_r21*x392))+(((-1.0)*new_r11*sj15*x389))+((new_r01*x391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x397=IKPowWithIntegerCheck(IKsign(cj15),-1);
if(!x397.valid){
continue;
}
CheckValue<IkReal> x398 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),((-1.0)*new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x398.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x397.value)))+(x398.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[12];
IkReal x399=IKsin(j16);
IkReal x400=IKcos(j16);
IkReal x401=((1.0)*cj14);
IkReal x402=((1.0)*sj14);
IkReal x403=(sj14*sj15);
IkReal x404=((1.0)*cj15);
IkReal x405=((1.0)*x400);
IkReal x406=((1.0)*x399);
IkReal x407=(sj15*x400);
IkReal x408=(cj14*x399);
evalcond[0]=(((cj15*x399))+new_r20);
evalcond[1]=(((cj15*x400))+new_r21);
evalcond[2]=(((cj14*new_r01))+x399+((new_r11*sj14)));
evalcond[3]=(((cj14*new_r00))+((new_r10*sj14))+(((-1.0)*x405)));
evalcond[4]=(((sj14*x399))+((cj14*x407))+new_r11);
evalcond[5]=(((cj14*new_r10))+(((-1.0)*new_r00*x402))+((sj15*x399)));
evalcond[6]=(((cj14*new_r11))+x407+(((-1.0)*new_r01*x402)));
evalcond[7]=((((-1.0)*x402*x407))+x408+new_r01);
evalcond[8]=((((-1.0)*x400*x402))+((sj15*x408))+new_r10);
evalcond[9]=((((-1.0)*x400*x401))+new_r00+(((-1.0)*sj15*x399*x402)));
evalcond[10]=((((-1.0)*new_r10*sj15*x401))+(((-1.0)*new_r20*x404))+(((-1.0)*x406))+((new_r00*x403)));
evalcond[11]=((((-1.0)*new_r21*x404))+(((-1.0)*new_r11*sj15*x401))+((new_r01*x403))+(((-1.0)*x405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x409=IKPowWithIntegerCheck(IKsign(cj15),-1);
if(!x409.valid){
continue;
}
CheckValue<IkReal> x410 = IKatan2WithCheck(IkReal(((-1.0)*new_r02)),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x410.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x409.value)))+(x410.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x411=IKsin(j14);
IkReal x412=IKcos(j14);
IkReal x413=((1.0)*sj15);
IkReal x414=((1.0)*cj15);
IkReal x415=(cj15*x411);
IkReal x416=(cj15*x412);
IkReal x417=(new_r02*x411);
IkReal x418=(new_r12*x412);
evalcond[0]=(x415+new_r02);
evalcond[1]=((((-1.0)*x412*x414))+new_r12);
evalcond[2]=(((new_r12*x411))+((new_r02*x412)));
evalcond[3]=(x418+(((-1.0)*x414))+(((-1.0)*x417)));
evalcond[4]=((((-1.0)*new_r00*x411*x414))+(((-1.0)*new_r20*x413))+((new_r10*x416)));
evalcond[5]=((((-1.0)*new_r21*x413))+(((-1.0)*new_r01*x411*x414))+((new_r11*x416)));
evalcond[6]=(((sj15*x417))+(((-1.0)*x413*x418))+(((-1.0)*new_r22*x414)));
evalcond[7]=((-1.0)+((new_r12*x416))+(((-1.0)*x414*x417))+(((-1.0)*new_r22*x413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[2];
IkReal x419=(cj12*cj13);
IkReal x420=((1.0)*sj10);
IkReal x421=(cj11*cj12);
IkReal x422=(cj11*cj13);
IkReal x423=(sj11*sj13);
IkReal x424=((1.0)*cj10);
IkReal x425=(cj12*sj11);
IkReal x426=(cj12*sj13);
IkReal x427=(cj10*x426);
IkReal x428=((1.0)*cj13*sj11);
IkReal x429=((-1.0)*sj10);
IkReal x430=((1.0)*cj11*sj13);
IkReal x431=x137;
IkReal x432=x138;
IkReal x433=x139;
IkReal x434=x140;
IkReal x435=x141;
IkReal x436=x142;
IkReal x437=(cj10*x435);
IkReal x438=(((cj10*x434))+((sj10*x426)));
IkReal x439=((((-1.0)*x420*x434))+x427);
IkReal x440=(((x419*x429))+x437);
IkReal x441=((((-1.0)*x420*x435))+(((-1.0)*x419*x424)));
new_r00=(((r20*x421))+((r00*x431))+((r10*x432)));
new_r01=(((r21*x421))+((r01*x431))+((r11*x432)));
new_r02=(((r12*x432))+((r02*x431))+((r22*x421)));
new_r10=(((r00*((((x429*x435))+(((-1.0)*cj10*x419))))))+((r10*((x437+(((-1.0)*x419*x420))))))+((r20*x433)));
new_r11=(((r21*x433))+((r01*x441))+((r11*x440)));
new_r12=(((r02*x441))+((r22*x433))+((r12*x440)));
new_r20=(((r00*x439))+((r10*x438))+((r20*x436)));
new_r21=(((r21*x436))+((r01*x439))+((r11*x438)));
new_r22=(((r12*x438))+((r22*x436))+((r02*((((x429*x434))+x427)))));
j16eval[0]=cj15;
j16eval[1]=IKsign(cj15);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x442=(cj12*cj13);
IkReal x443=((1.0)*sj10);
IkReal x444=(cj11*cj12);
IkReal x445=(cj11*cj13);
IkReal x446=(sj11*sj13);
IkReal x447=((1.0)*cj10);
IkReal x448=(cj12*sj11);
IkReal x449=(cj12*sj13);
IkReal x450=(cj10*x449);
IkReal x451=((1.0)*cj13*sj11);
IkReal x452=((-1.0)*sj10);
IkReal x453=((1.0)*cj11*sj13);
IkReal x454=x137;
IkReal x455=x138;
IkReal x456=x139;
IkReal x457=x140;
IkReal x458=x141;
IkReal x459=x142;
IkReal x460=(cj10*x458);
IkReal x461=(((cj10*x457))+((sj10*x449)));
IkReal x462=((((-1.0)*x443*x457))+x450);
IkReal x463=(x460+((x442*x452)));
IkReal x464=((((-1.0)*x443*x458))+(((-1.0)*x442*x447)));
new_r00=(((r00*x454))+((r20*x444))+((r10*x455)));
new_r01=(((r21*x444))+((r11*x455))+((r01*x454)));
new_r02=(((r22*x444))+((r12*x455))+((r02*x454)));
new_r10=(((r10*((x460+(((-1.0)*x442*x443))))))+((r00*(((((-1.0)*cj10*x442))+((x452*x458))))))+((r20*x456)));
new_r11=(((r11*x463))+((r01*x464))+((r21*x456)));
new_r12=(((r12*x463))+((r02*x464))+((r22*x456)));
new_r20=(((r20*x459))+((r00*x462))+((r10*x461)));
new_r21=(((r11*x461))+((r01*x462))+((r21*x459)));
new_r22=(((r02*((((x452*x457))+x450))))+((r12*x461))+((r22*x459)));
j16eval[0]=cj15;
j16eval[1]=sj14;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
IkReal x465=(cj12*cj13);
IkReal x466=((1.0)*sj10);
IkReal x467=(cj11*cj12);
IkReal x468=(cj11*cj13);
IkReal x469=(sj11*sj13);
IkReal x470=((1.0)*cj10);
IkReal x471=(cj12*sj11);
IkReal x472=(cj12*sj13);
IkReal x473=(cj10*x472);
IkReal x474=((1.0)*cj13*sj11);
IkReal x475=((-1.0)*sj10);
IkReal x476=((1.0)*cj11*sj13);
IkReal x477=x137;
IkReal x478=x138;
IkReal x479=x139;
IkReal x480=x140;
IkReal x481=x141;
IkReal x482=x142;
IkReal x483=(cj10*x481);
IkReal x484=(((sj10*x472))+((cj10*x480)));
IkReal x485=((((-1.0)*x466*x480))+x473);
IkReal x486=(((x465*x475))+x483);
IkReal x487=((((-1.0)*x466*x481))+(((-1.0)*x465*x470)));
new_r00=(((r10*x478))+((r20*x467))+((r00*x477)));
new_r01=(((r11*x478))+((r21*x467))+((r01*x477)));
new_r02=(((r22*x467))+((r02*x477))+((r12*x478)));
new_r10=(((r00*(((((-1.0)*cj10*x465))+((x475*x481))))))+((r20*x479))+((r10*(((((-1.0)*x465*x466))+x483)))));
new_r11=(((r21*x479))+((r11*x486))+((r01*x487)));
new_r12=(((r02*x487))+((r12*x486))+((r22*x479)));
new_r20=(((r20*x482))+((r10*x484))+((r00*x485)));
new_r21=(((r11*x484))+((r21*x482))+((r01*x485)));
new_r22=(((r12*x484))+((r22*x482))+((r02*((((x475*x480))+x473)))));
j16eval[0]=cj15;
j16eval[1]=cj14;
j16eval[2]=sj15;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x488=(new_r12*sj14);
IkReal x489=(new_r02*sj14);
IkReal x490=(cj14*new_r12);
IkReal x491=(cj14*new_r02);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
evalcond[5]=new_r12;
evalcond[6]=(x488+x491);
evalcond[7]=((((-1.0)*x488))+(((-1.0)*x491)));
evalcond[8]=((((-1.0)*x489))+x490);
evalcond[9]=((((-1.0)*x490))+x489);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x492=((1.0)*cj14);
if( IKabs(((((-1.0)*new_r01*x492))+(((-1.0)*new_r11*sj14)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r11*x492))+((new_r01*sj14)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x492))+(((-1.0)*new_r11*sj14))))+IKsqr(((((-1.0)*new_r11*x492))+((new_r01*sj14))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((-1.0)*new_r01*x492))+(((-1.0)*new_r11*sj14))), ((((-1.0)*new_r11*x492))+((new_r01*sj14))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x493=IKsin(j16);
IkReal x494=IKcos(j16);
IkReal x495=((1.0)*sj14);
IkReal x496=(cj14*x493);
IkReal x497=((1.0)*x494);
IkReal x498=(x494*x495);
evalcond[0]=(((cj14*new_r01))+x493+((new_r11*sj14)));
evalcond[1]=((((-1.0)*new_r00*x495))+((cj14*new_r10))+x493);
evalcond[2]=(((cj14*new_r11))+(((-1.0)*new_r01*x495))+x494);
evalcond[3]=((((-1.0)*x497))+((cj14*new_r00))+((new_r10*sj14)));
evalcond[4]=(new_r11+((sj14*x493))+((cj14*x494)));
evalcond[5]=((((-1.0)*x498))+x496+new_r01);
evalcond[6]=((((-1.0)*x498))+x496+new_r10);
evalcond[7]=((((-1.0)*cj14*x497))+(((-1.0)*x493*x495))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x499=(new_r12*sj14);
IkReal x500=(cj14*new_r02);
IkReal x501=(((cj14*new_r12))+(((-1.0)*new_r02*sj14)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
evalcond[5]=new_r12;
evalcond[6]=(x499+x500);
evalcond[7]=((((-1.0)*x499))+(((-1.0)*x500)));
evalcond[8]=x501;
evalcond[9]=x501;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x502=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj14*x502))+(((-1.0)*new_r11*sj14)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj14*new_r11))+(((-1.0)*sj14*x502)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj14*x502))+(((-1.0)*new_r11*sj14))))+IKsqr((((cj14*new_r11))+(((-1.0)*sj14*x502))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((-1.0)*cj14*x502))+(((-1.0)*new_r11*sj14))), (((cj14*new_r11))+(((-1.0)*sj14*x502))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x503=IKsin(j16);
IkReal x504=IKcos(j16);
IkReal x505=((1.0)*sj14);
IkReal x506=((1.0)*x504);
IkReal x507=(sj14*x503);
IkReal x508=((1.0)*x503);
IkReal x509=(cj14*x506);
evalcond[0]=(((cj14*new_r01))+x503+((new_r11*sj14)));
evalcond[1]=(((cj14*new_r00))+(((-1.0)*x506))+((new_r10*sj14)));
evalcond[2]=(((cj14*x503))+new_r01+((sj14*x504)));
evalcond[3]=((((-1.0)*x509))+x507+new_r11);
evalcond[4]=(((cj14*new_r10))+(((-1.0)*new_r00*x505))+(((-1.0)*x508)));
evalcond[5]=(((cj14*new_r11))+(((-1.0)*new_r01*x505))+(((-1.0)*x506)));
evalcond[6]=((((-1.0)*x509))+x507+new_r00);
evalcond[7]=((((-1.0)*cj14*x508))+(((-1.0)*x504*x505))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x510=(sj15+new_r22);
IkReal x511=((1.0)*sj15);
IkReal x512=((1.0)*cj15);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j14)))), 6.28318530717959)));
evalcond[1]=x510;
evalcond[2]=x510;
evalcond[3]=(cj15+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*new_r02))+(((-1.0)*x512)));
evalcond[6]=((((-1.0)*new_r20*x511))+(((-1.0)*new_r00*x512)));
evalcond[7]=((((-1.0)*new_r01*x512))+(((-1.0)*new_r21*x511)));
evalcond[8]=((((-1.0)*new_r22*x512))+((new_r02*sj15)));
evalcond[9]=((-1.0)+(((-1.0)*new_r22*x511))+(((-1.0)*new_r02*x512)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x513=IKsin(j16);
IkReal x514=IKcos(j16);
IkReal x515=((1.0)*new_r22);
IkReal x516=((1.0)*x514);
IkReal x517=((1.0)*x513);
evalcond[0]=(x513+new_r11);
evalcond[1]=(new_r10+(((-1.0)*x516)));
evalcond[2]=((((-1.0)*new_r02*x517))+new_r20);
evalcond[3]=((((-1.0)*new_r02*x516))+new_r21);
evalcond[4]=((((-1.0)*x513*x515))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x514*x515))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r00*x515))+((new_r02*new_r20))+(((-1.0)*x517)));
evalcond[7]=((((-1.0)*new_r01*x515))+((new_r02*new_r21))+(((-1.0)*x516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x518=(sj15+new_r22);
IkReal x519=((((-1.0)*cj15))+new_r02);
IkReal x520=((1.0)*sj15);
IkReal x521=((1.0)*cj15);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j14)))), 6.28318530717959)));
evalcond[1]=x518;
evalcond[2]=x518;
evalcond[3]=x519;
evalcond[4]=new_r12;
evalcond[5]=x519;
evalcond[6]=((((-1.0)*new_r20*x520))+((cj15*new_r00)));
evalcond[7]=((((-1.0)*new_r21*x520))+((cj15*new_r01)));
evalcond[8]=((((-1.0)*new_r22*x521))+(((-1.0)*new_r02*x520)));
evalcond[9]=((-1.0)+(((-1.0)*new_r22*x520))+((cj15*new_r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x522=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x522.valid){
continue;
}
CheckValue<IkReal> x523 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),((-1.0)*new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x523.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x522.value)))+(x523.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x524=IKsin(j16);
IkReal x525=IKcos(j16);
IkReal x526=((1.0)*new_r02);
IkReal x527=((1.0)*x525);
IkReal x528=((1.0)*x524);
evalcond[0]=(((new_r02*x524))+new_r20);
evalcond[1]=(((new_r02*x525))+new_r21);
evalcond[2]=(x524+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*new_r22*x528))+new_r00);
evalcond[4]=((((-1.0)*new_r22*x527))+new_r01);
evalcond[5]=((((-1.0)*x527))+(((-1.0)*new_r10)));
evalcond[6]=(((new_r00*new_r22))+(((-1.0)*new_r20*x526))+(((-1.0)*x528)));
evalcond[7]=(((new_r01*new_r22))+(((-1.0)*x527))+(((-1.0)*new_r21*x526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x529=((1.0)*sj14);
IkReal x530=(cj14*new_r02);
IkReal x531=(((cj14*new_r10))+(((-1.0)*new_r00*x529)));
IkReal x532=(((cj14*new_r11))+(((-1.0)*new_r01*x529)));
IkReal x533=((-1.0)+((cj14*new_r12))+(((-1.0)*new_r02*x529)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(sj14+new_r02);
evalcond[3]=((((-1.0)*cj14))+new_r12);
evalcond[4]=(x530+((new_r12*sj14)));
evalcond[5]=((((-1.0)*x530))+(((-1.0)*new_r12*x529)));
evalcond[6]=x533;
evalcond[7]=x531;
evalcond[8]=x532;
evalcond[9]=x531;
evalcond[10]=x532;
evalcond[11]=x533;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x534=IKsin(j16);
IkReal x535=IKcos(j16);
IkReal x536=((1.0)*new_r02);
IkReal x537=((1.0)*x535);
evalcond[0]=(x534+new_r20);
evalcond[1]=(x535+new_r21);
evalcond[2]=(((new_r12*x534))+new_r01);
evalcond[3]=(((new_r02*x535))+new_r10);
evalcond[4]=((((-1.0)*x534*x536))+new_r11);
evalcond[5]=((((-1.0)*new_r12*x537))+new_r00);
evalcond[6]=(((new_r01*new_r12))+(((-1.0)*new_r11*x536))+x534);
evalcond[7]=((((-1.0)*x537))+((new_r00*new_r12))+(((-1.0)*new_r10*x536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x538=((1.0)*sj14);
IkReal x539=(cj14*new_r10);
IkReal x540=(cj14*new_r12);
IkReal x541=((1.0)*cj14);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x538))+new_r02);
evalcond[3]=(cj14+new_r12);
evalcond[4]=(((cj14*new_r02))+((new_r12*sj14)));
evalcond[5]=((((-1.0)*new_r12*x538))+(((-1.0)*new_r02*x541)));
evalcond[6]=((1.0)+x540+(((-1.0)*new_r02*x538)));
evalcond[7]=((((-1.0)*new_r00*x538))+x539);
evalcond[8]=(((cj14*new_r11))+(((-1.0)*new_r01*x538)));
evalcond[9]=((((-1.0)*x539))+((new_r00*sj14)));
evalcond[10]=((((-1.0)*new_r11*x541))+((new_r01*sj14)));
evalcond[11]=((-1.0)+(((-1.0)*x540))+((new_r02*sj14)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(new_r20, new_r21);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x542=IKsin(j16);
IkReal x543=IKcos(j16);
IkReal x544=((1.0)*new_r12);
IkReal x545=((1.0)*x543);
IkReal x546=((1.0)*x542);
evalcond[0]=((((-1.0)*x546))+new_r20);
evalcond[1]=((((-1.0)*x545))+new_r21);
evalcond[2]=(((new_r02*x542))+new_r11);
evalcond[3]=(((new_r12*x543))+new_r00);
evalcond[4]=((((-1.0)*x542*x544))+new_r01);
evalcond[5]=(new_r10+(((-1.0)*new_r02*x545)));
evalcond[6]=((((-1.0)*new_r01*x544))+x542+((new_r02*new_r11)));
evalcond[7]=((((-1.0)*new_r00*x544))+(((-1.0)*x545))+((new_r02*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x547=(sj15+new_r22);
IkReal x548=((((-1.0)*cj15))+new_r12);
IkReal x549=((1.0)*sj15);
IkReal x550=((1.0)*cj15);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
evalcond[1]=x547;
evalcond[2]=x547;
evalcond[3]=new_r02;
evalcond[4]=x548;
evalcond[5]=x548;
evalcond[6]=((((-1.0)*new_r20*x549))+((cj15*new_r10)));
evalcond[7]=(((cj15*new_r11))+(((-1.0)*new_r21*x549)));
evalcond[8]=((((-1.0)*new_r22*x550))+(((-1.0)*new_r12*x549)));
evalcond[9]=((-1.0)+(((-1.0)*new_r22*x549))+((cj15*new_r12)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x551=IKsin(j16);
IkReal x552=IKcos(j16);
IkReal x553=((1.0)*new_r12);
IkReal x554=((1.0)*x552);
IkReal x555=((1.0)*x551);
evalcond[0]=(x551+new_r01);
evalcond[1]=(((new_r12*x551))+new_r20);
evalcond[2]=(((new_r12*x552))+new_r21);
evalcond[3]=((((-1.0)*x554))+new_r00);
evalcond[4]=((((-1.0)*new_r22*x554))+new_r11);
evalcond[5]=((((-1.0)*new_r22*x555))+new_r10);
evalcond[6]=((((-1.0)*x555))+(((-1.0)*new_r20*x553))+((new_r10*new_r22)));
evalcond[7]=((((-1.0)*new_r21*x553))+(((-1.0)*x554))+((new_r11*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x556=(sj15+new_r22);
IkReal x557=((1.0)*cj15);
IkReal x558=((1.0)*sj15);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j14)))), 6.28318530717959)));
evalcond[1]=x556;
evalcond[2]=x556;
evalcond[3]=new_r02;
evalcond[4]=(cj15+new_r12);
evalcond[5]=((((-1.0)*x557))+(((-1.0)*new_r12)));
evalcond[6]=((((-1.0)*new_r10*x557))+(((-1.0)*new_r20*x558)));
evalcond[7]=((((-1.0)*new_r21*x558))+(((-1.0)*new_r11*x557)));
evalcond[8]=((((-1.0)*new_r22*x557))+((new_r12*sj15)));
evalcond[9]=((-1.0)+(((-1.0)*new_r22*x558))+(((-1.0)*new_r12*x557)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x559=IKsin(j16);
IkReal x560=IKcos(j16);
IkReal x561=((1.0)*new_r10);
IkReal x562=((1.0)*x560);
IkReal x563=((1.0)*x559);
evalcond[0]=(x559+(((-1.0)*new_r01)));
evalcond[1]=(((new_r22*x560))+new_r11);
evalcond[2]=((((-1.0)*new_r12*x563))+new_r20);
evalcond[3]=((((-1.0)*new_r12*x562))+new_r21);
evalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x562)));
evalcond[5]=((((-1.0)*new_r22*x563))+(((-1.0)*x561)));
evalcond[6]=(((new_r12*new_r20))+(((-1.0)*new_r22*x561))+(((-1.0)*x563)));
evalcond[7]=((((-1.0)*new_r11*new_r22))+((new_r12*new_r21))+(((-1.0)*x562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x565=IKPowWithIntegerCheck(cj15,-1);
if(!x565.valid){
continue;
}
IkReal x564=x565.value;
CheckValue<IkReal> x566=IKPowWithIntegerCheck(cj14,-1);
if(!x566.valid){
continue;
}
CheckValue<IkReal> x567=IKPowWithIntegerCheck(sj15,-1);
if(!x567.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*x564)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x564*(x566.value)*(x567.value)*(((((-1.0)*cj15*new_r11))+((new_r20*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*x564))+IKsqr((x564*(x566.value)*(x567.value)*(((((-1.0)*cj15*new_r11))+((new_r20*sj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((-1.0)*new_r20*x564), (x564*(x566.value)*(x567.value)*(((((-1.0)*cj15*new_r11))+((new_r20*sj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[12];
IkReal x568=IKsin(j16);
IkReal x569=IKcos(j16);
IkReal x570=((1.0)*cj14);
IkReal x571=((1.0)*sj14);
IkReal x572=(sj14*sj15);
IkReal x573=((1.0)*cj15);
IkReal x574=((1.0)*x569);
IkReal x575=((1.0)*x568);
IkReal x576=(sj15*x569);
IkReal x577=(cj14*x568);
evalcond[0]=(((cj15*x568))+new_r20);
evalcond[1]=(((cj15*x569))+new_r21);
evalcond[2]=(((cj14*new_r01))+x568+((new_r11*sj14)));
evalcond[3]=(((cj14*new_r00))+(((-1.0)*x574))+((new_r10*sj14)));
evalcond[4]=(((sj14*x568))+((cj14*x576))+new_r11);
evalcond[5]=(((sj15*x568))+((cj14*new_r10))+(((-1.0)*new_r00*x571)));
evalcond[6]=(((cj14*new_r11))+x576+(((-1.0)*new_r01*x571)));
evalcond[7]=((((-1.0)*x571*x576))+x577+new_r01);
evalcond[8]=((((-1.0)*x569*x571))+((sj15*x577))+new_r10);
evalcond[9]=((((-1.0)*x569*x570))+(((-1.0)*sj15*x568*x571))+new_r00);
evalcond[10]=(((new_r00*x572))+(((-1.0)*x575))+(((-1.0)*new_r20*x573))+(((-1.0)*new_r10*sj15*x570)));
evalcond[11]=(((new_r01*x572))+(((-1.0)*new_r11*sj15*x570))+(((-1.0)*x574))+(((-1.0)*new_r21*x573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x579=IKPowWithIntegerCheck(cj15,-1);
if(!x579.valid){
continue;
}
IkReal x578=x579.value;
CheckValue<IkReal> x580=IKPowWithIntegerCheck(sj14,-1);
if(!x580.valid){
continue;
}
if( IKabs((x578*(x580.value)*(((((-1.0)*cj15*new_r11))+((cj14*new_r21*sj15)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*x578)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x578*(x580.value)*(((((-1.0)*cj15*new_r11))+((cj14*new_r21*sj15))))))+IKsqr(((-1.0)*new_r21*x578))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2((x578*(x580.value)*(((((-1.0)*cj15*new_r11))+((cj14*new_r21*sj15))))), ((-1.0)*new_r21*x578));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[12];
IkReal x581=IKsin(j16);
IkReal x582=IKcos(j16);
IkReal x583=((1.0)*cj14);
IkReal x584=((1.0)*sj14);
IkReal x585=(sj14*sj15);
IkReal x586=((1.0)*cj15);
IkReal x587=((1.0)*x582);
IkReal x588=((1.0)*x581);
IkReal x589=(sj15*x582);
IkReal x590=(cj14*x581);
evalcond[0]=(((cj15*x581))+new_r20);
evalcond[1]=(((cj15*x582))+new_r21);
evalcond[2]=(((cj14*new_r01))+x581+((new_r11*sj14)));
evalcond[3]=(((cj14*new_r00))+((new_r10*sj14))+(((-1.0)*x587)));
evalcond[4]=(((sj14*x581))+new_r11+((cj14*x589)));
evalcond[5]=(((cj14*new_r10))+((sj15*x581))+(((-1.0)*new_r00*x584)));
evalcond[6]=(((cj14*new_r11))+(((-1.0)*new_r01*x584))+x589);
evalcond[7]=((((-1.0)*x584*x589))+x590+new_r01);
evalcond[8]=((((-1.0)*x582*x584))+((sj15*x590))+new_r10);
evalcond[9]=((((-1.0)*x582*x583))+(((-1.0)*sj15*x581*x584))+new_r00);
evalcond[10]=((((-1.0)*new_r20*x586))+((new_r00*x585))+(((-1.0)*new_r10*sj15*x583))+(((-1.0)*x588)));
evalcond[11]=((((-1.0)*new_r21*x586))+((new_r01*x585))+(((-1.0)*x587))+(((-1.0)*new_r11*sj15*x583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x591=IKPowWithIntegerCheck(IKsign(cj15),-1);
if(!x591.valid){
continue;
}
CheckValue<IkReal> x592 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),((-1.0)*new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x592.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x591.value)))+(x592.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[12];
IkReal x593=IKsin(j16);
IkReal x594=IKcos(j16);
IkReal x595=((1.0)*cj14);
IkReal x596=((1.0)*sj14);
IkReal x597=(sj14*sj15);
IkReal x598=((1.0)*cj15);
IkReal x599=((1.0)*x594);
IkReal x600=((1.0)*x593);
IkReal x601=(sj15*x594);
IkReal x602=(cj14*x593);
evalcond[0]=(((cj15*x593))+new_r20);
evalcond[1]=(((cj15*x594))+new_r21);
evalcond[2]=(((cj14*new_r01))+x593+((new_r11*sj14)));
evalcond[3]=(((cj14*new_r00))+(((-1.0)*x599))+((new_r10*sj14)));
evalcond[4]=(((cj14*x601))+new_r11+((sj14*x593)));
evalcond[5]=(((cj14*new_r10))+(((-1.0)*new_r00*x596))+((sj15*x593)));
evalcond[6]=(((cj14*new_r11))+(((-1.0)*new_r01*x596))+x601);
evalcond[7]=((((-1.0)*x596*x601))+x602+new_r01);
evalcond[8]=((((-1.0)*x594*x596))+new_r10+((sj15*x602)));
evalcond[9]=((((-1.0)*x594*x595))+new_r00+(((-1.0)*sj15*x593*x596)));
evalcond[10]=((((-1.0)*new_r20*x598))+((new_r00*x597))+(((-1.0)*new_r10*sj15*x595))+(((-1.0)*x600)));
evalcond[11]=((((-1.0)*new_r21*x598))+(((-1.0)*new_r11*sj15*x595))+((new_r01*x597))+(((-1.0)*x599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "eebdaab6fb12dcef053ad06f8aa171e1"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
