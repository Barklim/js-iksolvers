/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-05-22 19:40:53.347109
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=((1.545)*x6);
x13=((1.895)*x5);
x14=((0.145)*x0);
x15=((1.545)*x0);
x16=((2.16)*x5);
x17=((1.0)*x8);
x18=((1.0)*x6);
x19=((1.0)*x0);
x20=((1.895)*x6);
x21=((1.895)*x0);
x22=((1.0)*x9);
x23=(x0*x7);
x24=(x11*x7);
x25=(x3*x4);
x26=(x1*x2);
x27=(x3*x6);
x28=(x1*x4);
x29=(x5*x9);
x30=(x2*x3);
x31=(x19*x7);
x32=((1.0)*x26);
x33=(x19*x25);
x34=((((-1.0)*x32))+x25);
x35=((((1.0)*x28))+(((1.0)*x30)));
x36=(x34*x7);
x37=(x34*x5*x8);
x38=(x35*x9);
x39=((((-1.0)*x19*x26))+x33);
x40=(x18*(((((-1.0)*x26))+x25)));
x41=(x19*((x30+x28)));
x42=((-1.0)*x41);
x43=(x18*(((((-1.0)*x30))+(((-1.0)*x28)))));
x44=(x18*((x30+x28)));
x45=(x39*x9);
x46=(x40*x9);
x47=(x43*x5);
x48=(x44*x7);
x49=(x41*x7);
x50=(((x42*x5))+((x6*x7)));
x51=(((x5*x6))+x49);
x52=((((-1.0)*x31))+x47);
x53=((((-1.0)*x48))+((x19*x5)));
x54=(x50*x8);
eerot[0]=(((x50*x9))+((x8*(((((-1.0)*x33))+((x0*x26)))))));
eerot[1]=(((x11*(((((-1.0)*x22*x39))+(((-1.0)*x17*x50))))))+((x10*x51)));
eerot[2]=(((x11*x51))+((x10*((x45+x54)))));
IkReal x55=((1.0)*x14);
eetrans[0]=((((-1.0)*x15*x25))+(((-1.2)*x0*x3))+(((0.35)*x0))+((x8*(((((-1.0)*x21*x26))+((x21*x25))))))+((x9*(((((-1.0)*x20*x7))+(((-1.0)*x13*x42))))))+((x11*(((((-2.16)*x49))+(((-1.0)*x16*x6))))))+(((-1.0)*x30*x55))+(((-1.0)*x28*x55))+((x10*(((((-2.16)*x45))+(((-2.16)*x54))))))+((x15*x26)));
eerot[3]=(((x9*(((((-1.0)*x47))+x31))))+((x40*x8)));
eerot[4]=(((x11*((x46+((x52*x8))))))+((x10*x53)));
eerot[5]=(((x10*(((((-1.0)*x22*x40))+(((-1.0)*x17*x52))))))+((x11*x53)));
eetrans[1]=(((x9*(((((-1.0)*x21*x7))+((x13*x43))))))+(((-1.0)*x12*x26))+(((-0.35)*x6))+(((1.2)*x27))+(((0.145)*x2*x27))+(((0.145)*x28*x6))+((x8*((((x20*x26))+(((-1.0)*x20*x25))))))+((x10*(((((2.16)*x8*(((((-1.0)*x23))+x47))))+(((2.16)*x46))))))+((x12*x25))+((x11*(((((2.16)*x48))+(((-1.0)*x0*x16)))))));
eerot[6]=(((x35*x8))+((x29*(((((-1.0)*x25))+x32)))));
eerot[7]=(((x10*x36))+((x11*((x38+x37)))));
eerot[8]=(((x10*(((((-1.0)*x17*x34*x5))+(((-1.0)*x22*x35))))))+((x24*x34)));
eetrans[2]=((0.815)+((x29*(((((1.895)*x25))+(((-1.895)*x26))))))+((x10*(((((2.16)*x38))+((x16*x34*x8))))))+((x8*(((((-1.895)*x30))+(((-1.895)*x28))))))+(((1.545)*x30))+(((1.2)*x1))+(((-0.145)*x25))+((x24*(((((2.16)*x26))+(((-2.16)*x25))))))+(((1.545)*x28))+(((0.145)*x26)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r02;
new_r01=r01;
new_r02=((-1.0)*r00);
new_px=((((2.16)*r02))+(((1.895)*r00))+px);
new_r10=((-1.0)*r12);
new_r11=((-1.0)*r11);
new_r12=r10;
new_py=((((-2.16)*r12))+(((-1.0)*py))+(((-1.895)*r10)));
new_r20=((-1.0)*r22);
new_r21=((-1.0)*r21);
new_r22=r20;
new_pz=((0.815)+(((-1.895)*r20))+(((-2.16)*r22))+(((-1.0)*pz)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x56=((1.0)*px);
IkReal x57=((1.0)*pz);
IkReal x58=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x58))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x57)));
rxp0_2=((((-1.0)*r10*x56))+((py*r00)));
rxp1_0=((((-1.0)*r21*x58))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x57)));
rxp1_2=((((-1.0)*r11*x56))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x58)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x57)));
rxp2_2=((((-1.0)*r12*x56))+((py*r02)));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x60 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x60.valid){
continue;
}
IkReal x59=x60.value;
j0array[0]=((-1.0)*x59);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x59)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((1.00033716573729)+(((-0.268507244765817)*pp))+(((0.187955071336072)*py*sj0))+(((0.187955071336072)*cj0*px)))) < -1-IKFAST_SINCOS_THRESH || (((1.00033716573729)+(((-0.268507244765817)*pp))+(((0.187955071336072)*py*sj0))+(((0.187955071336072)*cj0*px)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x61=IKasin(((1.00033716573729)+(((-0.268507244765817)*pp))+(((0.187955071336072)*py*sj0))+(((0.187955071336072)*cj0*px))));
j2array[0]=((-0.09357703178482)+(((-1.0)*x61)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.04801562180497)+x61);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[3];
IkReal x62=cj2*cj2;
IkReal x63=(pz*sj2);
IkReal x64=(cj2*sj2);
IkReal x65=(cj0*px);
IkReal x66=((30.4433497536946)*cj2);
IkReal x67=((1.545)*cj2);
IkReal x68=(cj2*pz);
IkReal x69=(py*sj0);
IkReal x70=(sj2*x69);
j1eval[0]=((((-1.0)*x66*x69))+(((-1.0)*sj2))+(((-23.6453201970443)*pz))+(((-30.4433497536946)*x63))+(((-2.85714285714286)*x68))+(((2.85714285714286)*x70))+(((2.85714285714286)*sj2*x65))+(((-1.0)*x65*x66))+(((10.6551724137931)*cj2)));
j1eval[1]=IKsign(((((0.145)*sj2*x65))+(((-1.0)*x67*x69))+(((-1.545)*x63))+(((0.54075)*cj2))+(((-0.145)*x68))+(((-1.0)*x65*x67))+(((-1.2)*pz))+(((0.145)*x70))+(((-0.05075)*sj2))));
j1eval[2]=((IKabs(((-0.224025)+(((-0.35)*pz))+(((0.44805)*x62))+(((2.366)*x64))+(((-0.174)*sj2))+(((1.854)*cj2))+((pz*x69))+((pz*x65)))))+(IKabs(((-0.021025)+(((-2.366)*x62))+(((0.44805)*x64))+(pz*pz)))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x71=(cj0*px);
IkReal x72=(pz*sj2);
IkReal x73=((30.4433497536946)*sj2);
IkReal x74=(py*sj0);
IkReal x75=((1.545)*sj2);
IkReal x76=((2.85714285714286)*cj2);
IkReal x77=(cj2*pz);
IkReal x78=((0.145)*cj2);
j1eval[0]=((-8.27586206896552)+(((-30.4433497536946)*x77))+(((-10.6551724137931)*sj2))+(((2.85714285714286)*x72))+(((23.6453201970443)*x71))+(((23.6453201970443)*x74))+((x73*x74))+((x74*x76))+(((-1.0)*cj2))+((x71*x76))+((x71*x73)));
j1eval[1]=IKsign(((-0.42)+(((1.2)*x74))+(((1.2)*x71))+(((-1.545)*x77))+(((-0.05075)*cj2))+((x74*x75))+((x74*x78))+(((0.145)*x72))+((x71*x75))+((x71*x78))+(((-0.54075)*sj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x79=py*py;
IkReal x80=cj0*cj0;
IkReal x81=px*px;
IkReal x82=pz*pz;
IkReal x83=(cj0*px);
IkReal x84=(py*sj0);
IkReal x85=(x79*x80);
IkReal x86=(x80*x81);
j1eval[0]=((-1.0)+(((-8.16326530612245)*x79))+(((8.16326530612245)*x85))+(((-16.3265306122449)*x83*x84))+(((-8.16326530612245)*x82))+(((-8.16326530612245)*x86))+(((5.71428571428571)*x83))+(((5.71428571428571)*x84)));
j1eval[1]=IKsign(((-0.1225)+(((-2.0)*x83*x84))+x85+(((-1.0)*x86))+(((-1.0)*x82))+(((-1.0)*x79))+(((0.7)*x83))+(((0.7)*x84))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x87=py*py;
IkReal x88=cj0*cj0;
IkReal x89=(py*sj0);
IkReal x90=(cj0*px);
IkReal x91=((1.545)*sj2);
IkReal x92=((1.545)*cj2);
IkReal x93=((0.145)*cj2);
IkReal x94=((0.145)*sj2);
CheckValue<IkReal> x95=IKPowWithIntegerCheck(IKsign(((-0.1225)+(((-2.0)*x89*x90))+(((-1.0)*x87))+(((-1.0)*(pz*pz)))+(((-1.0)*x88*(px*px)))+(((0.7)*x89))+(((0.7)*x90))+((x87*x88)))),-1);
if(!x95.valid){
continue;
}
CheckValue<IkReal> x96 = IKatan2WithCheck(IkReal(((-0.42)+(((-1.0)*pz*x94))+(((1.2)*x90))+((x89*x91))+((x89*x93))+((pz*x92))+((x90*x91))+((x90*x93))+(((-0.05075)*cj2))+(((1.2)*x89))+(((-0.54075)*sj2)))),((((1.2)*pz))+((x89*x94))+(((-1.0)*x90*x92))+((pz*x93))+((pz*x91))+(((0.54075)*cj2))+((x90*x94))+(((-0.05075)*sj2))+(((-1.0)*x89*x92))),IKFAST_ATAN2_MAGTHRESH);
if(!x96.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x95.value)))+(x96.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x97=IKsin(j1);
IkReal x98=IKcos(j1);
IkReal x99=((0.145)*sj2);
IkReal x100=(cj0*px);
IkReal x101=(py*sj0);
IkReal x102=((0.145)*cj2);
IkReal x103=((1.545)*cj2);
IkReal x104=((1.545)*sj2);
IkReal x105=((1.0)*x98);
IkReal x106=((2.4)*x97);
IkReal x107=(pz*x98);
evalcond[0]=((1.2)+((x100*x97))+((x101*x97))+x104+x107+x102+(((-0.35)*x97)));
evalcond[1]=((((-1.0)*x101*x105))+(((-1.0)*x100*x105))+(((0.35)*x98))+x103+((pz*x97))+(((-1.0)*x99)));
evalcond[2]=((((1.2)*x98))+((x103*x97))+((x102*x98))+pz+(((-1.0)*x97*x99))+((x104*x98)));
evalcond[3]=((0.84555)+(((0.7)*x100))+(((0.7)*x101))+(((-1.0)*x101*x106))+(((-1.0)*x100*x106))+(((0.84)*x97))+(((-1.0)*pp))+(((-2.4)*x107)));
evalcond[4]=((0.35)+(((-1.0)*x98*x99))+(((-1.0)*x102*x97))+((x103*x98))+(((-1.2)*x97))+(((-1.0)*x100))+(((-1.0)*x101))+(((-1.0)*x104*x97)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x377=cj2*cj2;
IkReal x378=(cj2*sj2);
IkReal x379=(cj0*px);
IkReal x380=(py*sj0);
IkReal x381=((1.545)*sj2);
IkReal x382=((0.145)*cj2);
IkReal x383=((1.0)*pz);
CheckValue<IkReal> x384=IKPowWithIntegerCheck(IKsign(((-0.42)+(((1.2)*x380))+(((-1.545)*cj2*pz))+((x379*x382))+((x379*x381))+(((0.145)*pz*sj2))+(((-0.05075)*cj2))+((x380*x381))+((x380*x382))+(((1.2)*x379))+(((-0.54075)*sj2)))),-1);
if(!x384.valid){
continue;
}
CheckValue<IkReal> x385 = IKatan2WithCheck(IkReal(((-3.827025)+(((-0.44805)*x378))+(pz*pz)+(((-0.348)*cj2))+(((-3.708)*sj2))+(((2.366)*x377)))),((-0.224025)+(((-1.0)*x380*x383))+(((-1.0)*x379*x383))+(((-0.174)*sj2))+(((1.854)*cj2))+(((0.35)*pz))+(((0.44805)*x377))+(((2.366)*x378))),IKFAST_ATAN2_MAGTHRESH);
if(!x385.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x384.value)))+(x385.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x386=IKsin(j1);
IkReal x387=IKcos(j1);
IkReal x388=((0.145)*sj2);
IkReal x389=(cj0*px);
IkReal x390=(py*sj0);
IkReal x391=((0.145)*cj2);
IkReal x392=((1.545)*cj2);
IkReal x393=((1.545)*sj2);
IkReal x394=((1.0)*x387);
IkReal x395=((2.4)*x386);
IkReal x396=(pz*x387);
evalcond[0]=((1.2)+((x386*x389))+x396+x391+x393+(((-0.35)*x386))+((x386*x390)));
evalcond[1]=((((0.35)*x387))+(((-1.0)*x389*x394))+x392+(((-1.0)*x388))+(((-1.0)*x390*x394))+((pz*x386)));
evalcond[2]=((((1.2)*x387))+pz+(((-1.0)*x386*x388))+((x387*x391))+((x387*x393))+((x386*x392)));
evalcond[3]=((0.84555)+(((-1.0)*x389*x395))+(((0.7)*x390))+(((-1.0)*pp))+(((-1.0)*x390*x395))+(((0.84)*x386))+(((-2.4)*x396))+(((0.7)*x389)));
evalcond[4]=((0.35)+(((-1.0)*x390))+(((-1.0)*x386*x391))+(((-1.0)*x386*x393))+(((-1.0)*x387*x388))+(((-1.0)*x389))+(((-1.2)*x386))+((x387*x392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x397=cj2*cj2;
IkReal x398=((1.545)*cj2);
IkReal x399=(cj0*px);
IkReal x400=(py*sj0);
IkReal x401=(cj2*sj2);
IkReal x402=((0.145)*sj2);
CheckValue<IkReal> x403 = IKatan2WithCheck(IkReal(((-0.224025)+((pz*x400))+(((-0.35)*pz))+((pz*x399))+(((-0.174)*sj2))+(((1.854)*cj2))+(((2.366)*x401))+(((0.44805)*x397)))),((-0.021025)+(pz*pz)+(((-2.366)*x397))+(((0.44805)*x401))),IKFAST_ATAN2_MAGTHRESH);
if(!x403.valid){
continue;
}
CheckValue<IkReal> x404=IKPowWithIntegerCheck(IKsign(((((-1.0)*x398*x399))+(((0.54075)*cj2))+(((-0.145)*cj2*pz))+(((-1.0)*x398*x400))+(((-1.545)*pz*sj2))+((x399*x402))+((x400*x402))+(((-1.2)*pz))+(((-0.05075)*sj2)))),-1);
if(!x404.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x403.value)+(((1.5707963267949)*(x404.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x405=IKsin(j1);
IkReal x406=IKcos(j1);
IkReal x407=((0.145)*sj2);
IkReal x408=(cj0*px);
IkReal x409=(py*sj0);
IkReal x410=((0.145)*cj2);
IkReal x411=((1.545)*cj2);
IkReal x412=((1.545)*sj2);
IkReal x413=((1.0)*x406);
IkReal x414=((2.4)*x405);
IkReal x415=(pz*x406);
evalcond[0]=((1.2)+(((-0.35)*x405))+((x405*x409))+((x405*x408))+x412+x410+x415);
evalcond[1]=(((pz*x405))+x411+(((-1.0)*x408*x413))+(((-1.0)*x407))+(((0.35)*x406))+(((-1.0)*x409*x413)));
evalcond[2]=((((1.2)*x406))+((x405*x411))+((x406*x412))+((x406*x410))+pz+(((-1.0)*x405*x407)));
evalcond[3]=((0.84555)+(((0.7)*x409))+(((0.7)*x408))+(((0.84)*x405))+(((-2.4)*x415))+(((-1.0)*pp))+(((-1.0)*x408*x414))+(((-1.0)*x409*x414)));
evalcond[4]=((0.35)+(((-1.2)*x405))+(((-1.0)*x406*x407))+((x406*x411))+(((-1.0)*x405*x412))+(((-1.0)*x405*x410))+(((-1.0)*x409))+(((-1.0)*x408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x108=((1.0)*cj0);
IkReal x109=(r11*sj0);
IkReal x110=(cj0*r00);
IkReal x111=(r10*sj0);
IkReal x112=(cj0*r01);
IkReal x113=(cj2*sj1);
IkReal x114=((1.0)*cj1);
IkReal x115=(r12*sj0);
IkReal x116=(cj0*r02);
IkReal x117=((((-1.0)*cj2*x114))+((sj1*sj2)));
IkReal x118=(((cj1*sj2))+x113);
IkReal x119=(sj0*x117);
IkReal x120=((((-1.0)*x113))+(((-1.0)*sj2*x114)));
IkReal x121=(cj0*x120);
new_r00=(((x111*x120))+((r20*x117))+((x110*x120)));
new_r01=(((x112*x120))+((r21*x117))+((x109*x120)));
new_r02=(((r22*x117))+((x115*x120))+((x116*x120)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x108)));
new_r11=((((-1.0)*r11*x108))+((r01*sj0)));
new_r12=((((-1.0)*r12*x108))+((r02*sj0)));
new_r20=(((x110*x117))+((x111*x117))+((r20*x118)));
new_r21=(((x112*x117))+((x109*x117))+((r21*x118)));
new_r22=(((r22*x118))+((x116*x117))+((x115*x117)));
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=new_r22;
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j5eval[2];
IkReal x122=((1.0)*cj0);
IkReal x123=(r11*sj0);
IkReal x124=(cj0*r00);
IkReal x125=(r10*sj0);
IkReal x126=(cj0*r01);
IkReal x127=(cj2*sj1);
IkReal x128=((1.0)*cj1);
IkReal x129=(r12*sj0);
IkReal x130=(cj0*r02);
IkReal x131=x117;
IkReal x132=(((cj1*sj2))+x127);
IkReal x133=(sj0*x131);
IkReal x134=x120;
IkReal x135=(cj0*x134);
new_r00=(((x124*x134))+((x125*x134))+((r20*x131)));
new_r01=(((r21*x131))+((x123*x134))+((x126*x134)));
new_r02=(((x129*x134))+((r22*x131))+((x130*x134)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x122)));
new_r11=(((r01*sj0))+(((-1.0)*r11*x122)));
new_r12=((((-1.0)*r12*x122))+((r02*sj0)));
new_r20=(((x124*x131))+((x125*x131))+((r20*x132)));
new_r21=(((r21*x132))+((x123*x131))+((x126*x131)));
new_r22=(((x129*x131))+((r22*x132))+((x130*x131)));
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x136=((1.0)*cj0);
IkReal x137=(r11*sj0);
IkReal x138=(cj0*r00);
IkReal x139=(r10*sj0);
IkReal x140=(cj0*r01);
IkReal x141=(cj2*sj1);
IkReal x142=((1.0)*cj1);
IkReal x143=(r12*sj0);
IkReal x144=(cj0*r02);
IkReal x145=x117;
IkReal x146=(((cj1*sj2))+x141);
IkReal x147=(sj0*x145);
IkReal x148=x120;
IkReal x149=(cj0*x148);
new_r00=(((r20*x145))+((x138*x148))+((x139*x148)));
new_r01=(((x140*x148))+((x137*x148))+((r21*x145)));
new_r02=(((x144*x148))+((r22*x145))+((x143*x148)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x136)));
new_r11=(((r01*sj0))+(((-1.0)*r11*x136)));
new_r12=((((-1.0)*r12*x136))+((r02*sj0)));
new_r20=(((r20*x146))+((x138*x145))+((x139*x145)));
new_r21=(((x140*x145))+((x137*x145))+((r21*x146)));
new_r22=(((x144*x145))+((r22*x146))+((x143*x145)));
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x151 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x151.valid){
continue;
}
IkReal x150=x151.value;
j3array[0]=((-1.0)*x150);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x150)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x152=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj3*x152))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x152))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x152))+(((-1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x152))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj3*x152))+(((-1.0)*new_r00*sj3))), ((((-1.0)*sj3*x152))+((cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x153=IKsin(j5);
IkReal x154=IKcos(j5);
IkReal x155=((1.0)*cj3);
IkReal x156=(sj3*x153);
IkReal x157=((1.0)*x154);
IkReal x158=(x154*x155);
evalcond[0]=(((new_r11*sj3))+x153+((cj3*new_r01)));
evalcond[1]=(((new_r00*sj3))+x153+(((-1.0)*new_r10*x155)));
evalcond[2]=(((new_r01*sj3))+x154+(((-1.0)*new_r11*x155)));
evalcond[3]=(((cj3*x153))+new_r01+((sj3*x154)));
evalcond[4]=((((-1.0)*x157))+((new_r10*sj3))+((cj3*new_r00)));
evalcond[5]=((((-1.0)*x158))+x156+new_r00);
evalcond[6]=((((-1.0)*x158))+x156+new_r11);
evalcond[7]=((((-1.0)*x153*x155))+(((-1.0)*sj3*x157))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x160 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x160.valid){
continue;
}
IkReal x159=x160.value;
j3array[0]=((-1.0)*x159);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x159)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x161=((1.0)*sj3);
if( IKabs(((((-1.0)*new_r00*x161))+((cj3*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x161)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x161))+((cj3*new_r01))))+IKsqr(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x161))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*new_r00*x161))+((cj3*new_r01))), ((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x161))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x162=IKcos(j5);
IkReal x163=IKsin(j5);
IkReal x164=((1.0)*cj3);
IkReal x165=(sj3*x162);
IkReal x166=((1.0)*x163);
IkReal x167=(x163*x164);
evalcond[0]=(((new_r10*sj3))+x162+((cj3*new_r00)));
evalcond[1]=(((new_r00*sj3))+(((-1.0)*new_r10*x164))+x163);
evalcond[2]=(((new_r01*sj3))+(((-1.0)*new_r11*x164))+x162);
evalcond[3]=((((-1.0)*x166))+((new_r11*sj3))+((cj3*new_r01)));
evalcond[4]=(((sj3*x163))+((cj3*x162))+new_r00);
evalcond[5]=((((-1.0)*x167))+x165+new_r01);
evalcond[6]=((((-1.0)*x167))+x165+new_r10);
evalcond[7]=((((-1.0)*x162*x164))+new_r11+(((-1.0)*sj3*x166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x169=IKPowWithIntegerCheck(sj4,-1);
if(!x169.valid){
continue;
}
IkReal x168=x169.value;
CheckValue<IkReal> x170=IKPowWithIntegerCheck(new_r12,-1);
if(!x170.valid){
continue;
}
if( IKabs((x168*(x170.value)*(((-1.0)+(new_r02*new_r02)+(cj4*cj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r02*x168)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x168*(x170.value)*(((-1.0)+(new_r02*new_r02)+(cj4*cj4)))))+IKsqr(((-1.0)*new_r02*x168))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x168*(x170.value)*(((-1.0)+(new_r02*new_r02)+(cj4*cj4)))), ((-1.0)*new_r02*x168));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x171=IKcos(j3);
IkReal x172=IKsin(j3);
IkReal x173=((1.0)*cj4);
IkReal x174=(new_r02*x171);
IkReal x175=(sj4*x172);
IkReal x176=(sj4*x171);
IkReal x177=(new_r12*x172);
evalcond[0]=(x176+new_r02);
evalcond[1]=(x175+new_r12);
evalcond[2]=((((-1.0)*new_r02*x172))+((new_r12*x171)));
evalcond[3]=(sj4+x174+x177);
evalcond[4]=(((cj4*x174))+((cj4*x177))+((new_r22*sj4)));
evalcond[5]=(((new_r00*x176))+((new_r10*x175))+(((-1.0)*new_r20*x173)));
evalcond[6]=(((new_r01*x176))+(((-1.0)*new_r21*x173))+((new_r11*x175)));
evalcond[7]=((1.0)+((new_r12*x175))+((sj4*x174))+(((-1.0)*new_r22*x173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x178=((1.0)*cj0);
IkReal x179=(r11*sj0);
IkReal x180=(cj0*r00);
IkReal x181=(r10*sj0);
IkReal x182=(cj0*r01);
IkReal x183=(cj2*sj1);
IkReal x184=((1.0)*cj1);
IkReal x185=(r12*sj0);
IkReal x186=(cj0*r02);
IkReal x187=x117;
IkReal x188=(((cj1*sj2))+x183);
IkReal x189=(sj0*x187);
IkReal x190=x120;
IkReal x191=(cj0*x190);
new_r00=(((x180*x190))+((r20*x187))+((x181*x190)));
new_r01=(((x179*x190))+((r21*x187))+((x182*x190)));
new_r02=(((x186*x190))+((x185*x190))+((r22*x187)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x178)));
new_r11=((((-1.0)*r11*x178))+((r01*sj0)));
new_r12=(((r02*sj0))+(((-1.0)*r12*x178)));
new_r20=(((x180*x187))+((r20*x188))+((x181*x187)));
new_r21=(((x179*x187))+((r21*x188))+((x182*x187)));
new_r22=(((x186*x187))+((x185*x187))+((r22*x188)));
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x192=((1.0)*cj0);
IkReal x193=(r11*sj0);
IkReal x194=(cj0*r00);
IkReal x195=(r10*sj0);
IkReal x196=(cj0*r01);
IkReal x197=(cj2*sj1);
IkReal x198=((1.0)*cj1);
IkReal x199=(r12*sj0);
IkReal x200=(cj0*r02);
IkReal x201=x117;
IkReal x202=(((cj1*sj2))+x197);
IkReal x203=(sj0*x201);
IkReal x204=x120;
IkReal x205=(cj0*x204);
new_r00=(((x194*x204))+((x195*x204))+((r20*x201)));
new_r01=(((x196*x204))+((r21*x201))+((x193*x204)));
new_r02=(((r22*x201))+((x200*x204))+((x199*x204)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x192)));
new_r11=(((r01*sj0))+(((-1.0)*r11*x192)));
new_r12=((((-1.0)*r12*x192))+((r02*sj0)));
new_r20=(((x194*x201))+((x195*x201))+((r20*x202)));
new_r21=(((x196*x201))+((r21*x202))+((x193*x201)));
new_r22=(((r22*x202))+((x200*x201))+((x199*x201)));
j5eval[0]=sj4;
j5eval[1]=sj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x206=((1.0)*cj0);
IkReal x207=(r11*sj0);
IkReal x208=(cj0*r00);
IkReal x209=(r10*sj0);
IkReal x210=(cj0*r01);
IkReal x211=(cj2*sj1);
IkReal x212=((1.0)*cj1);
IkReal x213=(r12*sj0);
IkReal x214=(cj0*r02);
IkReal x215=x117;
IkReal x216=(((cj1*sj2))+x211);
IkReal x217=(sj0*x215);
IkReal x218=x120;
IkReal x219=(cj0*x218);
new_r00=(((x208*x218))+((x209*x218))+((r20*x215)));
new_r01=(((r21*x215))+((x210*x218))+((x207*x218)));
new_r02=(((x214*x218))+((x213*x218))+((r22*x215)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x206)));
new_r11=((((-1.0)*r11*x206))+((r01*sj0)));
new_r12=((((-1.0)*r12*x206))+((r02*sj0)));
new_r20=(((x208*x215))+((x209*x215))+((r20*x216)));
new_r21=(((r21*x216))+((x210*x215))+((x207*x215)));
new_r22=(((x214*x215))+((x213*x215))+((r22*x216)));
j5eval[0]=sj4;
j5eval[1]=cj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[10];
bool bgotonextstatement = true;
do
{
IkReal x220=(cj3*new_r12);
IkReal x221=(new_r02*sj3);
IkReal x222=(((new_r12*sj3))+((cj3*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
evalcond[5]=new_r20;
evalcond[6]=(x220+(((-1.0)*x221)));
evalcond[7]=(x221+(((-1.0)*x220)));
evalcond[8]=x222;
evalcond[9]=x222;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x223=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj3*x223))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x223))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x223))+(((-1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x223))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj3*x223))+(((-1.0)*new_r00*sj3))), ((((-1.0)*sj3*x223))+((cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x224=IKsin(j5);
IkReal x225=IKcos(j5);
IkReal x226=((1.0)*cj3);
IkReal x227=(sj3*x224);
IkReal x228=((1.0)*x225);
IkReal x229=(x225*x226);
evalcond[0]=(((new_r11*sj3))+x224+((cj3*new_r01)));
evalcond[1]=((((-1.0)*new_r10*x226))+((new_r00*sj3))+x224);
evalcond[2]=((((-1.0)*new_r11*x226))+((new_r01*sj3))+x225);
evalcond[3]=(((cj3*x224))+((sj3*x225))+new_r01);
evalcond[4]=(((new_r10*sj3))+((cj3*new_r00))+(((-1.0)*x228)));
evalcond[5]=(x227+new_r00+(((-1.0)*x229)));
evalcond[6]=(x227+new_r11+(((-1.0)*x229)));
evalcond[7]=((((-1.0)*x224*x226))+(((-1.0)*sj3*x228))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x230=(cj3*new_r12);
IkReal x231=(new_r12*sj3);
IkReal x232=(new_r02*sj3);
IkReal x233=(cj3*new_r02);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
evalcond[5]=new_r20;
evalcond[6]=(x230+(((-1.0)*x232)));
evalcond[7]=(x232+(((-1.0)*x230)));
evalcond[8]=(x233+x231);
evalcond[9]=((((-1.0)*x231))+(((-1.0)*x233)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x234=((1.0)*sj3);
if( IKabs((((cj3*new_r01))+(((-1.0)*new_r00*x234)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x234)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj3*new_r01))+(((-1.0)*new_r00*x234))))+IKsqr(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x234))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj3*new_r01))+(((-1.0)*new_r00*x234))), ((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x234))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x235=IKcos(j5);
IkReal x236=IKsin(j5);
IkReal x237=((1.0)*cj3);
IkReal x238=(sj3*x235);
IkReal x239=((1.0)*x236);
IkReal x240=(x236*x237);
evalcond[0]=(((new_r10*sj3))+x235+((cj3*new_r00)));
evalcond[1]=(((new_r00*sj3))+x236+(((-1.0)*new_r10*x237)));
evalcond[2]=(((new_r01*sj3))+x235+(((-1.0)*new_r11*x237)));
evalcond[3]=(((new_r11*sj3))+(((-1.0)*x239))+((cj3*new_r01)));
evalcond[4]=(((cj3*x235))+new_r00+((sj3*x236)));
evalcond[5]=(x238+(((-1.0)*x240))+new_r01);
evalcond[6]=(x238+(((-1.0)*x240))+new_r10);
evalcond[7]=((((-1.0)*x235*x237))+(((-1.0)*sj3*x239))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x241=(new_r22+(((-1.0)*cj4)));
IkReal x242=(sj4+new_r12);
IkReal x243=((1.0)*cj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x241;
evalcond[2]=x241;
evalcond[3]=new_r02;
evalcond[4]=x242;
evalcond[5]=x242;
evalcond[6]=(((cj4*new_r12))+((new_r22*sj4)));
evalcond[7]=(((new_r10*sj4))+(((-1.0)*new_r20*x243)));
evalcond[8]=(((new_r11*sj4))+(((-1.0)*new_r21*x243)));
evalcond[9]=((1.0)+((new_r12*sj4))+(((-1.0)*new_r22*x243)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x244=IKcos(j5);
IkReal x245=IKsin(j5);
IkReal x246=((1.0)*new_r12);
IkReal x247=((1.0)*x244);
evalcond[0]=(x245+new_r00);
evalcond[1]=(x244+new_r01);
evalcond[2]=(((new_r12*x244))+new_r20);
evalcond[3]=(((new_r22*x245))+new_r11);
evalcond[4]=((((-1.0)*x245*x246))+new_r21);
evalcond[5]=((((-1.0)*new_r22*x247))+new_r10);
evalcond[6]=((((-1.0)*new_r21*x246))+x245+((new_r11*new_r22)));
evalcond[7]=((((-1.0)*new_r20*x246))+((new_r10*new_r22))+(((-1.0)*x247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x248=(new_r22+(((-1.0)*cj4)));
IkReal x249=((1.0)*cj4);
IkReal x250=((1.0)*new_r12);
IkReal x251=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x248;
evalcond[2]=x248;
evalcond[3]=new_r02;
evalcond[4]=(new_r12+(((-1.0)*x251)));
evalcond[5]=(sj4+(((-1.0)*x250)));
evalcond[6]=(((new_r22*sj4))+(((-1.0)*new_r12*x249)));
evalcond[7]=((((-1.0)*new_r10*x251))+(((-1.0)*new_r20*x249)));
evalcond[8]=((((-1.0)*new_r11*x251))+(((-1.0)*new_r21*x249)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x249))+(((-1.0)*sj4*x250)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r00, new_r01);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x252=IKsin(j5);
IkReal x253=IKcos(j5);
IkReal x254=((1.0)*new_r11);
IkReal x255=((1.0)*new_r10);
IkReal x256=((1.0)*x253);
evalcond[0]=(((new_r12*x252))+new_r21);
evalcond[1]=(x252+(((-1.0)*new_r00)));
evalcond[2]=(x253+(((-1.0)*new_r01)));
evalcond[3]=(new_r20+(((-1.0)*new_r12*x256)));
evalcond[4]=(((new_r22*x252))+(((-1.0)*x254)));
evalcond[5]=((((-1.0)*new_r22*x256))+(((-1.0)*x255)));
evalcond[6]=(((new_r12*new_r21))+x252+(((-1.0)*new_r22*x254)));
evalcond[7]=(((new_r12*new_r20))+(((-1.0)*new_r22*x255))+(((-1.0)*x256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x257=(new_r22+(((-1.0)*cj4)));
IkReal x258=(sj4+new_r02);
IkReal x259=((1.0)*cj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=x257;
evalcond[2]=x257;
evalcond[3]=x258;
evalcond[4]=new_r12;
evalcond[5]=x258;
evalcond[6]=(((cj4*new_r02))+((new_r22*sj4)));
evalcond[7]=(((new_r00*sj4))+(((-1.0)*new_r20*x259)));
evalcond[8]=((((-1.0)*new_r21*x259))+((new_r01*sj4)));
evalcond[9]=((1.0)+((new_r02*sj4))+(((-1.0)*new_r22*x259)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x260=IKcos(j5);
IkReal x261=IKsin(j5);
IkReal x262=((1.0)*new_r02);
IkReal x263=((1.0)*x260);
evalcond[0]=(new_r20+((new_r02*x260)));
evalcond[1]=(x261+(((-1.0)*new_r10)));
evalcond[2]=(x260+(((-1.0)*new_r11)));
evalcond[3]=(((new_r22*x261))+new_r01);
evalcond[4]=((((-1.0)*x261*x262))+new_r21);
evalcond[5]=((((-1.0)*new_r22*x263))+new_r00);
evalcond[6]=(((new_r01*new_r22))+(((-1.0)*new_r21*x262))+x261);
evalcond[7]=(((new_r00*new_r22))+(((-1.0)*new_r20*x262))+(((-1.0)*x263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x264=(new_r22+(((-1.0)*cj4)));
IkReal x265=((1.0)*cj4);
IkReal x266=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=x264;
evalcond[2]=x264;
evalcond[3]=(new_r02+(((-1.0)*x266)));
evalcond[4]=new_r12;
evalcond[5]=(sj4+(((-1.0)*new_r02)));
evalcond[6]=(((new_r22*sj4))+(((-1.0)*new_r02*x265)));
evalcond[7]=((((-1.0)*new_r00*x266))+(((-1.0)*new_r20*x265)));
evalcond[8]=((((-1.0)*new_r01*x266))+(((-1.0)*new_r21*x265)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x265))+(((-1.0)*new_r02*x266)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x267=IKsin(j5);
IkReal x268=IKcos(j5);
IkReal x269=((1.0)*new_r00);
IkReal x270=((1.0)*new_r01);
IkReal x271=((1.0)*x268);
evalcond[0]=(x267+new_r10);
evalcond[1]=(x268+new_r11);
evalcond[2]=(new_r21+((new_r02*x267)));
evalcond[3]=((((-1.0)*new_r02*x271))+new_r20);
evalcond[4]=(((new_r22*x267))+(((-1.0)*x270)));
evalcond[5]=((((-1.0)*new_r22*x271))+(((-1.0)*x269)));
evalcond[6]=((((-1.0)*new_r22*x270))+x267+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*new_r22*x269))+(((-1.0)*x271))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x273=IKPowWithIntegerCheck(sj4,-1);
if(!x273.valid){
continue;
}
IkReal x272=x273.value;
CheckValue<IkReal> x274=IKPowWithIntegerCheck(cj3,-1);
if(!x274.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x272)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x272*(x274.value)*((((new_r11*sj4))+(((-1.0)*cj4*new_r21*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x272))+IKsqr((x272*(x274.value)*((((new_r11*sj4))+(((-1.0)*cj4*new_r21*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r21*x272), (x272*(x274.value)*((((new_r11*sj4))+(((-1.0)*cj4*new_r21*sj3))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x275=IKsin(j5);
IkReal x276=IKcos(j5);
IkReal x277=(cj3*new_r00);
IkReal x278=(cj3*cj4);
IkReal x279=(cj4*sj3);
IkReal x280=((1.0)*cj3);
IkReal x281=(sj3*x275);
IkReal x282=((1.0)*x276);
evalcond[0]=(new_r21+((sj4*x275)));
evalcond[1]=((((-1.0)*sj4*x282))+new_r20);
evalcond[2]=(((new_r00*sj3))+x275+(((-1.0)*new_r10*x280)));
evalcond[3]=(((new_r01*sj3))+x276+(((-1.0)*new_r11*x280)));
evalcond[4]=(((cj4*x275))+((new_r11*sj3))+((cj3*new_r01)));
evalcond[5]=(((x275*x278))+((sj3*x276))+new_r01);
evalcond[6]=(((new_r10*sj3))+x277+(((-1.0)*cj4*x282)));
evalcond[7]=(x281+new_r00+(((-1.0)*x278*x282)));
evalcond[8]=(((x275*x279))+(((-1.0)*x276*x280))+new_r11);
evalcond[9]=(new_r10+(((-1.0)*x279*x282))+(((-1.0)*x275*x280)));
evalcond[10]=(x275+((new_r01*x278))+((new_r21*sj4))+((new_r11*x279)));
evalcond[11]=(((new_r20*sj4))+((cj4*x277))+(((-1.0)*x282))+((new_r10*x279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x284=IKPowWithIntegerCheck(sj4,-1);
if(!x284.valid){
continue;
}
IkReal x283=x284.value;
CheckValue<IkReal> x285=IKPowWithIntegerCheck(sj3,-1);
if(!x285.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x283)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x283*(x285.value)*(((((-1.0)*new_r01*sj4))+((cj3*cj4*new_r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x283))+IKsqr((x283*(x285.value)*(((((-1.0)*new_r01*sj4))+((cj3*cj4*new_r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r21*x283), (x283*(x285.value)*(((((-1.0)*new_r01*sj4))+((cj3*cj4*new_r21))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x286=IKsin(j5);
IkReal x287=IKcos(j5);
IkReal x288=(cj3*new_r00);
IkReal x289=(cj3*cj4);
IkReal x290=(cj4*sj3);
IkReal x291=((1.0)*cj3);
IkReal x292=(sj3*x286);
IkReal x293=((1.0)*x287);
evalcond[0]=(new_r21+((sj4*x286)));
evalcond[1]=(new_r20+(((-1.0)*sj4*x293)));
evalcond[2]=((((-1.0)*new_r10*x291))+((new_r00*sj3))+x286);
evalcond[3]=((((-1.0)*new_r11*x291))+((new_r01*sj3))+x287);
evalcond[4]=(((new_r11*sj3))+((cj3*new_r01))+((cj4*x286)));
evalcond[5]=(((x286*x289))+((sj3*x287))+new_r01);
evalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x293))+x288);
evalcond[7]=((((-1.0)*x289*x293))+x292+new_r00);
evalcond[8]=(((x286*x290))+(((-1.0)*x287*x291))+new_r11);
evalcond[9]=((((-1.0)*x290*x293))+(((-1.0)*x286*x291))+new_r10);
evalcond[10]=(((new_r11*x290))+x286+((new_r21*sj4))+((new_r01*x289)));
evalcond[11]=(((new_r20*sj4))+(((-1.0)*x293))+((new_r10*x290))+((cj4*x288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x294 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x294.valid){
continue;
}
CheckValue<IkReal> x295=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x295.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x294.value)+(((1.5707963267949)*(x295.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x296=IKsin(j5);
IkReal x297=IKcos(j5);
IkReal x298=(cj3*new_r00);
IkReal x299=(cj3*cj4);
IkReal x300=(cj4*sj3);
IkReal x301=((1.0)*cj3);
IkReal x302=(sj3*x296);
IkReal x303=((1.0)*x297);
evalcond[0]=(((sj4*x296))+new_r21);
evalcond[1]=((((-1.0)*sj4*x303))+new_r20);
evalcond[2]=(((new_r00*sj3))+x296+(((-1.0)*new_r10*x301)));
evalcond[3]=(((new_r01*sj3))+x297+(((-1.0)*new_r11*x301)));
evalcond[4]=(((new_r11*sj3))+((cj4*x296))+((cj3*new_r01)));
evalcond[5]=(((x296*x299))+new_r01+((sj3*x297)));
evalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x303))+x298);
evalcond[7]=(x302+(((-1.0)*x299*x303))+new_r00);
evalcond[8]=((((-1.0)*x297*x301))+((x296*x300))+new_r11);
evalcond[9]=((((-1.0)*x296*x301))+new_r10+(((-1.0)*x300*x303)));
evalcond[10]=(((new_r11*x300))+x296+((new_r01*x299))+((new_r21*sj4)));
evalcond[11]=(((new_r20*sj4))+((new_r10*x300))+((cj4*x298))+(((-1.0)*x303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x304 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x304.valid){
continue;
}
CheckValue<IkReal> x305=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x305.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x304.value)+(((1.5707963267949)*(x305.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=(((sj4*(IKsin(j5))))+new_r21);
evalcond[1]=((((-1.0)*sj4*(IKcos(j5))))+new_r20);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[2];
IkReal x306=((1.0)*cj0);
IkReal x307=(r11*sj0);
IkReal x308=(cj0*r00);
IkReal x309=(r10*sj0);
IkReal x310=(cj0*r01);
IkReal x311=(cj2*sj1);
IkReal x312=((1.0)*cj1);
IkReal x313=(r12*sj0);
IkReal x314=(cj0*r02);
IkReal x315=x117;
IkReal x316=(((cj1*sj2))+x311);
IkReal x317=(sj0*x315);
IkReal x318=x120;
IkReal x319=(cj0*x318);
new_r00=(((r20*x315))+((x308*x318))+((x309*x318)));
new_r01=(((x310*x318))+((x307*x318))+((r21*x315)));
new_r02=(((x314*x318))+((r22*x315))+((x313*x318)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x306)));
new_r11=(((r01*sj0))+(((-1.0)*r11*x306)));
new_r12=(((r02*sj0))+(((-1.0)*r12*x306)));
new_r20=(((r20*x316))+((x308*x315))+((x309*x315)));
new_r21=(((x310*x315))+((x307*x315))+((r21*x316)));
new_r22=(((x314*x315))+((r22*x316))+((x313*x315)));
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x320=((1.0)*cj0);
IkReal x321=(r11*sj0);
IkReal x322=(cj0*r00);
IkReal x323=(r10*sj0);
IkReal x324=(cj0*r01);
IkReal x325=(cj2*sj1);
IkReal x326=((1.0)*cj1);
IkReal x327=(r12*sj0);
IkReal x328=(cj0*r02);
IkReal x329=x117;
IkReal x330=(((cj1*sj2))+x325);
IkReal x331=(sj0*x329);
IkReal x332=x120;
IkReal x333=(cj0*x332);
new_r00=(((r20*x329))+((x323*x332))+((x322*x332)));
new_r01=(((r21*x329))+((x324*x332))+((x321*x332)));
new_r02=(((r22*x329))+((x327*x332))+((x328*x332)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x320)));
new_r11=(((r01*sj0))+(((-1.0)*r11*x320)));
new_r12=((((-1.0)*r12*x320))+((r02*sj0)));
new_r20=(((x322*x329))+((x323*x329))+((r20*x330)));
new_r21=(((r21*x330))+((x324*x329))+((x321*x329)));
new_r22=(((r22*x330))+((x328*x329))+((x327*x329)));
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x334=IKPowWithIntegerCheck(IKsign((((new_r01*new_r12))+(((-1.0)*new_r02*new_r11)))),-1);
if(!x334.valid){
continue;
}
CheckValue<IkReal> x335 = IKatan2WithCheck(IkReal((new_r02*sj5)),((-1.0)*new_r12*sj5),IKFAST_ATAN2_MAGTHRESH);
if(!x335.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x334.value)))+(x335.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x336=IKcos(j3);
IkReal x337=IKsin(j3);
IkReal x338=(sj5*x337);
IkReal x339=(cj5*x337);
IkReal x340=(sj5*x336);
IkReal x341=((1.0)*x336);
IkReal x342=(cj5*x341);
evalcond[0]=(((new_r12*x337))+((new_r02*x336)));
evalcond[1]=(((new_r12*x336))+(((-1.0)*new_r02*x337)));
evalcond[2]=(sj5+((new_r01*x336))+((new_r11*x337)));
evalcond[3]=(x339+x340+new_r01);
evalcond[4]=(sj5+(((-1.0)*new_r10*x341))+((new_r00*x337)));
evalcond[5]=((((-1.0)*new_r11*x341))+cj5+((new_r01*x337)));
evalcond[6]=(x338+new_r00+(((-1.0)*x342)));
evalcond[7]=(x338+new_r11+(((-1.0)*x342)));
evalcond[8]=(((new_r00*x336))+((new_r10*x337))+(((-1.0)*cj5)));
evalcond[9]=((((-1.0)*x339))+new_r10+(((-1.0)*x340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x343 = IKatan2WithCheck(IkReal((cj5*new_r02)),((-1.0)*cj5*new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x343.valid){
continue;
}
CheckValue<IkReal> x344=IKPowWithIntegerCheck(IKsign((((new_r00*new_r12))+(((-1.0)*new_r02*new_r10)))),-1);
if(!x344.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x343.value)+(((1.5707963267949)*(x344.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x345=IKcos(j3);
IkReal x346=IKsin(j3);
IkReal x347=(cj5*x346);
IkReal x348=(cj5*x345);
IkReal x349=((1.0)*x345);
IkReal x350=((1.0)*x346);
IkReal x351=(sj5*x349);
evalcond[0]=(((new_r02*x345))+((new_r12*x346)));
evalcond[1]=(((new_r12*x345))+(((-1.0)*new_r02*x350)));
evalcond[2]=(cj5+((new_r00*x345))+((new_r10*x346)));
evalcond[3]=(((sj5*x346))+x348+new_r00);
evalcond[4]=(sj5+(((-1.0)*new_r10*x349))+((new_r00*x346)));
evalcond[5]=((((-1.0)*new_r11*x349))+cj5+((new_r01*x346)));
evalcond[6]=((((-1.0)*x351))+x347+new_r01);
evalcond[7]=((((-1.0)*x351))+x347+new_r10);
evalcond[8]=((((-1.0)*sj5))+((new_r11*x346))+((new_r01*x345)));
evalcond[9]=(new_r11+(((-1.0)*sj5*x350))+(((-1.0)*x348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x353=IKPowWithIntegerCheck(sj4,-1);
if(!x353.valid){
continue;
}
IkReal x352=x353.value;
CheckValue<IkReal> x354=IKPowWithIntegerCheck(new_r12,-1);
if(!x354.valid){
continue;
}
if( IKabs((x352*(x354.value)*(((-1.0)+(new_r02*new_r02)+(cj4*cj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r02*x352)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x352*(x354.value)*(((-1.0)+(new_r02*new_r02)+(cj4*cj4)))))+IKsqr(((-1.0)*new_r02*x352))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x352*(x354.value)*(((-1.0)+(new_r02*new_r02)+(cj4*cj4)))), ((-1.0)*new_r02*x352));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[18];
IkReal x355=IKcos(j3);
IkReal x356=IKsin(j3);
IkReal x357=((1.0)*cj4);
IkReal x358=((1.0)*cj5);
IkReal x359=(cj4*x355);
IkReal x360=(sj4*x356);
IkReal x361=((1.0)*x355);
IkReal x362=(sj4*x355);
IkReal x363=(cj4*x356);
IkReal x364=(cj5*x356);
evalcond[0]=(x362+new_r02);
evalcond[1]=(x360+new_r12);
evalcond[2]=((((-1.0)*new_r02*x356))+((new_r12*x355)));
evalcond[3]=(sj4+((new_r02*x355))+((new_r12*x356)));
evalcond[4]=(sj5+(((-1.0)*new_r10*x361))+((new_r00*x356)));
evalcond[5]=(((new_r01*x356))+cj5+(((-1.0)*new_r11*x361)));
evalcond[6]=(((sj5*x359))+x364+new_r01);
evalcond[7]=(((new_r01*x355))+((cj4*sj5))+((new_r11*x356)));
evalcond[8]=(((sj5*x356))+(((-1.0)*cj5*x355*x357))+new_r00);
evalcond[9]=(((sj5*x363))+new_r11+(((-1.0)*x355*x358)));
evalcond[10]=((((-1.0)*cj5*x357))+((new_r10*x356))+((new_r00*x355)));
evalcond[11]=((((-1.0)*sj5*x361))+new_r10+(((-1.0)*x357*x364)));
evalcond[12]=(((new_r22*sj4))+((new_r02*x359))+((new_r12*x363)));
evalcond[13]=(((new_r00*x362))+(((-1.0)*new_r20*x357))+((new_r10*x360)));
evalcond[14]=(((new_r01*x362))+(((-1.0)*new_r21*x357))+((new_r11*x360)));
evalcond[15]=(((new_r01*x359))+sj5+((new_r21*sj4))+((new_r11*x363)));
evalcond[16]=((1.0)+(((-1.0)*new_r22*x357))+((new_r02*x362))+((new_r12*x360)));
evalcond[17]=(((new_r20*sj4))+(((-1.0)*x358))+((new_r10*x363))+((new_r00*x359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x365=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x365.valid){
continue;
}
CheckValue<IkReal> x366 = IKatan2WithCheck(IkReal(((-1.0)*new_r12)),((-1.0)*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x366.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x365.value)))+(x366.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[18];
IkReal x367=IKcos(j3);
IkReal x368=IKsin(j3);
IkReal x369=((1.0)*cj4);
IkReal x370=((1.0)*cj5);
IkReal x371=(cj4*x367);
IkReal x372=(sj4*x368);
IkReal x373=((1.0)*x367);
IkReal x374=(sj4*x367);
IkReal x375=(cj4*x368);
IkReal x376=(cj5*x368);
evalcond[0]=(x374+new_r02);
evalcond[1]=(x372+new_r12);
evalcond[2]=((((-1.0)*new_r02*x368))+((new_r12*x367)));
evalcond[3]=(sj4+((new_r02*x367))+((new_r12*x368)));
evalcond[4]=(sj5+((new_r00*x368))+(((-1.0)*new_r10*x373)));
evalcond[5]=(cj5+((new_r01*x368))+(((-1.0)*new_r11*x373)));
evalcond[6]=(x376+((sj5*x371))+new_r01);
evalcond[7]=(((cj4*sj5))+((new_r01*x367))+((new_r11*x368)));
evalcond[8]=(((sj5*x368))+(((-1.0)*cj5*x367*x369))+new_r00);
evalcond[9]=((((-1.0)*x367*x370))+((sj5*x375))+new_r11);
evalcond[10]=((((-1.0)*cj5*x369))+((new_r00*x367))+((new_r10*x368)));
evalcond[11]=((((-1.0)*sj5*x373))+(((-1.0)*x369*x376))+new_r10);
evalcond[12]=(((new_r12*x375))+((new_r22*sj4))+((new_r02*x371)));
evalcond[13]=((((-1.0)*new_r20*x369))+((new_r00*x374))+((new_r10*x372)));
evalcond[14]=(((new_r01*x374))+((new_r11*x372))+(((-1.0)*new_r21*x369)));
evalcond[15]=(sj5+((new_r01*x371))+((new_r21*sj4))+((new_r11*x375)));
evalcond[16]=((1.0)+((new_r12*x372))+(((-1.0)*new_r22*x369))+((new_r02*x374)));
evalcond[17]=(((new_r20*sj4))+(((-1.0)*x370))+((new_r00*x371))+((new_r10*x375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "6781f5b9fb4cec330e08bca0c06f7a43"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
