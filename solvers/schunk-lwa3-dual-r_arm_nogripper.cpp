/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-05-22 19:36:55.068688
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKsin(j[6]);
x11=IKsin(j[5]);
x12=IKcos(j[5]);
x13=IKcos(j[6]);
x14=((0.1825)*x5);
x15=((0.1825)*x8);
x16=((0.2765)*x6);
x17=((0.1825)*x6);
x18=((1.0)*x5);
x19=((1.0)*x6);
x20=((1.0)*x4);
x21=((0.2765)*x0);
x22=((0.1825)*x9);
x23=((1.0)*x12);
x24=((1.0)*x3);
x25=((1.0)*x8);
x26=((0.2765)*x3);
x27=((1.0)*x11);
x28=((1.0)*x9);
x29=(x3*x7);
x30=(x2*x7);
x31=(x1*x2);
x32=(x0*x7);
x33=(x20*x3);
x34=(x18*x32);
x35=(x18*x29);
x36=(x20*x7*x9);
x37=((((-1.0)*x33))+((x0*x31)));
x38=(((x0*x4))+((x3*x31)));
x39=((((-1.0)*x1*x33))+((x0*x2)));
x40=((((-1.0)*x18*x30))+((x1*x6)));
x41=(((x1*x5))+((x30*x6)));
x42=((((-1.0)*x0*x31))+x33);
x43=((((-1.0)*x0*x1*x20))+(((-1.0)*x2*x24)));
x44=((((-1.0)*x0*x20))+(((-1.0)*x24*x31)));
x45=(x41*x8);
x46=(x37*x6);
x47=(x44*x5);
x48=(x43*x9);
x49=((((-1.0)*x34))+x46);
x50=((((-1.0)*x35))+((x38*x6)));
x51=((((-1.0)*x36))+x45);
x52=(((x42*x5))+(((-1.0)*x19*x32)));
x53=((((-1.0)*x19*x29))+x47);
x54=(((x9*(((((-1.0)*x1*x18))+(((-1.0)*x19*x30))))))+(((-1.0)*x20*x7*x8)));
x55=(x50*x8);
x56=(x11*x52);
x57=(x11*x53);
x58=(x55+((x39*x9)));
x59=(((x9*(((((-1.0)*x19*x38))+x35))))+((x39*x8)));
x60=(((x49*x8))+x48);
x61=(x12*x58);
x62=(((x9*(((((-1.0)*x46))+x34))))+((x43*x8)));
eerot[0]=(((x13*((((x12*x60))+x56))))+((x10*x62)));
eerot[1]=(((x13*x62))+((x10*(((((-1.0)*x27*x52))+(((-1.0)*x23*x60)))))));
eerot[2]=(((x12*x52))+((x11*(((((-1.0)*x25*x49))+(((-1.0)*x28*x43)))))));
IkReal x63=((1.0)*x32);
eetrans[0]=((((-0.328)*x32))+(((-1.0)*x16*x63))+((x11*(((((-1.0)*x15*x49))+(((-1.0)*x22*x43))))))+((x12*(((((-1.0)*x17*x63))+((x14*x42))))))+((x5*(((((-1.0)*x21*x31))+((x26*x4)))))));
eerot[3]=(((x13*((x57+x61))))+((x10*x59)));
eerot[4]=(((x13*x59))+((x10*(((((-1.0)*x27*x53))+(((-1.0)*x23*x58)))))));
eerot[5]=(((x12*x53))+((x11*(((((-1.0)*x28*x39))+(((-1.0)*x25*x50)))))));
IkReal x64=((1.0)*x29);
eetrans[1]=((((-1.0)*x16*x64))+((x11*(((((-1.0)*x22*x39))+(((-1.0)*x15*x50))))))+((x5*(((((-1.0)*x21*x4))+(((-1.0)*x26*x31))))))+((x12*(((((-1.0)*x17*x64))+((x14*x44))))))+(((-0.328)*x29)));
eerot[6]=(((x13*((((x12*x51))+((x11*x40))))))+((x10*x54)));
eerot[7]=(((x13*x54))+((x10*(((((-1.0)*x27*x40))+(((-1.0)*x23*x51)))))));
eerot[8]=(((x11*(((((-1.0)*x25*x41))+x36))))+((x12*x40)));
eetrans[2]=((0.3)+((x1*x16))+((x11*(((((-1.0)*x15*x41))+((x22*x4*x7))))))+(((-0.2765)*x30*x5))+(((0.328)*x1))+((x12*((((x1*x17))+(((-1.0)*x14*x30)))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,j10,cj10,sj10,htj10,j10mul,j11,cj11,sj11,htj11,j11mul,j12,cj12,sj12,htj12,j12mul,j13,cj13,sj13,htj13,j13mul,j9,cj9,sj9,htj9,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij7[2], _nj7,_ij8[2], _nj8,_ij10[2], _nj10,_ij11[2], _nj11,_ij12[2], _nj12,_ij13[2], _nj13,_ij9[2], _nj9;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; j10=numeric_limits<IkReal>::quiet_NaN(); _ij10[0] = -1; _ij10[1] = -1; _nj10 = -1; j11=numeric_limits<IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; j13=numeric_limits<IkReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1;  _ij9[0] = -1; _ij9[1] = -1; _nj9 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j9=pfree[0]; cj9=cos(pfree[0]); sj9=sin(pfree[0]), htj9=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.1825)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.1825)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.3)+pz+(((-0.1825)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x65=((1.0)*px);
IkReal x66=((1.0)*pz);
IkReal x67=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x67))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x66)));
rxp0_2=((((-1.0)*r10*x65))+((py*r00)));
rxp1_0=((((-1.0)*r21*x67))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x66)));
rxp1_2=((((-1.0)*r11*x65))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x67)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x66)));
rxp2_2=((((-1.0)*r12*x65))+((py*r02)));
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
cj10array[0]=((-1.01462229303577)+(((5.5131654390685)*pp)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
IkReal j7eval[2];
j7eval[0]=((IKabs(px))+(IKabs(py)));
j7eval[1]=((px*px)+(py*py));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
j8eval[0]=((IKabs((cj9*sj10)))+(((3.61663652802893)*(IKabs(((0.328)+(((0.2765)*cj10))))))));
j8eval[1]=((1.40720515092754)+(cj10*cj10)+(((cj9*cj9)*(sj10*sj10)))+(((2.37251356238698)*cj10)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
IkReal x68=cj9*cj9;
IkReal x69=py*py;
IkReal x70=sj9*sj9;
IkReal x71=px*px;
IkReal x72=cj9*cj9*cj9*cj9;
IkReal x73=py*py*py*py;
IkReal x74=sj9*sj9*sj9*sj9;
IkReal x75=(px*py);
IkReal x76=((2.0)*x70);
IkReal x77=(x68*x69);
IkReal x78=(x69*x71);
j7eval[0]=((IKabs(((((-1.0)*x69*x70))+(((-1.0)*x77)))))+(IKabs((((x68*x75))+((x70*x75))))));
j7eval[1]=(((x68*x73*x76))+((x72*x78))+((x72*x73))+((x73*x74))+((x74*x78))+((x71*x76*x77)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j7, j8]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
IkReal x79=py*py;
IkReal x80=sj9*sj9;
IkReal x81=cj9*cj9;
IkReal x82=(px*py);
IkReal x83=((1.0)*x79);
IkReal x84=(((x81*x82))+((x80*x82)));
IkReal x85=((((-1.0)*x81*x83))+(((-1.0)*x80*x83)));
CheckValue<IkReal> x88 = IKatan2WithCheck(IkReal(x85),x84,IKFAST_ATAN2_MAGTHRESH);
if(!x88.valid){
continue;
}
IkReal x86=((1.0)*(x88.value));
if((((x84*x84)+(x85*x85))) < -0.00001)
continue;
CheckValue<IkReal> x89=IKPowWithIntegerCheck(IKabs(IKsqrt(((x84*x84)+(x85*x85)))),-1);
if(!x89.valid){
continue;
}
if( (((0.2765)*py*sj10*sj9*(x89.value))) < -1-IKFAST_SINCOS_THRESH || (((0.2765)*py*sj10*sj9*(x89.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x87=IKasin(((0.2765)*py*sj10*sj9*(x89.value)));
j7array[0]=(x87+(((-1.0)*x86)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x87))+(((-1.0)*x86)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x90=IKcos(j7);
IkReal x91=sj9*sj9;
IkReal x92=cj9*cj9;
IkReal x93=px*px;
IkReal x94=IKsin(j7);
IkReal x95=((1.0)*px*py);
IkReal x96=((0.2765)*sj10*sj9);
evalcond[0]=((((-1.0)*px*x94))+((py*x90))+x96);
evalcond[1]=(((x90*(((((-1.0)*x91*x95))+(((-1.0)*x92*x95))))))+(((-1.0)*px*x96))+((x94*((((x92*x93))+((x91*x93)))))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
IkReal x97=(cj7*px);
IkReal x98=((1.0)*cj10);
IkReal x99=(py*sj7);
IkReal x100=((2000.0)*pz);
IkReal x101=(cj9*sj10);
IkReal x102=((553.0)*cj10);
j8eval[0]=((((-1.0)*x98*x99))+((pz*x101))+(((-1.18625678119349)*x99))+(((-1.18625678119349)*x97))+(((-1.0)*x97*x98)));
j8eval[1]=IKsign(((((553.0)*pz*x101))+(((-1.0)*x102*x97))+(((-1.0)*x102*x99))+(((-656.0)*x97))+(((-656.0)*x99))));
j8eval[2]=((IKabs(((((181.384)*x101))+(((152.9045)*cj10*x101))+(((-1.0)*x100*x97))+(((-1.0)*x100*x99)))))+(IKabs(((215.168)+(((-1.0)*pz*x100))+(((152.9045)*(cj10*cj10)))+(((362.768)*cj10))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x103=cj10*cj10;
IkReal x104=cj9*cj9;
IkReal x105=(py*sj7);
IkReal x106=((1106000.0)*cj10);
IkReal x107=(cj7*px);
IkReal x108=((1106000.0)*cj9*sj10);
IkReal x109=((305809.0)*x104);
j8eval[0]=((1.40720515092754)+(((-1.0)*x103*x104))+x104+x103+(((2.37251356238698)*cj10)));
j8eval[1]=((IKabs(((((-1.0)*pz*x108))+(((-1312000.0)*x107))+(((-1312000.0)*x105))+(((-1.0)*x106*x107))+(((-1.0)*x105*x106)))))+(IKabs((((pz*x106))+(((-1.0)*x107*x108))+(((1312000.0)*pz))+(((-1.0)*x105*x108))))));
j8eval[2]=IKsign(((430336.0)+(((725536.0)*cj10))+(((305809.0)*x103))+x109+(((-1.0)*x103*x109))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x110=(cj9*sj10);
IkReal x111=(py*sj7);
IkReal x112=(cj7*px);
IkReal x113=(cj10*pz);
j8eval[0]=(((x110*x112))+((x110*x111))+(((1.18625678119349)*pz))+x113);
j8eval[1]=IKsign(((((656.0)*pz))+(((553.0)*x110*x112))+(((553.0)*x110*x111))+(((553.0)*x113))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x114=((0.2765)*sj10);
IkReal x115=(cj7*py);
IkReal x116=(px*sj7);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j9), 6.28318530717959)))))+(IKabs(pz)));
evalcond[1]=((0.18403625)+(((-1.0)*pp))+(((0.181384)*cj10)));
evalcond[2]=(x115+x114+(((-1.0)*x116)));
evalcond[3]=((((-1.0)*x114))+x116+(((-1.0)*x115)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x117=((-1.0)*py);
pz=0;
j9=1.5707963267949;
sj9=1.0;
cj9=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x117);
rxp0_1=(px*r20);
rxp1_0=(r21*x117);
rxp1_1=(px*r21);
rxp2_0=(r22*x117);
rxp2_1=(px*r22);
j8eval[0]=((-1.0)+(((-32.1215479373951)*(px*px)))+(((-32.1215479373951)*(py*py))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x118=((-1.0)*py);
pz=0;
j9=1.5707963267949;
sj9=1.0;
cj9=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x118);
rxp0_1=(px*r20);
rxp1_0=(r21*x118);
rxp1_1=(px*r21);
rxp2_0=(r22*x118);
rxp2_1=(px*r22);
j8eval[0]=(((py*sj7))+((cj7*px)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x120 = ((px*px)+(py*py));
if(IKabs(x120)==0){
continue;
}
IkReal x119=pow(x120,-0.5);
CheckValue<IkReal> x121 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x121.valid){
continue;
}
IkReal gconst0=((-1.0)*(x121.value));
IkReal gconst1=((-1.0)*px*x119);
IkReal gconst2=(py*x119);
IkReal x122=((0.2765)*sj10);
IkReal x123=(gconst2*py);
IkReal x124=(gconst1*px);
CheckValue<IkReal> x125 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x125.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x125.value)+j7)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((-1.0)*(px*px)))+(((0.181384)*cj10))+(((-1.0)*(py*py))));
evalcond[2]=(x122+x123+(((-1.0)*x124)));
evalcond[3]=((((-1.0)*x122))+x124+(((-1.0)*x123)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x126=((-1.0)*py);
CheckValue<IkReal> x130 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x130.valid){
continue;
}
IkReal x127=((-1.0)*(x130.value));
IkReal x128=((px*px)+(py*py));
IkReal x129=x119;
pz=0;
j9=1.5707963267949;
sj9=1.0;
cj9=0;
pp=x128;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x126);
rxp0_1=(px*r20);
rxp1_0=(r21*x126);
rxp1_1=(px*r21);
rxp2_0=(r22*x126);
rxp2_1=(px*r22);
sj7=gconst1;
cj7=gconst2;
j7=x127;
IkReal gconst0=x127;
IkReal gconst1=((-1.0)*px*x129);
IkReal gconst2=(py*x129);
j8eval[0]=((-1.0)+(((-32.1215479373951)*(px*px)))+(((-32.1215479373951)*(py*py))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x131=((-1.0)*py);
CheckValue<IkReal> x135 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x135.valid){
continue;
}
IkReal x132=((-1.0)*(x135.value));
IkReal x133=((px*px)+(py*py));
IkReal x134=x119;
pz=0;
j9=1.5707963267949;
sj9=1.0;
cj9=0;
pp=x133;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x131);
rxp0_1=(px*r20);
rxp1_0=(r21*x131);
rxp1_1=(px*r21);
rxp2_0=(r22*x131);
rxp2_1=(px*r22);
sj7=gconst1;
cj7=gconst2;
j7=x132;
IkReal gconst0=x132;
IkReal gconst1=((-1.0)*px*x134);
IkReal gconst2=(py*x134);
j8eval[0]=0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x138=IKPowWithIntegerCheck((((gconst2*px))+((gconst1*py))),-1);
if(!x138.valid){
continue;
}
IkReal x136=x138.value;
IkReal x137=((1.52439024390244)*x136);
sj8array[0]=((((-0.0474569359756098)*x136))+(((-1.0)*x137*(py*py)))+(((-1.0)*x137*(px*px))));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x139=IKcos(j8);
IkReal x140=px*px;
IkReal x141=IKsin(j8);
IkReal x142=py*py;
IkReal x143=(gconst2*px);
IkReal x144=(gconst1*py);
IkReal x145=((1.52439024390244)*x141);
IkReal x146=((0.656)*x141);
IkReal x147=((1.52439024390244)*x139);
IkReal x148=((1.0)*x139);
evalcond[0]=((((-1.0)*x143*x148))+(((-1.0)*x144*x148)));
evalcond[1]=(((x140*x147))+((x142*x147))+(((0.0474569359756098)*x139)));
evalcond[2]=((-0.03113175)+(((-1.0)*x143*x146))+(((-1.0)*x144*x146))+(((-1.0)*x142))+(((-1.0)*x140)));
evalcond[3]=((((-0.0474569359756098)*x141))+(((-1.0)*x140*x145))+(((-1.0)*x142*x145))+(((-1.0)*x143))+(((-1.0)*x144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x440=IKPowWithIntegerCheck(((-0.0474569359756098)+(((-1.52439024390244)*(px*px)))+(((-1.52439024390244)*(py*py)))),-1);
if(!x440.valid){
continue;
}
IkReal x439=x440.value;
sj8array[0]=(((gconst1*py*x439))+((gconst2*px*x439)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x441=IKcos(j8);
IkReal x442=py*py;
IkReal x443=px*px;
IkReal x444=IKsin(j8);
IkReal x445=((1.52439024390244)*x442);
IkReal x446=((1.52439024390244)*x443);
IkReal x447=((1.0)*x441);
IkReal x448=(gconst2*px*x444);
IkReal x449=(gconst1*py*x444);
evalcond[0]=((((-1.0)*gconst2*px*x447))+(((-1.0)*gconst1*py*x447)));
evalcond[1]=((((0.0474569359756098)*x441))+((x441*x446))+((x441*x445)));
evalcond[2]=((0.0474569359756098)+x449+x448+x445+x446);
evalcond[3]=((-0.03113175)+(((-1.0)*x443))+(((-1.0)*x442))+(((-0.656)*x448))+(((-0.656)*x449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x451 = ((px*px)+(py*py));
if(IKabs(x451)==0){
continue;
}
IkReal x450=pow(x451,-0.5);
CheckValue<IkReal> x452 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x452.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x452.value))));
IkReal gconst4=((1.0)*px*x450);
IkReal gconst5=((-1.0)*py*x450);
IkReal x453=((0.2765)*sj10);
IkReal x454=(gconst4*px);
IkReal x455=(gconst5*py);
CheckValue<IkReal> x456 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x456.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x456.value)+j7)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((-1.0)*(px*px)))+(((0.181384)*cj10))+(((-1.0)*(py*py))));
evalcond[2]=((((-1.0)*x454))+x455+x453);
evalcond[3]=((((-1.0)*x455))+(((-1.0)*x453))+x454);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x461 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x461.valid){
continue;
}
IkReal x457=((1.0)*(x461.value));
IkReal x458=((-1.0)*py);
IkReal x459=((px*px)+(py*py));
IkReal x460=x450;
pz=0;
j9=1.5707963267949;
sj9=1.0;
cj9=0;
pp=x459;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x458);
rxp0_1=(px*r20);
rxp1_0=(r21*x458);
rxp1_1=(px*r21);
rxp2_0=(r22*x458);
rxp2_1=(px*r22);
sj7=gconst4;
cj7=gconst5;
j7=((3.14159265)+(((-1.0)*x457)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x457)));
IkReal gconst4=((1.0)*px*x460);
IkReal gconst5=(x458*x460);
j8eval[0]=((-1.0)+(((-32.1215479373951)*(px*px)))+(((-32.1215479373951)*(py*py))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x466 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x466.valid){
continue;
}
IkReal x462=((1.0)*(x466.value));
IkReal x463=((-1.0)*py);
IkReal x464=((px*px)+(py*py));
IkReal x465=x450;
pz=0;
j9=1.5707963267949;
sj9=1.0;
cj9=0;
pp=x464;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x463);
rxp0_1=(px*r20);
rxp1_0=(r21*x463);
rxp1_1=(px*r21);
rxp2_0=(r22*x463);
rxp2_1=(px*r22);
sj7=gconst4;
cj7=gconst5;
j7=((3.14159265)+(((-1.0)*x462)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x462)));
IkReal gconst4=((1.0)*px*x465);
IkReal gconst5=(x463*x465);
j8eval[0]=0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x469=IKPowWithIntegerCheck((((gconst5*px))+((gconst4*py))),-1);
if(!x469.valid){
continue;
}
IkReal x467=x469.value;
IkReal x468=((1.52439024390244)*x467);
sj8array[0]=((((-1.0)*x468*(py*py)))+(((-0.0474569359756098)*x467))+(((-1.0)*x468*(px*px))));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x470=IKcos(j8);
IkReal x471=px*px;
IkReal x472=py*py;
IkReal x473=IKsin(j8);
IkReal x474=(gconst4*py);
IkReal x475=(gconst5*px);
IkReal x476=((1.52439024390244)*x472);
IkReal x477=((0.656)*x473);
IkReal x478=((1.52439024390244)*x471);
IkReal x479=((1.0)*x470);
evalcond[0]=((((-1.0)*x475*x479))+(((-1.0)*x474*x479)));
evalcond[1]=((((0.0474569359756098)*x470))+((x470*x478))+((x470*x476)));
evalcond[2]=((-0.03113175)+(((-1.0)*x475*x477))+(((-1.0)*x471))+(((-1.0)*x472))+(((-1.0)*x474*x477)));
evalcond[3]=((((-0.0474569359756098)*x473))+(((-1.0)*x473*x478))+(((-1.0)*x473*x476))+(((-1.0)*x475))+(((-1.0)*x474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x481=IKPowWithIntegerCheck(((-0.0474569359756098)+(((-1.52439024390244)*(px*px)))+(((-1.52439024390244)*(py*py)))),-1);
if(!x481.valid){
continue;
}
IkReal x480=x481.value;
sj8array[0]=(((gconst5*px*x480))+((gconst4*py*x480)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x482=IKcos(j8);
IkReal x483=py*py;
IkReal x484=px*px;
IkReal x485=IKsin(j8);
IkReal x486=(gconst4*py);
IkReal x487=((1.52439024390244)*x483);
IkReal x488=((1.52439024390244)*x484);
IkReal x489=((1.0)*x482);
IkReal x490=(gconst5*px*x485);
evalcond[0]=((((-1.0)*x486*x489))+(((-1.0)*gconst5*px*x489)));
evalcond[1]=((((0.0474569359756098)*x482))+((x482*x488))+((x482*x487)));
evalcond[2]=((0.0474569359756098)+((x485*x486))+x488+x487+x490);
evalcond[3]=((-0.03113175)+(((-1.0)*x484))+(((-1.0)*x483))+(((-0.656)*x485*x486))+(((-0.656)*x490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x493=IKPowWithIntegerCheck((((py*sj7))+((cj7*px))),-1);
if(!x493.valid){
continue;
}
IkReal x491=x493.value;
IkReal x492=((1.52439024390244)*x491);
sj8array[0]=((((-0.0474569359756098)*x491))+(((-1.0)*x492*(px*px)))+(((-1.0)*x492*(py*py))));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x494=IKcos(j8);
IkReal x495=IKsin(j8);
IkReal x496=px*px;
IkReal x497=py*py;
IkReal x498=(py*sj7);
IkReal x499=(cj7*px);
IkReal x500=((1.0)*x494);
IkReal x501=((1.52439024390244)*x495);
IkReal x502=((1.52439024390244)*x494);
IkReal x503=((0.656)*x495);
evalcond[0]=((((-1.0)*x499*x500))+(((-1.0)*x498*x500)));
evalcond[1]=(((x497*x502))+((x496*x502))+(((0.0474569359756098)*x494)));
evalcond[2]=((-0.03113175)+(((-1.0)*x499*x503))+(((-1.0)*x497))+(((-1.0)*x496))+(((-1.0)*x498*x503)));
evalcond[3]=((((-0.0474569359756098)*x495))+(((-1.0)*x497*x501))+(((-1.0)*x496*x501))+(((-1.0)*x498))+(((-1.0)*x499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x505=IKPowWithIntegerCheck(((-0.0474569359756098)+(((-1.52439024390244)*(px*px)))+(((-1.52439024390244)*(py*py)))),-1);
if(!x505.valid){
continue;
}
IkReal x504=x505.value;
sj8array[0]=(((cj7*px*x504))+((py*sj7*x504)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x506=IKcos(j8);
IkReal x507=py*py;
IkReal x508=px*px;
IkReal x509=IKsin(j8);
IkReal x510=(py*sj7);
IkReal x511=(cj7*px);
IkReal x512=((1.52439024390244)*x507);
IkReal x513=((1.0)*x506);
IkReal x514=((1.52439024390244)*x508);
IkReal x515=((0.656)*x509);
evalcond[0]=((((-1.0)*x511*x513))+(((-1.0)*x510*x513)));
evalcond[1]=((((0.0474569359756098)*x506))+((x506*x514))+((x506*x512)));
evalcond[2]=((0.0474569359756098)+x514+x512+((x509*x510))+((x509*x511)));
evalcond[3]=((-0.03113175)+(((-1.0)*x511*x515))+(((-1.0)*x507))+(((-1.0)*x508))+(((-1.0)*x510*x515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x516=((((-0.2765)*sj10))+(((-1.0)*px*sj7))+((cj7*py)));
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j9), 6.28318530717959))))));
evalcond[1]=((0.18403625)+(((-1.0)*pp))+(((0.181384)*cj10)));
evalcond[2]=x516;
evalcond[3]=x516;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x517=((-1.0)*py);
pz=0;
j9=-1.5707963267949;
sj9=-1.0;
cj9=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x517);
rxp0_1=(px*r20);
rxp1_0=(r21*x517);
rxp1_1=(px*r21);
rxp2_0=(r22*x517);
rxp2_1=(px*r22);
j8eval[0]=((-1.0)+(((-32.1215479373951)*(px*px)))+(((-32.1215479373951)*(py*py))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x518=((-1.0)*py);
pz=0;
j9=-1.5707963267949;
sj9=-1.0;
cj9=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x518);
rxp0_1=(px*r20);
rxp1_0=(r21*x518);
rxp1_1=(px*r21);
rxp2_0=(r22*x518);
rxp2_1=(px*r22);
j8eval[0]=(((py*sj7))+((cj7*px)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x520 = ((px*px)+(py*py));
if(IKabs(x520)==0){
continue;
}
IkReal x519=pow(x520,-0.5);
CheckValue<IkReal> x521 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x521.valid){
continue;
}
IkReal gconst6=((-1.0)*(x521.value));
IkReal gconst7=((-1.0)*px*x519);
IkReal gconst8=(py*x519);
IkReal x522=(((gconst8*py))+(((-0.2765)*sj10))+(((-1.0)*gconst7*px)));
CheckValue<IkReal> x523 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x523.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x523.value)+j7)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((-1.0)*(px*px)))+(((0.181384)*cj10))+(((-1.0)*(py*py))));
evalcond[2]=x522;
evalcond[3]=x522;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x524=((-1.0)*py);
CheckValue<IkReal> x528 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x528.valid){
continue;
}
IkReal x525=((-1.0)*(x528.value));
IkReal x526=((px*px)+(py*py));
IkReal x527=x519;
pz=0;
j9=-1.5707963267949;
sj9=-1.0;
cj9=0;
pp=x526;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x524);
rxp0_1=(px*r20);
rxp1_0=(r21*x524);
rxp1_1=(px*r21);
rxp2_0=(r22*x524);
rxp2_1=(px*r22);
sj7=gconst7;
cj7=gconst8;
j7=x525;
IkReal gconst6=x525;
IkReal gconst7=((-1.0)*px*x527);
IkReal gconst8=(py*x527);
j8eval[0]=((-1.0)+(((-32.1215479373951)*(px*px)))+(((-32.1215479373951)*(py*py))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x529=((-1.0)*py);
CheckValue<IkReal> x533 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x533.valid){
continue;
}
IkReal x530=((-1.0)*(x533.value));
IkReal x531=((px*px)+(py*py));
IkReal x532=x519;
pz=0;
j9=-1.5707963267949;
sj9=-1.0;
cj9=0;
pp=x531;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x529);
rxp0_1=(px*r20);
rxp1_0=(r21*x529);
rxp1_1=(px*r21);
rxp2_0=(r22*x529);
rxp2_1=(px*r22);
sj7=gconst7;
cj7=gconst8;
j7=x530;
IkReal gconst6=x530;
IkReal gconst7=((-1.0)*px*x532);
IkReal gconst8=(py*x532);
j8eval[0]=0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x536=IKPowWithIntegerCheck((((gconst8*px))+((gconst7*py))),-1);
if(!x536.valid){
continue;
}
IkReal x534=x536.value;
IkReal x535=((1.52439024390244)*x534);
sj8array[0]=((((-0.0474569359756098)*x534))+(((-1.0)*x535*(py*py)))+(((-1.0)*x535*(px*px))));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x537=IKcos(j8);
IkReal x538=px*px;
IkReal x539=py*py;
IkReal x540=IKsin(j8);
IkReal x541=(gconst7*py);
IkReal x542=(gconst8*px);
IkReal x543=((1.52439024390244)*x538);
IkReal x544=((1.52439024390244)*x539);
IkReal x545=((0.656)*x540);
evalcond[0]=(((x537*x542))+((x537*x541)));
evalcond[1]=((((0.0474569359756098)*x537))+((x537*x544))+((x537*x543)));
evalcond[2]=((-0.03113175)+(((-1.0)*x541*x545))+(((-1.0)*x542*x545))+(((-1.0)*x539))+(((-1.0)*x538)));
evalcond[3]=((((-1.0)*x541))+(((-1.0)*x542))+(((-1.0)*x540*x544))+(((-1.0)*x540*x543))+(((-0.0474569359756098)*x540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x547=IKPowWithIntegerCheck(((-0.0474569359756098)+(((-1.52439024390244)*(px*px)))+(((-1.52439024390244)*(py*py)))),-1);
if(!x547.valid){
continue;
}
IkReal x546=x547.value;
sj8array[0]=(((gconst7*py*x546))+((gconst8*px*x546)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x548=IKcos(j8);
IkReal x549=py*py;
IkReal x550=px*px;
IkReal x551=IKsin(j8);
IkReal x552=(gconst8*px);
IkReal x553=(gconst7*py);
IkReal x554=((1.52439024390244)*x549);
IkReal x555=((1.52439024390244)*x550);
IkReal x556=((0.656)*x551);
evalcond[0]=(((x548*x552))+((x548*x553)));
evalcond[1]=(((x548*x555))+((x548*x554))+(((0.0474569359756098)*x548)));
evalcond[2]=((0.0474569359756098)+x555+x554+((x551*x553))+((x551*x552)));
evalcond[3]=((-0.03113175)+(((-1.0)*x550))+(((-1.0)*x549))+(((-1.0)*x553*x556))+(((-1.0)*x552*x556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x558 = ((px*px)+(py*py));
if(IKabs(x558)==0){
continue;
}
IkReal x557=pow(x558,-0.5);
CheckValue<IkReal> x559 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x559.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x559.value))));
IkReal gconst10=((1.0)*px*x557);
IkReal gconst11=((-1.0)*py*x557);
IkReal x560=((((-0.2765)*sj10))+(((-1.0)*gconst10*px))+((gconst11*py)));
CheckValue<IkReal> x561 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x561.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x561.value)+j7)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((-1.0)*(px*px)))+(((0.181384)*cj10))+(((-1.0)*(py*py))));
evalcond[2]=x560;
evalcond[3]=x560;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x566 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x566.valid){
continue;
}
IkReal x562=((1.0)*(x566.value));
IkReal x563=((-1.0)*py);
IkReal x564=((px*px)+(py*py));
IkReal x565=x557;
pz=0;
j9=-1.5707963267949;
sj9=-1.0;
cj9=0;
pp=x564;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x563);
rxp0_1=(px*r20);
rxp1_0=(r21*x563);
rxp1_1=(px*r21);
rxp2_0=(r22*x563);
rxp2_1=(px*r22);
sj7=gconst10;
cj7=gconst11;
j7=((3.14159265)+(((-1.0)*x562)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x562)));
IkReal gconst10=((1.0)*px*x565);
IkReal gconst11=(x563*x565);
j8eval[0]=((-1.0)+(((-32.1215479373951)*(px*px)))+(((-32.1215479373951)*(py*py))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x571 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x571.valid){
continue;
}
IkReal x567=((1.0)*(x571.value));
IkReal x568=((-1.0)*py);
IkReal x569=((px*px)+(py*py));
IkReal x570=x557;
pz=0;
j9=-1.5707963267949;
sj9=-1.0;
cj9=0;
pp=x569;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x568);
rxp0_1=(px*r20);
rxp1_0=(r21*x568);
rxp1_1=(px*r21);
rxp2_0=(r22*x568);
rxp2_1=(px*r22);
sj7=gconst10;
cj7=gconst11;
j7=((3.14159265)+(((-1.0)*x567)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x567)));
IkReal gconst10=((1.0)*px*x570);
IkReal gconst11=(x568*x570);
j8eval[0]=0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x574=IKPowWithIntegerCheck((((gconst10*py))+((gconst11*px))),-1);
if(!x574.valid){
continue;
}
IkReal x572=x574.value;
IkReal x573=((1.52439024390244)*x572);
sj8array[0]=((((-0.0474569359756098)*x572))+(((-1.0)*x573*(px*px)))+(((-1.0)*x573*(py*py))));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x575=IKcos(j8);
IkReal x576=px*px;
IkReal x577=py*py;
IkReal x578=IKsin(j8);
IkReal x579=(gconst10*py);
IkReal x580=(gconst11*px);
IkReal x581=((1.52439024390244)*x578);
IkReal x582=((0.656)*x578);
IkReal x583=((1.52439024390244)*x575);
evalcond[0]=(((x575*x579))+((x575*x580)));
evalcond[1]=(((x577*x583))+(((0.0474569359756098)*x575))+((x576*x583)));
evalcond[2]=((-0.03113175)+(((-1.0)*x580*x582))+(((-1.0)*x579*x582))+(((-1.0)*x576))+(((-1.0)*x577)));
evalcond[3]=((((-1.0)*x580))+(((-0.0474569359756098)*x578))+(((-1.0)*x577*x581))+(((-1.0)*x579))+(((-1.0)*x576*x581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x585=IKPowWithIntegerCheck(((-0.0474569359756098)+(((-1.52439024390244)*(px*px)))+(((-1.52439024390244)*(py*py)))),-1);
if(!x585.valid){
continue;
}
IkReal x584=x585.value;
sj8array[0]=(((gconst11*px*x584))+((gconst10*py*x584)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x586=IKcos(j8);
IkReal x587=py*py;
IkReal x588=px*px;
IkReal x589=IKsin(j8);
IkReal x590=(gconst10*py);
IkReal x591=(gconst11*px);
IkReal x592=((1.52439024390244)*x587);
IkReal x593=((0.656)*x589);
IkReal x594=((1.52439024390244)*x588);
evalcond[0]=(((x586*x590))+((x586*x591)));
evalcond[1]=((((0.0474569359756098)*x586))+((x586*x592))+((x586*x594)));
evalcond[2]=((0.0474569359756098)+x594+x592+((x589*x590))+((x589*x591)));
evalcond[3]=((-0.03113175)+(((-1.0)*x587))+(((-1.0)*x588))+(((-1.0)*x590*x593))+(((-1.0)*x591*x593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x597=IKPowWithIntegerCheck((((py*sj7))+((cj7*px))),-1);
if(!x597.valid){
continue;
}
IkReal x595=x597.value;
IkReal x596=((1.52439024390244)*x595);
sj8array[0]=((((-1.0)*x596*(py*py)))+(((-1.0)*x596*(px*px)))+(((-0.0474569359756098)*x595)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x598=IKcos(j8);
IkReal x599=IKsin(j8);
IkReal x600=px*px;
IkReal x601=py*py;
IkReal x602=(cj7*px);
IkReal x603=(py*sj7);
IkReal x604=((1.52439024390244)*x599);
IkReal x605=((1.52439024390244)*x598);
IkReal x606=((0.656)*x599);
evalcond[0]=(((x598*x603))+((x598*x602)));
evalcond[1]=((((0.0474569359756098)*x598))+((x601*x605))+((x600*x605)));
evalcond[2]=((-0.03113175)+(((-1.0)*x602*x606))+(((-1.0)*x603*x606))+(((-1.0)*x601))+(((-1.0)*x600)));
evalcond[3]=((((-1.0)*x603))+(((-1.0)*x602))+(((-1.0)*x600*x604))+(((-0.0474569359756098)*x599))+(((-1.0)*x601*x604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x608=IKPowWithIntegerCheck(((-0.0474569359756098)+(((-1.52439024390244)*(px*px)))+(((-1.52439024390244)*(py*py)))),-1);
if(!x608.valid){
continue;
}
IkReal x607=x608.value;
sj8array[0]=(((cj7*px*x607))+((py*sj7*x607)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x609=IKcos(j8);
IkReal x610=py*py;
IkReal x611=px*px;
IkReal x612=IKsin(j8);
IkReal x613=(cj7*px);
IkReal x614=((1.52439024390244)*x610);
IkReal x615=((1.52439024390244)*x611);
IkReal x616=(py*sj7*x612);
evalcond[0]=(((py*sj7*x609))+((x609*x613)));
evalcond[1]=(((x609*x614))+((x609*x615))+(((0.0474569359756098)*x609)));
evalcond[2]=((0.0474569359756098)+((x612*x613))+x614+x615+x616);
evalcond[3]=((-0.03113175)+(((-1.0)*x610))+(((-1.0)*x611))+(((-0.656)*x616))+(((-0.656)*x612*x613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j10), 6.28318530717959)))))+(IKabs(pz)));
evalcond[1]=((0.36542025)+(((-1.0)*pp)));
evalcond[2]=((((-1.0)*px*sj7))+((cj7*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
sj8array[0]=((((-1.65425971877585)*cj7*px))+(((-1.65425971877585)*py*sj7)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x617=IKsin(j8);
IkReal x618=IKcos(j8);
CheckValue<IkReal> x626=IKPowWithIntegerCheck(cj7,-1);
if(!x626.valid){
continue;
}
IkReal x619=x626.value;
IkReal x620=sj7*sj7;
IkReal x621=(x619*x620);
IkReal x622=(py*sj7*x617);
IkReal x623=(cj7*px*x617);
IkReal x624=((1.0)*px*sj9*x618);
IkReal x625=((1.0)*cj9*px*x618);
evalcond[0]=((0.6045)*x618);
evalcond[1]=((0.6045)+x623+x622);
evalcond[2]=((-0.396552)+(((-0.656)*x622))+(((-0.656)*x623)));
evalcond[3]=((((-1.0)*x621*x624))+(((-1.0)*cj7*x624)));
evalcond[4]=((((-1.0)*x621*x625))+(((-1.0)*cj7*x625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j10, 6.28318530717959)))))+(IKabs(pz)));
evalcond[1]=((0.00265225)+(((-1.0)*pp)));
evalcond[2]=((((-1.0)*px*sj7))+((cj7*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
sj8array[0]=((((-19.4174757281553)*py*sj7))+(((-19.4174757281553)*cj7*px)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x627=IKsin(j8);
IkReal x628=IKcos(j8);
CheckValue<IkReal> x636=IKPowWithIntegerCheck(cj7,-1);
if(!x636.valid){
continue;
}
IkReal x629=x636.value;
IkReal x630=sj7*sj7;
IkReal x631=(x629*x630);
IkReal x632=(py*sj7*x627);
IkReal x633=(cj7*px*x627);
IkReal x634=((1.0)*px*sj9*x628);
IkReal x635=((1.0)*cj9*px*x628);
evalcond[0]=((0.0515)*x628);
evalcond[1]=((0.0515)+x632+x633);
evalcond[2]=((-0.033784)+(((-0.656)*x633))+(((-0.656)*x632)));
evalcond[3]=((((-1.0)*x631*x634))+(((-1.0)*cj7*x634)));
evalcond[4]=((((-1.0)*x631*x635))+(((-1.0)*cj7*x635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x637=py*py;
IkReal x638=cj7*cj7;
IkReal x639=(cj9*sj10);
IkReal x640=(py*sj7);
IkReal x641=((2000.0)*pz);
IkReal x642=(cj7*px);
IkReal x643=((2000.0)*x638);
CheckValue<IkReal> x644 = IKatan2WithCheck(IkReal(((((-1.0)*x640*x641))+(((-1.0)*x641*x642))+(((-152.9045)*cj10*x639))+(((-181.384)*x639)))),((215.168)+(((-1.0)*x643*(px*px)))+(((152.9045)*(cj10*cj10)))+((x637*x643))+(((-2000.0)*x637))+(((362.768)*cj10))+(((-4000.0)*x640*x642))),IKFAST_ATAN2_MAGTHRESH);
if(!x644.valid){
continue;
}
CheckValue<IkReal> x645=IKPowWithIntegerCheck(IKsign(((((553.0)*x639*x640))+(((553.0)*x639*x642))+(((553.0)*cj10*pz))+(((656.0)*pz)))),-1);
if(!x645.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x644.value)+(((1.5707963267949)*(x645.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x646=IKcos(j8);
IkReal x647=IKsin(j8);
IkReal x648=((0.2765)*cj10);
IkReal x649=((0.2765)*sj10);
IkReal x650=((1.0)*pz);
IkReal x651=(py*sj7);
IkReal x652=(cj7*py);
IkReal x653=((1.0)*sj9);
IkReal x654=(px*sj7);
IkReal x655=((1.0)*cj7*px);
IkReal x656=(cj9*x647);
IkReal x657=(cj9*x646);
IkReal x658=(cj7*px*x647);
evalcond[0]=((((-1.0)*x650))+(((0.328)*x646))+(((-1.0)*x649*x656))+((x646*x648)));
evalcond[1]=((0.328)+((x647*x651))+(((-1.0)*x646*x650))+x648+x658);
evalcond[2]=((-0.03113175)+(((-0.656)*x647*x651))+(((0.656)*pz*x646))+(((-0.656)*x658))+(((-1.0)*pp)));
evalcond[3]=((((-1.0)*x651))+(((-1.0)*x647*x648))+(((-1.0)*x655))+(((-1.0)*x649*x657))+(((-0.328)*x647)));
evalcond[4]=((((-1.0)*sj9*x647*x650))+(((-1.0)*x646*x651*x653))+(((-1.0)*cj9*x654))+(((-1.0)*cj7*px*x646*x653))+((cj9*x652)));
evalcond[5]=((((-1.0)*x655*x657))+(((-1.0)*x649))+(((-1.0)*x650*x656))+(((-1.0)*x651*x657))+(((-1.0)*x652*x653))+((sj9*x654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x659=cj10*cj10;
IkReal x660=cj9*cj9;
IkReal x661=(py*sj7);
IkReal x662=((1106000.0)*cj10);
IkReal x663=(cj7*px);
IkReal x664=((1106000.0)*cj9*sj10);
IkReal x665=((305809.0)*x660);
CheckValue<IkReal> x666=IKPowWithIntegerCheck(IKsign(((430336.0)+(((-1.0)*x659*x665))+(((725536.0)*cj10))+(((305809.0)*x659))+x665)),-1);
if(!x666.valid){
continue;
}
CheckValue<IkReal> x667 = IKatan2WithCheck(IkReal(((((-1.0)*x662*x663))+(((-1.0)*x661*x662))+(((-1312000.0)*x663))+(((-1312000.0)*x661))+(((-1.0)*pz*x664)))),((((-1.0)*x663*x664))+(((-1.0)*x661*x664))+((pz*x662))+(((1312000.0)*pz))),IKFAST_ATAN2_MAGTHRESH);
if(!x667.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x666.value)))+(x667.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x668=IKcos(j8);
IkReal x669=IKsin(j8);
IkReal x670=((0.2765)*cj10);
IkReal x671=((0.2765)*sj10);
IkReal x672=((1.0)*pz);
IkReal x673=(py*sj7);
IkReal x674=(cj7*py);
IkReal x675=((1.0)*sj9);
IkReal x676=(px*sj7);
IkReal x677=((1.0)*cj7*px);
IkReal x678=(cj9*x669);
IkReal x679=(cj9*x668);
IkReal x680=(cj7*px*x669);
evalcond[0]=(((x668*x670))+(((-1.0)*x671*x678))+(((0.328)*x668))+(((-1.0)*x672)));
evalcond[1]=((0.328)+(((-1.0)*x668*x672))+((x669*x673))+x670+x680);
evalcond[2]=((-0.03113175)+(((0.656)*pz*x668))+(((-1.0)*pp))+(((-0.656)*x669*x673))+(((-0.656)*x680)));
evalcond[3]=((((-1.0)*x669*x670))+(((-1.0)*x673))+(((-0.328)*x669))+(((-1.0)*x671*x679))+(((-1.0)*x677)));
evalcond[4]=((((-1.0)*cj9*x676))+(((-1.0)*sj9*x669*x672))+(((-1.0)*x668*x673*x675))+(((-1.0)*cj7*px*x668*x675))+((cj9*x674)));
evalcond[5]=(((sj9*x676))+(((-1.0)*x673*x679))+(((-1.0)*x672*x678))+(((-1.0)*x674*x675))+(((-1.0)*x677*x679))+(((-1.0)*x671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x681=(cj9*sj10);
IkReal x682=(py*sj7);
IkReal x683=((2000.0)*pz);
IkReal x684=((553.0)*cj10);
IkReal x685=(cj7*px);
CheckValue<IkReal> x686=IKPowWithIntegerCheck(IKsign(((((-656.0)*x685))+(((-656.0)*x682))+(((553.0)*pz*x681))+(((-1.0)*x684*x685))+(((-1.0)*x682*x684)))),-1);
if(!x686.valid){
continue;
}
CheckValue<IkReal> x687 = IKatan2WithCheck(IkReal(((215.168)+(((152.9045)*(cj10*cj10)))+(((362.768)*cj10))+(((-1.0)*pz*x683)))),((((181.384)*x681))+(((152.9045)*cj10*x681))+(((-1.0)*x682*x683))+(((-1.0)*x683*x685))),IKFAST_ATAN2_MAGTHRESH);
if(!x687.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x686.value)))+(x687.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x688=IKcos(j8);
IkReal x689=IKsin(j8);
IkReal x690=((0.2765)*cj10);
IkReal x691=((0.2765)*sj10);
IkReal x692=((1.0)*pz);
IkReal x693=(py*sj7);
IkReal x694=(cj7*py);
IkReal x695=((1.0)*sj9);
IkReal x696=(px*sj7);
IkReal x697=((1.0)*cj7*px);
IkReal x698=(cj9*x689);
IkReal x699=(cj9*x688);
IkReal x700=(cj7*px*x689);
evalcond[0]=(((x688*x690))+(((0.328)*x688))+(((-1.0)*x692))+(((-1.0)*x691*x698)));
evalcond[1]=((0.328)+((x689*x693))+(((-1.0)*x688*x692))+x690+x700);
evalcond[2]=((-0.03113175)+(((-0.656)*x689*x693))+(((-0.656)*x700))+(((-1.0)*pp))+(((0.656)*pz*x688)));
evalcond[3]=((((-0.328)*x689))+(((-1.0)*x697))+(((-1.0)*x689*x690))+(((-1.0)*x691*x699))+(((-1.0)*x693)));
evalcond[4]=((((-1.0)*cj9*x696))+(((-1.0)*cj7*px*x688*x695))+((cj9*x694))+(((-1.0)*sj9*x689*x692))+(((-1.0)*x688*x693*x695)));
evalcond[5]=((((-1.0)*x693*x699))+(((-1.0)*x697*x699))+(((-1.0)*x692*x698))+(((-1.0)*x691))+(((-1.0)*x694*x695))+((sj9*x696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x701=((0.328)+(((0.2765)*cj10)));
CheckValue<IkReal> x704 = IKatan2WithCheck(IkReal(x701),((-0.2765)*cj9*sj10),IKFAST_ATAN2_MAGTHRESH);
if(!x704.valid){
continue;
}
IkReal x702=((1.0)*(x704.value));
if((((x701*x701)+(((0.07645225)*(cj9*cj9)*(sj10*sj10))))) < -0.00001)
continue;
CheckValue<IkReal> x705=IKPowWithIntegerCheck(IKabs(IKsqrt(((x701*x701)+(((0.07645225)*(cj9*cj9)*(sj10*sj10)))))),-1);
if(!x705.valid){
continue;
}
if( ((pz*(x705.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x705.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x703=IKasin((pz*(x705.value)));
j8array[0]=((((-1.0)*x702))+x703);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x703))+(((-1.0)*x702)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IkReal j7eval[3];
IkReal x706=pz*pz;
IkReal x707=((553.0)*py);
IkReal x708=(pp*sj8);
IkReal x709=((553.0)*px);
IkReal x710=(sj10*sj8*sj9);
IkReal x711=(sj8*x706);
IkReal x712=((2000.0)*cj8*pz);
j7eval[0]=((((-1.0)*x711))+x708);
j7eval[1]=IKsign(((((-2000.0)*x711))+(((2000.0)*x708))));
j7eval[2]=((IKabs((((x709*x710))+(((-1.0)*cj10*x707))+(((-656.0)*py))+((py*x712)))))+(IKabs(((((-1.0)*x707*x710))+(((-1.0)*cj10*x709))+((px*x712))+(((-656.0)*px))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x713=pz*pz;
IkReal x714=((82000.0)*sj8);
IkReal x715=((125000.0)*pp);
IkReal x716=((82000.0)*cj8*pz);
IkReal x717=((22673.0)*sj10*sj8*sj9);
j7eval[0]=(((pp*sj8))+(((-1.0)*sj8*x713)));
j7eval[1]=((IKabs(((((-3891.46875)*px))+((px*x716))+(((-1.0)*px*x715))+(((-1.0)*py*x717)))))+(IKabs(((((-3891.46875)*py))+((px*x717))+((py*x716))+(((-1.0)*py*x715))))));
j7eval[2]=IKsign((((pp*x714))+(((-1.0)*x713*x714))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x718=pz*pz;
IkReal x719=(cj8*cj9);
IkReal x720=(py*sj8);
IkReal x721=((553.0)*cj10);
IkReal x722=(px*sj8);
IkReal x723=((553.0)*py*sj10);
IkReal x724=((553.0)*px*sj10);
j7eval[0]=((((-1.0)*x718))+pp);
j7eval[1]=IKsign(((((-2000.0)*x718))+(((2000.0)*pp))));
j7eval[2]=((IKabs(((((-656.0)*x722))+(((-1.0)*sj9*x723))+(((-1.0)*x721*x722))+(((-1.0)*x719*x724)))))+(IKabs(((((-656.0)*x720))+((sj9*x724))+(((-1.0)*x720*x721))+(((-1.0)*x719*x723))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x725=((1.0)*pp);
IkReal x726=((0.328)+(((-1.0)*pz))+(((0.2765)*cj10)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((-1.0)*x725))+(((0.181384)*cj10)));
evalcond[2]=x726;
evalcond[3]=x726;
evalcond[4]=((-0.03113175)+(((-1.0)*x725))+(((0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=0;
cj8=1.0;
j8=0;
IkReal x727=pz*pz;
IkReal x728=(px*sj10);
IkReal x729=((1.0)*py*sj10);
j7eval[0]=((((-1.0)*x727))+pp);
j7eval[1]=IKsign(((((-2000.0)*x727))+(((2000.0)*pp))));
j7eval[2]=((IKabs(((((-1.0)*cj9*x728))+(((-1.0)*sj9*x729)))))+(IKabs((((sj9*x728))+(((-1.0)*cj9*x729))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=0;
cj8=1.0;
j8=0;
IkReal x730=pz*pz;
IkReal x731=cj9*cj9;
IkReal x732=(py*sj10);
IkReal x733=(cj9*pp);
IkReal x734=(cj9*sj9);
IkReal x735=(px*sj10);
IkReal x736=(cj9*x730);
j7eval[0]=((((-1.0)*x733))+x736);
j7eval[1]=IKsign(((((-2000.0)*x733))+(((2000.0)*x736))));
j7eval[2]=((IKabs((((x731*x732))+(((-1.0)*x734*x735)))))+(IKabs((((x731*x735))+((x732*x734))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=0;
cj8=1.0;
j8=0;
IkReal x737=cj9*cj9;
IkReal x738=pz*pz;
IkReal x739=(py*sj10);
IkReal x740=(pp*sj9);
IkReal x741=(px*sj10);
IkReal x742=(cj9*sj10*sj9);
IkReal x743=(sj9*x738);
j7eval[0]=((((-1.0)*x740))+x743);
j7eval[1]=((IKabs((((cj9*sj9*x741))+x739+(((-1.0)*x737*x739)))))+(IKabs((((cj9*sj9*x739))+((x737*x741))+(((-1.0)*x741))))));
j7eval[2]=IKsign(((((2000.0)*x743))+(((-2000.0)*x740))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x744=((1.0)*pp);
IkReal x745=x726;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((0.181384)*cj10))+(((-1.0)*x744)));
evalcond[2]=x745;
evalcond[3]=x745;
evalcond[4]=((-0.03113175)+(((0.656)*pz))+(((-1.0)*x744)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[4];
sj8=0;
cj8=1.0;
j8=0;
sj9=0;
cj9=1.0;
j9=0;
IkReal x746=pz*pz;
j7eval[0]=((((-1.0)*pp))+x746);
j7eval[1]=305809.0;
j7eval[2]=sj10;
j7eval[3]=IKsign(((((2000.0)*x746))+(((-2000.0)*pp))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  || IKabs(j7eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x747=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
evalcond[1]=((0.36542025)+(((-1.0)*x747)));
evalcond[2]=((0.6045)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((0.656)*pz))+(((-1.0)*x747)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=1.0;
j8=0;
sj9=0;
cj9=1.0;
j9=0;
sj10=0;
cj10=1.0;
j10=0;
j7eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x749 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x749.valid){
continue;
}
IkReal x748=x749.value;
j7array[0]=((-1.0)*x748);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x748)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j7))))+(((-1.0)*px*(IKcos(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x750=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
evalcond[1]=((0.00265225)+(((-1.0)*x750)));
evalcond[2]=((0.0515)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((0.656)*pz))+(((-1.0)*x750)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=1.0;
j8=0;
sj9=0;
cj9=1.0;
j9=0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
j7eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x752 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x752.valid){
continue;
}
IkReal x751=x752.value;
j7array[0]=((-1.0)*x751);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x751)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j7))))+(((-1.0)*px*(IKcos(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x753=((553.0)*sj10);
CheckValue<IkReal> x754=IKPowWithIntegerCheck(IKsign(((((2000.0)*(pz*pz)))+(((-2000.0)*pp)))),-1);
if(!x754.valid){
continue;
}
CheckValue<IkReal> x755 = IKatan2WithCheck(IkReal((py*x753)),(px*x753),IKFAST_ATAN2_MAGTHRESH);
if(!x755.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x754.value)))+(x755.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x756=IKcos(j7);
IkReal x757=IKsin(j7);
IkReal x758=((1.0)*px);
evalcond[0]=(((py*x756))+(((-1.0)*x757*x758)));
evalcond[1]=((((-0.2765)*sj10))+(((-1.0)*x756*x758))+(((-1.0)*py*x757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x759=((1.0)*pp);
IkReal x760=x726;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((0.181384)*cj10))+(((-1.0)*x759)));
evalcond[2]=x760;
evalcond[3]=x760;
evalcond[4]=((-0.03113175)+(((0.656)*pz))+(((-1.0)*x759)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[4];
sj8=0;
cj8=1.0;
j8=0;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x761=pz*pz;
j7eval[0]=(pp+(((-1.0)*x761)));
j7eval[1]=IKsign(((((-2000.0)*x761))+(((2000.0)*pp))));
j7eval[2]=305809.0;
j7eval[3]=sj10;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  || IKabs(j7eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x762=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
evalcond[1]=((0.36542025)+(((-1.0)*x762)));
evalcond[2]=((0.6045)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-1.0)*x762))+(((0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=1.0;
j8=0;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=0;
cj10=1.0;
j10=0;
j7eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x764 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x764.valid){
continue;
}
IkReal x763=x764.value;
j7array[0]=((-1.0)*x763);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x763)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j7))))+(((-1.0)*px*(IKcos(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x765=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
evalcond[1]=((0.00265225)+(((-1.0)*x765)));
evalcond[2]=((0.0515)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-1.0)*x765))+(((0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=1.0;
j8=0;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
j7eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x767 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x767.valid){
continue;
}
IkReal x766=x767.value;
j7array[0]=((-1.0)*x766);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x766)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j7))))+(((-1.0)*px*(IKcos(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x768=((553.0)*sj10);
CheckValue<IkReal> x769=IKPowWithIntegerCheck(IKsign(((((2000.0)*pp))+(((-2000.0)*(pz*pz))))),-1);
if(!x769.valid){
continue;
}
CheckValue<IkReal> x770 = IKatan2WithCheck(IkReal((py*x768)),(px*x768),IKFAST_ATAN2_MAGTHRESH);
if(!x770.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x769.value)))+(x770.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x771=IKcos(j7);
IkReal x772=IKsin(j7);
IkReal x773=((1.0)*px);
evalcond[0]=((((-1.0)*x772*x773))+((py*x771)));
evalcond[1]=((((-1.0)*py*x772))+(((-1.0)*x771*x773))+(((0.2765)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x774=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
evalcond[1]=((0.36542025)+(((-1.0)*x774)));
evalcond[2]=((0.6045)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-1.0)*x774))+(((0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=1.0;
j8=0;
sj10=0;
cj10=1.0;
j10=0;
j7eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj8=0;
cj8=1.0;
j8=0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x775=((1.0)*px);
j7eval[0]=((IKabs((((cj9*py))+(((-1.0)*sj9*x775)))))+(IKabs(((((-1.0)*py*sj9))+(((-1.0)*cj9*x775))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj8=0;
cj8=1.0;
j8=0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x776=((1.0)*py);
j7eval[0]=((IKabs(((((-1.0)*cj9*px))+(((-1.0)*sj9*x776)))))+(IKabs((((px*sj9))+(((-1.0)*cj9*x776))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
IkReal x777=((1.0)*cj9);
CheckValue<IkReal> x779 = IKatan2WithCheck(IkReal(((((-1.0)*px*x777))+(((-1.0)*py*sj9)))),((((-1.0)*py*x777))+((px*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x779.valid){
continue;
}
IkReal x778=x779.value;
j7array[0]=((-1.0)*x778);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x778)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x780=IKcos(j7);
IkReal x781=IKsin(j7);
IkReal x782=(py*x780);
IkReal x783=((1.0)*px*x781);
IkReal x784=((1.0)*py*x781);
IkReal x785=((1.0)*px*x780);
evalcond[0]=((((-1.0)*x783))+x782);
evalcond[1]=((((-1.0)*x784))+(((-1.0)*x785)));
evalcond[2]=((((-1.0)*sj9*x785))+(((-1.0)*sj9*x784))+((cj9*x782))+(((-1.0)*cj9*x783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
IkReal x786=((1.0)*px);
CheckValue<IkReal> x788 = IKatan2WithCheck(IkReal(((((-1.0)*sj9*x786))+((cj9*py)))),((((-1.0)*cj9*x786))+(((-1.0)*py*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x788.valid){
continue;
}
IkReal x787=x788.value;
j7array[0]=((-1.0)*x787);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x787)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x789=IKcos(j7);
IkReal x790=IKsin(j7);
IkReal x791=((1.0)*px);
IkReal x792=((1.0)*py);
evalcond[0]=(((py*x789))+(((-1.0)*x790*x791)));
evalcond[1]=((((-1.0)*x790*x792))+(((-1.0)*x789*x791)));
evalcond[2]=((((-1.0)*cj9*x790*x792))+(((-1.0)*sj9*x789*x792))+(((-1.0)*cj9*x789*x791))+((px*sj9*x790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x794 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x794.valid){
continue;
}
IkReal x793=x794.value;
j7array[0]=((-1.0)*x793);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x793)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x795=IKcos(j7);
IkReal x796=IKsin(j7);
IkReal x797=(px*sj9);
IkReal x798=((1.0)*cj9*px);
IkReal x799=(py*x795);
IkReal x800=((1.0)*x795);
IkReal x801=((1.0)*py*x796);
evalcond[0]=((((-1.0)*px*x800))+(((-1.0)*x801)));
evalcond[1]=((((-1.0)*x796*x798))+(((-1.0)*x797*x800))+((cj9*x799))+(((-1.0)*sj9*x801)));
evalcond[2]=((((-1.0)*sj9*x799))+(((-1.0)*cj9*x801))+((x796*x797))+(((-1.0)*x795*x798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x802=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
evalcond[1]=((0.00265225)+(((-1.0)*x802)));
evalcond[2]=((0.0515)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-1.0)*x802))+(((0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=1.0;
j8=0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
j7eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj8=0;
cj8=1.0;
j8=0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x803=((1.0)*px);
j7eval[0]=((IKabs((((cj9*py))+(((-1.0)*sj9*x803)))))+(IKabs(((((-1.0)*cj9*x803))+(((-1.0)*py*sj9))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj8=0;
cj8=1.0;
j8=0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x804=((1.0)*py);
j7eval[0]=((IKabs(((((-1.0)*sj9*x804))+(((-1.0)*cj9*px)))))+(IKabs(((((-1.0)*cj9*x804))+((px*sj9))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
IkReal x805=((1.0)*cj9);
CheckValue<IkReal> x807 = IKatan2WithCheck(IkReal(((((-1.0)*px*x805))+(((-1.0)*py*sj9)))),(((px*sj9))+(((-1.0)*py*x805))),IKFAST_ATAN2_MAGTHRESH);
if(!x807.valid){
continue;
}
IkReal x806=x807.value;
j7array[0]=((-1.0)*x806);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x806)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x808=IKcos(j7);
IkReal x809=IKsin(j7);
IkReal x810=(py*x808);
IkReal x811=((1.0)*px*x809);
IkReal x812=((1.0)*py*x809);
IkReal x813=((1.0)*px*x808);
evalcond[0]=((((-1.0)*x811))+x810);
evalcond[1]=((((-1.0)*x813))+(((-1.0)*x812)));
evalcond[2]=(((cj9*x810))+(((-1.0)*cj9*x811))+(((-1.0)*sj9*x813))+(((-1.0)*sj9*x812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
IkReal x814=((1.0)*px);
CheckValue<IkReal> x816 = IKatan2WithCheck(IkReal((((cj9*py))+(((-1.0)*sj9*x814)))),((((-1.0)*py*sj9))+(((-1.0)*cj9*x814))),IKFAST_ATAN2_MAGTHRESH);
if(!x816.valid){
continue;
}
IkReal x815=x816.value;
j7array[0]=((-1.0)*x815);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x815)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x817=IKcos(j7);
IkReal x818=IKsin(j7);
IkReal x819=((1.0)*px);
IkReal x820=((1.0)*py);
evalcond[0]=(((py*x817))+(((-1.0)*x818*x819)));
evalcond[1]=((((-1.0)*x818*x820))+(((-1.0)*x817*x819)));
evalcond[2]=((((-1.0)*cj9*x818*x820))+(((-1.0)*cj9*x817*x819))+((px*sj9*x818))+(((-1.0)*sj9*x817*x820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x822 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x822.valid){
continue;
}
IkReal x821=x822.value;
j7array[0]=((-1.0)*x821);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x821)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x823=IKcos(j7);
IkReal x824=IKsin(j7);
IkReal x825=(px*sj9);
IkReal x826=((1.0)*cj9*px);
IkReal x827=(py*x823);
IkReal x828=((1.0)*x823);
IkReal x829=((1.0)*py*x824);
evalcond[0]=((((-1.0)*x829))+(((-1.0)*px*x828)));
evalcond[1]=((((-1.0)*sj9*x829))+(((-1.0)*x824*x826))+((cj9*x827))+(((-1.0)*x825*x828)));
evalcond[2]=(((x824*x825))+(((-1.0)*x823*x826))+(((-1.0)*sj9*x827))+(((-1.0)*cj9*x829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x830=((1.0)*pp);
IkReal x831=x726;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((0.181384)*cj10))+(((-1.0)*x830)));
evalcond[2]=x831;
evalcond[3]=x831;
evalcond[4]=((-0.03113175)+(((-1.0)*x830))+(((0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[4];
sj8=0;
cj8=1.0;
j8=0;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x832=pz*pz;
j7eval[0]=(pp+(((-1.0)*x832)));
j7eval[1]=IKsign(((((-2000.0)*x832))+(((2000.0)*pp))));
j7eval[2]=305809.0;
j7eval[3]=sj10;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  || IKabs(j7eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x833=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
evalcond[1]=((0.36542025)+(((-1.0)*x833)));
evalcond[2]=((0.6045)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-1.0)*x833))+(((0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=1.0;
j8=0;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
j7eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x835 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x835.valid){
continue;
}
IkReal x834=x835.value;
j7array[0]=((-1.0)*x834);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x834)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j7))))+(((-1.0)*px*(IKcos(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x836=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
evalcond[1]=((0.00265225)+(((-1.0)*x836)));
evalcond[2]=((0.0515)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-1.0)*x836))+(((0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=1.0;
j8=0;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
j7eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x838 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x838.valid){
continue;
}
IkReal x837=x838.value;
j7array[0]=((-1.0)*x837);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x837)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j7))))+(((-1.0)*px*(IKcos(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x839 = IKatan2WithCheck(IkReal(((553.0)*px*sj10)),((-553.0)*py*sj10),IKFAST_ATAN2_MAGTHRESH);
if(!x839.valid){
continue;
}
CheckValue<IkReal> x840=IKPowWithIntegerCheck(IKsign(((((2000.0)*pp))+(((-2000.0)*(pz*pz))))),-1);
if(!x840.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x839.value)+(((1.5707963267949)*(x840.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x841=IKcos(j7);
IkReal x842=IKsin(j7);
IkReal x843=((1.0)*px);
evalcond[0]=((((-1.0)*x841*x843))+(((-1.0)*py*x842)));
evalcond[1]=(((py*x841))+(((-1.0)*x842*x843))+(((0.2765)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x844=((1.0)*pp);
IkReal x845=x726;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((-1.0)*x844))+(((0.181384)*cj10)));
evalcond[2]=x845;
evalcond[3]=x845;
evalcond[4]=((-0.03113175)+(((-1.0)*x844))+(((0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[4];
sj8=0;
cj8=1.0;
j8=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x846=pz*pz;
j7eval[0]=((((-1.0)*pp))+x846);
j7eval[1]=305809.0;
j7eval[2]=sj10;
j7eval[3]=IKsign(((((2000.0)*x846))+(((-2000.0)*pp))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  || IKabs(j7eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x847=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
evalcond[1]=((0.36542025)+(((-1.0)*x847)));
evalcond[2]=((0.6045)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-1.0)*x847))+(((0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=1.0;
j8=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
j7eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x849 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x849.valid){
continue;
}
IkReal x848=x849.value;
j7array[0]=((-1.0)*x848);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x848)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j7))))+(((-1.0)*px*(IKcos(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x850=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
evalcond[1]=((0.00265225)+(((-1.0)*x850)));
evalcond[2]=((0.0515)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-1.0)*x850))+(((0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=1.0;
j8=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
j7eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x852 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x852.valid){
continue;
}
IkReal x851=x852.value;
j7array[0]=((-1.0)*x851);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x851)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j7))))+(((-1.0)*px*(IKcos(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x853 = IKatan2WithCheck(IkReal(((553.0)*px*sj10)),((-553.0)*py*sj10),IKFAST_ATAN2_MAGTHRESH);
if(!x853.valid){
continue;
}
CheckValue<IkReal> x854=IKPowWithIntegerCheck(IKsign(((((2000.0)*(pz*pz)))+(((-2000.0)*pp)))),-1);
if(!x854.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x853.value)+(((1.5707963267949)*(x854.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x855=IKcos(j7);
IkReal x856=IKsin(j7);
IkReal x857=((1.0)*px);
evalcond[0]=((((-1.0)*py*x856))+(((-1.0)*x855*x857)));
evalcond[1]=((((-0.2765)*sj10))+(((-1.0)*x856*x857))+((py*x855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x858=cj9*cj9;
IkReal x859=(cj9*sj9);
IkReal x860=((2000.0)*sj9);
IkReal x861=((553.0)*px*sj10);
IkReal x862=((553.0)*py*sj10);
CheckValue<IkReal> x863 = IKatan2WithCheck(IkReal(((((-1.0)*x861))+((x858*x861))+((x859*x862)))),(((x859*x861))+(((-1.0)*x858*x862))+x862),IKFAST_ATAN2_MAGTHRESH);
if(!x863.valid){
continue;
}
CheckValue<IkReal> x864=IKPowWithIntegerCheck(IKsign((((x860*(pz*pz)))+(((-1.0)*pp*x860)))),-1);
if(!x864.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x863.value)+(((1.5707963267949)*(x864.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x865=IKcos(j7);
IkReal x866=IKsin(j7);
IkReal x867=((1.0)*px);
IkReal x868=((1.0)*py);
IkReal x869=((0.2765)*sj10);
IkReal x870=(cj9*x865);
IkReal x871=(sj9*x865);
IkReal x872=(cj9*x866);
IkReal x873=(sj9*x866);
evalcond[0]=(((sj9*x869))+(((-1.0)*x866*x867))+((py*x865)));
evalcond[1]=((((-1.0)*x865*x867))+(((-1.0)*x866*x868))+(((-1.0)*cj9*x869)));
evalcond[2]=((((-1.0)*x868*x873))+((py*x870))+(((-1.0)*x867*x871))+(((-1.0)*x867*x872)));
evalcond[3]=((((-1.0)*x869))+(((-1.0)*x868*x871))+(((-1.0)*x868*x872))+((px*x873))+(((-1.0)*x867*x870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x874=cj9*cj9;
IkReal x875=(cj9*sj9);
IkReal x876=((2000.0)*cj9);
IkReal x877=((553.0)*px*sj10);
IkReal x878=((553.0)*py*sj10);
CheckValue<IkReal> x879=IKPowWithIntegerCheck(IKsign((((x876*(pz*pz)))+(((-1.0)*pp*x876)))),-1);
if(!x879.valid){
continue;
}
CheckValue<IkReal> x880 = IKatan2WithCheck(IkReal((((x874*x878))+(((-1.0)*x875*x877)))),(((x874*x877))+((x875*x878))),IKFAST_ATAN2_MAGTHRESH);
if(!x880.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x879.value)))+(x880.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x881=IKcos(j7);
IkReal x882=IKsin(j7);
IkReal x883=((1.0)*px);
IkReal x884=((1.0)*py);
IkReal x885=((0.2765)*sj10);
IkReal x886=(cj9*x881);
IkReal x887=(sj9*x881);
IkReal x888=(cj9*x882);
IkReal x889=(sj9*x882);
evalcond[0]=((((-1.0)*x882*x883))+((py*x881))+((sj9*x885)));
evalcond[1]=((((-1.0)*x882*x884))+(((-1.0)*x881*x883))+(((-1.0)*cj9*x885)));
evalcond[2]=((((-1.0)*x883*x888))+(((-1.0)*x883*x887))+((py*x886))+(((-1.0)*x884*x889)));
evalcond[3]=((((-1.0)*x883*x886))+((px*x889))+(((-1.0)*x885))+(((-1.0)*x884*x888))+(((-1.0)*x884*x887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x890=((553.0)*sj10);
CheckValue<IkReal> x891 = IKatan2WithCheck(IkReal((((px*sj9*x890))+(((-1.0)*cj9*py*x890)))),((((-1.0)*py*sj9*x890))+(((-1.0)*cj9*px*x890))),IKFAST_ATAN2_MAGTHRESH);
if(!x891.valid){
continue;
}
CheckValue<IkReal> x892=IKPowWithIntegerCheck(IKsign(((((2000.0)*pp))+(((-2000.0)*(pz*pz))))),-1);
if(!x892.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x891.value)+(((1.5707963267949)*(x892.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x893=IKcos(j7);
IkReal x894=IKsin(j7);
IkReal x895=((1.0)*px);
IkReal x896=((1.0)*py);
IkReal x897=((0.2765)*sj10);
IkReal x898=(cj9*x893);
IkReal x899=(sj9*x893);
IkReal x900=(cj9*x894);
IkReal x901=(sj9*x894);
evalcond[0]=(((py*x893))+((sj9*x897))+(((-1.0)*x894*x895)));
evalcond[1]=((((-1.0)*x894*x896))+(((-1.0)*x893*x895))+(((-1.0)*cj9*x897)));
evalcond[2]=((((-1.0)*x896*x901))+(((-1.0)*x895*x900))+((py*x898))+(((-1.0)*x895*x899)));
evalcond[3]=((((-1.0)*x896*x900))+(((-1.0)*x896*x899))+(((-1.0)*x895*x898))+((px*x901))+(((-1.0)*x897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x902=((0.2765)*cj10);
IkReal x903=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((-1.0)*x903))+(((0.181384)*cj10)));
evalcond[2]=((-0.328)+(((-1.0)*x902))+(((-1.0)*pz)));
evalcond[3]=((0.328)+pz+x902);
evalcond[4]=((-0.03113175)+(((-1.0)*x903))+(((-0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x904=pz*pz;
IkReal x905=(py*sj10);
IkReal x906=(px*sj10);
j7eval[0]=(pp+(((-1.0)*x904)));
j7eval[1]=IKsign(((((-2000.0)*x904))+(((2000.0)*pp))));
j7eval[2]=((IKabs((((cj9*x906))+(((-1.0)*sj9*x905)))))+(IKabs((((cj9*x905))+((sj9*x906))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x907=pz*pz;
IkReal x908=cj9*cj9;
IkReal x909=(cj9*pp);
IkReal x910=(sj10*x908);
IkReal x911=(cj9*sj10*sj9);
IkReal x912=(cj9*x907);
j7eval[0]=((((-1.0)*x912))+x909);
j7eval[1]=IKsign(((((-2000.0)*x912))+(((2000.0)*x909))));
j7eval[2]=((IKabs((((px*x911))+((py*x910)))))+(IKabs((((px*x910))+(((-1.0)*py*x911))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x913=pz*pz;
IkReal x914=cj9*cj9;
IkReal x915=(px*sj10);
IkReal x916=(cj9*sj9);
IkReal x917=(py*sj10);
IkReal x918=(pp*sj9);
IkReal x919=(sj10*x914);
IkReal x920=(sj9*x913);
j7eval[0]=((((-1.0)*x920))+x918);
j7eval[1]=IKsign(((((2000.0)*x918))+(((-2000.0)*x920))));
j7eval[2]=((IKabs((((x916*x917))+x915+(((-1.0)*x914*x915)))))+(IKabs((((x914*x917))+(((-1.0)*x917))+((x915*x916))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x921=((0.2765)*cj10);
IkReal x922=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((-1.0)*x922))+(((0.181384)*cj10)));
evalcond[2]=((-0.328)+(((-1.0)*x921))+(((-1.0)*pz)));
evalcond[3]=((0.328)+pz+x921);
evalcond[4]=((-0.03113175)+(((-1.0)*x922))+(((-0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[4];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=0;
cj9=1.0;
j9=0;
IkReal x923=pz*pz;
j7eval[0]=((((-1.0)*x923))+pp);
j7eval[1]=IKsign(((((-2000.0)*x923))+(((2000.0)*pp))));
j7eval[2]=305809.0;
j7eval[3]=sj10;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  || IKabs(j7eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x924=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
evalcond[1]=((0.36542025)+(((-1.0)*x924)));
evalcond[2]=((-0.6045)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-1.0)*x924))+(((-0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=0;
cj9=1.0;
j9=0;
sj10=0;
cj10=1.0;
j10=0;
j7eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x926 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x926.valid){
continue;
}
IkReal x925=x926.value;
j7array[0]=((-1.0)*x925);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x925)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j7))))+(((-1.0)*px*(IKcos(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x927=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
evalcond[1]=((0.00265225)+(((-1.0)*x927)));
evalcond[2]=((-0.0515)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-1.0)*x927))+(((-0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=0;
cj9=1.0;
j9=0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
j7eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x929 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x929.valid){
continue;
}
IkReal x928=x929.value;
j7array[0]=((-1.0)*x928);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x928)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j7))))+(((-1.0)*px*(IKcos(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x930=((553.0)*sj10);
CheckValue<IkReal> x931 = IKatan2WithCheck(IkReal((py*x930)),(px*x930),IKFAST_ATAN2_MAGTHRESH);
if(!x931.valid){
continue;
}
CheckValue<IkReal> x932=IKPowWithIntegerCheck(IKsign(((((2000.0)*pp))+(((-2000.0)*(pz*pz))))),-1);
if(!x932.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x931.value)+(((1.5707963267949)*(x932.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x933=IKcos(j7);
IkReal x934=IKsin(j7);
IkReal x935=((1.0)*px);
evalcond[0]=((((-1.0)*x934*x935))+((py*x933)));
evalcond[1]=((((-1.0)*py*x934))+(((-1.0)*x933*x935))+(((0.2765)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x936=((0.2765)*cj10);
IkReal x937=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((0.181384)*cj10))+(((-1.0)*x937)));
evalcond[2]=((-0.328)+(((-1.0)*pz))+(((-1.0)*x936)));
evalcond[3]=((0.328)+pz+x936);
evalcond[4]=((-0.03113175)+(((-0.656)*pz))+(((-1.0)*x937)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[4];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x938=pz*pz;
j7eval[0]=((((-1.0)*pp))+x938);
j7eval[1]=305809.0;
j7eval[2]=sj10;
j7eval[3]=IKsign(((((2000.0)*x938))+(((-2000.0)*pp))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  || IKabs(j7eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x939=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
evalcond[1]=((0.36542025)+(((-1.0)*x939)));
evalcond[2]=((-0.6045)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-0.656)*pz))+(((-1.0)*x939)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=0;
cj10=1.0;
j10=0;
j7eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x941 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x941.valid){
continue;
}
IkReal x940=x941.value;
j7array[0]=((-1.0)*x940);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x940)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j7))))+(((-1.0)*px*(IKcos(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x942=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
evalcond[1]=((0.00265225)+(((-1.0)*x942)));
evalcond[2]=((-0.0515)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-1.0)*x942))+(((-0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
j7eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x944 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x944.valid){
continue;
}
IkReal x943=x944.value;
j7array[0]=((-1.0)*x943);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x943)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j7))))+(((-1.0)*px*(IKcos(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x945=((553.0)*sj10);
CheckValue<IkReal> x946 = IKatan2WithCheck(IkReal((py*x945)),(px*x945),IKFAST_ATAN2_MAGTHRESH);
if(!x946.valid){
continue;
}
CheckValue<IkReal> x947=IKPowWithIntegerCheck(IKsign(((((2000.0)*(pz*pz)))+(((-2000.0)*pp)))),-1);
if(!x947.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x946.value)+(((1.5707963267949)*(x947.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x948=IKcos(j7);
IkReal x949=IKsin(j7);
IkReal x950=((1.0)*px);
evalcond[0]=((((-1.0)*x949*x950))+((py*x948)));
evalcond[1]=((((-0.2765)*sj10))+(((-1.0)*py*x949))+(((-1.0)*x948*x950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x951=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
evalcond[1]=((0.36542025)+(((-1.0)*x951)));
evalcond[2]=((-0.6045)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-0.656)*pz))+(((-1.0)*x951)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj10=0;
cj10=1.0;
j10=0;
j7eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj10=0;
cj10=1.0;
j10=0;
j7eval[0]=((IKabs(((((-1.0)*cj9*px))+((py*sj9)))))+(IKabs((((cj9*py))+((px*sj9))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj10=0;
cj10=1.0;
j10=0;
j7eval[0]=((IKabs((((cj9*px))+(((-1.0)*py*sj9)))))+(IKabs((((cj9*py))+((px*sj9))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x953 = IKatan2WithCheck(IkReal((((cj9*px))+(((-1.0)*py*sj9)))),(((cj9*py))+((px*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x953.valid){
continue;
}
IkReal x952=x953.value;
j7array[0]=((-1.0)*x952);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x952)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x954=IKcos(j7);
IkReal x955=IKsin(j7);
IkReal x956=((1.0)*x955);
IkReal x957=(py*x954);
IkReal x958=(px*x954);
evalcond[0]=((((-1.0)*px*x956))+x957);
evalcond[1]=((((-1.0)*py*x956))+(((-1.0)*x958)));
evalcond[2]=(((py*sj9*x955))+((sj9*x958))+((cj9*x957))+(((-1.0)*cj9*px*x956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x960 = IKatan2WithCheck(IkReal((((cj9*py))+((px*sj9)))),((((-1.0)*cj9*px))+((py*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x960.valid){
continue;
}
IkReal x959=x960.value;
j7array[0]=((-1.0)*x959);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x959)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x961=IKcos(j7);
IkReal x962=IKsin(j7);
IkReal x963=(py*x962);
IkReal x964=(px*x962);
IkReal x965=((1.0)*x961);
evalcond[0]=((((-1.0)*x964))+((py*x961)));
evalcond[1]=((((-1.0)*x963))+(((-1.0)*px*x965)));
evalcond[2]=(((cj9*px*x961))+((sj9*x964))+(((-1.0)*py*sj9*x965))+((cj9*x963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x967 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x967.valid){
continue;
}
IkReal x966=x967.value;
j7array[0]=((-1.0)*x966);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x966)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x968=IKcos(j7);
IkReal x969=IKsin(j7);
IkReal x970=(cj9*py);
IkReal x971=(cj9*px);
IkReal x972=(px*sj9);
IkReal x973=(py*sj9);
IkReal x974=((1.0)*x969);
IkReal x975=((1.0)*x968);
evalcond[0]=((((-1.0)*px*x975))+(((-1.0)*py*x974)));
evalcond[1]=(((x969*x973))+(((-1.0)*x971*x974))+((x968*x972))+((x968*x970)));
evalcond[2]=(((x969*x970))+((x969*x972))+((x968*x971))+(((-1.0)*x973*x975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x976=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
evalcond[1]=((0.00265225)+(((-1.0)*x976)));
evalcond[2]=((-0.0515)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-0.656)*pz))+(((-1.0)*x976)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
j7eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
j7eval[0]=((IKabs(((((-1.0)*cj9*px))+((py*sj9)))))+(IKabs((((cj9*py))+((px*sj9))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
j7eval[0]=((IKabs((((cj9*px))+(((-1.0)*py*sj9)))))+(IKabs((((cj9*py))+((px*sj9))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x978 = IKatan2WithCheck(IkReal((((cj9*px))+(((-1.0)*py*sj9)))),(((cj9*py))+((px*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x978.valid){
continue;
}
IkReal x977=x978.value;
j7array[0]=((-1.0)*x977);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x977)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x979=IKcos(j7);
IkReal x980=IKsin(j7);
IkReal x981=((1.0)*x980);
IkReal x982=(py*x979);
IkReal x983=(px*x979);
evalcond[0]=((((-1.0)*px*x981))+x982);
evalcond[1]=((((-1.0)*x983))+(((-1.0)*py*x981)));
evalcond[2]=(((sj9*x983))+((py*sj9*x980))+((cj9*x982))+(((-1.0)*cj9*px*x981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x985 = IKatan2WithCheck(IkReal((((cj9*py))+((px*sj9)))),((((-1.0)*cj9*px))+((py*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x985.valid){
continue;
}
IkReal x984=x985.value;
j7array[0]=((-1.0)*x984);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x984)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x986=IKcos(j7);
IkReal x987=IKsin(j7);
IkReal x988=(py*x987);
IkReal x989=(px*x987);
IkReal x990=((1.0)*x986);
evalcond[0]=((((-1.0)*x989))+((py*x986)));
evalcond[1]=((((-1.0)*px*x990))+(((-1.0)*x988)));
evalcond[2]=(((cj9*px*x986))+((sj9*x989))+(((-1.0)*py*sj9*x990))+((cj9*x988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x992 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x992.valid){
continue;
}
IkReal x991=x992.value;
j7array[0]=((-1.0)*x991);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x991)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x993=IKcos(j7);
IkReal x994=IKsin(j7);
IkReal x995=(cj9*py);
IkReal x996=(cj9*px);
IkReal x997=(px*sj9);
IkReal x998=(py*sj9);
IkReal x999=((1.0)*x994);
IkReal x1000=((1.0)*x993);
evalcond[0]=((((-1.0)*py*x999))+(((-1.0)*px*x1000)));
evalcond[1]=(((x993*x997))+((x993*x995))+((x994*x998))+(((-1.0)*x996*x999)));
evalcond[2]=(((x993*x996))+((x994*x995))+((x994*x997))+(((-1.0)*x1000*x998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1001=((0.2765)*cj10);
IkReal x1002=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((-1.0)*x1002))+(((0.181384)*cj10)));
evalcond[2]=((-0.328)+(((-1.0)*x1001))+(((-1.0)*pz)));
evalcond[3]=((0.328)+x1001+pz);
evalcond[4]=((-0.03113175)+(((-1.0)*x1002))+(((-0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[4];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x1003=pz*pz;
j7eval[0]=((((-1.0)*x1003))+pp);
j7eval[1]=IKsign(((((-2000.0)*x1003))+(((2000.0)*pp))));
j7eval[2]=305809.0;
j7eval[3]=sj10;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  || IKabs(j7eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1004=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
evalcond[1]=((0.36542025)+(((-1.0)*x1004)));
evalcond[2]=((-0.6045)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-1.0)*x1004))+(((-0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
j7eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1006 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x1006.valid){
continue;
}
IkReal x1005=x1006.value;
j7array[0]=((-1.0)*x1005);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x1005)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j7))))+(((-1.0)*px*(IKcos(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1007=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
evalcond[1]=((0.00265225)+(((-1.0)*x1007)));
evalcond[2]=((-0.0515)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-1.0)*x1007))+(((-0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
j7eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1009 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x1009.valid){
continue;
}
IkReal x1008=x1009.value;
j7array[0]=((-1.0)*x1008);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x1008)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j7))))+(((-1.0)*px*(IKcos(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1010 = IKatan2WithCheck(IkReal(((553.0)*px*sj10)),((-553.0)*py*sj10),IKFAST_ATAN2_MAGTHRESH);
if(!x1010.valid){
continue;
}
CheckValue<IkReal> x1011=IKPowWithIntegerCheck(IKsign(((((2000.0)*pp))+(((-2000.0)*(pz*pz))))),-1);
if(!x1011.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1010.value)+(((1.5707963267949)*(x1011.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x1012=IKcos(j7);
IkReal x1013=IKsin(j7);
IkReal x1014=((1.0)*px);
evalcond[0]=((((-1.0)*x1012*x1014))+(((-1.0)*py*x1013)));
evalcond[1]=(((py*x1012))+(((-1.0)*x1013*x1014))+(((0.2765)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1015=((0.2765)*cj10);
IkReal x1016=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((-1.0)*x1016))+(((0.181384)*cj10)));
evalcond[2]=((-0.328)+(((-1.0)*x1015))+(((-1.0)*pz)));
evalcond[3]=((0.328)+x1015+pz);
evalcond[4]=((-0.03113175)+(((-1.0)*x1016))+(((-0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[4];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x1017=pz*pz;
j7eval[0]=(x1017+(((-1.0)*pp)));
j7eval[1]=305809.0;
j7eval[2]=sj10;
j7eval[3]=IKsign(((((2000.0)*x1017))+(((-2000.0)*pp))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  || IKabs(j7eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1018=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
evalcond[1]=((0.36542025)+(((-1.0)*x1018)));
evalcond[2]=((-0.6045)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-1.0)*x1018))+(((-0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
j7eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1020 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x1020.valid){
continue;
}
IkReal x1019=x1020.value;
j7array[0]=((-1.0)*x1019);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x1019)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j7))))+(((-1.0)*px*(IKcos(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1021=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
evalcond[1]=((0.00265225)+(((-1.0)*x1021)));
evalcond[2]=((-0.0515)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-0.656)*pz))+(((-1.0)*x1021)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
j7eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1023 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x1023.valid){
continue;
}
IkReal x1022=x1023.value;
j7array[0]=((-1.0)*x1022);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x1022)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j7))))+(((-1.0)*px*(IKcos(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1024 = IKatan2WithCheck(IkReal(((553.0)*px*sj10)),((-553.0)*py*sj10),IKFAST_ATAN2_MAGTHRESH);
if(!x1024.valid){
continue;
}
CheckValue<IkReal> x1025=IKPowWithIntegerCheck(IKsign(((((2000.0)*(pz*pz)))+(((-2000.0)*pp)))),-1);
if(!x1025.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1024.value)+(((1.5707963267949)*(x1025.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x1026=IKcos(j7);
IkReal x1027=IKsin(j7);
IkReal x1028=((1.0)*px);
evalcond[0]=((((-1.0)*x1026*x1028))+(((-1.0)*py*x1027)));
evalcond[1]=(((py*x1026))+(((-0.2765)*sj10))+(((-1.0)*x1027*x1028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1029=cj9*cj9;
IkReal x1030=(cj9*sj9);
IkReal x1031=((2000.0)*sj9);
IkReal x1032=((553.0)*px*sj10);
IkReal x1033=((553.0)*py*sj10);
CheckValue<IkReal> x1034=IKPowWithIntegerCheck(IKsign((((pp*x1031))+(((-1.0)*x1031*(pz*pz))))),-1);
if(!x1034.valid){
continue;
}
CheckValue<IkReal> x1035 = IKatan2WithCheck(IkReal((((x1030*x1033))+x1032+(((-1.0)*x1029*x1032)))),(((x1030*x1032))+(((-1.0)*x1033))+((x1029*x1033))),IKFAST_ATAN2_MAGTHRESH);
if(!x1035.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1034.value)))+(x1035.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x1036=IKcos(j7);
IkReal x1037=IKsin(j7);
IkReal x1038=(cj9*py);
IkReal x1039=((0.2765)*sj10);
IkReal x1040=(px*x1037);
IkReal x1041=(py*x1037);
IkReal x1042=(px*x1036);
IkReal x1043=(py*x1036);
evalcond[0]=(x1043+(((-1.0)*x1040))+((sj9*x1039)));
evalcond[1]=((((-1.0)*x1042))+(((-1.0)*x1041))+((cj9*x1039)));
evalcond[2]=(((sj9*x1041))+((sj9*x1042))+((x1036*x1038))+(((-1.0)*cj9*x1040)));
evalcond[3]=(((sj9*x1040))+(((-1.0)*x1039))+((cj9*x1042))+((x1037*x1038))+(((-1.0)*sj9*x1043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1044=cj9*cj9;
IkReal x1045=(cj9*sj9);
IkReal x1046=((2000.0)*cj9);
IkReal x1047=((553.0)*px*sj10);
IkReal x1048=((553.0)*py*sj10);
CheckValue<IkReal> x1049=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1046*(pz*pz)))+((pp*x1046)))),-1);
if(!x1049.valid){
continue;
}
CheckValue<IkReal> x1050 = IKatan2WithCheck(IkReal((((x1045*x1047))+((x1044*x1048)))),((((-1.0)*x1045*x1048))+((x1044*x1047))),IKFAST_ATAN2_MAGTHRESH);
if(!x1050.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1049.value)))+(x1050.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x1051=IKcos(j7);
IkReal x1052=IKsin(j7);
IkReal x1053=(cj9*py);
IkReal x1054=((0.2765)*sj10);
IkReal x1055=(px*x1052);
IkReal x1056=(py*x1052);
IkReal x1057=(px*x1051);
IkReal x1058=(py*x1051);
evalcond[0]=(((sj9*x1054))+x1058+(((-1.0)*x1055)));
evalcond[1]=(((cj9*x1054))+(((-1.0)*x1056))+(((-1.0)*x1057)));
evalcond[2]=(((sj9*x1057))+((sj9*x1056))+(((-1.0)*cj9*x1055))+((x1051*x1053)));
evalcond[3]=((((-1.0)*x1054))+((sj9*x1055))+((x1052*x1053))+((cj9*x1057))+(((-1.0)*sj9*x1058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1059=((553.0)*sj10);
CheckValue<IkReal> x1060 = IKatan2WithCheck(IkReal((((px*sj9*x1059))+((cj9*py*x1059)))),((((-1.0)*py*sj9*x1059))+((cj9*px*x1059))),IKFAST_ATAN2_MAGTHRESH);
if(!x1060.valid){
continue;
}
CheckValue<IkReal> x1061=IKPowWithIntegerCheck(IKsign(((((2000.0)*pp))+(((-2000.0)*(pz*pz))))),-1);
if(!x1061.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1060.value)+(((1.5707963267949)*(x1061.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x1062=IKcos(j7);
IkReal x1063=IKsin(j7);
IkReal x1064=(cj9*py);
IkReal x1065=((0.2765)*sj10);
IkReal x1066=(px*x1063);
IkReal x1067=(py*x1063);
IkReal x1068=(px*x1062);
IkReal x1069=(py*x1062);
evalcond[0]=(x1069+((sj9*x1065))+(((-1.0)*x1066)));
evalcond[1]=(((cj9*x1065))+(((-1.0)*x1067))+(((-1.0)*x1068)));
evalcond[2]=((((-1.0)*cj9*x1066))+((sj9*x1068))+((sj9*x1067))+((x1062*x1064)));
evalcond[3]=(((sj9*x1066))+((cj9*x1068))+((x1063*x1064))+(((-1.0)*x1065))+(((-1.0)*sj9*x1069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1070=(cj8*cj9);
IkReal x1071=(py*sj8);
IkReal x1072=((553.0)*cj10);
IkReal x1073=(px*sj8);
IkReal x1074=((553.0)*py*sj10);
IkReal x1075=((553.0)*px*sj10);
CheckValue<IkReal> x1076 = IKatan2WithCheck(IkReal(((((-656.0)*x1071))+((sj9*x1075))+(((-1.0)*x1070*x1074))+(((-1.0)*x1071*x1072)))),((((-1.0)*sj9*x1074))+(((-656.0)*x1073))+(((-1.0)*x1070*x1075))+(((-1.0)*x1072*x1073))),IKFAST_ATAN2_MAGTHRESH);
if(!x1076.valid){
continue;
}
CheckValue<IkReal> x1077=IKPowWithIntegerCheck(IKsign(((((2000.0)*pp))+(((-2000.0)*(pz*pz))))),-1);
if(!x1077.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1076.value)+(((1.5707963267949)*(x1077.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1078=IKcos(j7);
IkReal x1079=IKsin(j7);
IkReal x1080=((0.2765)*cj10);
IkReal x1081=((0.2765)*sj10);
IkReal x1082=(cj8*cj9);
IkReal x1083=((1.0)*cj8);
IkReal x1084=((0.656)*sj8);
IkReal x1085=(sj9*x1079);
IkReal x1086=(py*x1078);
IkReal x1087=(py*x1079);
IkReal x1088=(px*x1078);
IkReal x1089=((1.0)*pz*sj8);
IkReal x1090=((1.0)*px*x1079);
evalcond[0]=(x1086+(((-1.0)*x1090))+((sj9*x1081)));
evalcond[1]=((0.328)+(((-1.0)*pz*x1083))+x1080+((sj8*x1087))+((sj8*x1088)));
evalcond[2]=((-0.03113175)+(((0.656)*cj8*pz))+(((-1.0)*pp))+(((-1.0)*x1084*x1088))+(((-1.0)*x1084*x1087)));
evalcond[3]=((((-0.328)*sj8))+(((-1.0)*x1081*x1082))+(((-1.0)*x1088))+(((-1.0)*x1087))+(((-1.0)*sj8*x1080)));
evalcond[4]=(((cj9*x1086))+(((-1.0)*cj9*x1090))+(((-1.0)*py*x1083*x1085))+(((-1.0)*sj9*x1089))+(((-1.0)*sj9*x1083*x1088)));
evalcond[5]=((((-1.0)*x1082*x1087))+(((-1.0)*x1082*x1088))+((px*x1085))+(((-1.0)*cj9*x1089))+(((-1.0)*sj9*x1086))+(((-1.0)*x1081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1091=((82000.0)*sj8);
IkReal x1092=((125000.0)*pp);
IkReal x1093=((82000.0)*cj8*pz);
IkReal x1094=((22673.0)*sj10*sj8*sj9);
CheckValue<IkReal> x1095 = IKatan2WithCheck(IkReal(((((-1.0)*py*x1092))+(((-3891.46875)*py))+((py*x1093))+((px*x1094)))),((((-1.0)*py*x1094))+(((-3891.46875)*px))+((px*x1093))+(((-1.0)*px*x1092))),IKFAST_ATAN2_MAGTHRESH);
if(!x1095.valid){
continue;
}
CheckValue<IkReal> x1096=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1091*(pz*pz)))+((pp*x1091)))),-1);
if(!x1096.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1095.value)+(((1.5707963267949)*(x1096.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1097=IKcos(j7);
IkReal x1098=IKsin(j7);
IkReal x1099=((0.2765)*cj10);
IkReal x1100=((0.2765)*sj10);
IkReal x1101=(cj8*cj9);
IkReal x1102=((1.0)*cj8);
IkReal x1103=((0.656)*sj8);
IkReal x1104=(sj9*x1098);
IkReal x1105=(py*x1097);
IkReal x1106=(py*x1098);
IkReal x1107=(px*x1097);
IkReal x1108=((1.0)*pz*sj8);
IkReal x1109=((1.0)*px*x1098);
evalcond[0]=(((sj9*x1100))+x1105+(((-1.0)*x1109)));
evalcond[1]=((0.328)+x1099+(((-1.0)*pz*x1102))+((sj8*x1107))+((sj8*x1106)));
evalcond[2]=((-0.03113175)+(((-1.0)*x1103*x1107))+(((-1.0)*x1103*x1106))+(((0.656)*cj8*pz))+(((-1.0)*pp)));
evalcond[3]=((((-0.328)*sj8))+(((-1.0)*x1106))+(((-1.0)*x1107))+(((-1.0)*x1100*x1101))+(((-1.0)*sj8*x1099)));
evalcond[4]=((((-1.0)*py*x1102*x1104))+((cj9*x1105))+(((-1.0)*cj9*x1109))+(((-1.0)*sj9*x1108))+(((-1.0)*sj9*x1102*x1107)));
evalcond[5]=((((-1.0)*cj9*x1108))+(((-1.0)*sj9*x1105))+((px*x1104))+(((-1.0)*x1101*x1106))+(((-1.0)*x1101*x1107))+(((-1.0)*x1100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1110=((553.0)*py);
IkReal x1111=((2000.0)*sj8);
IkReal x1112=((553.0)*px);
IkReal x1113=(sj10*sj8*sj9);
IkReal x1114=((2000.0)*cj8*pz);
CheckValue<IkReal> x1115=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1111*(pz*pz)))+((pp*x1111)))),-1);
if(!x1115.valid){
continue;
}
CheckValue<IkReal> x1116 = IKatan2WithCheck(IkReal((((x1112*x1113))+(((-1.0)*cj10*x1110))+(((-656.0)*py))+((py*x1114)))),((((-1.0)*cj10*x1112))+(((-656.0)*px))+(((-1.0)*x1110*x1113))+((px*x1114))),IKFAST_ATAN2_MAGTHRESH);
if(!x1116.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1115.value)))+(x1116.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1117=IKcos(j7);
IkReal x1118=IKsin(j7);
IkReal x1119=((0.2765)*cj10);
IkReal x1120=((0.2765)*sj10);
IkReal x1121=(cj8*cj9);
IkReal x1122=((1.0)*cj8);
IkReal x1123=((0.656)*sj8);
IkReal x1124=(sj9*x1118);
IkReal x1125=(py*x1117);
IkReal x1126=(py*x1118);
IkReal x1127=(px*x1117);
IkReal x1128=((1.0)*pz*sj8);
IkReal x1129=((1.0)*px*x1118);
evalcond[0]=(x1125+(((-1.0)*x1129))+((sj9*x1120)));
evalcond[1]=((0.328)+x1119+((sj8*x1127))+((sj8*x1126))+(((-1.0)*pz*x1122)));
evalcond[2]=((-0.03113175)+(((0.656)*cj8*pz))+(((-1.0)*x1123*x1127))+(((-1.0)*x1123*x1126))+(((-1.0)*pp)));
evalcond[3]=((((-0.328)*sj8))+(((-1.0)*sj8*x1119))+(((-1.0)*x1126))+(((-1.0)*x1127))+(((-1.0)*x1120*x1121)));
evalcond[4]=((((-1.0)*sj9*x1128))+(((-1.0)*py*x1122*x1124))+(((-1.0)*cj9*x1129))+(((-1.0)*sj9*x1122*x1127))+((cj9*x1125)));
evalcond[5]=((((-1.0)*sj9*x1125))+((px*x1124))+(((-1.0)*cj9*x1128))+(((-1.0)*x1121*x1127))+(((-1.0)*x1121*x1126))+(((-1.0)*x1120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1132 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x1132.valid){
continue;
}
IkReal x1130=((1.0)*(x1132.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x1133=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x1133.valid){
continue;
}
if( (((0.2765)*sj10*sj9*(x1133.value))) < -1-IKFAST_SINCOS_THRESH || (((0.2765)*sj10*sj9*(x1133.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1131=IKasin(((0.2765)*sj10*sj9*(x1133.value)));
j7array[0]=((((-1.0)*x1130))+(((-1.0)*x1131)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+x1131+(((-1.0)*x1130)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
IkReal j8eval[3];
IkReal x1134=(cj7*px);
IkReal x1135=((1.0)*cj10);
IkReal x1136=(py*sj7);
IkReal x1137=((2000.0)*pz);
IkReal x1138=(cj9*sj10);
IkReal x1139=((553.0)*cj10);
j8eval[0]=((((-1.18625678119349)*x1134))+(((-1.18625678119349)*x1136))+((pz*x1138))+(((-1.0)*x1134*x1135))+(((-1.0)*x1135*x1136)));
j8eval[1]=IKsign(((((-656.0)*x1134))+(((-656.0)*x1136))+(((553.0)*pz*x1138))+(((-1.0)*x1134*x1139))+(((-1.0)*x1136*x1139))));
j8eval[2]=((IKabs(((215.168)+(((152.9045)*(cj10*cj10)))+(((-1.0)*pz*x1137))+(((362.768)*cj10)))))+(IKabs(((((-1.0)*x1134*x1137))+(((152.9045)*cj10*x1138))+(((-1.0)*x1136*x1137))+(((181.384)*x1138))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x1140=cj10*cj10;
IkReal x1141=cj9*cj9;
IkReal x1142=(py*sj7);
IkReal x1143=((1106000.0)*cj10);
IkReal x1144=(cj7*px);
IkReal x1145=((1106000.0)*cj9*sj10);
IkReal x1146=((305809.0)*x1141);
j8eval[0]=((1.40720515092754)+x1140+x1141+(((2.37251356238698)*cj10))+(((-1.0)*x1140*x1141)));
j8eval[1]=((IKabs(((((-1.0)*x1143*x1144))+(((-1312000.0)*x1144))+(((-1312000.0)*x1142))+(((-1.0)*x1142*x1143))+(((-1.0)*pz*x1145)))))+(IKabs((((pz*x1143))+(((-1.0)*x1144*x1145))+(((1312000.0)*pz))+(((-1.0)*x1142*x1145))))));
j8eval[2]=IKsign(((430336.0)+(((-1.0)*x1140*x1146))+x1146+(((725536.0)*cj10))+(((305809.0)*x1140))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x1147=(cj9*sj10);
IkReal x1148=(py*sj7);
IkReal x1149=(cj7*px);
IkReal x1150=(cj10*pz);
j8eval[0]=(x1150+(((1.18625678119349)*pz))+((x1147*x1149))+((x1147*x1148)));
j8eval[1]=IKsign(((((553.0)*x1147*x1149))+(((553.0)*x1147*x1148))+(((656.0)*pz))+(((553.0)*x1150))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1151=((0.2765)*sj10);
IkReal x1152=(cj7*py);
IkReal x1153=(px*sj7);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j9), 6.28318530717959)))))+(IKabs(pz)));
evalcond[1]=((0.18403625)+(((-1.0)*pp))+(((0.181384)*cj10)));
evalcond[2]=(x1151+x1152+(((-1.0)*x1153)));
evalcond[3]=(x1153+(((-1.0)*x1151))+(((-1.0)*x1152)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x1154=((-1.0)*py);
pz=0;
j9=1.5707963267949;
sj9=1.0;
cj9=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1154);
rxp0_1=(px*r20);
rxp1_0=(r21*x1154);
rxp1_1=(px*r21);
rxp2_0=(r22*x1154);
rxp2_1=(px*r22);
j8eval[0]=((-1.0)+(((-32.1215479373951)*(px*px)))+(((-32.1215479373951)*(py*py))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x1155=((-1.0)*py);
pz=0;
j9=1.5707963267949;
sj9=1.0;
cj9=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1155);
rxp0_1=(px*r20);
rxp1_0=(r21*x1155);
rxp1_1=(px*r21);
rxp2_0=(r22*x1155);
rxp2_1=(px*r22);
j8eval[0]=(((py*sj7))+((cj7*px)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1157 = ((px*px)+(py*py));
if(IKabs(x1157)==0){
continue;
}
IkReal x1156=pow(x1157,-0.5);
CheckValue<IkReal> x1158 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1158.valid){
continue;
}
IkReal gconst0=((-1.0)*(x1158.value));
IkReal gconst1=((-1.0)*px*x1156);
IkReal gconst2=(py*x1156);
IkReal x1159=((0.2765)*sj10);
IkReal x1160=(gconst2*py);
IkReal x1161=(gconst1*px);
CheckValue<IkReal> x1162 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1162.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1162.value)+j7)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((-1.0)*(px*px)))+(((0.181384)*cj10))+(((-1.0)*(py*py))));
evalcond[2]=(x1159+x1160+(((-1.0)*x1161)));
evalcond[3]=(x1161+(((-1.0)*x1159))+(((-1.0)*x1160)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x1163=((-1.0)*py);
CheckValue<IkReal> x1167 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1167.valid){
continue;
}
IkReal x1164=((-1.0)*(x1167.value));
IkReal x1165=((px*px)+(py*py));
IkReal x1166=x1156;
pz=0;
j9=1.5707963267949;
sj9=1.0;
cj9=0;
pp=x1165;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1163);
rxp0_1=(px*r20);
rxp1_0=(r21*x1163);
rxp1_1=(px*r21);
rxp2_0=(r22*x1163);
rxp2_1=(px*r22);
sj7=gconst1;
cj7=gconst2;
j7=x1164;
IkReal gconst0=x1164;
IkReal gconst1=((-1.0)*px*x1166);
IkReal gconst2=(py*x1166);
j8eval[0]=((-1.0)+(((-32.1215479373951)*(px*px)))+(((-32.1215479373951)*(py*py))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x1168=((-1.0)*py);
CheckValue<IkReal> x1172 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1172.valid){
continue;
}
IkReal x1169=((-1.0)*(x1172.value));
IkReal x1170=((px*px)+(py*py));
IkReal x1171=x1156;
pz=0;
j9=1.5707963267949;
sj9=1.0;
cj9=0;
pp=x1170;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1168);
rxp0_1=(px*r20);
rxp1_0=(r21*x1168);
rxp1_1=(px*r21);
rxp2_0=(r22*x1168);
rxp2_1=(px*r22);
sj7=gconst1;
cj7=gconst2;
j7=x1169;
IkReal gconst0=x1169;
IkReal gconst1=((-1.0)*px*x1171);
IkReal gconst2=(py*x1171);
j8eval[0]=0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1175=IKPowWithIntegerCheck((((gconst2*px))+((gconst1*py))),-1);
if(!x1175.valid){
continue;
}
IkReal x1173=x1175.value;
IkReal x1174=((1.52439024390244)*x1173);
sj8array[0]=((((-1.0)*x1174*(py*py)))+(((-0.0474569359756098)*x1173))+(((-1.0)*x1174*(px*px))));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x1176=IKcos(j8);
IkReal x1177=px*px;
IkReal x1178=IKsin(j8);
IkReal x1179=py*py;
IkReal x1180=(gconst2*px);
IkReal x1181=(gconst1*py);
IkReal x1182=((1.52439024390244)*x1178);
IkReal x1183=((0.656)*x1178);
IkReal x1184=((1.52439024390244)*x1176);
IkReal x1185=((1.0)*x1176);
evalcond[0]=((((-1.0)*x1181*x1185))+(((-1.0)*x1180*x1185)));
evalcond[1]=((((0.0474569359756098)*x1176))+((x1179*x1184))+((x1177*x1184)));
evalcond[2]=((-0.03113175)+(((-1.0)*x1181*x1183))+(((-1.0)*x1180*x1183))+(((-1.0)*x1177))+(((-1.0)*x1179)));
evalcond[3]=((((-1.0)*x1179*x1182))+(((-0.0474569359756098)*x1178))+(((-1.0)*x1181))+(((-1.0)*x1180))+(((-1.0)*x1177*x1182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1187=IKPowWithIntegerCheck(((-0.0474569359756098)+(((-1.52439024390244)*(px*px)))+(((-1.52439024390244)*(py*py)))),-1);
if(!x1187.valid){
continue;
}
IkReal x1186=x1187.value;
sj8array[0]=(((gconst2*px*x1186))+((gconst1*py*x1186)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x1188=IKcos(j8);
IkReal x1189=py*py;
IkReal x1190=px*px;
IkReal x1191=IKsin(j8);
IkReal x1192=((1.52439024390244)*x1189);
IkReal x1193=((1.52439024390244)*x1190);
IkReal x1194=((1.0)*x1188);
IkReal x1195=(gconst2*px*x1191);
IkReal x1196=(gconst1*py*x1191);
evalcond[0]=((((-1.0)*gconst2*px*x1194))+(((-1.0)*gconst1*py*x1194)));
evalcond[1]=(((x1188*x1192))+((x1188*x1193))+(((0.0474569359756098)*x1188)));
evalcond[2]=((0.0474569359756098)+x1193+x1192+x1195+x1196);
evalcond[3]=((-0.03113175)+(((-1.0)*x1189))+(((-1.0)*x1190))+(((-0.656)*x1195))+(((-0.656)*x1196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1198 = ((px*px)+(py*py));
if(IKabs(x1198)==0){
continue;
}
IkReal x1197=pow(x1198,-0.5);
CheckValue<IkReal> x1199 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1199.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x1199.value))));
IkReal gconst4=((1.0)*px*x1197);
IkReal gconst5=((-1.0)*py*x1197);
IkReal x1200=((0.2765)*sj10);
IkReal x1201=(gconst4*px);
IkReal x1202=(gconst5*py);
CheckValue<IkReal> x1203 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1203.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1203.value)+j7)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((-1.0)*(px*px)))+(((0.181384)*cj10))+(((-1.0)*(py*py))));
evalcond[2]=(x1200+x1202+(((-1.0)*x1201)));
evalcond[3]=(x1201+(((-1.0)*x1202))+(((-1.0)*x1200)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x1208 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1208.valid){
continue;
}
IkReal x1204=((1.0)*(x1208.value));
IkReal x1205=((-1.0)*py);
IkReal x1206=((px*px)+(py*py));
IkReal x1207=x1197;
pz=0;
j9=1.5707963267949;
sj9=1.0;
cj9=0;
pp=x1206;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1205);
rxp0_1=(px*r20);
rxp1_0=(r21*x1205);
rxp1_1=(px*r21);
rxp2_0=(r22*x1205);
rxp2_1=(px*r22);
sj7=gconst4;
cj7=gconst5;
j7=((3.14159265)+(((-1.0)*x1204)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x1204)));
IkReal gconst4=((1.0)*px*x1207);
IkReal gconst5=(x1205*x1207);
j8eval[0]=((-1.0)+(((-32.1215479373951)*(px*px)))+(((-32.1215479373951)*(py*py))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x1213 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1213.valid){
continue;
}
IkReal x1209=((1.0)*(x1213.value));
IkReal x1210=((-1.0)*py);
IkReal x1211=((px*px)+(py*py));
IkReal x1212=x1197;
pz=0;
j9=1.5707963267949;
sj9=1.0;
cj9=0;
pp=x1211;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1210);
rxp0_1=(px*r20);
rxp1_0=(r21*x1210);
rxp1_1=(px*r21);
rxp2_0=(r22*x1210);
rxp2_1=(px*r22);
sj7=gconst4;
cj7=gconst5;
j7=((3.14159265)+(((-1.0)*x1209)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x1209)));
IkReal gconst4=((1.0)*px*x1212);
IkReal gconst5=(x1210*x1212);
j8eval[0]=0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1216=IKPowWithIntegerCheck((((gconst5*px))+((gconst4*py))),-1);
if(!x1216.valid){
continue;
}
IkReal x1214=x1216.value;
IkReal x1215=((1.52439024390244)*x1214);
sj8array[0]=((((-1.0)*x1215*(px*px)))+(((-1.0)*x1215*(py*py)))+(((-0.0474569359756098)*x1214)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x1217=IKcos(j8);
IkReal x1218=px*px;
IkReal x1219=py*py;
IkReal x1220=IKsin(j8);
IkReal x1221=(gconst4*py);
IkReal x1222=(gconst5*px);
IkReal x1223=((1.52439024390244)*x1219);
IkReal x1224=((0.656)*x1220);
IkReal x1225=((1.52439024390244)*x1218);
IkReal x1226=((1.0)*x1217);
evalcond[0]=((((-1.0)*x1221*x1226))+(((-1.0)*x1222*x1226)));
evalcond[1]=((((0.0474569359756098)*x1217))+((x1217*x1225))+((x1217*x1223)));
evalcond[2]=((-0.03113175)+(((-1.0)*x1221*x1224))+(((-1.0)*x1222*x1224))+(((-1.0)*x1219))+(((-1.0)*x1218)));
evalcond[3]=((((-1.0)*x1222))+(((-1.0)*x1221))+(((-1.0)*x1220*x1223))+(((-1.0)*x1220*x1225))+(((-0.0474569359756098)*x1220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1228=IKPowWithIntegerCheck(((-0.0474569359756098)+(((-1.52439024390244)*(px*px)))+(((-1.52439024390244)*(py*py)))),-1);
if(!x1228.valid){
continue;
}
IkReal x1227=x1228.value;
sj8array[0]=(((gconst5*px*x1227))+((gconst4*py*x1227)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x1229=IKcos(j8);
IkReal x1230=py*py;
IkReal x1231=px*px;
IkReal x1232=IKsin(j8);
IkReal x1233=(gconst4*py);
IkReal x1234=((1.52439024390244)*x1230);
IkReal x1235=((1.52439024390244)*x1231);
IkReal x1236=((1.0)*x1229);
IkReal x1237=(gconst5*px*x1232);
evalcond[0]=((((-1.0)*gconst5*px*x1236))+(((-1.0)*x1233*x1236)));
evalcond[1]=((((0.0474569359756098)*x1229))+((x1229*x1235))+((x1229*x1234)));
evalcond[2]=((0.0474569359756098)+x1234+x1235+x1237+((x1232*x1233)));
evalcond[3]=((-0.03113175)+(((-1.0)*x1231))+(((-1.0)*x1230))+(((-0.656)*x1237))+(((-0.656)*x1232*x1233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1240=IKPowWithIntegerCheck((((py*sj7))+((cj7*px))),-1);
if(!x1240.valid){
continue;
}
IkReal x1238=x1240.value;
IkReal x1239=((1.52439024390244)*x1238);
sj8array[0]=((((-1.0)*x1239*(py*py)))+(((-1.0)*x1239*(px*px)))+(((-0.0474569359756098)*x1238)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x1241=IKcos(j8);
IkReal x1242=IKsin(j8);
IkReal x1243=px*px;
IkReal x1244=py*py;
IkReal x1245=(py*sj7);
IkReal x1246=(cj7*px);
IkReal x1247=((1.0)*x1241);
IkReal x1248=((1.52439024390244)*x1242);
IkReal x1249=((1.52439024390244)*x1241);
IkReal x1250=((0.656)*x1242);
evalcond[0]=((((-1.0)*x1245*x1247))+(((-1.0)*x1246*x1247)));
evalcond[1]=(((x1244*x1249))+((x1243*x1249))+(((0.0474569359756098)*x1241)));
evalcond[2]=((-0.03113175)+(((-1.0)*x1243))+(((-1.0)*x1244))+(((-1.0)*x1246*x1250))+(((-1.0)*x1245*x1250)));
evalcond[3]=((((-1.0)*x1244*x1248))+(((-0.0474569359756098)*x1242))+(((-1.0)*x1245))+(((-1.0)*x1246))+(((-1.0)*x1243*x1248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1252=IKPowWithIntegerCheck(((-0.0474569359756098)+(((-1.52439024390244)*(px*px)))+(((-1.52439024390244)*(py*py)))),-1);
if(!x1252.valid){
continue;
}
IkReal x1251=x1252.value;
sj8array[0]=(((cj7*px*x1251))+((py*sj7*x1251)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x1253=IKcos(j8);
IkReal x1254=py*py;
IkReal x1255=px*px;
IkReal x1256=IKsin(j8);
IkReal x1257=(py*sj7);
IkReal x1258=(cj7*px);
IkReal x1259=((1.52439024390244)*x1254);
IkReal x1260=((1.0)*x1253);
IkReal x1261=((1.52439024390244)*x1255);
IkReal x1262=((0.656)*x1256);
evalcond[0]=((((-1.0)*x1258*x1260))+(((-1.0)*x1257*x1260)));
evalcond[1]=((((0.0474569359756098)*x1253))+((x1253*x1261))+((x1253*x1259)));
evalcond[2]=((0.0474569359756098)+x1261+x1259+((x1256*x1257))+((x1256*x1258)));
evalcond[3]=((-0.03113175)+(((-1.0)*x1258*x1262))+(((-1.0)*x1257*x1262))+(((-1.0)*x1255))+(((-1.0)*x1254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1263=((((-0.2765)*sj10))+(((-1.0)*px*sj7))+((cj7*py)));
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j9), 6.28318530717959))))));
evalcond[1]=((0.18403625)+(((-1.0)*pp))+(((0.181384)*cj10)));
evalcond[2]=x1263;
evalcond[3]=x1263;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x1264=((-1.0)*py);
pz=0;
j9=-1.5707963267949;
sj9=-1.0;
cj9=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1264);
rxp0_1=(px*r20);
rxp1_0=(r21*x1264);
rxp1_1=(px*r21);
rxp2_0=(r22*x1264);
rxp2_1=(px*r22);
j8eval[0]=((-1.0)+(((-32.1215479373951)*(px*px)))+(((-32.1215479373951)*(py*py))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x1265=((-1.0)*py);
pz=0;
j9=-1.5707963267949;
sj9=-1.0;
cj9=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1265);
rxp0_1=(px*r20);
rxp1_0=(r21*x1265);
rxp1_1=(px*r21);
rxp2_0=(r22*x1265);
rxp2_1=(px*r22);
j8eval[0]=(((py*sj7))+((cj7*px)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1267 = ((px*px)+(py*py));
if(IKabs(x1267)==0){
continue;
}
IkReal x1266=pow(x1267,-0.5);
CheckValue<IkReal> x1268 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1268.valid){
continue;
}
IkReal gconst6=((-1.0)*(x1268.value));
IkReal gconst7=((-1.0)*px*x1266);
IkReal gconst8=(py*x1266);
IkReal x1269=(((gconst8*py))+(((-0.2765)*sj10))+(((-1.0)*gconst7*px)));
CheckValue<IkReal> x1270 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1270.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1270.value)+j7)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((-1.0)*(px*px)))+(((0.181384)*cj10))+(((-1.0)*(py*py))));
evalcond[2]=x1269;
evalcond[3]=x1269;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x1271=((-1.0)*py);
CheckValue<IkReal> x1275 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1275.valid){
continue;
}
IkReal x1272=((-1.0)*(x1275.value));
IkReal x1273=((px*px)+(py*py));
IkReal x1274=x1266;
pz=0;
j9=-1.5707963267949;
sj9=-1.0;
cj9=0;
pp=x1273;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1271);
rxp0_1=(px*r20);
rxp1_0=(r21*x1271);
rxp1_1=(px*r21);
rxp2_0=(r22*x1271);
rxp2_1=(px*r22);
sj7=gconst7;
cj7=gconst8;
j7=x1272;
IkReal gconst6=x1272;
IkReal gconst7=((-1.0)*px*x1274);
IkReal gconst8=(py*x1274);
j8eval[0]=((-1.0)+(((-32.1215479373951)*(px*px)))+(((-32.1215479373951)*(py*py))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x1276=((-1.0)*py);
CheckValue<IkReal> x1280 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1280.valid){
continue;
}
IkReal x1277=((-1.0)*(x1280.value));
IkReal x1278=((px*px)+(py*py));
IkReal x1279=x1266;
pz=0;
j9=-1.5707963267949;
sj9=-1.0;
cj9=0;
pp=x1278;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1276);
rxp0_1=(px*r20);
rxp1_0=(r21*x1276);
rxp1_1=(px*r21);
rxp2_0=(r22*x1276);
rxp2_1=(px*r22);
sj7=gconst7;
cj7=gconst8;
j7=x1277;
IkReal gconst6=x1277;
IkReal gconst7=((-1.0)*px*x1279);
IkReal gconst8=(py*x1279);
j8eval[0]=0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1283=IKPowWithIntegerCheck((((gconst8*px))+((gconst7*py))),-1);
if(!x1283.valid){
continue;
}
IkReal x1281=x1283.value;
IkReal x1282=((1.52439024390244)*x1281);
sj8array[0]=((((-1.0)*x1282*(px*px)))+(((-1.0)*x1282*(py*py)))+(((-0.0474569359756098)*x1281)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x1284=IKcos(j8);
IkReal x1285=px*px;
IkReal x1286=py*py;
IkReal x1287=IKsin(j8);
IkReal x1288=(gconst7*py);
IkReal x1289=(gconst8*px);
IkReal x1290=((1.52439024390244)*x1285);
IkReal x1291=((1.52439024390244)*x1286);
IkReal x1292=((0.656)*x1287);
evalcond[0]=(((x1284*x1289))+((x1284*x1288)));
evalcond[1]=((((0.0474569359756098)*x1284))+((x1284*x1291))+((x1284*x1290)));
evalcond[2]=((-0.03113175)+(((-1.0)*x1286))+(((-1.0)*x1285))+(((-1.0)*x1288*x1292))+(((-1.0)*x1289*x1292)));
evalcond[3]=((((-1.0)*x1288))+(((-1.0)*x1289))+(((-1.0)*x1287*x1291))+(((-1.0)*x1287*x1290))+(((-0.0474569359756098)*x1287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1294=IKPowWithIntegerCheck(((-0.0474569359756098)+(((-1.52439024390244)*(px*px)))+(((-1.52439024390244)*(py*py)))),-1);
if(!x1294.valid){
continue;
}
IkReal x1293=x1294.value;
sj8array[0]=(((gconst7*py*x1293))+((gconst8*px*x1293)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x1295=IKcos(j8);
IkReal x1296=py*py;
IkReal x1297=px*px;
IkReal x1298=IKsin(j8);
IkReal x1299=(gconst8*px);
IkReal x1300=(gconst7*py);
IkReal x1301=((1.52439024390244)*x1296);
IkReal x1302=((1.52439024390244)*x1297);
IkReal x1303=((0.656)*x1298);
evalcond[0]=(((x1295*x1299))+((x1295*x1300)));
evalcond[1]=(((x1295*x1302))+((x1295*x1301))+(((0.0474569359756098)*x1295)));
evalcond[2]=((0.0474569359756098)+x1301+x1302+((x1298*x1300))+((x1298*x1299)));
evalcond[3]=((-0.03113175)+(((-1.0)*x1299*x1303))+(((-1.0)*x1300*x1303))+(((-1.0)*x1296))+(((-1.0)*x1297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1305 = ((px*px)+(py*py));
if(IKabs(x1305)==0){
continue;
}
IkReal x1304=pow(x1305,-0.5);
CheckValue<IkReal> x1306 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1306.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x1306.value))));
IkReal gconst10=((1.0)*px*x1304);
IkReal gconst11=((-1.0)*py*x1304);
IkReal x1307=((((-0.2765)*sj10))+(((-1.0)*gconst10*px))+((gconst11*py)));
CheckValue<IkReal> x1308 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1308.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1308.value)+j7)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((-1.0)*(px*px)))+(((0.181384)*cj10))+(((-1.0)*(py*py))));
evalcond[2]=x1307;
evalcond[3]=x1307;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x1313 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1313.valid){
continue;
}
IkReal x1309=((1.0)*(x1313.value));
IkReal x1310=((-1.0)*py);
IkReal x1311=((px*px)+(py*py));
IkReal x1312=x1304;
pz=0;
j9=-1.5707963267949;
sj9=-1.0;
cj9=0;
pp=x1311;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1310);
rxp0_1=(px*r20);
rxp1_0=(r21*x1310);
rxp1_1=(px*r21);
rxp2_0=(r22*x1310);
rxp2_1=(px*r22);
sj7=gconst10;
cj7=gconst11;
j7=((3.14159265)+(((-1.0)*x1309)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x1309)));
IkReal gconst10=((1.0)*px*x1312);
IkReal gconst11=(x1310*x1312);
j8eval[0]=((-1.0)+(((-32.1215479373951)*(px*px)))+(((-32.1215479373951)*(py*py))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x1318 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1318.valid){
continue;
}
IkReal x1314=((1.0)*(x1318.value));
IkReal x1315=((-1.0)*py);
IkReal x1316=((px*px)+(py*py));
IkReal x1317=x1304;
pz=0;
j9=-1.5707963267949;
sj9=-1.0;
cj9=0;
pp=x1316;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1315);
rxp0_1=(px*r20);
rxp1_0=(r21*x1315);
rxp1_1=(px*r21);
rxp2_0=(r22*x1315);
rxp2_1=(px*r22);
sj7=gconst10;
cj7=gconst11;
j7=((3.14159265)+(((-1.0)*x1314)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x1314)));
IkReal gconst10=((1.0)*px*x1317);
IkReal gconst11=(x1315*x1317);
j8eval[0]=0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1321=IKPowWithIntegerCheck((((gconst10*py))+((gconst11*px))),-1);
if(!x1321.valid){
continue;
}
IkReal x1319=x1321.value;
IkReal x1320=((1.52439024390244)*x1319);
sj8array[0]=((((-0.0474569359756098)*x1319))+(((-1.0)*x1320*(py*py)))+(((-1.0)*x1320*(px*px))));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x1322=IKcos(j8);
IkReal x1323=px*px;
IkReal x1324=py*py;
IkReal x1325=IKsin(j8);
IkReal x1326=(gconst10*py);
IkReal x1327=(gconst11*px);
IkReal x1328=((1.52439024390244)*x1325);
IkReal x1329=((0.656)*x1325);
IkReal x1330=((1.52439024390244)*x1322);
evalcond[0]=(((x1322*x1326))+((x1322*x1327)));
evalcond[1]=((((0.0474569359756098)*x1322))+((x1324*x1330))+((x1323*x1330)));
evalcond[2]=((-0.03113175)+(((-1.0)*x1327*x1329))+(((-1.0)*x1324))+(((-1.0)*x1323))+(((-1.0)*x1326*x1329)));
evalcond[3]=((((-1.0)*x1323*x1328))+(((-0.0474569359756098)*x1325))+(((-1.0)*x1324*x1328))+(((-1.0)*x1326))+(((-1.0)*x1327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1332=IKPowWithIntegerCheck(((-0.0474569359756098)+(((-1.52439024390244)*(px*px)))+(((-1.52439024390244)*(py*py)))),-1);
if(!x1332.valid){
continue;
}
IkReal x1331=x1332.value;
sj8array[0]=(((gconst11*px*x1331))+((gconst10*py*x1331)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x1333=IKcos(j8);
IkReal x1334=py*py;
IkReal x1335=px*px;
IkReal x1336=IKsin(j8);
IkReal x1337=(gconst10*py);
IkReal x1338=(gconst11*px);
IkReal x1339=((1.52439024390244)*x1334);
IkReal x1340=((0.656)*x1336);
IkReal x1341=((1.52439024390244)*x1335);
evalcond[0]=(((x1333*x1337))+((x1333*x1338)));
evalcond[1]=(((x1333*x1341))+(((0.0474569359756098)*x1333))+((x1333*x1339)));
evalcond[2]=((0.0474569359756098)+x1341+x1339+((x1336*x1337))+((x1336*x1338)));
evalcond[3]=((-0.03113175)+(((-1.0)*x1338*x1340))+(((-1.0)*x1334))+(((-1.0)*x1335))+(((-1.0)*x1337*x1340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1344=IKPowWithIntegerCheck((((py*sj7))+((cj7*px))),-1);
if(!x1344.valid){
continue;
}
IkReal x1342=x1344.value;
IkReal x1343=((1.52439024390244)*x1342);
sj8array[0]=((((-1.0)*x1343*(py*py)))+(((-1.0)*x1343*(px*px)))+(((-0.0474569359756098)*x1342)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x1345=IKcos(j8);
IkReal x1346=IKsin(j8);
IkReal x1347=px*px;
IkReal x1348=py*py;
IkReal x1349=(cj7*px);
IkReal x1350=(py*sj7);
IkReal x1351=((1.52439024390244)*x1346);
IkReal x1352=((1.52439024390244)*x1345);
IkReal x1353=((0.656)*x1346);
evalcond[0]=(((x1345*x1350))+((x1345*x1349)));
evalcond[1]=((((0.0474569359756098)*x1345))+((x1348*x1352))+((x1347*x1352)));
evalcond[2]=((-0.03113175)+(((-1.0)*x1350*x1353))+(((-1.0)*x1349*x1353))+(((-1.0)*x1348))+(((-1.0)*x1347)));
evalcond[3]=((((-1.0)*x1350))+(((-1.0)*x1347*x1351))+(((-1.0)*x1348*x1351))+(((-1.0)*x1349))+(((-0.0474569359756098)*x1346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1355=IKPowWithIntegerCheck(((-0.0474569359756098)+(((-1.52439024390244)*(px*px)))+(((-1.52439024390244)*(py*py)))),-1);
if(!x1355.valid){
continue;
}
IkReal x1354=x1355.value;
sj8array[0]=(((cj7*px*x1354))+((py*sj7*x1354)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x1356=IKcos(j8);
IkReal x1357=py*py;
IkReal x1358=px*px;
IkReal x1359=IKsin(j8);
IkReal x1360=(cj7*px);
IkReal x1361=((1.52439024390244)*x1357);
IkReal x1362=((1.52439024390244)*x1358);
IkReal x1363=(py*sj7*x1359);
evalcond[0]=(((x1356*x1360))+((py*sj7*x1356)));
evalcond[1]=(((x1356*x1362))+((x1356*x1361))+(((0.0474569359756098)*x1356)));
evalcond[2]=((0.0474569359756098)+x1362+x1363+x1361+((x1359*x1360)));
evalcond[3]=((-0.03113175)+(((-1.0)*x1357))+(((-1.0)*x1358))+(((-0.656)*x1359*x1360))+(((-0.656)*x1363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j10), 6.28318530717959)))))+(IKabs(pz)));
evalcond[1]=((0.36542025)+(((-1.0)*pp)));
evalcond[2]=((((-1.0)*px*sj7))+((cj7*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
sj8array[0]=((((-1.65425971877585)*cj7*px))+(((-1.65425971877585)*py*sj7)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1364=IKsin(j8);
IkReal x1365=IKcos(j8);
CheckValue<IkReal> x1373=IKPowWithIntegerCheck(cj7,-1);
if(!x1373.valid){
continue;
}
IkReal x1366=x1373.value;
IkReal x1367=sj7*sj7;
IkReal x1368=(x1366*x1367);
IkReal x1369=(py*sj7*x1364);
IkReal x1370=(cj7*px*x1364);
IkReal x1371=((1.0)*px*sj9*x1365);
IkReal x1372=((1.0)*cj9*px*x1365);
evalcond[0]=((0.6045)*x1365);
evalcond[1]=((0.6045)+x1369+x1370);
evalcond[2]=((-0.396552)+(((-0.656)*x1370))+(((-0.656)*x1369)));
evalcond[3]=((((-1.0)*cj7*x1371))+(((-1.0)*x1368*x1371)));
evalcond[4]=((((-1.0)*cj7*x1372))+(((-1.0)*x1368*x1372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j10, 6.28318530717959)))))+(IKabs(pz)));
evalcond[1]=((0.00265225)+(((-1.0)*pp)));
evalcond[2]=((((-1.0)*px*sj7))+((cj7*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
sj8array[0]=((((-19.4174757281553)*py*sj7))+(((-19.4174757281553)*cj7*px)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[5];
IkReal x1374=IKsin(j8);
IkReal x1375=IKcos(j8);
CheckValue<IkReal> x1383=IKPowWithIntegerCheck(cj7,-1);
if(!x1383.valid){
continue;
}
IkReal x1376=x1383.value;
IkReal x1377=sj7*sj7;
IkReal x1378=(x1376*x1377);
IkReal x1379=(py*sj7*x1374);
IkReal x1380=(cj7*px*x1374);
IkReal x1381=((1.0)*px*sj9*x1375);
IkReal x1382=((1.0)*cj9*px*x1375);
evalcond[0]=((0.0515)*x1375);
evalcond[1]=((0.0515)+x1379+x1380);
evalcond[2]=((-0.033784)+(((-0.656)*x1379))+(((-0.656)*x1380)));
evalcond[3]=((((-1.0)*x1378*x1381))+(((-1.0)*cj7*x1381)));
evalcond[4]=((((-1.0)*x1378*x1382))+(((-1.0)*cj7*x1382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1384=py*py;
IkReal x1385=cj7*cj7;
IkReal x1386=(cj9*sj10);
IkReal x1387=(py*sj7);
IkReal x1388=((2000.0)*pz);
IkReal x1389=(cj7*px);
IkReal x1390=((2000.0)*x1385);
CheckValue<IkReal> x1391 = IKatan2WithCheck(IkReal(((((-152.9045)*cj10*x1386))+(((-181.384)*x1386))+(((-1.0)*x1388*x1389))+(((-1.0)*x1387*x1388)))),((215.168)+(((-4000.0)*x1387*x1389))+(((152.9045)*(cj10*cj10)))+(((-1.0)*x1390*(px*px)))+(((362.768)*cj10))+(((-2000.0)*x1384))+((x1384*x1390))),IKFAST_ATAN2_MAGTHRESH);
if(!x1391.valid){
continue;
}
CheckValue<IkReal> x1392=IKPowWithIntegerCheck(IKsign(((((553.0)*x1386*x1389))+(((553.0)*x1386*x1387))+(((553.0)*cj10*pz))+(((656.0)*pz)))),-1);
if(!x1392.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1391.value)+(((1.5707963267949)*(x1392.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1393=IKcos(j8);
IkReal x1394=IKsin(j8);
IkReal x1395=((0.2765)*cj10);
IkReal x1396=((0.2765)*sj10);
IkReal x1397=((1.0)*pz);
IkReal x1398=(py*sj7);
IkReal x1399=(cj7*py);
IkReal x1400=((1.0)*sj9);
IkReal x1401=(px*sj7);
IkReal x1402=((1.0)*cj7*px);
IkReal x1403=(cj9*x1394);
IkReal x1404=(cj9*x1393);
IkReal x1405=(cj7*px*x1394);
evalcond[0]=(((x1393*x1395))+(((0.328)*x1393))+(((-1.0)*x1396*x1403))+(((-1.0)*x1397)));
evalcond[1]=((0.328)+x1395+(((-1.0)*x1393*x1397))+((x1394*x1398))+x1405);
evalcond[2]=((-0.03113175)+(((-0.656)*x1394*x1398))+(((-1.0)*pp))+(((-0.656)*x1405))+(((0.656)*pz*x1393)));
evalcond[3]=((((-1.0)*x1394*x1395))+(((-0.328)*x1394))+(((-1.0)*x1402))+(((-1.0)*x1398))+(((-1.0)*x1396*x1404)));
evalcond[4]=((((-1.0)*cj7*px*x1393*x1400))+(((-1.0)*cj9*x1401))+(((-1.0)*x1393*x1398*x1400))+(((-1.0)*sj9*x1394*x1397))+((cj9*x1399)));
evalcond[5]=(((sj9*x1401))+(((-1.0)*x1398*x1404))+(((-1.0)*x1399*x1400))+(((-1.0)*x1402*x1404))+(((-1.0)*x1397*x1403))+(((-1.0)*x1396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1406=cj10*cj10;
IkReal x1407=cj9*cj9;
IkReal x1408=(py*sj7);
IkReal x1409=((1106000.0)*cj10);
IkReal x1410=(cj7*px);
IkReal x1411=((1106000.0)*cj9*sj10);
IkReal x1412=((305809.0)*x1407);
CheckValue<IkReal> x1413=IKPowWithIntegerCheck(IKsign(((430336.0)+(((305809.0)*x1406))+(((725536.0)*cj10))+x1412+(((-1.0)*x1406*x1412)))),-1);
if(!x1413.valid){
continue;
}
CheckValue<IkReal> x1414 = IKatan2WithCheck(IkReal(((((-1312000.0)*x1408))+(((-1312000.0)*x1410))+(((-1.0)*x1409*x1410))+(((-1.0)*pz*x1411))+(((-1.0)*x1408*x1409)))),(((pz*x1409))+(((-1.0)*x1408*x1411))+(((-1.0)*x1410*x1411))+(((1312000.0)*pz))),IKFAST_ATAN2_MAGTHRESH);
if(!x1414.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1413.value)))+(x1414.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1415=IKcos(j8);
IkReal x1416=IKsin(j8);
IkReal x1417=((0.2765)*cj10);
IkReal x1418=((0.2765)*sj10);
IkReal x1419=((1.0)*pz);
IkReal x1420=(py*sj7);
IkReal x1421=(cj7*py);
IkReal x1422=((1.0)*sj9);
IkReal x1423=(px*sj7);
IkReal x1424=((1.0)*cj7*px);
IkReal x1425=(cj9*x1416);
IkReal x1426=(cj9*x1415);
IkReal x1427=(cj7*px*x1416);
evalcond[0]=(((x1415*x1417))+(((-1.0)*x1419))+(((-1.0)*x1418*x1425))+(((0.328)*x1415)));
evalcond[1]=((0.328)+(((-1.0)*x1415*x1419))+x1427+x1417+((x1416*x1420)));
evalcond[2]=((-0.03113175)+(((-0.656)*x1416*x1420))+(((0.656)*pz*x1415))+(((-0.656)*x1427))+(((-1.0)*pp)));
evalcond[3]=((((-1.0)*x1416*x1417))+(((-1.0)*x1418*x1426))+(((-1.0)*x1420))+(((-0.328)*x1416))+(((-1.0)*x1424)));
evalcond[4]=((((-1.0)*cj7*px*x1415*x1422))+((cj9*x1421))+(((-1.0)*cj9*x1423))+(((-1.0)*sj9*x1416*x1419))+(((-1.0)*x1415*x1420*x1422)));
evalcond[5]=((((-1.0)*x1421*x1422))+(((-1.0)*x1418))+(((-1.0)*x1424*x1426))+(((-1.0)*x1420*x1426))+((sj9*x1423))+(((-1.0)*x1419*x1425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1428=(cj9*sj10);
IkReal x1429=(py*sj7);
IkReal x1430=((2000.0)*pz);
IkReal x1431=((553.0)*cj10);
IkReal x1432=(cj7*px);
CheckValue<IkReal> x1433 = IKatan2WithCheck(IkReal(((215.168)+(((152.9045)*(cj10*cj10)))+(((362.768)*cj10))+(((-1.0)*pz*x1430)))),((((152.9045)*cj10*x1428))+(((-1.0)*x1429*x1430))+(((181.384)*x1428))+(((-1.0)*x1430*x1432))),IKFAST_ATAN2_MAGTHRESH);
if(!x1433.valid){
continue;
}
CheckValue<IkReal> x1434=IKPowWithIntegerCheck(IKsign(((((553.0)*pz*x1428))+(((-1.0)*x1429*x1431))+(((-656.0)*x1429))+(((-1.0)*x1431*x1432))+(((-656.0)*x1432)))),-1);
if(!x1434.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1433.value)+(((1.5707963267949)*(x1434.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1435=IKcos(j8);
IkReal x1436=IKsin(j8);
IkReal x1437=((0.2765)*cj10);
IkReal x1438=((0.2765)*sj10);
IkReal x1439=((1.0)*pz);
IkReal x1440=(py*sj7);
IkReal x1441=(cj7*py);
IkReal x1442=((1.0)*sj9);
IkReal x1443=(px*sj7);
IkReal x1444=((1.0)*cj7*px);
IkReal x1445=(cj9*x1436);
IkReal x1446=(cj9*x1435);
IkReal x1447=(cj7*px*x1436);
evalcond[0]=((((0.328)*x1435))+(((-1.0)*x1438*x1445))+((x1435*x1437))+(((-1.0)*x1439)));
evalcond[1]=((0.328)+(((-1.0)*x1435*x1439))+((x1436*x1440))+x1437+x1447);
evalcond[2]=((-0.03113175)+(((-0.656)*x1447))+(((-1.0)*pp))+(((0.656)*pz*x1435))+(((-0.656)*x1436*x1440)));
evalcond[3]=((((-1.0)*x1436*x1437))+(((-1.0)*x1438*x1446))+(((-1.0)*x1440))+(((-0.328)*x1436))+(((-1.0)*x1444)));
evalcond[4]=((((-1.0)*sj9*x1436*x1439))+((cj9*x1441))+(((-1.0)*x1435*x1440*x1442))+(((-1.0)*cj9*x1443))+(((-1.0)*cj7*px*x1435*x1442)));
evalcond[5]=((((-1.0)*x1439*x1445))+(((-1.0)*x1441*x1442))+(((-1.0)*x1438))+(((-1.0)*x1440*x1446))+((sj9*x1443))+(((-1.0)*x1444*x1446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x149=((1.0)*sj8);
IkReal x150=(cj10*cj9);
IkReal x151=(sj7*sj9);
IkReal x152=((1.0)*cj8);
IkReal x153=(cj9*sj10);
IkReal x154=(cj7*sj9);
IkReal x155=((((-1.0)*sj10*x149))+((cj8*x150)));
IkReal x156=(((sj8*x150))+((cj8*sj10)));
IkReal x157=((((-1.0)*x151*x152))+((cj7*cj9)));
IkReal x158=(((cj10*cj8))+(((-1.0)*x149*x153)));
IkReal x159=(cj7*x155);
IkReal x160=((((-1.0)*cj9*sj7))+(((-1.0)*x152*x154)));
IkReal x161=((((-1.0)*x152*x153))+(((-1.0)*cj10*x149)));
IkReal x162=(((cj10*x154))+((sj7*x155)));
IkReal x163=(x159+(((-1.0)*cj10*x151)));
IkReal x164=((((-1.0)*sj10*x154))+((sj7*x161)));
IkReal x165=(((cj7*x161))+((sj10*x151)));
new_r00=(((r00*x163))+((r20*x156))+((r10*x162)));
new_r01=(((r01*x163))+((r21*x156))+((r11*x162)));
new_r02=(((r02*((x159+(((-1.0)*cj10*x151))))))+((r12*x162))+((r22*x156)));
new_r10=((((-1.0)*r20*sj9*x149))+((r00*x160))+((r10*x157)));
new_r11=(((r01*x160))+(((-1.0)*r21*sj9*x149))+((r11*x157)));
new_r12=((((-1.0)*r22*sj9*x149))+((r02*x160))+((r12*x157)));
new_r20=(((r00*x165))+((r20*x158))+((r10*x164)));
new_r21=(((r01*x165))+((r21*x158))+((r11*x164)));
new_r22=(((r12*x164))+((r22*x158))+((r02*x165)));
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
cj12array[0]=new_r22;
if( cj12array[0] >= -1-IKFAST_SINCOS_THRESH && cj12array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j12valid[0] = j12valid[1] = true;
    j12array[0] = IKacos(cj12array[0]);
    sj12array[0] = IKsin(j12array[0]);
    cj12array[1] = cj12array[0];
    j12array[1] = -j12array[0];
    sj12array[1] = -sj12array[0];
}
else if( isnan(cj12array[0]) )
{
    // probably any value will work
    j12valid[0] = true;
    cj12array[0] = 1; sj12array[0] = 0; j12array[0] = 0;
}
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

{
IkReal j13eval[2];
IkReal x166=((1.0)*sj8);
IkReal x167=(cj10*cj9);
IkReal x168=(sj7*sj9);
IkReal x169=((1.0)*cj8);
IkReal x170=(cj9*sj10);
IkReal x171=(cj7*sj9);
IkReal x172=x155;
IkReal x173=x156;
IkReal x174=x157;
IkReal x175=x158;
IkReal x176=(cj7*x172);
IkReal x177=x160;
IkReal x178=x161;
IkReal x179=(((cj10*x171))+((sj7*x172)));
IkReal x180=((((-1.0)*cj10*x168))+x176);
IkReal x181=(((sj7*x178))+(((-1.0)*sj10*x171)));
IkReal x182=(((cj7*x178))+((sj10*x168)));
new_r00=(((r00*x180))+((r20*x173))+((r10*x179)));
new_r01=(((r01*x180))+((r21*x173))+((r11*x179)));
new_r02=(((r22*x173))+((r02*(((((-1.0)*cj10*x168))+x176))))+((r12*x179)));
new_r10=(((r00*x177))+(((-1.0)*r20*sj9*x166))+((r10*x174)));
new_r11=(((r01*x177))+(((-1.0)*r21*sj9*x166))+((r11*x174)));
new_r12=((((-1.0)*r22*sj9*x166))+((r12*x174))+((r02*x177)));
new_r20=(((r00*x182))+((r20*x175))+((r10*x181)));
new_r21=(((r01*x182))+((r21*x175))+((r11*x181)));
new_r22=(((r22*x175))+((r12*x181))+((r02*x182)));
j13eval[0]=sj12;
j13eval[1]=IKsign(sj12);
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
IkReal x183=((1.0)*sj8);
IkReal x184=(cj10*cj9);
IkReal x185=(sj7*sj9);
IkReal x186=((1.0)*cj8);
IkReal x187=(cj9*sj10);
IkReal x188=(cj7*sj9);
IkReal x189=x155;
IkReal x190=x156;
IkReal x191=x157;
IkReal x192=x158;
IkReal x193=(cj7*x189);
IkReal x194=x160;
IkReal x195=x161;
IkReal x196=(((sj7*x189))+((cj10*x188)));
IkReal x197=((((-1.0)*cj10*x185))+x193);
IkReal x198=(((sj7*x195))+(((-1.0)*sj10*x188)));
IkReal x199=(((cj7*x195))+((sj10*x185)));
new_r00=(((r00*x197))+((r20*x190))+((r10*x196)));
new_r01=(((r01*x197))+((r21*x190))+((r11*x196)));
new_r02=(((r02*(((((-1.0)*cj10*x185))+x193))))+((r12*x196))+((r22*x190)));
new_r10=(((r00*x194))+(((-1.0)*r20*sj9*x183))+((r10*x191)));
new_r11=(((r01*x194))+(((-1.0)*r21*sj9*x183))+((r11*x191)));
new_r12=((((-1.0)*r22*sj9*x183))+((r12*x191))+((r02*x194)));
new_r20=(((r00*x199))+((r20*x192))+((r10*x198)));
new_r21=(((r01*x199))+((r21*x192))+((r11*x198)));
new_r22=(((r12*x198))+((r22*x192))+((r02*x199)));
j11eval[0]=sj12;
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x201 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x201.valid){
continue;
}
IkReal x200=x201.value;
j11array[0]=((-1.0)*x200);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x200)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[1];
evalcond[0]=(((new_r12*(IKcos(j11))))+(((-1.0)*new_r02*(IKsin(j11)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x202=((1.0)*sj11);
if( IKabs(((((-1.0)*new_r00*x202))+(((-1.0)*cj11*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x202))+((cj11*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x202))+(((-1.0)*cj11*new_r01))))+IKsqr(((((-1.0)*new_r01*x202))+((cj11*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*new_r00*x202))+(((-1.0)*cj11*new_r01))), ((((-1.0)*new_r01*x202))+((cj11*new_r00))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x203=IKsin(j13);
IkReal x204=IKcos(j13);
IkReal x205=((1.0)*cj11);
IkReal x206=(sj11*x203);
IkReal x207=((1.0)*x204);
IkReal x208=(x204*x205);
evalcond[0]=(x203+((new_r11*sj11))+((cj11*new_r01)));
evalcond[1]=(x203+((new_r00*sj11))+(((-1.0)*new_r10*x205)));
evalcond[2]=(x204+((new_r01*sj11))+(((-1.0)*new_r11*x205)));
evalcond[3]=(((sj11*x204))+new_r01+((cj11*x203)));
evalcond[4]=((((-1.0)*x207))+((new_r10*sj11))+((cj11*new_r00)));
evalcond[5]=((((-1.0)*x208))+x206+new_r00);
evalcond[6]=((((-1.0)*x208))+x206+new_r11);
evalcond[7]=((((-1.0)*x203*x205))+(((-1.0)*sj11*x207))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x210 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x210.valid){
continue;
}
IkReal x209=x210.value;
j11array[0]=((-1.0)*x209);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x209)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[1];
evalcond[0]=(((new_r12*(IKcos(j11))))+(((-1.0)*new_r02*(IKsin(j11)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x211=((1.0)*sj11);
if( IKabs(((((-1.0)*new_r00*x211))+((cj11*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj11*new_r00))+(((-1.0)*new_r01*x211)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x211))+((cj11*new_r01))))+IKsqr(((((-1.0)*cj11*new_r00))+(((-1.0)*new_r01*x211))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*new_r00*x211))+((cj11*new_r01))), ((((-1.0)*cj11*new_r00))+(((-1.0)*new_r01*x211))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x212=IKcos(j13);
IkReal x213=IKsin(j13);
IkReal x214=((1.0)*cj11);
IkReal x215=(sj11*x212);
IkReal x216=((1.0)*x213);
IkReal x217=(x213*x214);
evalcond[0]=(x212+((new_r10*sj11))+((cj11*new_r00)));
evalcond[1]=((((-1.0)*new_r10*x214))+x213+((new_r00*sj11)));
evalcond[2]=((((-1.0)*new_r11*x214))+x212+((new_r01*sj11)));
evalcond[3]=((((-1.0)*x216))+((new_r11*sj11))+((cj11*new_r01)));
evalcond[4]=(((sj11*x213))+((cj11*x212))+new_r00);
evalcond[5]=(x215+new_r01+(((-1.0)*x217)));
evalcond[6]=(x215+new_r10+(((-1.0)*x217)));
evalcond[7]=(new_r11+(((-1.0)*x212*x214))+(((-1.0)*sj11*x216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11, j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x219=IKPowWithIntegerCheck(sj12,-1);
if(!x219.valid){
continue;
}
IkReal x218=x219.value;
CheckValue<IkReal> x220=IKPowWithIntegerCheck(new_r12,-1);
if(!x220.valid){
continue;
}
if( IKabs((x218*(x220.value)*(((-1.0)+(cj12*cj12)+(new_r02*new_r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r02*x218)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x218*(x220.value)*(((-1.0)+(cj12*cj12)+(new_r02*new_r02)))))+IKsqr(((-1.0)*new_r02*x218))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((x218*(x220.value)*(((-1.0)+(cj12*cj12)+(new_r02*new_r02)))), ((-1.0)*new_r02*x218));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[8];
IkReal x221=IKcos(j11);
IkReal x222=IKsin(j11);
IkReal x223=((1.0)*sj12);
IkReal x224=(new_r12*x222);
IkReal x225=(new_r02*x221);
evalcond[0]=(((sj12*x221))+new_r02);
evalcond[1]=(((sj12*x222))+new_r12);
evalcond[2]=(((new_r12*x221))+(((-1.0)*new_r02*x222)));
evalcond[3]=(x225+x224+sj12);
evalcond[4]=(((cj12*x225))+((cj12*x224))+((new_r22*sj12)));
evalcond[5]=((((-1.0)*new_r10*x222*x223))+(((-1.0)*new_r00*x221*x223))+((cj12*new_r20)));
evalcond[6]=((((-1.0)*new_r01*x221*x223))+(((-1.0)*new_r11*x222*x223))+((cj12*new_r21)));
evalcond[7]=((-1.0)+(((-1.0)*x223*x225))+(((-1.0)*x223*x224))+((cj12*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13eval[2];
IkReal x226=((1.0)*sj8);
IkReal x227=(cj10*cj9);
IkReal x228=(sj7*sj9);
IkReal x229=((1.0)*cj8);
IkReal x230=(cj9*sj10);
IkReal x231=(cj7*sj9);
IkReal x232=x155;
IkReal x233=x156;
IkReal x234=x157;
IkReal x235=x158;
IkReal x236=(cj7*x232);
IkReal x237=x160;
IkReal x238=x161;
IkReal x239=(((cj10*x231))+((sj7*x232)));
IkReal x240=((((-1.0)*cj10*x228))+x236);
IkReal x241=((((-1.0)*sj10*x231))+((sj7*x238)));
IkReal x242=(((sj10*x228))+((cj7*x238)));
new_r00=(((r10*x239))+((r20*x233))+((r00*x240)));
new_r01=(((r11*x239))+((r01*x240))+((r21*x233)));
new_r02=(((r02*(((((-1.0)*cj10*x228))+x236))))+((r12*x239))+((r22*x233)));
new_r10=(((r10*x234))+((r00*x237))+(((-1.0)*r20*sj9*x226)));
new_r11=(((r11*x234))+((r01*x237))+(((-1.0)*r21*sj9*x226)));
new_r12=(((r02*x237))+(((-1.0)*r22*sj9*x226))+((r12*x234)));
new_r20=(((r20*x235))+((r00*x242))+((r10*x241)));
new_r21=(((r01*x242))+((r11*x241))+((r21*x235)));
new_r22=(((r02*x242))+((r12*x241))+((r22*x235)));
j13eval[0]=sj12;
j13eval[1]=IKsign(sj12);
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
IkReal x243=((1.0)*sj8);
IkReal x244=(cj10*cj9);
IkReal x245=(sj7*sj9);
IkReal x246=((1.0)*cj8);
IkReal x247=(cj9*sj10);
IkReal x248=(cj7*sj9);
IkReal x249=x155;
IkReal x250=x156;
IkReal x251=x157;
IkReal x252=x158;
IkReal x253=(cj7*x249);
IkReal x254=x160;
IkReal x255=x161;
IkReal x256=(((sj7*x249))+((cj10*x248)));
IkReal x257=((((-1.0)*cj10*x245))+x253);
IkReal x258=(((sj7*x255))+(((-1.0)*sj10*x248)));
IkReal x259=(((cj7*x255))+((sj10*x245)));
new_r00=(((r20*x250))+((r00*x257))+((r10*x256)));
new_r01=(((r21*x250))+((r11*x256))+((r01*x257)));
new_r02=(((r12*x256))+((r22*x250))+((r02*(((((-1.0)*cj10*x245))+x253)))));
new_r10=(((r00*x254))+((r10*x251))+(((-1.0)*r20*sj9*x243)));
new_r11=(((r11*x251))+(((-1.0)*r21*sj9*x243))+((r01*x254)));
new_r12=(((r12*x251))+(((-1.0)*r22*sj9*x243))+((r02*x254)));
new_r20=(((r20*x252))+((r00*x259))+((r10*x258)));
new_r21=(((r21*x252))+((r11*x258))+((r01*x259)));
new_r22=(((r12*x258))+((r22*x252))+((r02*x259)));
j13eval[0]=sj12;
j13eval[1]=sj11;
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
IkReal x260=((1.0)*sj8);
IkReal x261=(cj10*cj9);
IkReal x262=(sj7*sj9);
IkReal x263=((1.0)*cj8);
IkReal x264=(cj9*sj10);
IkReal x265=(cj7*sj9);
IkReal x266=x155;
IkReal x267=x156;
IkReal x268=x157;
IkReal x269=x158;
IkReal x270=(cj7*x266);
IkReal x271=x160;
IkReal x272=x161;
IkReal x273=(((sj7*x266))+((cj10*x265)));
IkReal x274=((((-1.0)*cj10*x262))+x270);
IkReal x275=((((-1.0)*sj10*x265))+((sj7*x272)));
IkReal x276=(((cj7*x272))+((sj10*x262)));
new_r00=(((r00*x274))+((r10*x273))+((r20*x267)));
new_r01=(((r21*x267))+((r01*x274))+((r11*x273)));
new_r02=(((r22*x267))+((r02*(((((-1.0)*cj10*x262))+x270))))+((r12*x273)));
new_r10=((((-1.0)*r20*sj9*x260))+((r10*x268))+((r00*x271)));
new_r11=((((-1.0)*r21*sj9*x260))+((r01*x271))+((r11*x268)));
new_r12=(((r02*x271))+(((-1.0)*r22*sj9*x260))+((r12*x268)));
new_r20=(((r00*x276))+((r10*x275))+((r20*x269)));
new_r21=(((r21*x269))+((r01*x276))+((r11*x275)));
new_r22=(((r02*x276))+((r22*x269))+((r12*x275)));
j13eval[0]=sj12;
j13eval[1]=cj11;
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[10];
bool bgotonextstatement = true;
do
{
IkReal x277=(new_r02*sj11);
IkReal x278=(cj11*new_r12);
IkReal x279=(((cj11*new_r02))+((new_r12*sj11)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
evalcond[5]=new_r20;
evalcond[6]=((((-1.0)*x277))+x278);
evalcond[7]=((((-1.0)*x278))+x277);
evalcond[8]=x279;
evalcond[9]=x279;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x280=((1.0)*sj11);
if( IKabs(((((-1.0)*new_r00*x280))+(((-1.0)*cj11*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x280))+((cj11*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x280))+(((-1.0)*cj11*new_r01))))+IKsqr(((((-1.0)*new_r01*x280))+((cj11*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*new_r00*x280))+(((-1.0)*cj11*new_r01))), ((((-1.0)*new_r01*x280))+((cj11*new_r00))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x281=IKsin(j13);
IkReal x282=IKcos(j13);
IkReal x283=((1.0)*cj11);
IkReal x284=(sj11*x281);
IkReal x285=((1.0)*x282);
IkReal x286=(x282*x283);
evalcond[0]=(x281+((new_r11*sj11))+((cj11*new_r01)));
evalcond[1]=(x281+(((-1.0)*new_r10*x283))+((new_r00*sj11)));
evalcond[2]=(x282+(((-1.0)*new_r11*x283))+((new_r01*sj11)));
evalcond[3]=(((cj11*x281))+new_r01+((sj11*x282)));
evalcond[4]=((((-1.0)*x285))+((new_r10*sj11))+((cj11*new_r00)));
evalcond[5]=(x284+(((-1.0)*x286))+new_r00);
evalcond[6]=(x284+(((-1.0)*x286))+new_r11);
evalcond[7]=((((-1.0)*x281*x283))+new_r10+(((-1.0)*sj11*x285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x287=(new_r02*sj11);
IkReal x288=(cj11*new_r02);
IkReal x289=((1.0)*new_r12);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
evalcond[5]=new_r20;
evalcond[6]=(((cj11*new_r12))+(((-1.0)*x287)));
evalcond[7]=((((-1.0)*cj11*x289))+x287);
evalcond[8]=(x288+((new_r12*sj11)));
evalcond[9]=((((-1.0)*x288))+(((-1.0)*sj11*x289)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x290=((1.0)*sj11);
if( IKabs(((((-1.0)*new_r00*x290))+((cj11*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x290))+(((-1.0)*cj11*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x290))+((cj11*new_r01))))+IKsqr(((((-1.0)*new_r01*x290))+(((-1.0)*cj11*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*new_r00*x290))+((cj11*new_r01))), ((((-1.0)*new_r01*x290))+(((-1.0)*cj11*new_r00))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x291=IKcos(j13);
IkReal x292=IKsin(j13);
IkReal x293=((1.0)*cj11);
IkReal x294=(sj11*x291);
IkReal x295=((1.0)*x292);
IkReal x296=(x292*x293);
evalcond[0]=(x291+((new_r10*sj11))+((cj11*new_r00)));
evalcond[1]=((((-1.0)*new_r10*x293))+x292+((new_r00*sj11)));
evalcond[2]=((((-1.0)*new_r11*x293))+x291+((new_r01*sj11)));
evalcond[3]=((((-1.0)*x295))+((new_r11*sj11))+((cj11*new_r01)));
evalcond[4]=(((sj11*x292))+((cj11*x291))+new_r00);
evalcond[5]=((((-1.0)*x296))+x294+new_r01);
evalcond[6]=((((-1.0)*x296))+x294+new_r10);
evalcond[7]=((((-1.0)*x291*x293))+(((-1.0)*sj11*x295))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x297=((((-1.0)*cj12))+new_r22);
IkReal x298=(sj12+new_r12);
IkReal x299=((1.0)*sj12);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j11)))), 6.28318530717959)));
evalcond[1]=x297;
evalcond[2]=x297;
evalcond[3]=new_r02;
evalcond[4]=x298;
evalcond[5]=x298;
evalcond[6]=(((cj12*new_r12))+((new_r22*sj12)));
evalcond[7]=((((-1.0)*new_r10*x299))+((cj12*new_r20)));
evalcond[8]=((((-1.0)*new_r11*x299))+((cj12*new_r21)));
evalcond[9]=((-1.0)+(((-1.0)*new_r12*x299))+((cj12*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x300=IKcos(j13);
IkReal x301=IKsin(j13);
IkReal x302=((1.0)*new_r12);
IkReal x303=((1.0)*x300);
evalcond[0]=(x301+new_r00);
evalcond[1]=(x300+new_r01);
evalcond[2]=(((new_r12*x300))+new_r20);
evalcond[3]=(((new_r22*x301))+new_r11);
evalcond[4]=((((-1.0)*x301*x302))+new_r21);
evalcond[5]=((((-1.0)*new_r22*x303))+new_r10);
evalcond[6]=((((-1.0)*new_r21*x302))+x301+((new_r11*new_r22)));
evalcond[7]=((((-1.0)*new_r20*x302))+((new_r10*new_r22))+(((-1.0)*x303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x304=((((-1.0)*cj12))+new_r22);
IkReal x305=((1.0)*cj12);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j11)))), 6.28318530717959)));
evalcond[1]=x304;
evalcond[2]=x304;
evalcond[3]=new_r02;
evalcond[4]=((((-1.0)*sj12))+new_r12);
evalcond[5]=(sj12+(((-1.0)*new_r12)));
evalcond[6]=(((new_r22*sj12))+(((-1.0)*new_r12*x305)));
evalcond[7]=(((new_r10*sj12))+((cj12*new_r20)));
evalcond[8]=(((cj12*new_r21))+((new_r11*sj12)));
evalcond[9]=((-1.0)+((cj12*new_r22))+((new_r12*sj12)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(new_r00, new_r01);
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x306=IKsin(j13);
IkReal x307=IKcos(j13);
IkReal x308=((1.0)*new_r22);
IkReal x309=((1.0)*x307);
evalcond[0]=(((new_r12*x306))+new_r21);
evalcond[1]=(x306+(((-1.0)*new_r00)));
evalcond[2]=(x307+(((-1.0)*new_r01)));
evalcond[3]=((((-1.0)*new_r12*x309))+new_r20);
evalcond[4]=(((new_r22*x306))+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x307*x308)));
evalcond[6]=(x306+((new_r12*new_r21))+(((-1.0)*new_r11*x308)));
evalcond[7]=(((new_r12*new_r20))+(((-1.0)*x309))+(((-1.0)*new_r10*x308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x310=((((-1.0)*cj12))+new_r22);
IkReal x311=(sj12+new_r02);
IkReal x312=((1.0)*sj12);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
evalcond[1]=x310;
evalcond[2]=x310;
evalcond[3]=x311;
evalcond[4]=new_r12;
evalcond[5]=x311;
evalcond[6]=(((cj12*new_r02))+((new_r22*sj12)));
evalcond[7]=((((-1.0)*new_r00*x312))+((cj12*new_r20)));
evalcond[8]=(((cj12*new_r21))+(((-1.0)*new_r01*x312)));
evalcond[9]=((-1.0)+(((-1.0)*new_r02*x312))+((cj12*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(new_r10, new_r11);
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x313=IKcos(j13);
IkReal x314=IKsin(j13);
IkReal x315=((1.0)*new_r02);
IkReal x316=((1.0)*x313);
evalcond[0]=(((new_r02*x313))+new_r20);
evalcond[1]=(x314+(((-1.0)*new_r10)));
evalcond[2]=(x313+(((-1.0)*new_r11)));
evalcond[3]=(new_r01+((new_r22*x314)));
evalcond[4]=((((-1.0)*x314*x315))+new_r21);
evalcond[5]=((((-1.0)*new_r22*x316))+new_r00);
evalcond[6]=((((-1.0)*new_r21*x315))+((new_r01*new_r22))+x314);
evalcond[7]=((((-1.0)*new_r20*x315))+((new_r00*new_r22))+(((-1.0)*x316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x317=((((-1.0)*cj12))+new_r22);
IkReal x318=((1.0)*cj12);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
evalcond[1]=x317;
evalcond[2]=x317;
evalcond[3]=((((-1.0)*sj12))+new_r02);
evalcond[4]=new_r12;
evalcond[5]=(sj12+(((-1.0)*new_r02)));
evalcond[6]=((((-1.0)*new_r02*x318))+((new_r22*sj12)));
evalcond[7]=(((new_r00*sj12))+((cj12*new_r20)));
evalcond[8]=(((new_r01*sj12))+((cj12*new_r21)));
evalcond[9]=((-1.0)+((new_r02*sj12))+((cj12*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x319=IKsin(j13);
IkReal x320=IKcos(j13);
IkReal x321=((1.0)*new_r22);
IkReal x322=((1.0)*x320);
evalcond[0]=(x319+new_r10);
evalcond[1]=(x320+new_r11);
evalcond[2]=(((new_r02*x319))+new_r21);
evalcond[3]=((((-1.0)*new_r02*x322))+new_r20);
evalcond[4]=((((-1.0)*new_r01))+((new_r22*x319)));
evalcond[5]=((((-1.0)*x320*x321))+(((-1.0)*new_r00)));
evalcond[6]=(x319+(((-1.0)*new_r01*x321))+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*x322))+(((-1.0)*new_r00*x321))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x324=IKPowWithIntegerCheck(sj12,-1);
if(!x324.valid){
continue;
}
IkReal x323=x324.value;
CheckValue<IkReal> x325=IKPowWithIntegerCheck(cj11,-1);
if(!x325.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x323)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x323*(x325.value)*(((((-1.0)*cj12*new_r21*sj11))+((new_r11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x323))+IKsqr((x323*(x325.value)*(((((-1.0)*cj12*new_r21*sj11))+((new_r11*sj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((-1.0)*new_r21*x323), (x323*(x325.value)*(((((-1.0)*cj12*new_r21*sj11))+((new_r11*sj12))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[12];
IkReal x326=IKsin(j13);
IkReal x327=IKcos(j13);
IkReal x328=(new_r10*sj11);
IkReal x329=(cj11*cj12);
IkReal x330=((1.0)*cj11);
IkReal x331=(cj12*sj11);
IkReal x332=(cj12*x326);
IkReal x333=((1.0)*x327);
evalcond[0]=(((sj12*x326))+new_r21);
evalcond[1]=((((-1.0)*sj12*x333))+new_r20);
evalcond[2]=((((-1.0)*new_r10*x330))+x326+((new_r00*sj11)));
evalcond[3]=((((-1.0)*new_r11*x330))+x327+((new_r01*sj11)));
evalcond[4]=(x332+((new_r11*sj11))+((cj11*new_r01)));
evalcond[5]=(((x326*x329))+new_r01+((sj11*x327)));
evalcond[6]=(x328+(((-1.0)*cj12*x333))+((cj11*new_r00)));
evalcond[7]=((((-1.0)*x329*x333))+new_r00+((sj11*x326)));
evalcond[8]=(new_r11+((x326*x331))+(((-1.0)*x327*x330)));
evalcond[9]=((((-1.0)*x331*x333))+new_r10+(((-1.0)*x326*x330)));
evalcond[10]=(((new_r01*x329))+((new_r11*x331))+x326+((new_r21*sj12)));
evalcond[11]=(((new_r00*x329))+((cj12*x328))+(((-1.0)*x333))+((new_r20*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x335=IKPowWithIntegerCheck(sj12,-1);
if(!x335.valid){
continue;
}
IkReal x334=x335.value;
CheckValue<IkReal> x336=IKPowWithIntegerCheck(sj11,-1);
if(!x336.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x334)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x334*(x336.value)*(((((-1.0)*new_r01*sj12))+((cj11*cj12*new_r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x334))+IKsqr((x334*(x336.value)*(((((-1.0)*new_r01*sj12))+((cj11*cj12*new_r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((-1.0)*new_r21*x334), (x334*(x336.value)*(((((-1.0)*new_r01*sj12))+((cj11*cj12*new_r21))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[12];
IkReal x337=IKsin(j13);
IkReal x338=IKcos(j13);
IkReal x339=(new_r10*sj11);
IkReal x340=(cj11*cj12);
IkReal x341=((1.0)*cj11);
IkReal x342=(cj12*sj11);
IkReal x343=(cj12*x337);
IkReal x344=((1.0)*x338);
evalcond[0]=(((sj12*x337))+new_r21);
evalcond[1]=((((-1.0)*sj12*x344))+new_r20);
evalcond[2]=((((-1.0)*new_r10*x341))+x337+((new_r00*sj11)));
evalcond[3]=((((-1.0)*new_r11*x341))+x338+((new_r01*sj11)));
evalcond[4]=(x343+((new_r11*sj11))+((cj11*new_r01)));
evalcond[5]=(((x337*x340))+((sj11*x338))+new_r01);
evalcond[6]=(x339+(((-1.0)*cj12*x344))+((cj11*new_r00)));
evalcond[7]=(((sj11*x337))+(((-1.0)*x340*x344))+new_r00);
evalcond[8]=(((x337*x342))+new_r11+(((-1.0)*x338*x341)));
evalcond[9]=((((-1.0)*x337*x341))+new_r10+(((-1.0)*x342*x344)));
evalcond[10]=(((new_r11*x342))+((new_r01*x340))+x337+((new_r21*sj12)));
evalcond[11]=(((new_r00*x340))+(((-1.0)*x344))+((cj12*x339))+((new_r20*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x345 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x345.valid){
continue;
}
CheckValue<IkReal> x346=IKPowWithIntegerCheck(IKsign(sj12),-1);
if(!x346.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x345.value)+(((1.5707963267949)*(x346.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[12];
IkReal x347=IKsin(j13);
IkReal x348=IKcos(j13);
IkReal x349=(new_r10*sj11);
IkReal x350=(cj11*cj12);
IkReal x351=((1.0)*cj11);
IkReal x352=(cj12*sj11);
IkReal x353=(cj12*x347);
IkReal x354=((1.0)*x348);
evalcond[0]=(new_r21+((sj12*x347)));
evalcond[1]=((((-1.0)*sj12*x354))+new_r20);
evalcond[2]=(x347+((new_r00*sj11))+(((-1.0)*new_r10*x351)));
evalcond[3]=(x348+(((-1.0)*new_r11*x351))+((new_r01*sj11)));
evalcond[4]=(x353+((new_r11*sj11))+((cj11*new_r01)));
evalcond[5]=(((sj11*x348))+((x347*x350))+new_r01);
evalcond[6]=(x349+(((-1.0)*cj12*x354))+((cj11*new_r00)));
evalcond[7]=(((sj11*x347))+new_r00+(((-1.0)*x350*x354)));
evalcond[8]=((((-1.0)*x348*x351))+((x347*x352))+new_r11);
evalcond[9]=((((-1.0)*x347*x351))+new_r10+(((-1.0)*x352*x354)));
evalcond[10]=(((new_r01*x350))+x347+((new_r21*sj12))+((new_r11*x352)));
evalcond[11]=(((cj12*x349))+(((-1.0)*x354))+((new_r20*sj12))+((new_r00*x350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x355 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x355.valid){
continue;
}
CheckValue<IkReal> x356=IKPowWithIntegerCheck(IKsign(sj12),-1);
if(!x356.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x355.value)+(((1.5707963267949)*(x356.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[2];
evalcond[0]=(((sj12*(IKsin(j13))))+new_r21);
evalcond[1]=((((-1.0)*sj12*(IKcos(j13))))+new_r20);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[2];
IkReal x357=((1.0)*sj8);
IkReal x358=(cj10*cj9);
IkReal x359=(sj7*sj9);
IkReal x360=((1.0)*cj8);
IkReal x361=(cj9*sj10);
IkReal x362=(cj7*sj9);
IkReal x363=x155;
IkReal x364=x156;
IkReal x365=x157;
IkReal x366=x158;
IkReal x367=(cj7*x363);
IkReal x368=x160;
IkReal x369=x161;
IkReal x370=(((cj10*x362))+((sj7*x363)));
IkReal x371=(x367+(((-1.0)*cj10*x359)));
IkReal x372=((((-1.0)*sj10*x362))+((sj7*x369)));
IkReal x373=(((cj7*x369))+((sj10*x359)));
new_r00=(((r20*x364))+((r00*x371))+((r10*x370)));
new_r01=(((r01*x371))+((r11*x370))+((r21*x364)));
new_r02=(((r12*x370))+((r22*x364))+((r02*((x367+(((-1.0)*cj10*x359)))))));
new_r10=(((r00*x368))+(((-1.0)*r20*sj9*x357))+((r10*x365)));
new_r11=(((r01*x368))+(((-1.0)*r21*sj9*x357))+((r11*x365)));
new_r12=((((-1.0)*r22*sj9*x357))+((r12*x365))+((r02*x368)));
new_r20=(((r20*x366))+((r00*x373))+((r10*x372)));
new_r21=(((r01*x373))+((r11*x372))+((r21*x366)));
new_r22=(((r02*x373))+((r12*x372))+((r22*x366)));
j11eval[0]=sj12;
j11eval[1]=IKsign(sj12);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
IkReal x374=((1.0)*sj8);
IkReal x375=(cj10*cj9);
IkReal x376=(sj7*sj9);
IkReal x377=((1.0)*cj8);
IkReal x378=(cj9*sj10);
IkReal x379=(cj7*sj9);
IkReal x380=x155;
IkReal x381=x156;
IkReal x382=x157;
IkReal x383=x158;
IkReal x384=(cj7*x380);
IkReal x385=x160;
IkReal x386=x161;
IkReal x387=(((cj10*x379))+((sj7*x380)));
IkReal x388=((((-1.0)*cj10*x376))+x384);
IkReal x389=((((-1.0)*sj10*x379))+((sj7*x386)));
IkReal x390=(((sj10*x376))+((cj7*x386)));
new_r00=(((r20*x381))+((r10*x387))+((r00*x388)));
new_r01=(((r11*x387))+((r21*x381))+((r01*x388)));
new_r02=(((r22*x381))+((r12*x387))+((r02*(((((-1.0)*cj10*x376))+x384)))));
new_r10=(((r10*x382))+(((-1.0)*r20*sj9*x374))+((r00*x385)));
new_r11=(((r11*x382))+(((-1.0)*r21*sj9*x374))+((r01*x385)));
new_r12=(((r12*x382))+((r02*x385))+(((-1.0)*r22*sj9*x374)));
new_r20=(((r00*x390))+((r20*x383))+((r10*x389)));
new_r21=(((r11*x389))+((r21*x383))+((r01*x390)));
new_r22=(((r22*x383))+((r12*x389))+((r02*x390)));
j11eval[0]=sj12;
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x391=IKPowWithIntegerCheck(IKsign((((new_r01*new_r12))+(((-1.0)*new_r02*new_r11)))),-1);
if(!x391.valid){
continue;
}
CheckValue<IkReal> x392 = IKatan2WithCheck(IkReal((new_r02*sj13)),((-1.0)*new_r12*sj13),IKFAST_ATAN2_MAGTHRESH);
if(!x392.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x391.value)))+(x392.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[10];
IkReal x393=IKcos(j11);
IkReal x394=IKsin(j11);
IkReal x395=((1.0)*cj13);
IkReal x396=(sj13*x394);
IkReal x397=(sj13*x393);
IkReal x398=((1.0)*x393);
IkReal x399=(x393*x395);
evalcond[0]=(((new_r02*x393))+((new_r12*x394)));
evalcond[1]=((((-1.0)*new_r02*x394))+((new_r12*x393)));
evalcond[2]=(((new_r11*x394))+sj13+((new_r01*x393)));
evalcond[3]=(x397+((cj13*x394))+new_r01);
evalcond[4]=(sj13+(((-1.0)*new_r10*x398))+((new_r00*x394)));
evalcond[5]=(cj13+((new_r01*x394))+(((-1.0)*new_r11*x398)));
evalcond[6]=((((-1.0)*x399))+x396+new_r00);
evalcond[7]=((((-1.0)*x399))+x396+new_r11);
evalcond[8]=((((-1.0)*x395))+((new_r00*x393))+((new_r10*x394)));
evalcond[9]=((((-1.0)*x397))+(((-1.0)*x394*x395))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x400=IKPowWithIntegerCheck(IKsign((((new_r00*new_r12))+(((-1.0)*new_r02*new_r10)))),-1);
if(!x400.valid){
continue;
}
CheckValue<IkReal> x401 = IKatan2WithCheck(IkReal((cj13*new_r02)),((-1.0)*cj13*new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x401.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x400.value)))+(x401.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[10];
IkReal x402=IKcos(j11);
IkReal x403=IKsin(j11);
IkReal x404=((1.0)*sj13);
IkReal x405=(cj13*x403);
IkReal x406=(sj13*x403);
IkReal x407=(cj13*x402);
IkReal x408=((1.0)*x402);
IkReal x409=(x402*x404);
evalcond[0]=(((new_r12*x403))+((new_r02*x402)));
evalcond[1]=((((-1.0)*new_r02*x403))+((new_r12*x402)));
evalcond[2]=(cj13+((new_r10*x403))+((new_r00*x402)));
evalcond[3]=(x407+x406+new_r00);
evalcond[4]=(sj13+(((-1.0)*new_r10*x408))+((new_r00*x403)));
evalcond[5]=(cj13+((new_r01*x403))+(((-1.0)*new_r11*x408)));
evalcond[6]=(x405+new_r01+(((-1.0)*x409)));
evalcond[7]=(x405+new_r10+(((-1.0)*x409)));
evalcond[8]=(((new_r11*x403))+((new_r01*x402))+(((-1.0)*x404)));
evalcond[9]=((((-1.0)*x403*x404))+new_r11+(((-1.0)*x407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x411=IKPowWithIntegerCheck(sj12,-1);
if(!x411.valid){
continue;
}
IkReal x410=x411.value;
CheckValue<IkReal> x412=IKPowWithIntegerCheck(new_r12,-1);
if(!x412.valid){
continue;
}
if( IKabs((x410*(x412.value)*(((-1.0)+(cj12*cj12)+(new_r02*new_r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r02*x410)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x410*(x412.value)*(((-1.0)+(cj12*cj12)+(new_r02*new_r02)))))+IKsqr(((-1.0)*new_r02*x410))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((x410*(x412.value)*(((-1.0)+(cj12*cj12)+(new_r02*new_r02)))), ((-1.0)*new_r02*x410));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[18];
IkReal x413=IKcos(j11);
IkReal x414=IKsin(j11);
IkReal x415=((1.0)*cj13);
IkReal x416=((1.0)*sj12);
IkReal x417=(new_r10*x414);
IkReal x418=(cj12*x413);
IkReal x419=(cj12*x414);
IkReal x420=(new_r02*x413);
IkReal x421=(new_r11*x414);
IkReal x422=(sj12*x413);
IkReal x423=((1.0)*x413);
IkReal x424=(new_r12*x414);
evalcond[0]=(x422+new_r02);
evalcond[1]=(((sj12*x414))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x414))+((new_r12*x413)));
evalcond[3]=(sj12+x424+x420);
evalcond[4]=(sj13+(((-1.0)*new_r10*x423))+((new_r00*x414)));
evalcond[5]=(cj13+(((-1.0)*new_r11*x423))+((new_r01*x414)));
evalcond[6]=(((sj13*x418))+new_r01+((cj13*x414)));
evalcond[7]=(x421+((cj12*sj13))+((new_r01*x413)));
evalcond[8]=(((sj13*x414))+(((-1.0)*x415*x418))+new_r00);
evalcond[9]=(((sj13*x419))+(((-1.0)*x413*x415))+new_r11);
evalcond[10]=((((-1.0)*cj12*x415))+x417+((new_r00*x413)));
evalcond[11]=((((-1.0)*sj13*x423))+(((-1.0)*x415*x419))+new_r10);
evalcond[12]=(((new_r22*sj12))+((new_r12*x419))+((new_r02*x418)));
evalcond[13]=(sj13+((new_r11*x419))+((new_r21*sj12))+((new_r01*x418)));
evalcond[14]=((((-1.0)*new_r00*x413*x416))+(((-1.0)*x416*x417))+((cj12*new_r20)));
evalcond[15]=((((-1.0)*x416*x421))+((cj12*new_r21))+(((-1.0)*new_r01*x413*x416)));
evalcond[16]=((-1.0)+(((-1.0)*x416*x420))+(((-1.0)*x416*x424))+((cj12*new_r22)));
evalcond[17]=(((cj12*x417))+(((-1.0)*x415))+((new_r00*x418))+((new_r20*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x425=IKPowWithIntegerCheck(IKsign(sj12),-1);
if(!x425.valid){
continue;
}
CheckValue<IkReal> x426 = IKatan2WithCheck(IkReal(((-1.0)*new_r12)),((-1.0)*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x426.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x425.value)))+(x426.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[18];
IkReal x427=IKcos(j11);
IkReal x428=IKsin(j11);
IkReal x429=((1.0)*cj13);
IkReal x430=((1.0)*sj12);
IkReal x431=(new_r10*x428);
IkReal x432=(cj12*x427);
IkReal x433=(cj12*x428);
IkReal x434=(new_r02*x427);
IkReal x435=(new_r11*x428);
IkReal x436=(sj12*x427);
IkReal x437=((1.0)*x427);
IkReal x438=(new_r12*x428);
evalcond[0]=(x436+new_r02);
evalcond[1]=(((sj12*x428))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x428))+((new_r12*x427)));
evalcond[3]=(sj12+x438+x434);
evalcond[4]=(sj13+(((-1.0)*new_r10*x437))+((new_r00*x428)));
evalcond[5]=(cj13+(((-1.0)*new_r11*x437))+((new_r01*x428)));
evalcond[6]=(((cj13*x428))+((sj13*x432))+new_r01);
evalcond[7]=(x435+((cj12*sj13))+((new_r01*x427)));
evalcond[8]=((((-1.0)*x429*x432))+((sj13*x428))+new_r00);
evalcond[9]=(((sj13*x433))+(((-1.0)*x427*x429))+new_r11);
evalcond[10]=(x431+(((-1.0)*cj12*x429))+((new_r00*x427)));
evalcond[11]=((((-1.0)*x429*x433))+(((-1.0)*sj13*x437))+new_r10);
evalcond[12]=(((new_r22*sj12))+((new_r12*x433))+((new_r02*x432)));
evalcond[13]=(((new_r01*x432))+sj13+((new_r11*x433))+((new_r21*sj12)));
evalcond[14]=((((-1.0)*x430*x431))+(((-1.0)*new_r00*x427*x430))+((cj12*new_r20)));
evalcond[15]=((((-1.0)*x430*x435))+((cj12*new_r21))+(((-1.0)*new_r01*x427*x430)));
evalcond[16]=((-1.0)+(((-1.0)*x430*x438))+(((-1.0)*x430*x434))+((cj12*new_r22)));
evalcond[17]=(((cj12*x431))+((new_r00*x432))+(((-1.0)*x429))+((new_r20*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "f1b4ece80cdeeec66467d9998ec73679"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
