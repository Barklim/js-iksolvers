/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-05-18 22:39:22.869124
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44;
x0=IKcos(j[1]);
x1=IKcos(j[2]);
x2=IKsin(j[2]);
x3=IKsin(j[3]);
x4=IKcos(j[3]);
x5=IKsin(j[1]);
x6=IKcos(j[5]);
x7=IKsin(j[5]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=((0.707106781186548)*(IKcos(j[0])));
x11=((0.707106781186548)*(IKsin(j[0])));
x12=((0.707106781186548)*x7);
x13=((0.707106781186548)*x6);
x14=((0.5)*x3);
x15=((0.5)*x9);
x16=((1.0)*x1);
x17=((0.5)*x8);
x18=((1.0)*x2);
x19=((1.0)*x3);
x20=(x0*x2);
x21=(x0*x1);
x22=((-0.5)*x8);
x23=(x4*x5);
x24=((-1.0)*x2);
x25=(x3*x5);
x26=((-0.5)*x9);
x27=((-0.5)*x3);
x28=((((-1.0)*x11))+x10);
x29=((((-1.0)*x10))+x11);
x30=(x11+x10);
x31=((-1.0)*x30);
x32=((1.0)*x31);
x33=(x2*x31);
x34=(x31*x5);
x35=(((x1*x31))+((x20*x29)));
x36=(((x20*x31))+((x1*x28)));
x37=((((-1.0)*x18*x28))+(((-1.0)*x0*x16*x30)));
x38=(x36*x8);
x39=((((-1.0)*x21*x28))+((x24*x31)));
x40=(x3*x37);
x41=(((x25*x29))+((x4*((((x21*x28))+x33)))));
x42=(((x25*x31))+((x4*((((x21*x30))+((x2*x28)))))));
x43=(x42*x9);
IkReal x45=((1.0)*x16);
IkReal x46=((1.0)*x0);
x44=(((x12*((((x9*(((((-1.0)*x23*x45))+(((-1.0)*x19*x46))))))+((x2*x5*x8))))))+((x13*(((((-1.0)*x25*x45))+((x4*x46)))))));
eerot[0]=((((((((((((-0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((-0.5)*(((((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((((((-0.5)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((-0.5)*(((((((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((((((((((0.5)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((0.5)*(((((((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((0.5)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((0.5)*(((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((((((((((-0.5)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((((((-0.5)*(((((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[6]))))+(((((((0.707106781186548)*(IKcos(j[4]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.707106781186548)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKsin(j[4]))))))*(IKcos(j[6]))))+(((((((-0.707106781186548)*(((((IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[4]))))+(((((((-1.0)*(IKcos(j[1]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((-0.707106781186548)*(((((IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[1]))*(IKcos(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((((((((((0.5)*(((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((0.5)*(((((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKcos(j[4]))))))*(IKcos(j[6])))));
eerot[1]=((((((((-0.707106781186548)*(((((IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[4]))))+(((((((-1.0)*(IKcos(j[1]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((-0.707106781186548)*(((((IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[1]))*(IKcos(j[3]))))))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((((((((((0.5)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((0.5)*(((((((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((0.5)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((0.5)*(((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((((((((((-0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((-0.5)*(((((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((((((-0.5)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((-0.5)*(((((((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((((((-0.707106781186548)*(IKcos(j[4]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.707106781186548)*(((((1.0)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((1.0)*(IKcos(j[1]))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKsin(j[6]))))+(((((((((((0.5)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((((((0.5)*(((((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKsin(j[6]))))+(((((((((((-0.5)*(((((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.5)*(((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((-0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))))*(IKsin(j[6])))));
IkReal x47=((0.5)*x23);
eerot[2]=(((x7*((((x26*x42))+((x22*x36))))))+((x6*((((x14*x37))+((x31*x47))))))+(((-1.0)*x44))+((x7*((((x17*x35))+((x15*x41))))))+((x6*(((((-1.0)*x29*x47))+((x27*x39)))))));
eetrans[0]=((-0.350177)+(((((((((((0.0159099025766973)*(IKcos(j[0]))))+(((0.0159099025766973)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.0159099025766973)*(IKcos(j[0]))))+(((0.0159099025766973)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.194454364826301)*(IKsin(j[0]))))+(((-0.194454364826301)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.0318198051533946)*(IKcos(j[1]))*(IKsin(j[3]))))+(((((((-0.194454364826301)*(IKsin(j[0]))))+(((0.194454364826301)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.388908729652601)*(IKcos(j[1]))))+(((((((-0.106066017177982)*(IKsin(j[0]))))+(((-0.106066017177982)*(IKcos(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((((((((((0.0159099025766973)*(IKcos(j[0]))))+(((-0.0159099025766973)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.0159099025766973)*(IKcos(j[0]))))+(((0.0159099025766973)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((((((-0.023975)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((-0.023975)*(((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.0169528850789475)*(IKcos(j[0]))))+(((-0.0169528850789475)*(IKsin(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[5]))))+(((((((-0.106066017177982)*(IKsin(j[0]))))+(((0.106066017177982)*(IKcos(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((((((((((0.023975)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.023975)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.0169528850789475)*(IKcos(j[0]))))+(((-0.0169528850789475)*(IKsin(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[5]))))+(((((((0.0159099025766973)*(IKcos(j[0]))))+(((-0.0159099025766973)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((-0.0159099025766973)*(IKcos(j[0]))))+(((-0.0159099025766973)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((0.212132034355964)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-0.0318198051533946)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((((((0.0159099025766973)*(IKcos(j[0]))))+(((-0.0159099025766973)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((((((-0.0159099025766973)*(IKcos(j[0]))))+(((-0.0159099025766973)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.0159099025766973)*(IKcos(j[0]))))+(((0.0159099025766973)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0318198051533946)*(IKcos(j[2]))*(IKsin(j[1]))))+(((((((((((-0.023975)*(((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.023975)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((-0.023975)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.023975)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((((-0.0159099025766973)*(IKcos(j[0]))))+(((-0.0159099025766973)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((((((0.023975)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((0.023975)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((((((0.023975)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.023975)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((-0.707106781186548)*(((((-0.04795)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((-0.04795)*(IKcos(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.033905770157895)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((((0.033905770157895)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-0.033905770157895)*(IKcos(j[1]))*(IKcos(j[3]))))))*(IKcos(j[5]))))+(((-0.212132034355964)*(IKcos(j[1]))*(IKcos(j[3]))))+(((((((((((0.106066017177982)*(IKsin(j[0]))))+(((-0.106066017177982)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.106066017177982)*(IKsin(j[0]))))+(((-0.106066017177982)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((((((-0.106066017177982)*(IKsin(j[0]))))+(((0.106066017177982)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((-0.106066017177982)*(IKsin(j[0]))))+(((-0.106066017177982)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3])))));
eerot[3]=((((((((((((0.5)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((((((0.5)*(((((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[6]))))+(((((((((((0.5)*(((((((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((0.5)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((0.5)*(((((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((((((0.707106781186548)*(IKcos(j[4]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.707106781186548)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKsin(j[4]))))))*(IKcos(j[6]))))+(((((((((((-0.5)*(((((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.5)*(((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((-0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))))*(IKcos(j[6]))))+(((((((-0.707106781186548)*(((((IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[4]))))+(((((((-1.0)*(IKcos(j[1]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((-0.707106781186548)*(((((IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[1]))*(IKcos(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((((((((((-0.5)*(((((((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.5)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((-0.5)*(((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.5)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKsin(j[5]))))))*(IKsin(j[6])))));
eerot[4]=((((((((-0.707106781186548)*(((((IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[4]))))+(((((((-1.0)*(IKcos(j[1]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((-0.707106781186548)*(((((IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[1]))*(IKcos(j[3]))))))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((((((((((0.5)*(((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((0.5)*(((((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKcos(j[4]))))))*(IKsin(j[6]))))+(((((((((((0.5)*(((((((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((0.5)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((0.5)*(((((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((((((-0.707106781186548)*(IKcos(j[4]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.707106781186548)*(((((1.0)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((1.0)*(IKcos(j[1]))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKsin(j[6]))))+(((((((((((-0.5)*(((((((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.5)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((-0.5)*(((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.5)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((((((((((-0.5)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((((((-0.5)*(((((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKsin(j[6])))));
IkReal x48=((0.5)*x23);
eerot[5]=((((-1.0)*x44))+((x7*((((x17*x36))+((x15*x42))))))+((x6*(((((-1.0)*x31*x48))+((x27*(((((-1.0)*x21*x30))+((x24*x28))))))))))+((x6*((((x29*x48))+((x14*(((((-1.0)*x18*x31))+(((-1.0)*x0*x16*x28))))))))))+((x7*((((x26*x41))+((x22*x35)))))));
eetrans[1]=((-0.350177)+(((((((0.0159099025766973)*(IKcos(j[0]))))+(((0.0159099025766973)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.0318198051533946)*(IKcos(j[1]))*(IKsin(j[3]))))+(((-0.388908729652601)*(IKcos(j[1]))))+(((((((0.106066017177982)*(IKsin(j[0]))))+(((-0.106066017177982)*(IKcos(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((((((((((0.0159099025766973)*(IKcos(j[0]))))+(((-0.0159099025766973)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((-0.0159099025766973)*(IKcos(j[0]))))+(((-0.0159099025766973)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((((((0.023975)*(((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.023975)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.0169528850789475)*(IKcos(j[0]))))+(((0.0169528850789475)*(IKsin(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[5]))))+(((((((0.194454364826301)*(IKsin(j[0]))))+(((-0.194454364826301)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.0159099025766973)*(IKcos(j[0]))))+(((0.0159099025766973)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((((((0.0169528850789475)*(IKcos(j[0]))))+(((0.0169528850789475)*(IKsin(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((((((-0.023975)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.023975)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((((((((((-0.0159099025766973)*(IKcos(j[0]))))+(((0.0159099025766973)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.0159099025766973)*(IKcos(j[0]))))+(((-0.0159099025766973)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((((((0.106066017177982)*(IKsin(j[0]))))+(((0.106066017177982)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((-0.106066017177982)*(IKsin(j[0]))))+(((0.106066017177982)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.0159099025766973)*(IKcos(j[0]))))+(((-0.0159099025766973)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((((((0.023975)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((0.023975)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((((((0.023975)*(((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.023975)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((0.0159099025766973)*(IKcos(j[0]))))+(((0.0159099025766973)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((((((-0.023975)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.023975)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((-0.023975)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.023975)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((0.212132034355964)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-0.0318198051533946)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((((((-0.0159099025766973)*(IKcos(j[0]))))+(((0.0159099025766973)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((0.0318198051533946)*(IKcos(j[2]))*(IKsin(j[1]))))+(((((((-0.707106781186548)*(((((-0.04795)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((-0.04795)*(IKcos(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.033905770157895)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((((0.0159099025766973)*(IKcos(j[0]))))+(((0.0159099025766973)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((((((((((0.106066017177982)*(IKsin(j[0]))))+(((-0.106066017177982)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((0.106066017177982)*(IKsin(j[0]))))+(((0.106066017177982)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.033905770157895)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-0.033905770157895)*(IKcos(j[1]))*(IKcos(j[3]))))))*(IKcos(j[5]))))+(((-0.212132034355964)*(IKcos(j[1]))*(IKcos(j[3]))))+(((((((0.194454364826301)*(IKcos(j[0]))))+(((0.194454364826301)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((0.106066017177982)*(IKsin(j[0]))))+(((0.106066017177982)*(IKcos(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1])))));
eerot[6]=((((((((0.707106781186548)*(((((((((((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((0.707106781186548)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((((((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((((((0.707106781186548)*(((((-1.0)*(((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-1.0)*(((((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.707106781186548)*(((((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))))*(IKcos(j[6]))))+(((((((0.707106781186548)*(((((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((0.707106781186548)*(((((((((((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((((((0.707106781186548)*(((((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-1.0)*(((((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.707106781186548)*(((((-1.0)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))))*(IKcos(j[6])))));
eerot[7]=((((((((0.707106781186548)*(((((((((((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((0.707106781186548)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((((((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((((((0.707106781186548)*(((((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((0.707106781186548)*(((((((((((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((((((0.707106781186548)*(((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((((((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.707106781186548)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))))*(IKsin(j[6]))))+(((((((0.707106781186548)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((0.707106781186548)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((((((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKsin(j[6])))));
IkReal x49=((1.0)*x23);
eerot[8]=(((x12*((((x41*x9))+((x35*x8))))))+((x13*(((((-1.0)*x29*x49))+(((-1.0)*x3*x39))))))+((x13*(((((-1.0)*x32*x49))+(((-1.0)*x19*x37))))))+((x12*((x38+x43)))));
eetrans[2]=((0.378361)+(((((((0.707106781186548)*(((((-0.0318198051533946)*(IKcos(j[0]))))+(((-0.0318198051533946)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.707106781186548)*(((((-0.0318198051533946)*(IKcos(j[0]))))+(((0.0318198051533946)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((0.707106781186548)*(((((0.04795)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((0.04795)*(((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.707106781186548)*(((((0.04795)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((0.04795)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((((0.0225)*(IKcos(j[0]))))+(((-0.0225)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.0225)*(IKcos(j[0]))))+(((-0.0225)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.275)*(IKcos(j[0]))))+(((0.275)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((0.707106781186548)*(((((0.033905770157895)*(IKcos(j[0]))))+(((-0.033905770157895)*(IKsin(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((0.707106781186548)*(((((-0.04795)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((-0.04795)*(((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((((((0.15)*(IKcos(j[0]))))+(((0.15)*(IKsin(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((((((0.0225)*(IKcos(j[0]))))+(((-0.0225)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((((((0.707106781186548)*(((((0.0318198051533946)*(IKcos(j[0]))))+(((0.0318198051533946)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.707106781186548)*(((((-0.0318198051533946)*(IKcos(j[0]))))+(((0.0318198051533946)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.0225)*(IKsin(j[0]))))+(((0.0225)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((((((0.0225)*(IKsin(j[0]))))+(((0.0225)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((0.707106781186548)*(((((0.212132034355964)*(IKcos(j[0]))))+(((-0.212132034355964)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.707106781186548)*(((((-0.212132034355964)*(IKcos(j[0]))))+(((-0.212132034355964)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.707106781186548)*(((((0.033905770157895)*(IKcos(j[0]))))+(((0.033905770157895)*(IKsin(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((0.707106781186548)*(((((-0.04795)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.04795)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((((((0.707106781186548)*(((((0.212132034355964)*(IKcos(j[0]))))+(((0.212132034355964)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.707106781186548)*(((((0.212132034355964)*(IKcos(j[0]))))+(((-0.212132034355964)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.0225)*(IKcos(j[0]))))+(((-0.0225)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((0.707106781186548)*(((((0.04795)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((0.04795)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((0.707106781186548)*(((((0.04795)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.04795)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((-0.275)*(IKsin(j[0]))))+(((0.275)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.15)*(IKsin(j[0]))))+(((0.15)*(IKcos(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1])))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,j9,cj9,sj9,htj9,j9mul,j10,cj10,sj10,htj10,j10mul,j6,cj6,sj6,htj6,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij4[2], _nj4,_ij5[2], _nj5,_ij7[2], _nj7,_ij8[2], _nj8,_ij9[2], _nj9,_ij10[2], _nj10,_ij6[2], _nj6;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; j9=numeric_limits<IkReal>::quiet_NaN(); _ij9[0] = -1; _ij9[1] = -1; _nj9 = -1; j10=numeric_limits<IkReal>::quiet_NaN(); _ij10[0] = -1; _ij10[1] = -1; _nj10 = -1;  _ij6[0] = -1; _ij6[1] = -1; _nj6 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j6=pfree[0]; cj6=cos(pfree[0]); sj6=sin(pfree[0]), htj6=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((-0.5)*r11))+(((0.5)*r01))+(((0.707106781186548)*r21)));
new_r01=((((-0.707106781186548)*r20))+(((0.5)*r10))+(((-0.5)*r00)));
new_r02=((((-0.5)*r12))+(((0.5)*r02))+(((0.707106781186548)*r22)));
new_px=((-0.267541628836523)+(((-0.033905770157895)*r22))+(((0.707106781186548)*pz))+(((0.023975)*r12))+(((0.5)*px))+(((-0.023975)*r02))+(((-0.5)*py)));
new_r10=((((0.5)*r11))+(((-0.5)*r01))+(((0.707106781186548)*r21)));
new_r11=((((-0.707106781186548)*r20))+(((-0.5)*r10))+(((0.5)*r00)));
new_r12=((((0.5)*r12))+(((-0.5)*r02))+(((0.707106781186548)*r22)));
new_py=((-0.267541628836523)+(((-0.033905770157895)*r22))+(((0.023975)*r02))+(((0.707106781186548)*pz))+(((0.5)*py))+(((-0.5)*px))+(((-0.023975)*r12)));
new_r20=((((-0.707106781186548)*r01))+(((-0.707106781186548)*r11)));
new_r21=((((0.707106781186548)*r10))+(((0.707106781186548)*r00)));
new_r22=((((-0.707106781186548)*r02))+(((-0.707106781186548)*r12)));
new_pz=((-0.495225062631123)+(((0.033905770157895)*r02))+(((0.033905770157895)*r12))+(((-0.707106781186548)*py))+(((-0.707106781186548)*px)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x50=((1.0)*px);
IkReal x51=((1.0)*pz);
IkReal x52=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x52))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x51)));
rxp0_2=((((-1.0)*r10*x50))+((py*r00)));
rxp1_0=((((-1.0)*r21*x52))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x51)));
rxp1_2=((((-1.0)*r11*x50))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x52)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x51)));
rxp2_2=((((-1.0)*r12*x50))+((py*r02)));
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
if( (((1.18441410190393)+(((-2.9867963734811)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((1.18441410190393)+(((-2.9867963734811)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x53=IKasin(((1.18441410190393)+(((-2.9867963734811)*pp))));
j7array[0]=((-1.34027003705633)+(((-1.0)*x53)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((1.80132261653346)+x53);
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
IkReal j5eval[2];
IkReal x54=cj6*cj6;
IkReal x55=sj7*sj7;
IkReal x56=cj7*cj7;
IkReal x57=((3.0)*cj6);
IkReal x58=((13.3333333333333)*sj7*x54);
j5eval[0]=((149.382716049383)+(((44.4444444444444)*x54*x55))+(((-2.0)*cj7*x54))+(((24.4444444444444)*sj7))+(((-1.0)*cj7*x58))+x58+x55+x54+(((13.3333333333333)*cj7*sj7))+(((44.4444444444444)*x56))+(((162.962962962963)*cj7))+((x54*x56)));
j5eval[1]=((IKabs(((((-1.0)*cj7*x57))+(((20.0)*cj6*sj7))+x57)))+(((66.6666666666667)*(IKabs(((-0.55)+(((-0.045)*sj7))+(((-0.3)*cj7))))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=((px*px)+(py*py));
j4eval[1]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x59=px*px;
IkReal x60=py*py;
IkReal x61=cj6*cj6;
IkReal x62=sj6*sj6;
IkReal x63=px*px*px*px;
IkReal x64=sj6*sj6*sj6*sj6;
IkReal x65=cj6*cj6*cj6*cj6;
IkReal x66=py*py*py*py;
IkReal x67=py*py*py;
IkReal x68=px*px*px;
IkReal x69=((2.0)*x65);
IkReal x70=((2.0)*x64);
IkReal x71=(py*x68);
IkReal x72=((2.0)*px*x67);
IkReal x73=(x59*x60);
IkReal x74=((2.0)*x61*x62);
IkReal x75=((4.0)*x61*x62);
j4eval[0]=((((-1.0)*px*x67*x70))+(((-1.0)*px*x67*x75))+(((-1.0)*x70*x71))+(((-1.0)*px*x67*x69))+((x69*x73))+(((-1.0)*x71*x75))+((x63*x64))+((x63*x65))+((x63*x74))+((x70*x73))+(((-1.0)*x69*x71))+((x73*x75))+((x66*x74))+((x64*x66))+((x65*x66)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4, j5]

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x76=px*px;
IkReal x77=cj6*cj6;
IkReal x78=py*py;
IkReal x79=sj6*sj6;
IkReal x80=((0.0318198051533946)*py*sj6);
IkReal x81=((0.5)*x77);
IkReal x82=((1.0)*px*py);
IkReal x83=((0.212132034355964)*sj6*sj7);
IkReal x84=((0.5)*x79);
IkReal x85=((0.0318198051533946)*px*sj6);
IkReal x86=(x78*x81);
IkReal x87=(x76*x81);
IkReal x88=(x78*x84);
IkReal x89=(x76*x84);
IkReal x90=(x88+x86);
IkReal x91=(x89+x87);
IkReal x92=(x91+(((-1.0)*x90)));
IkReal x93=((((-1.0)*x77*x82))+(((-1.0)*x79*x82))+x91+x90);
CheckValue<IkReal> x96 = IKatan2WithCheck(IkReal(x93),x92,IKFAST_ATAN2_MAGTHRESH);
if(!x96.valid){
continue;
}
IkReal x94=((1.0)*(x96.value));
if((((x93*x93)+(x92*x92))) < -0.00001)
continue;
CheckValue<IkReal> x97=IKPowWithIntegerCheck(IKabs(IKsqrt(((x93*x93)+(x92*x92)))),-1);
if(!x97.valid){
continue;
}
if( (((x97.value)*(((((-1.0)*py*x83))+(((-1.0)*cj7*x85))+x85+((px*x83))+((cj7*x80))+(((-1.0)*x80)))))) < -1-IKFAST_SINCOS_THRESH || (((x97.value)*(((((-1.0)*py*x83))+(((-1.0)*cj7*x85))+x85+((px*x83))+((cj7*x80))+(((-1.0)*x80)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x95=IKasin(((x97.value)*(((((-1.0)*py*x83))+(((-1.0)*cj7*x85))+x85+((px*x83))+((cj7*x80))+(((-1.0)*x80))))));
j4array[0]=((((-1.0)*x95))+(((-1.0)*x94)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+x95+(((-1.0)*x94)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x98=((0.707106781186548)*py);
IkReal x99=((0.707106781186548)*px);
IkReal x100=IKcos(j4);
IkReal x101=py*py;
IkReal x102=cj6*cj6;
IkReal x103=px*px;
IkReal x104=sj6*sj6;
IkReal x105=IKsin(j4);
IkReal x106=(sj6*sj7);
IkReal x107=((0.045)*sj6);
IkReal x108=((0.5)*x103);
IkReal x109=((0.0318198051533946)*py*sj6);
IkReal x110=((0.5)*x101);
IkReal x111=((0.0318198051533946)*px*sj6);
IkReal x112=((1.0)*px*py);
IkReal x113=(x102*x110);
IkReal x114=(x102*x108);
IkReal x115=(x104*x110);
IkReal x116=(x104*x108);
IkReal x117=(x113+x115);
IkReal x118=(x116+x114);
evalcond[0]=((((0.3)*x106))+x107+(((-1.0)*cj7*x107))+((x100*((x99+(((-1.0)*x98))))))+((x105*((x99+x98)))));
evalcond[1]=((((-0.212132034355964)*px*x106))+((x100*(((((-1.0)*x118))+x117))))+((cj7*x109))+(((-1.0)*x109))+((cj7*x111))+(((-1.0)*x111))+(((-0.212132034355964)*py*x106))+((x105*(((((-1.0)*x117))+(((-1.0)*x118))+(((-1.0)*x102*x112))+(((-1.0)*x104*x112)))))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x119=(py*sj7);
IkReal x120=((1.0)*cj4);
IkReal x121=((0.0318198051533946)*sj4);
IkReal x122=(cj7*sj4);
IkReal x123=((6.66666666666667)*px);
IkReal x124=((0.388908729652601)*sj4);
IkReal x125=((0.212132034355964)*py);
IkReal x126=((0.0318198051533946)*cj4);
IkReal x127=(px*sj7);
IkReal x128=((12.2222222222222)*sj4);
IkReal x129=((6.66666666666667)*py);
IkReal x130=(cj4*cj7);
IkReal x131=(cj4*py);
IkReal x132=(cj6*pz);
IkReal x133=((0.212132034355964)*px);
IkReal x134=(cj4*px);
j5eval[0]=((((-1.0)*x119*x120))+(((-1.0)*x123*x130))+(((-1.0)*x120*x127))+(((-1.0)*py*x128))+(((-12.2222222222222)*x131))+(((-12.2222222222222)*x134))+(((-1.0)*sj4*x119))+(((1.4142135623731)*cj7*x132))+((px*x128))+((x122*x123))+(((-1.4142135623731)*x132))+(((-9.42809041582063)*sj7*x132))+((sj4*x127))+(((-1.0)*x129*x130))+(((-1.0)*x122*x129)));
j5eval[1]=IKsign(((((-0.045)*x132))+(((-1.0)*x119*x121))+(((-1.0)*x119*x126))+(((0.045)*cj7*x132))+(((-1.0)*py*x124))+((x121*x127))+(((-1.0)*x126*x127))+((x122*x133))+((px*x124))+(((-1.0)*x125*x130))+(((-0.3)*sj7*x132))+(((-0.388908729652601)*x134))+(((-0.388908729652601)*x131))+(((-1.0)*x130*x133))+(((-1.0)*x122*x125))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x135=(py*sj4);
IkReal x136=(pz*sj7);
IkReal x137=(cj7*pz);
IkReal x138=(cj4*px);
IkReal x139=((0.212132034355964)*sj7);
IkReal x140=((0.0318198051533946)*cj7);
IkReal x141=((1.0)*cj7);
IkReal x142=((0.0318198051533946)*cj6);
IkReal x143=((6.66666666666667)*cj6*sj7);
IkReal x144=(cj4*cj6*py);
IkReal x145=(cj6*px*sj4);
j5eval[0]=(((cj7*x145))+((cj6*x138))+((cj6*x135))+((cj4*py*x143))+((x138*x143))+(((-1.0)*px*sj4*x143))+(((-1.4142135623731)*x136))+((x135*x143))+x144+(((-9.42809041582063)*x137))+(((-1.0)*x145))+(((-1.0)*x141*x144))+(((-1.0)*cj6*x138*x141))+(((-1.0)*cj6*x135*x141))+(((-17.2848324290045)*pz)));
j5eval[1]=IKsign(((((-0.045)*x136))+(((-0.55)*pz))+((cj6*x135*x139))+((x140*x145))+((cj4*py*x142))+(((-1.0)*x140*x144))+((x138*x142))+(((-1.0)*px*sj4*x142))+((x135*x142))+(((-1.0)*x139*x145))+(((-0.3)*x137))+((cj6*x138*x139))+(((-1.0)*cj6*x138*x140))+(((-1.0)*cj6*x135*x140))+((x139*x144))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x146=cj6*cj6;
IkReal x147=cj7*cj7;
IkReal x148=(cj7*sj7);
IkReal x149=((0.087975)*x147);
IkReal x150=((21.7222222222222)*x147);
IkReal x151=((0.027)*x146);
IkReal x152=(cj7*x146);
IkReal x153=((6.66666666666667)*x146);
j5eval[0]=((-75.1913580246914)+(((-22.7222222222222)*x146))+(((-1.0)*x150))+(((-12.2222222222222)*sj7))+(((-6.66666666666667)*x148))+x152+((x146*x150))+((x148*x153))+(((-1.0)*sj7*x153))+(((-81.4814814814815)*cj7)));
j5eval[1]=IKsign(((-0.304525)+(((-1.0)*x149))+(((0.00405)*x152))+(((-0.0495)*sj7))+(((-0.027)*x148))+((x146*x149))+((x148*x151))+(((-1.0)*sj7*x151))+(((-0.092025)*x146))+(((-0.33)*cj7))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x154=((0.707106781186548)*py);
IkReal x155=((0.707106781186548)*px);
IkReal x156=((0.045)+((cj4*x155))+((sj4*x154))+((sj4*x155))+(((-0.045)*cj7))+(((0.3)*sj7))+(((-1.0)*cj4*x154)));
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j6), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));
evalcond[2]=x156;
evalcond[3]=x156;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x157=((-1.0)*py);
pz=0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x157);
rxp0_1=(px*r20);
rxp1_0=(r21*x157);
rxp1_1=(px*r21);
rxp2_0=(r22*x157);
rxp2_1=(px*r22);
j5eval[0]=(((cj4*py))+((cj4*px))+(((-1.0)*px*sj4))+((py*sj4)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x158=((-1.0)*py);
pz=0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x158);
rxp0_1=(px*r20);
rxp1_0=(r21*x158);
rxp1_1=(px*r21);
rxp2_0=(r22*x158);
rxp2_1=(px*r22);
j5eval[0]=((12.2222222222222)+sj7+(((6.66666666666667)*cj7)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x159=(py+px);
IkReal x160=((((-1.0)*px))+py);
IkReal x162 = ((x160*x160)+(x159*x159));
if(IKabs(x162)==0){
continue;
}
IkReal x161=pow(x162,-0.5);
CheckValue<IkReal> x163 = IKatan2WithCheck(IkReal(x159),x160,IKFAST_ATAN2_MAGTHRESH);
if(!x163.valid){
continue;
}
IkReal gconst0=((-1.0)*(x163.value));
IkReal gconst1=((-1.0)*x159*x161);
IkReal gconst2=(x160*x161);
IkReal x164=j4;
IkReal x165=((0.707106781186548)*gconst2);
IkReal x166=((0.707106781186548)*gconst1);
CheckValue<IkReal> x170 = IKatan2WithCheck(IkReal((py+px)),((((-1.0)*px))+py),IKFAST_ATAN2_MAGTHRESH);
if(!x170.valid){
continue;
}
IkReal x167=x170.value;
IkReal x168=x167;
IkReal x169=((0.045)+((py*x166))+(((-1.0)*py*x165))+(((-0.045)*cj7))+((px*x165))+((px*x166))+(((0.3)*sj7)));
if(((((x164*x167))+((x167*x168))+((j4*x168))+((j4*x164)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((x164*x167))+((x167*x168))+((j4*x168))+((j4*x164)))))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((-1.0)*(px*px)))+(((0.0765)*sj7))+(((-1.0)*(py*py)))+(((0.32595)*cj7)));
evalcond[2]=x169;
evalcond[3]=x169;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x171=((0.707106781186548)*px);
IkReal x172=((0.707106781186548)*py);
CheckValue<IkReal> x174=IKPowWithIntegerCheck(((((-1.0)*gconst1*x171))+((gconst1*x172))+((gconst2*x171))+((gconst2*x172))),-1);
if(!x174.valid){
continue;
}
IkReal x173=x174.value;
sj5array[0]=((((0.55)*x173))+(((0.045)*sj7*x173))+(((0.3)*cj7*x173)));
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x175=IKcos(j5);
IkReal x176=IKsin(j5);
IkReal x177=px*px;
IkReal x178=py*py;
IkReal x179=(gconst2*px);
IkReal x180=(gconst2*py);
IkReal x181=(gconst1*px);
IkReal x182=(gconst1*py);
IkReal x183=((0.777817459305202)*x176);
IkReal x184=((0.707106781186548)*x175);
IkReal x185=((0.588235294117647)*x175);
evalcond[0]=((((-1.0)*x178*x185))+(((-0.316735294117647)*x175))+(((-1.0)*x177*x185))+(((-0.108264705882353)*cj7*x175)));
evalcond[1]=(((x180*x184))+((x179*x184))+((x182*x184))+(((-1.0)*x181*x184)));
evalcond[2]=((((-0.707106781186548)*x180))+(((-0.707106781186548)*x182))+(((0.55)*x176))+(((0.045)*sj7*x176))+(((-0.707106781186548)*x179))+(((0.3)*cj7*x176))+(((0.707106781186548)*x181)));
evalcond[3]=((-0.2125)+((x180*x183))+((x179*x183))+(((-1.0)*x178))+(((-1.0)*x177))+(((0.0636396103067893)*x180))+(((-0.0636396103067893)*x181))+(((-0.0636396103067893)*x182))+(((-0.0636396103067893)*x179))+((x182*x183))+(((-1.0)*x181*x183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x763=(py+px);
IkReal x764=((((-1.0)*px))+py);
IkReal x766 = ((x764*x764)+(x763*x763));
if(IKabs(x766)==0){
continue;
}
IkReal x765=pow(x766,-0.5);
CheckValue<IkReal> x767 = IKatan2WithCheck(IkReal(x763),x764,IKFAST_ATAN2_MAGTHRESH);
if(!x767.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x767.value))));
IkReal gconst4=((1.0)*x763*x765);
IkReal gconst5=((-1.0)*x764*x765);
IkReal x768=j4;
IkReal x769=((0.707106781186548)*gconst5);
IkReal x770=((0.707106781186548)*gconst4);
CheckValue<IkReal> x774 = IKatan2WithCheck(IkReal((py+px)),((((-1.0)*px))+py),IKFAST_ATAN2_MAGTHRESH);
if(!x774.valid){
continue;
}
IkReal x771=x774.value;
IkReal x772=x771;
IkReal x773=((0.045)+(((-1.0)*py*x769))+((px*x769))+((px*x770))+(((-0.045)*cj7))+(((0.3)*sj7))+((py*x770)));
if((((9.86960440108936)+((x771*x772))+(((-3.14159265358979)*x768))+(((-3.14159265358979)*x771))+(((-3.14159265358979)*x772))+((j4*x768))+(((-3.14159265358979)*j4))+((j4*x772))+((x768*x771)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+((x771*x772))+(((-3.14159265358979)*x768))+(((-3.14159265358979)*x771))+(((-3.14159265358979)*x772))+((j4*x768))+(((-3.14159265358979)*j4))+((j4*x772))+((x768*x771)))))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((-1.0)*(px*px)))+(((0.0765)*sj7))+(((-1.0)*(py*py)))+(((0.32595)*cj7)));
evalcond[2]=x773;
evalcond[3]=x773;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x775=((0.707106781186548)*gconst5);
IkReal x776=((0.707106781186548)*gconst4);
CheckValue<IkReal> x778=IKPowWithIntegerCheck(((((-1.0)*px*x776))+((px*x775))+((py*x775))+((py*x776))),-1);
if(!x778.valid){
continue;
}
IkReal x777=x778.value;
sj5array[0]=((((0.045)*sj7*x777))+(((0.3)*cj7*x777))+(((0.55)*x777)));
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x779=IKcos(j5);
IkReal x780=IKsin(j5);
IkReal x781=px*px;
IkReal x782=py*py;
IkReal x783=((0.0636396103067893)*py);
IkReal x784=(gconst4*px);
IkReal x785=(gconst5*py);
IkReal x786=(gconst4*py);
IkReal x787=(gconst5*px);
IkReal x788=((0.707106781186548)*x779);
IkReal x789=((0.777817459305202)*x780);
IkReal x790=((0.588235294117647)*x779);
IkReal x791=(gconst5*x789);
evalcond[0]=((((-0.316735294117647)*x779))+(((-0.108264705882353)*cj7*x779))+(((-1.0)*x781*x790))+(((-1.0)*x782*x790)));
evalcond[1]=(((x786*x788))+((x785*x788))+((x787*x788))+(((-1.0)*x784*x788)));
evalcond[2]=((((-0.707106781186548)*x786))+(((-0.707106781186548)*x787))+(((-0.707106781186548)*x785))+(((0.55)*x780))+(((0.3)*cj7*x780))+(((0.045)*sj7*x780))+(((0.707106781186548)*x784)));
evalcond[3]=((-0.2125)+((x786*x789))+(((-1.0)*gconst4*x783))+((x785*x789))+((x787*x789))+(((-0.0636396103067893)*x787))+(((-0.0636396103067893)*x784))+(((-1.0)*x784*x789))+(((-1.0)*x781))+(((-1.0)*x782))+((gconst5*x783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x792=((0.045)+(((-0.045)*cj7))+(((0.3)*sj7)));
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((0.0765)*sj7))+(((0.32595)*cj7)));
evalcond[2]=x792;
evalcond[3]=((-0.55)+(((-0.045)*sj7))+(((-0.3)*cj7)));
evalcond[4]=0;
evalcond[5]=x792;
evalcond[6]=-0.2125;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
pz=0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp1_0=0;
rxp1_1=0;
rxp2_0=0;
rxp2_1=0;
px=0;
py=0;
rxp0_2=0;
rxp1_2=0;
rxp2_2=0;
j5eval[0]=IKabs(((2.92556370551481)+cj7));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j5]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((2.92556370551481)+cj7);
op[1]=0;
op[2]=((-2.92556370551481)+(((-1.0)*cj7)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x796=IKPowWithIntegerCheck(((0.55)+(((0.045)*sj7))+(((0.3)*cj7))),-1);
if(!x796.valid){
continue;
}
IkReal x793=x796.value;
IkReal x794=((0.707106781186548)*sj4*x793);
IkReal x795=((0.707106781186548)*cj4*x793);
sj5array[0]=((((-1.0)*px*x794))+((px*x795))+((py*x795))+((py*x794)));
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x797=IKcos(j5);
IkReal x798=IKsin(j5);
IkReal x799=px*px;
IkReal x800=py*py;
IkReal x801=((0.707106781186548)*sj4);
IkReal x802=(cj4*py);
IkReal x803=((0.777817459305202)*sj4);
IkReal x804=((0.0636396103067893)*sj4);
IkReal x805=((0.707106781186548)*cj4);
IkReal x806=(px*x797);
IkReal x807=(py*x798);
IkReal x808=(px*x798);
IkReal x809=((0.588235294117647)*x797);
IkReal x810=(x798*x802);
evalcond[0]=((((-0.316735294117647)*x797))+(((-1.0)*x799*x809))+(((-1.0)*x800*x809))+(((-0.108264705882353)*cj7*x797)));
evalcond[1]=(((x805*x806))+((py*x797*x801))+(((0.707106781186548)*x797*x802))+(((-1.0)*x801*x806)));
evalcond[2]=((-0.55)+(((-0.045)*sj7))+(((-0.3)*cj7))+(((0.707106781186548)*x810))+((x805*x808))+((x801*x807))+(((-1.0)*x801*x808)));
evalcond[3]=((-0.2125)+(((-1.0)*x800))+(((0.777817459305202)*x810))+(((0.777817459305202)*cj4*x808))+(((-1.0)*px*x804))+((x803*x807))+(((-1.0)*x803*x808))+(((-0.0636396103067893)*cj4*px))+(((0.0636396103067893)*x802))+(((-1.0)*x799))+(((-1.0)*py*x804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x811=((0.707106781186548)*sj4);
IkReal x812=((0.707106781186548)*cj4);
CheckValue<IkReal> x814=IKPowWithIntegerCheck((((py*x811))+((py*x812))+((px*x812))+(((-1.0)*px*x811))),-1);
if(!x814.valid){
continue;
}
IkReal x813=x814.value;
sj5array[0]=((((0.3)*cj7*x813))+(((0.045)*sj7*x813))+(((0.55)*x813)));
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x815=IKcos(j5);
IkReal x816=IKsin(j5);
IkReal x817=px*px;
IkReal x818=py*py;
IkReal x819=(cj4*py);
IkReal x820=(px*sj4);
IkReal x821=(py*sj4);
IkReal x822=(cj4*px);
IkReal x823=((0.777817459305202)*x816);
IkReal x824=((0.707106781186548)*x815);
IkReal x825=((0.588235294117647)*x815);
evalcond[0]=((((-1.0)*x818*x825))+(((-1.0)*x817*x825))+(((-0.108264705882353)*cj7*x815))+(((-0.316735294117647)*x815)));
evalcond[1]=(((x821*x824))+((x819*x824))+((x822*x824))+(((-1.0)*x820*x824)));
evalcond[2]=((((0.3)*cj7*x816))+(((0.045)*sj7*x816))+(((-0.707106781186548)*x822))+(((-0.707106781186548)*x821))+(((-0.707106781186548)*x819))+(((0.55)*x816))+(((0.707106781186548)*x820)));
evalcond[3]=((-0.2125)+((x821*x823))+(((0.0636396103067893)*x819))+((x819*x823))+(((-1.0)*x817))+(((-1.0)*x818))+((x822*x823))+(((-1.0)*x820*x823))+(((-0.0636396103067893)*x821))+(((-0.0636396103067893)*x820))+(((-0.0636396103067893)*x822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x826=((0.3)*sj7);
IkReal x827=((0.045)*cj7);
IkReal x828=((0.707106781186548)*py);
IkReal x829=((0.707106781186548)*px);
IkReal x830=(cj4*x828);
IkReal x831=(cj4*x829);
IkReal x832=(sj4*x828);
IkReal x833=(sj4*x829);
IkReal x834=(x826+x830);
IkReal x835=(x827+x831+x832+x833);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j6), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));
evalcond[2]=((-0.045)+(((-1.0)*x834))+x835);
evalcond[3]=((0.045)+(((-1.0)*x835))+x834);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x836=((-1.0)*py);
pz=0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x836);
rxp0_1=(px*r20);
rxp1_0=(r21*x836);
rxp1_1=(px*r21);
rxp2_0=(r22*x836);
rxp2_1=(px*r22);
j5eval[0]=(((cj4*py))+((cj4*px))+(((-1.0)*px*sj4))+((py*sj4)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x837=((-1.0)*py);
pz=0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x837);
rxp0_1=(px*r20);
rxp1_0=(r21*x837);
rxp1_1=(px*r21);
rxp2_0=(r22*x837);
rxp2_1=(px*r22);
j5eval[0]=((12.2222222222222)+sj7+(((6.66666666666667)*cj7)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x838=(py+px);
IkReal x839=((((-1.0)*px))+py);
IkReal x841 = ((x838*x838)+(x839*x839));
if(IKabs(x841)==0){
continue;
}
IkReal x840=pow(x841,-0.5);
CheckValue<IkReal> x842 = IKatan2WithCheck(IkReal(x838),x839,IKFAST_ATAN2_MAGTHRESH);
if(!x842.valid){
continue;
}
IkReal gconst6=((-1.0)*(x842.value));
IkReal gconst7=((-1.0)*x838*x840);
IkReal gconst8=(x839*x840);
IkReal x843=j4;
IkReal x844=((0.3)*sj7);
IkReal x845=((0.045)*cj7);
IkReal x846=((0.707106781186548)*gconst8);
IkReal x847=((0.707106781186548)*gconst7);
IkReal x848=(py*x846);
IkReal x849=(px*x846);
IkReal x850=(py*x847);
IkReal x851=(px*x847);
CheckValue<IkReal> x856 = IKatan2WithCheck(IkReal((py+px)),((((-1.0)*px))+py),IKFAST_ATAN2_MAGTHRESH);
if(!x856.valid){
continue;
}
IkReal x852=x856.value;
IkReal x853=x852;
IkReal x854=(x844+x848);
IkReal x855=(x850+x851+x845+x849);
if(((((j4*x853))+((j4*x843))+((x852*x853))+((x843*x852)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((j4*x853))+((j4*x843))+((x852*x853))+((x843*x852)))))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((-1.0)*(px*px)))+(((0.0765)*sj7))+(((-1.0)*(py*py)))+(((0.32595)*cj7)));
evalcond[2]=((-0.045)+(((-1.0)*x854))+x855);
evalcond[3]=((0.045)+(((-1.0)*x855))+x854);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x857=((0.707106781186548)*px);
IkReal x858=((0.707106781186548)*py);
CheckValue<IkReal> x860=IKPowWithIntegerCheck((((gconst8*x858))+((gconst8*x857))+((gconst7*x858))+(((-1.0)*gconst7*x857))),-1);
if(!x860.valid){
continue;
}
IkReal x859=x860.value;
sj5array[0]=((((0.55)*x859))+(((0.3)*cj7*x859))+(((0.045)*sj7*x859)));
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x861=IKcos(j5);
IkReal x862=IKsin(j5);
IkReal x863=px*px;
IkReal x864=py*py;
IkReal x865=(gconst7*px);
IkReal x866=((0.0636396103067893)*py);
IkReal x867=(gconst8*px);
IkReal x868=((0.707106781186548)*py);
IkReal x869=((0.777817459305202)*x862);
IkReal x870=((0.707106781186548)*x861);
IkReal x871=((0.588235294117647)*x861);
IkReal x872=(py*x869);
IkReal x873=(x861*x868);
evalcond[0]=((((-0.108264705882353)*cj7*x861))+(((-0.316735294117647)*x861))+(((-1.0)*x864*x871))+(((-1.0)*x863*x871)));
evalcond[1]=((((-1.0)*gconst8*x873))+(((-1.0)*gconst7*x873))+(((-1.0)*x867*x870))+((x865*x870)));
evalcond[2]=((((0.55)*x862))+(((-1.0)*gconst8*x868))+(((0.3)*cj7*x862))+(((-0.707106781186548)*x867))+(((-1.0)*gconst7*x868))+(((0.045)*sj7*x862))+(((0.707106781186548)*x865)));
evalcond[3]=((-0.2125)+(((-1.0)*x865*x869))+((x867*x869))+(((-1.0)*x863))+(((-1.0)*x864))+(((-1.0)*gconst8*x866))+((gconst8*x872))+((gconst7*x872))+((gconst7*x866))+(((0.0636396103067893)*x865))+(((0.0636396103067893)*x867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x874=(py+px);
IkReal x875=((((-1.0)*px))+py);
IkReal x877 = ((x874*x874)+(x875*x875));
if(IKabs(x877)==0){
continue;
}
IkReal x876=pow(x877,-0.5);
CheckValue<IkReal> x878 = IKatan2WithCheck(IkReal(x874),x875,IKFAST_ATAN2_MAGTHRESH);
if(!x878.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x878.value))));
IkReal gconst10=((1.0)*x874*x876);
IkReal gconst11=((-1.0)*x875*x876);
IkReal x879=j4;
IkReal x880=((0.3)*sj7);
IkReal x881=((0.045)*cj7);
IkReal x882=((0.707106781186548)*gconst11);
IkReal x883=((0.707106781186548)*gconst10);
IkReal x884=(py*x882);
IkReal x885=(px*x882);
IkReal x886=(px*x883);
IkReal x887=(py*x883);
CheckValue<IkReal> x892 = IKatan2WithCheck(IkReal((py+px)),((((-1.0)*px))+py),IKFAST_ATAN2_MAGTHRESH);
if(!x892.valid){
continue;
}
IkReal x888=x892.value;
IkReal x889=x888;
IkReal x890=(x884+x880);
IkReal x891=(x885+x887+x886+x881);
if((((9.86960440108936)+((x879*x888))+((j4*x879))+(((-3.14159265358979)*x879))+(((-3.14159265358979)*j4))+((j4*x889))+(((-3.14159265358979)*x889))+(((-3.14159265358979)*x888))+((x888*x889)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+((x879*x888))+((j4*x879))+(((-3.14159265358979)*x879))+(((-3.14159265358979)*j4))+((j4*x889))+(((-3.14159265358979)*x889))+(((-3.14159265358979)*x888))+((x888*x889)))))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((-1.0)*(px*px)))+(((0.0765)*sj7))+(((-1.0)*(py*py)))+(((0.32595)*cj7)));
evalcond[2]=((-0.045)+(((-1.0)*x890))+x891);
evalcond[3]=((0.045)+(((-1.0)*x891))+x890);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x893=((0.707106781186548)*py);
IkReal x894=((0.707106781186548)*px);
CheckValue<IkReal> x896=IKPowWithIntegerCheck((((gconst11*x893))+((gconst11*x894))+(((-1.0)*gconst10*x894))+((gconst10*x893))),-1);
if(!x896.valid){
continue;
}
IkReal x895=x896.value;
sj5array[0]=((((0.3)*cj7*x895))+(((0.045)*sj7*x895))+(((0.55)*x895)));
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x897=IKcos(j5);
IkReal x898=IKsin(j5);
IkReal x899=px*px;
IkReal x900=py*py;
IkReal x901=(gconst11*py);
IkReal x902=(gconst10*px);
IkReal x903=(gconst11*px);
IkReal x904=(gconst10*py);
IkReal x905=((0.707106781186548)*x897);
IkReal x906=((0.777817459305202)*x898);
IkReal x907=((0.588235294117647)*x897);
evalcond[0]=((((-1.0)*x900*x907))+(((-0.316735294117647)*x897))+(((-0.108264705882353)*cj7*x897))+(((-1.0)*x899*x907)));
evalcond[1]=((((-1.0)*x903*x905))+((x902*x905))+(((-1.0)*x901*x905))+(((-1.0)*x904*x905)));
evalcond[2]=((((0.3)*cj7*x898))+(((0.045)*sj7*x898))+(((-0.707106781186548)*x904))+(((-0.707106781186548)*x901))+(((-0.707106781186548)*x903))+(((0.707106781186548)*x902))+(((0.55)*x898)));
evalcond[3]=((-0.2125)+((x903*x906))+(((-1.0)*x902*x906))+((x901*x906))+(((-1.0)*x899))+(((-0.0636396103067893)*x901))+(((0.0636396103067893)*x903))+(((0.0636396103067893)*x902))+(((0.0636396103067893)*x904))+(((-1.0)*x900))+((x904*x906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x908=((0.3)*sj7);
IkReal x909=((0.045)*cj7);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((0.0765)*sj7))+(((0.32595)*cj7)));
evalcond[2]=((-0.045)+(((-1.0)*x908))+x909);
evalcond[3]=((-0.55)+(((-0.045)*sj7))+(((-0.3)*cj7)));
evalcond[4]=0;
evalcond[5]=((0.045)+(((-1.0)*x909))+x908);
evalcond[6]=-0.2125;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
pz=0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp1_0=0;
rxp1_1=0;
rxp2_0=0;
rxp2_1=0;
px=0;
py=0;
rxp0_2=0;
rxp1_2=0;
rxp2_2=0;
j5eval[0]=IKabs(((2.92556370551481)+cj7));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j5]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((2.92556370551481)+cj7);
op[1]=0;
op[2]=((-2.92556370551481)+(((-1.0)*cj7)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x913=IKPowWithIntegerCheck(((0.55)+(((0.045)*sj7))+(((0.3)*cj7))),-1);
if(!x913.valid){
continue;
}
IkReal x910=x913.value;
IkReal x911=((0.707106781186548)*sj4*x910);
IkReal x912=((0.707106781186548)*cj4*x910);
sj5array[0]=((((-1.0)*px*x911))+((px*x912))+((py*x912))+((py*x911)));
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x914=IKcos(j5);
IkReal x915=IKsin(j5);
IkReal x916=px*px;
IkReal x917=py*py;
IkReal x918=((0.707106781186548)*sj4);
IkReal x919=(cj4*py);
IkReal x920=((0.777817459305202)*sj4);
IkReal x921=((0.0636396103067893)*sj4);
IkReal x922=((0.707106781186548)*cj4);
IkReal x923=(px*x914);
IkReal x924=(py*x915);
IkReal x925=(px*x915);
IkReal x926=((0.588235294117647)*x914);
IkReal x927=(x915*x919);
evalcond[0]=((((-0.316735294117647)*x914))+(((-0.108264705882353)*cj7*x914))+(((-1.0)*x916*x926))+(((-1.0)*x917*x926)));
evalcond[1]=(((x918*x923))+(((-0.707106781186548)*x914*x919))+(((-1.0)*py*x914*x918))+(((-1.0)*x922*x923)));
evalcond[2]=((-0.55)+(((-0.045)*sj7))+((x918*x924))+(((-0.3)*cj7))+(((0.707106781186548)*x927))+(((-1.0)*x918*x925))+((x922*x925)));
evalcond[3]=((-0.2125)+((x920*x924))+(((-0.0636396103067893)*x919))+(((-1.0)*x920*x925))+((py*x921))+(((0.0636396103067893)*cj4*px))+(((0.777817459305202)*x927))+(((-1.0)*x917))+(((-1.0)*x916))+(((0.777817459305202)*cj4*x925))+((px*x921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x928=((0.707106781186548)*sj4);
IkReal x929=((0.707106781186548)*cj4);
CheckValue<IkReal> x931=IKPowWithIntegerCheck(((((-1.0)*px*x928))+((py*x929))+((py*x928))+((px*x929))),-1);
if(!x931.valid){
continue;
}
IkReal x930=x931.value;
sj5array[0]=((((0.045)*sj7*x930))+(((0.55)*x930))+(((0.3)*cj7*x930)));
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x932=IKcos(j5);
IkReal x933=IKsin(j5);
IkReal x934=px*px;
IkReal x935=py*py;
IkReal x936=(cj4*py);
IkReal x937=(px*sj4);
IkReal x938=(py*sj4);
IkReal x939=(cj4*px);
IkReal x940=((0.777817459305202)*x933);
IkReal x941=((0.707106781186548)*x932);
IkReal x942=((0.588235294117647)*x932);
evalcond[0]=((((-0.108264705882353)*cj7*x932))+(((-0.316735294117647)*x932))+(((-1.0)*x935*x942))+(((-1.0)*x934*x942)));
evalcond[1]=((((-1.0)*x939*x941))+((x937*x941))+(((-1.0)*x938*x941))+(((-1.0)*x936*x941)));
evalcond[2]=((((0.045)*sj7*x933))+(((0.55)*x933))+(((0.707106781186548)*x937))+(((0.3)*cj7*x933))+(((-0.707106781186548)*x939))+(((-0.707106781186548)*x938))+(((-0.707106781186548)*x936)));
evalcond[3]=((-0.2125)+(((-0.0636396103067893)*x936))+((x936*x940))+((x938*x940))+((x939*x940))+(((-1.0)*x935))+(((-1.0)*x934))+(((0.0636396103067893)*x937))+(((0.0636396103067893)*x939))+(((0.0636396103067893)*x938))+(((-1.0)*x937*x940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x943=((0.707106781186548)*cj4);
IkReal x944=((0.707106781186548)*sj4);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959)))))+(IKabs(pz)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((((-1.0)*py*x943))+((px*x944))+((px*x943))+((py*x944)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x945=((-1.0)*py);
pz=0;
j7=0;
sj7=0;
cj7=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x945);
rxp0_1=(px*r20);
rxp1_0=(r21*x945);
rxp1_1=(px*r21);
rxp2_0=(r22*x945);
rxp2_1=(px*r22);
IkReal x946=(px*sj6);
IkReal x947=(py*sj6);
j5eval[0]=((((-1.0)*sj4*x946))+((sj4*x947))+((cj4*x947))+((cj4*x946)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x948=((-1.0)*py);
pz=0;
j7=0;
sj7=0;
cj7=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x948);
rxp0_1=(px*r20);
rxp1_0=(r21*x948);
rxp1_1=(px*r21);
rxp2_0=(r22*x948);
rxp2_1=(px*r22);
IkReal x949=(cj6*px);
IkReal x950=((1.0)*cj4);
IkReal x951=(cj6*py);
j5eval[0]=((((-1.0)*sj4*x951))+((sj4*x949))+(((-1.0)*x950*x951))+(((-1.0)*x949*x950)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x952=((-1.0)*py);
pz=0;
j7=0;
sj7=0;
cj7=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x952);
rxp0_1=(px*r20);
rxp1_0=(r21*x952);
rxp1_1=(px*r21);
rxp2_0=(r22*x952);
rxp2_1=(px*r22);
IkReal x953=(px*sj6);
IkReal x954=((1.0)*sj4);
IkReal x955=(py*sj4);
IkReal x956=(cj4*py);
j5eval[0]=(((cj4*px))+(((-1.0)*px*x954))+x956+x955);
j5eval[1]=(((sj6*x956))+((sj6*x955))+(((-1.0)*x953*x954))+((cj4*x953)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x957=(py+px);
IkReal x958=((((-1.0)*px))+py);
IkReal x960 = ((x957*x957)+(x958*x958));
if(IKabs(x960)==0){
continue;
}
IkReal x959=pow(x960,-0.5);
CheckValue<IkReal> x961 = IKatan2WithCheck(IkReal(x957),x958,IKFAST_ATAN2_MAGTHRESH);
if(!x961.valid){
continue;
}
IkReal gconst12=((-1.0)*(x961.value));
IkReal gconst13=((-1.0)*x957*x959);
IkReal gconst14=(x958*x959);
IkReal x962=j4;
IkReal x963=((0.707106781186548)*py);
IkReal x964=((0.707106781186548)*px);
CheckValue<IkReal> x967 = IKatan2WithCheck(IkReal((py+px)),((((-1.0)*px))+py),IKFAST_ATAN2_MAGTHRESH);
if(!x967.valid){
continue;
}
IkReal x965=x967.value;
IkReal x966=x965;
if(((((x962*x965))+((j4*x962))+((j4*x966))+((x965*x966)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((x962*x965))+((j4*x962))+((j4*x966))+((x965*x966)))))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*(px*px)))+(((-1.0)*(py*py))));
evalcond[2]=((((-1.0)*gconst14*x963))+((gconst14*x964))+((gconst13*x963))+((gconst13*x964)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x968=((0.831890330807703)*py);
IkReal x969=((0.831890330807703)*px);
sj5array[0]=(((gconst14*x969))+((gconst14*x968))+(((-1.0)*gconst13*x969))+((gconst13*x968)));
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x970=IKsin(j5);
IkReal x971=IKcos(j5);
IkReal x972=((0.707106781186548)*sj6);
IkReal x973=(gconst13*py);
IkReal x974=(gconst14*px);
IkReal x975=((0.707106781186548)*cj6);
IkReal x976=(gconst13*px);
IkReal x977=((0.0636396103067893)*sj6);
IkReal x978=(gconst14*py);
IkReal x979=((0.777817459305202)*x970);
IkReal x980=((0.707106781186548)*x970);
IkReal x981=((0.0636396103067893)*cj6*x971);
evalcond[0]=((-0.85)*x971);
evalcond[1]=((-0.85)+((x973*x980))+((x974*x980))+(((-1.0)*x976*x980))+((x978*x980)));
evalcond[2]=(((x975*x976))+((x971*x972*x978))+((x971*x972*x974))+((x971*x972*x973))+((x973*x975))+((x974*x975))+(((-1.0)*x971*x972*x976))+(((-1.0)*x975*x978)));
evalcond[3]=((((-1.0)*x971*x973*x975))+((x971*x975*x976))+(((-1.0)*x972*x978))+(((-1.0)*x971*x974*x975))+(((-1.0)*x971*x975*x978))+((x972*x973))+((x972*x974))+((x972*x976)));
evalcond[4]=((-0.935)+((x978*x979))+((x977*x978))+((x973*x981))+(((-1.0)*x974*x977))+((x973*x979))+((x974*x981))+(((-1.0)*x976*x977))+(((-1.0)*x976*x979))+((x974*x979))+(((-1.0)*x976*x981))+(((-1.0)*x973*x977))+((x978*x981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x982=(py+px);
IkReal x983=((((-1.0)*px))+py);
IkReal x985 = ((x983*x983)+(x982*x982));
if(IKabs(x985)==0){
continue;
}
IkReal x984=pow(x985,-0.5);
CheckValue<IkReal> x986 = IKatan2WithCheck(IkReal(x982),x983,IKFAST_ATAN2_MAGTHRESH);
if(!x986.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x986.value))));
IkReal gconst16=((1.0)*x982*x984);
IkReal gconst17=((-1.0)*x983*x984);
IkReal x987=j4;
IkReal x988=((0.707106781186548)*gconst16);
IkReal x989=((0.707106781186548)*gconst17);
CheckValue<IkReal> x992 = IKatan2WithCheck(IkReal((py+px)),((((-1.0)*px))+py),IKFAST_ATAN2_MAGTHRESH);
if(!x992.valid){
continue;
}
IkReal x990=x992.value;
IkReal x991=x990;
if((((9.86960440108936)+(((-3.14159265358979)*x991))+(((-3.14159265358979)*x990))+((x990*x991))+((j4*x987))+(((-3.14159265358979)*x987))+(((-3.14159265358979)*j4))+((x987*x990))+((j4*x991)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+(((-3.14159265358979)*x991))+(((-3.14159265358979)*x990))+((x990*x991))+((j4*x987))+(((-3.14159265358979)*x987))+(((-3.14159265358979)*j4))+((x987*x990))+((j4*x991)))))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*(px*px)))+(((-1.0)*(py*py))));
evalcond[2]=((((-1.0)*py*x989))+((py*x988))+((px*x989))+((px*x988)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x993=((0.831890330807703)*px);
IkReal x994=((0.831890330807703)*py);
IkReal x995=((0.707106781186548)*cj6*gconst17);
IkReal x996=((0.707106781186548)*px*sj6);
IkReal x997=((0.707106781186548)*cj6*gconst16);
IkReal x998=((0.707106781186548)*py*sj6);
CheckValue<IkReal> x999=IKPowWithIntegerCheck((((gconst16*x998))+(((-1.0)*gconst16*x996))+((gconst17*x996))+((gconst17*x998))),-1);
if(!x999.valid){
continue;
}
if( IKabs((((gconst16*x994))+(((-1.0)*gconst16*x993))+((gconst17*x994))+((gconst17*x993)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x999.value)*(((((-1.0)*px*x997))+(((-1.0)*px*x995))+((py*x995))+(((-1.0)*py*x997)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst16*x994))+(((-1.0)*gconst16*x993))+((gconst17*x994))+((gconst17*x993))))+IKsqr(((x999.value)*(((((-1.0)*px*x997))+(((-1.0)*px*x995))+((py*x995))+(((-1.0)*py*x997))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((gconst16*x994))+(((-1.0)*gconst16*x993))+((gconst17*x994))+((gconst17*x993))), ((x999.value)*(((((-1.0)*px*x997))+(((-1.0)*px*x995))+((py*x995))+(((-1.0)*py*x997))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1000=IKsin(j5);
IkReal x1001=IKcos(j5);
IkReal x1002=(gconst17*py);
IkReal x1003=((0.707106781186548)*px);
IkReal x1004=(gconst16*sj6);
IkReal x1005=((0.0636396103067893)*sj6);
IkReal x1006=(cj6*gconst16);
IkReal x1007=((0.707106781186548)*py);
IkReal x1008=(gconst17*px);
IkReal x1009=(gconst17*sj6);
IkReal x1010=((0.707106781186548)*sj6);
IkReal x1011=((0.0636396103067893)*px);
IkReal x1012=((0.0636396103067893)*gconst16*py);
IkReal x1013=(cj6*x1001);
IkReal x1014=((0.777817459305202)*x1000);
IkReal x1015=(gconst16*x1000);
evalcond[0]=((-0.85)*x1001);
evalcond[1]=((((-0.707106781186548)*x1002))+(((0.85)*x1000))+(((-1.0)*gconst17*x1003))+((gconst16*x1003))+(((-1.0)*gconst16*x1007)));
evalcond[2]=((-0.85)+((gconst17*x1000*x1003))+(((-1.0)*x1003*x1015))+((x1007*x1015))+(((0.707106781186548)*x1000*x1002)));
evalcond[3]=(((cj6*gconst17*x1003))+(((-1.0)*x1001*x1003*x1004))+((x1001*x1004*x1007))+((x1001*x1003*x1009))+((x1001*x1002*x1010))+((x1006*x1007))+(((-0.707106781186548)*cj6*x1002))+((x1003*x1006)));
evalcond[4]=((((-1.0)*gconst17*x1003*x1013))+(((-1.0)*x1001*x1006*x1007))+((x1001*x1003*x1006))+((x1004*x1007))+(((-0.707106781186548)*x1002*x1013))+(((-1.0)*x1002*x1010))+((x1003*x1004))+((x1003*x1009)));
evalcond[5]=((-0.935)+(((0.0636396103067893)*py*x1001*x1006))+(((-1.0)*x1004*x1011))+(((-1.0)*gconst16*px*x1014))+(((0.0636396103067893)*x1002*x1013))+(((-1.0)*x1005*x1008))+((gconst16*py*x1014))+(((-1.0)*x1001*x1006*x1011))+((x1002*x1014))+((x1002*x1005))+((x1008*x1014))+(((-0.0636396103067893)*py*x1004))+(((0.0636396103067893)*x1008*x1013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1016=((0.707106781186548)*sj4);
IkReal x1017=((0.707106781186548)*cj4);
IkReal x1018=((((-1.0)*py*x1017))+((py*x1016))+((px*x1017))+((px*x1016)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*(px*px)))+(((-1.0)*(py*py))));
evalcond[2]=x1018;
evalcond[3]=x1018;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x1019=((-1.0)*py);
pz=0;
j7=0;
sj7=0;
cj7=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1019);
rxp0_1=(px*r20);
rxp1_0=(r21*x1019);
rxp1_1=(px*r21);
rxp2_0=(r22*x1019);
rxp2_1=(px*r22);
sj6=0;
cj6=1.0;
j6=0;
j5eval[0]=(((cj4*py))+((cj4*px))+(((-1.0)*px*sj4))+((py*sj4)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0.7225;
evalcond[2]=0;
evalcond[3]=-0.85;
evalcond[4]=-0.935;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
pz=0;
j7=0;
sj7=0;
cj7=1.0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp1_0=0;
rxp1_1=0;
rxp2_0=0;
rxp2_1=0;
sj6=0;
cj6=1.0;
j6=0;
px=0;
py=0;
rxp0_2=0;
rxp1_2=0;
rxp2_2=0;
j5eval[0]=1.0;
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1020=py*py;
IkReal x1021=px*px;
IkReal x1022=((216.374675043084)*px);
IkReal x1023=(px*py);
IkReal x1024=((216.374675043084)*py);
IkReal x1025=((0.831890330807703)*py);
IkReal x1026=((0.831890330807703)*px);
IkReal x1027=((4400.0)*cj4*sj4);
CheckValue<IkReal> x1028=IKPowWithIntegerCheck(((((-1.0)*sj4*x1022))+((sj4*x1024))+((cj4*x1022))+((cj4*x1024))),-1);
if(!x1028.valid){
continue;
}
if( IKabs(((((-1.0)*sj4*x1026))+((sj4*x1025))+((cj4*x1026))+((cj4*x1025)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1028.value)*(((3179.0)+(((-8800.0)*x1023*(cj4*cj4)))+(((-2200.0)*x1021))+(((-2200.0)*x1020))+(((-1.0)*x1020*x1027))+((x1021*x1027))+(((4400.0)*x1023)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x1026))+((sj4*x1025))+((cj4*x1026))+((cj4*x1025))))+IKsqr(((x1028.value)*(((3179.0)+(((-8800.0)*x1023*(cj4*cj4)))+(((-2200.0)*x1021))+(((-2200.0)*x1020))+(((-1.0)*x1020*x1027))+((x1021*x1027))+(((4400.0)*x1023))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*sj4*x1026))+((sj4*x1025))+((cj4*x1026))+((cj4*x1025))), ((x1028.value)*(((3179.0)+(((-8800.0)*x1023*(cj4*cj4)))+(((-2200.0)*x1021))+(((-2200.0)*x1020))+(((-1.0)*x1020*x1027))+((x1021*x1027))+(((4400.0)*x1023))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1029=IKcos(j5);
IkReal x1030=IKsin(j5);
IkReal x1031=(cj4*py);
IkReal x1032=(px*sj4);
IkReal x1033=(py*sj4);
IkReal x1034=(cj4*px);
IkReal x1035=((0.0636396103067893)*x1029);
IkReal x1036=((0.707106781186548)*x1030);
IkReal x1037=((0.777817459305202)*x1030);
IkReal x1038=((0.707106781186548)*x1029);
evalcond[0]=((-0.85)*x1029);
evalcond[1]=((((0.85)*x1030))+(((-0.707106781186548)*x1034))+(((-0.707106781186548)*x1033))+(((-0.707106781186548)*x1031))+(((0.707106781186548)*x1032)));
evalcond[2]=((((-1.0)*x1033*x1038))+(((-1.0)*x1034*x1038))+(((-1.0)*x1031*x1038))+((x1032*x1038)));
evalcond[3]=((-0.85)+((x1031*x1036))+(((-1.0)*x1032*x1036))+((x1034*x1036))+((x1033*x1036)));
evalcond[4]=((-0.935)+((x1031*x1037))+((x1031*x1035))+(((-1.0)*x1032*x1037))+(((-1.0)*x1032*x1035))+((x1034*x1037))+((x1034*x1035))+((x1033*x1035))+((x1033*x1037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1039=((0.707106781186548)*sj4);
IkReal x1040=((0.707106781186548)*cj4);
IkReal x1041=(py*x1040);
IkReal x1042=(((px*x1039))+((px*x1040))+((py*x1039)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*(px*px)))+(((-1.0)*(py*py))));
evalcond[2]=(x1042+(((-1.0)*x1041)));
evalcond[3]=(x1041+(((-1.0)*x1042)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x1043=((-1.0)*py);
pz=0;
j7=0;
sj7=0;
cj7=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1043);
rxp0_1=(px*r20);
rxp1_0=(r21*x1043);
rxp1_1=(px*r21);
rxp2_0=(r22*x1043);
rxp2_1=(px*r22);
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x1044=((1.0)*cj4);
j5eval[0]=((((-1.0)*px*x1044))+(((-1.0)*py*x1044))+(((-1.0)*py*sj4))+((px*sj4)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0.7225;
evalcond[2]=0;
evalcond[3]=-0.85;
evalcond[4]=-0.935;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
pz=0;
j7=0;
sj7=0;
cj7=1.0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp1_0=0;
rxp1_1=0;
rxp2_0=0;
rxp2_1=0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
px=0;
py=0;
rxp0_2=0;
rxp1_2=0;
rxp2_2=0;
j5eval[0]=1.0;
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1045=py*py;
IkReal x1046=px*px;
IkReal x1047=((216.374675043084)*px);
IkReal x1048=((216.374675043084)*py);
IkReal x1049=(px*py);
IkReal x1050=((0.831890330807703)*py);
IkReal x1051=((0.831890330807703)*px);
IkReal x1052=((4400.0)*cj4*sj4);
CheckValue<IkReal> x1053=IKPowWithIntegerCheck(((((-1.0)*cj4*x1048))+(((-1.0)*cj4*x1047))+(((-1.0)*sj4*x1048))+((sj4*x1047))),-1);
if(!x1053.valid){
continue;
}
if( IKabs(((((-1.0)*sj4*x1051))+((sj4*x1050))+((cj4*x1051))+((cj4*x1050)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1053.value)*(((3179.0)+(((-2200.0)*x1046))+(((-2200.0)*x1045))+(((-8800.0)*x1049*(cj4*cj4)))+(((-1.0)*x1045*x1052))+(((4400.0)*x1049))+((x1046*x1052)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x1051))+((sj4*x1050))+((cj4*x1051))+((cj4*x1050))))+IKsqr(((x1053.value)*(((3179.0)+(((-2200.0)*x1046))+(((-2200.0)*x1045))+(((-8800.0)*x1049*(cj4*cj4)))+(((-1.0)*x1045*x1052))+(((4400.0)*x1049))+((x1046*x1052))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*sj4*x1051))+((sj4*x1050))+((cj4*x1051))+((cj4*x1050))), ((x1053.value)*(((3179.0)+(((-2200.0)*x1046))+(((-2200.0)*x1045))+(((-8800.0)*x1049*(cj4*cj4)))+(((-1.0)*x1045*x1052))+(((4400.0)*x1049))+((x1046*x1052))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1054=IKcos(j5);
IkReal x1055=IKsin(j5);
IkReal x1056=(cj4*py);
IkReal x1057=(px*sj4);
IkReal x1058=(py*sj4);
IkReal x1059=(cj4*px);
IkReal x1060=((0.0636396103067893)*x1054);
IkReal x1061=((0.707106781186548)*x1055);
IkReal x1062=((0.777817459305202)*x1055);
IkReal x1063=((0.707106781186548)*x1054);
evalcond[0]=((-0.85)*x1054);
evalcond[1]=((((-0.707106781186548)*x1056))+(((-0.707106781186548)*x1058))+(((-0.707106781186548)*x1059))+(((0.85)*x1055))+(((0.707106781186548)*x1057)));
evalcond[2]=(((x1056*x1063))+(((-1.0)*x1057*x1063))+((x1059*x1063))+((x1058*x1063)));
evalcond[3]=((-0.85)+((x1056*x1061))+(((-1.0)*x1057*x1061))+((x1059*x1061))+((x1058*x1061)));
evalcond[4]=((-0.935)+((x1056*x1062))+(((-1.0)*x1059*x1060))+(((-1.0)*x1058*x1060))+((x1057*x1060))+(((-1.0)*x1057*x1062))+(((-1.0)*x1056*x1060))+((x1059*x1062))+((x1058*x1062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1064=((0.707106781186548)*sj4);
IkReal x1065=((0.707106781186548)*cj4);
IkReal x1066=(((py*x1064))+(((-1.0)*py*x1065))+((px*x1064))+((px*x1065)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*(px*px)))+(((-1.0)*(py*py))));
evalcond[2]=x1066;
evalcond[3]=x1066;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1067=((0.831890330807703)*py);
IkReal x1068=((0.831890330807703)*px);
sj5array[0]=((((-1.0)*sj4*x1068))+((cj4*x1067))+((cj4*x1068))+((sj4*x1067)));
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x1069=IKcos(j5);
IkReal x1070=IKsin(j5);
IkReal x1071=(cj4*px);
IkReal x1072=(cj4*py);
IkReal x1073=(px*sj4);
IkReal x1074=(py*sj4);
IkReal x1075=((0.777817459305202)*x1070);
IkReal x1076=((0.707106781186548)*x1070);
IkReal x1077=((0.707106781186548)*x1069);
evalcond[0]=((-0.85)*x1069);
evalcond[1]=(((x1074*x1077))+(((-1.0)*x1073*x1077))+((x1071*x1077))+((x1072*x1077)));
evalcond[2]=((-0.85)+((x1074*x1076))+(((-1.0)*x1073*x1076))+((x1071*x1076))+((x1072*x1076)));
evalcond[3]=((-0.935)+((x1074*x1075))+(((-0.0636396103067893)*x1071))+(((-0.0636396103067893)*x1073))+(((-0.0636396103067893)*x1074))+(((-1.0)*x1073*x1075))+((x1071*x1075))+(((0.0636396103067893)*x1072))+((x1072*x1075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1078=((0.707106781186548)*sj4);
IkReal x1079=((0.707106781186548)*cj4);
IkReal x1080=(py*x1079);
IkReal x1081=(((px*x1079))+((px*x1078))+((py*x1078)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*(px*px)))+(((-1.0)*(py*py))));
evalcond[2]=(x1081+(((-1.0)*x1080)));
evalcond[3]=(x1080+(((-1.0)*x1081)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1082=((0.831890330807703)*py);
IkReal x1083=((0.831890330807703)*px);
sj5array[0]=(((cj4*x1082))+((cj4*x1083))+(((-1.0)*sj4*x1083))+((sj4*x1082)));
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x1084=IKcos(j5);
IkReal x1085=IKsin(j5);
IkReal x1086=(cj4*px);
IkReal x1087=(cj4*py);
IkReal x1088=(px*sj4);
IkReal x1089=(py*sj4);
IkReal x1090=((0.777817459305202)*x1085);
IkReal x1091=((0.707106781186548)*x1085);
IkReal x1092=((0.707106781186548)*x1084);
evalcond[0]=((-0.85)*x1084);
evalcond[1]=((((-1.0)*x1086*x1092))+(((-1.0)*x1089*x1092))+((x1088*x1092))+(((-1.0)*x1087*x1092)));
evalcond[2]=((-0.85)+((x1087*x1091))+(((-1.0)*x1088*x1091))+((x1089*x1091))+((x1086*x1091)));
evalcond[3]=((-0.935)+((x1087*x1090))+(((-1.0)*x1088*x1090))+((x1089*x1090))+((x1086*x1090))+(((0.0636396103067893)*x1088))+(((0.0636396103067893)*x1089))+(((0.0636396103067893)*x1086))+(((-0.0636396103067893)*x1087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0.7225;
evalcond[2]=0;
evalcond[3]=-0.85;
evalcond[4]=-0.935;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
pz=0;
j7=0;
sj7=0;
cj7=1.0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp1_0=0;
rxp1_1=0;
rxp2_0=0;
rxp2_1=0;
px=0;
py=0;
rxp0_2=0;
rxp1_2=0;
rxp2_2=0;
j5eval[0]=1.0;
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j5]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1093=(py*sj4);
IkReal x1094=((0.707106781186548)*cj6);
IkReal x1095=(cj4*py);
IkReal x1096=(cj4*px);
IkReal x1097=(px*sj4);
IkReal x1098=((0.707106781186548)*sj6);
IkReal x1099=(sj4*x1098);
CheckValue<IkReal> x1100=IKPowWithIntegerCheck(((((-14.142135623731)*x1097))+(((14.142135623731)*x1096))+(((14.142135623731)*x1095))+(((14.142135623731)*x1093))),-1);
if(!x1100.valid){
continue;
}
CheckValue<IkReal> x1101=IKPowWithIntegerCheck(((((-1.0)*x1097*x1098))+((x1095*x1098))+((x1093*x1098))+((x1096*x1098))),-1);
if(!x1101.valid){
continue;
}
if( IKabs(((17.0)*(x1100.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1101.value)*((((x1094*x1095))+(((-1.0)*x1094*x1096))+(((-1.0)*x1094*x1097))+(((-1.0)*x1093*x1094)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x1100.value)))+IKsqr(((x1101.value)*((((x1094*x1095))+(((-1.0)*x1094*x1096))+(((-1.0)*x1094*x1097))+(((-1.0)*x1093*x1094))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((17.0)*(x1100.value)), ((x1101.value)*((((x1094*x1095))+(((-1.0)*x1094*x1096))+(((-1.0)*x1094*x1097))+(((-1.0)*x1093*x1094))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1102=IKsin(j5);
IkReal x1103=IKcos(j5);
IkReal x1104=(cj4*px);
IkReal x1105=(px*sj4);
IkReal x1106=((0.707106781186548)*sj6);
IkReal x1107=((0.0636396103067893)*sj6);
IkReal x1108=(cj4*py);
IkReal x1109=(py*sj4);
IkReal x1110=((0.707106781186548)*x1108);
IkReal x1111=(cj6*x1105);
IkReal x1112=((0.0636396103067893)*x1103);
IkReal x1113=(sj6*x1103);
IkReal x1114=((0.707106781186548)*x1103);
IkReal x1115=((0.777817459305202)*x1102);
IkReal x1116=((0.707106781186548)*x1102);
IkReal x1117=(x1102*x1108);
IkReal x1118=((0.707106781186548)*cj6*x1109);
IkReal x1119=(x1102*x1109);
evalcond[0]=((-0.85)*x1103);
evalcond[1]=((((0.85)*x1102))+(((-1.0)*x1110))+(((0.707106781186548)*x1105))+(((-0.707106781186548)*x1104))+(((-0.707106781186548)*x1109)));
evalcond[2]=((-0.85)+((x1109*x1116))+((x1102*x1110))+((x1104*x1116))+(((-1.0)*x1105*x1116)));
evalcond[3]=(((x1103*x1106*x1109))+((x1103*x1106*x1108))+x1118+(((0.707106781186548)*cj6*x1104))+(((-1.0)*x1103*x1105*x1106))+(((-1.0)*cj6*x1110))+((x1103*x1104*x1106))+(((0.707106781186548)*x1111)));
evalcond[4]=(((x1111*x1114))+(((-1.0)*cj6*x1103*x1110))+((x1105*x1106))+((x1104*x1106))+(((-1.0)*cj6*x1109*x1114))+(((-1.0)*x1106*x1108))+(((-1.0)*cj6*x1104*x1114))+((x1106*x1109)));
evalcond[5]=((-0.935)+((x1109*x1115))+((x1108*x1115))+((cj6*x1109*x1112))+((cj6*x1108*x1112))+((x1104*x1115))+(((-1.0)*x1107*x1109))+(((-1.0)*x1104*x1107))+((x1107*x1108))+(((-1.0)*x1111*x1112))+((cj6*x1104*x1112))+(((-1.0)*x1105*x1115))+(((-1.0)*x1105*x1107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1120=((0.707106781186548)*py);
IkReal x1121=(cj6*sj4);
IkReal x1122=(cj4*sj6);
IkReal x1123=(cj4*cj6);
IkReal x1124=((0.707106781186548)*px);
IkReal x1125=((0.831890330807703)*py);
IkReal x1126=((0.831890330807703)*px);
IkReal x1127=((0.707106781186548)*sj4*sj6);
CheckValue<IkReal> x1128=IKPowWithIntegerCheck((((x1121*x1124))+(((-1.0)*x1123*x1124))+(((-1.0)*x1120*x1121))+(((-1.0)*x1120*x1123))),-1);
if(!x1128.valid){
continue;
}
if( IKabs((((sj4*x1125))+((cj4*x1126))+((cj4*x1125))+(((-1.0)*sj4*x1126)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1128.value)*((((x1120*x1122))+(((-1.0)*x1122*x1124))+(((-1.0)*sj4*sj6*x1120))+(((-1.0)*sj4*sj6*x1124)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x1125))+((cj4*x1126))+((cj4*x1125))+(((-1.0)*sj4*x1126))))+IKsqr(((x1128.value)*((((x1120*x1122))+(((-1.0)*x1122*x1124))+(((-1.0)*sj4*sj6*x1120))+(((-1.0)*sj4*sj6*x1124))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((sj4*x1125))+((cj4*x1126))+((cj4*x1125))+(((-1.0)*sj4*x1126))), ((x1128.value)*((((x1120*x1122))+(((-1.0)*x1122*x1124))+(((-1.0)*sj4*sj6*x1120))+(((-1.0)*sj4*sj6*x1124))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1129=IKsin(j5);
IkReal x1130=IKcos(j5);
IkReal x1131=(cj4*px);
IkReal x1132=(px*sj4);
IkReal x1133=((0.707106781186548)*sj6);
IkReal x1134=((0.0636396103067893)*sj6);
IkReal x1135=(cj4*py);
IkReal x1136=(py*sj4);
IkReal x1137=((0.707106781186548)*x1135);
IkReal x1138=(cj6*x1132);
IkReal x1139=((0.0636396103067893)*x1130);
IkReal x1140=(sj6*x1130);
IkReal x1141=((0.707106781186548)*x1130);
IkReal x1142=((0.777817459305202)*x1129);
IkReal x1143=((0.707106781186548)*x1129);
IkReal x1144=(x1129*x1135);
IkReal x1145=((0.707106781186548)*cj6*x1136);
IkReal x1146=(x1129*x1136);
evalcond[0]=((-0.85)*x1130);
evalcond[1]=((((0.707106781186548)*x1132))+(((-0.707106781186548)*x1131))+(((-0.707106781186548)*x1136))+(((-1.0)*x1137))+(((0.85)*x1129)));
evalcond[2]=((-0.85)+((x1129*x1137))+(((-1.0)*x1132*x1143))+((x1131*x1143))+((x1136*x1143)));
evalcond[3]=(x1145+(((-1.0)*x1130*x1132*x1133))+(((0.707106781186548)*cj6*x1131))+((x1130*x1131*x1133))+(((0.707106781186548)*x1138))+(((-1.0)*cj6*x1137))+((x1130*x1133*x1136))+((x1130*x1133*x1135)));
evalcond[4]=(((x1131*x1133))+(((-1.0)*cj6*x1136*x1141))+(((-1.0)*cj6*x1130*x1137))+((x1133*x1136))+(((-1.0)*cj6*x1131*x1141))+((x1138*x1141))+(((-1.0)*x1133*x1135))+((x1132*x1133)));
evalcond[5]=((-0.935)+(((-1.0)*x1131*x1134))+(((-1.0)*x1132*x1142))+((cj6*x1136*x1139))+((x1134*x1135))+((x1131*x1142))+(((-1.0)*x1134*x1136))+(((-1.0)*x1138*x1139))+(((-1.0)*x1132*x1134))+((cj6*x1135*x1139))+((cj6*x1131*x1139))+((x1135*x1142))+((x1136*x1142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1147=((0.707106781186548)*py);
IkReal x1148=(cj6*sj4);
IkReal x1149=(cj4*sj6);
IkReal x1150=(cj4*cj6);
IkReal x1151=((0.707106781186548)*px);
IkReal x1152=((0.831890330807703)*py);
IkReal x1153=((0.831890330807703)*px);
IkReal x1154=((0.707106781186548)*sj4*sj6);
CheckValue<IkReal> x1155=IKPowWithIntegerCheck(((((-1.0)*sj4*sj6*x1151))+((x1149*x1151))+((sj4*sj6*x1147))+((x1147*x1149))),-1);
if(!x1155.valid){
continue;
}
if( IKabs(((((-1.0)*sj4*x1153))+((cj4*x1153))+((cj4*x1152))+((sj4*x1152)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1155.value)*((((x1147*x1150))+(((-1.0)*x1147*x1148))+(((-1.0)*x1148*x1151))+(((-1.0)*x1150*x1151)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x1153))+((cj4*x1153))+((cj4*x1152))+((sj4*x1152))))+IKsqr(((x1155.value)*((((x1147*x1150))+(((-1.0)*x1147*x1148))+(((-1.0)*x1148*x1151))+(((-1.0)*x1150*x1151))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*sj4*x1153))+((cj4*x1153))+((cj4*x1152))+((sj4*x1152))), ((x1155.value)*((((x1147*x1150))+(((-1.0)*x1147*x1148))+(((-1.0)*x1148*x1151))+(((-1.0)*x1150*x1151))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1156=IKsin(j5);
IkReal x1157=IKcos(j5);
IkReal x1158=(cj4*px);
IkReal x1159=(px*sj4);
IkReal x1160=((0.707106781186548)*sj6);
IkReal x1161=((0.0636396103067893)*sj6);
IkReal x1162=(cj4*py);
IkReal x1163=(py*sj4);
IkReal x1164=((0.707106781186548)*x1162);
IkReal x1165=(cj6*x1159);
IkReal x1166=((0.0636396103067893)*x1157);
IkReal x1167=(sj6*x1157);
IkReal x1168=((0.707106781186548)*x1157);
IkReal x1169=((0.777817459305202)*x1156);
IkReal x1170=((0.707106781186548)*x1156);
IkReal x1171=(x1156*x1162);
IkReal x1172=((0.707106781186548)*cj6*x1163);
IkReal x1173=(x1156*x1163);
evalcond[0]=((-0.85)*x1157);
evalcond[1]=((((0.85)*x1156))+(((-0.707106781186548)*x1163))+(((-0.707106781186548)*x1158))+(((-1.0)*x1164))+(((0.707106781186548)*x1159)));
evalcond[2]=((-0.85)+(((-1.0)*x1159*x1170))+((x1163*x1170))+((x1156*x1164))+((x1158*x1170)));
evalcond[3]=((((-1.0)*x1157*x1159*x1160))+x1172+((x1157*x1158*x1160))+(((0.707106781186548)*x1165))+(((-1.0)*cj6*x1164))+(((0.707106781186548)*cj6*x1158))+((x1157*x1160*x1163))+((x1157*x1160*x1162)));
evalcond[4]=(((x1159*x1160))+((x1165*x1168))+(((-1.0)*cj6*x1157*x1164))+(((-1.0)*cj6*x1158*x1168))+(((-1.0)*cj6*x1163*x1168))+((x1158*x1160))+(((-1.0)*x1160*x1162))+((x1160*x1163)));
evalcond[5]=((-0.935)+(((-1.0)*x1159*x1169))+(((-1.0)*x1159*x1161))+((x1163*x1169))+(((-1.0)*x1158*x1161))+((x1162*x1169))+((cj6*x1163*x1166))+((cj6*x1158*x1166))+((cj6*x1162*x1166))+((x1158*x1169))+(((-1.0)*x1161*x1163))+(((-1.0)*x1165*x1166))+((x1161*x1162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1174=cj6*cj6;
IkReal x1175=cj7*cj7;
IkReal x1176=((0.045)*pz);
IkReal x1177=((0.3)*pz);
IkReal x1178=((0.0318198051533946)*py);
IkReal x1179=(sj4*sj7);
IkReal x1180=(cj4*cj6);
IkReal x1181=((0.027)*sj7);
IkReal x1182=(py*sj4);
IkReal x1183=((0.212132034355964)*cj7);
IkReal x1184=(cj6*sj4);
IkReal x1185=((0.0318198051533946)*px);
IkReal x1186=((0.212132034355964)*sj7);
IkReal x1187=(cj4*py);
IkReal x1188=(cj4*sj7);
IkReal x1189=(px*sj4);
IkReal x1190=((0.212132034355964)*cj6);
IkReal x1191=(cj4*px);
IkReal x1192=((0.087975)*x1175);
IkReal x1193=(cj7*x1174);
CheckValue<IkReal> x1194=IKPowWithIntegerCheck(IKsign(((-0.304525)+(((0.00405)*x1193))+(((-0.0495)*sj7))+((x1174*x1192))+(((-0.092025)*x1174))+(((-1.0)*x1192))+((x1181*x1193))+(((-1.0)*cj7*x1181))+(((-1.0)*x1174*x1181))+(((-0.33)*cj7)))),-1);
if(!x1194.valid){
continue;
}
CheckValue<IkReal> x1195 = IKatan2WithCheck(IkReal(((((-0.388908729652601)*x1191))+(((0.388908729652601)*x1189))+((x1183*x1189))+((cj6*sj7*x1177))+((x1179*x1185))+(((-1.0)*x1178*x1188))+(((-1.0)*x1178*x1179))+(((-1.0)*cj6*cj7*x1176))+((cj6*x1176))+(((-1.0)*x1185*x1188))+(((-1.0)*x1183*x1191))+(((-1.0)*x1183*x1187))+(((-1.0)*x1182*x1183))+(((-0.388908729652601)*x1187))+(((-0.388908729652601)*x1182)))),((((-0.55)*pz))+((px*x1179*x1190))+((x1184*x1185))+(((-1.0)*py*x1179*x1190))+((cj7*x1178*x1180))+((cj7*x1178*x1184))+(((-1.0)*cj7*x1177))+(((-1.0)*cj7*x1184*x1185))+(((-1.0)*x1178*x1180))+(((-1.0)*x1178*x1184))+(((-1.0)*x1180*x1185))+(((-1.0)*px*x1180*x1186))+(((-1.0)*py*x1180*x1186))+(((-1.0)*sj7*x1176))+((cj7*x1180*x1185))),IKFAST_ATAN2_MAGTHRESH);
if(!x1195.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1194.value)))+(x1195.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1196=IKsin(j5);
IkReal x1197=IKcos(j5);
IkReal x1198=((0.045)*cj7);
IkReal x1199=((0.707106781186548)*cj4);
IkReal x1200=(cj6*py);
IkReal x1201=(py*sj6);
IkReal x1202=(cj6*sj4);
IkReal x1203=((0.707106781186548)*px);
IkReal x1204=(sj4*sj6);
IkReal x1205=((0.3)*cj7);
IkReal x1206=((0.3)*sj7);
IkReal x1207=((0.045)*sj7);
IkReal x1208=((0.0636396103067893)*px);
IkReal x1209=((0.707106781186548)*sj4);
IkReal x1210=((0.0636396103067893)*cj4);
IkReal x1211=(cj6*x1196);
IkReal x1212=(px*x1197);
IkReal x1213=(cj6*x1197);
IkReal x1214=(sj4*x1197);
IkReal x1215=(pz*x1197);
IkReal x1216=(cj4*py*x1196);
IkReal x1217=(x1200*x1209);
IkReal x1218=(py*sj4*x1196);
IkReal x1219=((0.777817459305202)*px*x1196);
evalcond[0]=((((-1.0)*x1198*x1211))+(((0.045)*x1211))+((x1206*x1211))+pz+(((-0.55)*x1197))+(((-1.0)*x1197*x1207))+(((-1.0)*x1197*x1205)));
evalcond[1]=((-0.55)+x1215+((py*x1196*x1199))+((py*x1196*x1209))+(((-1.0)*x1207))+(((-1.0)*x1205))+(((-1.0)*sj4*x1196*x1203))+((px*x1196*x1199)));
evalcond[2]=(((sj4*x1203))+(((-1.0)*py*x1199))+(((-1.0)*x1198*x1213))+(((0.045)*x1213))+((x1206*x1213))+(((-1.0)*px*x1199))+(((0.55)*x1196))+(((-1.0)*py*x1209))+((x1196*x1205))+((x1196*x1207)));
evalcond[3]=((((-1.0)*x1199*x1200))+x1217+(((-1.0)*x1197*x1203*x1204))+((x1197*x1201*x1209))+((sj6*x1199*x1212))+((x1202*x1203))+((x1197*x1199*x1201))+(((-1.0)*pz*sj6*x1196))+((cj6*px*x1199)));
evalcond[4]=((0.045)+((px*sj6*x1199))+(((-1.0)*x1199*x1201))+x1206+(((-1.0)*x1197*x1217))+(((-1.0)*x1198))+((x1203*x1204))+((x1197*x1202*x1203))+((x1201*x1209))+((pz*x1211))+(((-1.0)*x1197*x1199*x1200))+(((-1.0)*cj6*x1199*x1212)));
evalcond[5]=((-0.2125)+(((-1.0)*x1204*x1208))+(((0.777817459305202)*x1216))+(((0.777817459305202)*x1218))+(((-1.0)*x1197*x1202*x1208))+((cj4*x1219))+(((-1.0)*pp))+((x1201*x1210))+(((-1.0)*cj4*sj6*x1208))+((cj4*x1208*x1213))+(((-1.0)*sj4*x1219))+((x1197*x1200*x1210))+(((-0.09)*pz*x1211))+(((0.0636396103067893)*x1200*x1214))+(((1.1)*x1215))+(((-0.0636396103067893)*sj4*x1201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1220=py*py;
IkReal x1221=cj7*cj7;
IkReal x1222=px*px;
IkReal x1223=(cj6*sj7);
IkReal x1224=(cj4*py);
IkReal x1225=(cj6*cj7);
IkReal x1226=(px*sj4);
IkReal x1227=((0.707106781186548)*pz);
IkReal x1228=(cj4*px);
IkReal x1229=(px*py);
IkReal x1230=(py*sj4);
IkReal x1231=((0.0318198051533946)*cj6);
IkReal x1232=(cj4*sj4);
CheckValue<IkReal> x1233 = IKatan2WithCheck(IkReal(((((-1.0)*x1224*x1227))+(((0.087975)*cj7*x1223))+(((-1.0)*x1227*x1228))+(((-1.0)*x1227*x1230))+(((-0.01125)*x1225))+(((-0.027)*cj6*x1221))+((x1226*x1227))+(((0.167025)*x1223))+(((0.03825)*cj6)))),((-0.304525)+(((-0.027)*cj7*sj7))+(((-1.0)*x1229))+(((-0.0495)*sj7))+(((0.5)*x1220))+(((0.5)*x1222))+(((-1.0)*x1222*x1232))+((x1220*x1232))+(((2.0)*x1224*x1228))+(((-0.087975)*x1221))+(((-0.33)*cj7))),IKFAST_ATAN2_MAGTHRESH);
if(!x1233.valid){
continue;
}
CheckValue<IkReal> x1234=IKPowWithIntegerCheck(IKsign(((((-0.0318198051533946)*x1225*x1228))+(((-0.55)*pz))+(((-0.0318198051533946)*x1224*x1225))+(((-0.212132034355964)*x1223*x1226))+(((-0.3)*cj7*pz))+(((-0.045)*pz*sj7))+(((-1.0)*x1226*x1231))+((x1224*x1231))+(((0.212132034355964)*x1223*x1228))+(((0.212132034355964)*x1223*x1224))+(((0.0318198051533946)*x1225*x1226))+(((0.212132034355964)*x1223*x1230))+((x1228*x1231))+((x1230*x1231))+(((-0.0318198051533946)*x1225*x1230)))),-1);
if(!x1234.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1233.value)+(((1.5707963267949)*(x1234.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1235=IKsin(j5);
IkReal x1236=IKcos(j5);
IkReal x1237=((0.045)*cj7);
IkReal x1238=((0.707106781186548)*cj4);
IkReal x1239=(cj6*py);
IkReal x1240=(py*sj6);
IkReal x1241=(cj6*sj4);
IkReal x1242=((0.707106781186548)*px);
IkReal x1243=(sj4*sj6);
IkReal x1244=((0.3)*cj7);
IkReal x1245=((0.3)*sj7);
IkReal x1246=((0.045)*sj7);
IkReal x1247=((0.0636396103067893)*px);
IkReal x1248=((0.707106781186548)*sj4);
IkReal x1249=((0.0636396103067893)*cj4);
IkReal x1250=(cj6*x1235);
IkReal x1251=(px*x1236);
IkReal x1252=(cj6*x1236);
IkReal x1253=(sj4*x1236);
IkReal x1254=(pz*x1236);
IkReal x1255=(cj4*py*x1235);
IkReal x1256=(x1239*x1248);
IkReal x1257=(py*sj4*x1235);
IkReal x1258=((0.777817459305202)*px*x1235);
evalcond[0]=((((-1.0)*x1237*x1250))+((x1245*x1250))+(((-1.0)*x1236*x1246))+(((-1.0)*x1236*x1244))+(((0.045)*x1250))+pz+(((-0.55)*x1236)));
evalcond[1]=((-0.55)+x1254+((py*x1235*x1248))+((py*x1235*x1238))+(((-1.0)*x1246))+(((-1.0)*x1244))+((px*x1235*x1238))+(((-1.0)*sj4*x1235*x1242)));
evalcond[2]=((((-1.0)*x1237*x1252))+(((-1.0)*py*x1248))+(((-1.0)*px*x1238))+((x1245*x1252))+(((0.045)*x1252))+(((-1.0)*py*x1238))+(((0.55)*x1235))+((x1235*x1246))+((x1235*x1244))+((sj4*x1242)));
evalcond[3]=(x1256+((cj6*px*x1238))+(((-1.0)*x1238*x1239))+((sj6*x1238*x1251))+((x1241*x1242))+((x1236*x1240*x1248))+((x1236*x1238*x1240))+(((-1.0)*pz*sj6*x1235))+(((-1.0)*x1236*x1242*x1243)));
evalcond[4]=((0.045)+x1245+(((-1.0)*x1237))+((x1240*x1248))+(((-1.0)*x1236*x1238*x1239))+((x1236*x1241*x1242))+(((-1.0)*x1238*x1240))+((x1242*x1243))+(((-1.0)*cj6*x1238*x1251))+((px*sj6*x1238))+(((-1.0)*x1236*x1256))+((pz*x1250)));
evalcond[5]=((-0.2125)+(((-0.09)*pz*x1250))+(((-0.0636396103067893)*sj4*x1240))+((cj4*x1247*x1252))+(((-1.0)*cj4*sj6*x1247))+((x1240*x1249))+(((-1.0)*x1236*x1241*x1247))+(((0.0636396103067893)*x1239*x1253))+(((-1.0)*x1243*x1247))+(((-1.0)*pp))+(((1.1)*x1254))+(((-1.0)*sj4*x1258))+(((0.777817459305202)*x1257))+(((0.777817459305202)*x1255))+((x1236*x1239*x1249))+((cj4*x1258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1259=cj7*cj7;
IkReal x1260=(cj6*sj7);
IkReal x1261=(py*sj4);
IkReal x1262=((0.212132034355964)*cj7);
IkReal x1263=(px*sj4);
IkReal x1264=((0.707106781186548)*pz);
IkReal x1265=(cj6*cj7);
IkReal x1266=(cj4*px);
IkReal x1267=((0.0318198051533946)*sj7);
IkReal x1268=((0.045)*pz);
IkReal x1269=(cj4*py);
IkReal x1270=(py*x1267);
IkReal x1271=(cj4*x1264);
CheckValue<IkReal> x1272=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1261*x1262))+(((-1.0)*x1261*x1267))+(((-0.3)*pz*x1260))+(((0.388908729652601)*x1263))+(((-1.0)*cj6*x1268))+(((-1.0)*x1267*x1269))+(((-1.0)*x1266*x1267))+(((-1.0)*x1262*x1269))+(((-1.0)*x1262*x1266))+((x1262*x1263))+((x1263*x1267))+(((-0.388908729652601)*x1261))+(((-0.388908729652601)*x1266))+(((-0.388908729652601)*x1269))+((x1265*x1268)))),-1);
if(!x1272.valid){
continue;
}
CheckValue<IkReal> x1273 = IKatan2WithCheck(IkReal(((-0.304525)+(((-0.027)*cj7*sj7))+(((-0.087975)*x1259))+(((-0.0495)*sj7))+(pz*pz)+(((-0.33)*cj7)))),((((0.01125)*x1265))+(((-0.167025)*x1260))+(((-1.0)*x1264*x1266))+(((-1.0)*x1264*x1269))+(((-1.0)*x1261*x1264))+(((-0.087975)*cj7*x1260))+((x1263*x1264))+(((0.027)*cj6*x1259))+(((-0.03825)*cj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x1273.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1272.value)))+(x1273.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1274=IKsin(j5);
IkReal x1275=IKcos(j5);
IkReal x1276=((0.045)*cj7);
IkReal x1277=((0.707106781186548)*cj4);
IkReal x1278=(cj6*py);
IkReal x1279=(py*sj6);
IkReal x1280=(cj6*sj4);
IkReal x1281=((0.707106781186548)*px);
IkReal x1282=(sj4*sj6);
IkReal x1283=((0.3)*cj7);
IkReal x1284=((0.3)*sj7);
IkReal x1285=((0.045)*sj7);
IkReal x1286=((0.0636396103067893)*px);
IkReal x1287=((0.707106781186548)*sj4);
IkReal x1288=((0.0636396103067893)*cj4);
IkReal x1289=(cj6*x1274);
IkReal x1290=(px*x1275);
IkReal x1291=(cj6*x1275);
IkReal x1292=(sj4*x1275);
IkReal x1293=(pz*x1275);
IkReal x1294=(cj4*py*x1274);
IkReal x1295=(x1278*x1287);
IkReal x1296=(py*sj4*x1274);
IkReal x1297=((0.777817459305202)*px*x1274);
evalcond[0]=((((-1.0)*x1276*x1289))+(((-1.0)*x1275*x1285))+(((-1.0)*x1275*x1283))+((x1284*x1289))+(((0.045)*x1289))+(((-0.55)*x1275))+pz);
evalcond[1]=((-0.55)+x1293+(((-1.0)*sj4*x1274*x1281))+((py*x1274*x1287))+((px*x1274*x1277))+((py*x1274*x1277))+(((-1.0)*x1285))+(((-1.0)*x1283)));
evalcond[2]=((((0.045)*x1291))+(((-1.0)*py*x1277))+((sj4*x1281))+(((0.55)*x1274))+(((-1.0)*px*x1277))+((x1284*x1291))+(((-1.0)*x1276*x1291))+((x1274*x1285))+((x1274*x1283))+(((-1.0)*py*x1287)));
evalcond[3]=(x1295+((x1275*x1277*x1279))+(((-1.0)*x1277*x1278))+((cj6*px*x1277))+((x1275*x1279*x1287))+(((-1.0)*x1275*x1281*x1282))+((x1280*x1281))+(((-1.0)*pz*sj6*x1274))+((sj6*x1277*x1290)));
evalcond[4]=((0.045)+((x1279*x1287))+x1284+(((-1.0)*cj6*x1277*x1290))+(((-1.0)*x1276))+((px*sj6*x1277))+(((-1.0)*x1277*x1279))+(((-1.0)*x1275*x1295))+((x1275*x1280*x1281))+((x1281*x1282))+(((-1.0)*x1275*x1277*x1278))+((pz*x1289)));
evalcond[5]=((-0.2125)+((x1275*x1278*x1288))+(((0.0636396103067893)*x1278*x1292))+((x1279*x1288))+(((-1.0)*sj4*x1297))+(((-1.0)*cj4*sj6*x1286))+((cj4*x1286*x1291))+(((1.1)*x1293))+(((-1.0)*pp))+(((-0.09)*pz*x1289))+(((0.777817459305202)*x1296))+(((0.777817459305202)*x1294))+(((-0.0636396103067893)*sj4*x1279))+((cj4*x1297))+(((-1.0)*x1275*x1280*x1286))+(((-1.0)*x1282*x1286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x1298=((0.707106781186548)*py);
IkReal x1299=((0.707106781186548)*px);
IkReal x1300=((0.045)*sj6);
IkReal x1301=(x1299+(((-1.0)*x1298)));
IkReal x1302=(x1298+x1299);
CheckValue<IkReal> x1305 = IKatan2WithCheck(IkReal(x1301),x1302,IKFAST_ATAN2_MAGTHRESH);
if(!x1305.valid){
continue;
}
IkReal x1303=((1.0)*(x1305.value));
if((((x1302*x1302)+(x1301*x1301))) < -0.00001)
continue;
CheckValue<IkReal> x1306=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1302*x1302)+(x1301*x1301)))),-1);
if(!x1306.valid){
continue;
}
if( (((x1306.value)*((x1300+(((-1.0)*cj7*x1300))+(((0.3)*sj6*sj7)))))) < -1-IKFAST_SINCOS_THRESH || (((x1306.value)*((x1300+(((-1.0)*cj7*x1300))+(((0.3)*sj6*sj7)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1304=IKasin(((x1306.value)*((x1300+(((-1.0)*cj7*x1300))+(((0.3)*sj6*sj7))))));
j4array[0]=((((-1.0)*x1304))+(((-1.0)*x1303)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+x1304+(((-1.0)*x1303)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j5eval[2];
IkReal x1307=(py*sj7);
IkReal x1308=((1.0)*cj4);
IkReal x1309=((0.0318198051533946)*sj4);
IkReal x1310=(cj7*sj4);
IkReal x1311=((6.66666666666667)*px);
IkReal x1312=((0.388908729652601)*sj4);
IkReal x1313=((0.212132034355964)*py);
IkReal x1314=((0.0318198051533946)*cj4);
IkReal x1315=(px*sj7);
IkReal x1316=((12.2222222222222)*sj4);
IkReal x1317=((6.66666666666667)*py);
IkReal x1318=(cj4*cj7);
IkReal x1319=(cj4*py);
IkReal x1320=(cj6*pz);
IkReal x1321=((0.212132034355964)*px);
IkReal x1322=(cj4*px);
j5eval[0]=((((-1.0)*x1311*x1318))+((x1310*x1311))+(((-1.0)*x1317*x1318))+(((-1.0)*x1307*x1308))+(((-1.0)*x1308*x1315))+((px*x1316))+(((1.4142135623731)*cj7*x1320))+((sj4*x1315))+(((-9.42809041582063)*sj7*x1320))+(((-1.4142135623731)*x1320))+(((-1.0)*sj4*x1307))+(((-1.0)*py*x1316))+(((-1.0)*x1310*x1317))+(((-12.2222222222222)*x1322))+(((-12.2222222222222)*x1319)));
j5eval[1]=IKsign(((((-1.0)*x1307*x1309))+(((-1.0)*x1313*x1318))+(((-0.045)*x1320))+((px*x1312))+(((-1.0)*x1307*x1314))+((x1309*x1315))+(((-1.0)*x1314*x1315))+(((-0.388908729652601)*x1319))+(((-0.3)*sj7*x1320))+(((-0.388908729652601)*x1322))+(((-1.0)*py*x1312))+(((-1.0)*x1310*x1313))+(((0.045)*cj7*x1320))+((x1310*x1321))+(((-1.0)*x1318*x1321))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x1323=(py*sj4);
IkReal x1324=(pz*sj7);
IkReal x1325=(cj7*pz);
IkReal x1326=(cj4*px);
IkReal x1327=((0.212132034355964)*sj7);
IkReal x1328=((0.0318198051533946)*cj7);
IkReal x1329=((1.0)*cj7);
IkReal x1330=((0.0318198051533946)*cj6);
IkReal x1331=((6.66666666666667)*cj6*sj7);
IkReal x1332=(cj4*cj6*py);
IkReal x1333=(cj6*px*sj4);
j5eval[0]=(x1332+(((-9.42809041582063)*x1325))+(((-1.0)*cj6*x1326*x1329))+(((-1.0)*x1333))+((cj7*x1333))+(((-1.0)*px*sj4*x1331))+((cj4*py*x1331))+(((-1.4142135623731)*x1324))+(((-1.0)*x1329*x1332))+((x1326*x1331))+((cj6*x1326))+((cj6*x1323))+(((-1.0)*cj6*x1323*x1329))+((x1323*x1331))+(((-17.2848324290045)*pz)));
j5eval[1]=IKsign(((((-0.55)*pz))+(((-1.0)*x1327*x1333))+(((-1.0)*cj6*x1326*x1328))+((cj6*x1323*x1327))+(((-0.045)*x1324))+(((-1.0)*x1328*x1332))+(((-1.0)*px*sj4*x1330))+((cj4*py*x1330))+((x1328*x1333))+((x1326*x1330))+((x1327*x1332))+(((-0.3)*x1325))+(((-1.0)*cj6*x1323*x1328))+((cj6*x1326*x1327))+((x1323*x1330))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x1334=cj6*cj6;
IkReal x1335=cj7*cj7;
IkReal x1336=(cj7*sj7);
IkReal x1337=((0.087975)*x1335);
IkReal x1338=((21.7222222222222)*x1335);
IkReal x1339=((0.027)*x1334);
IkReal x1340=(cj7*x1334);
IkReal x1341=((6.66666666666667)*x1334);
j5eval[0]=((-75.1913580246914)+x1340+(((-1.0)*sj7*x1341))+(((-22.7222222222222)*x1334))+(((-12.2222222222222)*sj7))+((x1336*x1341))+(((-81.4814814814815)*cj7))+(((-1.0)*x1338))+(((-6.66666666666667)*x1336))+((x1334*x1338)));
j5eval[1]=IKsign(((-0.304525)+(((-0.092025)*x1334))+((x1336*x1339))+(((-0.0495)*sj7))+(((-1.0)*sj7*x1339))+(((-0.027)*x1336))+(((0.00405)*x1340))+(((-1.0)*x1337))+((x1334*x1337))+(((-0.33)*cj7))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1342=((0.707106781186548)*py);
IkReal x1343=((0.707106781186548)*px);
IkReal x1344=((0.045)+((sj4*x1342))+((sj4*x1343))+(((-0.045)*cj7))+((cj4*x1343))+(((0.3)*sj7))+(((-1.0)*cj4*x1342)));
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j6), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));
evalcond[2]=x1344;
evalcond[3]=x1344;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x1345=((-1.0)*py);
pz=0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1345);
rxp0_1=(px*r20);
rxp1_0=(r21*x1345);
rxp1_1=(px*r21);
rxp2_0=(r22*x1345);
rxp2_1=(px*r22);
j5eval[0]=(((cj4*py))+((cj4*px))+(((-1.0)*px*sj4))+((py*sj4)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x1346=((-1.0)*py);
pz=0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1346);
rxp0_1=(px*r20);
rxp1_0=(r21*x1346);
rxp1_1=(px*r21);
rxp2_0=(r22*x1346);
rxp2_1=(px*r22);
j5eval[0]=((12.2222222222222)+sj7+(((6.66666666666667)*cj7)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x1347=(py+px);
IkReal x1348=((((-1.0)*px))+py);
IkReal x1350 = ((x1347*x1347)+(x1348*x1348));
if(IKabs(x1350)==0){
continue;
}
IkReal x1349=pow(x1350,-0.5);
CheckValue<IkReal> x1351 = IKatan2WithCheck(IkReal(x1347),x1348,IKFAST_ATAN2_MAGTHRESH);
if(!x1351.valid){
continue;
}
IkReal gconst0=((-1.0)*(x1351.value));
IkReal gconst1=((-1.0)*x1347*x1349);
IkReal gconst2=(x1348*x1349);
IkReal x1352=j4;
IkReal x1353=((0.707106781186548)*gconst2);
IkReal x1354=((0.707106781186548)*gconst1);
CheckValue<IkReal> x1358 = IKatan2WithCheck(IkReal((py+px)),((((-1.0)*px))+py),IKFAST_ATAN2_MAGTHRESH);
if(!x1358.valid){
continue;
}
IkReal x1355=x1358.value;
IkReal x1356=x1355;
IkReal x1357=((0.045)+(((-0.045)*cj7))+((px*x1353))+((px*x1354))+(((0.3)*sj7))+((py*x1354))+(((-1.0)*py*x1353)));
if(((((x1355*x1356))+((j4*x1352))+((j4*x1356))+((x1352*x1355)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((x1355*x1356))+((j4*x1352))+((j4*x1356))+((x1352*x1355)))))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((-1.0)*(px*px)))+(((0.0765)*sj7))+(((-1.0)*(py*py)))+(((0.32595)*cj7)));
evalcond[2]=x1357;
evalcond[3]=x1357;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1359=((0.707106781186548)*px);
IkReal x1360=((0.707106781186548)*py);
CheckValue<IkReal> x1362=IKPowWithIntegerCheck(((((-1.0)*gconst1*x1359))+((gconst1*x1360))+((gconst2*x1360))+((gconst2*x1359))),-1);
if(!x1362.valid){
continue;
}
IkReal x1361=x1362.value;
sj5array[0]=((((0.045)*sj7*x1361))+(((0.3)*cj7*x1361))+(((0.55)*x1361)));
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x1363=IKcos(j5);
IkReal x1364=IKsin(j5);
IkReal x1365=px*px;
IkReal x1366=py*py;
IkReal x1367=(gconst2*px);
IkReal x1368=(gconst2*py);
IkReal x1369=(gconst1*px);
IkReal x1370=(gconst1*py);
IkReal x1371=((0.777817459305202)*x1364);
IkReal x1372=((0.707106781186548)*x1363);
IkReal x1373=((0.588235294117647)*x1363);
evalcond[0]=((((-1.0)*x1365*x1373))+(((-0.108264705882353)*cj7*x1363))+(((-1.0)*x1366*x1373))+(((-0.316735294117647)*x1363)));
evalcond[1]=(((x1367*x1372))+((x1370*x1372))+((x1368*x1372))+(((-1.0)*x1369*x1372)));
evalcond[2]=((((0.045)*sj7*x1364))+(((0.3)*cj7*x1364))+(((-0.707106781186548)*x1370))+(((-0.707106781186548)*x1367))+(((-0.707106781186548)*x1368))+(((0.55)*x1364))+(((0.707106781186548)*x1369)));
evalcond[3]=((-0.2125)+(((-0.0636396103067893)*x1369))+(((-0.0636396103067893)*x1367))+(((-1.0)*x1366))+(((-1.0)*x1365))+(((0.0636396103067893)*x1368))+(((-0.0636396103067893)*x1370))+((x1367*x1371))+((x1370*x1371))+((x1368*x1371))+(((-1.0)*x1369*x1371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1374=(py+px);
IkReal x1375=((((-1.0)*px))+py);
IkReal x1377 = ((x1375*x1375)+(x1374*x1374));
if(IKabs(x1377)==0){
continue;
}
IkReal x1376=pow(x1377,-0.5);
CheckValue<IkReal> x1378 = IKatan2WithCheck(IkReal(x1374),x1375,IKFAST_ATAN2_MAGTHRESH);
if(!x1378.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x1378.value))));
IkReal gconst4=((1.0)*x1374*x1376);
IkReal gconst5=((-1.0)*x1375*x1376);
IkReal x1379=j4;
IkReal x1380=((0.707106781186548)*gconst5);
IkReal x1381=((0.707106781186548)*gconst4);
CheckValue<IkReal> x1385 = IKatan2WithCheck(IkReal((py+px)),((((-1.0)*px))+py),IKFAST_ATAN2_MAGTHRESH);
if(!x1385.valid){
continue;
}
IkReal x1382=x1385.value;
IkReal x1383=x1382;
IkReal x1384=((0.045)+((py*x1381))+(((-0.045)*cj7))+(((0.3)*sj7))+(((-1.0)*py*x1380))+((px*x1381))+((px*x1380)));
if((((9.86960440108936)+(((-3.14159265358979)*x1379))+((j4*x1383))+(((-3.14159265358979)*j4))+((x1379*x1382))+(((-3.14159265358979)*x1383))+(((-3.14159265358979)*x1382))+((j4*x1379))+((x1382*x1383)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+(((-3.14159265358979)*x1379))+((j4*x1383))+(((-3.14159265358979)*j4))+((x1379*x1382))+(((-3.14159265358979)*x1383))+(((-3.14159265358979)*x1382))+((j4*x1379))+((x1382*x1383)))))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((-1.0)*(px*px)))+(((0.0765)*sj7))+(((-1.0)*(py*py)))+(((0.32595)*cj7)));
evalcond[2]=x1384;
evalcond[3]=x1384;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1386=((0.707106781186548)*gconst5);
IkReal x1387=((0.707106781186548)*gconst4);
CheckValue<IkReal> x1389=IKPowWithIntegerCheck((((py*x1387))+((py*x1386))+(((-1.0)*px*x1387))+((px*x1386))),-1);
if(!x1389.valid){
continue;
}
IkReal x1388=x1389.value;
sj5array[0]=((((0.045)*sj7*x1388))+(((0.3)*cj7*x1388))+(((0.55)*x1388)));
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x1390=IKcos(j5);
IkReal x1391=IKsin(j5);
IkReal x1392=px*px;
IkReal x1393=py*py;
IkReal x1394=((0.0636396103067893)*py);
IkReal x1395=(gconst4*px);
IkReal x1396=(gconst5*py);
IkReal x1397=(gconst4*py);
IkReal x1398=(gconst5*px);
IkReal x1399=((0.707106781186548)*x1390);
IkReal x1400=((0.777817459305202)*x1391);
IkReal x1401=((0.588235294117647)*x1390);
IkReal x1402=(gconst5*x1400);
evalcond[0]=((((-0.316735294117647)*x1390))+(((-1.0)*x1393*x1401))+(((-1.0)*x1392*x1401))+(((-0.108264705882353)*cj7*x1390)));
evalcond[1]=(((x1398*x1399))+(((-1.0)*x1395*x1399))+((x1396*x1399))+((x1397*x1399)));
evalcond[2]=((((0.3)*cj7*x1391))+(((0.707106781186548)*x1395))+(((0.55)*x1391))+(((-0.707106781186548)*x1398))+(((-0.707106781186548)*x1396))+(((-0.707106781186548)*x1397))+(((0.045)*sj7*x1391)));
evalcond[3]=((-0.2125)+((gconst5*x1394))+((x1397*x1400))+((x1396*x1400))+(((-1.0)*gconst4*x1394))+((x1398*x1400))+(((-1.0)*x1393))+(((-1.0)*x1392))+(((-1.0)*x1395*x1400))+(((-0.0636396103067893)*x1395))+(((-0.0636396103067893)*x1398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1403=((0.045)+(((-0.045)*cj7))+(((0.3)*sj7)));
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((0.0765)*sj7))+(((0.32595)*cj7)));
evalcond[2]=x1403;
evalcond[3]=((-0.55)+(((-0.045)*sj7))+(((-0.3)*cj7)));
evalcond[4]=0;
evalcond[5]=x1403;
evalcond[6]=-0.2125;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
pz=0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp1_0=0;
rxp1_1=0;
rxp2_0=0;
rxp2_1=0;
px=0;
py=0;
rxp0_2=0;
rxp1_2=0;
rxp2_2=0;
j5eval[0]=IKabs(((2.92556370551481)+cj7));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j5]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((2.92556370551481)+cj7);
op[1]=0;
op[2]=((-2.92556370551481)+(((-1.0)*cj7)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1407=IKPowWithIntegerCheck(((0.55)+(((0.045)*sj7))+(((0.3)*cj7))),-1);
if(!x1407.valid){
continue;
}
IkReal x1404=x1407.value;
IkReal x1405=((0.707106781186548)*sj4*x1404);
IkReal x1406=((0.707106781186548)*cj4*x1404);
sj5array[0]=(((px*x1406))+((py*x1405))+((py*x1406))+(((-1.0)*px*x1405)));
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x1408=IKcos(j5);
IkReal x1409=IKsin(j5);
IkReal x1410=px*px;
IkReal x1411=py*py;
IkReal x1412=((0.707106781186548)*sj4);
IkReal x1413=(cj4*py);
IkReal x1414=((0.777817459305202)*sj4);
IkReal x1415=((0.0636396103067893)*sj4);
IkReal x1416=((0.707106781186548)*cj4);
IkReal x1417=(px*x1408);
IkReal x1418=(py*x1409);
IkReal x1419=(px*x1409);
IkReal x1420=((0.588235294117647)*x1408);
IkReal x1421=(x1409*x1413);
evalcond[0]=((((-0.316735294117647)*x1408))+(((-0.108264705882353)*cj7*x1408))+(((-1.0)*x1410*x1420))+(((-1.0)*x1411*x1420)));
evalcond[1]=((((-1.0)*x1412*x1417))+((py*x1408*x1412))+((x1416*x1417))+(((0.707106781186548)*x1408*x1413)));
evalcond[2]=((-0.55)+(((-0.045)*sj7))+((x1412*x1418))+(((-1.0)*x1412*x1419))+(((-0.3)*cj7))+((x1416*x1419))+(((0.707106781186548)*x1421)));
evalcond[3]=((-0.2125)+(((0.777817459305202)*cj4*x1419))+(((-1.0)*x1414*x1419))+(((0.0636396103067893)*x1413))+(((-1.0)*px*x1415))+(((-0.0636396103067893)*cj4*px))+(((0.777817459305202)*x1421))+((x1414*x1418))+(((-1.0)*py*x1415))+(((-1.0)*x1410))+(((-1.0)*x1411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1422=((0.707106781186548)*sj4);
IkReal x1423=((0.707106781186548)*cj4);
CheckValue<IkReal> x1425=IKPowWithIntegerCheck(((((-1.0)*px*x1422))+((px*x1423))+((py*x1422))+((py*x1423))),-1);
if(!x1425.valid){
continue;
}
IkReal x1424=x1425.value;
sj5array[0]=((((0.3)*cj7*x1424))+(((0.55)*x1424))+(((0.045)*sj7*x1424)));
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x1426=IKcos(j5);
IkReal x1427=IKsin(j5);
IkReal x1428=px*px;
IkReal x1429=py*py;
IkReal x1430=(cj4*py);
IkReal x1431=(px*sj4);
IkReal x1432=(py*sj4);
IkReal x1433=(cj4*px);
IkReal x1434=((0.777817459305202)*x1427);
IkReal x1435=((0.707106781186548)*x1426);
IkReal x1436=((0.588235294117647)*x1426);
evalcond[0]=((((-0.108264705882353)*cj7*x1426))+(((-1.0)*x1429*x1436))+(((-1.0)*x1428*x1436))+(((-0.316735294117647)*x1426)));
evalcond[1]=(((x1432*x1435))+((x1430*x1435))+((x1433*x1435))+(((-1.0)*x1431*x1435)));
evalcond[2]=((((-0.707106781186548)*x1432))+(((-0.707106781186548)*x1430))+(((-0.707106781186548)*x1433))+(((0.3)*cj7*x1427))+(((0.707106781186548)*x1431))+(((0.55)*x1427))+(((0.045)*sj7*x1427)));
evalcond[3]=((-0.2125)+((x1432*x1434))+(((0.0636396103067893)*x1430))+((x1430*x1434))+((x1433*x1434))+(((-1.0)*x1431*x1434))+(((-1.0)*x1429))+(((-1.0)*x1428))+(((-0.0636396103067893)*x1431))+(((-0.0636396103067893)*x1432))+(((-0.0636396103067893)*x1433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1437=((0.3)*sj7);
IkReal x1438=((0.045)*cj7);
IkReal x1439=((0.707106781186548)*py);
IkReal x1440=((0.707106781186548)*px);
IkReal x1441=(cj4*x1439);
IkReal x1442=(cj4*x1440);
IkReal x1443=(sj4*x1439);
IkReal x1444=(sj4*x1440);
IkReal x1445=(x1437+x1441);
IkReal x1446=(x1438+x1444+x1443+x1442);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j6), 6.28318530717959))))));
evalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));
evalcond[2]=((-0.045)+x1446+(((-1.0)*x1445)));
evalcond[3]=((0.045)+x1445+(((-1.0)*x1446)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x1447=((-1.0)*py);
pz=0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1447);
rxp0_1=(px*r20);
rxp1_0=(r21*x1447);
rxp1_1=(px*r21);
rxp2_0=(r22*x1447);
rxp2_1=(px*r22);
j5eval[0]=(((cj4*py))+((cj4*px))+(((-1.0)*px*sj4))+((py*sj4)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x1448=((-1.0)*py);
pz=0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1448);
rxp0_1=(px*r20);
rxp1_0=(r21*x1448);
rxp1_1=(px*r21);
rxp2_0=(r22*x1448);
rxp2_1=(px*r22);
j5eval[0]=((12.2222222222222)+sj7+(((6.66666666666667)*cj7)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x1449=(py+px);
IkReal x1450=((((-1.0)*px))+py);
IkReal x1452 = ((x1450*x1450)+(x1449*x1449));
if(IKabs(x1452)==0){
continue;
}
IkReal x1451=pow(x1452,-0.5);
CheckValue<IkReal> x1453 = IKatan2WithCheck(IkReal(x1449),x1450,IKFAST_ATAN2_MAGTHRESH);
if(!x1453.valid){
continue;
}
IkReal gconst6=((-1.0)*(x1453.value));
IkReal gconst7=((-1.0)*x1449*x1451);
IkReal gconst8=(x1450*x1451);
IkReal x1454=j4;
IkReal x1455=((0.3)*sj7);
IkReal x1456=((0.045)*cj7);
IkReal x1457=((0.707106781186548)*gconst8);
IkReal x1458=((0.707106781186548)*gconst7);
IkReal x1459=(py*x1457);
IkReal x1460=(px*x1457);
IkReal x1461=(py*x1458);
IkReal x1462=(px*x1458);
CheckValue<IkReal> x1467 = IKatan2WithCheck(IkReal((py+px)),((((-1.0)*px))+py),IKFAST_ATAN2_MAGTHRESH);
if(!x1467.valid){
continue;
}
IkReal x1463=x1467.value;
IkReal x1464=x1463;
IkReal x1465=(x1455+x1459);
IkReal x1466=(x1461+x1460+x1462+x1456);
if(((((j4*x1454))+((x1463*x1464))+((j4*x1464))+((x1454*x1463)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((j4*x1454))+((x1463*x1464))+((j4*x1464))+((x1454*x1463)))))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((-1.0)*(px*px)))+(((0.0765)*sj7))+(((-1.0)*(py*py)))+(((0.32595)*cj7)));
evalcond[2]=((-0.045)+(((-1.0)*x1465))+x1466);
evalcond[3]=((0.045)+(((-1.0)*x1466))+x1465);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1468=((0.707106781186548)*px);
IkReal x1469=((0.707106781186548)*py);
CheckValue<IkReal> x1471=IKPowWithIntegerCheck((((gconst7*x1469))+(((-1.0)*gconst7*x1468))+((gconst8*x1469))+((gconst8*x1468))),-1);
if(!x1471.valid){
continue;
}
IkReal x1470=x1471.value;
sj5array[0]=((((0.3)*cj7*x1470))+(((0.55)*x1470))+(((0.045)*sj7*x1470)));
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x1472=IKcos(j5);
IkReal x1473=IKsin(j5);
IkReal x1474=px*px;
IkReal x1475=py*py;
IkReal x1476=(gconst7*px);
IkReal x1477=((0.0636396103067893)*py);
IkReal x1478=(gconst8*px);
IkReal x1479=((0.707106781186548)*py);
IkReal x1480=((0.777817459305202)*x1473);
IkReal x1481=((0.707106781186548)*x1472);
IkReal x1482=((0.588235294117647)*x1472);
IkReal x1483=(py*x1480);
IkReal x1484=(x1472*x1479);
evalcond[0]=((((-0.108264705882353)*cj7*x1472))+(((-1.0)*x1474*x1482))+(((-1.0)*x1475*x1482))+(((-0.316735294117647)*x1472)));
evalcond[1]=(((x1476*x1481))+(((-1.0)*gconst8*x1484))+(((-1.0)*gconst7*x1484))+(((-1.0)*x1478*x1481)));
evalcond[2]=((((0.3)*cj7*x1473))+(((-1.0)*gconst7*x1479))+(((0.55)*x1473))+(((-1.0)*gconst8*x1479))+(((0.045)*sj7*x1473))+(((-0.707106781186548)*x1478))+(((0.707106781186548)*x1476)));
evalcond[3]=((-0.2125)+((gconst8*x1483))+((gconst7*x1483))+(((-1.0)*x1474))+(((-1.0)*x1475))+(((-1.0)*gconst8*x1477))+(((0.0636396103067893)*x1476))+(((0.0636396103067893)*x1478))+((x1478*x1480))+((gconst7*x1477))+(((-1.0)*x1476*x1480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1485=(py+px);
IkReal x1486=((((-1.0)*px))+py);
IkReal x1488 = ((x1486*x1486)+(x1485*x1485));
if(IKabs(x1488)==0){
continue;
}
IkReal x1487=pow(x1488,-0.5);
CheckValue<IkReal> x1489 = IKatan2WithCheck(IkReal(x1485),x1486,IKFAST_ATAN2_MAGTHRESH);
if(!x1489.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x1489.value))));
IkReal gconst10=((1.0)*x1485*x1487);
IkReal gconst11=((-1.0)*x1486*x1487);
IkReal x1490=j4;
IkReal x1491=((0.3)*sj7);
IkReal x1492=((0.045)*cj7);
IkReal x1493=((0.707106781186548)*gconst11);
IkReal x1494=((0.707106781186548)*gconst10);
IkReal x1495=(py*x1493);
IkReal x1496=(px*x1493);
IkReal x1497=(px*x1494);
IkReal x1498=(py*x1494);
CheckValue<IkReal> x1503 = IKatan2WithCheck(IkReal((py+px)),((((-1.0)*px))+py),IKFAST_ATAN2_MAGTHRESH);
if(!x1503.valid){
continue;
}
IkReal x1499=x1503.value;
IkReal x1500=x1499;
IkReal x1501=(x1491+x1495);
IkReal x1502=(x1492+x1496+x1497+x1498);
if((((9.86960440108936)+((x1499*x1500))+(((-3.14159265358979)*x1500))+((j4*x1500))+(((-3.14159265358979)*j4))+((j4*x1490))+((x1490*x1499))+(((-3.14159265358979)*x1490))+(((-3.14159265358979)*x1499)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+((x1499*x1500))+(((-3.14159265358979)*x1500))+((j4*x1500))+(((-3.14159265358979)*j4))+((j4*x1490))+((x1490*x1499))+(((-3.14159265358979)*x1490))+(((-3.14159265358979)*x1499)))))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((-1.0)*(px*px)))+(((0.0765)*sj7))+(((-1.0)*(py*py)))+(((0.32595)*cj7)));
evalcond[2]=((-0.045)+(((-1.0)*x1501))+x1502);
evalcond[3]=((0.045)+(((-1.0)*x1502))+x1501);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1504=((0.707106781186548)*py);
IkReal x1505=((0.707106781186548)*px);
CheckValue<IkReal> x1507=IKPowWithIntegerCheck((((gconst10*x1504))+(((-1.0)*gconst10*x1505))+((gconst11*x1504))+((gconst11*x1505))),-1);
if(!x1507.valid){
continue;
}
IkReal x1506=x1507.value;
sj5array[0]=((((0.55)*x1506))+(((0.3)*cj7*x1506))+(((0.045)*sj7*x1506)));
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x1508=IKcos(j5);
IkReal x1509=IKsin(j5);
IkReal x1510=px*px;
IkReal x1511=py*py;
IkReal x1512=(gconst11*py);
IkReal x1513=(gconst10*px);
IkReal x1514=(gconst11*px);
IkReal x1515=(gconst10*py);
IkReal x1516=((0.707106781186548)*x1508);
IkReal x1517=((0.777817459305202)*x1509);
IkReal x1518=((0.588235294117647)*x1508);
evalcond[0]=((((-0.316735294117647)*x1508))+(((-1.0)*x1510*x1518))+(((-0.108264705882353)*cj7*x1508))+(((-1.0)*x1511*x1518)));
evalcond[1]=(((x1513*x1516))+(((-1.0)*x1515*x1516))+(((-1.0)*x1514*x1516))+(((-1.0)*x1512*x1516)));
evalcond[2]=((((0.55)*x1509))+(((-0.707106781186548)*x1514))+(((-0.707106781186548)*x1515))+(((-0.707106781186548)*x1512))+(((0.3)*cj7*x1509))+(((0.707106781186548)*x1513))+(((0.045)*sj7*x1509)));
evalcond[3]=((-0.2125)+((x1514*x1517))+(((-1.0)*x1510))+(((-1.0)*x1511))+(((-1.0)*x1513*x1517))+(((0.0636396103067893)*x1513))+(((0.0636396103067893)*x1514))+(((0.0636396103067893)*x1515))+((x1515*x1517))+(((-0.0636396103067893)*x1512))+((x1512*x1517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1519=((0.3)*sj7);
IkReal x1520=((0.045)*cj7);
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=((0.39655)+(((0.0765)*sj7))+(((0.32595)*cj7)));
evalcond[2]=((-0.045)+(((-1.0)*x1519))+x1520);
evalcond[3]=((-0.55)+(((-0.045)*sj7))+(((-0.3)*cj7)));
evalcond[4]=0;
evalcond[5]=((0.045)+(((-1.0)*x1520))+x1519);
evalcond[6]=-0.2125;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
pz=0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp1_0=0;
rxp1_1=0;
rxp2_0=0;
rxp2_1=0;
px=0;
py=0;
rxp0_2=0;
rxp1_2=0;
rxp2_2=0;
j5eval[0]=IKabs(((2.92556370551481)+cj7));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j5]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((2.92556370551481)+cj7);
op[1]=0;
op[2]=((-2.92556370551481)+(((-1.0)*cj7)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1524=IKPowWithIntegerCheck(((0.55)+(((0.045)*sj7))+(((0.3)*cj7))),-1);
if(!x1524.valid){
continue;
}
IkReal x1521=x1524.value;
IkReal x1522=((0.707106781186548)*sj4*x1521);
IkReal x1523=((0.707106781186548)*cj4*x1521);
sj5array[0]=(((px*x1523))+(((-1.0)*px*x1522))+((py*x1523))+((py*x1522)));
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x1525=IKcos(j5);
IkReal x1526=IKsin(j5);
IkReal x1527=px*px;
IkReal x1528=py*py;
IkReal x1529=((0.707106781186548)*sj4);
IkReal x1530=(cj4*py);
IkReal x1531=((0.777817459305202)*sj4);
IkReal x1532=((0.0636396103067893)*sj4);
IkReal x1533=((0.707106781186548)*cj4);
IkReal x1534=(px*x1525);
IkReal x1535=(py*x1526);
IkReal x1536=(px*x1526);
IkReal x1537=((0.588235294117647)*x1525);
IkReal x1538=(x1526*x1530);
evalcond[0]=((((-0.316735294117647)*x1525))+(((-0.108264705882353)*cj7*x1525))+(((-1.0)*x1528*x1537))+(((-1.0)*x1527*x1537)));
evalcond[1]=((((-1.0)*py*x1525*x1529))+((x1529*x1534))+(((-0.707106781186548)*x1525*x1530))+(((-1.0)*x1533*x1534)));
evalcond[2]=((-0.55)+(((-0.045)*sj7))+(((-1.0)*x1529*x1536))+(((-0.3)*cj7))+((x1529*x1535))+(((0.707106781186548)*x1538))+((x1533*x1536)));
evalcond[3]=((-0.2125)+(((0.777817459305202)*x1538))+(((-1.0)*x1531*x1536))+(((0.777817459305202)*cj4*x1536))+((x1531*x1535))+(((0.0636396103067893)*cj4*px))+(((-0.0636396103067893)*x1530))+((px*x1532))+((py*x1532))+(((-1.0)*x1528))+(((-1.0)*x1527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1539=((0.707106781186548)*sj4);
IkReal x1540=((0.707106781186548)*cj4);
CheckValue<IkReal> x1542=IKPowWithIntegerCheck(((((-1.0)*px*x1539))+((py*x1540))+((px*x1540))+((py*x1539))),-1);
if(!x1542.valid){
continue;
}
IkReal x1541=x1542.value;
sj5array[0]=((((0.045)*sj7*x1541))+(((0.55)*x1541))+(((0.3)*cj7*x1541)));
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x1543=IKcos(j5);
IkReal x1544=IKsin(j5);
IkReal x1545=px*px;
IkReal x1546=py*py;
IkReal x1547=(cj4*py);
IkReal x1548=(px*sj4);
IkReal x1549=(py*sj4);
IkReal x1550=(cj4*px);
IkReal x1551=((0.777817459305202)*x1544);
IkReal x1552=((0.707106781186548)*x1543);
IkReal x1553=((0.588235294117647)*x1543);
evalcond[0]=((((-1.0)*x1546*x1553))+(((-0.108264705882353)*cj7*x1543))+(((-0.316735294117647)*x1543))+(((-1.0)*x1545*x1553)));
evalcond[1]=((((-1.0)*x1549*x1552))+(((-1.0)*x1550*x1552))+((x1548*x1552))+(((-1.0)*x1547*x1552)));
evalcond[2]=((((0.045)*sj7*x1544))+(((0.55)*x1544))+(((0.3)*cj7*x1544))+(((-0.707106781186548)*x1550))+(((0.707106781186548)*x1548))+(((-0.707106781186548)*x1547))+(((-0.707106781186548)*x1549)));
evalcond[3]=((-0.2125)+(((-1.0)*x1545))+(((-1.0)*x1546))+((x1547*x1551))+(((-0.0636396103067893)*x1547))+((x1550*x1551))+(((0.0636396103067893)*x1549))+(((0.0636396103067893)*x1548))+(((-1.0)*x1548*x1551))+((x1549*x1551))+(((0.0636396103067893)*x1550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1554=((0.707106781186548)*cj4);
IkReal x1555=((0.707106781186548)*sj4);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959)))))+(IKabs(pz)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((((-1.0)*py*x1554))+((py*x1555))+((px*x1555))+((px*x1554)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x1556=((-1.0)*py);
pz=0;
j7=0;
sj7=0;
cj7=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1556);
rxp0_1=(px*r20);
rxp1_0=(r21*x1556);
rxp1_1=(px*r21);
rxp2_0=(r22*x1556);
rxp2_1=(px*r22);
IkReal x1557=(px*sj6);
IkReal x1558=(py*sj6);
j5eval[0]=(((sj4*x1558))+(((-1.0)*sj4*x1557))+((cj4*x1558))+((cj4*x1557)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x1559=((-1.0)*py);
pz=0;
j7=0;
sj7=0;
cj7=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1559);
rxp0_1=(px*r20);
rxp1_0=(r21*x1559);
rxp1_1=(px*r21);
rxp2_0=(r22*x1559);
rxp2_1=(px*r22);
IkReal x1560=(cj6*px);
IkReal x1561=((1.0)*cj4);
IkReal x1562=(cj6*py);
j5eval[0]=(((sj4*x1560))+(((-1.0)*x1560*x1561))+(((-1.0)*sj4*x1562))+(((-1.0)*x1561*x1562)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x1563=((-1.0)*py);
pz=0;
j7=0;
sj7=0;
cj7=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1563);
rxp0_1=(px*r20);
rxp1_0=(r21*x1563);
rxp1_1=(px*r21);
rxp2_0=(r22*x1563);
rxp2_1=(px*r22);
IkReal x1564=(px*sj6);
IkReal x1565=((1.0)*sj4);
IkReal x1566=(py*sj4);
IkReal x1567=(cj4*py);
j5eval[0]=(((cj4*px))+x1566+x1567+(((-1.0)*px*x1565)));
j5eval[1]=(((sj6*x1566))+((sj6*x1567))+((cj4*x1564))+(((-1.0)*x1564*x1565)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x1568=(py+px);
IkReal x1569=((((-1.0)*px))+py);
IkReal x1571 = ((x1569*x1569)+(x1568*x1568));
if(IKabs(x1571)==0){
continue;
}
IkReal x1570=pow(x1571,-0.5);
CheckValue<IkReal> x1572 = IKatan2WithCheck(IkReal(x1568),x1569,IKFAST_ATAN2_MAGTHRESH);
if(!x1572.valid){
continue;
}
IkReal gconst12=((-1.0)*(x1572.value));
IkReal gconst13=((-1.0)*x1568*x1570);
IkReal gconst14=(x1569*x1570);
IkReal x1573=j4;
IkReal x1574=((0.707106781186548)*py);
IkReal x1575=((0.707106781186548)*px);
CheckValue<IkReal> x1578 = IKatan2WithCheck(IkReal((py+px)),((((-1.0)*px))+py),IKFAST_ATAN2_MAGTHRESH);
if(!x1578.valid){
continue;
}
IkReal x1576=x1578.value;
IkReal x1577=x1576;
if(((((x1576*x1577))+((x1573*x1576))+((j4*x1573))+((j4*x1577)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((x1576*x1577))+((x1573*x1576))+((j4*x1573))+((j4*x1577)))))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*(px*px)))+(((-1.0)*(py*py))));
evalcond[2]=(((gconst14*x1575))+((gconst13*x1575))+((gconst13*x1574))+(((-1.0)*gconst14*x1574)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1579=((0.831890330807703)*py);
IkReal x1580=((0.831890330807703)*px);
sj5array[0]=(((gconst14*x1580))+((gconst14*x1579))+((gconst13*x1579))+(((-1.0)*gconst13*x1580)));
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1581=IKsin(j5);
IkReal x1582=IKcos(j5);
IkReal x1583=((0.707106781186548)*sj6);
IkReal x1584=(gconst13*py);
IkReal x1585=(gconst14*px);
IkReal x1586=((0.707106781186548)*cj6);
IkReal x1587=(gconst13*px);
IkReal x1588=((0.0636396103067893)*sj6);
IkReal x1589=(gconst14*py);
IkReal x1590=((0.777817459305202)*x1581);
IkReal x1591=((0.707106781186548)*x1581);
IkReal x1592=((0.0636396103067893)*cj6*x1582);
evalcond[0]=((-0.85)*x1582);
evalcond[1]=((-0.85)+((x1584*x1591))+((x1589*x1591))+((x1585*x1591))+(((-1.0)*x1587*x1591)));
evalcond[2]=(((x1586*x1587))+((x1584*x1586))+(((-1.0)*x1582*x1583*x1587))+(((-1.0)*x1586*x1589))+((x1585*x1586))+((x1582*x1583*x1584))+((x1582*x1583*x1585))+((x1582*x1583*x1589)));
evalcond[3]=((((-1.0)*x1582*x1586*x1589))+((x1583*x1587))+((x1583*x1584))+((x1583*x1585))+(((-1.0)*x1582*x1584*x1586))+((x1582*x1586*x1587))+(((-1.0)*x1582*x1585*x1586))+(((-1.0)*x1583*x1589)));
evalcond[4]=((-0.935)+(((-1.0)*x1585*x1588))+((x1584*x1590))+((x1584*x1592))+((x1588*x1589))+((x1589*x1592))+((x1589*x1590))+(((-1.0)*x1584*x1588))+((x1585*x1590))+((x1585*x1592))+(((-1.0)*x1587*x1588))+(((-1.0)*x1587*x1590))+(((-1.0)*x1587*x1592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1593=(py+px);
IkReal x1594=((((-1.0)*px))+py);
IkReal x1596 = ((x1594*x1594)+(x1593*x1593));
if(IKabs(x1596)==0){
continue;
}
IkReal x1595=pow(x1596,-0.5);
CheckValue<IkReal> x1597 = IKatan2WithCheck(IkReal(x1593),x1594,IKFAST_ATAN2_MAGTHRESH);
if(!x1597.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x1597.value))));
IkReal gconst16=((1.0)*x1593*x1595);
IkReal gconst17=((-1.0)*x1594*x1595);
IkReal x1598=j4;
IkReal x1599=((0.707106781186548)*gconst16);
IkReal x1600=((0.707106781186548)*gconst17);
CheckValue<IkReal> x1603 = IKatan2WithCheck(IkReal((py+px)),((((-1.0)*px))+py),IKFAST_ATAN2_MAGTHRESH);
if(!x1603.valid){
continue;
}
IkReal x1601=x1603.value;
IkReal x1602=x1601;
if((((9.86960440108936)+(((-3.14159265358979)*x1598))+((x1601*x1602))+((j4*x1598))+(((-3.14159265358979)*x1601))+(((-3.14159265358979)*x1602))+((j4*x1602))+(((-3.14159265358979)*j4))+((x1598*x1601)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+(((-3.14159265358979)*x1598))+((x1601*x1602))+((j4*x1598))+(((-3.14159265358979)*x1601))+(((-3.14159265358979)*x1602))+((j4*x1602))+(((-3.14159265358979)*j4))+((x1598*x1601)))))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*(px*px)))+(((-1.0)*(py*py))));
evalcond[2]=((((-1.0)*py*x1600))+((py*x1599))+((px*x1600))+((px*x1599)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1604=((0.831890330807703)*px);
IkReal x1605=((0.831890330807703)*py);
IkReal x1606=((0.707106781186548)*cj6*gconst17);
IkReal x1607=((0.707106781186548)*px*sj6);
IkReal x1608=((0.707106781186548)*cj6*gconst16);
IkReal x1609=((0.707106781186548)*py*sj6);
CheckValue<IkReal> x1610=IKPowWithIntegerCheck((((gconst16*x1609))+((gconst17*x1607))+((gconst17*x1609))+(((-1.0)*gconst16*x1607))),-1);
if(!x1610.valid){
continue;
}
if( IKabs((((gconst16*x1605))+((gconst17*x1605))+((gconst17*x1604))+(((-1.0)*gconst16*x1604)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1610.value)*((((py*x1606))+(((-1.0)*py*x1608))+(((-1.0)*px*x1608))+(((-1.0)*px*x1606)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst16*x1605))+((gconst17*x1605))+((gconst17*x1604))+(((-1.0)*gconst16*x1604))))+IKsqr(((x1610.value)*((((py*x1606))+(((-1.0)*py*x1608))+(((-1.0)*px*x1608))+(((-1.0)*px*x1606))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((gconst16*x1605))+((gconst17*x1605))+((gconst17*x1604))+(((-1.0)*gconst16*x1604))), ((x1610.value)*((((py*x1606))+(((-1.0)*py*x1608))+(((-1.0)*px*x1608))+(((-1.0)*px*x1606))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1611=IKsin(j5);
IkReal x1612=IKcos(j5);
IkReal x1613=(gconst17*py);
IkReal x1614=((0.707106781186548)*px);
IkReal x1615=(gconst16*sj6);
IkReal x1616=((0.0636396103067893)*sj6);
IkReal x1617=(cj6*gconst16);
IkReal x1618=((0.707106781186548)*py);
IkReal x1619=(gconst17*px);
IkReal x1620=(gconst17*sj6);
IkReal x1621=((0.707106781186548)*sj6);
IkReal x1622=((0.0636396103067893)*px);
IkReal x1623=((0.0636396103067893)*gconst16*py);
IkReal x1624=(cj6*x1612);
IkReal x1625=((0.777817459305202)*x1611);
IkReal x1626=(gconst16*x1611);
evalcond[0]=((-0.85)*x1612);
evalcond[1]=(((gconst16*x1614))+(((0.85)*x1611))+(((-1.0)*gconst17*x1614))+(((-0.707106781186548)*x1613))+(((-1.0)*gconst16*x1618)));
evalcond[2]=((-0.85)+(((0.707106781186548)*x1611*x1613))+((gconst17*x1611*x1614))+(((-1.0)*x1614*x1626))+((x1618*x1626)));
evalcond[3]=((((-1.0)*x1612*x1614*x1615))+((x1617*x1618))+((x1612*x1614*x1620))+((x1612*x1615*x1618))+((x1614*x1617))+((x1612*x1613*x1621))+(((-0.707106781186548)*cj6*x1613))+((cj6*gconst17*x1614)));
evalcond[4]=((((-1.0)*x1612*x1617*x1618))+(((-0.707106781186548)*x1613*x1624))+((x1612*x1614*x1617))+((x1614*x1620))+((x1614*x1615))+((x1615*x1618))+(((-1.0)*gconst17*x1614*x1624))+(((-1.0)*x1613*x1621)));
evalcond[5]=((-0.935)+(((0.0636396103067893)*x1613*x1624))+(((-1.0)*x1612*x1617*x1622))+(((-1.0)*x1616*x1619))+(((0.0636396103067893)*x1619*x1624))+((gconst16*py*x1625))+(((0.0636396103067893)*py*x1612*x1617))+((x1619*x1625))+(((-1.0)*x1615*x1622))+(((-0.0636396103067893)*py*x1615))+((x1613*x1625))+(((-1.0)*gconst16*px*x1625))+((x1613*x1616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1627=((0.707106781186548)*sj4);
IkReal x1628=((0.707106781186548)*cj4);
IkReal x1629=(((py*x1627))+(((-1.0)*py*x1628))+((px*x1627))+((px*x1628)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*(px*px)))+(((-1.0)*(py*py))));
evalcond[2]=x1629;
evalcond[3]=x1629;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x1630=((-1.0)*py);
pz=0;
j7=0;
sj7=0;
cj7=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1630);
rxp0_1=(px*r20);
rxp1_0=(r21*x1630);
rxp1_1=(px*r21);
rxp2_0=(r22*x1630);
rxp2_1=(px*r22);
sj6=0;
cj6=1.0;
j6=0;
j5eval[0]=(((cj4*py))+((cj4*px))+(((-1.0)*px*sj4))+((py*sj4)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0.7225;
evalcond[2]=0;
evalcond[3]=-0.85;
evalcond[4]=-0.935;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
pz=0;
j7=0;
sj7=0;
cj7=1.0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp1_0=0;
rxp1_1=0;
rxp2_0=0;
rxp2_1=0;
sj6=0;
cj6=1.0;
j6=0;
px=0;
py=0;
rxp0_2=0;
rxp1_2=0;
rxp2_2=0;
j5eval[0]=1.0;
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1631=py*py;
IkReal x1632=px*px;
IkReal x1633=((216.374675043084)*px);
IkReal x1634=(px*py);
IkReal x1635=((216.374675043084)*py);
IkReal x1636=((0.831890330807703)*py);
IkReal x1637=((0.831890330807703)*px);
IkReal x1638=((4400.0)*cj4*sj4);
CheckValue<IkReal> x1639=IKPowWithIntegerCheck(((((-1.0)*sj4*x1633))+((sj4*x1635))+((cj4*x1635))+((cj4*x1633))),-1);
if(!x1639.valid){
continue;
}
if( IKabs(((((-1.0)*sj4*x1637))+((sj4*x1636))+((cj4*x1637))+((cj4*x1636)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1639.value)*(((3179.0)+(((-2200.0)*x1632))+(((-2200.0)*x1631))+(((4400.0)*x1634))+(((-8800.0)*x1634*(cj4*cj4)))+((x1632*x1638))+(((-1.0)*x1631*x1638)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x1637))+((sj4*x1636))+((cj4*x1637))+((cj4*x1636))))+IKsqr(((x1639.value)*(((3179.0)+(((-2200.0)*x1632))+(((-2200.0)*x1631))+(((4400.0)*x1634))+(((-8800.0)*x1634*(cj4*cj4)))+((x1632*x1638))+(((-1.0)*x1631*x1638))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*sj4*x1637))+((sj4*x1636))+((cj4*x1637))+((cj4*x1636))), ((x1639.value)*(((3179.0)+(((-2200.0)*x1632))+(((-2200.0)*x1631))+(((4400.0)*x1634))+(((-8800.0)*x1634*(cj4*cj4)))+((x1632*x1638))+(((-1.0)*x1631*x1638))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1640=IKcos(j5);
IkReal x1641=IKsin(j5);
IkReal x1642=(cj4*py);
IkReal x1643=(px*sj4);
IkReal x1644=(py*sj4);
IkReal x1645=(cj4*px);
IkReal x1646=((0.0636396103067893)*x1640);
IkReal x1647=((0.707106781186548)*x1641);
IkReal x1648=((0.777817459305202)*x1641);
IkReal x1649=((0.707106781186548)*x1640);
evalcond[0]=((-0.85)*x1640);
evalcond[1]=((((-0.707106781186548)*x1645))+(((-0.707106781186548)*x1644))+(((-0.707106781186548)*x1642))+(((0.707106781186548)*x1643))+(((0.85)*x1641)));
evalcond[2]=((((-1.0)*x1644*x1649))+(((-1.0)*x1645*x1649))+(((-1.0)*x1642*x1649))+((x1643*x1649)));
evalcond[3]=((-0.85)+((x1645*x1647))+((x1644*x1647))+(((-1.0)*x1643*x1647))+((x1642*x1647)));
evalcond[4]=((-0.935)+((x1645*x1646))+((x1645*x1648))+((x1644*x1646))+((x1644*x1648))+(((-1.0)*x1643*x1646))+(((-1.0)*x1643*x1648))+((x1642*x1648))+((x1642*x1646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1650=((0.707106781186548)*sj4);
IkReal x1651=((0.707106781186548)*cj4);
IkReal x1652=(py*x1651);
IkReal x1653=(((px*x1651))+((px*x1650))+((py*x1650)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*(px*px)))+(((-1.0)*(py*py))));
evalcond[2]=(x1653+(((-1.0)*x1652)));
evalcond[3]=(x1652+(((-1.0)*x1653)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
IkReal x1654=((-1.0)*py);
pz=0;
j7=0;
sj7=0;
cj7=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1654);
rxp0_1=(px*r20);
rxp1_0=(r21*x1654);
rxp1_1=(px*r21);
rxp2_0=(r22*x1654);
rxp2_1=(px*r22);
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x1655=((1.0)*cj4);
j5eval[0]=((((-1.0)*py*x1655))+(((-1.0)*px*x1655))+(((-1.0)*py*sj4))+((px*sj4)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0.7225;
evalcond[2]=0;
evalcond[3]=-0.85;
evalcond[4]=-0.935;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
pz=0;
j7=0;
sj7=0;
cj7=1.0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp1_0=0;
rxp1_1=0;
rxp2_0=0;
rxp2_1=0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
px=0;
py=0;
rxp0_2=0;
rxp1_2=0;
rxp2_2=0;
j5eval[0]=1.0;
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1656=py*py;
IkReal x1657=px*px;
IkReal x1658=((216.374675043084)*px);
IkReal x1659=((216.374675043084)*py);
IkReal x1660=(px*py);
IkReal x1661=((0.831890330807703)*py);
IkReal x1662=((0.831890330807703)*px);
IkReal x1663=((4400.0)*cj4*sj4);
CheckValue<IkReal> x1664=IKPowWithIntegerCheck(((((-1.0)*cj4*x1659))+(((-1.0)*cj4*x1658))+(((-1.0)*sj4*x1659))+((sj4*x1658))),-1);
if(!x1664.valid){
continue;
}
if( IKabs((((cj4*x1661))+((cj4*x1662))+(((-1.0)*sj4*x1662))+((sj4*x1661)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1664.value)*(((3179.0)+(((-1.0)*x1656*x1663))+(((-2200.0)*x1656))+(((-2200.0)*x1657))+((x1657*x1663))+(((-8800.0)*x1660*(cj4*cj4)))+(((4400.0)*x1660)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x1661))+((cj4*x1662))+(((-1.0)*sj4*x1662))+((sj4*x1661))))+IKsqr(((x1664.value)*(((3179.0)+(((-1.0)*x1656*x1663))+(((-2200.0)*x1656))+(((-2200.0)*x1657))+((x1657*x1663))+(((-8800.0)*x1660*(cj4*cj4)))+(((4400.0)*x1660))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj4*x1661))+((cj4*x1662))+(((-1.0)*sj4*x1662))+((sj4*x1661))), ((x1664.value)*(((3179.0)+(((-1.0)*x1656*x1663))+(((-2200.0)*x1656))+(((-2200.0)*x1657))+((x1657*x1663))+(((-8800.0)*x1660*(cj4*cj4)))+(((4400.0)*x1660))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1665=IKcos(j5);
IkReal x1666=IKsin(j5);
IkReal x1667=(cj4*py);
IkReal x1668=(px*sj4);
IkReal x1669=(py*sj4);
IkReal x1670=(cj4*px);
IkReal x1671=((0.0636396103067893)*x1665);
IkReal x1672=((0.707106781186548)*x1666);
IkReal x1673=((0.777817459305202)*x1666);
IkReal x1674=((0.707106781186548)*x1665);
evalcond[0]=((-0.85)*x1665);
evalcond[1]=((((0.85)*x1666))+(((-0.707106781186548)*x1670))+(((-0.707106781186548)*x1669))+(((-0.707106781186548)*x1667))+(((0.707106781186548)*x1668)));
evalcond[2]=((((-1.0)*x1668*x1674))+((x1667*x1674))+((x1669*x1674))+((x1670*x1674)));
evalcond[3]=((-0.85)+(((-1.0)*x1668*x1672))+((x1667*x1672))+((x1669*x1672))+((x1670*x1672)));
evalcond[4]=((-0.935)+(((-1.0)*x1667*x1671))+(((-1.0)*x1668*x1673))+((x1667*x1673))+(((-1.0)*x1669*x1671))+((x1668*x1671))+((x1669*x1673))+(((-1.0)*x1670*x1671))+((x1670*x1673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1675=((0.707106781186548)*sj4);
IkReal x1676=((0.707106781186548)*cj4);
IkReal x1677=(((py*x1675))+((px*x1676))+((px*x1675))+(((-1.0)*py*x1676)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*(px*px)))+(((-1.0)*(py*py))));
evalcond[2]=x1677;
evalcond[3]=x1677;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1678=((0.831890330807703)*py);
IkReal x1679=((0.831890330807703)*px);
sj5array[0]=(((sj4*x1678))+(((-1.0)*sj4*x1679))+((cj4*x1679))+((cj4*x1678)));
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x1680=IKcos(j5);
IkReal x1681=IKsin(j5);
IkReal x1682=(cj4*px);
IkReal x1683=(cj4*py);
IkReal x1684=(px*sj4);
IkReal x1685=(py*sj4);
IkReal x1686=((0.777817459305202)*x1681);
IkReal x1687=((0.707106781186548)*x1681);
IkReal x1688=((0.707106781186548)*x1680);
evalcond[0]=((-0.85)*x1680);
evalcond[1]=(((x1682*x1688))+((x1685*x1688))+((x1683*x1688))+(((-1.0)*x1684*x1688)));
evalcond[2]=((-0.85)+((x1682*x1687))+((x1685*x1687))+((x1683*x1687))+(((-1.0)*x1684*x1687)));
evalcond[3]=((-0.935)+(((0.0636396103067893)*x1683))+(((-0.0636396103067893)*x1682))+(((-0.0636396103067893)*x1685))+(((-0.0636396103067893)*x1684))+((x1682*x1686))+((x1685*x1686))+((x1683*x1686))+(((-1.0)*x1684*x1686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1689=((0.707106781186548)*sj4);
IkReal x1690=((0.707106781186548)*cj4);
IkReal x1691=(py*x1690);
IkReal x1692=(((px*x1690))+((px*x1689))+((py*x1689)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*(px*px)))+(((-1.0)*(py*py))));
evalcond[2]=((((-1.0)*x1691))+x1692);
evalcond[3]=((((-1.0)*x1692))+x1691);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1693=((0.831890330807703)*py);
IkReal x1694=((0.831890330807703)*px);
sj5array[0]=(((cj4*x1694))+((cj4*x1693))+((sj4*x1693))+(((-1.0)*sj4*x1694)));
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x1695=IKcos(j5);
IkReal x1696=IKsin(j5);
IkReal x1697=(cj4*px);
IkReal x1698=(cj4*py);
IkReal x1699=(px*sj4);
IkReal x1700=(py*sj4);
IkReal x1701=((0.777817459305202)*x1696);
IkReal x1702=((0.707106781186548)*x1696);
IkReal x1703=((0.707106781186548)*x1695);
evalcond[0]=((-0.85)*x1695);
evalcond[1]=((((-1.0)*x1698*x1703))+(((-1.0)*x1700*x1703))+((x1699*x1703))+(((-1.0)*x1697*x1703)));
evalcond[2]=((-0.85)+((x1697*x1702))+(((-1.0)*x1699*x1702))+((x1700*x1702))+((x1698*x1702)));
evalcond[3]=((-0.935)+((x1697*x1701))+(((0.0636396103067893)*x1699))+(((0.0636396103067893)*x1697))+(((-0.0636396103067893)*x1698))+(((-1.0)*x1699*x1701))+((x1700*x1701))+(((0.0636396103067893)*x1700))+((x1698*x1701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0.7225;
evalcond[2]=0;
evalcond[3]=-0.85;
evalcond[4]=-0.935;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
pz=0;
j7=0;
sj7=0;
cj7=1.0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp1_0=0;
rxp1_1=0;
rxp2_0=0;
rxp2_1=0;
px=0;
py=0;
rxp0_2=0;
rxp1_2=0;
rxp2_2=0;
j5eval[0]=1.0;
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j5]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1704=(py*sj4);
IkReal x1705=((0.707106781186548)*cj6);
IkReal x1706=(cj4*py);
IkReal x1707=(cj4*px);
IkReal x1708=(px*sj4);
IkReal x1709=((0.707106781186548)*sj6);
IkReal x1710=(sj4*x1709);
CheckValue<IkReal> x1711=IKPowWithIntegerCheck(((((-14.142135623731)*x1708))+(((14.142135623731)*x1707))+(((14.142135623731)*x1706))+(((14.142135623731)*x1704))),-1);
if(!x1711.valid){
continue;
}
CheckValue<IkReal> x1712=IKPowWithIntegerCheck(((((-1.0)*x1708*x1709))+((x1706*x1709))+((x1704*x1709))+((x1707*x1709))),-1);
if(!x1712.valid){
continue;
}
if( IKabs(((17.0)*(x1711.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1712.value)*((((x1705*x1706))+(((-1.0)*x1704*x1705))+(((-1.0)*x1705*x1708))+(((-1.0)*x1705*x1707)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x1711.value)))+IKsqr(((x1712.value)*((((x1705*x1706))+(((-1.0)*x1704*x1705))+(((-1.0)*x1705*x1708))+(((-1.0)*x1705*x1707))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((17.0)*(x1711.value)), ((x1712.value)*((((x1705*x1706))+(((-1.0)*x1704*x1705))+(((-1.0)*x1705*x1708))+(((-1.0)*x1705*x1707))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1713=IKsin(j5);
IkReal x1714=IKcos(j5);
IkReal x1715=(cj4*px);
IkReal x1716=(px*sj4);
IkReal x1717=((0.707106781186548)*sj6);
IkReal x1718=((0.0636396103067893)*sj6);
IkReal x1719=(cj4*py);
IkReal x1720=(py*sj4);
IkReal x1721=((0.707106781186548)*x1719);
IkReal x1722=(cj6*x1716);
IkReal x1723=((0.0636396103067893)*x1714);
IkReal x1724=(sj6*x1714);
IkReal x1725=((0.707106781186548)*x1714);
IkReal x1726=((0.777817459305202)*x1713);
IkReal x1727=((0.707106781186548)*x1713);
IkReal x1728=(x1713*x1719);
IkReal x1729=((0.707106781186548)*cj6*x1720);
IkReal x1730=(x1713*x1720);
evalcond[0]=((-0.85)*x1714);
evalcond[1]=((((0.85)*x1713))+(((-0.707106781186548)*x1715))+(((0.707106781186548)*x1716))+(((-0.707106781186548)*x1720))+(((-1.0)*x1721)));
evalcond[2]=((-0.85)+((x1715*x1727))+((x1720*x1727))+((x1713*x1721))+(((-1.0)*x1716*x1727)));
evalcond[3]=(x1729+(((0.707106781186548)*cj6*x1715))+((x1714*x1717*x1720))+(((-1.0)*x1714*x1716*x1717))+(((-1.0)*cj6*x1721))+(((0.707106781186548)*x1722))+((x1714*x1715*x1717))+((x1714*x1717*x1719)));
evalcond[4]=(((x1722*x1725))+(((-1.0)*cj6*x1715*x1725))+((x1716*x1717))+(((-1.0)*cj6*x1714*x1721))+((x1717*x1720))+((x1715*x1717))+(((-1.0)*cj6*x1720*x1725))+(((-1.0)*x1717*x1719)));
evalcond[5]=((-0.935)+((cj6*x1719*x1723))+((cj6*x1720*x1723))+((x1715*x1726))+(((-1.0)*x1722*x1723))+(((-1.0)*x1716*x1718))+((x1720*x1726))+((cj6*x1715*x1723))+(((-1.0)*x1715*x1718))+(((-1.0)*x1718*x1720))+((x1719*x1726))+(((-1.0)*x1716*x1726))+((x1718*x1719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1731=((0.707106781186548)*py);
IkReal x1732=(cj6*sj4);
IkReal x1733=(cj4*sj6);
IkReal x1734=(cj4*cj6);
IkReal x1735=((0.707106781186548)*px);
IkReal x1736=((0.831890330807703)*py);
IkReal x1737=((0.831890330807703)*px);
IkReal x1738=((0.707106781186548)*sj4*sj6);
CheckValue<IkReal> x1739=IKPowWithIntegerCheck(((((-1.0)*x1731*x1732))+(((-1.0)*x1731*x1734))+((x1732*x1735))+(((-1.0)*x1734*x1735))),-1);
if(!x1739.valid){
continue;
}
if( IKabs((((sj4*x1736))+(((-1.0)*sj4*x1737))+((cj4*x1736))+((cj4*x1737)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1739.value)*(((((-1.0)*x1733*x1735))+(((-1.0)*sj4*sj6*x1735))+(((-1.0)*sj4*sj6*x1731))+((x1731*x1733)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x1736))+(((-1.0)*sj4*x1737))+((cj4*x1736))+((cj4*x1737))))+IKsqr(((x1739.value)*(((((-1.0)*x1733*x1735))+(((-1.0)*sj4*sj6*x1735))+(((-1.0)*sj4*sj6*x1731))+((x1731*x1733))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((sj4*x1736))+(((-1.0)*sj4*x1737))+((cj4*x1736))+((cj4*x1737))), ((x1739.value)*(((((-1.0)*x1733*x1735))+(((-1.0)*sj4*sj6*x1735))+(((-1.0)*sj4*sj6*x1731))+((x1731*x1733))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1740=IKsin(j5);
IkReal x1741=IKcos(j5);
IkReal x1742=(cj4*px);
IkReal x1743=(px*sj4);
IkReal x1744=((0.707106781186548)*sj6);
IkReal x1745=((0.0636396103067893)*sj6);
IkReal x1746=(cj4*py);
IkReal x1747=(py*sj4);
IkReal x1748=((0.707106781186548)*x1746);
IkReal x1749=(cj6*x1743);
IkReal x1750=((0.0636396103067893)*x1741);
IkReal x1751=(sj6*x1741);
IkReal x1752=((0.707106781186548)*x1741);
IkReal x1753=((0.777817459305202)*x1740);
IkReal x1754=((0.707106781186548)*x1740);
IkReal x1755=(x1740*x1746);
IkReal x1756=((0.707106781186548)*cj6*x1747);
IkReal x1757=(x1740*x1747);
evalcond[0]=((-0.85)*x1741);
evalcond[1]=((((0.707106781186548)*x1743))+(((-1.0)*x1748))+(((0.85)*x1740))+(((-0.707106781186548)*x1747))+(((-0.707106781186548)*x1742)));
evalcond[2]=((-0.85)+((x1747*x1754))+((x1742*x1754))+((x1740*x1748))+(((-1.0)*x1743*x1754)));
evalcond[3]=((((0.707106781186548)*cj6*x1742))+(((0.707106781186548)*x1749))+x1756+((x1741*x1742*x1744))+(((-1.0)*cj6*x1748))+(((-1.0)*x1741*x1743*x1744))+((x1741*x1744*x1746))+((x1741*x1744*x1747)));
evalcond[4]=(((x1749*x1752))+((x1744*x1747))+(((-1.0)*cj6*x1747*x1752))+(((-1.0)*cj6*x1742*x1752))+(((-1.0)*cj6*x1741*x1748))+((x1742*x1744))+(((-1.0)*x1744*x1746))+((x1743*x1744)));
evalcond[5]=((-0.935)+((x1746*x1753))+((x1747*x1753))+((x1745*x1746))+(((-1.0)*x1749*x1750))+(((-1.0)*x1745*x1747))+((cj6*x1742*x1750))+((x1742*x1753))+((cj6*x1746*x1750))+((cj6*x1747*x1750))+(((-1.0)*x1743*x1753))+(((-1.0)*x1742*x1745))+(((-1.0)*x1743*x1745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1758=((0.707106781186548)*py);
IkReal x1759=(cj6*sj4);
IkReal x1760=(cj4*sj6);
IkReal x1761=(cj4*cj6);
IkReal x1762=((0.707106781186548)*px);
IkReal x1763=((0.831890330807703)*py);
IkReal x1764=((0.831890330807703)*px);
IkReal x1765=((0.707106781186548)*sj4*sj6);
CheckValue<IkReal> x1766=IKPowWithIntegerCheck(((((-1.0)*sj4*sj6*x1762))+((x1758*x1760))+((sj4*sj6*x1758))+((x1760*x1762))),-1);
if(!x1766.valid){
continue;
}
if( IKabs((((cj4*x1764))+((cj4*x1763))+((sj4*x1763))+(((-1.0)*sj4*x1764)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1766.value)*(((((-1.0)*x1758*x1759))+(((-1.0)*x1759*x1762))+(((-1.0)*x1761*x1762))+((x1758*x1761)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x1764))+((cj4*x1763))+((sj4*x1763))+(((-1.0)*sj4*x1764))))+IKsqr(((x1766.value)*(((((-1.0)*x1758*x1759))+(((-1.0)*x1759*x1762))+(((-1.0)*x1761*x1762))+((x1758*x1761))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj4*x1764))+((cj4*x1763))+((sj4*x1763))+(((-1.0)*sj4*x1764))), ((x1766.value)*(((((-1.0)*x1758*x1759))+(((-1.0)*x1759*x1762))+(((-1.0)*x1761*x1762))+((x1758*x1761))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1767=IKsin(j5);
IkReal x1768=IKcos(j5);
IkReal x1769=(cj4*px);
IkReal x1770=(px*sj4);
IkReal x1771=((0.707106781186548)*sj6);
IkReal x1772=((0.0636396103067893)*sj6);
IkReal x1773=(cj4*py);
IkReal x1774=(py*sj4);
IkReal x1775=((0.707106781186548)*x1773);
IkReal x1776=(cj6*x1770);
IkReal x1777=((0.0636396103067893)*x1768);
IkReal x1778=(sj6*x1768);
IkReal x1779=((0.707106781186548)*x1768);
IkReal x1780=((0.777817459305202)*x1767);
IkReal x1781=((0.707106781186548)*x1767);
IkReal x1782=(x1767*x1773);
IkReal x1783=((0.707106781186548)*cj6*x1774);
IkReal x1784=(x1767*x1774);
evalcond[0]=((-0.85)*x1768);
evalcond[1]=((((0.85)*x1767))+(((0.707106781186548)*x1770))+(((-0.707106781186548)*x1774))+(((-0.707106781186548)*x1769))+(((-1.0)*x1775)));
evalcond[2]=((-0.85)+(((-1.0)*x1770*x1781))+((x1767*x1775))+((x1774*x1781))+((x1769*x1781)));
evalcond[3]=(x1783+(((0.707106781186548)*x1776))+((x1768*x1769*x1771))+(((-1.0)*x1768*x1770*x1771))+(((0.707106781186548)*cj6*x1769))+((x1768*x1771*x1773))+((x1768*x1771*x1774))+(((-1.0)*cj6*x1775)));
evalcond[4]=(((x1771*x1774))+((x1776*x1779))+((x1770*x1771))+(((-1.0)*x1771*x1773))+(((-1.0)*cj6*x1769*x1779))+(((-1.0)*cj6*x1768*x1775))+(((-1.0)*cj6*x1774*x1779))+((x1769*x1771)));
evalcond[5]=((-0.935)+(((-1.0)*x1770*x1780))+(((-1.0)*x1772*x1774))+((x1774*x1780))+(((-1.0)*x1776*x1777))+((cj6*x1769*x1777))+((cj6*x1774*x1777))+((x1769*x1780))+(((-1.0)*x1770*x1772))+((cj6*x1773*x1777))+((x1772*x1773))+((x1773*x1780))+(((-1.0)*x1769*x1772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1785=cj6*cj6;
IkReal x1786=cj7*cj7;
IkReal x1787=((0.045)*pz);
IkReal x1788=((0.3)*pz);
IkReal x1789=((0.0318198051533946)*py);
IkReal x1790=(sj4*sj7);
IkReal x1791=(cj4*cj6);
IkReal x1792=((0.027)*sj7);
IkReal x1793=(py*sj4);
IkReal x1794=((0.212132034355964)*cj7);
IkReal x1795=(cj6*sj4);
IkReal x1796=((0.0318198051533946)*px);
IkReal x1797=((0.212132034355964)*sj7);
IkReal x1798=(cj4*py);
IkReal x1799=(cj4*sj7);
IkReal x1800=(px*sj4);
IkReal x1801=((0.212132034355964)*cj6);
IkReal x1802=(cj4*px);
IkReal x1803=((0.087975)*x1786);
IkReal x1804=(cj7*x1785);
CheckValue<IkReal> x1805=IKPowWithIntegerCheck(IKsign(((-0.304525)+((x1785*x1803))+(((-1.0)*cj7*x1792))+(((-0.0495)*sj7))+((x1792*x1804))+(((-1.0)*x1785*x1792))+(((-1.0)*x1803))+(((0.00405)*x1804))+(((-0.092025)*x1785))+(((-0.33)*cj7)))),-1);
if(!x1805.valid){
continue;
}
CheckValue<IkReal> x1806 = IKatan2WithCheck(IkReal(((((-1.0)*x1796*x1799))+((cj6*x1787))+(((-1.0)*cj6*cj7*x1787))+((x1794*x1800))+(((-1.0)*x1794*x1802))+(((-1.0)*x1793*x1794))+(((-1.0)*x1789*x1790))+(((-1.0)*x1789*x1799))+((cj6*sj7*x1788))+(((-0.388908729652601)*x1802))+((x1790*x1796))+(((0.388908729652601)*x1800))+(((-0.388908729652601)*x1798))+(((-0.388908729652601)*x1793))+(((-1.0)*x1794*x1798)))),(((px*x1790*x1801))+(((-0.55)*pz))+(((-1.0)*cj7*x1788))+(((-1.0)*px*x1791*x1797))+((cj7*x1791*x1796))+(((-1.0)*py*x1791*x1797))+(((-1.0)*x1789*x1795))+(((-1.0)*x1789*x1791))+(((-1.0)*sj7*x1787))+(((-1.0)*cj7*x1795*x1796))+(((-1.0)*py*x1790*x1801))+((x1795*x1796))+((cj7*x1789*x1795))+((cj7*x1789*x1791))+(((-1.0)*x1791*x1796))),IKFAST_ATAN2_MAGTHRESH);
if(!x1806.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1805.value)))+(x1806.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1807=IKsin(j5);
IkReal x1808=IKcos(j5);
IkReal x1809=((0.045)*cj7);
IkReal x1810=((0.707106781186548)*cj4);
IkReal x1811=(cj6*py);
IkReal x1812=(py*sj6);
IkReal x1813=(cj6*sj4);
IkReal x1814=((0.707106781186548)*px);
IkReal x1815=(sj4*sj6);
IkReal x1816=((0.3)*cj7);
IkReal x1817=((0.3)*sj7);
IkReal x1818=((0.045)*sj7);
IkReal x1819=((0.0636396103067893)*px);
IkReal x1820=((0.707106781186548)*sj4);
IkReal x1821=((0.0636396103067893)*cj4);
IkReal x1822=(cj6*x1807);
IkReal x1823=(px*x1808);
IkReal x1824=(cj6*x1808);
IkReal x1825=(sj4*x1808);
IkReal x1826=(pz*x1808);
IkReal x1827=(cj4*py*x1807);
IkReal x1828=(x1811*x1820);
IkReal x1829=(py*sj4*x1807);
IkReal x1830=((0.777817459305202)*px*x1807);
evalcond[0]=((((-1.0)*x1808*x1818))+(((-1.0)*x1808*x1816))+(((-1.0)*x1809*x1822))+pz+((x1817*x1822))+(((-0.55)*x1808))+(((0.045)*x1822)));
evalcond[1]=((-0.55)+(((-1.0)*x1818))+(((-1.0)*x1816))+((py*x1807*x1810))+((py*x1807*x1820))+((px*x1807*x1810))+x1826+(((-1.0)*sj4*x1807*x1814)));
evalcond[2]=((((-1.0)*py*x1820))+(((-1.0)*x1809*x1824))+(((0.55)*x1807))+((x1807*x1816))+((x1807*x1818))+(((-1.0)*py*x1810))+((sj4*x1814))+((x1817*x1824))+(((0.045)*x1824))+(((-1.0)*px*x1810)));
evalcond[3]=((((-1.0)*pz*sj6*x1807))+((sj6*x1810*x1823))+(((-1.0)*x1808*x1814*x1815))+((x1813*x1814))+(((-1.0)*x1810*x1811))+((cj6*px*x1810))+((x1808*x1812*x1820))+x1828+((x1808*x1810*x1812)));
evalcond[4]=((0.045)+((pz*x1822))+((x1812*x1820))+((x1808*x1813*x1814))+(((-1.0)*x1810*x1812))+(((-1.0)*x1809))+(((-1.0)*cj6*x1810*x1823))+((x1814*x1815))+x1817+(((-1.0)*x1808*x1810*x1811))+(((-1.0)*x1808*x1828))+((px*sj6*x1810)));
evalcond[5]=((-0.2125)+(((-1.0)*sj4*x1830))+(((-0.0636396103067893)*sj4*x1812))+(((-1.0)*cj4*sj6*x1819))+((x1812*x1821))+((cj4*x1819*x1824))+(((-0.09)*pz*x1822))+(((-1.0)*x1808*x1813*x1819))+(((0.0636396103067893)*x1811*x1825))+((x1808*x1811*x1821))+(((-1.0)*pp))+((cj4*x1830))+(((-1.0)*x1815*x1819))+(((0.777817459305202)*x1829))+(((0.777817459305202)*x1827))+(((1.1)*x1826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1831=py*py;
IkReal x1832=cj7*cj7;
IkReal x1833=px*px;
IkReal x1834=(cj6*sj7);
IkReal x1835=(cj4*py);
IkReal x1836=(cj6*cj7);
IkReal x1837=(px*sj4);
IkReal x1838=((0.707106781186548)*pz);
IkReal x1839=(cj4*px);
IkReal x1840=(px*py);
IkReal x1841=(py*sj4);
IkReal x1842=((0.0318198051533946)*cj6);
IkReal x1843=(cj4*sj4);
CheckValue<IkReal> x1844=IKPowWithIntegerCheck(IKsign(((((-0.212132034355964)*x1834*x1837))+(((-0.55)*pz))+(((-0.0318198051533946)*x1835*x1836))+(((-0.0318198051533946)*x1836*x1841))+(((0.0318198051533946)*x1836*x1837))+(((-0.3)*cj7*pz))+(((-0.045)*pz*sj7))+(((0.212132034355964)*x1834*x1835))+(((0.212132034355964)*x1834*x1839))+((x1839*x1842))+(((-0.0318198051533946)*x1836*x1839))+(((-1.0)*x1837*x1842))+(((0.212132034355964)*x1834*x1841))+((x1841*x1842))+((x1835*x1842)))),-1);
if(!x1844.valid){
continue;
}
CheckValue<IkReal> x1845 = IKatan2WithCheck(IkReal(((((-1.0)*x1838*x1839))+(((0.167025)*x1834))+(((-0.01125)*x1836))+(((-1.0)*x1835*x1838))+(((-0.027)*cj6*x1832))+((x1837*x1838))+(((-1.0)*x1838*x1841))+(((0.087975)*cj7*x1834))+(((0.03825)*cj6)))),((-0.304525)+(((-0.027)*cj7*sj7))+(((0.5)*x1831))+(((0.5)*x1833))+(((-0.0495)*sj7))+((x1831*x1843))+(((2.0)*x1835*x1839))+(((-1.0)*x1833*x1843))+(((-1.0)*x1840))+(((-0.087975)*x1832))+(((-0.33)*cj7))),IKFAST_ATAN2_MAGTHRESH);
if(!x1845.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1844.value)))+(x1845.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1846=IKsin(j5);
IkReal x1847=IKcos(j5);
IkReal x1848=((0.045)*cj7);
IkReal x1849=((0.707106781186548)*cj4);
IkReal x1850=(cj6*py);
IkReal x1851=(py*sj6);
IkReal x1852=(cj6*sj4);
IkReal x1853=((0.707106781186548)*px);
IkReal x1854=(sj4*sj6);
IkReal x1855=((0.3)*cj7);
IkReal x1856=((0.3)*sj7);
IkReal x1857=((0.045)*sj7);
IkReal x1858=((0.0636396103067893)*px);
IkReal x1859=((0.707106781186548)*sj4);
IkReal x1860=((0.0636396103067893)*cj4);
IkReal x1861=(cj6*x1846);
IkReal x1862=(px*x1847);
IkReal x1863=(cj6*x1847);
IkReal x1864=(sj4*x1847);
IkReal x1865=(pz*x1847);
IkReal x1866=(cj4*py*x1846);
IkReal x1867=(x1850*x1859);
IkReal x1868=(py*sj4*x1846);
IkReal x1869=((0.777817459305202)*px*x1846);
evalcond[0]=((((0.045)*x1861))+((x1856*x1861))+(((-1.0)*x1848*x1861))+(((-0.55)*x1847))+pz+(((-1.0)*x1847*x1855))+(((-1.0)*x1847*x1857)));
evalcond[1]=((-0.55)+((py*x1846*x1859))+(((-1.0)*sj4*x1846*x1853))+((px*x1846*x1849))+x1865+((py*x1846*x1849))+(((-1.0)*x1855))+(((-1.0)*x1857)));
evalcond[2]=((((0.045)*x1863))+(((-1.0)*px*x1849))+(((0.55)*x1846))+((sj4*x1853))+((x1846*x1855))+((x1846*x1857))+(((-1.0)*py*x1859))+((x1856*x1863))+(((-1.0)*x1848*x1863))+(((-1.0)*py*x1849)));
evalcond[3]=((((-1.0)*x1847*x1853*x1854))+((x1852*x1853))+(((-1.0)*x1849*x1850))+((x1847*x1851*x1859))+((x1847*x1849*x1851))+x1867+(((-1.0)*pz*sj6*x1846))+((cj6*px*x1849))+((sj6*x1849*x1862)));
evalcond[4]=((0.045)+(((-1.0)*cj6*x1849*x1862))+((pz*x1861))+(((-1.0)*x1849*x1851))+((x1851*x1859))+((px*sj6*x1849))+(((-1.0)*x1848))+((x1847*x1852*x1853))+(((-1.0)*x1847*x1867))+((x1853*x1854))+x1856+(((-1.0)*x1847*x1849*x1850)));
evalcond[5]=((-0.2125)+((x1851*x1860))+(((-1.0)*sj4*x1869))+(((1.1)*x1865))+(((-1.0)*cj4*sj6*x1858))+((cj4*x1869))+((cj4*x1858*x1863))+(((-1.0)*pp))+(((-1.0)*x1847*x1852*x1858))+(((0.0636396103067893)*x1850*x1864))+(((0.777817459305202)*x1868))+(((0.777817459305202)*x1866))+(((-0.0636396103067893)*sj4*x1851))+(((-0.09)*pz*x1861))+((x1847*x1850*x1860))+(((-1.0)*x1854*x1858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1870=cj7*cj7;
IkReal x1871=(cj6*sj7);
IkReal x1872=(py*sj4);
IkReal x1873=((0.212132034355964)*cj7);
IkReal x1874=(px*sj4);
IkReal x1875=((0.707106781186548)*pz);
IkReal x1876=(cj6*cj7);
IkReal x1877=(cj4*px);
IkReal x1878=((0.0318198051533946)*sj7);
IkReal x1879=((0.045)*pz);
IkReal x1880=(cj4*py);
IkReal x1881=(py*x1878);
IkReal x1882=(cj4*x1875);
CheckValue<IkReal> x1883 = IKatan2WithCheck(IkReal(((-0.304525)+(((-0.027)*cj7*sj7))+(((-0.0495)*sj7))+(((-0.087975)*x1870))+(pz*pz)+(((-0.33)*cj7)))),((((-1.0)*x1872*x1875))+(((-0.087975)*cj7*x1871))+((x1874*x1875))+(((-1.0)*x1875*x1880))+(((0.01125)*x1876))+(((-0.167025)*x1871))+(((-1.0)*x1875*x1877))+(((0.027)*cj6*x1870))+(((-0.03825)*cj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x1883.valid){
continue;
}
CheckValue<IkReal> x1884=IKPowWithIntegerCheck(IKsign(((((0.388908729652601)*x1874))+(((-1.0)*x1873*x1877))+(((-1.0)*x1873*x1880))+(((-1.0)*x1872*x1873))+(((-1.0)*x1872*x1878))+((x1876*x1879))+((x1874*x1878))+(((-1.0)*cj6*x1879))+(((-1.0)*x1877*x1878))+(((-1.0)*x1878*x1880))+(((-0.388908729652601)*x1880))+(((-0.3)*pz*x1871))+(((-0.388908729652601)*x1877))+(((-0.388908729652601)*x1872))+((x1873*x1874)))),-1);
if(!x1884.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1883.value)+(((1.5707963267949)*(x1884.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1885=IKsin(j5);
IkReal x1886=IKcos(j5);
IkReal x1887=((0.045)*cj7);
IkReal x1888=((0.707106781186548)*cj4);
IkReal x1889=(cj6*py);
IkReal x1890=(py*sj6);
IkReal x1891=(cj6*sj4);
IkReal x1892=((0.707106781186548)*px);
IkReal x1893=(sj4*sj6);
IkReal x1894=((0.3)*cj7);
IkReal x1895=((0.3)*sj7);
IkReal x1896=((0.045)*sj7);
IkReal x1897=((0.0636396103067893)*px);
IkReal x1898=((0.707106781186548)*sj4);
IkReal x1899=((0.0636396103067893)*cj4);
IkReal x1900=(cj6*x1885);
IkReal x1901=(px*x1886);
IkReal x1902=(cj6*x1886);
IkReal x1903=(sj4*x1886);
IkReal x1904=(pz*x1886);
IkReal x1905=(cj4*py*x1885);
IkReal x1906=(x1889*x1898);
IkReal x1907=(py*sj4*x1885);
IkReal x1908=((0.777817459305202)*px*x1885);
evalcond[0]=((((0.045)*x1900))+(((-0.55)*x1886))+(((-1.0)*x1887*x1900))+(((-1.0)*x1886*x1894))+(((-1.0)*x1886*x1896))+((x1895*x1900))+pz);
evalcond[1]=((-0.55)+((px*x1885*x1888))+((py*x1885*x1888))+x1904+((py*x1885*x1898))+(((-1.0)*x1896))+(((-1.0)*x1894))+(((-1.0)*sj4*x1885*x1892)));
evalcond[2]=((((0.55)*x1885))+(((-1.0)*px*x1888))+((x1885*x1896))+((x1885*x1894))+(((0.045)*x1902))+(((-1.0)*x1887*x1902))+((x1895*x1902))+((sj4*x1892))+(((-1.0)*py*x1888))+(((-1.0)*py*x1898)));
evalcond[3]=(((sj6*x1888*x1901))+(((-1.0)*pz*sj6*x1885))+(((-1.0)*x1888*x1889))+((x1886*x1888*x1890))+((x1891*x1892))+x1906+((cj6*px*x1888))+(((-1.0)*x1886*x1892*x1893))+((x1886*x1890*x1898)));
evalcond[4]=((0.045)+(((-1.0)*x1886*x1888*x1889))+((px*sj6*x1888))+((x1892*x1893))+(((-1.0)*cj6*x1888*x1901))+(((-1.0)*x1886*x1906))+(((-1.0)*x1888*x1890))+((pz*x1900))+x1895+(((-1.0)*x1887))+((x1886*x1891*x1892))+((x1890*x1898)));
evalcond[5]=((-0.2125)+(((-1.0)*x1893*x1897))+((cj4*x1908))+((cj4*x1897*x1902))+(((-1.0)*cj4*sj6*x1897))+(((1.1)*x1904))+(((-0.0636396103067893)*sj4*x1890))+(((-0.09)*pz*x1900))+((x1886*x1889*x1899))+(((-1.0)*pp))+(((0.777817459305202)*x1907))+(((0.777817459305202)*x1905))+(((0.0636396103067893)*x1889*x1903))+(((-1.0)*x1886*x1891*x1897))+(((-1.0)*sj4*x1908))+((x1890*x1899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1909=((0.045)*cj6);
IkReal x1910=((-0.55)+(((-0.045)*sj7))+(((-0.3)*cj7)));
IkReal x1911=((((-1.0)*cj7*x1909))+(((0.3)*cj6*sj7))+x1909);
CheckValue<IkReal> x1914 = IKatan2WithCheck(IkReal(x1910),x1911,IKFAST_ATAN2_MAGTHRESH);
if(!x1914.valid){
continue;
}
IkReal x1912=((1.0)*(x1914.value));
if((((x1910*x1910)+(x1911*x1911))) < -0.00001)
continue;
CheckValue<IkReal> x1915=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1910*x1910)+(x1911*x1911)))),-1);
if(!x1915.valid){
continue;
}
if( ((pz*(x1915.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x1915.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1913=IKasin((pz*(x1915.value)));
j5array[0]=((((-1.0)*x1913))+(((-1.0)*x1912)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+x1913+(((-1.0)*x1912)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1916=((((-1.0)*pp*sj5))+((sj5*(pz*pz))));
j4eval[0]=x1916;
j4eval[1]=IKsign(x1916);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1917=(cj6*sj5);
IkReal x1918=((((-1.0)*x1917*(pz*pz)))+((pp*x1917)));
j4eval[0]=x1918;
j4eval[1]=IKsign(x1918);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1919=(pp+(((-1.0)*(pz*pz))));
j4eval[0]=x1919;
j4eval[1]=IKsign(x1919);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));
evalcond[2]=((((-0.55)*cj5))+(((-0.3)*cj5*cj7))+(((-0.045)*cj5*sj7))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x1920=pz*pz;
IkReal x1921=(cj5*pp);
IkReal x1922=(cj5*x1920);
j4eval[0]=((((-1.0)*x1922))+x1921);
j4eval[1]=IKsign(((((0.09)*x1921))+(((-0.09)*x1922))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x1923=(pp+(((-1.0)*(pz*pz))));
j4eval[0]=x1923;
j4eval[1]=IKsign(x1923);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x1924=((((-1.0)*pp*sj5))+((sj5*(pz*pz))));
j4eval[0]=x1924;
j4eval[1]=IKsign(x1924);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1925=((-0.55)+(((-0.045)*sj7))+(((-0.3)*cj7))+pz);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));
evalcond[2]=x1925;
evalcond[3]=x1925;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj5=0;
cj5=1.0;
j5=0;
IkReal x1926=pz*pz;
IkReal x1927=cj7*cj7;
IkReal x1928=sj7*sj7;
IkReal x1929=((2.0)*cj7);
IkReal x1930=((1.0)*x1926);
IkReal x1931=(pp+(((-1.0)*x1930)));
IkReal x1932=((44.4444444444444)*x1928);
IkReal x1933=((13.3333333333333)*pp*sj7);
IkReal x1934=((13.3333333333333)*sj7*x1926);
j4eval[0]=x1931;
j4eval[1]=((((-1.0)*cj7*x1933))+((pp*x1927))+(((-1.0)*x1926*x1932))+x1933+(((-1.0)*pp*x1929))+pp+((cj7*x1934))+((x1926*x1929))+((pp*x1932))+(((-1.0)*x1927*x1930))+(((-1.0)*x1934))+(((-1.0)*x1930)));
j4eval[2]=IKsign(x1931);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj5=0;
cj5=1.0;
j5=0;
IkReal x1935=pz*pz;
IkReal x1936=pz*pz*pz;
IkReal x1937=pp*pp;
j4eval[0]=((((-1.0)*pp))+x1935);
j4eval[1]=IKsign(((((-0.09)*pp))+(((0.09)*x1935))));
j4eval[2]=((((-22.1453287197232)*x1935*x1937))+(((48.719723183391)*pp*x1936))+(((-1.0)*x1935))+(((17.3840830449827)*pp*x1935))+(((22.1453287197232)*(pp*pp*pp)))+(((9.41176470588235)*x1937))+(((-10.3529411764706)*pp*pz))+pp+(((-48.719723183391)*pz*x1937))+(((10.3529411764706)*x1936))+(((-26.7958477508651)*(x1935*x1935))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-0.85)+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj5=0;
cj5=1.0;
j5=0;
sj7=0;
cj7=1.0;
j7=0;
j4eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x1938=((0.707106781186548)*py);
IkReal x1939=((0.707106781186548)*px);
CheckValue<IkReal> x1941 = IKatan2WithCheck(IkReal((x1939+(((-1.0)*x1938)))),(x1939+x1938),IKFAST_ATAN2_MAGTHRESH);
if(!x1941.valid){
continue;
}
IkReal x1940=x1941.value;
j4array[0]=((-1.0)*x1940);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x1940)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1942=IKcos(j4);
IkReal x1943=IKsin(j4);
IkReal x1944=((0.707106781186548)*py);
IkReal x1945=((0.707106781186548)*px);
IkReal x1946=((0.0636396103067893)*x1943);
IkReal x1947=((0.0636396103067893)*x1942);
evalcond[0]=(((x1943*x1945))+(((-1.0)*x1943*x1944))+(((-1.0)*x1942*x1945))+(((-1.0)*x1942*x1944)));
evalcond[1]=(((py*x1947))+(((-1.0)*px*x1947))+(((-1.0)*px*x1946))+(((-1.0)*py*x1946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1948=((0.150260191002141)*px);
IkReal x1949=((0.150260191002141)*py);
IkReal x1950=((0.777817459305202)*pz);
IkReal x1951=((0.707106781186548)*pp);
IkReal x1952=(px*x1951);
IkReal x1953=(py*x1950);
IkReal x1954=(py*x1951);
IkReal x1955=(px*x1950);
IkReal x1956=(x1948+x1952);
IkReal x1957=(x1949+x1954);
CheckValue<IkReal> x1958=IKPowWithIntegerCheck(IKsign(((((-0.09)*pp))+(((0.09)*(pz*pz))))),-1);
if(!x1958.valid){
continue;
}
CheckValue<IkReal> x1959 = IKatan2WithCheck(IkReal(((((-1.0)*x1955))+(((-1.0)*x1953))+x1957+x1956)),((((-1.0)*x1957))+(((-1.0)*x1955))+x1956+x1953),IKFAST_ATAN2_MAGTHRESH);
if(!x1959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1958.value)))+(x1959.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1960=IKcos(j4);
IkReal x1961=IKsin(j4);
IkReal x1962=((0.707106781186548)*py);
IkReal x1963=((0.0636396103067893)*px);
IkReal x1964=((0.0636396103067893)*py);
IkReal x1965=((0.707106781186548)*px);
IkReal x1966=(x1960*x1965);
IkReal x1967=(x1961*x1965);
IkReal x1968=(x1961*x1962);
IkReal x1969=(x1960*x1962);
IkReal x1970=(x1968+x1966);
evalcond[0]=((((-1.0)*x1969))+(((-1.0)*x1970))+x1967);
evalcond[1]=((0.045)+(((-1.0)*x1969))+(((-0.045)*cj7))+x1967+x1970+(((0.3)*sj7)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.0)*x1961*x1963))+(((-1.0)*x1961*x1964))+(((-1.0)*x1960*x1963))+((x1960*x1964))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1971=((0.0318198051533946)*py);
IkReal x1972=((0.0318198051533946)*px);
IkReal x1973=((0.212132034355964)*sj7);
IkReal x1974=((0.0318198051533946)*cj7);
IkReal x1975=(cj7*x1972);
IkReal x1976=(py*x1973);
IkReal x1977=(cj7*x1971);
IkReal x1978=(px*x1973);
IkReal x1979=(x1976+x1971);
IkReal x1980=(x1978+x1972);
CheckValue<IkReal> x1981=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1981.valid){
continue;
}
CheckValue<IkReal> x1982 = IKatan2WithCheck(IkReal(((((-1.0)*x1980))+(((-1.0)*x1979))+x1977+x1975)),((((-1.0)*x1980))+(((-1.0)*x1977))+x1979+x1975),IKFAST_ATAN2_MAGTHRESH);
if(!x1982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1981.value)))+(x1982.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1983=IKcos(j4);
IkReal x1984=IKsin(j4);
IkReal x1985=((0.707106781186548)*py);
IkReal x1986=((0.0636396103067893)*px);
IkReal x1987=((0.0636396103067893)*py);
IkReal x1988=((0.707106781186548)*px);
IkReal x1989=(x1983*x1988);
IkReal x1990=(x1984*x1988);
IkReal x1991=(x1984*x1985);
IkReal x1992=(x1983*x1985);
IkReal x1993=(x1989+x1991);
evalcond[0]=(x1990+(((-1.0)*x1992))+(((-1.0)*x1993)));
evalcond[1]=((0.045)+(((-0.045)*cj7))+x1990+x1993+(((-1.0)*x1992))+(((0.3)*sj7)));
evalcond[2]=((-0.2125)+(((-1.0)*x1983*x1986))+(((-1.0)*x1984*x1987))+(((-1.0)*x1984*x1986))+(((-1.0)*pp))+(((1.1)*pz))+((x1983*x1987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1994=((0.045)*sj7);
IkReal x1995=((0.3)*cj7);
IkReal x1996=(x1995+x1994);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));
evalcond[2]=((0.55)+x1996+pz);
evalcond[3]=((-0.55)+(((-1.0)*pz))+(((-1.0)*x1996)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x1997=pz*pz;
IkReal x1998=cj7*cj7;
IkReal x1999=sj7*sj7;
IkReal x2000=((2.0)*cj7);
IkReal x2001=((1.0)*x1997);
IkReal x2002=(pp+(((-1.0)*x2001)));
IkReal x2003=((44.4444444444444)*x1999);
IkReal x2004=((13.3333333333333)*pp*sj7);
IkReal x2005=((13.3333333333333)*sj7*x1997);
j4eval[0]=x2002;
j4eval[1]=(((x1997*x2000))+(((-1.0)*x1998*x2001))+x2004+((pp*x1998))+((cj7*x2005))+((pp*x2003))+(((-1.0)*cj7*x2004))+pp+(((-1.0)*x2001))+(((-1.0)*x2005))+(((-1.0)*pp*x2000))+(((-1.0)*x1997*x2003)));
j4eval[2]=IKsign(x2002);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x2006=pz*pz;
IkReal x2007=pp*pp;
IkReal x2008=pz*pz*pz;
j4eval[0]=(x2006+(((-1.0)*pp)));
j4eval[1]=IKsign(((((-0.09)*pp))+(((0.09)*x2006))));
j4eval[2]=((((-22.1453287197232)*x2006*x2007))+(((9.41176470588235)*x2007))+(((-10.3529411764706)*x2008))+(((-26.7958477508651)*(x2006*x2006)))+(((22.1453287197232)*(pp*pp*pp)))+(((17.3840830449827)*pp*x2006))+pp+(((-1.0)*x2006))+(((-48.719723183391)*pp*x2008))+(((10.3529411764706)*pp*pz))+(((48.719723183391)*pz*x2007)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((0.85)+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj7=0;
cj7=1.0;
j7=0;
j4eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x2009=((0.707106781186548)*py);
IkReal x2010=((0.707106781186548)*px);
CheckValue<IkReal> x2012 = IKatan2WithCheck(IkReal((x2010+(((-1.0)*x2009)))),(x2009+x2010),IKFAST_ATAN2_MAGTHRESH);
if(!x2012.valid){
continue;
}
IkReal x2011=x2012.value;
j4array[0]=((-1.0)*x2011);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x2011)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2013=IKcos(j4);
IkReal x2014=IKsin(j4);
IkReal x2015=((0.707106781186548)*py);
IkReal x2016=((0.707106781186548)*px);
IkReal x2017=((0.0636396103067893)*x2014);
IkReal x2018=((0.0636396103067893)*x2013);
evalcond[0]=((((-1.0)*x2013*x2016))+(((-1.0)*x2013*x2015))+((x2014*x2016))+(((-1.0)*x2014*x2015)));
evalcond[1]=(((py*x2018))+(((-1.0)*py*x2017))+(((-1.0)*px*x2017))+(((-1.0)*px*x2018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2019=((0.150260191002141)*px);
IkReal x2020=((0.150260191002141)*py);
IkReal x2021=((0.777817459305202)*pz);
IkReal x2022=((0.707106781186548)*pp);
IkReal x2023=(px*x2022);
IkReal x2024=(px*x2021);
IkReal x2025=(py*x2022);
IkReal x2026=(py*x2021);
IkReal x2027=(x2025+x2026+x2020);
IkReal x2028=(x2024+x2023+x2019);
CheckValue<IkReal> x2029=IKPowWithIntegerCheck(IKsign(((((-0.09)*pp))+(((0.09)*(pz*pz))))),-1);
if(!x2029.valid){
continue;
}
CheckValue<IkReal> x2030 = IKatan2WithCheck(IkReal((x2027+x2028)),(x2028+(((-1.0)*x2027))),IKFAST_ATAN2_MAGTHRESH);
if(!x2030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2029.value)))+(x2030.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2031=IKcos(j4);
IkReal x2032=IKsin(j4);
IkReal x2033=((0.707106781186548)*py);
IkReal x2034=((0.0636396103067893)*px);
IkReal x2035=((0.0636396103067893)*py);
IkReal x2036=((0.707106781186548)*px);
IkReal x2037=(x2031*x2036);
IkReal x2038=(x2032*x2036);
IkReal x2039=(x2032*x2033);
IkReal x2040=(x2031*x2033);
IkReal x2041=(x2037+x2039);
evalcond[0]=((((-1.0)*x2041))+(((-1.0)*x2040))+x2038);
evalcond[1]=((0.045)+(((-1.0)*x2040))+x2041+x2038+(((-0.045)*cj7))+(((0.3)*sj7)));
evalcond[2]=((-0.2125)+((x2031*x2035))+(((-1.0)*pp))+(((-1.1)*pz))+(((-1.0)*x2032*x2034))+(((-1.0)*x2032*x2035))+(((-1.0)*x2031*x2034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2042=((0.0318198051533946)*py);
IkReal x2043=((0.0318198051533946)*px);
IkReal x2044=((0.212132034355964)*sj7);
IkReal x2045=((0.0318198051533946)*cj7);
IkReal x2046=(cj7*x2043);
IkReal x2047=(py*x2044);
IkReal x2048=(cj7*x2042);
IkReal x2049=(px*x2044);
IkReal x2050=(x2047+x2042);
IkReal x2051=(x2043+x2049);
CheckValue<IkReal> x2052 = IKatan2WithCheck(IkReal((x2046+x2048+(((-1.0)*x2050))+(((-1.0)*x2051)))),((((-1.0)*x2048))+x2046+x2050+(((-1.0)*x2051))),IKFAST_ATAN2_MAGTHRESH);
if(!x2052.valid){
continue;
}
CheckValue<IkReal> x2053=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x2053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2052.value)+(((1.5707963267949)*(x2053.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2054=IKcos(j4);
IkReal x2055=IKsin(j4);
IkReal x2056=((0.707106781186548)*py);
IkReal x2057=((0.0636396103067893)*px);
IkReal x2058=((0.0636396103067893)*py);
IkReal x2059=((0.707106781186548)*px);
IkReal x2060=(x2054*x2059);
IkReal x2061=(x2055*x2059);
IkReal x2062=(x2055*x2056);
IkReal x2063=(x2054*x2056);
IkReal x2064=(x2060+x2062);
evalcond[0]=(x2061+(((-1.0)*x2064))+(((-1.0)*x2063)));
evalcond[1]=((0.045)+x2061+x2064+(((-1.0)*x2063))+(((-0.045)*cj7))+(((0.3)*sj7)));
evalcond[2]=((-0.2125)+(((-1.0)*x2054*x2057))+((x2054*x2058))+(((-1.0)*pp))+(((-1.1)*pz))+(((-1.0)*x2055*x2058))+(((-1.0)*x2055*x2057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));
evalcond[2]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj5=1.0;
cj5=0;
j5=1.5707963267949;
IkReal x2065=pz*pz;
IkReal x2066=sj7*sj7;
IkReal x2067=cj7*cj7;
IkReal x2068=((4.26078431372549)*cj7);
IkReal x2069=(x2065+(((-1.0)*pp)));
IkReal x2070=((1.20294117647059)*x2066);
IkReal x2071=((1.20294117647059)*x2067);
j4eval[0]=x2069;
j4eval[1]=(((pp*sj7))+(((-3.98071895424837)*x2065))+(((-1.0)*sj7*x2065))+(((-1.0)*x2065*x2068))+((pp*x2068))+(((3.98071895424837)*pp))+(((-1.0)*x2065*x2071))+(((-1.0)*x2065*x2070))+((pp*x2071))+((pp*x2070)));
j4eval[2]=IKsign(x2069);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj5=1.0;
cj5=0;
j5=1.5707963267949;
IkReal x2072=pz*pz;
j4eval[0]=((((-1.0)*x2072))+pp);
j4eval[1]=IKsign(((((-1.1)*x2072))+(((1.1)*pp))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2073=((0.0378655681325396)*cj7);
IkReal x2074=((0.707106781186548)*pp);
IkReal x2075=(px*sj7);
IkReal x2076=((0.0321380032049286)*cj7);
IkReal x2077=(py*sj7);
IkReal x2078=(py*x2074);
IkReal x2079=(px*x2074);
CheckValue<IkReal> x2080 = IKatan2WithCheck(IkReal(((((0.112394622869602)*py))+x2078+(((-0.252437120883597)*x2077))+(((-1.0)*x2079))+((py*x2073))+((px*x2076))+(((-0.18239819420707)*px))+(((-0.214253354699524)*x2075)))),((((0.214253354699524)*x2077))+(((0.112394622869602)*px))+x2079+x2078+(((-0.252437120883597)*x2075))+((px*x2073))+(((0.18239819420707)*py))+(((-1.0)*py*x2076))),IKFAST_ATAN2_MAGTHRESH);
if(!x2080.valid){
continue;
}
CheckValue<IkReal> x2081=IKPowWithIntegerCheck(IKsign(((((-1.1)*(pz*pz)))+(((1.1)*pp)))),-1);
if(!x2081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2080.value)+(((1.5707963267949)*(x2081.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2082=IKcos(j4);
IkReal x2083=IKsin(j4);
IkReal x2084=((0.707106781186548)*py);
IkReal x2085=(px*x2083);
IkReal x2086=(px*x2082);
IkReal x2087=((0.707106781186548)*x2086);
IkReal x2088=(x2082*x2084);
IkReal x2089=(x2083*x2084);
IkReal x2090=((0.707106781186548)*x2085);
IkReal x2091=(x2089+x2087);
evalcond[0]=((-0.2125)+(((-1.0)*pp))+(((-0.841457069611992)*x2085))+(((0.714177848998413)*py*x2083))+(((0.714177848998413)*x2086))+(((0.841457069611992)*py*x2082)));
evalcond[1]=((0.045)+x2091+x2090+(((-1.0)*x2088))+(((-0.045)*cj7))+(((0.3)*sj7)));
evalcond[2]=((-0.55)+(((-0.045)*sj7))+(((-1.0)*x2090))+(((-0.3)*cj7))+x2091+x2088);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2092=((0.243951839509359)*cj7);
IkReal x2093=(px*sj7);
IkReal x2094=(py*sj7);
IkReal x2095=((0.18031222920257)*cj7);
CheckValue<IkReal> x2096=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x2096.valid){
continue;
}
CheckValue<IkReal> x2097 = IKatan2WithCheck(IkReal(((((-1.0)*py*x2092))+(((0.18031222920257)*x2094))+(((0.243951839509359)*x2093))+(((-0.357088924499207)*py))+((px*x2095))+(((0.420728534805996)*px)))),((((-1.0)*py*x2095))+(((0.18031222920257)*x2093))+(((-0.357088924499207)*px))+(((-0.420728534805996)*py))+(((-0.243951839509359)*x2094))+(((-1.0)*px*x2092))),IKFAST_ATAN2_MAGTHRESH);
if(!x2097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2096.value)))+(x2097.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2098=IKcos(j4);
IkReal x2099=IKsin(j4);
IkReal x2100=((0.707106781186548)*py);
IkReal x2101=(px*x2099);
IkReal x2102=(px*x2098);
IkReal x2103=((0.707106781186548)*x2102);
IkReal x2104=(x2098*x2100);
IkReal x2105=(x2099*x2100);
IkReal x2106=((0.707106781186548)*x2101);
IkReal x2107=(x2103+x2105);
evalcond[0]=((-0.2125)+(((-0.841457069611992)*x2101))+(((-1.0)*pp))+(((0.714177848998413)*py*x2099))+(((0.841457069611992)*py*x2098))+(((0.714177848998413)*x2102)));
evalcond[1]=((0.045)+(((-1.0)*x2104))+x2107+x2106+(((-0.045)*cj7))+(((0.3)*sj7)));
evalcond[2]=((-0.55)+(((-0.045)*sj7))+(((-0.3)*cj7))+(((-1.0)*x2106))+x2107+x2104);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));
evalcond[2]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
IkReal x2108=pz*pz;
IkReal x2109=sj7*sj7;
IkReal x2110=cj7*cj7;
IkReal x2111=((4.26078431372549)*cj7);
IkReal x2112=(pp+(((-1.0)*x2108)));
IkReal x2113=((1.20294117647059)*x2109);
IkReal x2114=((1.0)*x2108);
IkReal x2115=((1.20294117647059)*x2110);
j4eval[0]=x2112;
j4eval[1]=((((-3.98071895424837)*x2108))+((pp*x2113))+((pp*x2115))+((pp*x2111))+((pp*sj7))+(((-1.0)*sj7*x2114))+(((-1.0)*x2108*x2111))+(((-1.0)*x2108*x2115))+(((-1.0)*x2108*x2113))+(((3.98071895424837)*pp)));
j4eval[2]=IKsign(x2112);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
IkReal x2116=pz*pz;
j4eval[0]=(x2116+(((-1.0)*pp)));
j4eval[1]=IKsign(((((1.1)*x2116))+(((-1.1)*pp))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2117=((0.0378655681325396)*cj7);
IkReal x2118=(px*sj7);
IkReal x2119=((0.707106781186548)*pp);
IkReal x2120=((0.0321380032049286)*cj7);
IkReal x2121=(py*sj7);
IkReal x2122=(py*x2119);
IkReal x2123=(px*x2119);
CheckValue<IkReal> x2124=IKPowWithIntegerCheck(IKsign(((((-1.1)*pp))+(((1.1)*(pz*pz))))),-1);
if(!x2124.valid){
continue;
}
CheckValue<IkReal> x2125 = IKatan2WithCheck(IkReal((x2122+(((-1.0)*x2123))+(((0.18239819420707)*py))+(((-0.112394622869602)*px))+(((-1.0)*py*x2120))+(((0.214253354699524)*x2121))+(((0.252437120883597)*x2118))+(((-1.0)*px*x2117)))),((((0.112394622869602)*py))+x2123+x2122+(((-0.252437120883597)*x2121))+(((-1.0)*px*x2120))+(((0.18239819420707)*px))+((py*x2117))+(((0.214253354699524)*x2118))),IKFAST_ATAN2_MAGTHRESH);
if(!x2125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2124.value)))+(x2125.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2126=IKsin(j4);
IkReal x2127=IKcos(j4);
IkReal x2128=((0.707106781186548)*py);
IkReal x2129=(px*x2126);
IkReal x2130=(px*x2127);
IkReal x2131=((0.707106781186548)*x2129);
IkReal x2132=((0.707106781186548)*x2130);
IkReal x2133=(x2127*x2128);
IkReal x2134=(x2126*x2128);
IkReal x2135=(x2134+x2132);
evalcond[0]=((-0.2125)+(((-0.841457069611992)*x2130))+(((0.714177848998413)*x2129))+(((-1.0)*pp))+(((-0.841457069611992)*py*x2126))+(((-0.714177848998413)*py*x2127)));
evalcond[1]=((0.045)+(((-1.0)*x2133))+x2135+x2131+(((-0.045)*cj7))+(((0.3)*sj7)));
evalcond[2]=((-0.55)+(((-0.045)*sj7))+(((-1.0)*x2133))+(((-1.0)*x2135))+(((-0.3)*cj7))+x2131);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2136=((0.243951839509359)*py);
IkReal x2137=(px*sj7);
IkReal x2138=((0.18031222920257)*py);
IkReal x2139=(cj7*px);
CheckValue<IkReal> x2140=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x2140.valid){
continue;
}
CheckValue<IkReal> x2141 = IKatan2WithCheck(IkReal(((((0.243951839509359)*x2139))+(((-1.0)*sj7*x2136))+(((-0.420728534805996)*py))+(((-0.18031222920257)*x2137))+(((-1.0)*cj7*x2138))+(((0.357088924499207)*px)))),(((sj7*x2138))+(((-0.357088924499207)*py))+(((-0.420728534805996)*px))+(((-0.18031222920257)*x2139))+(((-1.0)*cj7*x2136))+(((-0.243951839509359)*x2137))),IKFAST_ATAN2_MAGTHRESH);
if(!x2141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2140.value)))+(x2141.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2142=IKsin(j4);
IkReal x2143=IKcos(j4);
IkReal x2144=((0.707106781186548)*py);
IkReal x2145=(px*x2142);
IkReal x2146=(px*x2143);
IkReal x2147=((0.707106781186548)*x2145);
IkReal x2148=((0.707106781186548)*x2146);
IkReal x2149=(x2143*x2144);
IkReal x2150=(x2142*x2144);
IkReal x2151=(x2150+x2148);
evalcond[0]=((-0.2125)+(((-1.0)*pp))+(((-0.714177848998413)*py*x2143))+(((0.714177848998413)*x2145))+(((-0.841457069611992)*x2146))+(((-0.841457069611992)*py*x2142)));
evalcond[1]=((0.045)+x2151+x2147+(((-1.0)*x2149))+(((-0.045)*cj7))+(((0.3)*sj7)));
evalcond[2]=((-0.55)+(((-0.045)*sj7))+(((-0.3)*cj7))+x2147+(((-1.0)*x2149))+(((-1.0)*x2151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2152=((0.388908729652601)*py);
IkReal x2153=((0.388908729652601)*px);
IkReal x2154=((0.0318198051533946)*py);
IkReal x2155=((0.212132034355964)*cj7);
IkReal x2156=((0.0318198051533946)*px*sj5);
IkReal x2157=(px*x2155);
IkReal x2158=(py*x2155);
IkReal x2159=((0.0318198051533946)*px*sj7);
IkReal x2160=(sj7*x2154);
IkReal x2161=(sj5*x2154);
IkReal x2162=((0.707106781186548)*cj5*pz);
IkReal x2163=((0.212132034355964)*sj5*sj7);
IkReal x2164=(cj7*x2161);
IkReal x2165=(px*x2162);
IkReal x2166=(px*x2163);
IkReal x2167=(py*x2162);
IkReal x2168=(cj7*x2156);
IkReal x2169=(py*x2163);
IkReal x2170=(x2165+x2164);
IkReal x2171=(x2167+x2166+x2156);
IkReal x2172=(x2168+x2160+x2152+x2158);
IkReal x2173=(x2169+x2161+x2157+x2153+x2159);
CheckValue<IkReal> x2174=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*sj5))+((sj5*(pz*pz))))),-1);
if(!x2174.valid){
continue;
}
CheckValue<IkReal> x2175 = IKatan2WithCheck(IkReal((x2173+x2171+(((-1.0)*x2170))+(((-1.0)*x2172)))),(x2170+x2171+(((-1.0)*x2173))+(((-1.0)*x2172))),IKFAST_ATAN2_MAGTHRESH);
if(!x2175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2174.value)))+(x2175.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2176=IKsin(j4);
IkReal x2177=IKcos(j4);
IkReal x2178=((0.707106781186548)*py);
IkReal x2179=(cj5*pz);
IkReal x2180=((0.045)*sj7);
IkReal x2181=((0.0636396103067893)*py);
IkReal x2182=((0.707106781186548)*px);
IkReal x2183=((0.777817459305202)*py);
IkReal x2184=((0.3)*cj7);
IkReal x2185=(cj5*x2176);
IkReal x2186=(px*x2177);
IkReal x2187=(sj5*x2176);
IkReal x2188=(sj5*x2177);
IkReal x2189=(x2176*x2182);
IkReal x2190=(x2177*x2182);
IkReal x2191=(x2177*x2178);
IkReal x2192=(x2176*x2178);
IkReal x2193=(x2190+x2192);
evalcond[0]=((0.045)+x2193+x2189+(((-0.045)*cj7))+(((-1.0)*x2191))+(((0.3)*sj7)));
evalcond[1]=(((x2178*x2185))+((cj5*x2190))+((cj5*x2191))+(((-1.0)*pz*sj5))+(((-1.0)*x2182*x2185)));
evalcond[2]=(((sj5*x2180))+((sj5*x2184))+x2189+(((-1.0)*x2193))+(((-1.0)*x2191))+(((0.55)*sj5)));
evalcond[3]=((-0.55)+x2179+((x2178*x2187))+((x2178*x2188))+((x2182*x2188))+(((-1.0)*x2180))+(((-1.0)*x2184))+(((-1.0)*x2182*x2187)));
evalcond[4]=((-0.2125)+(((-0.777817459305202)*px*x2187))+(((-0.0636396103067893)*x2186))+((x2183*x2187))+((x2183*x2188))+(((-1.0)*pp))+((x2177*x2181))+(((0.777817459305202)*sj5*x2186))+(((1.1)*x2179))+(((-0.0636396103067893)*px*x2176))+(((-1.0)*x2176*x2181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2194=((0.0318198051533946)*py);
IkReal x2195=((0.0318198051533946)*px);
IkReal x2196=(py*sj7);
IkReal x2197=((0.0318198051533946)*sj5);
IkReal x2198=((0.388908729652601)*sj5);
IkReal x2199=((0.0318198051533946)*cj7);
IkReal x2200=((0.212132034355964)*px);
IkReal x2201=(cj7*sj5);
IkReal x2202=(cj7*x2195);
IkReal x2203=((0.212132034355964)*x2196);
IkReal x2204=(px*x2198);
IkReal x2205=(py*x2198);
IkReal x2206=(cj7*x2194);
IkReal x2207=(sj7*x2200);
IkReal x2208=(sj5*sj7*x2195);
IkReal x2209=(x2200*x2201);
IkReal x2210=(sj5*sj7*x2194);
IkReal x2211=((0.212132034355964)*py*x2201);
IkReal x2212=(x2207+x2195);
IkReal x2213=(x2202+x2205+x2211+x2210);
IkReal x2214=(x2203+x2204+x2208+x2209+x2194);
CheckValue<IkReal> x2215 = IKatan2WithCheck(IkReal((x2206+x2213+(((-1.0)*x2214))+(((-1.0)*x2212)))),(x2213+x2214+(((-1.0)*x2212))+(((-1.0)*x2206))),IKFAST_ATAN2_MAGTHRESH);
if(!x2215.valid){
continue;
}
CheckValue<IkReal> x2216=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x2216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2215.value)+(((1.5707963267949)*(x2216.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2217=IKsin(j4);
IkReal x2218=IKcos(j4);
IkReal x2219=((0.707106781186548)*py);
IkReal x2220=(cj5*pz);
IkReal x2221=((0.045)*sj7);
IkReal x2222=((0.0636396103067893)*py);
IkReal x2223=((0.707106781186548)*px);
IkReal x2224=((0.777817459305202)*py);
IkReal x2225=((0.3)*cj7);
IkReal x2226=(cj5*x2217);
IkReal x2227=(px*x2218);
IkReal x2228=(sj5*x2217);
IkReal x2229=(sj5*x2218);
IkReal x2230=(x2217*x2223);
IkReal x2231=(x2218*x2223);
IkReal x2232=(x2218*x2219);
IkReal x2233=(x2217*x2219);
IkReal x2234=(x2231+x2233);
evalcond[0]=((0.045)+x2230+x2234+(((-0.045)*cj7))+(((-1.0)*x2232))+(((0.3)*sj7)));
evalcond[1]=(((cj5*x2231))+((cj5*x2232))+(((-1.0)*x2223*x2226))+(((-1.0)*pz*sj5))+((x2219*x2226)));
evalcond[2]=(x2230+(((-1.0)*x2234))+(((-1.0)*x2232))+((sj5*x2225))+((sj5*x2221))+(((0.55)*sj5)));
evalcond[3]=((-0.55)+x2220+(((-1.0)*x2223*x2228))+(((-1.0)*x2221))+(((-1.0)*x2225))+((x2219*x2228))+((x2219*x2229))+((x2223*x2229)));
evalcond[4]=((-0.2125)+(((-0.0636396103067893)*x2227))+(((-1.0)*x2217*x2222))+(((1.1)*x2220))+(((-0.0636396103067893)*px*x2217))+((x2218*x2222))+((x2224*x2228))+((x2224*x2229))+(((-1.0)*pp))+(((0.777817459305202)*sj5*x2227))+(((-0.777817459305202)*px*x2228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2235=((0.777817459305202)*pz);
IkReal x2236=((0.150260191002141)*cj5);
IkReal x2237=((0.09)*cj5);
IkReal x2238=(py*x2236);
IkReal x2239=(px*x2235);
IkReal x2240=(py*x2235);
IkReal x2241=(px*x2236);
IkReal x2242=((0.0636396103067893)*pz*sj5);
IkReal x2243=((0.707106781186548)*cj5*pp);
IkReal x2244=(py*x2242);
IkReal x2245=(px*x2242);
IkReal x2246=(py*x2243);
IkReal x2247=(px*x2243);
IkReal x2248=(x2239+x2244);
IkReal x2249=(x2247+x2241);
IkReal x2250=(x2238+x2245+x2246);
CheckValue<IkReal> x2251 = IKatan2WithCheck(IkReal((x2248+x2240+(((-1.0)*x2250))+(((-1.0)*x2249)))),(x2248+x2250+(((-1.0)*x2249))+(((-1.0)*x2240))),IKFAST_ATAN2_MAGTHRESH);
if(!x2251.valid){
continue;
}
CheckValue<IkReal> x2252=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2237*(pz*pz)))+((pp*x2237)))),-1);
if(!x2252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2251.value)+(((1.5707963267949)*(x2252.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2253=IKsin(j4);
IkReal x2254=IKcos(j4);
IkReal x2255=((0.707106781186548)*py);
IkReal x2256=(cj5*pz);
IkReal x2257=((0.045)*sj7);
IkReal x2258=((0.0636396103067893)*py);
IkReal x2259=((0.707106781186548)*px);
IkReal x2260=((0.777817459305202)*py);
IkReal x2261=((0.3)*cj7);
IkReal x2262=(cj5*x2253);
IkReal x2263=(px*x2254);
IkReal x2264=(sj5*x2253);
IkReal x2265=(sj5*x2254);
IkReal x2266=(x2253*x2259);
IkReal x2267=(x2254*x2259);
IkReal x2268=(x2254*x2255);
IkReal x2269=(x2253*x2255);
IkReal x2270=(x2269+x2267);
evalcond[0]=((0.045)+x2266+x2270+(((-0.045)*cj7))+(((0.3)*sj7))+(((-1.0)*x2268)));
evalcond[1]=(((cj5*x2267))+((cj5*x2268))+((x2255*x2262))+(((-1.0)*x2259*x2262))+(((-1.0)*pz*sj5)));
evalcond[2]=(x2266+((sj5*x2257))+(((-1.0)*x2270))+(((0.55)*sj5))+(((-1.0)*x2268))+((sj5*x2261)));
evalcond[3]=((-0.55)+((x2259*x2265))+x2256+((x2255*x2264))+((x2255*x2265))+(((-1.0)*x2259*x2264))+(((-1.0)*x2257))+(((-1.0)*x2261)));
evalcond[4]=((-0.2125)+((x2260*x2264))+((x2260*x2265))+((x2254*x2258))+(((-0.0636396103067893)*x2263))+(((-1.0)*x2253*x2258))+(((-1.0)*pp))+(((1.1)*x2256))+(((0.777817459305202)*sj5*x2263))+(((-0.777817459305202)*px*x2264))+(((-0.0636396103067893)*px*x2253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));
evalcond[2]=((((-0.55)*cj5))+(((-0.3)*cj5*cj7))+(((-0.045)*cj5*sj7))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x2271=pz*pz;
IkReal x2272=(cj5*pp);
IkReal x2273=(cj5*x2271);
j4eval[0]=(x2273+(((-1.0)*x2272)));
j4eval[1]=IKsign(((((0.09)*x2273))+(((-0.09)*x2272))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x2274=(pp+(((-1.0)*(pz*pz))));
j4eval[0]=x2274;
j4eval[1]=IKsign(x2274);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x2275=((((-1.0)*pp*sj5))+((sj5*(pz*pz))));
j4eval[0]=x2275;
j4eval[1]=IKsign(x2275);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x2276=((-0.55)+(((-0.045)*sj7))+(((-0.3)*cj7))+pz);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));
evalcond[2]=x2276;
evalcond[3]=x2276;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj5=0;
cj5=1.0;
j5=0;
IkReal x2277=pz*pz;
IkReal x2278=cj7*cj7;
IkReal x2279=sj7*sj7;
IkReal x2280=((2.0)*cj7);
IkReal x2281=(pp+(((-1.0)*x2277)));
IkReal x2282=((1.0)*x2277);
IkReal x2283=((44.4444444444444)*x2279);
IkReal x2284=((13.3333333333333)*pp*sj7);
IkReal x2285=((13.3333333333333)*sj7*x2277);
j4eval[0]=x2281;
j4eval[1]=IKsign(x2281);
j4eval[2]=((((-1.0)*pp*x2280))+x2284+(((-1.0)*x2277*x2283))+(((-1.0)*x2285))+(((-1.0)*x2282))+((x2277*x2280))+((pp*x2278))+(((-1.0)*x2278*x2282))+pp+((cj7*x2285))+((pp*x2283))+(((-1.0)*cj7*x2284)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj5=0;
cj5=1.0;
j5=0;
IkReal x2286=pz*pz;
IkReal x2287=pz*pz*pz;
IkReal x2288=pp*pp;
IkReal x2289=((1.0)*x2286);
j4eval[0]=((((-1.0)*x2289))+pp);
j4eval[1]=IKsign(((((-0.09)*x2286))+(((0.09)*pp))));
j4eval[2]=((((10.3529411764706)*x2287))+(((-26.7958477508651)*(x2286*x2286)))+(((-1.0)*x2289))+(((17.3840830449827)*pp*x2286))+(((22.1453287197232)*(pp*pp*pp)))+(((-48.719723183391)*pz*x2288))+(((-10.3529411764706)*pp*pz))+(((-22.1453287197232)*x2286*x2288))+pp+(((9.41176470588235)*x2288))+(((48.719723183391)*pp*x2287)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-0.85)+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj5=0;
cj5=1.0;
j5=0;
sj7=0;
cj7=1.0;
j7=0;
j4eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x2290=((0.707106781186548)*py);
IkReal x2291=((0.707106781186548)*px);
CheckValue<IkReal> x2293 = IKatan2WithCheck(IkReal((x2291+(((-1.0)*x2290)))),(x2291+x2290),IKFAST_ATAN2_MAGTHRESH);
if(!x2293.valid){
continue;
}
IkReal x2292=x2293.value;
j4array[0]=((-1.0)*x2292);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x2292)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2294=IKcos(j4);
IkReal x2295=IKsin(j4);
IkReal x2296=((0.707106781186548)*py);
IkReal x2297=((0.0636396103067893)*py);
IkReal x2298=(px*x2295);
IkReal x2299=(px*x2294);
evalcond[0]=((((-0.707106781186548)*x2299))+(((0.707106781186548)*x2298))+(((-1.0)*x2295*x2296))+(((-1.0)*x2294*x2296)));
evalcond[1]=(((x2295*x2297))+(((0.0636396103067893)*x2298))+(((0.0636396103067893)*x2299))+(((-1.0)*x2294*x2297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2300=((0.150260191002141)*px);
IkReal x2301=((0.150260191002141)*py);
IkReal x2302=((0.777817459305202)*pz);
IkReal x2303=((0.707106781186548)*pp);
IkReal x2304=(px*x2303);
IkReal x2305=(py*x2302);
IkReal x2306=(py*x2303);
IkReal x2307=(px*x2302);
IkReal x2308=(x2300+x2304);
IkReal x2309=(x2301+x2306);
CheckValue<IkReal> x2310 = IKatan2WithCheck(IkReal((x2309+x2308+(((-1.0)*x2307))+(((-1.0)*x2305)))),(x2308+x2305+(((-1.0)*x2307))+(((-1.0)*x2309))),IKFAST_ATAN2_MAGTHRESH);
if(!x2310.valid){
continue;
}
CheckValue<IkReal> x2311=IKPowWithIntegerCheck(IKsign(((((-0.09)*(pz*pz)))+(((0.09)*pp)))),-1);
if(!x2311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2310.value)+(((1.5707963267949)*(x2311.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2312=IKcos(j4);
IkReal x2313=IKsin(j4);
IkReal x2314=((0.707106781186548)*py);
IkReal x2315=((0.0636396103067893)*x2312);
IkReal x2316=(px*x2313);
IkReal x2317=((0.707106781186548)*px*x2312);
IkReal x2318=((0.707106781186548)*x2316);
IkReal x2319=(x2313*x2314);
IkReal x2320=(x2312*x2314);
IkReal x2321=(x2319+x2317);
evalcond[0]=(x2318+(((-1.0)*x2320))+(((-1.0)*x2321)));
evalcond[1]=((-0.045)+(((0.045)*cj7))+x2321+x2318+(((-0.3)*sj7))+(((-1.0)*x2320)));
evalcond[2]=((-0.2125)+(((-1.0)*py*x2315))+(((0.0636396103067893)*x2316))+(((0.0636396103067893)*py*x2313))+(((-1.0)*pp))+(((1.1)*pz))+((px*x2315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2322=((0.0318198051533946)*px);
IkReal x2323=((0.0318198051533946)*py);
IkReal x2324=((0.212132034355964)*sj7);
IkReal x2325=((0.0318198051533946)*cj7);
IkReal x2326=(cj7*x2323);
IkReal x2327=(px*x2324);
IkReal x2328=(cj7*x2322);
IkReal x2329=(py*x2324);
IkReal x2330=(x2322+x2327);
IkReal x2331=(x2323+x2329);
CheckValue<IkReal> x2332 = IKatan2WithCheck(IkReal((x2330+x2331+(((-1.0)*x2326))+(((-1.0)*x2328)))),((((-1.0)*x2331))+x2330+x2326+(((-1.0)*x2328))),IKFAST_ATAN2_MAGTHRESH);
if(!x2332.valid){
continue;
}
CheckValue<IkReal> x2333=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x2333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2332.value)+(((1.5707963267949)*(x2333.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2334=IKcos(j4);
IkReal x2335=IKsin(j4);
IkReal x2336=((0.707106781186548)*py);
IkReal x2337=((0.0636396103067893)*x2334);
IkReal x2338=(px*x2335);
IkReal x2339=((0.707106781186548)*px*x2334);
IkReal x2340=((0.707106781186548)*x2338);
IkReal x2341=(x2335*x2336);
IkReal x2342=(x2334*x2336);
IkReal x2343=(x2339+x2341);
evalcond[0]=(x2340+(((-1.0)*x2342))+(((-1.0)*x2343)));
evalcond[1]=((-0.045)+(((0.045)*cj7))+x2340+x2343+(((-1.0)*x2342))+(((-0.3)*sj7)));
evalcond[2]=((-0.2125)+(((0.0636396103067893)*x2338))+(((-1.0)*py*x2337))+(((0.0636396103067893)*py*x2335))+(((-1.0)*pp))+(((1.1)*pz))+((px*x2337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2344=((0.045)*sj7);
IkReal x2345=((0.3)*cj7);
IkReal x2346=(x2345+x2344);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));
evalcond[2]=((0.55)+x2346+pz);
evalcond[3]=((-0.55)+(((-1.0)*pz))+(((-1.0)*x2346)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x2347=pz*pz;
IkReal x2348=cj7*cj7;
IkReal x2349=sj7*sj7;
IkReal x2350=((2.0)*cj7);
IkReal x2351=((((-1.0)*x2347))+pp);
IkReal x2352=((1.0)*x2347);
IkReal x2353=((44.4444444444444)*x2349);
IkReal x2354=((13.3333333333333)*pp*sj7);
IkReal x2355=((13.3333333333333)*sj7*x2347);
j4eval[0]=x2351;
j4eval[1]=IKsign(x2351);
j4eval[2]=((((-1.0)*x2347*x2353))+(((-1.0)*cj7*x2354))+((cj7*x2355))+x2354+(((-1.0)*x2348*x2352))+(((-1.0)*pp*x2350))+((pp*x2353))+((pp*x2348))+pp+((x2347*x2350))+(((-1.0)*x2352))+(((-1.0)*x2355)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x2356=pz*pz;
IkReal x2357=pp*pp;
IkReal x2358=pz*pz*pz;
IkReal x2359=((1.0)*x2356);
j4eval[0]=(pp+(((-1.0)*x2359)));
j4eval[1]=IKsign(((((-0.09)*x2356))+(((0.09)*pp))));
j4eval[2]=((((-26.7958477508651)*(x2356*x2356)))+(((9.41176470588235)*x2357))+(((48.719723183391)*pz*x2357))+(((22.1453287197232)*(pp*pp*pp)))+(((-22.1453287197232)*x2356*x2357))+(((-48.719723183391)*pp*x2358))+pp+(((10.3529411764706)*pp*pz))+(((-10.3529411764706)*x2358))+(((-1.0)*x2359))+(((17.3840830449827)*pp*x2356)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((0.85)+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj7=0;
cj7=1.0;
j7=0;
j4eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x2360=((0.707106781186548)*py);
IkReal x2361=((0.707106781186548)*px);
CheckValue<IkReal> x2363 = IKatan2WithCheck(IkReal((x2361+(((-1.0)*x2360)))),(x2361+x2360),IKFAST_ATAN2_MAGTHRESH);
if(!x2363.valid){
continue;
}
IkReal x2362=x2363.value;
j4array[0]=((-1.0)*x2362);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x2362)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2364=IKcos(j4);
IkReal x2365=IKsin(j4);
IkReal x2366=((0.707106781186548)*py);
IkReal x2367=((0.0636396103067893)*py);
IkReal x2368=(px*x2365);
IkReal x2369=(px*x2364);
evalcond[0]=((((-0.707106781186548)*x2369))+(((-1.0)*x2364*x2366))+(((-1.0)*x2365*x2366))+(((0.707106781186548)*x2368)));
evalcond[1]=(((x2365*x2367))+(((-1.0)*x2364*x2367))+(((0.0636396103067893)*x2369))+(((0.0636396103067893)*x2368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2370=((0.150260191002141)*px);
IkReal x2371=((0.150260191002141)*py);
IkReal x2372=((0.777817459305202)*pz);
IkReal x2373=((0.707106781186548)*pp);
IkReal x2374=(px*x2373);
IkReal x2375=(px*x2372);
IkReal x2376=(py*x2373);
IkReal x2377=(py*x2372);
IkReal x2378=(x2374+x2375+x2370);
IkReal x2379=(x2376+x2377+x2371);
CheckValue<IkReal> x2380 = IKatan2WithCheck(IkReal((x2378+x2379)),(x2378+(((-1.0)*x2379))),IKFAST_ATAN2_MAGTHRESH);
if(!x2380.valid){
continue;
}
CheckValue<IkReal> x2381=IKPowWithIntegerCheck(IKsign(((((-0.09)*(pz*pz)))+(((0.09)*pp)))),-1);
if(!x2381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2380.value)+(((1.5707963267949)*(x2381.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2382=IKcos(j4);
IkReal x2383=IKsin(j4);
IkReal x2384=((0.707106781186548)*py);
IkReal x2385=((0.0636396103067893)*x2382);
IkReal x2386=(px*x2383);
IkReal x2387=((0.707106781186548)*px*x2382);
IkReal x2388=((0.707106781186548)*x2386);
IkReal x2389=(x2383*x2384);
IkReal x2390=(x2382*x2384);
IkReal x2391=(x2387+x2389);
evalcond[0]=(x2388+(((-1.0)*x2390))+(((-1.0)*x2391)));
evalcond[1]=((-0.045)+(((0.045)*cj7))+x2391+x2388+(((-1.0)*x2390))+(((-0.3)*sj7)));
evalcond[2]=((-0.2125)+((px*x2385))+(((-1.0)*py*x2385))+(((-1.0)*pp))+(((-1.1)*pz))+(((0.0636396103067893)*x2386))+(((0.0636396103067893)*py*x2383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2392=((0.0318198051533946)*px);
IkReal x2393=((0.0318198051533946)*py);
IkReal x2394=((0.212132034355964)*sj7);
IkReal x2395=((0.0318198051533946)*cj7);
IkReal x2396=(cj7*x2393);
IkReal x2397=(px*x2394);
IkReal x2398=(cj7*x2392);
IkReal x2399=(py*x2394);
IkReal x2400=(x2397+x2392);
IkReal x2401=(x2393+x2399);
CheckValue<IkReal> x2402 = IKatan2WithCheck(IkReal((x2400+x2401+(((-1.0)*x2396))+(((-1.0)*x2398)))),(x2400+(((-1.0)*x2401))+x2396+(((-1.0)*x2398))),IKFAST_ATAN2_MAGTHRESH);
if(!x2402.valid){
continue;
}
CheckValue<IkReal> x2403=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x2403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2402.value)+(((1.5707963267949)*(x2403.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2404=IKcos(j4);
IkReal x2405=IKsin(j4);
IkReal x2406=((0.707106781186548)*py);
IkReal x2407=((0.0636396103067893)*x2404);
IkReal x2408=(px*x2405);
IkReal x2409=((0.707106781186548)*px*x2404);
IkReal x2410=((0.707106781186548)*x2408);
IkReal x2411=(x2405*x2406);
IkReal x2412=(x2404*x2406);
IkReal x2413=(x2409+x2411);
evalcond[0]=(x2410+(((-1.0)*x2412))+(((-1.0)*x2413)));
evalcond[1]=((-0.045)+x2410+x2413+(((0.045)*cj7))+(((-1.0)*x2412))+(((-0.3)*sj7)));
evalcond[2]=((-0.2125)+(((0.0636396103067893)*x2408))+(((0.0636396103067893)*py*x2405))+(((-1.0)*py*x2407))+(((-1.0)*pp))+(((-1.1)*pz))+((px*x2407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));
evalcond[2]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj5=1.0;
cj5=0;
j5=1.5707963267949;
IkReal x2414=pz*pz;
IkReal x2415=sj7*sj7;
IkReal x2416=cj7*cj7;
IkReal x2417=((4.26078431372549)*cj7);
IkReal x2418=(x2414+(((-1.0)*pp)));
IkReal x2419=((1.20294117647059)*x2415);
IkReal x2420=((1.20294117647059)*x2416);
j4eval[0]=x2418;
j4eval[1]=(((pp*x2419))+((pp*x2417))+(((-1.0)*x2414*x2417))+(((-1.0)*x2414*x2419))+((pp*sj7))+(((-3.98071895424837)*x2414))+(((-1.0)*sj7*x2414))+(((3.98071895424837)*pp))+(((-1.0)*x2414*x2420))+((pp*x2420)));
j4eval[2]=IKsign(x2418);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj5=1.0;
cj5=0;
j5=1.5707963267949;
IkReal x2421=pz*pz;
j4eval[0]=(pp+(((-1.0)*x2421)));
j4eval[1]=IKsign(((((-1.1)*x2421))+(((1.1)*pp))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2422=((0.0378655681325396)*cj7);
IkReal x2423=(px*sj7);
IkReal x2424=((0.707106781186548)*pp);
IkReal x2425=((0.0321380032049286)*cj7);
IkReal x2426=(py*sj7);
IkReal x2427=(py*x2424);
IkReal x2428=(px*x2424);
CheckValue<IkReal> x2429 = IKatan2WithCheck(IkReal(((((0.214253354699524)*x2426))+x2427+(((-1.0)*px*x2422))+(((0.18239819420707)*py))+(((0.252437120883597)*x2423))+(((-1.0)*x2428))+(((-0.112394622869602)*px))+(((-1.0)*py*x2425)))),((((0.214253354699524)*x2423))+x2428+x2427+(((0.112394622869602)*py))+((py*x2422))+(((-1.0)*px*x2425))+(((-0.252437120883597)*x2426))+(((0.18239819420707)*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x2429.valid){
continue;
}
CheckValue<IkReal> x2430=IKPowWithIntegerCheck(IKsign(((((-1.1)*(pz*pz)))+(((1.1)*pp)))),-1);
if(!x2430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2429.value)+(((1.5707963267949)*(x2430.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2431=IKcos(j4);
IkReal x2432=IKsin(j4);
IkReal x2433=((0.707106781186548)*py);
IkReal x2434=((0.707106781186548)*px);
IkReal x2435=(x2431*x2434);
IkReal x2436=(x2431*x2433);
IkReal x2437=(x2432*x2433);
IkReal x2438=(x2432*x2434);
IkReal x2439=(x2437+x2435);
evalcond[0]=((-0.2125)+(((0.714177848998413)*py*x2431))+(((-1.0)*pp))+(((0.841457069611992)*py*x2432))+(((-0.714177848998413)*px*x2432))+(((0.841457069611992)*px*x2431)));
evalcond[1]=((-0.045)+x2439+x2438+(((0.045)*cj7))+(((-1.0)*x2436))+(((-0.3)*sj7)));
evalcond[2]=((-0.55)+(((-0.045)*sj7))+x2439+x2436+(((-0.3)*cj7))+(((-1.0)*x2438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2440=((0.243951839509359)*cj7);
IkReal x2441=(px*sj7);
IkReal x2442=(py*sj7);
IkReal x2443=((0.18031222920257)*cj7);
CheckValue<IkReal> x2444 = IKatan2WithCheck(IkReal((((px*x2440))+(((-1.0)*py*x2443))+(((-0.18031222920257)*x2441))+(((-0.243951839509359)*x2442))+(((-0.420728534805996)*py))+(((0.357088924499207)*px)))),((((-1.0)*py*x2440))+(((-0.243951839509359)*x2441))+(((-0.357088924499207)*py))+(((0.18031222920257)*x2442))+(((-0.420728534805996)*px))+(((-1.0)*px*x2443))),IKFAST_ATAN2_MAGTHRESH);
if(!x2444.valid){
continue;
}
CheckValue<IkReal> x2445=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x2445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2444.value)+(((1.5707963267949)*(x2445.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2446=IKcos(j4);
IkReal x2447=IKsin(j4);
IkReal x2448=((0.707106781186548)*py);
IkReal x2449=((0.707106781186548)*px);
IkReal x2450=(x2446*x2449);
IkReal x2451=(x2446*x2448);
IkReal x2452=(x2447*x2448);
IkReal x2453=(x2447*x2449);
IkReal x2454=(x2450+x2452);
evalcond[0]=((-0.2125)+(((-0.714177848998413)*px*x2447))+(((-1.0)*pp))+(((0.714177848998413)*py*x2446))+(((0.841457069611992)*px*x2446))+(((0.841457069611992)*py*x2447)));
evalcond[1]=((-0.045)+x2454+x2453+(((0.045)*cj7))+(((-1.0)*x2451))+(((-0.3)*sj7)));
evalcond[2]=((-0.55)+(((-0.045)*sj7))+x2454+x2451+(((-0.3)*cj7))+(((-1.0)*x2453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));
evalcond[2]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
IkReal x2455=pz*pz;
IkReal x2456=sj7*sj7;
IkReal x2457=cj7*cj7;
IkReal x2458=((4.26078431372549)*cj7);
IkReal x2459=((((-1.0)*x2455))+pp);
IkReal x2460=((1.20294117647059)*x2456);
IkReal x2461=((1.0)*x2455);
IkReal x2462=((1.20294117647059)*x2457);
j4eval[0]=x2459;
j4eval[1]=((((-3.98071895424837)*x2455))+((pp*sj7))+((pp*x2460))+((pp*x2462))+(((-1.0)*sj7*x2461))+(((-1.0)*x2455*x2460))+(((-1.0)*x2455*x2462))+(((3.98071895424837)*pp))+(((-1.0)*x2455*x2458))+((pp*x2458)));
j4eval[2]=IKsign(x2459);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
IkReal x2463=pz*pz;
j4eval[0]=(x2463+(((-1.0)*pp)));
j4eval[1]=IKsign(((((1.1)*x2463))+(((-1.1)*pp))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2464=((0.0378655681325396)*cj7);
IkReal x2465=((0.707106781186548)*pp);
IkReal x2466=((0.214253354699524)*sj7);
IkReal x2467=((0.0321380032049286)*cj7);
IkReal x2468=((0.252437120883597)*sj7);
IkReal x2469=(py*x2465);
IkReal x2470=(px*x2465);
CheckValue<IkReal> x2471 = IKatan2WithCheck(IkReal((x2469+((py*x2464))+(((0.112394622869602)*py))+(((-1.0)*py*x2468))+(((-1.0)*x2470))+(((-0.18239819420707)*px))+((px*x2467))+(((-1.0)*px*x2466)))),(x2469+x2470+((py*x2466))+(((0.112394622869602)*px))+(((-1.0)*py*x2467))+(((0.18239819420707)*py))+((px*x2464))+(((-1.0)*px*x2468))),IKFAST_ATAN2_MAGTHRESH);
if(!x2471.valid){
continue;
}
CheckValue<IkReal> x2472=IKPowWithIntegerCheck(IKsign(((((-1.1)*pp))+(((1.1)*(pz*pz))))),-1);
if(!x2472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2471.value)+(((1.5707963267949)*(x2472.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2473=IKsin(j4);
IkReal x2474=IKcos(j4);
IkReal x2475=((0.707106781186548)*py);
IkReal x2476=(px*x2473);
IkReal x2477=(px*x2474);
IkReal x2478=((0.707106781186548)*x2476);
IkReal x2479=((0.707106781186548)*x2477);
IkReal x2480=(x2474*x2475);
IkReal x2481=(x2473*x2475);
IkReal x2482=(x2481+x2479);
evalcond[0]=((-0.2125)+(((-0.841457069611992)*py*x2474))+(((0.841457069611992)*x2476))+(((-1.0)*pp))+(((-0.714177848998413)*py*x2473))+(((-0.714177848998413)*x2477)));
evalcond[1]=((-0.045)+x2482+x2478+(((0.045)*cj7))+(((-1.0)*x2480))+(((-0.3)*sj7)));
evalcond[2]=((-0.55)+(((-0.045)*sj7))+x2478+(((-0.3)*cj7))+(((-1.0)*x2480))+(((-1.0)*x2482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2483=((0.243951839509359)*cj7);
IkReal x2484=(px*sj7);
IkReal x2485=(py*sj7);
IkReal x2486=((0.18031222920257)*cj7);
CheckValue<IkReal> x2487=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x2487.valid){
continue;
}
CheckValue<IkReal> x2488 = IKatan2WithCheck(IkReal(((((0.18031222920257)*x2485))+(((-0.357088924499207)*py))+(((0.243951839509359)*x2484))+((px*x2486))+(((-1.0)*py*x2483))+(((0.420728534805996)*px)))),((((-1.0)*px*x2483))+(((0.18031222920257)*x2484))+(((-0.357088924499207)*px))+(((-1.0)*py*x2486))+(((-0.243951839509359)*x2485))+(((-0.420728534805996)*py))),IKFAST_ATAN2_MAGTHRESH);
if(!x2488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2487.value)))+(x2488.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2489=IKsin(j4);
IkReal x2490=IKcos(j4);
IkReal x2491=((0.707106781186548)*py);
IkReal x2492=(px*x2489);
IkReal x2493=(px*x2490);
IkReal x2494=((0.707106781186548)*x2492);
IkReal x2495=((0.707106781186548)*x2493);
IkReal x2496=(x2490*x2491);
IkReal x2497=(x2489*x2491);
IkReal x2498=(x2495+x2497);
evalcond[0]=((-0.2125)+(((0.841457069611992)*x2492))+(((-0.714177848998413)*x2493))+(((-0.841457069611992)*py*x2490))+(((-1.0)*pp))+(((-0.714177848998413)*py*x2489)));
evalcond[1]=((-0.045)+x2498+x2494+(((0.045)*cj7))+(((-1.0)*x2496))+(((-0.3)*sj7)));
evalcond[2]=((-0.55)+(((-0.045)*sj7))+x2494+(((-0.3)*cj7))+(((-1.0)*x2496))+(((-1.0)*x2498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2499=((0.388908729652601)*py);
IkReal x2500=((0.388908729652601)*px);
IkReal x2501=((0.0318198051533946)*py);
IkReal x2502=((0.212132034355964)*cj7);
IkReal x2503=(sj5*x2501);
IkReal x2504=(px*x2502);
IkReal x2505=(py*x2502);
IkReal x2506=((0.0318198051533946)*px*sj7);
IkReal x2507=((0.0318198051533946)*px*sj5);
IkReal x2508=(sj7*x2501);
IkReal x2509=((0.707106781186548)*cj5*pz);
IkReal x2510=((0.212132034355964)*sj5*sj7);
IkReal x2511=(cj7*x2507);
IkReal x2512=(px*x2509);
IkReal x2513=(py*x2510);
IkReal x2514=(py*x2509);
IkReal x2515=(cj7*x2503);
IkReal x2516=(px*x2510);
IkReal x2517=(x2514+x2511);
IkReal x2518=(x2512+x2513+x2503);
IkReal x2519=(x2515+x2506+x2504+x2500);
IkReal x2520=(x2516+x2508+x2507+x2505+x2499);
CheckValue<IkReal> x2521=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*sj5))+((sj5*(pz*pz))))),-1);
if(!x2521.valid){
continue;
}
CheckValue<IkReal> x2522 = IKatan2WithCheck(IkReal((x2519+x2517+(((-1.0)*x2518))+(((-1.0)*x2520)))),(x2518+x2517+(((-1.0)*x2519))+(((-1.0)*x2520))),IKFAST_ATAN2_MAGTHRESH);
if(!x2522.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2521.value)))+(x2522.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2523=IKsin(j4);
IkReal x2524=IKcos(j4);
IkReal x2525=((0.707106781186548)*py);
IkReal x2526=(cj5*pz);
IkReal x2527=((0.045)*sj7);
IkReal x2528=((0.0636396103067893)*py);
IkReal x2529=((0.707106781186548)*px);
IkReal x2530=((0.777817459305202)*py);
IkReal x2531=((0.3)*cj7);
IkReal x2532=(cj5*x2523);
IkReal x2533=(px*x2524);
IkReal x2534=(sj5*x2523);
IkReal x2535=(sj5*x2524);
IkReal x2536=(x2523*x2529);
IkReal x2537=(x2524*x2529);
IkReal x2538=(x2524*x2525);
IkReal x2539=(x2523*x2525);
IkReal x2540=(x2539+x2537);
evalcond[0]=((-0.045)+x2540+x2536+(((0.045)*cj7))+(((-1.0)*x2538))+(((-0.3)*sj7)));
evalcond[1]=((((-1.0)*x2525*x2532))+(((-1.0)*cj5*x2538))+(((-1.0)*cj5*x2537))+((pz*sj5))+((x2529*x2532)));
evalcond[2]=(x2536+(((-1.0)*x2538))+((sj5*x2527))+(((-1.0)*x2540))+(((0.55)*sj5))+((sj5*x2531)));
evalcond[3]=((-0.55)+x2526+(((-1.0)*x2531))+((x2525*x2534))+((x2525*x2535))+(((-1.0)*x2527))+((x2529*x2535))+(((-1.0)*x2529*x2534)));
evalcond[4]=((-0.2125)+(((-1.0)*x2524*x2528))+((x2530*x2535))+((x2530*x2534))+(((0.0636396103067893)*px*x2523))+(((0.0636396103067893)*x2533))+(((-0.777817459305202)*px*x2534))+(((-1.0)*pp))+((x2523*x2528))+(((0.777817459305202)*sj5*x2533))+(((1.1)*x2526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2541=((0.0318198051533946)*px);
IkReal x2542=((0.0318198051533946)*py);
IkReal x2543=(py*sj7);
IkReal x2544=((0.0318198051533946)*sj5);
IkReal x2545=((0.388908729652601)*sj5);
IkReal x2546=(cj7*py);
IkReal x2547=((0.212132034355964)*sj5);
IkReal x2548=(px*sj7);
IkReal x2549=(cj7*x2542);
IkReal x2550=((0.212132034355964)*x2548);
IkReal x2551=(px*x2545);
IkReal x2552=(py*x2545);
IkReal x2553=(cj7*x2541);
IkReal x2554=((0.212132034355964)*x2543);
IkReal x2555=(sj5*sj7*x2541);
IkReal x2556=(cj7*px*x2547);
IkReal x2557=(sj5*sj7*x2542);
IkReal x2558=(x2546*x2547);
IkReal x2559=(x2554+x2542);
IkReal x2560=(x2551+x2555+x2556+x2549);
IkReal x2561=(x2550+x2552+x2557+x2558+x2541);
CheckValue<IkReal> x2562=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x2562.valid){
continue;
}
CheckValue<IkReal> x2563 = IKatan2WithCheck(IkReal((x2561+x2559+(((-1.0)*x2560))+(((-1.0)*x2553)))),(x2561+x2560+(((-1.0)*x2553))+(((-1.0)*x2559))),IKFAST_ATAN2_MAGTHRESH);
if(!x2563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2562.value)))+(x2563.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2564=IKsin(j4);
IkReal x2565=IKcos(j4);
IkReal x2566=((0.707106781186548)*py);
IkReal x2567=(cj5*pz);
IkReal x2568=((0.045)*sj7);
IkReal x2569=((0.0636396103067893)*py);
IkReal x2570=((0.707106781186548)*px);
IkReal x2571=((0.777817459305202)*py);
IkReal x2572=((0.3)*cj7);
IkReal x2573=(cj5*x2564);
IkReal x2574=(px*x2565);
IkReal x2575=(sj5*x2564);
IkReal x2576=(sj5*x2565);
IkReal x2577=(x2564*x2570);
IkReal x2578=(x2565*x2570);
IkReal x2579=(x2565*x2566);
IkReal x2580=(x2564*x2566);
IkReal x2581=(x2580+x2578);
evalcond[0]=((-0.045)+x2581+x2577+(((0.045)*cj7))+(((-1.0)*x2579))+(((-0.3)*sj7)));
evalcond[1]=((((-1.0)*x2566*x2573))+((pz*sj5))+((x2570*x2573))+(((-1.0)*cj5*x2579))+(((-1.0)*cj5*x2578)));
evalcond[2]=(x2577+((sj5*x2568))+(((-1.0)*x2581))+((sj5*x2572))+(((-1.0)*x2579))+(((0.55)*sj5)));
evalcond[3]=((-0.55)+x2567+(((-1.0)*x2568))+(((-1.0)*x2570*x2575))+((x2566*x2576))+((x2566*x2575))+(((-1.0)*x2572))+((x2570*x2576)));
evalcond[4]=((-0.2125)+(((0.0636396103067893)*x2574))+((x2571*x2576))+((x2571*x2575))+(((1.1)*x2567))+(((0.777817459305202)*sj5*x2574))+(((-1.0)*pp))+(((-1.0)*x2565*x2569))+(((-0.777817459305202)*px*x2575))+(((0.0636396103067893)*px*x2564))+((x2564*x2569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2582=((0.777817459305202)*pz);
IkReal x2583=((0.150260191002141)*cj5);
IkReal x2584=((0.09)*cj5);
IkReal x2585=(py*x2583);
IkReal x2586=(px*x2582);
IkReal x2587=(py*x2582);
IkReal x2588=(px*x2583);
IkReal x2589=((0.0636396103067893)*pz*sj5);
IkReal x2590=((0.707106781186548)*cj5*pp);
IkReal x2591=(py*x2590);
IkReal x2592=(py*x2589);
IkReal x2593=(px*x2589);
IkReal x2594=(px*x2590);
IkReal x2595=(x2591+x2585);
IkReal x2596=(x2593+x2587);
IkReal x2597=(x2594+x2592+x2588);
CheckValue<IkReal> x2598 = IKatan2WithCheck(IkReal((x2596+x2586+(((-1.0)*x2597))+(((-1.0)*x2595)))),(x2595+x2586+(((-1.0)*x2597))+(((-1.0)*x2596))),IKFAST_ATAN2_MAGTHRESH);
if(!x2598.valid){
continue;
}
CheckValue<IkReal> x2599=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*x2584))+((x2584*(pz*pz))))),-1);
if(!x2599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2598.value)+(((1.5707963267949)*(x2599.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2600=IKsin(j4);
IkReal x2601=IKcos(j4);
IkReal x2602=((0.707106781186548)*py);
IkReal x2603=(cj5*pz);
IkReal x2604=((0.045)*sj7);
IkReal x2605=((0.0636396103067893)*py);
IkReal x2606=((0.707106781186548)*px);
IkReal x2607=((0.777817459305202)*py);
IkReal x2608=((0.3)*cj7);
IkReal x2609=(cj5*x2600);
IkReal x2610=(px*x2601);
IkReal x2611=(sj5*x2600);
IkReal x2612=(sj5*x2601);
IkReal x2613=(x2600*x2606);
IkReal x2614=(x2601*x2606);
IkReal x2615=(x2601*x2602);
IkReal x2616=(x2600*x2602);
IkReal x2617=(x2616+x2614);
evalcond[0]=((-0.045)+(((0.045)*cj7))+(((-1.0)*x2615))+(((-0.3)*sj7))+x2617+x2613);
evalcond[1]=((((-1.0)*cj5*x2614))+(((-1.0)*cj5*x2615))+((x2606*x2609))+((pz*sj5))+(((-1.0)*x2602*x2609)));
evalcond[2]=((((0.55)*sj5))+(((-1.0)*x2615))+(((-1.0)*x2617))+((sj5*x2604))+((sj5*x2608))+x2613);
evalcond[3]=((-0.55)+(((-1.0)*x2606*x2611))+((x2602*x2611))+((x2602*x2612))+((x2606*x2612))+(((-1.0)*x2608))+(((-1.0)*x2604))+x2603);
evalcond[4]=((-0.2125)+(((-1.0)*x2601*x2605))+(((-0.777817459305202)*px*x2611))+(((0.0636396103067893)*x2610))+(((1.1)*x2603))+(((0.777817459305202)*sj5*x2610))+((x2600*x2605))+(((-1.0)*pp))+(((0.0636396103067893)*px*x2600))+((x2607*x2612))+((x2607*x2611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2618=((-0.55)+(((-0.045)*sj7))+(((-0.3)*cj7))+pz);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));
evalcond[2]=x2618;
evalcond[3]=x2618;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj5=0;
cj5=1.0;
j5=0;
IkReal x2619=(pp+(((-1.0)*(pz*pz))));
j4eval[0]=x2619;
j4eval[1]=IKsign(x2619);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj5=0;
cj5=1.0;
j5=0;
IkReal x2620=(((cj6*(pz*pz)))+(((-1.0)*cj6*pp)));
j4eval[0]=x2620;
j4eval[1]=IKsign(x2620);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj5=0;
cj5=1.0;
j5=0;
IkReal x2621=((((-1.0)*pp*sj6))+((sj6*(pz*pz))));
j4eval[0]=x2621;
j4eval[1]=IKsign(x2621);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x2622=x2618;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));
evalcond[2]=x2622;
evalcond[3]=x2622;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj5=0;
cj5=1.0;
j5=0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x2623=pz*pz;
IkReal x2624=cj7*cj7;
IkReal x2625=sj7*sj7;
IkReal x2626=((2.0)*cj7);
IkReal x2627=((((-1.0)*pp))+x2623);
IkReal x2628=((44.4444444444444)*x2625);
IkReal x2629=((1.0)*x2623);
IkReal x2630=((13.3333333333333)*pp*sj7);
IkReal x2631=((13.3333333333333)*sj7*x2623);
j4eval[0]=x2627;
j4eval[1]=((((-1.0)*x2623*x2628))+((pp*x2628))+((pp*x2624))+((cj7*x2631))+(((-1.0)*x2631))+(((-1.0)*x2624*x2629))+(((-1.0)*pp*x2626))+(((-1.0)*cj7*x2630))+pp+((x2623*x2626))+(((-1.0)*x2629))+x2630);
j4eval[2]=IKsign(x2627);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj5=0;
cj5=1.0;
j5=0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x2632=pz*pz;
IkReal x2633=pz*pz*pz;
IkReal x2634=pp*pp;
IkReal x2635=((1.0)*x2632);
j4eval[0]=((((-1.0)*x2635))+pp);
j4eval[1]=IKsign(((((-0.09)*x2632))+(((0.09)*pp))));
j4eval[2]=((((-26.7958477508651)*(x2632*x2632)))+(((-22.1453287197232)*x2632*x2634))+(((-1.0)*x2635))+(((17.3840830449827)*pp*x2632))+(((22.1453287197232)*(pp*pp*pp)))+(((-10.3529411764706)*pp*pz))+(((-48.719723183391)*pz*x2634))+pp+(((48.719723183391)*pp*x2633))+(((9.41176470588235)*x2634))+(((10.3529411764706)*x2633)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-0.85)+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj5=0;
cj5=1.0;
j5=0;
sj6=0;
cj6=1.0;
j6=0;
sj7=0;
cj7=1.0;
j7=0;
j4eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x2636=((0.707106781186548)*py);
IkReal x2637=((0.707106781186548)*px);
CheckValue<IkReal> x2639 = IKatan2WithCheck(IkReal(((((-1.0)*x2636))+x2637)),(x2637+x2636),IKFAST_ATAN2_MAGTHRESH);
if(!x2639.valid){
continue;
}
IkReal x2638=x2639.value;
j4array[0]=((-1.0)*x2638);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x2638)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2640=IKcos(j4);
IkReal x2641=IKsin(j4);
IkReal x2642=((0.707106781186548)*py);
IkReal x2643=((0.707106781186548)*px);
IkReal x2644=((0.0636396103067893)*x2641);
IkReal x2645=((0.0636396103067893)*x2640);
evalcond[0]=((((-1.0)*x2640*x2642))+(((-1.0)*x2640*x2643))+(((-1.0)*x2641*x2642))+((x2641*x2643)));
evalcond[1]=(((px*x2645))+(((-1.0)*px*x2644))+((py*x2645))+((py*x2644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2646=((0.150260191002141)*py);
IkReal x2647=((0.150260191002141)*px);
IkReal x2648=((0.777817459305202)*pz);
IkReal x2649=((0.707106781186548)*pp);
IkReal x2650=(py*x2649);
IkReal x2651=(px*x2649);
IkReal x2652=(py*x2648);
IkReal x2653=(px*x2648);
IkReal x2654=(x2647+x2651);
IkReal x2655=(x2646+x2650);
CheckValue<IkReal> x2656 = IKatan2WithCheck(IkReal(((((-1.0)*x2654))+(((-1.0)*x2652))+x2653+x2655)),((((-1.0)*x2652))+(((-1.0)*x2653))+x2655+x2654),IKFAST_ATAN2_MAGTHRESH);
if(!x2656.valid){
continue;
}
CheckValue<IkReal> x2657=IKPowWithIntegerCheck(IKsign(((((-0.09)*(pz*pz)))+(((0.09)*pp)))),-1);
if(!x2657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2656.value)+(((1.5707963267949)*(x2657.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2658=IKsin(j4);
IkReal x2659=IKcos(j4);
IkReal x2660=((0.707106781186548)*py);
IkReal x2661=((0.0636396103067893)*px);
IkReal x2662=((0.0636396103067893)*py);
IkReal x2663=((0.707106781186548)*px);
IkReal x2664=(x2658*x2663);
IkReal x2665=(x2659*x2663);
IkReal x2666=(x2659*x2660);
IkReal x2667=(x2658*x2660);
IkReal x2668=(x2667+x2665);
evalcond[0]=((((-1.0)*x2666))+x2664+x2668);
evalcond[1]=((0.045)+(((-0.045)*cj7))+(((-1.0)*x2666))+(((-1.0)*x2668))+(((0.3)*sj7))+x2664);
evalcond[2]=((-0.2125)+((x2659*x2661))+((x2659*x2662))+((x2658*x2662))+(((-1.0)*pp))+(((1.1)*pz))+(((-1.0)*x2658*x2661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2669=((0.0318198051533946)*py);
IkReal x2670=((0.0318198051533946)*px);
IkReal x2671=((0.212132034355964)*sj7);
IkReal x2672=((0.0318198051533946)*cj7);
IkReal x2673=(cj7*x2670);
IkReal x2674=(cj7*x2669);
IkReal x2675=(py*x2671);
IkReal x2676=(px*x2671);
IkReal x2677=(x2670+x2676);
IkReal x2678=(x2669+x2675);
CheckValue<IkReal> x2679 = IKatan2WithCheck(IkReal(((((-1.0)*x2673))+(((-1.0)*x2678))+x2674+x2677)),((((-1.0)*x2678))+(((-1.0)*x2677))+x2673+x2674),IKFAST_ATAN2_MAGTHRESH);
if(!x2679.valid){
continue;
}
CheckValue<IkReal> x2680=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x2680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2679.value)+(((1.5707963267949)*(x2680.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2681=IKsin(j4);
IkReal x2682=IKcos(j4);
IkReal x2683=((0.707106781186548)*py);
IkReal x2684=((0.0636396103067893)*px);
IkReal x2685=((0.0636396103067893)*py);
IkReal x2686=((0.707106781186548)*px);
IkReal x2687=(x2681*x2686);
IkReal x2688=(x2682*x2686);
IkReal x2689=(x2682*x2683);
IkReal x2690=(x2681*x2683);
IkReal x2691=(x2688+x2690);
evalcond[0]=((((-1.0)*x2689))+x2687+x2691);
evalcond[1]=((0.045)+(((-0.045)*cj7))+(((-1.0)*x2691))+(((-1.0)*x2689))+(((0.3)*sj7))+x2687);
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.0)*x2681*x2684))+(((1.1)*pz))+((x2681*x2685))+((x2682*x2684))+((x2682*x2685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2692=x2618;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));
evalcond[2]=x2692;
evalcond[3]=x2692;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj5=0;
cj5=1.0;
j5=0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x2693=pz*pz;
IkReal x2694=cj7*cj7;
IkReal x2695=sj7*sj7;
IkReal x2696=((2.0)*cj7);
IkReal x2697=((((-1.0)*pp))+x2693);
IkReal x2698=((44.4444444444444)*x2695);
IkReal x2699=((1.0)*x2693);
IkReal x2700=((13.3333333333333)*pp*sj7);
IkReal x2701=((13.3333333333333)*sj7*x2693);
j4eval[0]=x2697;
j4eval[1]=(x2700+(((-1.0)*pp*x2696))+(((-1.0)*cj7*x2700))+((pp*x2694))+((pp*x2698))+(((-1.0)*x2699))+((x2693*x2696))+((cj7*x2701))+pp+(((-1.0)*x2701))+(((-1.0)*x2693*x2698))+(((-1.0)*x2694*x2699)));
j4eval[2]=IKsign(x2697);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj5=0;
cj5=1.0;
j5=0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x2702=pz*pz;
IkReal x2703=pz*pz*pz;
IkReal x2704=pp*pp;
j4eval[0]=(x2702+(((-1.0)*pp)));
j4eval[1]=IKsign(((((-0.09)*pp))+(((0.09)*x2702))));
j4eval[2]=((((17.3840830449827)*pp*x2702))+(((-48.719723183391)*pz*x2704))+(((-26.7958477508651)*(x2702*x2702)))+(((9.41176470588235)*x2704))+(((22.1453287197232)*(pp*pp*pp)))+(((-10.3529411764706)*pp*pz))+(((-22.1453287197232)*x2702*x2704))+pp+(((48.719723183391)*pp*x2703))+(((10.3529411764706)*x2703))+(((-1.0)*x2702)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-0.85)+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj5=0;
cj5=1.0;
j5=0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=0;
cj7=1.0;
j7=0;
j4eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x2705=((0.707106781186548)*py);
IkReal x2706=((0.707106781186548)*px);
CheckValue<IkReal> x2708 = IKatan2WithCheck(IkReal((x2706+(((-1.0)*x2705)))),(x2705+x2706),IKFAST_ATAN2_MAGTHRESH);
if(!x2708.valid){
continue;
}
IkReal x2707=x2708.value;
j4array[0]=((-1.0)*x2707);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x2707)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2709=IKcos(j4);
IkReal x2710=IKsin(j4);
IkReal x2711=((0.707106781186548)*py);
IkReal x2712=((0.0636396103067893)*py);
IkReal x2713=(px*x2710);
IkReal x2714=(px*x2709);
evalcond[0]=((((0.707106781186548)*x2713))+(((-0.707106781186548)*x2714))+(((-1.0)*x2709*x2711))+(((-1.0)*x2710*x2711)));
evalcond[1]=((((0.0636396103067893)*x2713))+(((-0.0636396103067893)*x2714))+(((-1.0)*x2709*x2712))+(((-1.0)*x2710*x2712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2715=((0.150260191002141)*py);
IkReal x2716=((0.150260191002141)*px);
IkReal x2717=((0.777817459305202)*pz);
IkReal x2718=((0.707106781186548)*pp);
IkReal x2719=(py*x2718);
IkReal x2720=(px*x2718);
IkReal x2721=(py*x2717);
IkReal x2722=(px*x2717);
IkReal x2723=(x2715+x2719);
IkReal x2724=(x2716+x2720);
CheckValue<IkReal> x2725=IKPowWithIntegerCheck(IKsign(((((-0.09)*pp))+(((0.09)*(pz*pz))))),-1);
if(!x2725.valid){
continue;
}
CheckValue<IkReal> x2726 = IKatan2WithCheck(IkReal((x2723+x2722+(((-1.0)*x2724))+(((-1.0)*x2721)))),(x2724+x2723+(((-1.0)*x2721))+(((-1.0)*x2722))),IKFAST_ATAN2_MAGTHRESH);
if(!x2726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2725.value)))+(x2726.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2727=IKsin(j4);
IkReal x2728=IKcos(j4);
IkReal x2729=((0.707106781186548)*py);
IkReal x2730=((0.0636396103067893)*x2728);
IkReal x2731=(px*x2727);
IkReal x2732=((0.707106781186548)*x2731);
IkReal x2733=((0.707106781186548)*px*x2728);
IkReal x2734=(x2728*x2729);
IkReal x2735=(x2727*x2729);
IkReal x2736=(x2735+x2733);
evalcond[0]=(x2736+x2732+(((-1.0)*x2734)));
evalcond[1]=((-0.045)+x2732+(((0.045)*cj7))+(((-1.0)*x2736))+(((-1.0)*x2734))+(((-0.3)*sj7)));
evalcond[2]=((-0.2125)+(((-1.0)*py*x2730))+(((-0.0636396103067893)*py*x2727))+(((-1.0)*px*x2730))+(((0.0636396103067893)*x2731))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2737=((0.0318198051533946)*py);
IkReal x2738=((0.0318198051533946)*px);
IkReal x2739=((0.212132034355964)*sj7);
IkReal x2740=((0.0318198051533946)*cj7);
IkReal x2741=(py*x2739);
IkReal x2742=(px*x2739);
IkReal x2743=(cj7*x2738);
IkReal x2744=(cj7*x2737);
IkReal x2745=(x2742+x2738);
IkReal x2746=(x2741+x2737);
CheckValue<IkReal> x2747 = IKatan2WithCheck(IkReal((x2743+x2746+(((-1.0)*x2744))+(((-1.0)*x2745)))),(x2745+x2746+(((-1.0)*x2744))+(((-1.0)*x2743))),IKFAST_ATAN2_MAGTHRESH);
if(!x2747.valid){
continue;
}
CheckValue<IkReal> x2748=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x2748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2747.value)+(((1.5707963267949)*(x2748.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2749=IKsin(j4);
IkReal x2750=IKcos(j4);
IkReal x2751=((0.707106781186548)*py);
IkReal x2752=((0.0636396103067893)*x2750);
IkReal x2753=(px*x2749);
IkReal x2754=((0.707106781186548)*x2753);
IkReal x2755=((0.707106781186548)*px*x2750);
IkReal x2756=(x2750*x2751);
IkReal x2757=(x2749*x2751);
IkReal x2758=(x2757+x2755);
evalcond[0]=(x2754+x2758+(((-1.0)*x2756)));
evalcond[1]=((-0.045)+x2754+(((0.045)*cj7))+(((-1.0)*x2756))+(((-1.0)*x2758))+(((-0.3)*sj7)));
evalcond[2]=((-0.2125)+(((-1.0)*py*x2752))+(((0.0636396103067893)*x2753))+(((-1.0)*pp))+(((1.1)*pz))+(((-1.0)*px*x2752))+(((-0.0636396103067893)*py*x2749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2759=cj6*cj6;
IkReal x2760=((0.0318198051533946)*px);
IkReal x2761=((0.0318198051533946)*py);
IkReal x2762=(cj6*sj6);
IkReal x2763=((0.212132034355964)*sj7);
IkReal x2764=(cj7*x2761);
IkReal x2765=(px*x2763);
IkReal x2766=(cj7*x2760);
IkReal x2767=(py*x2763);
IkReal x2768=(x2759*x2761);
IkReal x2769=(x2759*x2760);
IkReal x2770=(x2761*x2762);
IkReal x2771=(x2760*x2762);
IkReal x2772=(x2759*x2767);
IkReal x2773=(x2762*x2764);
IkReal x2774=(x2762*x2766);
IkReal x2775=(x2759*x2766);
IkReal x2776=(x2762*x2767);
IkReal x2777=(x2759*x2764);
IkReal x2778=(x2762*x2765);
IkReal x2779=(x2759*x2765);
IkReal x2780=(x2773+x2775+x2760+x2765);
IkReal x2781=(x2772+x2774+x2768+x2764);
IkReal x2782=(x2778+x2771+x2777+x2761+x2767);
IkReal x2783=(x2779+x2770+x2776+x2769+x2766);
CheckValue<IkReal> x2784=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*sj6))+((sj6*(pz*pz))))),-1);
if(!x2784.valid){
continue;
}
CheckValue<IkReal> x2785 = IKatan2WithCheck(IkReal(((((-1.0)*x2781))+(((-1.0)*x2783))+x2780+x2782)),((((-1.0)*x2782))+(((-1.0)*x2783))+x2781+x2780),IKFAST_ATAN2_MAGTHRESH);
if(!x2785.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2784.value)))+(x2785.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2786=IKsin(j4);
IkReal x2787=IKcos(j4);
IkReal x2788=((0.045)*cj7);
IkReal x2789=(px*sj6);
IkReal x2790=(py*sj6);
IkReal x2791=((0.3)*sj7);
IkReal x2792=(cj6*py);
IkReal x2793=(cj6*px);
IkReal x2794=((0.707106781186548)*x2787);
IkReal x2795=((0.0636396103067893)*x2787);
IkReal x2796=((0.707106781186548)*x2786);
IkReal x2797=((0.0636396103067893)*x2786);
IkReal x2798=(px*x2796);
IkReal x2799=(px*x2794);
IkReal x2800=(py*x2794);
IkReal x2801=(py*x2796);
IkReal x2802=(x2789*x2794);
IkReal x2803=(x2793*x2796);
IkReal x2804=(x2789*x2796);
IkReal x2805=(x2790*x2796);
IkReal x2806=(x2792*x2794);
IkReal x2807=(x2790*x2794);
IkReal x2808=(x2792*x2796);
IkReal x2809=(x2793*x2794);
IkReal x2810=(x2799+x2801);
IkReal x2811=(x2802+x2803+x2805);
IkReal x2812=(x2808+x2809+x2807);
evalcond[0]=(x2798+(((-1.0)*x2800))+(((-1.0)*sj6*x2788))+(((0.045)*sj6))+((sj6*x2791))+x2810);
evalcond[1]=(x2798+(((-1.0)*x2800))+((cj6*x2791))+(((0.045)*cj6))+(((-1.0)*x2810))+(((-1.0)*cj6*x2788)));
evalcond[2]=((((-1.0)*x2804))+(((-1.0)*x2806))+x2811+x2812);
evalcond[3]=((0.045)+(((-1.0)*x2788))+x2791+(((-1.0)*x2806))+(((-1.0)*x2812))+x2804+x2811);
evalcond[4]=((-0.2125)+(((-1.0)*x2790*x2797))+(((-1.0)*x2789*x2797))+(((-1.0)*x2789*x2795))+((x2792*x2797))+((x2792*x2795))+((x2790*x2795))+(((-1.0)*pp))+((x2793*x2795))+(((1.1)*pz))+(((-1.0)*x2793*x2797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2813=cj6*cj6;
IkReal x2814=((0.212132034355964)*sj7);
IkReal x2815=((0.0318198051533946)*cj7);
IkReal x2816=(cj6*py*sj6);
IkReal x2817=(px*x2813);
IkReal x2818=(cj6*px*sj6);
IkReal x2819=(py*x2813);
IkReal x2820=((0.0318198051533946)*x2818);
IkReal x2821=((0.0318198051533946)*x2817);
IkReal x2822=((0.0318198051533946)*x2816);
IkReal x2823=((0.0318198051533946)*x2819);
IkReal x2824=(x2815*x2819);
IkReal x2825=(x2814*x2818);
IkReal x2826=(x2815*x2816);
IkReal x2827=(x2815*x2817);
IkReal x2828=(x2814*x2816);
IkReal x2829=(x2814*x2819);
IkReal x2830=(x2815*x2818);
IkReal x2831=(x2814*x2817);
IkReal x2832=(x2826+x2827);
IkReal x2833=(x2824+x2825+x2820);
IkReal x2834=(x2830+x2829+x2823);
IkReal x2835=(x2831+x2828+x2821+x2822);
CheckValue<IkReal> x2836 = IKatan2WithCheck(IkReal(((((-1.0)*x2832))+(((-1.0)*x2834))+x2835+x2833)),((((-1.0)*x2835))+(((-1.0)*x2834))+x2833+x2832),IKFAST_ATAN2_MAGTHRESH);
if(!x2836.valid){
continue;
}
CheckValue<IkReal> x2837=IKPowWithIntegerCheck(IKsign((((cj6*(pz*pz)))+(((-1.0)*cj6*pp)))),-1);
if(!x2837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2836.value)+(((1.5707963267949)*(x2837.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2838=IKsin(j4);
IkReal x2839=IKcos(j4);
IkReal x2840=((0.045)*cj7);
IkReal x2841=(px*sj6);
IkReal x2842=(py*sj6);
IkReal x2843=((0.3)*sj7);
IkReal x2844=(cj6*py);
IkReal x2845=(cj6*px);
IkReal x2846=((0.707106781186548)*x2839);
IkReal x2847=((0.0636396103067893)*x2839);
IkReal x2848=((0.707106781186548)*x2838);
IkReal x2849=((0.0636396103067893)*x2838);
IkReal x2850=(px*x2848);
IkReal x2851=(px*x2846);
IkReal x2852=(py*x2846);
IkReal x2853=(py*x2848);
IkReal x2854=(x2841*x2846);
IkReal x2855=(x2845*x2848);
IkReal x2856=(x2841*x2848);
IkReal x2857=(x2842*x2848);
IkReal x2858=(x2844*x2846);
IkReal x2859=(x2842*x2846);
IkReal x2860=(x2844*x2848);
IkReal x2861=(x2845*x2846);
IkReal x2862=(x2851+x2853);
IkReal x2863=(x2855+x2854+x2857);
IkReal x2864=(x2859+x2860+x2861);
evalcond[0]=((((-1.0)*sj6*x2840))+((sj6*x2843))+(((0.045)*sj6))+x2850+x2862+(((-1.0)*x2852)));
evalcond[1]=((((-1.0)*cj6*x2840))+(((0.045)*cj6))+((cj6*x2843))+(((-1.0)*x2862))+x2850+(((-1.0)*x2852)));
evalcond[2]=(x2863+x2864+(((-1.0)*x2858))+(((-1.0)*x2856)));
evalcond[3]=((0.045)+(((-1.0)*x2864))+x2843+x2856+x2863+(((-1.0)*x2858))+(((-1.0)*x2840)));
evalcond[4]=((-0.2125)+(((-1.0)*x2842*x2849))+((x2844*x2849))+((x2844*x2847))+(((-1.0)*x2845*x2849))+((x2842*x2847))+(((-1.0)*pp))+((x2845*x2847))+(((-1.0)*x2841*x2847))+(((-1.0)*x2841*x2849))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2865=(cj6*px);
IkReal x2866=((0.0318198051533946)*py);
IkReal x2867=((0.212132034355964)*sj7);
IkReal x2868=((0.0318198051533946)*cj7);
IkReal x2869=(px*sj6);
IkReal x2870=(sj6*x2866);
IkReal x2871=((0.0318198051533946)*x2865);
IkReal x2872=(cj6*x2866);
IkReal x2873=((0.0318198051533946)*x2869);
IkReal x2874=(x2868*x2869);
IkReal x2875=(cj6*py*x2867);
IkReal x2876=(x2865*x2867);
IkReal x2877=(py*sj6*x2867);
IkReal x2878=(cj7*x2870);
IkReal x2879=(cj7*x2872);
IkReal x2880=(x2865*x2868);
IkReal x2881=(x2867*x2869);
IkReal x2882=(x2880+x2878);
IkReal x2883=(x2872+x2875+x2874);
IkReal x2884=(x2881+x2873+x2879);
IkReal x2885=(x2871+x2870+x2877+x2876);
CheckValue<IkReal> x2886=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x2886.valid){
continue;
}
CheckValue<IkReal> x2887 = IKatan2WithCheck(IkReal(((((-1.0)*x2885))+(((-1.0)*x2884))+x2882+x2883)),((((-1.0)*x2884))+(((-1.0)*x2882))+x2883+x2885),IKFAST_ATAN2_MAGTHRESH);
if(!x2887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2886.value)))+(x2887.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2888=IKsin(j4);
IkReal x2889=IKcos(j4);
IkReal x2890=((0.045)*cj7);
IkReal x2891=(px*sj6);
IkReal x2892=(py*sj6);
IkReal x2893=((0.3)*sj7);
IkReal x2894=(cj6*py);
IkReal x2895=(cj6*px);
IkReal x2896=((0.707106781186548)*x2889);
IkReal x2897=((0.0636396103067893)*x2889);
IkReal x2898=((0.707106781186548)*x2888);
IkReal x2899=((0.0636396103067893)*x2888);
IkReal x2900=(px*x2898);
IkReal x2901=(px*x2896);
IkReal x2902=(py*x2896);
IkReal x2903=(py*x2898);
IkReal x2904=(x2891*x2896);
IkReal x2905=(x2895*x2898);
IkReal x2906=(x2891*x2898);
IkReal x2907=(x2892*x2898);
IkReal x2908=(x2894*x2896);
IkReal x2909=(x2892*x2896);
IkReal x2910=(x2894*x2898);
IkReal x2911=(x2895*x2896);
IkReal x2912=(x2903+x2901);
IkReal x2913=(x2907+x2905+x2904);
IkReal x2914=(x2910+x2911+x2909);
evalcond[0]=((((0.045)*sj6))+((sj6*x2893))+(((-1.0)*sj6*x2890))+(((-1.0)*x2902))+x2912+x2900);
evalcond[1]=((((0.045)*cj6))+(((-1.0)*x2902))+(((-1.0)*cj6*x2890))+((cj6*x2893))+x2900+(((-1.0)*x2912)));
evalcond[2]=((((-1.0)*x2906))+(((-1.0)*x2908))+x2913+x2914);
evalcond[3]=((0.045)+(((-1.0)*x2908))+(((-1.0)*x2890))+x2893+x2913+x2906+(((-1.0)*x2914)));
evalcond[4]=((-0.2125)+(((-1.0)*x2891*x2899))+(((-1.0)*x2891*x2897))+(((-1.0)*x2895*x2899))+((x2895*x2897))+(((-1.0)*x2892*x2899))+((x2892*x2897))+(((-1.0)*pp))+(((1.1)*pz))+((x2894*x2897))+((x2894*x2899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2915=((0.045)*sj7);
IkReal x2916=((0.3)*cj7);
IkReal x2917=(x2915+x2916);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));
evalcond[2]=((0.55)+pz+x2917);
evalcond[3]=((-0.55)+(((-1.0)*pz))+(((-1.0)*x2917)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x2918=(pp+(((-1.0)*(pz*pz))));
j4eval[0]=x2918;
j4eval[1]=IKsign(x2918);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x2919=(((cj6*(pz*pz)))+(((-1.0)*cj6*pp)));
j4eval[0]=x2919;
j4eval[1]=IKsign(x2919);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x2920=((((-1.0)*sj6*(pz*pz)))+((pp*sj6)));
j4eval[0]=x2920;
j4eval[1]=IKsign(x2920);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x2921=((0.045)*sj7);
IkReal x2922=((0.3)*cj7);
IkReal x2923=(x2921+x2922);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));
evalcond[2]=((0.55)+pz+x2923);
evalcond[3]=((-0.55)+(((-1.0)*x2923))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=0;
cj6=1.0;
j6=0;
IkReal x2924=pz*pz;
IkReal x2925=cj7*cj7;
IkReal x2926=sj7*sj7;
IkReal x2927=((2.0)*cj7);
IkReal x2928=((((-1.0)*pp))+x2924);
IkReal x2929=((44.4444444444444)*x2926);
IkReal x2930=((1.0)*x2924);
IkReal x2931=((13.3333333333333)*pp*sj7);
IkReal x2932=((13.3333333333333)*sj7*x2924);
j4eval[0]=x2928;
j4eval[1]=((((-1.0)*cj7*x2931))+((x2924*x2927))+((cj7*x2932))+(((-1.0)*x2930))+(((-1.0)*x2932))+(((-1.0)*x2924*x2929))+pp+((pp*x2929))+((pp*x2925))+(((-1.0)*x2925*x2930))+(((-1.0)*pp*x2927))+x2931);
j4eval[2]=IKsign(x2928);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=0;
cj6=1.0;
j6=0;
IkReal x2933=pz*pz;
IkReal x2934=pp*pp;
IkReal x2935=pz*pz*pz;
j4eval[0]=((((-1.0)*pp))+x2933);
j4eval[1]=((((-22.1453287197232)*x2933*x2934))+(((-48.719723183391)*pp*x2935))+(((17.3840830449827)*pp*x2933))+(((22.1453287197232)*(pp*pp*pp)))+(((48.719723183391)*pz*x2934))+pp+(((-26.7958477508651)*(x2933*x2933)))+(((10.3529411764706)*pp*pz))+(((-10.3529411764706)*x2935))+(((-1.0)*x2933))+(((9.41176470588235)*x2934)));
j4eval[2]=IKsign(((((-0.09)*pp))+(((0.09)*x2933))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((0.85)+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=0;
cj6=1.0;
j6=0;
sj7=0;
cj7=1.0;
j7=0;
j4eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x2936=((0.707106781186548)*py);
IkReal x2937=((0.707106781186548)*px);
CheckValue<IkReal> x2939 = IKatan2WithCheck(IkReal(((((-1.0)*x2936))+x2937)),(x2936+x2937),IKFAST_ATAN2_MAGTHRESH);
if(!x2939.valid){
continue;
}
IkReal x2938=x2939.value;
j4array[0]=((-1.0)*x2938);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x2938)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2940=IKcos(j4);
IkReal x2941=IKsin(j4);
IkReal x2942=((0.707106781186548)*py);
IkReal x2943=((0.0636396103067893)*py);
IkReal x2944=(px*x2941);
IkReal x2945=(px*x2940);
evalcond[0]=((((-1.0)*x2940*x2942))+(((-0.707106781186548)*x2945))+(((0.707106781186548)*x2944))+(((-1.0)*x2941*x2942)));
evalcond[1]=((((-1.0)*x2940*x2943))+(((-0.0636396103067893)*x2945))+(((0.0636396103067893)*x2944))+(((-1.0)*x2941*x2943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2946=((0.150260191002141)*py);
IkReal x2947=((0.150260191002141)*px);
IkReal x2948=((0.777817459305202)*pz);
IkReal x2949=((0.707106781186548)*pp);
IkReal x2950=(py*x2949);
IkReal x2951=(px*x2949);
IkReal x2952=(py*x2948);
IkReal x2953=(px*x2948);
IkReal x2954=(x2950+x2952+x2946);
IkReal x2955=(x2951+x2953+x2947);
CheckValue<IkReal> x2956=IKPowWithIntegerCheck(IKsign(((((-0.09)*pp))+(((0.09)*(pz*pz))))),-1);
if(!x2956.valid){
continue;
}
CheckValue<IkReal> x2957 = IKatan2WithCheck(IkReal(((((-1.0)*x2955))+x2954)),(x2954+x2955),IKFAST_ATAN2_MAGTHRESH);
if(!x2957.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2956.value)))+(x2957.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2958=IKsin(j4);
IkReal x2959=IKcos(j4);
IkReal x2960=((0.707106781186548)*py);
IkReal x2961=((0.0636396103067893)*x2959);
IkReal x2962=(px*x2958);
IkReal x2963=((0.707106781186548)*x2962);
IkReal x2964=((0.707106781186548)*px*x2959);
IkReal x2965=(x2959*x2960);
IkReal x2966=(x2958*x2960);
IkReal x2967=(x2964+x2966);
evalcond[0]=((((-1.0)*x2965))+x2967+x2963);
evalcond[1]=((-0.045)+(((0.045)*cj7))+(((-1.0)*x2967))+(((-1.0)*x2965))+x2963+(((-0.3)*sj7)));
evalcond[2]=((-0.2125)+(((0.0636396103067893)*x2962))+(((-0.0636396103067893)*py*x2958))+(((-1.0)*pp))+(((-1.1)*pz))+(((-1.0)*py*x2961))+(((-1.0)*px*x2961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2968=((0.0318198051533946)*py);
IkReal x2969=((0.0318198051533946)*px);
IkReal x2970=((0.212132034355964)*sj7);
IkReal x2971=((0.0318198051533946)*cj7);
IkReal x2972=(py*x2970);
IkReal x2973=(px*x2970);
IkReal x2974=(cj7*x2969);
IkReal x2975=(cj7*x2968);
IkReal x2976=(x2973+x2969);
IkReal x2977=(x2972+x2968);
CheckValue<IkReal> x2978 = IKatan2WithCheck(IkReal(((((-1.0)*x2975))+(((-1.0)*x2976))+x2977+x2974)),((((-1.0)*x2975))+(((-1.0)*x2974))+x2976+x2977),IKFAST_ATAN2_MAGTHRESH);
if(!x2978.valid){
continue;
}
CheckValue<IkReal> x2979=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x2979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2978.value)+(((1.5707963267949)*(x2979.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2980=IKsin(j4);
IkReal x2981=IKcos(j4);
IkReal x2982=((0.707106781186548)*py);
IkReal x2983=((0.0636396103067893)*x2981);
IkReal x2984=(px*x2980);
IkReal x2985=((0.707106781186548)*x2984);
IkReal x2986=((0.707106781186548)*px*x2981);
IkReal x2987=(x2981*x2982);
IkReal x2988=(x2980*x2982);
IkReal x2989=(x2988+x2986);
evalcond[0]=((((-1.0)*x2987))+x2989+x2985);
evalcond[1]=((-0.045)+(((0.045)*cj7))+(((-1.0)*x2989))+(((-1.0)*x2987))+x2985+(((-0.3)*sj7)));
evalcond[2]=((-0.2125)+(((-1.0)*py*x2983))+(((-0.0636396103067893)*py*x2980))+(((-1.0)*pp))+(((-1.1)*pz))+(((-1.0)*px*x2983))+(((0.0636396103067893)*x2984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2990=((0.045)*sj7);
IkReal x2991=((0.3)*cj7);
IkReal x2992=(x2990+x2991);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));
evalcond[2]=((0.55)+pz+x2992);
evalcond[3]=((-0.55)+(((-1.0)*x2992))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x2993=pz*pz;
IkReal x2994=cj7*cj7;
IkReal x2995=sj7*sj7;
IkReal x2996=((2.0)*cj7);
IkReal x2997=((((-1.0)*pp))+x2993);
IkReal x2998=((44.4444444444444)*x2995);
IkReal x2999=((1.0)*x2993);
IkReal x3000=((13.3333333333333)*pp*sj7);
IkReal x3001=((13.3333333333333)*sj7*x2993);
j4eval[0]=x2997;
j4eval[1]=((((-1.0)*x2999))+x3000+((cj7*x3001))+(((-1.0)*cj7*x3000))+(((-1.0)*x3001))+(((-1.0)*x2993*x2998))+(((-1.0)*pp*x2996))+pp+((x2993*x2996))+(((-1.0)*x2994*x2999))+((pp*x2994))+((pp*x2998)));
j4eval[2]=IKsign(x2997);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x3002=pz*pz;
IkReal x3003=pp*pp;
IkReal x3004=pz*pz*pz;
IkReal x3005=((1.0)*x3002);
j4eval[0]=((((-1.0)*x3005))+pp);
j4eval[1]=IKsign(((((0.09)*pp))+(((-0.09)*x3002))));
j4eval[2]=((((-26.7958477508651)*(x3002*x3002)))+(((-10.3529411764706)*x3004))+(((-48.719723183391)*pp*x3004))+(((22.1453287197232)*(pp*pp*pp)))+(((-1.0)*x3005))+(((-22.1453287197232)*x3002*x3003))+(((17.3840830449827)*pp*x3002))+pp+(((48.719723183391)*pz*x3003))+(((10.3529411764706)*pp*pz))+(((9.41176470588235)*x3003)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((0.85)+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
sj7=0;
cj7=1.0;
j7=0;
j4eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x3006=((0.707106781186548)*py);
IkReal x3007=((0.707106781186548)*px);
CheckValue<IkReal> x3009 = IKatan2WithCheck(IkReal((x3007+(((-1.0)*x3006)))),(x3007+x3006),IKFAST_ATAN2_MAGTHRESH);
if(!x3009.valid){
continue;
}
IkReal x3008=x3009.value;
j4array[0]=((-1.0)*x3008);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x3008)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x3010=IKcos(j4);
IkReal x3011=IKsin(j4);
IkReal x3012=((0.707106781186548)*py);
IkReal x3013=((0.707106781186548)*px);
IkReal x3014=((0.0636396103067893)*x3011);
IkReal x3015=((0.0636396103067893)*x3010);
evalcond[0]=(((x3011*x3013))+(((-1.0)*x3010*x3012))+(((-1.0)*x3010*x3013))+(((-1.0)*x3011*x3012)));
evalcond[1]=(((py*x3014))+((py*x3015))+(((-1.0)*px*x3014))+((px*x3015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3016=((0.150260191002141)*py);
IkReal x3017=((0.150260191002141)*px);
IkReal x3018=((0.777817459305202)*pz);
IkReal x3019=((0.707106781186548)*pp);
IkReal x3020=(py*x3019);
IkReal x3021=(px*x3019);
IkReal x3022=(py*x3018);
IkReal x3023=(px*x3018);
IkReal x3024=(x3017+x3023+x3021);
IkReal x3025=(x3016+x3022+x3020);
CheckValue<IkReal> x3026=IKPowWithIntegerCheck(IKsign(((((-0.09)*(pz*pz)))+(((0.09)*pp)))),-1);
if(!x3026.valid){
continue;
}
CheckValue<IkReal> x3027 = IKatan2WithCheck(IkReal((x3025+(((-1.0)*x3024)))),(x3025+x3024),IKFAST_ATAN2_MAGTHRESH);
if(!x3027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3026.value)))+(x3027.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x3028=IKsin(j4);
IkReal x3029=IKcos(j4);
IkReal x3030=((0.707106781186548)*py);
IkReal x3031=((0.0636396103067893)*px);
IkReal x3032=((0.0636396103067893)*py);
IkReal x3033=((0.707106781186548)*px);
IkReal x3034=(x3028*x3033);
IkReal x3035=(x3029*x3033);
IkReal x3036=(x3029*x3030);
IkReal x3037=(x3028*x3030);
IkReal x3038=(x3035+x3037);
evalcond[0]=(x3038+x3034+(((-1.0)*x3036)));
evalcond[1]=((0.045)+x3034+(((-0.045)*cj7))+(((-1.0)*x3038))+(((-1.0)*x3036))+(((0.3)*sj7)));
evalcond[2]=((-0.2125)+((x3028*x3032))+(((-1.0)*pp))+(((-1.1)*pz))+(((-1.0)*x3028*x3031))+((x3029*x3032))+((x3029*x3031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3039=((0.0318198051533946)*py);
IkReal x3040=((0.0318198051533946)*px);
IkReal x3041=((0.212132034355964)*sj7);
IkReal x3042=((0.0318198051533946)*cj7);
IkReal x3043=(cj7*x3040);
IkReal x3044=(cj7*x3039);
IkReal x3045=(py*x3041);
IkReal x3046=(px*x3041);
IkReal x3047=(x3040+x3046);
IkReal x3048=(x3045+x3039);
CheckValue<IkReal> x3049=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x3049.valid){
continue;
}
CheckValue<IkReal> x3050 = IKatan2WithCheck(IkReal((x3044+x3047+(((-1.0)*x3043))+(((-1.0)*x3048)))),(x3043+x3044+(((-1.0)*x3047))+(((-1.0)*x3048))),IKFAST_ATAN2_MAGTHRESH);
if(!x3050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3049.value)))+(x3050.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x3051=IKsin(j4);
IkReal x3052=IKcos(j4);
IkReal x3053=((0.707106781186548)*py);
IkReal x3054=((0.0636396103067893)*px);
IkReal x3055=((0.0636396103067893)*py);
IkReal x3056=((0.707106781186548)*px);
IkReal x3057=(x3051*x3056);
IkReal x3058=(x3052*x3056);
IkReal x3059=(x3052*x3053);
IkReal x3060=(x3051*x3053);
IkReal x3061=(x3060+x3058);
evalcond[0]=(x3061+x3057+(((-1.0)*x3059)));
evalcond[1]=((0.045)+x3057+(((-1.0)*x3061))+(((-0.045)*cj7))+(((0.3)*sj7))+(((-1.0)*x3059)));
evalcond[2]=((-0.2125)+(((-1.0)*x3051*x3054))+((x3051*x3055))+(((-1.0)*pp))+(((-1.1)*pz))+((x3052*x3055))+((x3052*x3054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3062=cj6*cj6;
IkReal x3063=((0.0318198051533946)*py);
IkReal x3064=((0.0318198051533946)*px);
IkReal x3065=((0.212132034355964)*sj7);
IkReal x3066=(cj6*sj6);
IkReal x3067=(cj7*x3064);
IkReal x3068=(py*x3065);
IkReal x3069=(cj7*x3063);
IkReal x3070=(px*x3065);
IkReal x3071=(cj7*x3062);
IkReal x3072=(x3062*x3064);
IkReal x3073=(x3063*x3066);
IkReal x3074=(x3064*x3066);
IkReal x3075=(x3062*x3063);
IkReal x3076=(x3062*x3069);
IkReal x3077=(x3066*x3069);
IkReal x3078=(x3066*x3067);
IkReal x3079=(x3062*x3070);
IkReal x3080=(x3066*x3068);
IkReal x3081=(x3062*x3068);
IkReal x3082=(x3066*x3070);
IkReal x3083=(x3062*x3067);
IkReal x3084=(x3076+x3078+x3063+x3068);
IkReal x3085=(x3072+x3077+x3079+x3067);
IkReal x3086=(x3080+x3083+x3070+x3073+x3064);
IkReal x3087=(x3081+x3082+x3074+x3075+x3069);
CheckValue<IkReal> x3088=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj6*(pz*pz)))+((pp*sj6)))),-1);
if(!x3088.valid){
continue;
}
CheckValue<IkReal> x3089 = IKatan2WithCheck(IkReal(((((-1.0)*x3086))+(((-1.0)*x3084))+x3085+x3087)),((((-1.0)*x3086))+(((-1.0)*x3087))+x3085+x3084),IKFAST_ATAN2_MAGTHRESH);
if(!x3089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3088.value)))+(x3089.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3090=IKsin(j4);
IkReal x3091=IKcos(j4);
IkReal x3092=((0.045)*cj7);
IkReal x3093=(px*sj6);
IkReal x3094=(cj6*px);
IkReal x3095=(py*sj6);
IkReal x3096=((0.3)*sj7);
IkReal x3097=(cj6*py);
IkReal x3098=((0.707106781186548)*x3091);
IkReal x3099=((0.0636396103067893)*x3091);
IkReal x3100=((0.707106781186548)*x3090);
IkReal x3101=((0.0636396103067893)*x3090);
IkReal x3102=(px*x3100);
IkReal x3103=(px*x3098);
IkReal x3104=(py*x3098);
IkReal x3105=(py*x3100);
IkReal x3106=(x3093*x3098);
IkReal x3107=(x3097*x3098);
IkReal x3108=(x3097*x3100);
IkReal x3109=(x3093*x3100);
IkReal x3110=(x3095*x3100);
IkReal x3111=(x3094*x3098);
IkReal x3112=(x3095*x3098);
IkReal x3113=(x3094*x3100);
IkReal x3114=(x3105+x3103);
IkReal x3115=(x3106+x3107+x3110);
IkReal x3116=(x3108+x3109+x3111);
evalcond[0]=(x3102+x3114+((sj6*x3096))+(((0.045)*sj6))+(((-1.0)*x3104))+(((-1.0)*sj6*x3092)));
evalcond[1]=(x3102+(((-1.0)*x3114))+(((-1.0)*x3104))+(((-0.045)*cj6))+(((-1.0)*cj6*x3096))+((cj6*x3092)));
evalcond[2]=(x3116+x3113+(((-1.0)*x3112))+(((-1.0)*x3115)));
evalcond[3]=((0.045)+x3116+x3115+x3096+(((-1.0)*x3092))+(((-1.0)*x3112))+(((-1.0)*x3113)));
evalcond[4]=((-0.2125)+((x3094*x3101))+(((-1.0)*x3093*x3101))+(((-1.0)*x3095*x3101))+(((-1.0)*pp))+(((-1.1)*pz))+(((-1.0)*x3097*x3101))+(((-1.0)*x3093*x3099))+((x3095*x3099))+(((-1.0)*x3094*x3099))+(((-1.0)*x3097*x3099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3117=cj6*cj6;
IkReal x3118=((0.212132034355964)*sj7);
IkReal x3119=((0.0318198051533946)*cj7);
IkReal x3120=(cj6*py*sj6);
IkReal x3121=(px*x3117);
IkReal x3122=(cj6*px*sj6);
IkReal x3123=(py*x3117);
IkReal x3124=((0.0318198051533946)*x3121);
IkReal x3125=((0.0318198051533946)*x3122);
IkReal x3126=((0.0318198051533946)*x3123);
IkReal x3127=((0.0318198051533946)*x3120);
IkReal x3128=(x3118*x3123);
IkReal x3129=(x3118*x3122);
IkReal x3130=(x3119*x3120);
IkReal x3131=(x3118*x3121);
IkReal x3132=(x3118*x3120);
IkReal x3133=(x3119*x3123);
IkReal x3134=(x3119*x3122);
IkReal x3135=(x3119*x3121);
IkReal x3136=(x3134+x3133);
IkReal x3137=(x3124+x3131+x3130);
IkReal x3138=(x3127+x3135+x3132);
IkReal x3139=(x3128+x3129+x3126+x3125);
CheckValue<IkReal> x3140 = IKatan2WithCheck(IkReal((x3139+x3138+(((-1.0)*x3136))+(((-1.0)*x3137)))),(x3137+x3139+(((-1.0)*x3138))+(((-1.0)*x3136))),IKFAST_ATAN2_MAGTHRESH);
if(!x3140.valid){
continue;
}
CheckValue<IkReal> x3141=IKPowWithIntegerCheck(IKsign((((cj6*(pz*pz)))+(((-1.0)*cj6*pp)))),-1);
if(!x3141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3140.value)+(((1.5707963267949)*(x3141.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3142=IKsin(j4);
IkReal x3143=IKcos(j4);
IkReal x3144=((0.045)*cj7);
IkReal x3145=(px*sj6);
IkReal x3146=(cj6*px);
IkReal x3147=(py*sj6);
IkReal x3148=((0.3)*sj7);
IkReal x3149=(cj6*py);
IkReal x3150=((0.707106781186548)*x3143);
IkReal x3151=((0.0636396103067893)*x3143);
IkReal x3152=((0.707106781186548)*x3142);
IkReal x3153=((0.0636396103067893)*x3142);
IkReal x3154=(px*x3152);
IkReal x3155=(px*x3150);
IkReal x3156=(py*x3150);
IkReal x3157=(py*x3152);
IkReal x3158=(x3145*x3150);
IkReal x3159=(x3149*x3150);
IkReal x3160=(x3149*x3152);
IkReal x3161=(x3145*x3152);
IkReal x3162=(x3147*x3152);
IkReal x3163=(x3146*x3150);
IkReal x3164=(x3147*x3150);
IkReal x3165=(x3146*x3152);
IkReal x3166=(x3157+x3155);
IkReal x3167=(x3159+x3158+x3162);
IkReal x3168=(x3163+x3160+x3161);
evalcond[0]=((((-1.0)*x3156))+x3154+x3166+(((0.045)*sj6))+((sj6*x3148))+(((-1.0)*sj6*x3144)));
evalcond[1]=((((-1.0)*x3156))+x3154+(((-0.045)*cj6))+((cj6*x3144))+(((-1.0)*cj6*x3148))+(((-1.0)*x3166)));
evalcond[2]=(x3168+x3165+(((-1.0)*x3164))+(((-1.0)*x3167)));
evalcond[3]=((0.045)+x3148+x3168+x3167+(((-1.0)*x3144))+(((-1.0)*x3165))+(((-1.0)*x3164)));
evalcond[4]=((-0.2125)+(((-1.0)*x3145*x3153))+(((-1.0)*x3145*x3151))+(((-1.0)*x3146*x3151))+((x3147*x3151))+(((-1.0)*x3149*x3153))+(((-1.0)*x3149*x3151))+(((-1.0)*pp))+(((-1.1)*pz))+(((-1.0)*x3147*x3153))+((x3146*x3153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3169=(cj6*px);
IkReal x3170=((0.0318198051533946)*py);
IkReal x3171=((0.212132034355964)*sj7);
IkReal x3172=((0.0318198051533946)*cj7);
IkReal x3173=(px*sj6);
IkReal x3174=(sj6*x3170);
IkReal x3175=((0.0318198051533946)*x3173);
IkReal x3176=((0.0318198051533946)*x3169);
IkReal x3177=(cj6*x3170);
IkReal x3178=(cj7*x3177);
IkReal x3179=(x3169*x3172);
IkReal x3180=(x3172*x3173);
IkReal x3181=(py*sj6*x3171);
IkReal x3182=(cj7*x3174);
IkReal x3183=(cj6*py*x3171);
IkReal x3184=(x3169*x3171);
IkReal x3185=(x3171*x3173);
IkReal x3186=(x3180+x3178);
IkReal x3187=(x3184+x3182+x3176);
IkReal x3188=(x3181+x3179+x3174);
IkReal x3189=(x3185+x3183+x3175+x3177);
CheckValue<IkReal> x3190 = IKatan2WithCheck(IkReal((x3186+x3187+(((-1.0)*x3188))+(((-1.0)*x3189)))),(x3186+x3188+(((-1.0)*x3189))+(((-1.0)*x3187))),IKFAST_ATAN2_MAGTHRESH);
if(!x3190.valid){
continue;
}
CheckValue<IkReal> x3191=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x3191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3190.value)+(((1.5707963267949)*(x3191.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3192=IKsin(j4);
IkReal x3193=IKcos(j4);
IkReal x3194=((0.045)*cj7);
IkReal x3195=(px*sj6);
IkReal x3196=(cj6*px);
IkReal x3197=(py*sj6);
IkReal x3198=((0.3)*sj7);
IkReal x3199=(cj6*py);
IkReal x3200=((0.707106781186548)*x3193);
IkReal x3201=((0.0636396103067893)*x3193);
IkReal x3202=((0.707106781186548)*x3192);
IkReal x3203=((0.0636396103067893)*x3192);
IkReal x3204=(px*x3202);
IkReal x3205=(px*x3200);
IkReal x3206=(py*x3200);
IkReal x3207=(py*x3202);
IkReal x3208=(x3195*x3200);
IkReal x3209=(x3199*x3200);
IkReal x3210=(x3199*x3202);
IkReal x3211=(x3195*x3202);
IkReal x3212=(x3197*x3202);
IkReal x3213=(x3196*x3200);
IkReal x3214=(x3197*x3200);
IkReal x3215=(x3196*x3202);
IkReal x3216=(x3207+x3205);
IkReal x3217=(x3212+x3209+x3208);
IkReal x3218=(x3210+x3211+x3213);
evalcond[0]=(x3216+x3204+(((0.045)*sj6))+(((-1.0)*x3206))+(((-1.0)*sj6*x3194))+((sj6*x3198)));
evalcond[1]=((((-1.0)*cj6*x3198))+x3204+(((-0.045)*cj6))+(((-1.0)*x3206))+(((-1.0)*x3216))+((cj6*x3194)));
evalcond[2]=(x3215+x3218+(((-1.0)*x3217))+(((-1.0)*x3214)));
evalcond[3]=((0.045)+x3198+x3217+x3218+(((-1.0)*x3215))+(((-1.0)*x3214))+(((-1.0)*x3194)));
evalcond[4]=((-0.2125)+((x3197*x3201))+(((-1.0)*x3196*x3201))+((x3196*x3203))+(((-1.0)*x3199*x3203))+(((-1.0)*x3199*x3201))+(((-1.0)*pp))+(((-1.1)*pz))+(((-1.0)*x3197*x3203))+(((-1.0)*x3195*x3203))+(((-1.0)*x3195*x3201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3219=((0.212132034355964)*sj7);
IkReal x3220=((0.0318198051533946)*cj7);
IkReal x3221=((0.0318198051533946)*py);
IkReal x3222=(sj5*sj7);
IkReal x3223=((0.388908729652601)*sj5);
IkReal x3224=(cj5*cj6);
IkReal x3225=(py*sj6);
IkReal x3226=(px*sj6);
IkReal x3227=(px*x3223);
IkReal x3228=(py*x3223);
IkReal x3229=(sj6*x3221);
IkReal x3230=((0.0318198051533946)*x3226);
IkReal x3231=(px*x3224);
IkReal x3232=((0.212132034355964)*cj7*sj5);
IkReal x3233=(x3220*x3226);
IkReal x3234=((0.0318198051533946)*px*x3222);
IkReal x3235=(px*x3232);
IkReal x3236=(x3221*x3222);
IkReal x3237=((0.0318198051533946)*x3231);
IkReal x3238=(x3221*x3224);
IkReal x3239=(x3219*x3225);
IkReal x3240=(py*x3232);
IkReal x3241=(x3220*x3225);
IkReal x3242=(x3219*x3226);
IkReal x3243=(py*x3219*x3224);
IkReal x3244=(x3219*x3231);
IkReal x3245=(x3220*x3231);
IkReal x3246=(py*x3220*x3224);
IkReal x3247=(x3241+x3245);
IkReal x3248=(x3242+x3246+x3230);
IkReal x3249=(x3243+x3240+x3233+x3236+x3238+x3228);
IkReal x3250=(x3244+x3237+x3234+x3235+x3239+x3229+x3227);
CheckValue<IkReal> x3251 = IKatan2WithCheck(IkReal((x3249+x3247+(((-1.0)*x3248))+(((-1.0)*x3250)))),(x3249+x3250+(((-1.0)*x3248))+(((-1.0)*x3247))),IKFAST_ATAN2_MAGTHRESH);
if(!x3251.valid){
continue;
}
CheckValue<IkReal> x3252=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x3252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3251.value)+(((1.5707963267949)*(x3252.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3253=IKsin(j4);
IkReal x3254=IKcos(j4);
IkReal x3255=((0.045)*cj7);
IkReal x3256=((0.707106781186548)*sj6);
IkReal x3257=((0.777817459305202)*sj5);
IkReal x3258=((0.3)*sj7);
IkReal x3259=(cj5*pz);
IkReal x3260=(cj5*cj6);
IkReal x3261=((0.045)*sj7);
IkReal x3262=((0.707106781186548)*sj5);
IkReal x3263=((0.707106781186548)*cj6);
IkReal x3264=((0.3)*cj7);
IkReal x3265=((0.0636396103067893)*px*sj6);
IkReal x3266=(px*x3253);
IkReal x3267=(cj6*pz*sj5);
IkReal x3268=(px*x3254);
IkReal x3269=(py*x3253);
IkReal x3270=((0.707106781186548)*x3266);
IkReal x3271=((0.707106781186548)*x3268);
IkReal x3272=((0.707106781186548)*py*x3254);
IkReal x3273=((0.707106781186548)*x3269);
IkReal x3274=((0.0636396103067893)*py*x3254);
IkReal x3275=(x3273+x3271);
evalcond[0]=(x3275+x3270+(((0.045)*sj6))+(((-1.0)*sj6*x3255))+(((-1.0)*x3272))+((sj6*x3258)));
evalcond[1]=((-0.55)+((x3262*x3269))+((x3262*x3268))+((py*x3254*x3262))+x3259+(((-1.0)*x3264))+(((-1.0)*x3261))+(((-1.0)*x3262*x3266)));
evalcond[2]=(x3270+((sj5*x3261))+((sj5*x3264))+(((-1.0)*x3272))+(((-1.0)*x3275))+(((-1.0)*x3255*x3260))+(((0.045)*x3260))+((x3258*x3260))+(((0.55)*sj5)));
evalcond[3]=(((x3263*x3269))+((x3263*x3266))+((x3263*x3268))+(((-1.0)*cj5*x3256*x3266))+((cj5*py*x3254*x3256))+(((-1.0)*py*x3254*x3263))+((cj5*x3256*x3269))+((cj5*x3256*x3268))+(((-1.0)*pz*sj5*sj6)));
evalcond[4]=((0.045)+(((-1.0)*py*x3254*x3256))+((x3256*x3266))+((x3256*x3269))+((x3256*x3268))+x3267+x3258+((x3260*x3270))+(((-1.0)*x3255))+(((-1.0)*x3260*x3271))+(((-1.0)*x3260*x3273))+(((-1.0)*x3260*x3272)));
evalcond[5]=((-0.2125)+((sj6*x3274))+(((-1.0)*x3257*x3266))+((x3257*x3268))+((x3257*x3269))+(((-0.0636396103067893)*x3260*x3266))+(((-0.09)*x3267))+(((-1.0)*pp))+(((0.0636396103067893)*x3260*x3269))+(((0.0636396103067893)*x3260*x3268))+(((-1.0)*x3254*x3265))+(((-1.0)*x3253*x3265))+(((-0.0636396103067893)*sj6*x3269))+((x3260*x3274))+(((1.1)*x3259))+((py*x3254*x3257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3276=((0.388908729652601)*px);
IkReal x3277=(cj6*sj5);
IkReal x3278=(px*sj6);
IkReal x3279=((0.707106781186548)*pz);
IkReal x3280=(cj5*sj6);
IkReal x3281=((0.212132034355964)*cj7);
IkReal x3282=(cj5*cj6);
IkReal x3283=(cj6*py);
IkReal x3284=(cj6*px);
IkReal x3285=((0.0318198051533946)*sj7);
IkReal x3286=((0.388908729652601)*x3283);
IkReal x3287=(cj6*x3276);
IkReal x3288=(py*x3285);
IkReal x3289=((0.388908729652601)*py*x3280);
IkReal x3290=(x3281*x3284);
IkReal x3291=(x3281*x3283);
IkReal x3292=(x3283*x3285);
IkReal x3293=(x3278*x3279);
IkReal x3294=(x3284*x3285);
IkReal x3295=(x3276*x3280);
IkReal x3296=(py*sj6*x3279);
IkReal x3297=(x3280*x3288);
IkReal x3298=(py*x3280*x3281);
IkReal x3299=(cj5*x3278*x3285);
IkReal x3300=(py*x3279*x3282);
IkReal x3301=(cj5*x3278*x3281);
IkReal x3302=(px*x3279*x3282);
IkReal x3303=(x3302+x3296);
IkReal x3304=(x3291+x3292+x3293+x3286);
IkReal x3305=(x3300+x3301+x3299+x3295);
IkReal x3306=(x3298+x3294+x3297+x3290+x3289+x3287);
CheckValue<IkReal> x3307 = IKatan2WithCheck(IkReal((x3304+x3303+(((-1.0)*x3305))+(((-1.0)*x3306)))),(x3306+x3304+(((-1.0)*x3305))+(((-1.0)*x3303))),IKFAST_ATAN2_MAGTHRESH);
if(!x3307.valid){
continue;
}
CheckValue<IkReal> x3308=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3277*(pz*pz)))+((pp*x3277)))),-1);
if(!x3308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3307.value)+(((1.5707963267949)*(x3308.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3309=IKsin(j4);
IkReal x3310=IKcos(j4);
IkReal x3311=((0.045)*cj7);
IkReal x3312=((0.707106781186548)*sj6);
IkReal x3313=((0.777817459305202)*sj5);
IkReal x3314=((0.3)*sj7);
IkReal x3315=(cj5*pz);
IkReal x3316=(cj5*cj6);
IkReal x3317=((0.045)*sj7);
IkReal x3318=((0.707106781186548)*sj5);
IkReal x3319=((0.707106781186548)*cj6);
IkReal x3320=((0.3)*cj7);
IkReal x3321=((0.0636396103067893)*px*sj6);
IkReal x3322=(px*x3309);
IkReal x3323=(cj6*pz*sj5);
IkReal x3324=(px*x3310);
IkReal x3325=(py*x3309);
IkReal x3326=((0.707106781186548)*x3322);
IkReal x3327=((0.707106781186548)*x3324);
IkReal x3328=((0.707106781186548)*py*x3310);
IkReal x3329=((0.707106781186548)*x3325);
IkReal x3330=((0.0636396103067893)*py*x3310);
IkReal x3331=(x3327+x3329);
evalcond[0]=((((-1.0)*x3328))+((sj6*x3314))+x3326+x3331+(((0.045)*sj6))+(((-1.0)*sj6*x3311)));
evalcond[1]=((-0.55)+(((-1.0)*x3320))+x3315+(((-1.0)*x3317))+(((-1.0)*x3318*x3322))+((py*x3310*x3318))+((x3318*x3325))+((x3318*x3324)));
evalcond[2]=((((-1.0)*x3328))+x3326+(((-1.0)*x3331))+((sj5*x3317))+((x3314*x3316))+(((0.55)*sj5))+(((-1.0)*x3311*x3316))+(((0.045)*x3316))+((sj5*x3320)));
evalcond[3]=(((cj5*py*x3310*x3312))+(((-1.0)*cj5*x3312*x3322))+((cj5*x3312*x3325))+((cj5*x3312*x3324))+(((-1.0)*pz*sj5*sj6))+(((-1.0)*py*x3310*x3319))+((x3319*x3322))+((x3319*x3325))+((x3319*x3324)));
evalcond[4]=((0.045)+x3323+x3314+(((-1.0)*x3311))+((x3316*x3326))+(((-1.0)*x3316*x3327))+(((-1.0)*x3316*x3328))+(((-1.0)*x3316*x3329))+((x3312*x3325))+((x3312*x3324))+((x3312*x3322))+(((-1.0)*py*x3310*x3312)));
evalcond[5]=((-0.2125)+(((1.1)*x3315))+(((-0.09)*x3323))+(((-1.0)*x3310*x3321))+(((0.0636396103067893)*x3316*x3325))+(((0.0636396103067893)*x3316*x3324))+((x3316*x3330))+((sj6*x3330))+(((-1.0)*pp))+((py*x3310*x3313))+(((-1.0)*x3313*x3322))+(((-0.0636396103067893)*x3316*x3322))+((x3313*x3325))+((x3313*x3324))+(((-0.0636396103067893)*sj6*x3325))+(((-1.0)*x3309*x3321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3332=((0.388908729652601)*py);
IkReal x3333=((0.388908729652601)*px);
IkReal x3334=(cj7*px);
IkReal x3335=((0.0318198051533946)*sj7);
IkReal x3336=((0.212132034355964)*x3334);
IkReal x3337=((0.212132034355964)*cj7*py);
IkReal x3338=(px*x3335);
IkReal x3339=(py*x3335);
IkReal x3340=((0.707106781186548)*cj5*pz);
IkReal x3341=((0.0318198051533946)*sj5*sj6);
IkReal x3342=(px*x3341);
IkReal x3343=(px*x3340);
IkReal x3344=(py*x3340);
IkReal x3345=(py*x3341);
IkReal x3346=((0.212132034355964)*sj5*sj6*sj7);
IkReal x3347=(px*x3346);
IkReal x3348=(cj7*x3345);
IkReal x3349=(x3334*x3341);
IkReal x3350=(py*x3346);
IkReal x3351=(x3348+x3343);
IkReal x3352=(x3342+x3347+x3344);
IkReal x3353=(x3349+x3332+x3337+x3339);
IkReal x3354=(x3345+x3350+x3333+x3336+x3338);
CheckValue<IkReal> x3355=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*sj5))+((sj5*(pz*pz))))),-1);
if(!x3355.valid){
continue;
}
CheckValue<IkReal> x3356 = IKatan2WithCheck(IkReal(((((-1.0)*x3353))+(((-1.0)*x3351))+x3354+x3352)),((((-1.0)*x3353))+(((-1.0)*x3354))+x3351+x3352),IKFAST_ATAN2_MAGTHRESH);
if(!x3356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3355.value)))+(x3356.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3357=IKsin(j4);
IkReal x3358=IKcos(j4);
IkReal x3359=((0.045)*cj7);
IkReal x3360=((0.707106781186548)*sj6);
IkReal x3361=((0.777817459305202)*sj5);
IkReal x3362=((0.3)*sj7);
IkReal x3363=(cj5*pz);
IkReal x3364=(cj5*cj6);
IkReal x3365=((0.045)*sj7);
IkReal x3366=((0.707106781186548)*sj5);
IkReal x3367=((0.707106781186548)*cj6);
IkReal x3368=((0.3)*cj7);
IkReal x3369=((0.0636396103067893)*px*sj6);
IkReal x3370=(px*x3357);
IkReal x3371=(cj6*pz*sj5);
IkReal x3372=(px*x3358);
IkReal x3373=(py*x3357);
IkReal x3374=((0.707106781186548)*x3370);
IkReal x3375=((0.707106781186548)*x3372);
IkReal x3376=((0.707106781186548)*py*x3358);
IkReal x3377=((0.707106781186548)*x3373);
IkReal x3378=((0.0636396103067893)*py*x3358);
IkReal x3379=(x3377+x3375);
evalcond[0]=((((-1.0)*sj6*x3359))+x3379+x3374+(((0.045)*sj6))+((sj6*x3362))+(((-1.0)*x3376)));
evalcond[1]=((-0.55)+(((-1.0)*x3366*x3370))+x3363+(((-1.0)*x3368))+(((-1.0)*x3365))+((py*x3358*x3366))+((x3366*x3373))+((x3366*x3372)));
evalcond[2]=((((-1.0)*x3359*x3364))+((x3362*x3364))+((sj5*x3368))+((sj5*x3365))+x3374+(((-1.0)*x3376))+(((-1.0)*x3379))+(((0.55)*sj5))+(((0.045)*x3364)));
evalcond[3]=(((cj5*py*x3358*x3360))+(((-1.0)*cj5*x3360*x3370))+((cj5*x3360*x3372))+((cj5*x3360*x3373))+((x3367*x3373))+((x3367*x3372))+((x3367*x3370))+(((-1.0)*py*x3358*x3367))+(((-1.0)*pz*sj5*sj6)));
evalcond[4]=((0.045)+(((-1.0)*x3359))+((x3360*x3370))+((x3360*x3373))+((x3360*x3372))+((x3364*x3374))+x3371+x3362+(((-1.0)*py*x3358*x3360))+(((-1.0)*x3364*x3377))+(((-1.0)*x3364*x3376))+(((-1.0)*x3364*x3375)));
evalcond[5]=((-0.2125)+(((-0.0636396103067893)*x3364*x3370))+(((0.0636396103067893)*x3364*x3373))+(((0.0636396103067893)*x3364*x3372))+(((1.1)*x3363))+((x3361*x3373))+((x3361*x3372))+((x3364*x3378))+((py*x3358*x3361))+(((-1.0)*x3357*x3369))+(((-1.0)*x3361*x3370))+(((-0.0636396103067893)*sj6*x3373))+(((-1.0)*pp))+(((-0.09)*x3371))+((sj6*x3378))+(((-1.0)*x3358*x3369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x186=((0.707106781186548)*cj6);
IkReal x187=(sj5*sj6);
IkReal x188=((0.707106781186548)*sj6);
IkReal x189=(cj5*cj7);
IkReal x190=(cj7*sj5);
IkReal x191=((1.0)*cj6);
IkReal x192=((1.0)*sj4);
IkReal x193=(cj5*sj7);
IkReal x194=(sj5*sj7);
IkReal x195=(cj7*x188);
IkReal x196=((0.707106781186548)*x194);
IkReal x197=(cj5*x188);
IkReal x198=((0.707106781186548)*x190);
IkReal x199=(sj7*x188);
IkReal x200=((-1.0)*sj4);
IkReal x201=(x186*x189);
IkReal x202=((((-1.0)*x197))+x186);
IkReal x203=(x186*x193);
IkReal x204=((((-1.0)*x186))+(((-1.0)*x197)));
IkReal x205=((((-1.0)*x191*x194))+x189);
IkReal x206=(cj4*x204);
IkReal x207=((((-1.0)*x190*x191))+(((-1.0)*x193)));
IkReal x208=(x198+x203);
IkReal x209=((((-1.0)*x196))+x195+x201);
IkReal x210=((((-1.0)*x195))+(((-1.0)*x196))+x201);
IkReal x211=((((-1.0)*x199))+x208);
IkReal x212=(x199+x208);
IkReal x213=(cj4*x211);
IkReal x214=(((cj4*x202))+((sj4*x204)));
IkReal x215=((((-1.0)*x192*x202))+x206);
IkReal x216=(((cj4*x209))+((sj4*x210)));
IkReal x217=(((cj4*x210))+((x200*x209)));
IkReal x218=(((cj4*x212))+((sj4*x211)));
IkReal x219=(x213+((x200*x212)));
new_r00=(((r20*x207))+((r00*x217))+((r10*x216)));
new_r01=(((r11*x216))+((r21*x207))+((r01*x217)));
new_r02=(((r22*x207))+((r12*x216))+((r02*x217)));
new_r10=(((r20*x187))+((r00*x215))+((r10*x214)));
new_r11=(((r21*x187))+((r11*x214))+((r01*((((x200*x202))+x206)))));
new_r12=(((r12*x214))+((r02*x215))+((r22*x187)));
new_r20=(((r20*x205))+((r00*x219))+((r10*x218)));
new_r21=(((r11*x218))+((r21*x205))+((r01*((x213+(((-1.0)*x192*x212)))))));
new_r22=(((r22*x205))+((r12*x218))+((r02*x219)));
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
cj9array[0]=new_r22;
if( cj9array[0] >= -1-IKFAST_SINCOS_THRESH && cj9array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j9valid[0] = j9valid[1] = true;
    j9array[0] = IKacos(cj9array[0]);
    sj9array[0] = IKsin(j9array[0]);
    cj9array[1] = cj9array[0];
    j9array[1] = -j9array[0];
    sj9array[1] = -sj9array[0];
}
else if( isnan(cj9array[0]) )
{
    // probably any value will work
    j9valid[0] = true;
    cj9array[0] = 1; sj9array[0] = 0; j9array[0] = 0;
}
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];

{
IkReal j8eval[2];
IkReal x220=((0.707106781186548)*cj6);
IkReal x221=(sj5*sj6);
IkReal x222=((0.707106781186548)*sj6);
IkReal x223=(cj5*cj7);
IkReal x224=(cj7*sj5);
IkReal x225=((1.0)*cj6);
IkReal x226=((1.0)*sj4);
IkReal x227=(cj5*sj7);
IkReal x228=(sj5*sj7);
IkReal x229=(cj7*x222);
IkReal x230=((0.707106781186548)*x228);
IkReal x231=(cj5*x222);
IkReal x232=((0.707106781186548)*x224);
IkReal x233=(sj7*x222);
IkReal x234=((-1.0)*sj4);
IkReal x235=(x220*x223);
IkReal x236=((((-1.0)*x231))+x220);
IkReal x237=(x220*x227);
IkReal x238=((((-1.0)*x231))+(((-1.0)*x220)));
IkReal x239=((((-1.0)*x225*x228))+x223);
IkReal x240=(cj4*x238);
IkReal x241=x207;
IkReal x242=(x232+x237);
IkReal x243=((((-1.0)*x230))+x229+x235);
IkReal x244=((((-1.0)*x230))+x235+(((-1.0)*x229)));
IkReal x245=((((-1.0)*x233))+x242);
IkReal x246=(x233+x242);
IkReal x247=(cj4*x245);
IkReal x248=(((sj4*x238))+((cj4*x236)));
IkReal x249=(x240+(((-1.0)*x226*x236)));
IkReal x250=(((cj4*x243))+((sj4*x244)));
IkReal x251=(((cj4*x244))+((x234*x243)));
IkReal x252=(((cj4*x246))+((sj4*x245)));
IkReal x253=(((x234*x246))+x247);
new_r00=(((r00*x251))+((r10*x250))+((r20*x241)));
new_r01=(((r11*x250))+((r01*x251))+((r21*x241)));
new_r02=(((r22*x241))+((r12*x250))+((r02*x251)));
new_r10=(((r20*x221))+((r00*x249))+((r10*x248)));
new_r11=(((r01*((((x234*x236))+x240))))+((r11*x248))+((r21*x221)));
new_r12=(((r02*x249))+((r12*x248))+((r22*x221)));
new_r20=(((r00*x253))+((r10*x252))+((r20*x239)));
new_r21=(((r11*x252))+((r01*(((((-1.0)*x226*x246))+x247))))+((r21*x239)));
new_r22=(((r12*x252))+((r02*x253))+((r22*x239)));
j8eval[0]=sj9;
j8eval[1]=IKsign(sj9);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x254=((0.707106781186548)*cj6);
IkReal x255=(sj5*sj6);
IkReal x256=((0.707106781186548)*sj6);
IkReal x257=(cj5*cj7);
IkReal x258=(cj7*sj5);
IkReal x259=((1.0)*cj6);
IkReal x260=((1.0)*sj4);
IkReal x261=(cj5*sj7);
IkReal x262=(sj5*sj7);
IkReal x263=(cj7*x256);
IkReal x264=((0.707106781186548)*x262);
IkReal x265=(cj5*x256);
IkReal x266=((0.707106781186548)*x258);
IkReal x267=(sj7*x256);
IkReal x268=((-1.0)*sj4);
IkReal x269=(x254*x257);
IkReal x270=(x254+(((-1.0)*x265)));
IkReal x271=(x254*x261);
IkReal x272=((((-1.0)*x265))+(((-1.0)*x254)));
IkReal x273=((((-1.0)*x259*x262))+x257);
IkReal x274=(cj4*x272);
IkReal x275=x207;
IkReal x276=(x266+x271);
IkReal x277=(x263+x269+(((-1.0)*x264)));
IkReal x278=(x269+(((-1.0)*x264))+(((-1.0)*x263)));
IkReal x279=(x276+(((-1.0)*x267)));
IkReal x280=(x267+x276);
IkReal x281=(cj4*x279);
IkReal x282=(((cj4*x270))+((sj4*x272)));
IkReal x283=(x274+(((-1.0)*x260*x270)));
IkReal x284=(((cj4*x277))+((sj4*x278)));
IkReal x285=(((cj4*x278))+((x268*x277)));
IkReal x286=(((sj4*x279))+((cj4*x280)));
IkReal x287=(((x268*x280))+x281);
new_r00=(((r00*x285))+((r10*x284))+((r20*x275)));
new_r01=(((r01*x285))+((r11*x284))+((r21*x275)));
new_r02=(((r22*x275))+((r02*x285))+((r12*x284)));
new_r10=(((r00*x283))+((r10*x282))+((r20*x255)));
new_r11=(((r21*x255))+((r11*x282))+((r01*((x274+((x268*x270)))))));
new_r12=(((r02*x283))+((r12*x282))+((r22*x255)));
new_r20=(((r00*x287))+((r10*x286))+((r20*x273)));
new_r21=(((r11*x286))+((r21*x273))+((r01*(((((-1.0)*x260*x280))+x281)))));
new_r22=(((r22*x273))+((r02*x287))+((r12*x286)));
j8eval[0]=sj9;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x289 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x289.valid){
continue;
}
IkReal x288=x289.value;
j8array[0]=((-1.0)*x288);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x288)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j8))))+((new_r12*(IKcos(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x290=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj8*x290))+(((-1.0)*new_r00*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj8*new_r00))+(((-1.0)*sj8*x290)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj8*x290))+(((-1.0)*new_r00*sj8))))+IKsqr((((cj8*new_r00))+(((-1.0)*sj8*x290))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*cj8*x290))+(((-1.0)*new_r00*sj8))), (((cj8*new_r00))+(((-1.0)*sj8*x290))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x291=IKsin(j10);
IkReal x292=IKcos(j10);
IkReal x293=((1.0)*sj8);
IkReal x294=((1.0)*x292);
IkReal x295=(sj8*x291);
IkReal x296=(cj8*x291);
IkReal x297=(cj8*x294);
evalcond[0]=(((new_r11*sj8))+x291+((cj8*new_r01)));
evalcond[1]=(((sj8*x292))+x296+new_r01);
evalcond[2]=(((new_r10*sj8))+(((-1.0)*x294))+((cj8*new_r00)));
evalcond[3]=((((-1.0)*x291))+((cj8*new_r10))+(((-1.0)*new_r00*x293)));
evalcond[4]=((((-1.0)*new_r01*x293))+(((-1.0)*x294))+((cj8*new_r11)));
evalcond[5]=((((-1.0)*x297))+x295+new_r00);
evalcond[6]=((((-1.0)*x297))+x295+new_r11);
evalcond[7]=((((-1.0)*x296))+new_r10+(((-1.0)*x292*x293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j10;
vinfos[6].indices[0] = _ij10[0];
vinfos[6].indices[1] = _ij10[1];
vinfos[6].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x299 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x299.valid){
continue;
}
IkReal x298=x299.value;
j8array[0]=((-1.0)*x298);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x298)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j8))))+((new_r12*(IKcos(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x300=((1.0)*new_r00);
if( IKabs((((cj8*new_r01))+(((-1.0)*sj8*x300)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj8))+(((-1.0)*cj8*x300)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj8*new_r01))+(((-1.0)*sj8*x300))))+IKsqr(((((-1.0)*new_r01*sj8))+(((-1.0)*cj8*x300))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((cj8*new_r01))+(((-1.0)*sj8*x300))), ((((-1.0)*new_r01*sj8))+(((-1.0)*cj8*x300))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x301=IKsin(j10);
IkReal x302=IKcos(j10);
IkReal x303=((1.0)*sj8);
IkReal x304=((1.0)*x301);
IkReal x305=(sj8*x302);
IkReal x306=((1.0)*x302);
IkReal x307=(cj8*x304);
evalcond[0]=(((new_r10*sj8))+x302+((cj8*new_r00)));
evalcond[1]=(((new_r11*sj8))+((cj8*new_r01))+(((-1.0)*x304)));
evalcond[2]=(((sj8*x301))+((cj8*x302))+new_r00);
evalcond[3]=(((cj8*new_r10))+(((-1.0)*new_r00*x303))+(((-1.0)*x304)));
evalcond[4]=(((cj8*new_r11))+(((-1.0)*new_r01*x303))+(((-1.0)*x306)));
evalcond[5]=(x305+new_r01+(((-1.0)*x307)));
evalcond[6]=(x305+new_r10+(((-1.0)*x307)));
evalcond[7]=((((-1.0)*x301*x303))+(((-1.0)*cj8*x306))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j10;
vinfos[6].indices[0] = _ij10[0];
vinfos[6].indices[1] = _ij10[1];
vinfos[6].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8, j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x309=IKPowWithIntegerCheck(sj9,-1);
if(!x309.valid){
continue;
}
IkReal x308=x309.value;
CheckValue<IkReal> x310=IKPowWithIntegerCheck(new_r12,-1);
if(!x310.valid){
continue;
}
if( IKabs((x308*(x310.value)*(((1.0)+(((-1.0)*(cj9*cj9)))+(((-1.0)*(new_r02*new_r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x308)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x308*(x310.value)*(((1.0)+(((-1.0)*(cj9*cj9)))+(((-1.0)*(new_r02*new_r02)))))))+IKsqr((new_r02*x308))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((x308*(x310.value)*(((1.0)+(((-1.0)*(cj9*cj9)))+(((-1.0)*(new_r02*new_r02)))))), (new_r02*x308));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x311=IKcos(j8);
IkReal x312=IKsin(j8);
IkReal x313=((1.0)*cj9);
IkReal x314=((1.0)*sj9);
IkReal x315=((1.0)*x312);
IkReal x316=(new_r12*x312);
IkReal x317=(new_r02*x311);
evalcond[0]=(new_r02+(((-1.0)*x311*x314)));
evalcond[1]=((((-1.0)*x312*x314))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x315))+((new_r12*x311)));
evalcond[3]=(x317+x316+(((-1.0)*x314)));
evalcond[4]=(((cj9*x316))+((cj9*x317))+(((-1.0)*new_r22*x314)));
evalcond[5]=((((-1.0)*new_r20*x313))+(((-1.0)*new_r10*x312*x314))+(((-1.0)*new_r00*x311*x314)));
evalcond[6]=((((-1.0)*new_r21*x313))+(((-1.0)*new_r01*x311*x314))+(((-1.0)*new_r11*x312*x314)));
evalcond[7]=((1.0)+(((-1.0)*new_r22*x313))+(((-1.0)*x314*x317))+(((-1.0)*x314*x316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[2];
IkReal x318=((0.707106781186548)*cj6);
IkReal x319=(sj5*sj6);
IkReal x320=((0.707106781186548)*sj6);
IkReal x321=(cj5*cj7);
IkReal x322=(cj7*sj5);
IkReal x323=((1.0)*cj6);
IkReal x324=((1.0)*sj4);
IkReal x325=(cj5*sj7);
IkReal x326=(sj5*sj7);
IkReal x327=(cj7*x320);
IkReal x328=((0.707106781186548)*x326);
IkReal x329=(cj5*x320);
IkReal x330=((0.707106781186548)*x322);
IkReal x331=(sj7*x320);
IkReal x332=((-1.0)*sj4);
IkReal x333=(x318*x321);
IkReal x334=((((-1.0)*x329))+x318);
IkReal x335=(x318*x325);
IkReal x336=((((-1.0)*x329))+(((-1.0)*x318)));
IkReal x337=((((-1.0)*x323*x326))+x321);
IkReal x338=(cj4*x336);
IkReal x339=x207;
IkReal x340=(x330+x335);
IkReal x341=((((-1.0)*x328))+x333+x327);
IkReal x342=((((-1.0)*x327))+(((-1.0)*x328))+x333);
IkReal x343=(x340+(((-1.0)*x331)));
IkReal x344=(x331+x340);
IkReal x345=(cj4*x343);
IkReal x346=(((sj4*x336))+((cj4*x334)));
IkReal x347=((((-1.0)*x324*x334))+x338);
IkReal x348=(((cj4*x341))+((sj4*x342)));
IkReal x349=(((cj4*x342))+((x332*x341)));
IkReal x350=(((cj4*x344))+((sj4*x343)));
IkReal x351=(x345+((x332*x344)));
new_r00=(((r00*x349))+((r20*x339))+((r10*x348)));
new_r01=(((r01*x349))+((r21*x339))+((r11*x348)));
new_r02=(((r22*x339))+((r02*x349))+((r12*x348)));
new_r10=(((r00*x347))+((r20*x319))+((r10*x346)));
new_r11=(((r01*((((x332*x334))+x338))))+((r11*x346))+((r21*x319)));
new_r12=(((r02*x347))+((r22*x319))+((r12*x346)));
new_r20=(((r00*x351))+((r20*x337))+((r10*x350)));
new_r21=(((r01*(((((-1.0)*x324*x344))+x345))))+((r21*x337))+((r11*x350)));
new_r22=(((r22*x337))+((r12*x350))+((r02*x351)));
j10eval[0]=sj9;
j10eval[1]=IKsign(sj9);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x352=((0.707106781186548)*cj6);
IkReal x353=(sj5*sj6);
IkReal x354=((0.707106781186548)*sj6);
IkReal x355=(cj5*cj7);
IkReal x356=(cj7*sj5);
IkReal x357=((1.0)*cj6);
IkReal x358=((1.0)*sj4);
IkReal x359=(cj5*sj7);
IkReal x360=(sj5*sj7);
IkReal x361=(cj7*x354);
IkReal x362=((0.707106781186548)*x360);
IkReal x363=(cj5*x354);
IkReal x364=((0.707106781186548)*x356);
IkReal x365=(sj7*x354);
IkReal x366=((-1.0)*sj4);
IkReal x367=(x352*x355);
IkReal x368=((((-1.0)*x363))+x352);
IkReal x369=(x352*x359);
IkReal x370=((((-1.0)*x363))+(((-1.0)*x352)));
IkReal x371=(x355+(((-1.0)*x357*x360)));
IkReal x372=(cj4*x370);
IkReal x373=x207;
IkReal x374=(x369+x364);
IkReal x375=((((-1.0)*x362))+x361+x367);
IkReal x376=((((-1.0)*x362))+(((-1.0)*x361))+x367);
IkReal x377=((((-1.0)*x365))+x374);
IkReal x378=(x374+x365);
IkReal x379=(cj4*x377);
IkReal x380=(((sj4*x370))+((cj4*x368)));
IkReal x381=((((-1.0)*x358*x368))+x372);
IkReal x382=(((sj4*x376))+((cj4*x375)));
IkReal x383=(((x366*x375))+((cj4*x376)));
IkReal x384=(((sj4*x377))+((cj4*x378)));
IkReal x385=(((x366*x378))+x379);
new_r00=(((r20*x373))+((r10*x382))+((r00*x383)));
new_r01=(((r11*x382))+((r21*x373))+((r01*x383)));
new_r02=(((r12*x382))+((r02*x383))+((r22*x373)));
new_r10=(((r10*x380))+((r00*x381))+((r20*x353)));
new_r11=(((r11*x380))+((r21*x353))+((r01*((((x366*x368))+x372)))));
new_r12=(((r12*x380))+((r02*x381))+((r22*x353)));
new_r20=(((r20*x371))+((r10*x384))+((r00*x385)));
new_r21=(((r11*x384))+((r01*(((((-1.0)*x358*x378))+x379))))+((r21*x371)));
new_r22=(((r12*x384))+((r02*x385))+((r22*x371)));
j10eval[0]=sj8;
j10eval[1]=sj9;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x386=((0.707106781186548)*cj6);
IkReal x387=(sj5*sj6);
IkReal x388=((0.707106781186548)*sj6);
IkReal x389=(cj5*cj7);
IkReal x390=(cj7*sj5);
IkReal x391=((1.0)*cj6);
IkReal x392=((1.0)*sj4);
IkReal x393=(cj5*sj7);
IkReal x394=(sj5*sj7);
IkReal x395=(cj7*x388);
IkReal x396=((0.707106781186548)*x394);
IkReal x397=(cj5*x388);
IkReal x398=((0.707106781186548)*x390);
IkReal x399=(sj7*x388);
IkReal x400=((-1.0)*sj4);
IkReal x401=(x386*x389);
IkReal x402=((((-1.0)*x397))+x386);
IkReal x403=(x386*x393);
IkReal x404=((((-1.0)*x397))+(((-1.0)*x386)));
IkReal x405=(x389+(((-1.0)*x391*x394)));
IkReal x406=(cj4*x404);
IkReal x407=x207;
IkReal x408=(x398+x403);
IkReal x409=((((-1.0)*x396))+x395+x401);
IkReal x410=((((-1.0)*x395))+(((-1.0)*x396))+x401);
IkReal x411=((((-1.0)*x399))+x408);
IkReal x412=(x399+x408);
IkReal x413=(cj4*x411);
IkReal x414=(((cj4*x402))+((sj4*x404)));
IkReal x415=((((-1.0)*x392*x402))+x406);
IkReal x416=(((cj4*x409))+((sj4*x410)));
IkReal x417=(((cj4*x410))+((x400*x409)));
IkReal x418=(((cj4*x412))+((sj4*x411)));
IkReal x419=(x413+((x400*x412)));
new_r00=(((r00*x417))+((r10*x416))+((r20*x407)));
new_r01=(((r11*x416))+((r01*x417))+((r21*x407)));
new_r02=(((r12*x416))+((r22*x407))+((r02*x417)));
new_r10=(((r20*x387))+((r00*x415))+((r10*x414)));
new_r11=(((r11*x414))+((r21*x387))+((r01*((x406+((x400*x402)))))));
new_r12=(((r22*x387))+((r12*x414))+((r02*x415)));
new_r20=(((r00*x419))+((r10*x418))+((r20*x405)));
new_r21=(((r01*(((((-1.0)*x392*x412))+x413))))+((r11*x418))+((r21*x405)));
new_r22=(((r12*x418))+((r22*x405))+((r02*x419)));
j10eval[0]=cj8;
j10eval[1]=cj9;
j10eval[2]=sj9;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x420=(new_r22+(((-1.0)*cj9)));
IkReal x421=((((-1.0)*sj9))+new_r12);
IkReal x422=((1.0)*sj9);
IkReal x423=((1.0)*cj9);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=x420;
evalcond[2]=x420;
evalcond[3]=new_r02;
evalcond[4]=x421;
evalcond[5]=x421;
evalcond[6]=((((-1.0)*new_r22*x422))+((cj9*new_r12)));
evalcond[7]=((((-1.0)*new_r10*x422))+(((-1.0)*new_r20*x423)));
evalcond[8]=((((-1.0)*new_r11*x422))+(((-1.0)*new_r21*x423)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x423))+(((-1.0)*new_r12*x422)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x424 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x424.valid){
continue;
}
CheckValue<IkReal> x425=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x425.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x424.value)+(((1.5707963267949)*(x425.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x426=IKsin(j10);
IkReal x427=IKcos(j10);
IkReal x428=((1.0)*new_r12);
IkReal x429=((1.0)*x427);
IkReal x430=((1.0)*x426);
evalcond[0]=(((new_r12*x427))+new_r20);
evalcond[1]=(((new_r22*x426))+new_r11);
evalcond[2]=((((-1.0)*x426*x428))+new_r21);
evalcond[3]=((((-1.0)*new_r22*x429))+new_r10);
evalcond[4]=((((-1.0)*x430))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x429))+(((-1.0)*new_r01)));
evalcond[6]=(x426+((new_r11*new_r22))+(((-1.0)*new_r21*x428)));
evalcond[7]=((((-1.0)*x429))+((new_r10*new_r22))+(((-1.0)*new_r20*x428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j10;
vinfos[6].indices[0] = _ij10[0];
vinfos[6].indices[1] = _ij10[1];
vinfos[6].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x431=(new_r22+(((-1.0)*cj9)));
IkReal x432=((1.0)*cj9);
IkReal x433=((1.0)*sj9);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=x431;
evalcond[2]=x431;
evalcond[3]=new_r02;
evalcond[4]=(sj9+new_r12);
evalcond[5]=((((-1.0)*x433))+(((-1.0)*new_r12)));
evalcond[6]=((((-1.0)*new_r12*x432))+(((-1.0)*new_r22*x433)));
evalcond[7]=(((new_r10*sj9))+(((-1.0)*new_r20*x432)));
evalcond[8]=(((new_r11*sj9))+(((-1.0)*new_r21*x432)));
evalcond[9]=((1.0)+((new_r12*sj9))+(((-1.0)*new_r22*x432)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(new_r00, new_r01);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x434=IKsin(j10);
IkReal x435=IKcos(j10);
IkReal x436=((1.0)*new_r11);
IkReal x437=((1.0)*new_r10);
IkReal x438=((1.0)*x435);
evalcond[0]=(((new_r12*x434))+new_r21);
evalcond[1]=((((-1.0)*x434))+new_r00);
evalcond[2]=((((-1.0)*x438))+new_r01);
evalcond[3]=((((-1.0)*new_r12*x438))+new_r20);
evalcond[4]=((((-1.0)*x436))+((new_r22*x434)));
evalcond[5]=((((-1.0)*x437))+(((-1.0)*new_r22*x438)));
evalcond[6]=(((new_r12*new_r21))+x434+(((-1.0)*new_r22*x436)));
evalcond[7]=((((-1.0)*x438))+((new_r12*new_r20))+(((-1.0)*new_r22*x437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j10;
vinfos[6].indices[0] = _ij10[0];
vinfos[6].indices[1] = _ij10[1];
vinfos[6].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x439=((1.0)*sj8);
IkReal x440=((1.0)*cj8);
IkReal x441=(((cj8*new_r12))+(((-1.0)*new_r02*x439)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x440))+new_r02);
evalcond[3]=((((-1.0)*x439))+new_r12);
evalcond[4]=x441;
evalcond[5]=x441;
evalcond[6]=((-1.0)+((new_r12*sj8))+((cj8*new_r02)));
evalcond[7]=(((new_r11*sj8))+((cj8*new_r01)));
evalcond[8]=(((new_r10*sj8))+((cj8*new_r00)));
evalcond[9]=((((-1.0)*new_r00*x440))+(((-1.0)*new_r10*x439)));
evalcond[10]=((((-1.0)*new_r01*x440))+(((-1.0)*new_r11*x439)));
evalcond[11]=((1.0)+(((-1.0)*new_r02*x440))+(((-1.0)*new_r12*x439)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x442=IKcos(j10);
IkReal x443=IKsin(j10);
IkReal x444=((1.0)*new_r12);
IkReal x445=((1.0)*x443);
IkReal x446=((1.0)*x442);
evalcond[0]=(x442+new_r20);
evalcond[1]=((((-1.0)*x445))+new_r21);
evalcond[2]=(((new_r12*x442))+new_r01);
evalcond[3]=(((new_r12*x443))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x446))+new_r11);
evalcond[5]=((((-1.0)*new_r02*x445))+new_r10);
evalcond[6]=((((-1.0)*x445))+(((-1.0)*new_r00*x444))+((new_r02*new_r10)));
evalcond[7]=((((-1.0)*x446))+(((-1.0)*new_r01*x444))+((new_r02*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j10;
vinfos[6].indices[0] = _ij10[0];
vinfos[6].indices[1] = _ij10[1];
vinfos[6].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x447=((((-1.0)*new_r02*sj8))+((cj8*new_r12)));
IkReal x448=(((new_r10*sj8))+((cj8*new_r00)));
IkReal x449=(((new_r11*sj8))+((cj8*new_r01)));
IkReal x450=((1.0)+((new_r12*sj8))+((cj8*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj8+new_r02);
evalcond[3]=(sj8+new_r12);
evalcond[4]=x447;
evalcond[5]=x447;
evalcond[6]=x450;
evalcond[7]=x449;
evalcond[8]=x448;
evalcond[9]=x448;
evalcond[10]=x449;
evalcond[11]=x450;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x451=IKcos(j10);
IkReal x452=IKsin(j10);
IkReal x453=((1.0)*new_r02);
IkReal x454=((1.0)*x451);
IkReal x455=((1.0)*x452);
evalcond[0]=(x452+new_r21);
evalcond[1]=((((-1.0)*x454))+new_r20);
evalcond[2]=(((new_r02*x451))+new_r11);
evalcond[3]=(((new_r02*x452))+new_r10);
evalcond[4]=(new_r01+(((-1.0)*new_r12*x454)));
evalcond[5]=(new_r00+(((-1.0)*new_r12*x455)));
evalcond[6]=((((-1.0)*new_r10*x453))+((new_r00*new_r12))+(((-1.0)*x455)));
evalcond[7]=((((-1.0)*new_r11*x453))+((new_r01*new_r12))+(((-1.0)*x454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j10;
vinfos[6].indices[0] = _ij10[0];
vinfos[6].indices[1] = _ij10[1];
vinfos[6].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x456=((((-1.0)*new_r02*sj8))+((cj8*new_r12)));
IkReal x457=(((new_r12*sj8))+((cj8*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x456;
evalcond[7]=x456;
evalcond[8]=x457;
evalcond[9]=x457;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x458=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj8*x458))+(((-1.0)*new_r00*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj8*x458))+((cj8*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj8*x458))+(((-1.0)*new_r00*sj8))))+IKsqr(((((-1.0)*sj8*x458))+((cj8*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*cj8*x458))+(((-1.0)*new_r00*sj8))), ((((-1.0)*sj8*x458))+((cj8*new_r00))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x459=IKsin(j10);
IkReal x460=IKcos(j10);
IkReal x461=((1.0)*sj8);
IkReal x462=((1.0)*x460);
IkReal x463=(sj8*x459);
IkReal x464=(cj8*x459);
IkReal x465=(cj8*x462);
evalcond[0]=(((new_r11*sj8))+((cj8*new_r01))+x459);
evalcond[1]=(x464+new_r01+((sj8*x460)));
evalcond[2]=(((new_r10*sj8))+(((-1.0)*x462))+((cj8*new_r00)));
evalcond[3]=((((-1.0)*x459))+((cj8*new_r10))+(((-1.0)*new_r00*x461)));
evalcond[4]=((((-1.0)*new_r01*x461))+(((-1.0)*x462))+((cj8*new_r11)));
evalcond[5]=((((-1.0)*x465))+x463+new_r00);
evalcond[6]=((((-1.0)*x465))+x463+new_r11);
evalcond[7]=((((-1.0)*x460*x461))+(((-1.0)*x464))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j10;
vinfos[6].indices[0] = _ij10[0];
vinfos[6].indices[1] = _ij10[1];
vinfos[6].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x466=((1.0)*new_r02);
IkReal x467=(new_r12*sj8);
IkReal x468=((((-1.0)*sj8*x466))+((cj8*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x468;
evalcond[7]=x468;
evalcond[8]=(((cj8*new_r02))+x467);
evalcond[9]=((((-1.0)*x467))+(((-1.0)*cj8*x466)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x469=((1.0)*new_r00);
if( IKabs(((((-1.0)*sj8*x469))+((cj8*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj8))+(((-1.0)*cj8*x469)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj8*x469))+((cj8*new_r01))))+IKsqr(((((-1.0)*new_r01*sj8))+(((-1.0)*cj8*x469))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*sj8*x469))+((cj8*new_r01))), ((((-1.0)*new_r01*sj8))+(((-1.0)*cj8*x469))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x470=IKsin(j10);
IkReal x471=IKcos(j10);
IkReal x472=((1.0)*sj8);
IkReal x473=((1.0)*x470);
IkReal x474=(sj8*x471);
IkReal x475=((1.0)*x471);
IkReal x476=(cj8*x473);
evalcond[0]=(((new_r10*sj8))+((cj8*new_r00))+x471);
evalcond[1]=(((new_r11*sj8))+(((-1.0)*x473))+((cj8*new_r01)));
evalcond[2]=(((cj8*x471))+((sj8*x470))+new_r00);
evalcond[3]=((((-1.0)*new_r00*x472))+(((-1.0)*x473))+((cj8*new_r10)));
evalcond[4]=((((-1.0)*x475))+(((-1.0)*new_r01*x472))+((cj8*new_r11)));
evalcond[5]=((((-1.0)*x476))+x474+new_r01);
evalcond[6]=((((-1.0)*x476))+x474+new_r10);
evalcond[7]=((((-1.0)*cj8*x475))+new_r11+(((-1.0)*x470*x472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j10;
vinfos[6].indices[0] = _ij10[0];
vinfos[6].indices[1] = _ij10[1];
vinfos[6].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x477=(new_r22+(((-1.0)*cj9)));
IkReal x478=((((-1.0)*sj9))+new_r02);
IkReal x479=((1.0)*sj9);
IkReal x480=((1.0)*cj9);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=x477;
evalcond[2]=x477;
evalcond[3]=x478;
evalcond[4]=new_r12;
evalcond[5]=x478;
evalcond[6]=((((-1.0)*new_r22*x479))+((cj9*new_r02)));
evalcond[7]=((((-1.0)*new_r00*x479))+(((-1.0)*new_r20*x480)));
evalcond[8]=((((-1.0)*new_r21*x480))+(((-1.0)*new_r01*x479)));
evalcond[9]=((1.0)+(((-1.0)*new_r02*x479))+(((-1.0)*new_r22*x480)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(new_r10, new_r11);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x481=IKcos(j10);
IkReal x482=IKsin(j10);
IkReal x483=((1.0)*new_r02);
IkReal x484=((1.0)*x481);
evalcond[0]=(((new_r02*x481))+new_r20);
evalcond[1]=((((-1.0)*x482))+new_r10);
evalcond[2]=((((-1.0)*x484))+new_r11);
evalcond[3]=(new_r01+((new_r22*x482)));
evalcond[4]=((((-1.0)*x482*x483))+new_r21);
evalcond[5]=(new_r00+(((-1.0)*new_r22*x484)));
evalcond[6]=((((-1.0)*new_r21*x483))+((new_r01*new_r22))+x482);
evalcond[7]=((((-1.0)*x484))+((new_r00*new_r22))+(((-1.0)*new_r20*x483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j10;
vinfos[6].indices[0] = _ij10[0];
vinfos[6].indices[1] = _ij10[1];
vinfos[6].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x485=(new_r22+(((-1.0)*cj9)));
IkReal x486=((1.0)*cj9);
IkReal x487=((1.0)*sj9);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=x485;
evalcond[2]=x485;
evalcond[3]=(sj9+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*x487))+(((-1.0)*new_r02)));
evalcond[6]=((((-1.0)*new_r02*x486))+(((-1.0)*new_r22*x487)));
evalcond[7]=((((-1.0)*new_r20*x486))+((new_r00*sj9)));
evalcond[8]=((((-1.0)*new_r21*x486))+((new_r01*sj9)));
evalcond[9]=((1.0)+((new_r02*sj9))+(((-1.0)*new_r22*x486)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x488 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x488.valid){
continue;
}
CheckValue<IkReal> x489=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x489.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x488.value)+(((1.5707963267949)*(x489.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x490=IKsin(j10);
IkReal x491=IKcos(j10);
IkReal x492=((1.0)*new_r22);
IkReal x493=((1.0)*x491);
evalcond[0]=(((new_r02*x490))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x493))+new_r20);
evalcond[2]=((((-1.0)*x490))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x493))+(((-1.0)*new_r11)));
evalcond[4]=(((new_r22*x490))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*x491*x492))+(((-1.0)*new_r00)));
evalcond[6]=((((-1.0)*new_r01*x492))+x490+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*new_r00*x492))+(((-1.0)*x493))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j10;
vinfos[6].indices[0] = _ij10[0];
vinfos[6].indices[1] = _ij10[1];
vinfos[6].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x495=IKPowWithIntegerCheck(sj9,-1);
if(!x495.valid){
continue;
}
IkReal x494=x495.value;
CheckValue<IkReal> x496=IKPowWithIntegerCheck(cj8,-1);
if(!x496.valid){
continue;
}
CheckValue<IkReal> x497=IKPowWithIntegerCheck(cj9,-1);
if(!x497.valid){
continue;
}
if( IKabs((x494*(x496.value)*(x497.value)*((((new_r20*sj8))+(((-1.0)*new_r01*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x494)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x494*(x496.value)*(x497.value)*((((new_r20*sj8))+(((-1.0)*new_r01*sj9))))))+IKsqr(((-1.0)*new_r20*x494))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((x494*(x496.value)*(x497.value)*((((new_r20*sj8))+(((-1.0)*new_r01*sj9))))), ((-1.0)*new_r20*x494));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[12];
IkReal x498=IKsin(j10);
IkReal x499=IKcos(j10);
IkReal x500=(cj9*sj8);
IkReal x501=((1.0)*sj9);
IkReal x502=((1.0)*sj8);
IkReal x503=((1.0)*cj8);
IkReal x504=(cj8*new_r00);
IkReal x505=(cj8*new_r01);
IkReal x506=((1.0)*x499);
IkReal x507=(cj9*x498);
IkReal x508=(cj9*x506);
evalcond[0]=(new_r20+((sj9*x499)));
evalcond[1]=(new_r21+(((-1.0)*x498*x501)));
evalcond[2]=(((new_r11*sj8))+x505+x507);
evalcond[3]=((((-1.0)*new_r00*x502))+((cj8*new_r10))+(((-1.0)*x498)));
evalcond[4]=((((-1.0)*new_r01*x502))+(((-1.0)*x506))+((cj8*new_r11)));
evalcond[5]=(((cj8*x507))+((sj8*x499))+new_r01);
evalcond[6]=(((new_r10*sj8))+(((-1.0)*x508))+x504);
evalcond[7]=(((sj8*x498))+(((-1.0)*cj9*x499*x503))+new_r00);
evalcond[8]=((((-1.0)*x499*x503))+((x498*x500))+new_r11);
evalcond[9]=(new_r10+(((-1.0)*x498*x503))+(((-1.0)*x500*x506)));
evalcond[10]=((((-1.0)*new_r21*x501))+((cj9*x505))+((new_r11*x500))+x498);
evalcond[11]=(((cj9*x504))+(((-1.0)*new_r20*x501))+(((-1.0)*x506))+((new_r10*x500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j10;
vinfos[6].indices[0] = _ij10[0];
vinfos[6].indices[1] = _ij10[1];
vinfos[6].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x510=IKPowWithIntegerCheck(sj9,-1);
if(!x510.valid){
continue;
}
IkReal x509=x510.value;
CheckValue<IkReal> x511=IKPowWithIntegerCheck(sj8,-1);
if(!x511.valid){
continue;
}
if( IKabs((x509*(x511.value)*(((((-1.0)*cj8*cj9*new_r20))+(((-1.0)*new_r00*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x509)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x509*(x511.value)*(((((-1.0)*cj8*cj9*new_r20))+(((-1.0)*new_r00*sj9))))))+IKsqr(((-1.0)*new_r20*x509))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((x509*(x511.value)*(((((-1.0)*cj8*cj9*new_r20))+(((-1.0)*new_r00*sj9))))), ((-1.0)*new_r20*x509));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[12];
IkReal x512=IKsin(j10);
IkReal x513=IKcos(j10);
IkReal x514=(cj9*sj8);
IkReal x515=((1.0)*sj9);
IkReal x516=((1.0)*sj8);
IkReal x517=((1.0)*cj8);
IkReal x518=(cj8*new_r00);
IkReal x519=(cj8*new_r01);
IkReal x520=((1.0)*x513);
IkReal x521=(cj9*x512);
IkReal x522=(cj9*x520);
evalcond[0]=(((sj9*x513))+new_r20);
evalcond[1]=((((-1.0)*x512*x515))+new_r21);
evalcond[2]=(((new_r11*sj8))+x521+x519);
evalcond[3]=((((-1.0)*x512))+((cj8*new_r10))+(((-1.0)*new_r00*x516)));
evalcond[4]=((((-1.0)*x520))+((cj8*new_r11))+(((-1.0)*new_r01*x516)));
evalcond[5]=(((sj8*x513))+((cj8*x521))+new_r01);
evalcond[6]=(((new_r10*sj8))+(((-1.0)*x522))+x518);
evalcond[7]=(((sj8*x512))+(((-1.0)*cj9*x513*x517))+new_r00);
evalcond[8]=((((-1.0)*x513*x517))+((x512*x514))+new_r11);
evalcond[9]=((((-1.0)*x512*x517))+new_r10+(((-1.0)*x514*x520)));
evalcond[10]=(((new_r11*x514))+x512+(((-1.0)*new_r21*x515))+((cj9*x519)));
evalcond[11]=(((new_r10*x514))+(((-1.0)*x520))+((cj9*x518))+(((-1.0)*new_r20*x515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j10;
vinfos[6].indices[0] = _ij10[0];
vinfos[6].indices[1] = _ij10[1];
vinfos[6].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x523 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x523.valid){
continue;
}
CheckValue<IkReal> x524=IKPowWithIntegerCheck(IKsign(sj9),-1);
if(!x524.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x523.value)+(((1.5707963267949)*(x524.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[12];
IkReal x525=IKsin(j10);
IkReal x526=IKcos(j10);
IkReal x527=(cj9*sj8);
IkReal x528=((1.0)*sj9);
IkReal x529=((1.0)*sj8);
IkReal x530=((1.0)*cj8);
IkReal x531=(cj8*new_r00);
IkReal x532=(cj8*new_r01);
IkReal x533=((1.0)*x526);
IkReal x534=(cj9*x525);
IkReal x535=(cj9*x533);
evalcond[0]=(((sj9*x526))+new_r20);
evalcond[1]=((((-1.0)*x525*x528))+new_r21);
evalcond[2]=(((new_r11*sj8))+x532+x534);
evalcond[3]=((((-1.0)*x525))+(((-1.0)*new_r00*x529))+((cj8*new_r10)));
evalcond[4]=((((-1.0)*x533))+((cj8*new_r11))+(((-1.0)*new_r01*x529)));
evalcond[5]=(((sj8*x526))+((cj8*x534))+new_r01);
evalcond[6]=(((new_r10*sj8))+(((-1.0)*x535))+x531);
evalcond[7]=(((sj8*x525))+new_r00+(((-1.0)*cj9*x526*x530)));
evalcond[8]=((((-1.0)*x526*x530))+((x525*x527))+new_r11);
evalcond[9]=((((-1.0)*x525*x530))+(((-1.0)*x527*x533))+new_r10);
evalcond[10]=(((new_r11*x527))+(((-1.0)*new_r21*x528))+((cj9*x532))+x525);
evalcond[11]=((((-1.0)*new_r20*x528))+(((-1.0)*x533))+((new_r10*x527))+((cj9*x531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j10;
vinfos[6].indices[0] = _ij10[0];
vinfos[6].indices[1] = _ij10[1];
vinfos[6].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x536 = IKatan2WithCheck(IkReal(new_r12),new_r02,IKFAST_ATAN2_MAGTHRESH);
if(!x536.valid){
continue;
}
CheckValue<IkReal> x537=IKPowWithIntegerCheck(IKsign(sj9),-1);
if(!x537.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x536.value)+(((1.5707963267949)*(x537.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x538=IKcos(j8);
IkReal x539=IKsin(j8);
IkReal x540=((1.0)*cj9);
IkReal x541=((1.0)*sj9);
IkReal x542=((1.0)*x539);
IkReal x543=(new_r12*x539);
IkReal x544=(new_r02*x538);
evalcond[0]=((((-1.0)*x538*x541))+new_r02);
evalcond[1]=((((-1.0)*x539*x541))+new_r12);
evalcond[2]=(((new_r12*x538))+(((-1.0)*new_r02*x542)));
evalcond[3]=((((-1.0)*x541))+x544+x543);
evalcond[4]=((((-1.0)*new_r22*x541))+((cj9*x544))+((cj9*x543)));
evalcond[5]=((((-1.0)*new_r20*x540))+(((-1.0)*new_r10*x539*x541))+(((-1.0)*new_r00*x538*x541)));
evalcond[6]=((((-1.0)*new_r01*x538*x541))+(((-1.0)*new_r21*x540))+(((-1.0)*new_r11*x539*x541)));
evalcond[7]=((1.0)+(((-1.0)*x541*x543))+(((-1.0)*x541*x544))+(((-1.0)*new_r22*x540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[2];
IkReal x545=((0.707106781186548)*cj6);
IkReal x546=(sj5*sj6);
IkReal x547=((0.707106781186548)*sj6);
IkReal x548=(cj5*cj7);
IkReal x549=(cj7*sj5);
IkReal x550=((1.0)*cj6);
IkReal x551=((1.0)*sj4);
IkReal x552=(cj5*sj7);
IkReal x553=(sj5*sj7);
IkReal x554=(cj7*x547);
IkReal x555=((0.707106781186548)*x553);
IkReal x556=(cj5*x547);
IkReal x557=((0.707106781186548)*x549);
IkReal x558=(sj7*x547);
IkReal x559=((-1.0)*sj4);
IkReal x560=(x545*x548);
IkReal x561=((((-1.0)*x556))+x545);
IkReal x562=(x545*x552);
IkReal x563=((((-1.0)*x545))+(((-1.0)*x556)));
IkReal x564=((((-1.0)*x550*x553))+x548);
IkReal x565=(cj4*x563);
IkReal x566=x207;
IkReal x567=(x557+x562);
IkReal x568=((((-1.0)*x555))+x554+x560);
IkReal x569=((((-1.0)*x554))+(((-1.0)*x555))+x560);
IkReal x570=((((-1.0)*x558))+x567);
IkReal x571=(x558+x567);
IkReal x572=(cj4*x570);
IkReal x573=(((sj4*x563))+((cj4*x561)));
IkReal x574=(x565+(((-1.0)*x551*x561)));
IkReal x575=(((sj4*x569))+((cj4*x568)));
IkReal x576=(((cj4*x569))+((x559*x568)));
IkReal x577=(((sj4*x570))+((cj4*x571)));
IkReal x578=(((x559*x571))+x572);
new_r00=(((r00*x576))+((r20*x566))+((r10*x575)));
new_r01=(((r01*x576))+((r21*x566))+((r11*x575)));
new_r02=(((r12*x575))+((r22*x566))+((r02*x576)));
new_r10=(((r00*x574))+((r20*x546))+((r10*x573)));
new_r11=(((r21*x546))+((r01*((x565+((x559*x561))))))+((r11*x573)));
new_r12=(((r12*x573))+((r02*x574))+((r22*x546)));
new_r20=(((r00*x578))+((r20*x564))+((r10*x577)));
new_r21=(((r21*x564))+((r01*((x572+(((-1.0)*x551*x571))))))+((r11*x577)));
new_r22=(((r12*x577))+((r22*x564))+((r02*x578)));
j10eval[0]=sj9;
j10eval[1]=IKsign(sj9);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x579=((0.707106781186548)*cj6);
IkReal x580=(sj5*sj6);
IkReal x581=((0.707106781186548)*sj6);
IkReal x582=(cj5*cj7);
IkReal x583=(cj7*sj5);
IkReal x584=((1.0)*cj6);
IkReal x585=((1.0)*sj4);
IkReal x586=(cj5*sj7);
IkReal x587=(sj5*sj7);
IkReal x588=(cj7*x581);
IkReal x589=((0.707106781186548)*x587);
IkReal x590=(cj5*x581);
IkReal x591=((0.707106781186548)*x583);
IkReal x592=(sj7*x581);
IkReal x593=((-1.0)*sj4);
IkReal x594=(x579*x582);
IkReal x595=((((-1.0)*x590))+x579);
IkReal x596=(x579*x586);
IkReal x597=((((-1.0)*x590))+(((-1.0)*x579)));
IkReal x598=((((-1.0)*x584*x587))+x582);
IkReal x599=(cj4*x597);
IkReal x600=x207;
IkReal x601=(x596+x591);
IkReal x602=(x588+x594+(((-1.0)*x589)));
IkReal x603=(x594+(((-1.0)*x589))+(((-1.0)*x588)));
IkReal x604=((((-1.0)*x592))+x601);
IkReal x605=(x592+x601);
IkReal x606=(cj4*x604);
IkReal x607=(((sj4*x597))+((cj4*x595)));
IkReal x608=((((-1.0)*x585*x595))+x599);
IkReal x609=(((sj4*x603))+((cj4*x602)));
IkReal x610=(((x593*x602))+((cj4*x603)));
IkReal x611=(((sj4*x604))+((cj4*x605)));
IkReal x612=(((x593*x605))+x606);
new_r00=(((r00*x610))+((r20*x600))+((r10*x609)));
new_r01=(((r01*x610))+((r21*x600))+((r11*x609)));
new_r02=(((r12*x609))+((r02*x610))+((r22*x600)));
new_r10=(((r00*x608))+((r20*x580))+((r10*x607)));
new_r11=(((r01*((x599+((x593*x595))))))+((r11*x607))+((r21*x580)));
new_r12=(((r12*x607))+((r02*x608))+((r22*x580)));
new_r20=(((r00*x612))+((r20*x598))+((r10*x611)));
new_r21=(((r11*x611))+((r21*x598))+((r01*(((((-1.0)*x585*x605))+x606)))));
new_r22=(((r22*x598))+((r12*x611))+((r02*x612)));
j10eval[0]=sj8;
j10eval[1]=sj9;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x613=((0.707106781186548)*cj6);
IkReal x614=(sj5*sj6);
IkReal x615=((0.707106781186548)*sj6);
IkReal x616=(cj5*cj7);
IkReal x617=(cj7*sj5);
IkReal x618=((1.0)*cj6);
IkReal x619=((1.0)*sj4);
IkReal x620=(cj5*sj7);
IkReal x621=(sj5*sj7);
IkReal x622=(cj7*x615);
IkReal x623=((0.707106781186548)*x621);
IkReal x624=(cj5*x615);
IkReal x625=((0.707106781186548)*x617);
IkReal x626=(sj7*x615);
IkReal x627=((-1.0)*sj4);
IkReal x628=(x613*x616);
IkReal x629=((((-1.0)*x624))+x613);
IkReal x630=(x613*x620);
IkReal x631=((((-1.0)*x624))+(((-1.0)*x613)));
IkReal x632=(x616+(((-1.0)*x618*x621)));
IkReal x633=(cj4*x631);
IkReal x634=x207;
IkReal x635=(x625+x630);
IkReal x636=((((-1.0)*x623))+x622+x628);
IkReal x637=((((-1.0)*x622))+(((-1.0)*x623))+x628);
IkReal x638=((((-1.0)*x626))+x635);
IkReal x639=(x626+x635);
IkReal x640=(cj4*x638);
IkReal x641=(((sj4*x631))+((cj4*x629)));
IkReal x642=(x633+(((-1.0)*x619*x629)));
IkReal x643=(((sj4*x637))+((cj4*x636)));
IkReal x644=(((cj4*x637))+((x627*x636)));
IkReal x645=(((sj4*x638))+((cj4*x639)));
IkReal x646=(x640+((x627*x639)));
new_r00=(((r10*x643))+((r00*x644))+((r20*x634)));
new_r01=(((r21*x634))+((r01*x644))+((r11*x643)));
new_r02=(((r22*x634))+((r02*x644))+((r12*x643)));
new_r10=(((r20*x614))+((r10*x641))+((r00*x642)));
new_r11=(((r01*((x633+((x627*x629))))))+((r21*x614))+((r11*x641)));
new_r12=(((r02*x642))+((r12*x641))+((r22*x614)));
new_r20=(((r10*x645))+((r00*x646))+((r20*x632)));
new_r21=(((r21*x632))+((r01*(((((-1.0)*x619*x639))+x640))))+((r11*x645)));
new_r22=(((r22*x632))+((r02*x646))+((r12*x645)));
j10eval[0]=cj8;
j10eval[1]=cj9;
j10eval[2]=sj9;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x647=(new_r22+(((-1.0)*cj9)));
IkReal x648=((((-1.0)*sj9))+new_r12);
IkReal x649=((1.0)*sj9);
IkReal x650=((1.0)*cj9);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=x647;
evalcond[2]=x647;
evalcond[3]=new_r02;
evalcond[4]=x648;
evalcond[5]=x648;
evalcond[6]=(((cj9*new_r12))+(((-1.0)*new_r22*x649)));
evalcond[7]=((((-1.0)*new_r10*x649))+(((-1.0)*new_r20*x650)));
evalcond[8]=((((-1.0)*new_r11*x649))+(((-1.0)*new_r21*x650)));
evalcond[9]=((1.0)+(((-1.0)*new_r12*x649))+(((-1.0)*new_r22*x650)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x651 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x651.valid){
continue;
}
CheckValue<IkReal> x652=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x652.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x651.value)+(((1.5707963267949)*(x652.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x653=IKsin(j10);
IkReal x654=IKcos(j10);
IkReal x655=((1.0)*new_r12);
IkReal x656=((1.0)*x654);
IkReal x657=((1.0)*x653);
evalcond[0]=(((new_r12*x654))+new_r20);
evalcond[1]=(((new_r22*x653))+new_r11);
evalcond[2]=(new_r21+(((-1.0)*x653*x655)));
evalcond[3]=(new_r10+(((-1.0)*new_r22*x656)));
evalcond[4]=((((-1.0)*x657))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x656))+(((-1.0)*new_r01)));
evalcond[6]=(((new_r11*new_r22))+x653+(((-1.0)*new_r21*x655)));
evalcond[7]=((((-1.0)*x656))+(((-1.0)*new_r20*x655))+((new_r10*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j10;
vinfos[6].indices[0] = _ij10[0];
vinfos[6].indices[1] = _ij10[1];
vinfos[6].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x658=(new_r22+(((-1.0)*cj9)));
IkReal x659=((1.0)*cj9);
IkReal x660=((1.0)*sj9);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=x658;
evalcond[2]=x658;
evalcond[3]=new_r02;
evalcond[4]=(sj9+new_r12);
evalcond[5]=((((-1.0)*x660))+(((-1.0)*new_r12)));
evalcond[6]=((((-1.0)*new_r12*x659))+(((-1.0)*new_r22*x660)));
evalcond[7]=(((new_r10*sj9))+(((-1.0)*new_r20*x659)));
evalcond[8]=(((new_r11*sj9))+(((-1.0)*new_r21*x659)));
evalcond[9]=((1.0)+((new_r12*sj9))+(((-1.0)*new_r22*x659)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(new_r00, new_r01);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x661=IKsin(j10);
IkReal x662=IKcos(j10);
IkReal x663=((1.0)*new_r11);
IkReal x664=((1.0)*new_r10);
IkReal x665=((1.0)*x662);
evalcond[0]=(((new_r12*x661))+new_r21);
evalcond[1]=((((-1.0)*x661))+new_r00);
evalcond[2]=((((-1.0)*x665))+new_r01);
evalcond[3]=((((-1.0)*new_r12*x665))+new_r20);
evalcond[4]=(((new_r22*x661))+(((-1.0)*x663)));
evalcond[5]=((((-1.0)*x664))+(((-1.0)*new_r22*x665)));
evalcond[6]=(((new_r12*new_r21))+x661+(((-1.0)*new_r22*x663)));
evalcond[7]=(((new_r12*new_r20))+(((-1.0)*x665))+(((-1.0)*new_r22*x664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j10;
vinfos[6].indices[0] = _ij10[0];
vinfos[6].indices[1] = _ij10[1];
vinfos[6].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x666=((1.0)*sj8);
IkReal x667=((1.0)*cj8);
IkReal x668=((((-1.0)*new_r02*x666))+((cj8*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x667))+new_r02);
evalcond[3]=((((-1.0)*x666))+new_r12);
evalcond[4]=x668;
evalcond[5]=x668;
evalcond[6]=((-1.0)+((new_r12*sj8))+((cj8*new_r02)));
evalcond[7]=(((new_r11*sj8))+((cj8*new_r01)));
evalcond[8]=(((new_r10*sj8))+((cj8*new_r00)));
evalcond[9]=((((-1.0)*new_r10*x666))+(((-1.0)*new_r00*x667)));
evalcond[10]=((((-1.0)*new_r11*x666))+(((-1.0)*new_r01*x667)));
evalcond[11]=((1.0)+(((-1.0)*new_r02*x667))+(((-1.0)*new_r12*x666)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x669=IKcos(j10);
IkReal x670=IKsin(j10);
IkReal x671=((1.0)*new_r12);
IkReal x672=((1.0)*x670);
IkReal x673=((1.0)*x669);
evalcond[0]=(x669+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x672)));
evalcond[2]=(((new_r12*x669))+new_r01);
evalcond[3]=(((new_r12*x670))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x673))+new_r11);
evalcond[5]=((((-1.0)*new_r02*x672))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x671))+((new_r02*new_r10))+(((-1.0)*x672)));
evalcond[7]=((((-1.0)*new_r01*x671))+((new_r02*new_r11))+(((-1.0)*x673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j10;
vinfos[6].indices[0] = _ij10[0];
vinfos[6].indices[1] = _ij10[1];
vinfos[6].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x674=((((-1.0)*new_r02*sj8))+((cj8*new_r12)));
IkReal x675=(((new_r10*sj8))+((cj8*new_r00)));
IkReal x676=(((new_r11*sj8))+((cj8*new_r01)));
IkReal x677=((1.0)+((new_r12*sj8))+((cj8*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj8+new_r02);
evalcond[3]=(sj8+new_r12);
evalcond[4]=x674;
evalcond[5]=x674;
evalcond[6]=x677;
evalcond[7]=x676;
evalcond[8]=x675;
evalcond[9]=x675;
evalcond[10]=x676;
evalcond[11]=x677;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x678=IKcos(j10);
IkReal x679=IKsin(j10);
IkReal x680=((1.0)*new_r02);
IkReal x681=((1.0)*x678);
IkReal x682=((1.0)*x679);
evalcond[0]=(x679+new_r21);
evalcond[1]=((((-1.0)*x681))+new_r20);
evalcond[2]=(((new_r02*x678))+new_r11);
evalcond[3]=(((new_r02*x679))+new_r10);
evalcond[4]=((((-1.0)*new_r12*x681))+new_r01);
evalcond[5]=((((-1.0)*new_r12*x682))+new_r00);
evalcond[6]=((((-1.0)*new_r10*x680))+(((-1.0)*x682))+((new_r00*new_r12)));
evalcond[7]=((((-1.0)*x681))+((new_r01*new_r12))+(((-1.0)*new_r11*x680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j10;
vinfos[6].indices[0] = _ij10[0];
vinfos[6].indices[1] = _ij10[1];
vinfos[6].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x683=((((-1.0)*new_r02*sj8))+((cj8*new_r12)));
IkReal x684=(((new_r12*sj8))+((cj8*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x683;
evalcond[7]=x683;
evalcond[8]=x684;
evalcond[9]=x684;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x685=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj8*x685))+(((-1.0)*new_r00*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj8*new_r00))+(((-1.0)*sj8*x685)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj8*x685))+(((-1.0)*new_r00*sj8))))+IKsqr((((cj8*new_r00))+(((-1.0)*sj8*x685))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*cj8*x685))+(((-1.0)*new_r00*sj8))), (((cj8*new_r00))+(((-1.0)*sj8*x685))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x686=IKsin(j10);
IkReal x687=IKcos(j10);
IkReal x688=((1.0)*sj8);
IkReal x689=((1.0)*x687);
IkReal x690=(sj8*x686);
IkReal x691=(cj8*x686);
IkReal x692=(cj8*x689);
evalcond[0]=(((new_r11*sj8))+((cj8*new_r01))+x686);
evalcond[1]=(((sj8*x687))+x691+new_r01);
evalcond[2]=(((new_r10*sj8))+(((-1.0)*x689))+((cj8*new_r00)));
evalcond[3]=(((cj8*new_r10))+(((-1.0)*x686))+(((-1.0)*new_r00*x688)));
evalcond[4]=((((-1.0)*new_r01*x688))+(((-1.0)*x689))+((cj8*new_r11)));
evalcond[5]=(x690+(((-1.0)*x692))+new_r00);
evalcond[6]=(x690+(((-1.0)*x692))+new_r11);
evalcond[7]=((((-1.0)*x687*x688))+new_r10+(((-1.0)*x691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j10;
vinfos[6].indices[0] = _ij10[0];
vinfos[6].indices[1] = _ij10[1];
vinfos[6].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x693=((1.0)*new_r02);
IkReal x694=(new_r12*sj8);
IkReal x695=(((cj8*new_r12))+(((-1.0)*sj8*x693)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x695;
evalcond[7]=x695;
evalcond[8]=(((cj8*new_r02))+x694);
evalcond[9]=((((-1.0)*cj8*x693))+(((-1.0)*x694)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x696=((1.0)*new_r00);
if( IKabs((((cj8*new_r01))+(((-1.0)*sj8*x696)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj8))+(((-1.0)*cj8*x696)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj8*new_r01))+(((-1.0)*sj8*x696))))+IKsqr(((((-1.0)*new_r01*sj8))+(((-1.0)*cj8*x696))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((cj8*new_r01))+(((-1.0)*sj8*x696))), ((((-1.0)*new_r01*sj8))+(((-1.0)*cj8*x696))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x697=IKsin(j10);
IkReal x698=IKcos(j10);
IkReal x699=((1.0)*sj8);
IkReal x700=((1.0)*x697);
IkReal x701=(sj8*x698);
IkReal x702=((1.0)*x698);
IkReal x703=(cj8*x700);
evalcond[0]=(((new_r10*sj8))+((cj8*new_r00))+x698);
evalcond[1]=(((new_r11*sj8))+((cj8*new_r01))+(((-1.0)*x700)));
evalcond[2]=(((cj8*x698))+((sj8*x697))+new_r00);
evalcond[3]=((((-1.0)*new_r00*x699))+((cj8*new_r10))+(((-1.0)*x700)));
evalcond[4]=((((-1.0)*new_r01*x699))+((cj8*new_r11))+(((-1.0)*x702)));
evalcond[5]=((((-1.0)*x703))+x701+new_r01);
evalcond[6]=((((-1.0)*x703))+x701+new_r10);
evalcond[7]=((((-1.0)*x697*x699))+(((-1.0)*cj8*x702))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j10;
vinfos[6].indices[0] = _ij10[0];
vinfos[6].indices[1] = _ij10[1];
vinfos[6].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x704=(new_r22+(((-1.0)*cj9)));
IkReal x705=((((-1.0)*sj9))+new_r02);
IkReal x706=((1.0)*sj9);
IkReal x707=((1.0)*cj9);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=x704;
evalcond[2]=x704;
evalcond[3]=x705;
evalcond[4]=new_r12;
evalcond[5]=x705;
evalcond[6]=((((-1.0)*new_r22*x706))+((cj9*new_r02)));
evalcond[7]=((((-1.0)*new_r20*x707))+(((-1.0)*new_r00*x706)));
evalcond[8]=((((-1.0)*new_r21*x707))+(((-1.0)*new_r01*x706)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x707))+(((-1.0)*new_r02*x706)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(new_r10, new_r11);
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x708=IKcos(j10);
IkReal x709=IKsin(j10);
IkReal x710=((1.0)*new_r02);
IkReal x711=((1.0)*x708);
evalcond[0]=(((new_r02*x708))+new_r20);
evalcond[1]=((((-1.0)*x709))+new_r10);
evalcond[2]=((((-1.0)*x711))+new_r11);
evalcond[3]=(new_r01+((new_r22*x709)));
evalcond[4]=((((-1.0)*x709*x710))+new_r21);
evalcond[5]=((((-1.0)*new_r22*x711))+new_r00);
evalcond[6]=((((-1.0)*new_r21*x710))+((new_r01*new_r22))+x709);
evalcond[7]=(((new_r00*new_r22))+(((-1.0)*new_r20*x710))+(((-1.0)*x711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j10;
vinfos[6].indices[0] = _ij10[0];
vinfos[6].indices[1] = _ij10[1];
vinfos[6].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x712=(new_r22+(((-1.0)*cj9)));
IkReal x713=((1.0)*cj9);
IkReal x714=((1.0)*sj9);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=x712;
evalcond[2]=x712;
evalcond[3]=(sj9+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*x714))+(((-1.0)*new_r02)));
evalcond[6]=((((-1.0)*new_r22*x714))+(((-1.0)*new_r02*x713)));
evalcond[7]=((((-1.0)*new_r20*x713))+((new_r00*sj9)));
evalcond[8]=((((-1.0)*new_r21*x713))+((new_r01*sj9)));
evalcond[9]=((1.0)+((new_r02*sj9))+(((-1.0)*new_r22*x713)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x715 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x715.valid){
continue;
}
CheckValue<IkReal> x716=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x716.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x715.value)+(((1.5707963267949)*(x716.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x717=IKsin(j10);
IkReal x718=IKcos(j10);
IkReal x719=((1.0)*new_r22);
IkReal x720=((1.0)*x718);
evalcond[0]=(((new_r02*x717))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x720))+new_r20);
evalcond[2]=((((-1.0)*x717))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x720))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*new_r01))+((new_r22*x717)));
evalcond[5]=((((-1.0)*x718*x719))+(((-1.0)*new_r00)));
evalcond[6]=(x717+((new_r02*new_r21))+(((-1.0)*new_r01*x719)));
evalcond[7]=((((-1.0)*x720))+((new_r02*new_r20))+(((-1.0)*new_r00*x719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j10;
vinfos[6].indices[0] = _ij10[0];
vinfos[6].indices[1] = _ij10[1];
vinfos[6].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x722=IKPowWithIntegerCheck(sj9,-1);
if(!x722.valid){
continue;
}
IkReal x721=x722.value;
CheckValue<IkReal> x723=IKPowWithIntegerCheck(cj8,-1);
if(!x723.valid){
continue;
}
CheckValue<IkReal> x724=IKPowWithIntegerCheck(cj9,-1);
if(!x724.valid){
continue;
}
if( IKabs((x721*(x723.value)*(x724.value)*((((new_r20*sj8))+(((-1.0)*new_r01*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x721)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x721*(x723.value)*(x724.value)*((((new_r20*sj8))+(((-1.0)*new_r01*sj9))))))+IKsqr(((-1.0)*new_r20*x721))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((x721*(x723.value)*(x724.value)*((((new_r20*sj8))+(((-1.0)*new_r01*sj9))))), ((-1.0)*new_r20*x721));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[12];
IkReal x725=IKsin(j10);
IkReal x726=IKcos(j10);
IkReal x727=(cj9*sj8);
IkReal x728=((1.0)*sj9);
IkReal x729=((1.0)*sj8);
IkReal x730=((1.0)*cj8);
IkReal x731=(cj8*new_r00);
IkReal x732=(cj8*new_r01);
IkReal x733=((1.0)*x726);
IkReal x734=(cj9*x725);
IkReal x735=(cj9*x733);
evalcond[0]=(((sj9*x726))+new_r20);
evalcond[1]=((((-1.0)*x725*x728))+new_r21);
evalcond[2]=(((new_r11*sj8))+x734+x732);
evalcond[3]=(((cj8*new_r10))+(((-1.0)*x725))+(((-1.0)*new_r00*x729)));
evalcond[4]=(((cj8*new_r11))+(((-1.0)*x733))+(((-1.0)*new_r01*x729)));
evalcond[5]=(((sj8*x726))+((cj8*x734))+new_r01);
evalcond[6]=(((new_r10*sj8))+(((-1.0)*x735))+x731);
evalcond[7]=((((-1.0)*cj9*x726*x730))+((sj8*x725))+new_r00);
evalcond[8]=(((x725*x727))+new_r11+(((-1.0)*x726*x730)));
evalcond[9]=((((-1.0)*x727*x733))+(((-1.0)*x725*x730))+new_r10);
evalcond[10]=(((cj9*x732))+(((-1.0)*new_r21*x728))+x725+((new_r11*x727)));
evalcond[11]=(((cj9*x731))+(((-1.0)*new_r20*x728))+(((-1.0)*x733))+((new_r10*x727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j10;
vinfos[6].indices[0] = _ij10[0];
vinfos[6].indices[1] = _ij10[1];
vinfos[6].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x737=IKPowWithIntegerCheck(sj9,-1);
if(!x737.valid){
continue;
}
IkReal x736=x737.value;
CheckValue<IkReal> x738=IKPowWithIntegerCheck(sj8,-1);
if(!x738.valid){
continue;
}
if( IKabs((x736*(x738.value)*(((((-1.0)*cj8*cj9*new_r20))+(((-1.0)*new_r00*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x736)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x736*(x738.value)*(((((-1.0)*cj8*cj9*new_r20))+(((-1.0)*new_r00*sj9))))))+IKsqr(((-1.0)*new_r20*x736))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((x736*(x738.value)*(((((-1.0)*cj8*cj9*new_r20))+(((-1.0)*new_r00*sj9))))), ((-1.0)*new_r20*x736));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[12];
IkReal x739=IKsin(j10);
IkReal x740=IKcos(j10);
IkReal x741=(cj9*sj8);
IkReal x742=((1.0)*sj9);
IkReal x743=((1.0)*sj8);
IkReal x744=((1.0)*cj8);
IkReal x745=(cj8*new_r00);
IkReal x746=(cj8*new_r01);
IkReal x747=((1.0)*x740);
IkReal x748=(cj9*x739);
IkReal x749=(cj9*x747);
evalcond[0]=(((sj9*x740))+new_r20);
evalcond[1]=((((-1.0)*x739*x742))+new_r21);
evalcond[2]=(((new_r11*sj8))+x746+x748);
evalcond[3]=((((-1.0)*new_r00*x743))+(((-1.0)*x739))+((cj8*new_r10)));
evalcond[4]=((((-1.0)*new_r01*x743))+((cj8*new_r11))+(((-1.0)*x747)));
evalcond[5]=(((cj8*x748))+((sj8*x740))+new_r01);
evalcond[6]=(((new_r10*sj8))+x745+(((-1.0)*x749)));
evalcond[7]=((((-1.0)*cj9*x740*x744))+((sj8*x739))+new_r00);
evalcond[8]=(((x739*x741))+(((-1.0)*x740*x744))+new_r11);
evalcond[9]=((((-1.0)*x741*x747))+(((-1.0)*x739*x744))+new_r10);
evalcond[10]=(((cj9*x746))+(((-1.0)*new_r21*x742))+((new_r11*x741))+x739);
evalcond[11]=(((cj9*x745))+(((-1.0)*new_r20*x742))+((new_r10*x741))+(((-1.0)*x747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j10;
vinfos[6].indices[0] = _ij10[0];
vinfos[6].indices[1] = _ij10[1];
vinfos[6].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x750 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x750.valid){
continue;
}
CheckValue<IkReal> x751=IKPowWithIntegerCheck(IKsign(sj9),-1);
if(!x751.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x750.value)+(((1.5707963267949)*(x751.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[12];
IkReal x752=IKsin(j10);
IkReal x753=IKcos(j10);
IkReal x754=(cj9*sj8);
IkReal x755=((1.0)*sj9);
IkReal x756=((1.0)*sj8);
IkReal x757=((1.0)*cj8);
IkReal x758=(cj8*new_r00);
IkReal x759=(cj8*new_r01);
IkReal x760=((1.0)*x753);
IkReal x761=(cj9*x752);
IkReal x762=(cj9*x760);
evalcond[0]=(new_r20+((sj9*x753)));
evalcond[1]=((((-1.0)*x752*x755))+new_r21);
evalcond[2]=(((new_r11*sj8))+x759+x761);
evalcond[3]=((((-1.0)*new_r00*x756))+((cj8*new_r10))+(((-1.0)*x752)));
evalcond[4]=((((-1.0)*new_r01*x756))+(((-1.0)*x760))+((cj8*new_r11)));
evalcond[5]=(((cj8*x761))+((sj8*x753))+new_r01);
evalcond[6]=(((new_r10*sj8))+(((-1.0)*x762))+x758);
evalcond[7]=((((-1.0)*cj9*x753*x757))+((sj8*x752))+new_r00);
evalcond[8]=(((x752*x754))+(((-1.0)*x753*x757))+new_r11);
evalcond[9]=((((-1.0)*x754*x760))+(((-1.0)*x752*x757))+new_r10);
evalcond[10]=(((cj9*x759))+(((-1.0)*new_r21*x755))+((new_r11*x754))+x752);
evalcond[11]=(((cj9*x758))+(((-1.0)*x760))+((new_r10*x754))+(((-1.0)*new_r20*x755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j10;
vinfos[6].indices[0] = _ij10[0];
vinfos[6].indices[1] = _ij10[1];
vinfos[6].maxsolutions = _nj10;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "34930a3a1995b5fb7c3b43862e0c04f2"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
