/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-10-07 00:43:49.529193
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75;
x0=IKsin(j[0]);
x1=IKsin(j[5]);
x2=IKsin(j[2]);
x3=IKsin(j[3]);
x4=(x2*x3);
x5=IKcos(j[2]);
x6=IKcos(j[3]);
x7=(x5*x6);
x8=((1.0)*x7);
x9=(x4+(((-1.0)*(1.0)*x8)));
x10=(x1*x9);
x11=((0.258820142606703)*x10);
x12=IKcos(j[5]);
x13=((0.258820142606703)*x12);
x14=IKcos(j[4]);
x15=(x2*x6);
x16=((1.0)*x15);
x17=(x3*x5);
x18=((1.0)*x17);
x19=((((-1.0)*(1.0)*x16))+(((-1.0)*(1.0)*x18)));
x20=(x14*x19);
x21=(x13*x20);
x22=IKcos(j[0]);
x23=IKcos(j[1]);
IkReal x76=((1.0)*x23);
x24=((((-1.0)*x18*x76))+(((-1.0)*x16*x76)));
x25=IKsin(j[4]);
x26=IKsin(j[1]);
x27=((1.0)*x26);
x28=(x25*x27);
x29=((1.0)*x23*x4);
x30=(x14*(((((-1.0)*(1.0)*x29))+((x23*x7)))));
x31=(((x1*x24))+((x12*((x30+(((-1.0)*(1.0)*x28)))))));
x32=((0.965925532213041)*x1);
x33=(x2*x26*x6);
x34=((((-1.0)*(1.0)*x17*x27))+(((-1.0)*(1.0)*x33)));
x35=(x32*x34);
x36=((0.965925532213041)*x12);
x37=(x23*x25);
x38=(x26*x7);
x39=(x27*x4);
x40=(x14*((x38+(((-1.0)*(1.0)*x39)))));
x41=(x37+x40);
x42=(x36*x41);
x43=IKcos(j[6]);
x44=(x18+x16);
x45=(x25*x43*x44);
x46=((0.258820142606703)*x45);
x47=IKsin(j[6]);
x48=((1.0)*x12);
x49=((1.0)*x1);
x50=((((-1.0)*(1.0)*x14*x44*x49))+(((-1.0)*(1.0)*x48*x9)));
x51=(x47*x50);
x52=((0.258820142606703)*x51);
x53=(x14*x27);
x54=(x25*((x29+(((-1.0)*(1.0)*x23*x8)))));
x55=(((x49*(((((1.0)*x30))+(((-1.0)*(1.0)*x28))))))+(((-1.0)*(1.0)*x24*x48)));
x56=(((x43*(((((-1.0)*(1.0)*x53))+x54))))+((x47*x55)));
x57=(x14*x23);
x58=(x25*((x39+(((-1.0)*(1.0)*x27*x7)))));
x59=(x43*((x58+x57)));
x60=((0.965925532213041)*x59);
x61=(((x49*(((((1.0)*x37))+(((1.0)*x40))))))+(((-1.0)*(1.0)*x34*x48)));
x62=(x47*x61);
x63=((0.965925532213041)*x62);
x64=(x19*x25*x47);
x65=((0.258820142606703)*x64);
x66=(x43*x50);
x67=((0.258820142606703)*x66);
x68=(((x47*(((((-1.0)*(1.0)*x54))+x53))))+((x43*x55)));
x69=(x47*(((((-1.0)*(1.0)*x58))+(((-1.0)*(1.0)*x57)))));
x70=((0.965925532213041)*x69);
x71=(x43*x61);
x72=((0.965925532213041)*x71);
x73=((0.258820142606703)*x1);
x74=((0.04)*x17);
x75=((0.09)*x17);
eerot[0]=(((x22*x31))+((x0*(((((-1.0)*(1.0)*x35))+(((-1.0)*(1.0)*x42))))))+((x0*((x11+x21)))));
eerot[1]=(((x0*((x46+x52))))+((x0*(((((-1.0)*(1.0)*x60))+(((-1.0)*(1.0)*x63))))))+((x22*x56)));
eerot[2]=(((x22*x68))+((x0*(((((-1.0)*(1.0)*x70))+(((-1.0)*(1.0)*x72))))))+((x0*((x67+x65)))));
eetrans[0]=((((((((-0.0608227335125751)*(IKcos(j[2]))*(IKcos(j[3]))))+(((0.0608227335125751)*(IKsin(j[2]))*(IKsin(j[3]))))+(((0.00776460427820108)*(IKcos(j[3]))*(IKsin(j[2]))))+(((((((0.0232938128346032)*(IKcos(j[3]))*(IKsin(j[2]))))+(((0.0232938128346032)*(IKcos(j[2]))*(IKsin(j[3]))))))*(IKcos(j[4]))*(IKsin(j[5]))))+(((((((0.0103528057042681)*(IKcos(j[3]))*(IKsin(j[2]))))+(((0.0103528057042681)*(IKcos(j[2]))*(IKsin(j[3]))))))*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.00776460427820108)*(IKcos(j[2]))*(IKsin(j[3]))))+(((((((0.0232938128346032)*(IKsin(j[2]))*(IKsin(j[3]))))+(((-0.0232938128346032)*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKcos(j[5]))))+(((((((0.0103528057042681)*(IKcos(j[2]))*(IKcos(j[3]))))+(((-0.0103528057042681)*(IKsin(j[2]))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((-0.0647050356516757)*(IKcos(j[2]))))))*(IKsin(j[0]))))+(((0.145)*(IKsin(j[0]))))+(((((((-0.235)*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[3]))))+(((-0.03)*(IKcos(j[1]))*(IKcos(j[2]))*(IKcos(j[3]))))+(((-0.25)*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((0.09)*(IKsin(j[1]))*(IKsin(j[4]))))+(((((((0.09)*(IKcos(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((-0.09)*(IKcos(j[1]))*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((0.04)*(IKsin(j[1]))*(IKsin(j[4]))))+(((((((0.04)*(IKcos(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((-0.04)*(IKcos(j[1]))*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((-0.09)*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[2]))))+(((-0.09)*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((-0.235)*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[2]))))+(((0.03)*(IKcos(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((0.095)*(IKsin(j[1]))))+(((((((0.04)*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[3]))))+(((0.04)*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[2]))))))*(IKsin(j[5]))))))*(IKcos(j[0]))))+(((((((0.0289777659663912)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((((((-0.0386370212885216)*(IKcos(j[3]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.0386370212885216)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((((((0.0869332978991737)*(IKcos(j[1]))*(IKsin(j[4]))))+(((-0.965925532213041)*(((((-0.09)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((0.09)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((0.0386370212885216)*(IKcos(j[1]))*(IKsin(j[4]))))+(((-0.965925532213041)*(((((0.04)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((-0.04)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((0.0917629255602389)*(IKcos(j[1]))))+(((((((0.0869332978991737)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((0.0869332978991737)*(IKcos(j[3]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[5]))))+(((0.226992500070065)*(IKcos(j[3]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.226992500070065)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-0.0289777659663912)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((0.24148138305326)*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[0])))));
eerot[3]=(((x22*((x35+x42))))+((x0*x31))+((x22*(((((-1.0)*(1.0)*x21))+(((-1.0)*(1.0)*x11)))))));
eerot[4]=(((x22*(((((-1.0)*(1.0)*x52))+(((-1.0)*(1.0)*x46))))))+((x0*x56))+((x22*((x60+x63)))));
eerot[5]=(((x22*(((((-1.0)*(1.0)*x65))+(((-1.0)*(1.0)*x67))))))+((x0*x68))+((x22*((x70+x72)))));
eetrans[1]=((((((((-0.00776460427820108)*(IKcos(j[3]))*(IKsin(j[2]))))+(((((((0.0103528057042681)*(IKsin(j[2]))*(IKsin(j[3]))))+(((-0.0103528057042681)*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((0.0608227335125751)*(IKcos(j[2]))*(IKcos(j[3]))))+(((((((-0.0232938128346032)*(IKsin(j[2]))*(IKsin(j[3]))))+(((0.0232938128346032)*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKcos(j[5]))))+(((((((-0.0103528057042681)*(IKcos(j[2]))*(IKsin(j[3]))))+(((-0.0103528057042681)*(IKcos(j[3]))*(IKsin(j[2]))))))*(IKcos(j[4]))*(IKcos(j[5]))))+(((-0.0608227335125751)*(IKsin(j[2]))*(IKsin(j[3]))))+(((0.0647050356516757)*(IKcos(j[2]))))+(((-0.00776460427820108)*(IKcos(j[2]))*(IKsin(j[3]))))+(((((((-0.0232938128346032)*(IKcos(j[3]))*(IKsin(j[2]))))+(((-0.0232938128346032)*(IKcos(j[2]))*(IKsin(j[3]))))))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[0]))))+(((((((((((-0.0869332978991737)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-0.0869332978991737)*(IKcos(j[3]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[5]))))+(((-0.226992500070065)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((((((0.965925532213041)*(((((-0.09)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((0.09)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.0869332978991737)*(IKcos(j[1]))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((-0.226992500070065)*(IKcos(j[3]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.0917629255602389)*(IKcos(j[1]))))+(((0.0289777659663912)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((((((-0.0386370212885216)*(IKcos(j[1]))*(IKsin(j[4]))))+(((0.965925532213041)*(((((0.04)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((-0.04)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((0.0386370212885216)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((0.0386370212885216)*(IKcos(j[3]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[5]))))+(((-0.0289777659663912)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((-0.24148138305326)*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[0]))))+(((-0.145)*(IKcos(j[0]))))+(((((((-0.235)*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[3]))))+(((-0.03)*(IKcos(j[1]))*(IKcos(j[2]))*(IKcos(j[3]))))+(((-0.25)*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((0.09)*(IKsin(j[1]))*(IKsin(j[4]))))+(((((((0.09)*(IKcos(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((-0.09)*(IKcos(j[1]))*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((0.04)*(IKsin(j[1]))*(IKsin(j[4]))))+(((((((0.04)*(IKcos(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((-0.04)*(IKcos(j[1]))*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((-0.09)*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[2]))))+(((-0.09)*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((-0.235)*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[2]))))+(((0.03)*(IKcos(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((0.095)*(IKsin(j[1]))))+(((((((0.04)*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[3]))))+(((0.04)*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[2]))))))*(IKsin(j[5]))))))*(IKsin(j[0])))));
eerot[6]=(((x34*x73))+(((0.965925532213041)*x10))+((x13*x41))+((x20*x36)));
eerot[7]=((((0.965925532213041)*x45))+(((0.258820142606703)*x59))+(((0.965925532213041)*x51))+(((0.258820142606703)*x62)));
eerot[8]=((((0.965925532213041)*x66))+(((0.258820142606703)*x71))+(((0.258820142606703)*x69))+(((0.965925532213041)*x64)));
eetrans[2]=((0.370296)+((x14*x36*(((((0.04)*x15))+x74))))+((x36*(((((0.09)*x4))+(((-1.0)*(0.09)*x7))))))+(((-1.0)*(0.0647050356516757)*x2*x26))+((x14*x32*((x75+(((0.09)*x15))))))+(((0.0289777659663912)*x17))+((x73*(((((0.04)*x33))+((x26*x74))))))+(((-1.0)*(0.24148138305326)*x5))+((x13*(((((-1.0)*(0.09)*x33))+(((-1.0)*(1.0)*x26*x75))))))+(((0.00776460427820108)*x26*x4))+(((0.226992500070065)*x4))+((x73*(((((-1.0)*(0.09)*x40))+(((-1.0)*(0.09)*x37))))))+(((-1.0)*(0.0608227335125751)*x33))+((x32*(((((-1.0)*(0.04)*x4))+(((0.04)*x7))))))+(((0.0289777659663912)*x15))+(((-1.0)*(0.0245879135476367)*x23))+(((-1.0)*(0.00776460427820108)*x38))+((x13*(((((-1.0)*(0.04)*x37))+(((-1.0)*(0.04)*x40))))))+(((-1.0)*(0.226992500070065)*x7))+(((-1.0)*(0.0608227335125751)*x17*x26)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {0}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,j0,cj0,sj0,htj0,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8,_ij0[2], _nj0;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1;  _ij0[0] = -1; _ij0[1] = -1; _nj0 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]), htj0=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((-1.0)*(1.0)*r12*(IKsin(j0))))+(((-1.0)*(1.0)*r02*(IKcos(j0)))));
new_r01=(((r01*(IKcos(j0))))+((r11*(IKsin(j0)))));
new_r02=(((r00*(IKcos(j0))))+((r10*(IKsin(j0)))));
new_px=(((((px+(((0.04)*r00))))*(IKcos(j0))))+(((((((0.04)*r10))+py))*(IKsin(j0)))));
new_r10=((((0.965925532213041)*r02*(IKsin(j0))))+(((-1.0)*(0.965925532213041)*r12*(IKcos(j0))))+(((-1.0)*(0.258820142606703)*r22)));
new_r11=((((0.258820142606703)*r21))+(((-1.0)*(0.965925532213041)*r01*(IKsin(j0))))+(((0.965925532213041)*r11*(IKcos(j0)))));
new_r12=((((0.258820142606703)*r20))+(((0.965925532213041)*r10*(IKcos(j0))))+(((-1.0)*(0.965925532213041)*r00*(IKsin(j0)))));
new_py=((0.0442191386441994)+(((0.258820142606703)*pz))+(((0.0103528057042681)*r20))+(((((((0.0386370212885216)*r10))+(((0.965925532213041)*py))))*(IKcos(j0))))+(((((((-1.0)*(0.0386370212885216)*r00))+(((-1.0)*(0.965925532213041)*px))))*(IKsin(j0)))));
new_r20=((((-1.0)*(0.965925532213041)*r22))+(((0.258820142606703)*r12*(IKcos(j0))))+(((-1.0)*(0.258820142606703)*r02*(IKsin(j0)))));
new_r21=((((0.258820142606703)*r01*(IKsin(j0))))+(((-1.0)*(0.258820142606703)*r11*(IKcos(j0))))+(((0.965925532213041)*r21)));
new_r22=((((0.258820142606703)*r00*(IKsin(j0))))+(((-1.0)*(0.258820142606703)*r10*(IKcos(j0))))+(((0.965925532213041)*r20)));
new_pz=((-0.395207281554332)+(((((((0.0103528057042681)*r00))+(((0.258820142606703)*px))))*(IKsin(j0))))+(((((((-1.0)*(0.258820142606703)*py))+(((-1.0)*(0.0103528057042681)*r10))))*(IKcos(j0))))+(((0.965925532213041)*pz))+(((0.0386370212885216)*r20)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x77=((1.0)*py);
IkReal x78=((1.0)*pz);
IkReal x79=((1.0)*px);
pp=((pz*pz)+(py*py)+(px*px));
npx=(((pz*r20))+((py*r10))+((px*r00)));
npy=(((pz*r21))+((py*r11))+((px*r01)));
npz=(((px*r02))+((pz*r22))+((py*r12)));
rxp0_0=((((-1.0)*r20*x77))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x78)));
rxp0_2=((((-1.0)*r10*x79))+((py*r00)));
rxp1_0=(((pz*r11))+(((-1.0)*r21*x77)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x78)));
rxp1_2=((((-1.0)*r11*x79))+((py*r01)));
rxp2_0=((((-1.0)*r22*x77))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x78))+((px*r22)));
rxp2_2=((((-1.0)*r12*x79))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x80=(cj6*r21);
IkReal x81=(r22*sj6);
IkReal x82=((2.0)*r20);
IkReal x83=(cj6*x82);
IkReal x84=((-1.0)*x80);
IkReal x85=((0.57)*r20);
IkReal x86=((6.0)*rxp0_0);
IkReal x87=(x86+(((-1.0)*x85)));
IkReal x88=((65.0)*npx);
IkReal x89=((100.0)*pp);
IkReal x90=((6.0)*rxp0_1);
IkReal x91=(x90+x89);
IkReal x92=((1.14)*r21);
IkReal x93=((12.0)*rxp1_0);
IkReal x94=((12.0)*rxp1_1);
IkReal x95=((((-1.0)*x86))+x85);
IkReal x96=(x89+(((-1.0)*x90)));
IkReal x97=(r21*sj6);
IkReal x98=(cj6*r22);
IkReal x99=((-1.0)*x98);
IkReal x100=((2.0)*r01);
IkReal x101=(sj6*x82);
IkReal x102=((2.0)*r11);
IkReal x103=((-1.0)*(((1.0)*r00)));
IkReal x104=((-1.0)*x97);
IkReal x105=((-1.0)*(((1.0)*r10)));
IkReal x106=((0.095)*r00);
IkReal x107=(x106+rxp0_2);
IkReal x108=((0.095)*r10);
IkReal x109=((0.19)*r01);
IkReal x110=((2.0)*rxp1_2);
IkReal x111=((0.19)*r11);
IkReal x112=((((-1.0)*x106))+(((-1.0)*(1.0)*rxp0_2)));
IkReal x113=((-1.0)*x108);
IkReal x114=((1.08)*r01);
IkReal x115=((((12.0)*rxp2_0))+(((-1.0)*(1.14)*r22)));
IkReal x116=((1.08)*r11);
IkReal x117=((((12.0)*rxp2_1))+(((-1.0)*(94.0)*npz)));
IkReal x118=((2.0)*r02);
IkReal x119=((2.0)*r12);
IkReal x120=((0.18)*r21);
IkReal x121=((((2.0)*rxp2_2))+(((0.19)*r02)));
IkReal x122=((0.19)*r12);
IkReal x123=((-1.0)*x81);
IkReal x124=((29.0)*npx);
op[0]=(x81+x80);
op[1]=0;
op[2]=x83;
op[3]=0;
op[4]=(x81+x84);
op[5]=0;
op[6]=x87;
op[7]=((3.5)+x91+(((-1.0)*x88)));
op[8]=(x92+(((-1.0)*x93)));
op[9]=((((-1.0)*x94))+(((130.0)*npy)));
op[10]=x95;
op[11]=((3.5)+x96+x88);
op[12]=(x99+x97+r00);
op[13]=r10;
op[14]=(x101+(((-1.0)*x100)));
op[15]=((-1.0)*x102);
op[16]=(x103+x104+x99);
op[17]=x105;
op[18]=x107;
op[19]=x108;
op[20]=((((-1.0)*x110))+(((-1.0)*x109)));
op[21]=((-1.0)*x111);
op[22]=x112;
op[23]=x113;
op[24]=((-1.0)*x101);
op[25]=0;
op[26]=((4.0)*x97);
op[27]=0;
op[28]=x101;
op[29]=0;
op[30]=((((-1.0)*x114))+x115);
op[31]=((((-1.0)*x116))+x117);
op[32]=((-1.0)*(((2.16)*r00)));
op[33]=((-1.0)*(((2.16)*r10)));
op[34]=(x115+x114);
op[35]=(x117+x116);
op[36]=(x83+x118);
op[37]=x119;
op[38]=((-4.0)*x80);
op[39]=0;
op[40]=((((-1.0)*x83))+x118);
op[41]=x119;
op[42]=(x121+(((-1.0)*x120)));
op[43]=x122;
op[44]=((-1.0)*(((0.36)*r20)));
op[45]=0;
op[46]=(x120+x121);
op[47]=x122;
op[48]=(x123+x80);
op[49]=0;
op[50]=x83;
op[51]=0;
op[52]=(x123+x84);
op[53]=0;
op[54]=x95;
op[55]=((-4.96)+x124+x96);
op[56]=(x93+(((-1.0)*x92)));
op[57]=(x94+(((-1.0)*(58.0)*npy)));
op[58]=x87;
op[59]=((-4.96)+x91+(((-1.0)*x124)));
op[60]=(x103+x98+x97);
op[61]=x105;
op[62]=(x100+x101);
op[63]=x102;
op[64]=(x104+x98+r00);
op[65]=r10;
op[66]=x112;
op[67]=x113;
op[68]=(x109+x110);
op[69]=x111;
op[70]=x107;
op[71]=x108;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j7array[16], cj7array[16], sj7array[16], j8array[16], cj8array[16], sj8array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ij7 += 3)
{
IkReal htj7 = zeror[ij7+0], htj8 = zeror[ij7+1], htj3 = zeror[ij7+2];
if(isnan(htj7)||isnan(htj8)||isnan(htj3)){
continue;
}
j7array[numsolutions]=((2.0)*(atan(htj7)));
j8array[numsolutions]=((2.0)*(atan(htj8)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj7)){
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
}
else{
IkReal x125=htj7*htj7;
CheckValue<IkReal> x126=IKPowWithIntegerCheck(((1.0)+x125),-1);
if(!x126.valid){
continue;
}
cj7array[numsolutions]=((x126.value)*(((1.0)+(((-1.0)*x125)))));
CheckValue<IkReal> x127=IKPowWithIntegerCheck(((1.0)+(htj7*htj7)),-1);
if(!x127.valid){
continue;
}
sj7array[numsolutions]=((2.0)*htj7*(x127.value));
}
if(isinf(htj8)){
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
}
else{
IkReal x128=htj8*htj8;
CheckValue<IkReal> x129=IKPowWithIntegerCheck(((1.0)+x128),-1);
if(!x129.valid){
continue;
}
cj8array[numsolutions]=((x129.value)*(((1.0)+(((-1.0)*x128)))));
CheckValue<IkReal> x130=IKPowWithIntegerCheck(((1.0)+(htj8*htj8)),-1);
if(!x130.valid){
continue;
}
sj8array[numsolutions]=((2.0)*htj8*(x130.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x131=htj3*htj3;
CheckValue<IkReal> x132=IKPowWithIntegerCheck(((1.0)+x131),-1);
if(!x132.valid){
continue;
}
cj3array[numsolutions]=((x132.value)*(((1.0)+(((-1.0)*x131)))));
CheckValue<IkReal> x133=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x133.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x133.value));
}
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j7valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj7 = 16;
_nj8 = 1;
_nj3 = 1;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
_ij8[0] = 0; _ij8[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( !j7valid[iij7] ) { continue; }
if( IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(cj8array[ij7]-cj8array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij7]-sj8array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij7]-cj3array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij7]-sj3array[iij7]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j7valid[iij7]=false; _ij7[1] = iij7; _ij8[1] = 0; _ij3[1] = 0;  break; 
}
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

    j8 = j8array[ij7]; cj8 = cj8array[ij7]; sj8 = sj8array[ij7];

    j3 = j3array[ij7]; cj3 = cj3array[ij7]; sj3 = sj3array[ij7];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j6eval[3];
IkReal x134=((1.0)*cj7);
IkReal x135=(((cj7*r01*sj8))+(((-1.0)*cj8*r00*x134))+(((-1.0)*r02*sj7)));
IkReal x136=(cj3*cj8);
IkReal x137=(cj3*sj8);
j6eval[0]=x135;
j6eval[1]=((IKabs((((r20*x137))+((r21*x136)))))+(IKabs(((((-1.0)*cj3*r22*x134))+(((-1.0)*r21*sj7*x137))+((r20*sj7*x136))))));
j6eval[2]=IKsign(x135);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
IkReal x138=((((-1.0)*(1.0)*cj7*r11*sj8))+((cj7*cj8*r10))+((r12*sj7)));
IkReal x139=(r21*sj3);
IkReal x140=(r20*sj3);
j6eval[0]=x138;
j6eval[1]=((IKabs((((cj7*r22*sj3))+(((-1.0)*cj8*sj7*x140))+((sj7*sj8*x139)))))+(IKabs((((cj8*x139))+((sj8*x140))))));
j6eval[2]=IKsign(x138);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x141=(((cj7*r21*sj8))+(((-1.0)*(1.0)*r22*sj7))+(((-1.0)*(1.0)*cj7*cj8*r20)));
j6eval[0]=x141;
j6eval[1]=IKsign(x141);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
IkReal x142=(cj8*r10);
IkReal x143=(r11*sj8);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=(((cj7*x142))+(((-1.0)*cj7*x143))+((r12*sj7)));
evalcond[2]=((-0.095)+(((-1.0)*(1.0)*py))+(((-0.09)*x143))+(((0.09)*x142)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x144=((1.0)*cj7);
IkReal x145=(((cj7*cj8*r20))+(((-1.0)*r21*sj8*x144))+((r22*sj7)));
j6eval[0]=x145;
j6eval[1]=IKsign(x145);
j6eval[2]=((IKabs((((cj8*r01))+((r00*sj8)))))+(IKabs(((((-1.0)*r02*x144))+(((-1.0)*(1.0)*r01*sj7*sj8))+((cj8*r00*sj7))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x146=((1.0)*sj7);
IkReal x147=((1.0)*cj7);
IkReal x148=((((-1.0)*cj8*r00*x147))+((cj7*r01*sj8))+(((-1.0)*r02*x146)));
j6eval[0]=x148;
j6eval[1]=((IKabs(((((-1.0)*r22*x147))+((cj8*r20*sj7))+(((-1.0)*r21*sj8*x146)))))+(IKabs((((r20*sj8))+((cj8*r21))))));
j6eval[2]=IKsign(x148);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x149=r10*r10;
IkReal x150=r11*r11;
IkReal x151=cj7*cj7;
IkReal x152=((2.0)*cj7*r12);
IkReal x153=(cj8*r10*sj7);
IkReal x154=(r11*sj7*sj8);
IkReal x155=(x150*x151);
IkReal x156=(r10*sj8);
IkReal x157=cj8*cj8;
IkReal x158=(((x155*x157))+x150+x149+(((2.0)*cj8*r11*x151*x156))+(((-1.0)*x152*x153))+(((-1.0)*x149*x151*x157))+((x152*x154))+(((-1.0)*x155))+((x151*(r12*r12))));
j6eval[0]=x158;
j6eval[1]=IKsign(x158);
j6eval[2]=((IKabs(((((-1.0)*x153))+x154+((cj7*r12)))))+(IKabs((x156+((cj8*r11))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j4, j5, j6]

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x159=(r11*sj7*sj8);
IkReal x160=(cj8*r10*sj7);
IkReal x161=(r10*sj8);
IkReal x162=r10*r10;
IkReal x163=r11*r11;
IkReal x164=cj7*cj7;
IkReal x165=((2.0)*cj7*r12);
IkReal x166=(x163*x164);
IkReal x167=cj8*cj8;
CheckValue<IkReal> x168 = IKatan2WithCheck(IkReal((x159+((cj7*r12))+(((-1.0)*x160)))),IkReal((((cj8*r11))+x161)),IKFAST_ATAN2_MAGTHRESH);
if(!x168.valid){
continue;
}
CheckValue<IkReal> x169=IKPowWithIntegerCheck(IKsign(((((-1.0)*x160*x165))+((x166*x167))+((x164*(r12*r12)))+((x159*x165))+x163+x162+(((2.0)*cj8*r11*x161*x164))+(((-1.0)*x166))+(((-1.0)*x162*x164*x167)))),-1);
if(!x169.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x168.value)+(((1.5707963267949)*(x169.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x170=IKsin(j6);
IkReal x171=(cj8*r11);
IkReal x172=(r10*sj8);
IkReal x173=IKcos(j6);
IkReal x174=((1.0)*x173);
IkReal x175=((1.0)*sj8*x173);
IkReal x176=((1.0)*cj7*x170);
IkReal x177=((1.0)*cj8*x173);
IkReal x178=(cj8*sj7*x170);
IkReal x179=((1.0)*sj7*sj8*x170);
evalcond[0]=((((-1.0)*r11*sj7*x175))+((x170*x171))+((x170*x172))+((cj8*r10*sj7*x173))+(((-1.0)*cj7*r12*x174)));
evalcond[1]=((((-1.0)*r21*x177))+(((-1.0)*r21*x179))+(((-1.0)*r22*x176))+(((-1.0)*r20*x175))+((r20*x178)));
evalcond[2]=((((-1.0)*r02*x176))+(((-1.0)*r01*x179))+(((-1.0)*r01*x177))+(((-1.0)*r00*x175))+((r00*x178)));
evalcond[3]=((1.0)+(((-1.0)*x171*x174))+(((-1.0)*x172*x174))+(((-1.0)*r12*x176))+((r10*x178))+(((-1.0)*r11*x179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
IkReal x180=(cj8*r20);
IkReal x181=(r02*sj7);
IkReal x182=(r21*sj8);
IkReal x183=(r22*sj7);
IkReal x184=(cj7*cj8*r00);
IkReal x185=(cj7*cj8*r20);
IkReal x186=(cj7*r01*sj8);
IkReal x187=(cj7*r21*sj8);
IkReal x188=((((-1.0)*(12.0)*pz))+(((-0.36)*x181))+(((-2.82)*x187))+(((-0.36)*x184))+(((2.82)*x183))+(((1.08)*x180))+(((2.82)*x185))+(((-1.08)*x182))+(((0.36)*x186)));
j4eval[0]=((IKabs(((1.0)+(((-0.12)*x181))+(((-1.0)*(4.0)*pz))+(((-0.36)*x182))+(((-0.12)*x184))+(((0.94)*x185))+(((0.94)*x183))+(((-0.94)*x187))+(((0.36)*x180))+(((0.12)*x186)))))+(IKabs(((-1.0)+x188)))+(IKabs(((1.0)+x188))));
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j4, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j4evalpoly[1];
IkReal x189=(cj8*r20);
IkReal x190=(r02*sj7);
IkReal x191=(r21*sj8);
IkReal x192=(r22*sj7);
IkReal x193=(cj7*cj8*r00);
IkReal x194=(cj7*cj8*r20);
IkReal x195=(cj7*r01*sj8);
IkReal x196=(cj7*r21*sj8);
IkReal x197=((((0.94)*x192))+(((-0.94)*x196))+(((-1.0)*(4.0)*pz))+(((-0.36)*x191))+(((0.36)*x189))+(((0.94)*x194))+(((0.12)*x195))+(((-0.12)*x193))+(((-0.12)*x190)));
IkReal x198=((((1.08)*x189))+(((-0.36)*x193))+(((-1.0)*(12.0)*pz))+(((0.36)*x195))+(((2.82)*x194))+(((-1.08)*x191))+(((-2.82)*x196))+(((-0.36)*x190))+(((2.82)*x192)));
op[0]=((1.0)+x197);
op[1]=0;
op[2]=((1.0)+x198);
op[3]=0;
op[4]=((-1.0)+x198);
op[5]=0;
op[6]=((-1.0)+x197);
polyroots6(op,zeror,numroots);
IkReal j4array[6], cj4array[6], sj4array[6], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[6]={true,true,true,true,true,true};
_nj4 = 6;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

IkReal x199=(cj8*r00);
IkReal x200=(cj8*r20);
IkReal x201=(r01*sj8);
IkReal x202=(r21*sj8);
IkReal x203=(r22*sj7);
IkReal x204=(cj7*cj8*r20);
IkReal x205=(cj7*r21*sj8);
IkReal x206=((((-0.0846)*x202))+(((0.0846)*x200))+(((-0.2245)*x205))+(((-0.0108)*x201))+(((0.0108)*x199))+(((-1.0)*(0.94)*pz))+(((0.2245)*x204))+(((0.2245)*x203))+(((-1.0)*(0.12)*px)));
IkReal x207=((((0.6735)*x204))+(((-0.6735)*x205))+(((-0.0324)*x201))+(((0.6735)*x203))+(((-1.0)*(0.36)*px))+(((0.2538)*x200))+(((-0.2538)*x202))+(((-1.0)*(2.82)*pz))+(((0.0324)*x199)));
j4evalpoly[0]=((-0.235)+(((htj4*htj4*htj4*htj4)*(((0.235)+x207))))+(((-1.0)*(0.12)*(htj4*htj4*htj4)))+(((htj4*htj4*htj4*htj4*htj4*htj4)*(((0.235)+x206))))+(((-1.0)*(0.06)*(htj4*htj4*htj4*htj4*htj4)))+(((-1.0)*(0.06)*htj4))+(((htj4*htj4)*(((-0.235)+x207))))+x206);
if( IKabs(j4evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x208=(r22*sj7);
IkReal x209=((1.0)*cj4);
IkReal x210=(r02*sj7);
IkReal x211=(cj4*cj7*sj8);
IkReal x212=(cj7*sj4);
IkReal x213=(cj8*r20);
IkReal x214=(cj8*r00);
IkReal x215=((1.0)*cj4*cj7);
IkReal x216=((1.0)*cj7*sj4);
if( IKabs((((r01*x211))+(((-1.0)*x209*x210))+(((-1.0)*x214*x215))+(((-1.0)*r21*sj8*x216))+((x212*x213))+((sj4*x208)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj8*x212))+(((-1.0)*sj4*x210))+(((-1.0)*x214*x216))+((r21*x211))+(((-1.0)*x213*x215))+(((-1.0)*x208*x209)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x211))+(((-1.0)*x209*x210))+(((-1.0)*x214*x215))+(((-1.0)*r21*sj8*x216))+((x212*x213))+((sj4*x208))))+IKsqr((((r01*sj8*x212))+(((-1.0)*sj4*x210))+(((-1.0)*x214*x216))+((r21*x211))+(((-1.0)*x213*x215))+(((-1.0)*x208*x209))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r01*x211))+(((-1.0)*x209*x210))+(((-1.0)*x214*x215))+(((-1.0)*r21*sj8*x216))+((x212*x213))+((sj4*x208))), (((r01*sj8*x212))+(((-1.0)*sj4*x210))+(((-1.0)*x214*x216))+((r21*x211))+(((-1.0)*x213*x215))+(((-1.0)*x208*x209))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x217=IKsin(j5);
IkReal x218=(cj4*x217);
IkReal x219=IKcos(j5);
IkReal x220=(sj4*x219);
IkReal x221=(cj7*cj8);
IkReal x222=((1.0)*cj7*sj8);
IkReal x223=(cj4*x219);
IkReal x224=(sj4*x217);
IkReal x225=((((-1.0)*x224))+x223);
IkReal x226=(cj8*sj6);
IkReal x227=(sj6*sj8);
IkReal x228=((1.0)*cj6*cj7);
IkReal x229=(cj6*cj8*sj7);
IkReal x230=((1.0)*cj6*sj7*sj8);
IkReal x231=((0.09)*cj8);
IkReal x232=((0.09)*sj8);
evalcond[0]=(((r02*sj7))+(((-1.0)*r01*x222))+((r00*x221))+x218+x220);
evalcond[1]=((((-1.0)*r21*x222))+((r20*x221))+((r22*sj7))+x225);
evalcond[2]=(((r00*x227))+((r00*x229))+(((-1.0)*r02*x228))+((r01*x226))+x225+(((-1.0)*r01*x230)));
evalcond[3]=((((-1.0)*r21*x230))+((r20*x229))+(((-1.0)*x218))+((r20*x227))+(((-1.0)*r22*x228))+((r21*x226))+(((-1.0)*x220)));
evalcond[4]=(((r20*x231))+(((-0.235)*x223))+(((-1.0)*(1.0)*pz))+(((0.03)*x220))+(((0.235)*x224))+(((-1.0)*(0.25)*cj4))+(((-1.0)*r21*x232))+(((0.03)*x218)));
evalcond[5]=((((-1.0)*(1.0)*px))+(((-1.0)*r01*x232))+(((-0.235)*x218))+(((-0.235)*x220))+(((-0.03)*x223))+(((0.03)*x224))+(((-1.0)*(0.25)*sj4))+((r00*x231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x233=((1.0)*sj7);
IkReal x234=((1.0)*cj7);
CheckValue<IkReal> x235=IKPowWithIntegerCheck(IKsign((((cj7*r01*sj8))+(((-1.0)*r02*x233))+(((-1.0)*cj8*r00*x234)))),-1);
if(!x235.valid){
continue;
}
CheckValue<IkReal> x236 = IKatan2WithCheck(IkReal((((r20*sj8))+((cj8*r21)))),IkReal((((cj8*r20*sj7))+(((-1.0)*r22*x234))+(((-1.0)*r21*sj8*x233)))),IKFAST_ATAN2_MAGTHRESH);
if(!x236.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x235.value)))+(x236.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x237=IKsin(j6);
IkReal x238=(cj8*r11);
IkReal x239=(r10*sj8);
IkReal x240=IKcos(j6);
IkReal x241=((1.0)*x240);
IkReal x242=((1.0)*sj8*x240);
IkReal x243=((1.0)*cj7*x237);
IkReal x244=((1.0)*cj8*x240);
IkReal x245=(cj8*sj7*x237);
IkReal x246=((1.0)*sj7*sj8*x237);
evalcond[0]=((((-1.0)*cj7*r12*x241))+((x237*x239))+((x237*x238))+(((-1.0)*r11*sj7*x242))+((cj8*r10*sj7*x240)));
evalcond[1]=((((-1.0)*r20*x242))+(((-1.0)*r21*x244))+(((-1.0)*r21*x246))+(((-1.0)*r22*x243))+((r20*x245)));
evalcond[2]=((((-1.0)*r00*x242))+(((-1.0)*r01*x246))+((r00*x245))+(((-1.0)*r01*x244))+(((-1.0)*r02*x243)));
evalcond[3]=((1.0)+(((-1.0)*r11*x246))+(((-1.0)*x239*x241))+(((-1.0)*r12*x243))+((r10*x245))+(((-1.0)*x238*x241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
IkReal x247=(cj8*r20);
IkReal x248=(r02*sj7);
IkReal x249=(r21*sj8);
IkReal x250=(r22*sj7);
IkReal x251=(cj7*cj8*r00);
IkReal x252=(cj7*cj8*r20);
IkReal x253=(cj7*r01*sj8);
IkReal x254=(cj7*r21*sj8);
IkReal x255=((((2.82)*x250))+(((-1.0)*(12.0)*pz))+(((-2.82)*x254))+(((-0.36)*x248))+(((2.82)*x252))+(((-1.08)*x249))+(((0.36)*x253))+(((1.08)*x247))+(((-0.36)*x251)));
j4eval[0]=((IKabs(((1.0)+(((0.36)*x247))+(((-1.0)*(4.0)*pz))+(((-0.12)*x248))+(((0.94)*x250))+(((0.94)*x252))+(((-0.12)*x251))+(((-0.36)*x249))+(((-0.94)*x254))+(((0.12)*x253)))))+(IKabs(((-1.0)+x255)))+(IKabs(((1.0)+x255))));
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j4, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j4evalpoly[1];
IkReal x256=(cj8*r20);
IkReal x257=(r02*sj7);
IkReal x258=(r21*sj8);
IkReal x259=(r22*sj7);
IkReal x260=(cj7*cj8*r00);
IkReal x261=(cj7*cj8*r20);
IkReal x262=(cj7*r01*sj8);
IkReal x263=(cj7*r21*sj8);
IkReal x264=((((-0.94)*x263))+(((0.36)*x256))+(((-0.12)*x260))+(((-1.0)*(4.0)*pz))+(((-0.36)*x258))+(((-0.12)*x257))+(((0.12)*x262))+(((0.94)*x259))+(((0.94)*x261)));
IkReal x265=((((-0.36)*x260))+(((-1.0)*(12.0)*pz))+(((0.36)*x262))+(((-1.08)*x258))+(((-0.36)*x257))+(((2.82)*x259))+(((-2.82)*x263))+(((2.82)*x261))+(((1.08)*x256)));
op[0]=((1.0)+x264);
op[1]=0;
op[2]=((1.0)+x265);
op[3]=0;
op[4]=((-1.0)+x265);
op[5]=0;
op[6]=((-1.0)+x264);
polyroots6(op,zeror,numroots);
IkReal j4array[6], cj4array[6], sj4array[6], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[6]={true,true,true,true,true,true};
_nj4 = 6;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

IkReal x266=(cj8*r00);
IkReal x267=(cj8*r20);
IkReal x268=(r01*sj8);
IkReal x269=(r21*sj8);
IkReal x270=(r22*sj7);
IkReal x271=(cj7*cj8*r20);
IkReal x272=(cj7*r21*sj8);
IkReal x273=((((-0.0846)*x269))+(((0.2245)*x271))+(((-0.2245)*x272))+(((-0.0108)*x268))+(((-1.0)*(0.94)*pz))+(((0.0108)*x266))+(((0.0846)*x267))+(((-1.0)*(0.12)*px))+(((0.2245)*x270)));
IkReal x274=((((-1.0)*(0.36)*px))+(((-0.6735)*x272))+(((-0.0324)*x268))+(((-1.0)*(2.82)*pz))+(((0.2538)*x267))+(((0.6735)*x270))+(((0.0324)*x266))+(((0.6735)*x271))+(((-0.2538)*x269)));
j4evalpoly[0]=((-0.235)+(((-1.0)*(0.12)*(htj4*htj4*htj4)))+(((htj4*htj4)*(((-0.235)+x274))))+(((htj4*htj4*htj4*htj4)*(((0.235)+x274))))+(((-1.0)*(0.06)*(htj4*htj4*htj4*htj4*htj4)))+x273+(((-1.0)*(0.06)*htj4))+(((htj4*htj4*htj4*htj4*htj4*htj4)*(((0.235)+x273)))));
if( IKabs(j4evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x275=(r22*sj7);
IkReal x276=((1.0)*cj4);
IkReal x277=(r02*sj7);
IkReal x278=(cj4*cj7*sj8);
IkReal x279=(cj7*sj4);
IkReal x280=(cj8*r20);
IkReal x281=(cj8*r00);
IkReal x282=((1.0)*cj4*cj7);
IkReal x283=((1.0)*cj7*sj4);
if( IKabs(((((-1.0)*x276*x277))+((x279*x280))+(((-1.0)*r21*sj8*x283))+((sj4*x275))+((r01*x278))+(((-1.0)*x281*x282)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj8*x279))+(((-1.0)*x281*x283))+(((-1.0)*sj4*x277))+(((-1.0)*x275*x276))+((r21*x278))+(((-1.0)*x280*x282)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x276*x277))+((x279*x280))+(((-1.0)*r21*sj8*x283))+((sj4*x275))+((r01*x278))+(((-1.0)*x281*x282))))+IKsqr((((r01*sj8*x279))+(((-1.0)*x281*x283))+(((-1.0)*sj4*x277))+(((-1.0)*x275*x276))+((r21*x278))+(((-1.0)*x280*x282))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*x276*x277))+((x279*x280))+(((-1.0)*r21*sj8*x283))+((sj4*x275))+((r01*x278))+(((-1.0)*x281*x282))), (((r01*sj8*x279))+(((-1.0)*x281*x283))+(((-1.0)*sj4*x277))+(((-1.0)*x275*x276))+((r21*x278))+(((-1.0)*x280*x282))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x284=IKsin(j5);
IkReal x285=(cj4*x284);
IkReal x286=IKcos(j5);
IkReal x287=(sj4*x286);
IkReal x288=(cj7*cj8);
IkReal x289=((1.0)*cj7*sj8);
IkReal x290=(cj4*x286);
IkReal x291=(sj4*x284);
IkReal x292=(x290+(((-1.0)*x291)));
IkReal x293=(cj8*sj6);
IkReal x294=(sj6*sj8);
IkReal x295=((1.0)*cj6*cj7);
IkReal x296=(cj6*cj8*sj7);
IkReal x297=((1.0)*cj6*sj7*sj8);
IkReal x298=((0.09)*cj8);
IkReal x299=((0.09)*sj8);
evalcond[0]=((((-1.0)*r01*x289))+((r00*x288))+((r02*sj7))+x287+x285);
evalcond[1]=(x292+((r20*x288))+(((-1.0)*r21*x289))+((r22*sj7)));
evalcond[2]=(x292+(((-1.0)*r01*x297))+((r01*x293))+(((-1.0)*r02*x295))+((r00*x296))+((r00*x294)));
evalcond[3]=((((-1.0)*r22*x295))+((r20*x294))+(((-1.0)*r21*x297))+(((-1.0)*x287))+((r21*x293))+((r20*x296))+(((-1.0)*x285)));
evalcond[4]=(((r20*x298))+(((0.03)*x285))+(((-1.0)*(1.0)*pz))+(((-1.0)*(0.25)*cj4))+(((-1.0)*r21*x299))+(((0.235)*x291))+(((0.03)*x287))+(((-0.235)*x290)));
evalcond[5]=((((-1.0)*(1.0)*px))+((r00*x298))+(((0.03)*x291))+(((-1.0)*r01*x299))+(((-0.03)*x290))+(((-0.235)*x285))+(((-1.0)*(0.25)*sj4))+(((-0.235)*x287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x300=((1.0)*cj7);
CheckValue<IkReal> x301 = IKatan2WithCheck(IkReal((((cj8*r01))+((r00*sj8)))),IkReal(((((-1.0)*r02*x300))+(((-1.0)*(1.0)*r01*sj7*sj8))+((cj8*r00*sj7)))),IKFAST_ATAN2_MAGTHRESH);
if(!x301.valid){
continue;
}
CheckValue<IkReal> x302=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj8*x300))+((cj7*cj8*r20))+((r22*sj7)))),-1);
if(!x302.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x301.value)+(((1.5707963267949)*(x302.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x303=IKsin(j6);
IkReal x304=(cj8*r11);
IkReal x305=(r10*sj8);
IkReal x306=IKcos(j6);
IkReal x307=((1.0)*x306);
IkReal x308=((1.0)*sj8*x306);
IkReal x309=((1.0)*cj7*x303);
IkReal x310=((1.0)*cj8*x306);
IkReal x311=(cj8*sj7*x303);
IkReal x312=((1.0)*sj7*sj8*x303);
evalcond[0]=((((-1.0)*r11*sj7*x308))+((x303*x304))+(((-1.0)*cj7*r12*x307))+((cj8*r10*sj7*x306))+((x303*x305)));
evalcond[1]=(((r20*x311))+(((-1.0)*r20*x308))+(((-1.0)*r21*x312))+(((-1.0)*r21*x310))+(((-1.0)*r22*x309)));
evalcond[2]=((((-1.0)*r01*x312))+(((-1.0)*r00*x308))+(((-1.0)*r02*x309))+((r00*x311))+(((-1.0)*r01*x310)));
evalcond[3]=((1.0)+(((-1.0)*x305*x307))+((r10*x311))+(((-1.0)*r11*x312))+(((-1.0)*r12*x309))+(((-1.0)*x304*x307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
IkReal x313=(cj8*r20);
IkReal x314=(r02*sj7);
IkReal x315=(r21*sj8);
IkReal x316=(r22*sj7);
IkReal x317=(cj7*cj8*r00);
IkReal x318=(cj7*cj8*r20);
IkReal x319=(cj7*r01*sj8);
IkReal x320=(cj7*r21*sj8);
IkReal x321=((((-1.0)*(12.0)*pz))+(((-2.82)*x320))+(((-0.36)*x317))+(((2.82)*x316))+(((-0.36)*x314))+(((0.36)*x319))+(((2.82)*x318))+(((-1.08)*x315))+(((1.08)*x313)));
j4eval[0]=((IKabs(((1.0)+x321)))+(IKabs(((-1.0)+x321)))+(IKabs(((1.0)+(((-0.36)*x315))+(((0.36)*x313))+(((-0.94)*x320))+(((-1.0)*(4.0)*pz))+(((0.12)*x319))+(((0.94)*x316))+(((-0.12)*x314))+(((0.94)*x318))+(((-0.12)*x317))))));
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j4, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j4evalpoly[1];
IkReal x322=(cj8*r20);
IkReal x323=(r02*sj7);
IkReal x324=(r21*sj8);
IkReal x325=(r22*sj7);
IkReal x326=(cj7*cj8*r00);
IkReal x327=(cj7*cj8*r20);
IkReal x328=(cj7*r01*sj8);
IkReal x329=(cj7*r21*sj8);
IkReal x330=((((0.94)*x327))+(((-0.12)*x326))+(((-0.12)*x323))+(((-1.0)*(4.0)*pz))+(((0.36)*x322))+(((-0.36)*x324))+(((0.12)*x328))+(((0.94)*x325))+(((-0.94)*x329)));
IkReal x331=((((-0.36)*x326))+(((0.36)*x328))+(((-1.0)*(12.0)*pz))+(((-1.08)*x324))+(((-2.82)*x329))+(((2.82)*x325))+(((-0.36)*x323))+(((2.82)*x327))+(((1.08)*x322)));
op[0]=((1.0)+x330);
op[1]=0;
op[2]=((1.0)+x331);
op[3]=0;
op[4]=((-1.0)+x331);
op[5]=0;
op[6]=((-1.0)+x330);
polyroots6(op,zeror,numroots);
IkReal j4array[6], cj4array[6], sj4array[6], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[6]={true,true,true,true,true,true};
_nj4 = 6;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

IkReal x332=(cj8*r00);
IkReal x333=(cj8*r20);
IkReal x334=(r01*sj8);
IkReal x335=(r21*sj8);
IkReal x336=(r22*sj7);
IkReal x337=(cj7*cj8*r20);
IkReal x338=(cj7*r21*sj8);
IkReal x339=((((0.2245)*x337))+(((-0.2245)*x338))+(((0.0846)*x333))+(((-0.0846)*x335))+(((-0.0108)*x334))+(((-1.0)*(0.94)*pz))+(((0.2245)*x336))+(((0.0108)*x332))+(((-1.0)*(0.12)*px)));
IkReal x340=((((0.0324)*x332))+(((-0.6735)*x338))+(((-1.0)*(0.36)*px))+(((0.2538)*x333))+(((-0.2538)*x335))+(((0.6735)*x337))+(((-1.0)*(2.82)*pz))+(((0.6735)*x336))+(((-0.0324)*x334)));
j4evalpoly[0]=((-0.235)+(((-1.0)*(0.12)*(htj4*htj4*htj4)))+(((-1.0)*(0.06)*(htj4*htj4*htj4*htj4*htj4)))+(((htj4*htj4*htj4*htj4*htj4*htj4)*(((0.235)+x339))))+(((htj4*htj4)*(((-0.235)+x340))))+x339+(((-1.0)*(0.06)*htj4))+(((htj4*htj4*htj4*htj4)*(((0.235)+x340)))));
if( IKabs(j4evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x341=(r22*sj7);
IkReal x342=((1.0)*cj4);
IkReal x343=(r02*sj7);
IkReal x344=(cj4*cj7*sj8);
IkReal x345=(cj7*sj4);
IkReal x346=(cj8*r20);
IkReal x347=(cj8*r00);
IkReal x348=((1.0)*cj4*cj7);
IkReal x349=((1.0)*cj7*sj4);
if( IKabs(((((-1.0)*x342*x343))+((r01*x344))+(((-1.0)*x347*x348))+((sj4*x341))+((x345*x346))+(((-1.0)*r21*sj8*x349)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x344))+(((-1.0)*x341*x342))+(((-1.0)*sj4*x343))+(((-1.0)*x346*x348))+((r01*sj8*x345))+(((-1.0)*x347*x349)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x342*x343))+((r01*x344))+(((-1.0)*x347*x348))+((sj4*x341))+((x345*x346))+(((-1.0)*r21*sj8*x349))))+IKsqr((((r21*x344))+(((-1.0)*x341*x342))+(((-1.0)*sj4*x343))+(((-1.0)*x346*x348))+((r01*sj8*x345))+(((-1.0)*x347*x349))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*x342*x343))+((r01*x344))+(((-1.0)*x347*x348))+((sj4*x341))+((x345*x346))+(((-1.0)*r21*sj8*x349))), (((r21*x344))+(((-1.0)*x341*x342))+(((-1.0)*sj4*x343))+(((-1.0)*x346*x348))+((r01*sj8*x345))+(((-1.0)*x347*x349))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x350=IKsin(j5);
IkReal x351=(cj4*x350);
IkReal x352=IKcos(j5);
IkReal x353=(sj4*x352);
IkReal x354=(cj7*cj8);
IkReal x355=((1.0)*cj7*sj8);
IkReal x356=(cj4*x352);
IkReal x357=(sj4*x350);
IkReal x358=((((-1.0)*x357))+x356);
IkReal x359=(cj8*sj6);
IkReal x360=(sj6*sj8);
IkReal x361=((1.0)*cj6*cj7);
IkReal x362=(cj6*cj8*sj7);
IkReal x363=((1.0)*cj6*sj7*sj8);
IkReal x364=((0.09)*cj8);
IkReal x365=((0.09)*sj8);
evalcond[0]=(((r02*sj7))+x351+x353+((r00*x354))+(((-1.0)*r01*x355)));
evalcond[1]=(((r20*x354))+x358+(((-1.0)*r21*x355))+((r22*sj7)));
evalcond[2]=(((r01*x359))+((r00*x360))+((r00*x362))+x358+(((-1.0)*r01*x363))+(((-1.0)*r02*x361)));
evalcond[3]=((((-1.0)*x351))+((r20*x362))+(((-1.0)*r21*x363))+(((-1.0)*x353))+((r20*x360))+((r21*x359))+(((-1.0)*r22*x361)));
evalcond[4]=((((0.235)*x357))+(((0.03)*x353))+(((-1.0)*(1.0)*pz))+((r20*x364))+(((0.03)*x351))+(((-1.0)*r21*x365))+(((-0.235)*x356))+(((-1.0)*(0.25)*cj4)));
evalcond[5]=((((-1.0)*(1.0)*px))+(((-0.235)*x351))+((r00*x364))+(((-1.0)*r01*x365))+(((-0.235)*x353))+(((0.03)*x357))+(((-1.0)*(0.25)*sj4))+(((-0.03)*x356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x366=(cj8*r10);
IkReal x367=(r11*sj8);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=(((cj7*x366))+(((-1.0)*cj7*x367))+((r12*sj7)));
evalcond[2]=((0.095)+(((-1.0)*(1.0)*py))+(((-0.09)*x367))+(((0.09)*x366)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x368=((1.0)*sj8);
IkReal x369=(((cj7*cj8*r20))+((r22*sj7))+(((-1.0)*cj7*r21*x368)));
IkReal x370=((1.0)*cj8);
j6eval[0]=x369;
j6eval[1]=IKsign(x369);
j6eval[2]=((IKabs((((r01*sj7*sj8))+(((-1.0)*r00*sj7*x370))+((cj7*r02)))))+(IKabs(((((-1.0)*r01*x370))+(((-1.0)*r00*x368))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x371=((1.0)*cj8);
IkReal x372=(((cj7*r01*sj8))+(((-1.0)*cj7*r00*x371))+(((-1.0)*(1.0)*r02*sj7)));
j6eval[0]=x372;
j6eval[1]=IKsign(x372);
j6eval[2]=((IKabs(((((-1.0)*r21*x371))+(((-1.0)*(1.0)*r20*sj8)))))+(IKabs((((cj7*r22))+((r21*sj7*sj8))+(((-1.0)*r20*sj7*x371))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x373=r10*r10;
IkReal x374=r11*r11;
IkReal x375=cj7*cj7;
IkReal x376=((2.0)*cj7*r12);
IkReal x377=(cj8*r10*sj7);
IkReal x378=(x374*x375);
IkReal x379=(r10*sj8);
IkReal x380=cj8*cj8;
IkReal x381=((((-1.0)*x378))+(((2.0)*cj8*r11*x375*x379))+((x378*x380))+((x375*(r12*r12)))+(((-1.0)*x373*x375*x380))+((r11*sj7*sj8*x376))+(((-1.0)*x376*x377))+x374+x373);
IkReal x382=((1.0)*r11);
j6eval[0]=x381;
j6eval[1]=IKsign(x381);
j6eval[2]=((IKabs(((((-1.0)*sj7*sj8*x382))+x377+(((-1.0)*cj7*r12)))))+(IKabs(((((-1.0)*x379))+(((-1.0)*cj8*x382))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j4, j5, j6]

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x383=(cj8*r10*sj7);
IkReal x384=((1.0)*r11);
IkReal x385=(r10*sj8);
IkReal x386=r10*r10;
IkReal x387=r11*r11;
IkReal x388=cj7*cj7;
IkReal x389=((2.0)*cj7*r12);
IkReal x390=(x387*x388);
IkReal x391=cj8*cj8;
CheckValue<IkReal> x392 = IKatan2WithCheck(IkReal(((((-1.0)*sj7*sj8*x384))+x383+(((-1.0)*cj7*r12)))),IkReal(((((-1.0)*cj8*x384))+(((-1.0)*x385)))),IKFAST_ATAN2_MAGTHRESH);
if(!x392.valid){
continue;
}
CheckValue<IkReal> x393=IKPowWithIntegerCheck(IKsign(((((-1.0)*x386*x388*x391))+((x390*x391))+((r11*sj7*sj8*x389))+(((-1.0)*x383*x389))+((x388*(r12*r12)))+(((-1.0)*x390))+x387+x386+(((2.0)*cj8*r11*x385*x388)))),-1);
if(!x393.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x392.value)+(((1.5707963267949)*(x393.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x394=IKsin(j6);
IkReal x395=(cj8*r11);
IkReal x396=(r10*sj8);
IkReal x397=IKcos(j6);
IkReal x398=((1.0)*x397);
IkReal x399=((1.0)*sj8*x397);
IkReal x400=((1.0)*cj7*x394);
IkReal x401=((1.0)*cj8*x397);
IkReal x402=(cj8*sj7*x394);
IkReal x403=((1.0)*sj7*sj8*x394);
evalcond[0]=(((cj8*r10*sj7*x397))+((x394*x395))+((x394*x396))+(((-1.0)*r11*sj7*x399))+(((-1.0)*cj7*r12*x398)));
evalcond[1]=((((-1.0)*r21*x401))+(((-1.0)*r20*x399))+((r20*x402))+(((-1.0)*r21*x403))+(((-1.0)*r22*x400)));
evalcond[2]=((((-1.0)*r00*x399))+(((-1.0)*r02*x400))+(((-1.0)*r01*x403))+(((-1.0)*r01*x401))+((r00*x402)));
evalcond[3]=((-1.0)+(((-1.0)*x396*x398))+((r10*x402))+(((-1.0)*r11*x403))+(((-1.0)*x395*x398))+(((-1.0)*r12*x400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x404=(cj8*r20);
IkReal x405=(r02*sj7);
IkReal x406=(r21*sj8);
IkReal x407=(r22*sj7);
IkReal x408=(cj7*cj8*r00);
IkReal x409=(cj7*cj8*r20);
IkReal x410=(cj7*r01*sj8);
IkReal x411=(cj7*r21*sj8);
IkReal x412=((((2.82)*x411))+(((-0.36)*x408))+(((-0.36)*x405))+(((0.36)*x410))+(((-2.82)*x409))+(((1.08)*x406))+(((-1.08)*x404))+(((12.0)*pz))+(((-2.82)*x407)));
j4eval[0]=((IKabs(((-1.0)+(((-0.12)*x405))+(((-0.94)*x409))+(((-0.12)*x408))+(((0.36)*x406))+(((-0.94)*x407))+(((0.94)*x411))+(((-0.36)*x404))+(((4.0)*pz))+(((0.12)*x410)))))+(IKabs(((1.0)+x412)))+(IKabs(((-1.0)+x412))));
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j4, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j4evalpoly[1];
IkReal x413=(cj8*r20);
IkReal x414=(r02*sj7);
IkReal x415=(r21*sj8);
IkReal x416=(r22*sj7);
IkReal x417=(cj7*cj8*r00);
IkReal x418=(cj7*cj8*r20);
IkReal x419=(cj7*r01*sj8);
IkReal x420=(cj7*r21*sj8);
IkReal x421=((((-0.12)*x414))+(((-0.12)*x417))+(((-0.94)*x416))+(((-0.94)*x418))+(((4.0)*pz))+(((0.36)*x415))+(((0.12)*x419))+(((-0.36)*x413))+(((0.94)*x420)));
IkReal x422=((((2.82)*x420))+(((1.08)*x415))+(((-2.82)*x416))+(((-0.36)*x417))+(((-1.08)*x413))+(((12.0)*pz))+(((-0.36)*x414))+(((0.36)*x419))+(((-2.82)*x418)));
op[0]=((-1.0)+x421);
op[1]=0;
op[2]=((-1.0)+x422);
op[3]=0;
op[4]=((1.0)+x422);
op[5]=0;
op[6]=((1.0)+x421);
polyroots6(op,zeror,numroots);
IkReal j4array[6], cj4array[6], sj4array[6], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[6]={true,true,true,true,true,true};
_nj4 = 6;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

IkReal x423=(cj8*r20);
IkReal x424=((0.36)*x423);
IkReal x425=(r21*sj8);
IkReal x426=((0.36)*x425);
IkReal x427=(r22*sj7);
IkReal x428=(cj6*cj7*r22);
IkReal x429=(cj7*cj8*r20);
IkReal x430=(cj7*r21*sj8);
IkReal x431=(cj8*r21*sj6);
IkReal x432=(r20*sj6*sj8);
IkReal x433=((0.12)*cj6*sj7);
IkReal x434=((((0.94)*x427))+(((0.12)*x431))+(((-1.0)*x426))+(((-1.0)*(4.0)*pz))+((x423*x433))+x424+(((0.12)*x432))+(((-0.94)*x430))+(((-1.0)*x425*x433))+(((-0.12)*x428))+(((0.94)*x429)));
IkReal x435=(cj6*sj7);
IkReal x436=((((2.82)*x427))+(((-1.0)*(12.0)*pz))+(((-1.08)*x425))+(((0.36)*x431))+(((1.08)*x423))+(((0.36)*x432))+(((-1.0)*x426*x435))+(((-0.36)*x428))+(((-2.82)*x430))+((x424*x435))+(((2.82)*x429)));
j4evalpoly[0]=((-1.0)+(((htj4*htj4)*(((-1.0)+x436))))+(((htj4*htj4*htj4*htj4*htj4*htj4)*(((1.0)+x434))))+x434+(((htj4*htj4*htj4*htj4)*(((1.0)+x436)))));
if( IKabs(j4evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x437=(r02*sj7);
IkReal x438=(r22*sj7);
IkReal x439=(cj4*cj7);
IkReal x440=(cj8*r00);
IkReal x441=(cj7*sj4);
IkReal x442=(cj8*r20);
IkReal x443=(r01*sj8);
IkReal x444=((1.0)*cj4*cj7);
IkReal x445=(r21*sj8);
IkReal x446=((1.0)*cj7*sj4);
if( IKabs((((x441*x442))+((sj4*x438))+((cj4*x437))+((x439*x440))+(((-1.0)*x445*x446))+(((-1.0)*x443*x444)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x443*x446))+(((-1.0)*cj4*x438))+(((-1.0)*x442*x444))+((x439*x445))+((x440*x441))+((sj4*x437)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x441*x442))+((sj4*x438))+((cj4*x437))+((x439*x440))+(((-1.0)*x445*x446))+(((-1.0)*x443*x444))))+IKsqr(((((-1.0)*x443*x446))+(((-1.0)*cj4*x438))+(((-1.0)*x442*x444))+((x439*x445))+((x440*x441))+((sj4*x437))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((x441*x442))+((sj4*x438))+((cj4*x437))+((x439*x440))+(((-1.0)*x445*x446))+(((-1.0)*x443*x444))), ((((-1.0)*x443*x446))+(((-1.0)*cj4*x438))+(((-1.0)*x442*x444))+((x439*x445))+((x440*x441))+((sj4*x437))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x447=IKcos(j5);
IkReal x448=(cj4*x447);
IkReal x449=(cj7*cj8);
IkReal x450=IKsin(j5);
IkReal x451=(sj4*x450);
IkReal x452=((1.0)*cj7*sj8);
IkReal x453=(cj4*x450);
IkReal x454=(sj4*x447);
IkReal x455=((((-1.0)*x454))+(((-1.0)*x453)));
IkReal x456=(cj8*sj6);
IkReal x457=(sj6*sj8);
IkReal x458=((1.0)*cj6*cj7);
IkReal x459=(cj6*cj8*sj7);
IkReal x460=((1.0)*cj6*sj7*sj8);
IkReal x461=((0.09)*cj8);
IkReal x462=((0.09)*sj8);
evalcond[0]=((((-1.0)*x451))+x448+((r22*sj7))+((r20*x449))+(((-1.0)*r21*x452)));
evalcond[1]=(((r02*sj7))+((r00*x449))+(((-1.0)*r01*x452))+x455);
evalcond[2]=(((r00*x457))+((r00*x459))+(((-1.0)*x448))+(((-1.0)*r01*x460))+((r01*x456))+(((-1.0)*r02*x458))+x451);
evalcond[3]=((((-1.0)*r21*x460))+((r20*x459))+x455+((r20*x457))+(((-1.0)*r22*x458))+((r21*x456)));
evalcond[4]=((((0.03)*x453))+(((0.235)*x451))+(((-1.0)*(1.0)*pz))+(((0.03)*x454))+((r20*x461))+(((-0.235)*x448))+(((-1.0)*r21*x462))+(((-1.0)*(0.25)*cj4)));
evalcond[5]=((((-1.0)*r01*x462))+(((-1.0)*(1.0)*px))+(((0.03)*x448))+(((0.25)*sj4))+(((-0.03)*x451))+(((0.235)*x454))+((r00*x461))+(((0.235)*x453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x463=((1.0)*cj8);
CheckValue<IkReal> x464 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x463))+(((-1.0)*(1.0)*r20*sj8)))),IkReal((((cj7*r22))+(((-1.0)*r20*sj7*x463))+((r21*sj7*sj8)))),IKFAST_ATAN2_MAGTHRESH);
if(!x464.valid){
continue;
}
CheckValue<IkReal> x465=IKPowWithIntegerCheck(IKsign((((cj7*r01*sj8))+(((-1.0)*(1.0)*r02*sj7))+(((-1.0)*cj7*r00*x463)))),-1);
if(!x465.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x464.value)+(((1.5707963267949)*(x465.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x466=IKsin(j6);
IkReal x467=(cj8*r11);
IkReal x468=(r10*sj8);
IkReal x469=IKcos(j6);
IkReal x470=((1.0)*x469);
IkReal x471=((1.0)*sj8*x469);
IkReal x472=((1.0)*cj7*x466);
IkReal x473=((1.0)*cj8*x469);
IkReal x474=(cj8*sj7*x466);
IkReal x475=((1.0)*sj7*sj8*x466);
evalcond[0]=((((-1.0)*r11*sj7*x471))+((cj8*r10*sj7*x469))+((x466*x468))+((x466*x467))+(((-1.0)*cj7*r12*x470)));
evalcond[1]=((((-1.0)*r20*x471))+((r20*x474))+(((-1.0)*r22*x472))+(((-1.0)*r21*x473))+(((-1.0)*r21*x475)));
evalcond[2]=((((-1.0)*r00*x471))+((r00*x474))+(((-1.0)*r02*x472))+(((-1.0)*r01*x473))+(((-1.0)*r01*x475)));
evalcond[3]=((-1.0)+(((-1.0)*x467*x470))+(((-1.0)*x468*x470))+((r10*x474))+(((-1.0)*r12*x472))+(((-1.0)*r11*x475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x476=(cj8*r20);
IkReal x477=(r02*sj7);
IkReal x478=(r21*sj8);
IkReal x479=(r22*sj7);
IkReal x480=(cj7*cj8*r00);
IkReal x481=(cj7*cj8*r20);
IkReal x482=(cj7*r01*sj8);
IkReal x483=(cj7*r21*sj8);
IkReal x484=((((-2.82)*x479))+(((-1.08)*x476))+(((-0.36)*x477))+(((-0.36)*x480))+(((1.08)*x478))+(((12.0)*pz))+(((2.82)*x483))+(((-2.82)*x481))+(((0.36)*x482)));
j4eval[0]=((IKabs(((-1.0)+(((0.36)*x478))+(((-0.36)*x476))+(((4.0)*pz))+(((0.12)*x482))+(((-0.94)*x479))+(((-0.94)*x481))+(((0.94)*x483))+(((-0.12)*x480))+(((-0.12)*x477)))))+(IKabs(((1.0)+x484)))+(IKabs(((-1.0)+x484))));
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j4, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j4evalpoly[1];
IkReal x485=(cj8*r20);
IkReal x486=(r02*sj7);
IkReal x487=(r21*sj8);
IkReal x488=(r22*sj7);
IkReal x489=(cj7*cj8*r00);
IkReal x490=(cj7*cj8*r20);
IkReal x491=(cj7*r01*sj8);
IkReal x492=(cj7*r21*sj8);
IkReal x493=((((-0.12)*x486))+(((-0.94)*x488))+(((0.36)*x487))+(((4.0)*pz))+(((-0.36)*x485))+(((0.12)*x491))+(((0.94)*x492))+(((-0.12)*x489))+(((-0.94)*x490)));
IkReal x494=((((-2.82)*x488))+(((-0.36)*x486))+(((-0.36)*x489))+(((-2.82)*x490))+(((-1.08)*x485))+(((1.08)*x487))+(((12.0)*pz))+(((2.82)*x492))+(((0.36)*x491)));
op[0]=((-1.0)+x493);
op[1]=0;
op[2]=((-1.0)+x494);
op[3]=0;
op[4]=((1.0)+x494);
op[5]=0;
op[6]=((1.0)+x493);
polyroots6(op,zeror,numroots);
IkReal j4array[6], cj4array[6], sj4array[6], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[6]={true,true,true,true,true,true};
_nj4 = 6;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

IkReal x495=(cj8*r20);
IkReal x496=((0.36)*x495);
IkReal x497=(r21*sj8);
IkReal x498=((0.36)*x497);
IkReal x499=(r22*sj7);
IkReal x500=(cj6*cj7*r22);
IkReal x501=(cj7*cj8*r20);
IkReal x502=(cj7*r21*sj8);
IkReal x503=(cj8*r21*sj6);
IkReal x504=(r20*sj6*sj8);
IkReal x505=((0.12)*cj6*sj7);
IkReal x506=((((-1.0)*x497*x505))+(((-1.0)*(4.0)*pz))+(((0.94)*x501))+(((-0.94)*x502))+((x495*x505))+(((-1.0)*x498))+(((-0.12)*x500))+(((0.12)*x504))+(((0.94)*x499))+(((0.12)*x503))+x496);
IkReal x507=(cj6*sj7);
IkReal x508=((((-1.0)*x498*x507))+(((-0.36)*x500))+(((2.82)*x499))+(((-1.0)*(12.0)*pz))+(((0.36)*x503))+(((2.82)*x501))+(((-1.08)*x497))+(((0.36)*x504))+(((1.08)*x495))+(((-2.82)*x502))+((x496*x507)));
j4evalpoly[0]=((-1.0)+(((htj4*htj4*htj4*htj4*htj4*htj4)*(((1.0)+x506))))+(((htj4*htj4)*(((-1.0)+x508))))+x506+(((htj4*htj4*htj4*htj4)*(((1.0)+x508)))));
if( IKabs(j4evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x509=(r02*sj7);
IkReal x510=(r22*sj7);
IkReal x511=(cj4*cj7);
IkReal x512=(cj8*r00);
IkReal x513=(cj7*sj4);
IkReal x514=(cj8*r20);
IkReal x515=(r01*sj8);
IkReal x516=((1.0)*cj4*cj7);
IkReal x517=(r21*sj8);
IkReal x518=((1.0)*cj7*sj4);
if( IKabs(((((-1.0)*x515*x516))+((x511*x512))+((cj4*x509))+(((-1.0)*x517*x518))+((sj4*x510))+((x513*x514)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x509))+(((-1.0)*x515*x518))+((x511*x517))+(((-1.0)*cj4*x510))+(((-1.0)*x514*x516))+((x512*x513)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x515*x516))+((x511*x512))+((cj4*x509))+(((-1.0)*x517*x518))+((sj4*x510))+((x513*x514))))+IKsqr((((sj4*x509))+(((-1.0)*x515*x518))+((x511*x517))+(((-1.0)*cj4*x510))+(((-1.0)*x514*x516))+((x512*x513))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*x515*x516))+((x511*x512))+((cj4*x509))+(((-1.0)*x517*x518))+((sj4*x510))+((x513*x514))), (((sj4*x509))+(((-1.0)*x515*x518))+((x511*x517))+(((-1.0)*cj4*x510))+(((-1.0)*x514*x516))+((x512*x513))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x519=IKcos(j5);
IkReal x520=(cj4*x519);
IkReal x521=(cj7*cj8);
IkReal x522=IKsin(j5);
IkReal x523=(sj4*x522);
IkReal x524=((1.0)*cj7*sj8);
IkReal x525=(cj4*x522);
IkReal x526=(sj4*x519);
IkReal x527=((((-1.0)*x526))+(((-1.0)*x525)));
IkReal x528=(cj8*sj6);
IkReal x529=(sj6*sj8);
IkReal x530=((1.0)*cj6*cj7);
IkReal x531=(cj6*cj8*sj7);
IkReal x532=((1.0)*cj6*sj7*sj8);
IkReal x533=((0.09)*cj8);
IkReal x534=((0.09)*sj8);
evalcond[0]=((((-1.0)*r21*x524))+(((-1.0)*x523))+((r22*sj7))+((r20*x521))+x520);
evalcond[1]=(((r02*sj7))+(((-1.0)*r01*x524))+((r00*x521))+x527);
evalcond[2]=(((r00*x529))+((r01*x528))+(((-1.0)*x520))+((r00*x531))+(((-1.0)*r01*x532))+(((-1.0)*r02*x530))+x523);
evalcond[3]=((((-1.0)*r22*x530))+((r20*x531))+(((-1.0)*r21*x532))+((r21*x528))+((r20*x529))+x527);
evalcond[4]=((((0.235)*x523))+(((-1.0)*r21*x534))+((r20*x533))+(((-1.0)*(1.0)*pz))+(((0.03)*x525))+(((-0.235)*x520))+(((-1.0)*(0.25)*cj4))+(((0.03)*x526)));
evalcond[5]=((((-1.0)*(1.0)*px))+(((-1.0)*r01*x534))+(((0.235)*x525))+((r00*x533))+(((0.25)*sj4))+(((0.03)*x520))+(((0.235)*x526))+(((-0.03)*x523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x535=((1.0)*sj8);
IkReal x536=((1.0)*cj8);
CheckValue<IkReal> x537=IKPowWithIntegerCheck(IKsign((((cj7*cj8*r20))+((r22*sj7))+(((-1.0)*cj7*r21*x535)))),-1);
if(!x537.valid){
continue;
}
CheckValue<IkReal> x538 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x536))+(((-1.0)*r00*x535)))),IkReal(((((-1.0)*r00*sj7*x536))+((r01*sj7*sj8))+((cj7*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x538.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x537.value)))+(x538.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x539=IKsin(j6);
IkReal x540=(cj8*r11);
IkReal x541=(r10*sj8);
IkReal x542=IKcos(j6);
IkReal x543=((1.0)*x542);
IkReal x544=((1.0)*sj8*x542);
IkReal x545=((1.0)*cj7*x539);
IkReal x546=((1.0)*cj8*x542);
IkReal x547=(cj8*sj7*x539);
IkReal x548=((1.0)*sj7*sj8*x539);
evalcond[0]=(((x539*x541))+(((-1.0)*cj7*r12*x543))+(((-1.0)*r11*sj7*x544))+((x539*x540))+((cj8*r10*sj7*x542)));
evalcond[1]=((((-1.0)*r20*x544))+(((-1.0)*r21*x548))+(((-1.0)*r22*x545))+((r20*x547))+(((-1.0)*r21*x546)));
evalcond[2]=((((-1.0)*r00*x544))+(((-1.0)*r02*x545))+(((-1.0)*r01*x546))+((r00*x547))+(((-1.0)*r01*x548)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x548))+(((-1.0)*r12*x545))+(((-1.0)*x541*x543))+(((-1.0)*x540*x543))+((r10*x547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x549=(cj8*r20);
IkReal x550=(r02*sj7);
IkReal x551=(r21*sj8);
IkReal x552=(r22*sj7);
IkReal x553=(cj7*cj8*r00);
IkReal x554=(cj7*cj8*r20);
IkReal x555=(cj7*r01*sj8);
IkReal x556=(cj7*r21*sj8);
IkReal x557=((((1.08)*x551))+(((-1.08)*x549))+(((-2.82)*x554))+(((-2.82)*x552))+(((2.82)*x556))+(((0.36)*x555))+(((-0.36)*x553))+(((-0.36)*x550))+(((12.0)*pz)));
j4eval[0]=((IKabs(((-1.0)+x557)))+(IKabs(((1.0)+x557)))+(IKabs(((-1.0)+(((0.36)*x551))+(((0.12)*x555))+(((-0.12)*x553))+(((-0.36)*x549))+(((-0.94)*x552))+(((4.0)*pz))+(((0.94)*x556))+(((-0.12)*x550))+(((-0.94)*x554))))));
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j4, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j4evalpoly[1];
IkReal x558=(cj8*r20);
IkReal x559=(r02*sj7);
IkReal x560=(r21*sj8);
IkReal x561=(r22*sj7);
IkReal x562=(cj7*cj8*r00);
IkReal x563=(cj7*cj8*r20);
IkReal x564=(cj7*r01*sj8);
IkReal x565=(cj7*r21*sj8);
IkReal x566=((((-0.94)*x561))+(((4.0)*pz))+(((-0.12)*x559))+(((-0.12)*x562))+(((0.94)*x565))+(((-0.36)*x558))+(((0.12)*x564))+(((0.36)*x560))+(((-0.94)*x563)));
IkReal x567=((((-2.82)*x563))+(((1.08)*x560))+(((-0.36)*x562))+(((-0.36)*x559))+(((-2.82)*x561))+(((0.36)*x564))+(((-1.08)*x558))+(((12.0)*pz))+(((2.82)*x565)));
op[0]=((-1.0)+x566);
op[1]=0;
op[2]=((-1.0)+x567);
op[3]=0;
op[4]=((1.0)+x567);
op[5]=0;
op[6]=((1.0)+x566);
polyroots6(op,zeror,numroots);
IkReal j4array[6], cj4array[6], sj4array[6], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[6]={true,true,true,true,true,true};
_nj4 = 6;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

IkReal x568=(cj8*r20);
IkReal x569=((0.36)*x568);
IkReal x570=(r21*sj8);
IkReal x571=((0.36)*x570);
IkReal x572=(r22*sj7);
IkReal x573=(cj6*cj7*r22);
IkReal x574=(cj7*cj8*r20);
IkReal x575=(cj7*r21*sj8);
IkReal x576=(cj8*r21*sj6);
IkReal x577=(r20*sj6*sj8);
IkReal x578=((0.12)*cj6*sj7);
IkReal x579=((((0.94)*x572))+(((-0.94)*x575))+(((-1.0)*(4.0)*pz))+(((-0.12)*x573))+(((0.94)*x574))+((x568*x578))+(((0.12)*x576))+(((-1.0)*x570*x578))+(((-1.0)*x571))+(((0.12)*x577))+x569);
IkReal x580=(cj6*sj7);
IkReal x581=((((-1.0)*(12.0)*pz))+(((-1.08)*x570))+(((0.36)*x577))+((x569*x580))+(((1.08)*x568))+(((2.82)*x572))+(((2.82)*x574))+(((0.36)*x576))+(((-1.0)*x571*x580))+(((-2.82)*x575))+(((-0.36)*x573)));
j4evalpoly[0]=((-1.0)+x579+(((htj4*htj4)*(((-1.0)+x581))))+(((htj4*htj4*htj4*htj4*htj4*htj4)*(((1.0)+x579))))+(((htj4*htj4*htj4*htj4)*(((1.0)+x581)))));
if( IKabs(j4evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x582=(r02*sj7);
IkReal x583=(r22*sj7);
IkReal x584=(cj4*cj7);
IkReal x585=(cj8*r00);
IkReal x586=(cj7*sj4);
IkReal x587=(cj8*r20);
IkReal x588=(r01*sj8);
IkReal x589=((1.0)*cj4*cj7);
IkReal x590=(r21*sj8);
IkReal x591=((1.0)*cj7*sj4);
if( IKabs((((cj4*x582))+((sj4*x583))+((x584*x585))+(((-1.0)*x588*x589))+((x586*x587))+(((-1.0)*x590*x591)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x584*x590))+((sj4*x582))+(((-1.0)*cj4*x583))+(((-1.0)*x588*x591))+((x585*x586))+(((-1.0)*x587*x589)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x582))+((sj4*x583))+((x584*x585))+(((-1.0)*x588*x589))+((x586*x587))+(((-1.0)*x590*x591))))+IKsqr((((x584*x590))+((sj4*x582))+(((-1.0)*cj4*x583))+(((-1.0)*x588*x591))+((x585*x586))+(((-1.0)*x587*x589))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj4*x582))+((sj4*x583))+((x584*x585))+(((-1.0)*x588*x589))+((x586*x587))+(((-1.0)*x590*x591))), (((x584*x590))+((sj4*x582))+(((-1.0)*cj4*x583))+(((-1.0)*x588*x591))+((x585*x586))+(((-1.0)*x587*x589))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x592=IKcos(j5);
IkReal x593=(cj4*x592);
IkReal x594=(cj7*cj8);
IkReal x595=IKsin(j5);
IkReal x596=(sj4*x595);
IkReal x597=((1.0)*cj7*sj8);
IkReal x598=(cj4*x595);
IkReal x599=(sj4*x592);
IkReal x600=((((-1.0)*x598))+(((-1.0)*x599)));
IkReal x601=(cj8*sj6);
IkReal x602=(sj6*sj8);
IkReal x603=((1.0)*cj6*cj7);
IkReal x604=(cj6*cj8*sj7);
IkReal x605=((1.0)*cj6*sj7*sj8);
IkReal x606=((0.09)*cj8);
IkReal x607=((0.09)*sj8);
evalcond[0]=((((-1.0)*x596))+(((-1.0)*r21*x597))+((r20*x594))+((r22*sj7))+x593);
evalcond[1]=(((r02*sj7))+(((-1.0)*r01*x597))+((r00*x594))+x600);
evalcond[2]=((((-1.0)*x593))+(((-1.0)*r02*x603))+((r00*x602))+((r01*x601))+(((-1.0)*r01*x605))+((r00*x604))+x596);
evalcond[3]=((((-1.0)*r22*x603))+(((-1.0)*r21*x605))+((r20*x602))+((r20*x604))+((r21*x601))+x600);
evalcond[4]=((((-1.0)*r21*x607))+(((-1.0)*(1.0)*pz))+(((0.235)*x596))+((r20*x606))+(((-0.235)*x593))+(((-1.0)*(0.25)*cj4))+(((0.03)*x599))+(((0.03)*x598)));
evalcond[5]=((((0.235)*x599))+((r00*x606))+(((-1.0)*(1.0)*px))+(((0.235)*x598))+(((-1.0)*r01*x607))+(((0.03)*x593))+(((0.25)*sj4))+(((-0.03)*x596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x608=(cj8*r00);
IkReal x609=(r01*sj8);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((cj7*x608))+(((-1.0)*cj7*x609))+((r02*sj7)));
evalcond[2]=((0.095)+(((-1.0)*(1.0)*px))+(((-0.09)*x609))+(((0.09)*x608)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x610=((1.0)*sj8);
IkReal x611=((((-1.0)*cj7*r11*x610))+((cj7*cj8*r10))+((r12*sj7)));
IkReal x612=((1.0)*cj8);
j6eval[0]=x611;
j6eval[1]=IKsign(x611);
j6eval[2]=((IKabs(((((-1.0)*r21*x612))+(((-1.0)*r20*x610)))))+(IKabs((((cj7*r22))+(((-1.0)*r20*sj7*x612))+((r21*sj7*sj8))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x613=((1.0)*cj8);
IkReal x614=(((cj7*r21*sj8))+(((-1.0)*(1.0)*r22*sj7))+(((-1.0)*cj7*r20*x613)));
j6eval[0]=x614;
j6eval[1]=((IKabs(((((-1.0)*r11*x613))+(((-1.0)*(1.0)*r10*sj8)))))+(IKabs(((((-1.0)*r10*sj7*x613))+((cj7*r12))+((r11*sj7*sj8))))));
j6eval[2]=IKsign(x614);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x615=r00*r00;
IkReal x616=r01*r01;
IkReal x617=cj7*cj7;
IkReal x618=((2.0)*cj7*r02);
IkReal x619=(cj8*r00*sj7);
IkReal x620=(x616*x617);
IkReal x621=(r00*sj8);
IkReal x622=cj8*cj8;
IkReal x623=(x616+x615+(((-1.0)*x620))+((x620*x622))+(((-1.0)*x615*x617*x622))+(((2.0)*cj8*r01*x617*x621))+((x617*(r02*r02)))+((r01*sj7*sj8*x618))+(((-1.0)*x618*x619)));
IkReal x624=((1.0)*r01);
j6eval[0]=x623;
j6eval[1]=((IKabs((x619+(((-1.0)*cj7*r02))+(((-1.0)*sj7*sj8*x624)))))+(IKabs(((((-1.0)*cj8*x624))+(((-1.0)*x621))))));
j6eval[2]=IKsign(x623);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j4, j5, j6]

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x625=(cj8*r00*sj7);
IkReal x626=((1.0)*r01);
IkReal x627=(r00*sj8);
IkReal x628=r00*r00;
IkReal x629=r01*r01;
IkReal x630=cj7*cj7;
IkReal x631=((2.0)*cj7*r02);
IkReal x632=(x629*x630);
IkReal x633=cj8*cj8;
CheckValue<IkReal> x634=IKPowWithIntegerCheck(IKsign(((((-1.0)*x625*x631))+(((-1.0)*x632))+x628+x629+(((2.0)*cj8*r01*x627*x630))+((x632*x633))+((r01*sj7*sj8*x631))+((x630*(r02*r02)))+(((-1.0)*x628*x630*x633)))),-1);
if(!x634.valid){
continue;
}
CheckValue<IkReal> x635 = IKatan2WithCheck(IkReal(((((-1.0)*cj7*r02))+x625+(((-1.0)*sj7*sj8*x626)))),IkReal(((((-1.0)*x627))+(((-1.0)*cj8*x626)))),IKFAST_ATAN2_MAGTHRESH);
if(!x635.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x634.value)))+(x635.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x636=IKsin(j6);
IkReal x637=(cj8*r01);
IkReal x638=(r00*sj8);
IkReal x639=IKcos(j6);
IkReal x640=((1.0)*cj7*r02);
IkReal x641=(cj8*r00*sj7);
IkReal x642=(r01*sj7);
IkReal x643=((1.0)*sj8*x639);
IkReal x644=((1.0)*cj7*x636);
IkReal x645=((1.0)*cj8*x639);
IkReal x646=(cj8*sj7*x636);
IkReal x647=((1.0)*sj7*sj8*x636);
IkReal x648=((1.0)*x639);
evalcond[0]=(((x639*x641))+(((-1.0)*x642*x643))+((x636*x637))+((x636*x638))+(((-1.0)*x639*x640)));
evalcond[1]=((((-1.0)*r21*x645))+((r20*x646))+(((-1.0)*r21*x647))+(((-1.0)*r20*x643))+(((-1.0)*r22*x644)));
evalcond[2]=((((-1.0)*r12*x644))+(((-1.0)*r11*x647))+((r10*x646))+(((-1.0)*r10*x643))+(((-1.0)*r11*x645)));
evalcond[3]=((-1.0)+(((-1.0)*x636*x640))+(((-1.0)*x637*x648))+(((-1.0)*sj8*x636*x642))+((x636*x641))+(((-1.0)*x638*x648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x649=(cj8*r20);
IkReal x650=(r12*sj7);
IkReal x651=(r21*sj8);
IkReal x652=(r22*sj7);
IkReal x653=(cj7*cj8*r10);
IkReal x654=(cj7*cj8*r20);
IkReal x655=(cj7*r11*sj8);
IkReal x656=(cj7*r21*sj8);
IkReal x657=((((2.82)*x652))+(((-1.0)*(12.0)*pz))+(((1.08)*x649))+(((2.82)*x654))+(((-0.36)*x653))+(((-0.36)*x650))+(((-1.08)*x651))+(((-2.82)*x656))+(((0.36)*x655)));
j4eval[0]=((IKabs(((1.0)+(((0.12)*x655))+(((0.94)*x654))+(((0.36)*x649))+(((-1.0)*(4.0)*pz))+(((-0.94)*x656))+(((0.94)*x652))+(((-0.36)*x651))+(((-0.12)*x650))+(((-0.12)*x653)))))+(IKabs(((1.0)+x657)))+(IKabs(((-1.0)+x657))));
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j4, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j4evalpoly[1];
IkReal x658=(cj8*r20);
IkReal x659=(r12*sj7);
IkReal x660=(r21*sj8);
IkReal x661=(r22*sj7);
IkReal x662=(cj7*cj8*r10);
IkReal x663=(cj7*cj8*r20);
IkReal x664=(cj7*r11*sj8);
IkReal x665=(cj7*r21*sj8);
IkReal x666=((((0.12)*x664))+(((0.94)*x661))+(((0.94)*x663))+(((-0.94)*x665))+(((-1.0)*(4.0)*pz))+(((-0.12)*x662))+(((-0.12)*x659))+(((-0.36)*x660))+(((0.36)*x658)));
IkReal x667=((((1.08)*x658))+(((-1.0)*(12.0)*pz))+(((-1.08)*x660))+(((0.36)*x664))+(((-2.82)*x665))+(((2.82)*x661))+(((-0.36)*x659))+(((-0.36)*x662))+(((2.82)*x663)));
op[0]=((1.0)+x666);
op[1]=0;
op[2]=((1.0)+x667);
op[3]=0;
op[4]=((-1.0)+x667);
op[5]=0;
op[6]=((-1.0)+x666);
polyroots6(op,zeror,numroots);
IkReal j4array[6], cj4array[6], sj4array[6], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[6]={true,true,true,true,true,true};
_nj4 = 6;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

IkReal x668=(cj8*r10);
IkReal x669=(cj8*r20);
IkReal x670=(r11*sj8);
IkReal x671=(r21*sj8);
IkReal x672=(r22*sj7);
IkReal x673=(cj7*cj8*r20);
IkReal x674=(cj7*r21*sj8);
IkReal x675=((((0.2245)*x672))+(((-1.0)*(0.12)*py))+(((0.0846)*x669))+(((-0.0846)*x671))+(((0.0108)*x668))+(((-0.2245)*x674))+(((-1.0)*(0.94)*pz))+(((-0.0108)*x670))+(((0.2245)*x673)));
IkReal x676=((((-1.0)*(0.36)*py))+(((-0.6735)*x674))+(((0.6735)*x672))+(((0.0324)*x668))+(((-1.0)*(2.82)*pz))+(((0.6735)*x673))+(((-0.0324)*x670))+(((-0.2538)*x671))+(((0.2538)*x669)));
j4evalpoly[0]=((-0.235)+(((-1.0)*(0.12)*(htj4*htj4*htj4)))+(((htj4*htj4)*(((-0.235)+x676))))+(((htj4*htj4*htj4*htj4*htj4*htj4)*(((0.235)+x675))))+(((htj4*htj4*htj4*htj4)*(((0.235)+x676))))+(((-1.0)*(0.06)*(htj4*htj4*htj4*htj4*htj4)))+(((-1.0)*(0.06)*htj4))+x675);
if( IKabs(j4evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x677=(r22*sj7);
IkReal x678=((1.0)*cj4);
IkReal x679=(r12*sj7);
IkReal x680=(cj4*cj7*sj8);
IkReal x681=(cj7*sj4);
IkReal x682=(cj8*r20);
IkReal x683=(cj8*r10);
IkReal x684=((1.0)*cj4*cj7);
IkReal x685=((1.0)*cj7*sj4);
if( IKabs(((((-1.0)*r21*sj8*x685))+((r11*x680))+(((-1.0)*x678*x679))+((sj4*x677))+(((-1.0)*x683*x684))+((x681*x682)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x683*x685))+((r21*x680))+(((-1.0)*sj4*x679))+(((-1.0)*x677*x678))+(((-1.0)*x682*x684))+((r11*sj8*x681)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*sj8*x685))+((r11*x680))+(((-1.0)*x678*x679))+((sj4*x677))+(((-1.0)*x683*x684))+((x681*x682))))+IKsqr(((((-1.0)*x683*x685))+((r21*x680))+(((-1.0)*sj4*x679))+(((-1.0)*x677*x678))+(((-1.0)*x682*x684))+((r11*sj8*x681))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r21*sj8*x685))+((r11*x680))+(((-1.0)*x678*x679))+((sj4*x677))+(((-1.0)*x683*x684))+((x681*x682))), ((((-1.0)*x683*x685))+((r21*x680))+(((-1.0)*sj4*x679))+(((-1.0)*x677*x678))+(((-1.0)*x682*x684))+((r11*sj8*x681))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x686=IKsin(j5);
IkReal x687=(cj4*x686);
IkReal x688=IKcos(j5);
IkReal x689=(sj4*x688);
IkReal x690=(cj7*cj8);
IkReal x691=((1.0)*cj7*sj8);
IkReal x692=(cj4*x688);
IkReal x693=(sj4*x686);
IkReal x694=(x692+(((-1.0)*x693)));
IkReal x695=(cj8*sj6);
IkReal x696=(sj6*sj8);
IkReal x697=((1.0)*cj6*cj7);
IkReal x698=(cj6*cj8*sj7);
IkReal x699=((1.0)*cj6*sj7*sj8);
IkReal x700=((0.09)*cj8);
IkReal x701=((0.09)*sj8);
evalcond[0]=((((-1.0)*r11*x691))+((r10*x690))+((r12*sj7))+x687+x689);
evalcond[1]=(((r20*x690))+(((-1.0)*r21*x691))+x694+((r22*sj7)));
evalcond[2]=((((-1.0)*r11*x699))+(((-1.0)*r12*x697))+((r10*x696))+x694+((r10*x698))+((r11*x695)));
evalcond[3]=((((-1.0)*x689))+((r20*x696))+(((-1.0)*r21*x699))+(((-1.0)*x687))+(((-1.0)*r22*x697))+((r21*x695))+((r20*x698)));
evalcond[4]=((((0.235)*x693))+(((-0.235)*x692))+((r20*x700))+(((-1.0)*(1.0)*pz))+(((-1.0)*r21*x701))+(((-1.0)*(0.25)*cj4))+(((0.03)*x689))+(((0.03)*x687)));
evalcond[5]=((((-1.0)*r11*x701))+(((-1.0)*(1.0)*py))+((r10*x700))+(((-0.235)*x689))+(((-0.03)*x692))+(((0.03)*x693))+(((-1.0)*(0.25)*sj4))+(((-0.235)*x687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x702=((1.0)*cj8);
CheckValue<IkReal> x703=IKPowWithIntegerCheck(IKsign((((cj7*r21*sj8))+(((-1.0)*(1.0)*r22*sj7))+(((-1.0)*cj7*r20*x702)))),-1);
if(!x703.valid){
continue;
}
CheckValue<IkReal> x704 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x702))+(((-1.0)*(1.0)*r10*sj8)))),IkReal((((cj7*r12))+((r11*sj7*sj8))+(((-1.0)*r10*sj7*x702)))),IKFAST_ATAN2_MAGTHRESH);
if(!x704.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x703.value)))+(x704.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x705=IKsin(j6);
IkReal x706=(cj8*r01);
IkReal x707=(r00*sj8);
IkReal x708=IKcos(j6);
IkReal x709=((1.0)*cj7*r02);
IkReal x710=(cj8*r00*sj7);
IkReal x711=(r01*sj7);
IkReal x712=((1.0)*sj8*x708);
IkReal x713=((1.0)*cj7*x705);
IkReal x714=((1.0)*cj8*x708);
IkReal x715=(cj8*sj7*x705);
IkReal x716=((1.0)*sj7*sj8*x705);
IkReal x717=((1.0)*x708);
evalcond[0]=(((x705*x707))+(((-1.0)*x711*x712))+((x705*x706))+(((-1.0)*x708*x709))+((x708*x710)));
evalcond[1]=((((-1.0)*r21*x716))+(((-1.0)*r22*x713))+((r20*x715))+(((-1.0)*r21*x714))+(((-1.0)*r20*x712)));
evalcond[2]=((((-1.0)*r11*x714))+((r10*x715))+(((-1.0)*r10*x712))+(((-1.0)*r12*x713))+(((-1.0)*r11*x716)));
evalcond[3]=((-1.0)+((x705*x710))+(((-1.0)*x706*x717))+(((-1.0)*x705*x709))+(((-1.0)*x707*x717))+(((-1.0)*sj8*x705*x711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x718=(cj8*r20);
IkReal x719=(r12*sj7);
IkReal x720=(r21*sj8);
IkReal x721=(r22*sj7);
IkReal x722=(cj7*cj8*r10);
IkReal x723=(cj7*cj8*r20);
IkReal x724=(cj7*r11*sj8);
IkReal x725=(cj7*r21*sj8);
IkReal x726=((((-1.0)*(12.0)*pz))+(((-0.36)*x719))+(((-1.08)*x720))+(((2.82)*x721))+(((2.82)*x723))+(((-0.36)*x722))+(((0.36)*x724))+(((-2.82)*x725))+(((1.08)*x718)));
j4eval[0]=((IKabs(((1.0)+x726)))+(IKabs(((-1.0)+x726)))+(IKabs(((1.0)+(((-0.94)*x725))+(((0.94)*x723))+(((0.12)*x724))+(((0.36)*x718))+(((-0.12)*x719))+(((-1.0)*(4.0)*pz))+(((-0.12)*x722))+(((-0.36)*x720))+(((0.94)*x721))))));
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j4, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j4evalpoly[1];
IkReal x727=(cj8*r20);
IkReal x728=(r12*sj7);
IkReal x729=(r21*sj8);
IkReal x730=(r22*sj7);
IkReal x731=(cj7*cj8*r10);
IkReal x732=(cj7*cj8*r20);
IkReal x733=(cj7*r11*sj8);
IkReal x734=(cj7*r21*sj8);
IkReal x735=((((-0.12)*x728))+(((0.94)*x730))+(((-0.36)*x729))+(((-1.0)*(4.0)*pz))+(((-0.12)*x731))+(((-0.94)*x734))+(((0.12)*x733))+(((0.36)*x727))+(((0.94)*x732)));
IkReal x736=((((-1.0)*(12.0)*pz))+(((1.08)*x727))+(((-2.82)*x734))+(((-0.36)*x728))+(((0.36)*x733))+(((-1.08)*x729))+(((2.82)*x730))+(((-0.36)*x731))+(((2.82)*x732)));
op[0]=((1.0)+x735);
op[1]=0;
op[2]=((1.0)+x736);
op[3]=0;
op[4]=((-1.0)+x736);
op[5]=0;
op[6]=((-1.0)+x735);
polyroots6(op,zeror,numroots);
IkReal j4array[6], cj4array[6], sj4array[6], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[6]={true,true,true,true,true,true};
_nj4 = 6;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

IkReal x737=(cj8*r10);
IkReal x738=(cj8*r20);
IkReal x739=(r11*sj8);
IkReal x740=(r21*sj8);
IkReal x741=(r22*sj7);
IkReal x742=(cj7*cj8*r20);
IkReal x743=(cj7*r21*sj8);
IkReal x744=((((0.0108)*x737))+(((-1.0)*(0.12)*py))+(((0.2245)*x741))+(((-0.0846)*x740))+(((-0.0108)*x739))+(((-0.2245)*x743))+(((0.0846)*x738))+(((-1.0)*(0.94)*pz))+(((0.2245)*x742)));
IkReal x745=((((-0.0324)*x739))+(((-1.0)*(0.36)*py))+(((0.0324)*x737))+(((-0.2538)*x740))+(((-0.6735)*x743))+(((0.6735)*x742))+(((-1.0)*(2.82)*pz))+(((0.2538)*x738))+(((0.6735)*x741)));
j4evalpoly[0]=((-0.235)+(((-1.0)*(0.12)*(htj4*htj4*htj4)))+(((htj4*htj4)*(((-0.235)+x745))))+(((-1.0)*(0.06)*(htj4*htj4*htj4*htj4*htj4)))+(((htj4*htj4*htj4*htj4*htj4*htj4)*(((0.235)+x744))))+(((htj4*htj4*htj4*htj4)*(((0.235)+x745))))+(((-1.0)*(0.06)*htj4))+x744);
if( IKabs(j4evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x746=(r22*sj7);
IkReal x747=((1.0)*cj4);
IkReal x748=(r12*sj7);
IkReal x749=(cj4*cj7*sj8);
IkReal x750=(cj7*sj4);
IkReal x751=(cj8*r20);
IkReal x752=(cj8*r10);
IkReal x753=((1.0)*cj4*cj7);
IkReal x754=((1.0)*cj7*sj4);
if( IKabs((((x750*x751))+(((-1.0)*x752*x753))+((sj4*x746))+((r11*x749))+(((-1.0)*x747*x748))+(((-1.0)*r21*sj8*x754)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x748))+((r11*sj8*x750))+((r21*x749))+(((-1.0)*x752*x754))+(((-1.0)*x746*x747))+(((-1.0)*x751*x753)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x750*x751))+(((-1.0)*x752*x753))+((sj4*x746))+((r11*x749))+(((-1.0)*x747*x748))+(((-1.0)*r21*sj8*x754))))+IKsqr(((((-1.0)*sj4*x748))+((r11*sj8*x750))+((r21*x749))+(((-1.0)*x752*x754))+(((-1.0)*x746*x747))+(((-1.0)*x751*x753))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((x750*x751))+(((-1.0)*x752*x753))+((sj4*x746))+((r11*x749))+(((-1.0)*x747*x748))+(((-1.0)*r21*sj8*x754))), ((((-1.0)*sj4*x748))+((r11*sj8*x750))+((r21*x749))+(((-1.0)*x752*x754))+(((-1.0)*x746*x747))+(((-1.0)*x751*x753))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x755=IKsin(j5);
IkReal x756=(cj4*x755);
IkReal x757=IKcos(j5);
IkReal x758=(sj4*x757);
IkReal x759=(cj7*cj8);
IkReal x760=((1.0)*cj7*sj8);
IkReal x761=(cj4*x757);
IkReal x762=(sj4*x755);
IkReal x763=(x761+(((-1.0)*x762)));
IkReal x764=(cj8*sj6);
IkReal x765=(sj6*sj8);
IkReal x766=((1.0)*cj6*cj7);
IkReal x767=(cj6*cj8*sj7);
IkReal x768=((1.0)*cj6*sj7*sj8);
IkReal x769=((0.09)*cj8);
IkReal x770=((0.09)*sj8);
evalcond[0]=((((-1.0)*r11*x760))+((r12*sj7))+x758+x756+((r10*x759)));
evalcond[1]=((((-1.0)*r21*x760))+x763+((r22*sj7))+((r20*x759)));
evalcond[2]=((((-1.0)*r12*x766))+((r10*x767))+((r10*x765))+x763+((r11*x764))+(((-1.0)*r11*x768)));
evalcond[3]=((((-1.0)*r22*x766))+((r20*x767))+(((-1.0)*r21*x768))+((r20*x765))+(((-1.0)*x756))+(((-1.0)*x758))+((r21*x764)));
evalcond[4]=((((-0.235)*x761))+(((-1.0)*(1.0)*pz))+(((0.03)*x758))+((r20*x769))+(((-1.0)*(0.25)*cj4))+(((0.235)*x762))+(((-1.0)*r21*x770))+(((0.03)*x756)));
evalcond[5]=((((-1.0)*(1.0)*py))+(((-0.03)*x761))+(((-1.0)*r11*x770))+(((-0.235)*x758))+((r10*x769))+(((-1.0)*(0.25)*sj4))+(((-0.235)*x756))+(((0.03)*x762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x771=((1.0)*sj8);
IkReal x772=((1.0)*cj8);
CheckValue<IkReal> x773=IKPowWithIntegerCheck(IKsign((((cj7*cj8*r10))+(((-1.0)*cj7*r11*x771))+((r12*sj7)))),-1);
if(!x773.valid){
continue;
}
CheckValue<IkReal> x774 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x772))+(((-1.0)*r20*x771)))),IkReal((((cj7*r22))+(((-1.0)*r20*sj7*x772))+((r21*sj7*sj8)))),IKFAST_ATAN2_MAGTHRESH);
if(!x774.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x773.value)))+(x774.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x775=IKsin(j6);
IkReal x776=(cj8*r01);
IkReal x777=(r00*sj8);
IkReal x778=IKcos(j6);
IkReal x779=((1.0)*cj7*r02);
IkReal x780=(cj8*r00*sj7);
IkReal x781=(r01*sj7);
IkReal x782=((1.0)*sj8*x778);
IkReal x783=((1.0)*cj7*x775);
IkReal x784=((1.0)*cj8*x778);
IkReal x785=(cj8*sj7*x775);
IkReal x786=((1.0)*sj7*sj8*x775);
IkReal x787=((1.0)*x778);
evalcond[0]=(((x778*x780))+((x775*x777))+(((-1.0)*x781*x782))+(((-1.0)*x778*x779))+((x775*x776)));
evalcond[1]=(((r20*x785))+(((-1.0)*r21*x784))+(((-1.0)*r20*x782))+(((-1.0)*r21*x786))+(((-1.0)*r22*x783)));
evalcond[2]=((((-1.0)*r12*x783))+(((-1.0)*r10*x782))+(((-1.0)*r11*x784))+(((-1.0)*r11*x786))+((r10*x785)));
evalcond[3]=((-1.0)+(((-1.0)*x775*x779))+(((-1.0)*x777*x787))+(((-1.0)*x776*x787))+(((-1.0)*sj8*x775*x781))+((x775*x780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x788=(cj8*r20);
IkReal x789=(r12*sj7);
IkReal x790=(r21*sj8);
IkReal x791=(r22*sj7);
IkReal x792=(cj7*cj8*r10);
IkReal x793=(cj7*cj8*r20);
IkReal x794=(cj7*r11*sj8);
IkReal x795=(cj7*r21*sj8);
IkReal x796=((((1.08)*x788))+(((-1.0)*(12.0)*pz))+(((-2.82)*x795))+(((0.36)*x794))+(((2.82)*x791))+(((-0.36)*x792))+(((-1.08)*x790))+(((2.82)*x793))+(((-0.36)*x789)));
j4eval[0]=((IKabs(((1.0)+(((0.94)*x791))+(((-1.0)*(4.0)*pz))+(((-0.12)*x789))+(((-0.94)*x795))+(((-0.12)*x792))+(((-0.36)*x790))+(((0.36)*x788))+(((0.94)*x793))+(((0.12)*x794)))))+(IKabs(((-1.0)+x796)))+(IKabs(((1.0)+x796))));
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j4, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j4evalpoly[1];
IkReal x797=(cj8*r20);
IkReal x798=(r12*sj7);
IkReal x799=(r21*sj8);
IkReal x800=(r22*sj7);
IkReal x801=(cj7*cj8*r10);
IkReal x802=(cj7*cj8*r20);
IkReal x803=(cj7*r11*sj8);
IkReal x804=(cj7*r21*sj8);
IkReal x805=((((0.12)*x803))+(((-0.36)*x799))+(((-0.94)*x804))+(((0.94)*x802))+(((0.94)*x800))+(((-1.0)*(4.0)*pz))+(((0.36)*x797))+(((-0.12)*x801))+(((-0.12)*x798)));
IkReal x806=((((-1.08)*x799))+(((0.36)*x803))+(((-1.0)*(12.0)*pz))+(((1.08)*x797))+(((2.82)*x802))+(((-0.36)*x801))+(((2.82)*x800))+(((-0.36)*x798))+(((-2.82)*x804)));
op[0]=((1.0)+x805);
op[1]=0;
op[2]=((1.0)+x806);
op[3]=0;
op[4]=((-1.0)+x806);
op[5]=0;
op[6]=((-1.0)+x805);
polyroots6(op,zeror,numroots);
IkReal j4array[6], cj4array[6], sj4array[6], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[6]={true,true,true,true,true,true};
_nj4 = 6;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

IkReal x807=(cj8*r10);
IkReal x808=(cj8*r20);
IkReal x809=(r11*sj8);
IkReal x810=(r21*sj8);
IkReal x811=(r22*sj7);
IkReal x812=(cj7*cj8*r20);
IkReal x813=(cj7*r21*sj8);
IkReal x814=((((-1.0)*(0.12)*py))+(((0.0108)*x807))+(((0.2245)*x812))+(((-0.0846)*x810))+(((-0.0108)*x809))+(((-0.2245)*x813))+(((-1.0)*(0.94)*pz))+(((0.0846)*x808))+(((0.2245)*x811)));
IkReal x815=((((-1.0)*(0.36)*py))+(((-0.2538)*x810))+(((-1.0)*(2.82)*pz))+(((-0.6735)*x813))+(((0.6735)*x812))+(((0.0324)*x807))+(((0.6735)*x811))+(((-0.0324)*x809))+(((0.2538)*x808)));
j4evalpoly[0]=((-0.235)+(((htj4*htj4*htj4*htj4)*(((0.235)+x815))))+(((-1.0)*(0.12)*(htj4*htj4*htj4)))+(((htj4*htj4*htj4*htj4*htj4*htj4)*(((0.235)+x814))))+(((-1.0)*(0.06)*(htj4*htj4*htj4*htj4*htj4)))+(((-1.0)*(0.06)*htj4))+(((htj4*htj4)*(((-0.235)+x815))))+x814);
if( IKabs(j4evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x816=(r22*sj7);
IkReal x817=((1.0)*cj4);
IkReal x818=(r12*sj7);
IkReal x819=(cj4*cj7*sj8);
IkReal x820=(cj7*sj4);
IkReal x821=(cj8*r20);
IkReal x822=(cj8*r10);
IkReal x823=((1.0)*cj4*cj7);
IkReal x824=((1.0)*cj7*sj4);
if( IKabs((((x820*x821))+((r11*x819))+(((-1.0)*x822*x823))+(((-1.0)*x817*x818))+(((-1.0)*r21*sj8*x824))+((sj4*x816)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x816*x817))+((r11*sj8*x820))+((r21*x819))+(((-1.0)*x822*x824))+(((-1.0)*x821*x823))+(((-1.0)*sj4*x818)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x820*x821))+((r11*x819))+(((-1.0)*x822*x823))+(((-1.0)*x817*x818))+(((-1.0)*r21*sj8*x824))+((sj4*x816))))+IKsqr(((((-1.0)*x816*x817))+((r11*sj8*x820))+((r21*x819))+(((-1.0)*x822*x824))+(((-1.0)*x821*x823))+(((-1.0)*sj4*x818))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((x820*x821))+((r11*x819))+(((-1.0)*x822*x823))+(((-1.0)*x817*x818))+(((-1.0)*r21*sj8*x824))+((sj4*x816))), ((((-1.0)*x816*x817))+((r11*sj8*x820))+((r21*x819))+(((-1.0)*x822*x824))+(((-1.0)*x821*x823))+(((-1.0)*sj4*x818))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x825=IKsin(j5);
IkReal x826=(cj4*x825);
IkReal x827=IKcos(j5);
IkReal x828=(sj4*x827);
IkReal x829=(cj7*cj8);
IkReal x830=((1.0)*cj7*sj8);
IkReal x831=(cj4*x827);
IkReal x832=(sj4*x825);
IkReal x833=(x831+(((-1.0)*x832)));
IkReal x834=(cj8*sj6);
IkReal x835=(sj6*sj8);
IkReal x836=((1.0)*cj6*cj7);
IkReal x837=(cj6*cj8*sj7);
IkReal x838=((1.0)*cj6*sj7*sj8);
IkReal x839=((0.09)*cj8);
IkReal x840=((0.09)*sj8);
evalcond[0]=((((-1.0)*r11*x830))+((r12*sj7))+x826+x828+((r10*x829)));
evalcond[1]=(x833+((r20*x829))+((r22*sj7))+(((-1.0)*r21*x830)));
evalcond[2]=(x833+((r11*x834))+((r10*x837))+((r10*x835))+(((-1.0)*r12*x836))+(((-1.0)*r11*x838)));
evalcond[3]=(((r20*x837))+(((-1.0)*r22*x836))+((r20*x835))+(((-1.0)*r21*x838))+(((-1.0)*x826))+(((-1.0)*x828))+((r21*x834)));
evalcond[4]=((((0.03)*x826))+(((-1.0)*(1.0)*pz))+(((-0.235)*x831))+((r20*x839))+(((0.03)*x828))+(((-1.0)*(0.25)*cj4))+(((0.235)*x832))+(((-1.0)*r21*x840)));
evalcond[5]=((((-1.0)*r11*x840))+(((-1.0)*(1.0)*py))+(((0.03)*x832))+((r10*x839))+(((-0.235)*x828))+(((-0.235)*x826))+(((-1.0)*(0.25)*sj4))+(((-0.03)*x831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x841=(cj8*r00);
IkReal x842=(r01*sj8);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=(((r02*sj7))+(((-1.0)*cj7*x842))+((cj7*x841)));
evalcond[2]=((-0.095)+(((-1.0)*(1.0)*px))+(((-0.09)*x842))+(((0.09)*x841)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x843=((1.0)*cj7);
IkReal x844=(((cj7*cj8*r10))+((r12*sj7))+(((-1.0)*r11*sj8*x843)));
j6eval[0]=x844;
j6eval[1]=((IKabs(((((-1.0)*r22*x843))+((cj8*r20*sj7))+(((-1.0)*(1.0)*r21*sj7*sj8)))))+(IKabs((((r20*sj8))+((cj8*r21))))));
j6eval[2]=IKsign(x844);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x845=((1.0)*sj7);
IkReal x846=((1.0)*cj7);
IkReal x847=(((cj7*r21*sj8))+(((-1.0)*r22*x845))+(((-1.0)*cj8*r20*x846)));
j6eval[0]=x847;
j6eval[1]=((IKabs((((r10*sj8))+((cj8*r11)))))+(IKabs(((((-1.0)*r11*sj8*x845))+(((-1.0)*r12*x846))+((cj8*r10*sj7))))));
j6eval[2]=IKsign(x847);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x848=r00*r00;
IkReal x849=r01*r01;
IkReal x850=cj7*cj7;
IkReal x851=((2.0)*cj7*r02);
IkReal x852=(cj8*r00*sj7);
IkReal x853=(r01*sj7*sj8);
IkReal x854=(x849*x850);
IkReal x855=(r00*sj8);
IkReal x856=cj8*cj8;
IkReal x857=(x848+x849+(((-1.0)*x851*x852))+((x850*(r02*r02)))+(((-1.0)*x854))+(((2.0)*cj8*r01*x850*x855))+((x854*x856))+((x851*x853))+(((-1.0)*x848*x850*x856)));
j6eval[0]=x857;
j6eval[1]=((IKabs((((cj8*r01))+x855)))+(IKabs(((((-1.0)*x852))+x853+((cj7*r02))))));
j6eval[2]=IKsign(x857);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j4, j5, j6]

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x858=(r01*sj7*sj8);
IkReal x859=(cj8*r00*sj7);
IkReal x860=(r00*sj8);
IkReal x861=r00*r00;
IkReal x862=r01*r01;
IkReal x863=cj7*cj7;
IkReal x864=((2.0)*cj7*r02);
IkReal x865=(x862*x863);
IkReal x866=cj8*cj8;
CheckValue<IkReal> x867 = IKatan2WithCheck(IkReal(((((-1.0)*x859))+x858+((cj7*r02)))),IkReal((((cj8*r01))+x860)),IKFAST_ATAN2_MAGTHRESH);
if(!x867.valid){
continue;
}
CheckValue<IkReal> x868=IKPowWithIntegerCheck(IKsign((((x858*x864))+(((-1.0)*x861*x863*x866))+(((-1.0)*x859*x864))+((x865*x866))+((x863*(r02*r02)))+(((-1.0)*x865))+x861+x862+(((2.0)*cj8*r01*x860*x863)))),-1);
if(!x868.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x867.value)+(((1.5707963267949)*(x868.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x869=IKsin(j6);
IkReal x870=(cj8*r01);
IkReal x871=(r00*sj8);
IkReal x872=IKcos(j6);
IkReal x873=((1.0)*cj7*r02);
IkReal x874=(cj8*r00*sj7);
IkReal x875=(r01*sj7);
IkReal x876=((1.0)*sj8*x872);
IkReal x877=((1.0)*cj7*x869);
IkReal x878=((1.0)*cj8*x872);
IkReal x879=(cj8*sj7*x869);
IkReal x880=((1.0)*sj7*sj8*x869);
IkReal x881=((1.0)*x872);
evalcond[0]=((((-1.0)*x875*x876))+((x872*x874))+((x869*x870))+((x869*x871))+(((-1.0)*x872*x873)));
evalcond[1]=((((-1.0)*r21*x880))+(((-1.0)*r21*x878))+((r20*x879))+(((-1.0)*r22*x877))+(((-1.0)*r20*x876)));
evalcond[2]=((((-1.0)*r11*x878))+(((-1.0)*r12*x877))+(((-1.0)*r11*x880))+((r10*x879))+(((-1.0)*r10*x876)));
evalcond[3]=((1.0)+((x869*x874))+(((-1.0)*x870*x881))+(((-1.0)*x871*x881))+(((-1.0)*x869*x873))+(((-1.0)*sj8*x869*x875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x882=(cj8*r20);
IkReal x883=(r12*sj7);
IkReal x884=(r21*sj8);
IkReal x885=(r22*sj7);
IkReal x886=(cj7*cj8*r10);
IkReal x887=(cj7*cj8*r20);
IkReal x888=(cj7*r11*sj8);
IkReal x889=(cj7*r21*sj8);
IkReal x890=((((2.82)*x889))+(((-0.36)*x886))+(((1.08)*x884))+(((-2.82)*x885))+(((-1.08)*x882))+(((12.0)*pz))+(((-2.82)*x887))+(((-0.36)*x883))+(((0.36)*x888)));
j4eval[0]=((IKabs(((-1.0)+(((-0.12)*x883))+(((-0.94)*x887))+(((-0.36)*x882))+(((0.94)*x889))+(((0.36)*x884))+(((4.0)*pz))+(((0.12)*x888))+(((-0.12)*x886))+(((-0.94)*x885)))))+(IKabs(((-1.0)+x890)))+(IKabs(((1.0)+x890))));
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j4, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j4evalpoly[1];
IkReal x891=(cj8*r20);
IkReal x892=(r12*sj7);
IkReal x893=(r21*sj8);
IkReal x894=(r22*sj7);
IkReal x895=(cj7*cj8*r10);
IkReal x896=(cj7*cj8*r20);
IkReal x897=(cj7*r11*sj8);
IkReal x898=(cj7*r21*sj8);
IkReal x899=((((0.94)*x898))+(((-0.94)*x896))+(((-0.94)*x894))+(((4.0)*pz))+(((-0.12)*x892))+(((0.12)*x897))+(((-0.12)*x895))+(((0.36)*x893))+(((-0.36)*x891)));
IkReal x900=((((-2.82)*x896))+(((-2.82)*x894))+(((1.08)*x893))+(((0.36)*x897))+(((2.82)*x898))+(((-0.36)*x895))+(((12.0)*pz))+(((-1.08)*x891))+(((-0.36)*x892)));
op[0]=((-1.0)+x899);
op[1]=0;
op[2]=((-1.0)+x900);
op[3]=0;
op[4]=((1.0)+x900);
op[5]=0;
op[6]=((1.0)+x899);
polyroots6(op,zeror,numroots);
IkReal j4array[6], cj4array[6], sj4array[6], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[6]={true,true,true,true,true,true};
_nj4 = 6;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

IkReal x901=(cj8*r20);
IkReal x902=((0.36)*x901);
IkReal x903=(r21*sj8);
IkReal x904=((0.36)*x903);
IkReal x905=(r22*sj7);
IkReal x906=(cj6*cj7*r22);
IkReal x907=(cj7*cj8*r20);
IkReal x908=(cj7*r21*sj8);
IkReal x909=(cj8*r21*sj6);
IkReal x910=(r20*sj6*sj8);
IkReal x911=((0.12)*cj6*sj7);
IkReal x912=((((-1.0)*x903*x911))+(((-0.12)*x906))+(((-1.0)*(4.0)*pz))+x902+((x901*x911))+(((-0.94)*x908))+(((0.94)*x905))+(((0.94)*x907))+(((0.12)*x910))+(((0.12)*x909))+(((-1.0)*x904)));
IkReal x913=(cj6*sj7);
IkReal x914=((((1.08)*x901))+(((-1.0)*(12.0)*pz))+(((2.82)*x905))+(((0.36)*x909))+(((2.82)*x907))+(((-1.08)*x903))+(((-1.0)*x904*x913))+(((0.36)*x910))+(((-2.82)*x908))+((x902*x913))+(((-0.36)*x906)));
j4evalpoly[0]=((-1.0)+(((htj4*htj4*htj4*htj4*htj4*htj4)*(((1.0)+x912))))+x912+(((htj4*htj4)*(((-1.0)+x914))))+(((htj4*htj4*htj4*htj4)*(((1.0)+x914)))));
if( IKabs(j4evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x915=(r12*sj7);
IkReal x916=(r22*sj7);
IkReal x917=(cj4*cj7);
IkReal x918=(cj8*r10);
IkReal x919=(cj7*sj4);
IkReal x920=(cj8*r20);
IkReal x921=(r11*sj8);
IkReal x922=((1.0)*cj4*cj7);
IkReal x923=(r21*sj8);
IkReal x924=((1.0)*cj7*sj4);
if( IKabs((((cj4*x915))+(((-1.0)*x923*x924))+((x917*x918))+(((-1.0)*x921*x922))+((sj4*x916))+((x919*x920)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*x916))+((x917*x923))+((sj4*x915))+((x918*x919))+(((-1.0)*x921*x924))+(((-1.0)*x920*x922)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x915))+(((-1.0)*x923*x924))+((x917*x918))+(((-1.0)*x921*x922))+((sj4*x916))+((x919*x920))))+IKsqr(((((-1.0)*cj4*x916))+((x917*x923))+((sj4*x915))+((x918*x919))+(((-1.0)*x921*x924))+(((-1.0)*x920*x922))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj4*x915))+(((-1.0)*x923*x924))+((x917*x918))+(((-1.0)*x921*x922))+((sj4*x916))+((x919*x920))), ((((-1.0)*cj4*x916))+((x917*x923))+((sj4*x915))+((x918*x919))+(((-1.0)*x921*x924))+(((-1.0)*x920*x922))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x925=IKcos(j5);
IkReal x926=(cj4*x925);
IkReal x927=(cj7*cj8);
IkReal x928=IKsin(j5);
IkReal x929=(sj4*x928);
IkReal x930=((1.0)*cj7*sj8);
IkReal x931=(cj4*x928);
IkReal x932=(sj4*x925);
IkReal x933=((((-1.0)*x932))+(((-1.0)*x931)));
IkReal x934=(cj8*sj6);
IkReal x935=(sj6*sj8);
IkReal x936=((1.0)*cj6*cj7);
IkReal x937=(cj6*cj8*sj7);
IkReal x938=((1.0)*cj6*sj7*sj8);
IkReal x939=((0.09)*cj8);
IkReal x940=((0.09)*sj8);
evalcond[0]=(((r22*sj7))+(((-1.0)*x929))+(((-1.0)*r21*x930))+((r20*x927))+x926);
evalcond[1]=((((-1.0)*r11*x930))+((r10*x927))+((r12*sj7))+x933);
evalcond[2]=(((r11*x934))+((r10*x937))+((r10*x935))+(((-1.0)*r11*x938))+(((-1.0)*r12*x936))+(((-1.0)*x926))+x929);
evalcond[3]=(((r21*x934))+(((-1.0)*r21*x938))+(((-1.0)*r22*x936))+((r20*x937))+((r20*x935))+x933);
evalcond[4]=(((r20*x939))+(((0.235)*x929))+(((-1.0)*(1.0)*pz))+(((0.03)*x932))+(((-1.0)*(0.25)*cj4))+(((-0.235)*x926))+(((0.03)*x931))+(((-1.0)*r21*x940)));
evalcond[5]=((((-0.03)*x929))+(((0.235)*x932))+(((-1.0)*(1.0)*py))+(((0.235)*x931))+(((0.03)*x926))+(((0.25)*sj4))+((r10*x939))+(((-1.0)*r11*x940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x941=((1.0)*sj7);
IkReal x942=((1.0)*cj7);
CheckValue<IkReal> x943 = IKatan2WithCheck(IkReal((((r10*sj8))+((cj8*r11)))),IkReal(((((-1.0)*r12*x942))+(((-1.0)*r11*sj8*x941))+((cj8*r10*sj7)))),IKFAST_ATAN2_MAGTHRESH);
if(!x943.valid){
continue;
}
CheckValue<IkReal> x944=IKPowWithIntegerCheck(IKsign((((cj7*r21*sj8))+(((-1.0)*cj8*r20*x942))+(((-1.0)*r22*x941)))),-1);
if(!x944.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x943.value)+(((1.5707963267949)*(x944.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x945=IKsin(j6);
IkReal x946=(cj8*r01);
IkReal x947=(r00*sj8);
IkReal x948=IKcos(j6);
IkReal x949=((1.0)*cj7*r02);
IkReal x950=(cj8*r00*sj7);
IkReal x951=(r01*sj7);
IkReal x952=((1.0)*sj8*x948);
IkReal x953=((1.0)*cj7*x945);
IkReal x954=((1.0)*cj8*x948);
IkReal x955=(cj8*sj7*x945);
IkReal x956=((1.0)*sj7*sj8*x945);
IkReal x957=((1.0)*x948);
evalcond[0]=((((-1.0)*x948*x949))+((x945*x947))+(((-1.0)*x951*x952))+((x945*x946))+((x948*x950)));
evalcond[1]=((((-1.0)*r21*x954))+(((-1.0)*r20*x952))+(((-1.0)*r21*x956))+((r20*x955))+(((-1.0)*r22*x953)));
evalcond[2]=((((-1.0)*r12*x953))+(((-1.0)*r11*x954))+(((-1.0)*r11*x956))+(((-1.0)*r10*x952))+((r10*x955)));
evalcond[3]=((1.0)+(((-1.0)*x945*x949))+(((-1.0)*x947*x957))+((x945*x950))+(((-1.0)*sj8*x945*x951))+(((-1.0)*x946*x957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x958=(cj8*r20);
IkReal x959=(r12*sj7);
IkReal x960=(r21*sj8);
IkReal x961=(r22*sj7);
IkReal x962=(cj7*cj8*r10);
IkReal x963=(cj7*cj8*r20);
IkReal x964=(cj7*r11*sj8);
IkReal x965=(cj7*r21*sj8);
IkReal x966=((((1.08)*x960))+(((-0.36)*x962))+(((-2.82)*x961))+(((-2.82)*x963))+(((-0.36)*x959))+(((12.0)*pz))+(((-1.08)*x958))+(((2.82)*x965))+(((0.36)*x964)));
j4eval[0]=((IKabs(((-1.0)+(((0.12)*x964))+(((4.0)*pz))+(((0.94)*x965))+(((-0.36)*x958))+(((-0.94)*x961))+(((0.36)*x960))+(((-0.12)*x959))+(((-0.94)*x963))+(((-0.12)*x962)))))+(IKabs(((-1.0)+x966)))+(IKabs(((1.0)+x966))));
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j4, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j4evalpoly[1];
IkReal x967=(cj8*r20);
IkReal x968=(r12*sj7);
IkReal x969=(r21*sj8);
IkReal x970=(r22*sj7);
IkReal x971=(cj7*cj8*r10);
IkReal x972=(cj7*cj8*r20);
IkReal x973=(cj7*r11*sj8);
IkReal x974=(cj7*r21*sj8);
IkReal x975=((((-0.12)*x971))+(((-0.36)*x967))+(((-0.94)*x970))+(((4.0)*pz))+(((0.94)*x974))+(((-0.94)*x972))+(((-0.12)*x968))+(((0.12)*x973))+(((0.36)*x969)));
IkReal x976=((((2.82)*x974))+(((0.36)*x973))+(((-0.36)*x971))+(((-2.82)*x970))+(((1.08)*x969))+(((12.0)*pz))+(((-1.08)*x967))+(((-2.82)*x972))+(((-0.36)*x968)));
op[0]=((-1.0)+x975);
op[1]=0;
op[2]=((-1.0)+x976);
op[3]=0;
op[4]=((1.0)+x976);
op[5]=0;
op[6]=((1.0)+x975);
polyroots6(op,zeror,numroots);
IkReal j4array[6], cj4array[6], sj4array[6], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[6]={true,true,true,true,true,true};
_nj4 = 6;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

IkReal x977=(cj8*r20);
IkReal x978=((0.36)*x977);
IkReal x979=(r21*sj8);
IkReal x980=((0.36)*x979);
IkReal x981=(r22*sj7);
IkReal x982=(cj6*cj7*r22);
IkReal x983=(cj7*cj8*r20);
IkReal x984=(cj7*r21*sj8);
IkReal x985=(cj8*r21*sj6);
IkReal x986=(r20*sj6*sj8);
IkReal x987=((0.12)*cj6*sj7);
IkReal x988=(((x977*x987))+(((0.12)*x985))+(((-0.94)*x984))+(((-1.0)*x979*x987))+(((0.94)*x981))+(((-1.0)*(4.0)*pz))+(((-0.12)*x982))+(((-1.0)*x980))+(((0.94)*x983))+x978+(((0.12)*x986)));
IkReal x989=(cj6*sj7);
IkReal x990=((((-1.08)*x979))+(((-1.0)*(12.0)*pz))+(((-0.36)*x982))+(((0.36)*x985))+((x978*x989))+(((2.82)*x981))+(((-1.0)*x980*x989))+(((0.36)*x986))+(((1.08)*x977))+(((-2.82)*x984))+(((2.82)*x983)));
j4evalpoly[0]=((-1.0)+(((htj4*htj4*htj4*htj4)*(((1.0)+x990))))+(((htj4*htj4*htj4*htj4*htj4*htj4)*(((1.0)+x988))))+(((htj4*htj4)*(((-1.0)+x990))))+x988);
if( IKabs(j4evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x991=(r12*sj7);
IkReal x992=(r22*sj7);
IkReal x993=(cj4*cj7);
IkReal x994=(cj8*r10);
IkReal x995=(cj7*sj4);
IkReal x996=(cj8*r20);
IkReal x997=(r11*sj8);
IkReal x998=((1.0)*cj4*cj7);
IkReal x999=(r21*sj8);
IkReal x1000=((1.0)*cj7*sj4);
if( IKabs((((cj4*x991))+((x993*x994))+((x995*x996))+(((-1.0)*x997*x998))+(((-1.0)*x1000*x999))+((sj4*x992)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*x992))+((x994*x995))+(((-1.0)*x996*x998))+(((-1.0)*x1000*x997))+((x993*x999))+((sj4*x991)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x991))+((x993*x994))+((x995*x996))+(((-1.0)*x997*x998))+(((-1.0)*x1000*x999))+((sj4*x992))))+IKsqr(((((-1.0)*cj4*x992))+((x994*x995))+(((-1.0)*x996*x998))+(((-1.0)*x1000*x997))+((x993*x999))+((sj4*x991))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj4*x991))+((x993*x994))+((x995*x996))+(((-1.0)*x997*x998))+(((-1.0)*x1000*x999))+((sj4*x992))), ((((-1.0)*cj4*x992))+((x994*x995))+(((-1.0)*x996*x998))+(((-1.0)*x1000*x997))+((x993*x999))+((sj4*x991))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1001=IKcos(j5);
IkReal x1002=(cj4*x1001);
IkReal x1003=(cj7*cj8);
IkReal x1004=IKsin(j5);
IkReal x1005=(sj4*x1004);
IkReal x1006=((1.0)*cj7*sj8);
IkReal x1007=(cj4*x1004);
IkReal x1008=(sj4*x1001);
IkReal x1009=((((-1.0)*x1008))+(((-1.0)*x1007)));
IkReal x1010=(cj8*sj6);
IkReal x1011=(sj6*sj8);
IkReal x1012=((1.0)*cj6*cj7);
IkReal x1013=(cj6*cj8*sj7);
IkReal x1014=((1.0)*cj6*sj7*sj8);
IkReal x1015=((0.09)*cj8);
IkReal x1016=((0.09)*sj8);
evalcond[0]=((((-1.0)*x1005))+((r20*x1003))+x1002+(((-1.0)*r21*x1006))+((r22*sj7)));
evalcond[1]=(((r10*x1003))+x1009+(((-1.0)*r11*x1006))+((r12*sj7)));
evalcond[2]=((((-1.0)*r12*x1012))+((r10*x1013))+(((-1.0)*x1002))+((r11*x1010))+x1005+((r10*x1011))+(((-1.0)*r11*x1014)));
evalcond[3]=((((-1.0)*r22*x1012))+(((-1.0)*r21*x1014))+x1009+((r21*x1010))+((r20*x1013))+((r20*x1011)));
evalcond[4]=(((r20*x1015))+(((-1.0)*(1.0)*pz))+(((0.235)*x1005))+(((-1.0)*r21*x1016))+(((-0.235)*x1002))+(((-1.0)*(0.25)*cj4))+(((0.03)*x1007))+(((0.03)*x1008)));
evalcond[5]=((((-1.0)*r11*x1016))+(((-1.0)*(1.0)*py))+(((0.25)*sj4))+(((0.03)*x1002))+((r10*x1015))+(((-0.03)*x1005))+(((0.235)*x1008))+(((0.235)*x1007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1017=((1.0)*cj7);
CheckValue<IkReal> x1018 = IKatan2WithCheck(IkReal((((r20*sj8))+((cj8*r21)))),IkReal((((cj8*r20*sj7))+(((-1.0)*(1.0)*r21*sj7*sj8))+(((-1.0)*r22*x1017)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1018.valid){
continue;
}
CheckValue<IkReal> x1019=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj8*x1017))+((cj7*cj8*r10))+((r12*sj7)))),-1);
if(!x1019.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1018.value)+(((1.5707963267949)*(x1019.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x1020=IKsin(j6);
IkReal x1021=(cj8*r01);
IkReal x1022=(r00*sj8);
IkReal x1023=IKcos(j6);
IkReal x1024=((1.0)*cj7*r02);
IkReal x1025=(cj8*r00*sj7);
IkReal x1026=(r01*sj7);
IkReal x1027=((1.0)*sj8*x1023);
IkReal x1028=((1.0)*cj7*x1020);
IkReal x1029=((1.0)*cj8*x1023);
IkReal x1030=(cj8*sj7*x1020);
IkReal x1031=((1.0)*sj7*sj8*x1020);
IkReal x1032=((1.0)*x1023);
evalcond[0]=(((x1020*x1021))+(((-1.0)*x1026*x1027))+((x1020*x1022))+(((-1.0)*x1023*x1024))+((x1023*x1025)));
evalcond[1]=((((-1.0)*r21*x1031))+(((-1.0)*r20*x1027))+(((-1.0)*r22*x1028))+(((-1.0)*r21*x1029))+((r20*x1030)));
evalcond[2]=((((-1.0)*r11*x1031))+(((-1.0)*r10*x1027))+(((-1.0)*r11*x1029))+(((-1.0)*r12*x1028))+((r10*x1030)));
evalcond[3]=((1.0)+((x1020*x1025))+(((-1.0)*x1022*x1032))+(((-1.0)*x1021*x1032))+(((-1.0)*x1020*x1024))+(((-1.0)*sj8*x1020*x1026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1033=(cj8*r20);
IkReal x1034=(r12*sj7);
IkReal x1035=(r21*sj8);
IkReal x1036=(r22*sj7);
IkReal x1037=(cj7*cj8*r10);
IkReal x1038=(cj7*cj8*r20);
IkReal x1039=(cj7*r11*sj8);
IkReal x1040=(cj7*r21*sj8);
IkReal x1041=((((2.82)*x1040))+(((-0.36)*x1037))+(((-0.36)*x1034))+(((-2.82)*x1038))+(((1.08)*x1035))+(((-2.82)*x1036))+(((12.0)*pz))+(((0.36)*x1039))+(((-1.08)*x1033)));
j4eval[0]=((IKabs(((-1.0)+(((-0.36)*x1033))+(((-0.94)*x1038))+(((0.36)*x1035))+(((0.94)*x1040))+(((-0.12)*x1037))+(((4.0)*pz))+(((-0.12)*x1034))+(((0.12)*x1039))+(((-0.94)*x1036)))))+(IKabs(((1.0)+x1041)))+(IKabs(((-1.0)+x1041))));
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j4, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j4evalpoly[1];
IkReal x1042=(cj8*r20);
IkReal x1043=(r12*sj7);
IkReal x1044=(r21*sj8);
IkReal x1045=(r22*sj7);
IkReal x1046=(cj7*cj8*r10);
IkReal x1047=(cj7*cj8*r20);
IkReal x1048=(cj7*r11*sj8);
IkReal x1049=(cj7*r21*sj8);
IkReal x1050=((((-0.36)*x1042))+(((0.12)*x1048))+(((-0.94)*x1045))+(((-0.12)*x1043))+(((-0.94)*x1047))+(((4.0)*pz))+(((-0.12)*x1046))+(((0.36)*x1044))+(((0.94)*x1049)));
IkReal x1051=((((-2.82)*x1047))+(((0.36)*x1048))+(((-1.08)*x1042))+(((-0.36)*x1046))+(((1.08)*x1044))+(((2.82)*x1049))+(((-2.82)*x1045))+(((-0.36)*x1043))+(((12.0)*pz)));
op[0]=((-1.0)+x1050);
op[1]=0;
op[2]=((-1.0)+x1051);
op[3]=0;
op[4]=((1.0)+x1051);
op[5]=0;
op[6]=((1.0)+x1050);
polyroots6(op,zeror,numroots);
IkReal j4array[6], cj4array[6], sj4array[6], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[6]={true,true,true,true,true,true};
_nj4 = 6;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

IkReal x1052=(cj8*r20);
IkReal x1053=((0.36)*x1052);
IkReal x1054=(r21*sj8);
IkReal x1055=((0.36)*x1054);
IkReal x1056=(r22*sj7);
IkReal x1057=(cj6*cj7*r22);
IkReal x1058=(cj7*cj8*r20);
IkReal x1059=(cj7*r21*sj8);
IkReal x1060=(cj8*r21*sj6);
IkReal x1061=(r20*sj6*sj8);
IkReal x1062=((0.12)*cj6*sj7);
IkReal x1063=((((0.94)*x1056))+(((-1.0)*(4.0)*pz))+x1053+(((-1.0)*x1054*x1062))+(((-0.94)*x1059))+(((-1.0)*x1055))+(((-0.12)*x1057))+(((0.94)*x1058))+((x1052*x1062))+(((0.12)*x1060))+(((0.12)*x1061)));
IkReal x1064=(cj6*sj7);
IkReal x1065=((((1.08)*x1052))+(((-1.0)*(12.0)*pz))+(((2.82)*x1058))+(((2.82)*x1056))+(((-1.0)*x1055*x1064))+(((-0.36)*x1057))+(((0.36)*x1060))+(((0.36)*x1061))+(((-1.08)*x1054))+((x1053*x1064))+(((-2.82)*x1059)));
j4evalpoly[0]=((-1.0)+(((htj4*htj4*htj4*htj4)*(((1.0)+x1065))))+x1063+(((htj4*htj4*htj4*htj4*htj4*htj4)*(((1.0)+x1063))))+(((htj4*htj4)*(((-1.0)+x1065)))));
if( IKabs(j4evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1066=(r12*sj7);
IkReal x1067=(r22*sj7);
IkReal x1068=(cj4*cj7);
IkReal x1069=(cj8*r10);
IkReal x1070=(cj7*sj4);
IkReal x1071=(cj8*r20);
IkReal x1072=(r11*sj8);
IkReal x1073=((1.0)*cj4*cj7);
IkReal x1074=(r21*sj8);
IkReal x1075=((1.0)*cj7*sj4);
if( IKabs(((((-1.0)*x1072*x1073))+((cj4*x1066))+(((-1.0)*x1074*x1075))+((x1068*x1069))+((sj4*x1067))+((x1070*x1071)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1068*x1074))+(((-1.0)*x1072*x1075))+(((-1.0)*x1071*x1073))+((sj4*x1066))+(((-1.0)*cj4*x1067))+((x1069*x1070)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1072*x1073))+((cj4*x1066))+(((-1.0)*x1074*x1075))+((x1068*x1069))+((sj4*x1067))+((x1070*x1071))))+IKsqr((((x1068*x1074))+(((-1.0)*x1072*x1075))+(((-1.0)*x1071*x1073))+((sj4*x1066))+(((-1.0)*cj4*x1067))+((x1069*x1070))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*x1072*x1073))+((cj4*x1066))+(((-1.0)*x1074*x1075))+((x1068*x1069))+((sj4*x1067))+((x1070*x1071))), (((x1068*x1074))+(((-1.0)*x1072*x1075))+(((-1.0)*x1071*x1073))+((sj4*x1066))+(((-1.0)*cj4*x1067))+((x1069*x1070))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1076=IKcos(j5);
IkReal x1077=(cj4*x1076);
IkReal x1078=(cj7*cj8);
IkReal x1079=IKsin(j5);
IkReal x1080=(sj4*x1079);
IkReal x1081=((1.0)*cj7*sj8);
IkReal x1082=(cj4*x1079);
IkReal x1083=(sj4*x1076);
IkReal x1084=((((-1.0)*x1083))+(((-1.0)*x1082)));
IkReal x1085=(cj8*sj6);
IkReal x1086=(sj6*sj8);
IkReal x1087=((1.0)*cj6*cj7);
IkReal x1088=(cj6*cj8*sj7);
IkReal x1089=((1.0)*cj6*sj7*sj8);
IkReal x1090=((0.09)*cj8);
IkReal x1091=((0.09)*sj8);
evalcond[0]=((((-1.0)*r21*x1081))+(((-1.0)*x1080))+((r20*x1078))+x1077+((r22*sj7)));
evalcond[1]=((((-1.0)*r11*x1081))+((r10*x1078))+x1084+((r12*sj7)));
evalcond[2]=((((-1.0)*r11*x1089))+((r10*x1088))+x1080+(((-1.0)*x1077))+((r10*x1086))+((r11*x1085))+(((-1.0)*r12*x1087)));
evalcond[3]=((((-1.0)*r22*x1087))+((r21*x1085))+((r20*x1086))+((r20*x1088))+x1084+(((-1.0)*r21*x1089)));
evalcond[4]=((((0.235)*x1080))+(((-1.0)*(1.0)*pz))+((r20*x1090))+(((-1.0)*r21*x1091))+(((-1.0)*(0.25)*cj4))+(((-0.235)*x1077))+(((0.03)*x1083))+(((0.03)*x1082)));
evalcond[5]=((((0.03)*x1077))+(((-1.0)*(1.0)*py))+(((-1.0)*r11*x1091))+((r10*x1090))+(((0.25)*sj4))+(((-0.03)*x1080))+(((0.235)*x1083))+(((0.235)*x1082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j5, j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1092=((1.0)*cj8);
IkReal x1093=((1.0)*cj3);
IkReal x1094=(r11*sj3);
IkReal x1095=(r10*sj3);
IkReal x1096=(sj7*sj8);
IkReal x1097=((1.0)*cj8*sj7);
CheckValue<IkReal> x1098 = IKatan2WithCheck(IkReal(((((-1.0)*x1092*x1094))+(((-1.0)*cj8*r01*x1093))+(((-1.0)*r00*sj8*x1093))+(((-1.0)*sj8*x1095)))),IkReal(((((-1.0)*x1095*x1097))+((cj3*cj7*r02))+((x1094*x1096))+((cj3*r01*x1096))+(((-1.0)*cj3*r00*x1097))+((cj7*r12*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1098.valid){
continue;
}
CheckValue<IkReal> x1099=IKPowWithIntegerCheck(IKsign((((cj7*r21*sj8))+(((-1.0)*cj7*r20*x1092))+(((-1.0)*r22*sj7)))),-1);
if(!x1099.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1098.value)+(((1.5707963267949)*(x1099.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x1100=IKsin(j6);
IkReal x1101=((1.0)*cj7*x1100);
IkReal x1102=IKcos(j6);
IkReal x1103=((1.0)*cj8*x1102);
IkReal x1104=((1.0)*sj8*x1102);
IkReal x1105=(cj8*sj7*x1100);
IkReal x1106=((1.0)*sj7*sj8*x1100);
evalcond[0]=((((-1.0)*r22*x1101))+(((-1.0)*r21*x1103))+((r20*x1105))+(((-1.0)*r20*x1104))+(((-1.0)*r21*x1106)));
evalcond[1]=((((-1.0)*r12*x1101))+(((-1.0)*r10*x1104))+(((-1.0)*r11*x1106))+cj3+((r10*x1105))+(((-1.0)*r11*x1103)));
evalcond[2]=(((r00*x1105))+(((-1.0)*r02*x1101))+(((-1.0)*r01*x1103))+(((-1.0)*r00*x1104))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r01*x1106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
IkReal x1107=(cj3*pz);
IkReal x1108=(r02*sj7);
IkReal x1109=(cj3*cj8*r20);
IkReal x1110=(cj3*r21*sj8);
IkReal x1111=(cj3*r22*sj7);
IkReal x1112=(cj7*cj8*r00);
IkReal x1113=(cj7*r01*sj8);
IkReal x1114=(cj3*cj7*cj8*r20);
IkReal x1115=(cj3*cj7*r21*sj8);
IkReal x1116=((((-2.82)*x1115))+(((0.36)*x1113))+(((-0.36)*x1112))+(((1.08)*x1109))+(((-1.08)*x1110))+(((2.82)*x1114))+(((-12.0)*x1107))+(((2.82)*x1111))+(((-0.36)*x1108)));
j4eval[0]=((IKabs(((((-0.12)*x1112))+(((-4.0)*x1107))+(((-0.94)*x1115))+(((0.94)*x1114))+(((-0.12)*x1108))+cj3+(((0.36)*x1109))+(((-0.36)*x1110))+(((0.94)*x1111))+(((0.12)*x1113)))))+(IKabs((x1116+(((-1.0)*(1.0)*cj3)))))+(IKabs((x1116+cj3))));
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j4, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j4evalpoly[1];
IkReal x1117=(cj3*pz);
IkReal x1118=(r02*sj7);
IkReal x1119=(cj3*cj8*r20);
IkReal x1120=(cj3*r21*sj8);
IkReal x1121=(cj3*r22*sj7);
IkReal x1122=(cj7*cj8*r00);
IkReal x1123=(cj7*r01*sj8);
IkReal x1124=(cj3*cj7*cj8*r20);
IkReal x1125=(cj3*cj7*r21*sj8);
IkReal x1126=((((-0.36)*x1120))+(((-4.0)*x1117))+(((0.94)*x1124))+(((0.94)*x1121))+(((-0.12)*x1118))+(((-0.94)*x1125))+(((0.12)*x1123))+(((0.36)*x1119))+(((-0.12)*x1122)));
IkReal x1127=((((-0.36)*x1122))+(((0.36)*x1123))+(((-1.08)*x1120))+(((-12.0)*x1117))+(((1.08)*x1119))+(((2.82)*x1124))+(((2.82)*x1121))+(((-0.36)*x1118))+(((-2.82)*x1125)));
IkReal x1128=((-1.0)*(((1.0)*cj3)));
op[0]=(x1126+cj3);
op[1]=0;
op[2]=(x1127+cj3);
op[3]=0;
op[4]=(x1128+x1127);
op[5]=0;
op[6]=(x1126+x1128);
polyroots6(op,zeror,numroots);
IkReal j4array[6], cj4array[6], sj4array[6], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[6]={true,true,true,true,true,true};
_nj4 = 6;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

IkReal x1129=(pz*sj3);
IkReal x1130=(r12*sj7);
IkReal x1131=(cj7*cj8*r10);
IkReal x1132=(cj7*r11*sj8);
IkReal x1133=(cj8*r20*sj3);
IkReal x1134=(r21*sj3*sj8);
IkReal x1135=(r22*sj3*sj7);
IkReal x1136=(cj7*cj8*r20*sj3);
IkReal x1137=(cj7*r21*sj3*sj8);
IkReal x1138=((((-4.0)*x1129))+(((-0.12)*x1131))+(((0.94)*x1135))+(((0.94)*x1136))+(((0.36)*x1133))+(((0.12)*x1132))+(((-0.94)*x1137))+(((-0.12)*x1130))+(((-0.36)*x1134)));
IkReal x1139=((-1.0)*(((1.0)*sj3)));
IkReal x1140=((((-0.36)*x1130))+(((-12.0)*x1129))+(((-1.08)*x1134))+(((2.82)*x1136))+(((2.82)*x1135))+(((-2.82)*x1137))+(((0.36)*x1132))+(((1.08)*x1133))+(((-0.36)*x1131)));
j4evalpoly[0]=((((htj4*htj4*htj4*htj4)*((x1140+sj3))))+(((htj4*htj4*htj4*htj4*htj4*htj4)*((sj3+x1138))))+x1139+x1138+(((htj4*htj4)*((x1140+x1139)))));
if( IKabs(j4evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1141=(r22*sj7);
IkReal x1142=(cj4*r21);
IkReal x1143=(cj8*sj6);
IkReal x1144=(r20*sj6*sj8);
IkReal x1145=(cj7*cj8*r20);
IkReal x1146=((1.0)*cj4);
IkReal x1147=(cj6*cj7*r22);
IkReal x1148=(cj7*sj8);
IkReal x1149=((1.0)*r21*sj4);
IkReal x1150=(cj6*cj8*r20*sj7);
IkReal x1151=(cj6*sj7*sj8);
if( IKabs(((((-1.0)*x1148*x1149))+((x1142*x1143))+((cj4*x1150))+((cj4*x1144))+((sj4*x1145))+(((-1.0)*x1146*x1147))+((sj4*x1141))+(((-1.0)*cj4*r21*x1151)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1142*x1148))+((sj4*x1144))+(((-1.0)*x1149*x1151))+(((-1.0)*sj4*x1147))+(((-1.0)*x1141*x1146))+(((-1.0)*x1145*x1146))+((r21*sj4*x1143))+((sj4*x1150)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1148*x1149))+((x1142*x1143))+((cj4*x1150))+((cj4*x1144))+((sj4*x1145))+(((-1.0)*x1146*x1147))+((sj4*x1141))+(((-1.0)*cj4*r21*x1151))))+IKsqr((((x1142*x1148))+((sj4*x1144))+(((-1.0)*x1149*x1151))+(((-1.0)*sj4*x1147))+(((-1.0)*x1141*x1146))+(((-1.0)*x1145*x1146))+((r21*sj4*x1143))+((sj4*x1150))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*x1148*x1149))+((x1142*x1143))+((cj4*x1150))+((cj4*x1144))+((sj4*x1145))+(((-1.0)*x1146*x1147))+((sj4*x1141))+(((-1.0)*cj4*r21*x1151))), (((x1142*x1148))+((sj4*x1144))+(((-1.0)*x1149*x1151))+(((-1.0)*sj4*x1147))+(((-1.0)*x1141*x1146))+(((-1.0)*x1145*x1146))+((r21*sj4*x1143))+((sj4*x1150))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1152=IKcos(j5);
IkReal x1153=(cj4*x1152);
IkReal x1154=(cj7*cj8);
IkReal x1155=IKsin(j5);
IkReal x1156=(sj4*x1155);
IkReal x1157=((1.0)*x1156);
IkReal x1158=((1.0)*cj7*sj8);
IkReal x1159=(cj4*x1155);
IkReal x1160=(cj3*x1159);
IkReal x1161=(sj4*x1152);
IkReal x1162=(cj3*x1161);
IkReal x1163=(sj3*x1159);
IkReal x1164=(sj3*x1161);
IkReal x1165=(cj8*sj6);
IkReal x1166=(sj6*sj8);
IkReal x1167=((1.0)*cj6*cj7);
IkReal x1168=(cj6*cj8*sj7);
IkReal x1169=((1.0)*cj6*sj7*sj8);
IkReal x1170=((0.09)*cj8);
IkReal x1171=((0.09)*sj8);
IkReal x1172=(cj3*x1153);
IkReal x1173=(sj3*x1153);
IkReal x1174=((0.25)*sj4);
IkReal x1175=((0.03)*sj4*x1155);
evalcond[0]=((((-1.0)*r21*x1158))+x1153+((r20*x1154))+(((-1.0)*x1157))+((r22*sj7)));
evalcond[1]=(((r02*sj7))+((r00*x1154))+(((-1.0)*r01*x1158))+x1160+x1162);
evalcond[2]=((((-1.0)*r11*x1158))+((r10*x1154))+x1163+x1164+((r12*sj7)));
evalcond[3]=((((-1.0)*x1161))+(((-1.0)*r21*x1169))+(((-1.0)*r22*x1167))+((r20*x1168))+(((-1.0)*x1159))+((r21*x1165))+((r20*x1166)));
evalcond[4]=((((-1.0)*(1.0)*pz))+(((0.03)*x1161))+(((-0.235)*x1153))+(((-1.0)*(0.25)*cj4))+(((0.03)*x1159))+((r20*x1170))+(((-1.0)*r21*x1171))+(((0.235)*x1156)));
evalcond[5]=((((-1.0)*cj3*x1157))+((r00*x1168))+((r01*x1165))+x1172+(((-1.0)*r01*x1169))+(((-1.0)*r02*x1167))+((r00*x1166)));
evalcond[6]=(((r11*x1165))+(((-1.0)*r12*x1167))+((r10*x1168))+(((-1.0)*sj3*x1157))+(((-1.0)*r11*x1169))+x1173+((r10*x1166)));
evalcond[7]=((((-1.0)*(1.0)*px))+((r00*x1170))+((cj3*x1175))+(((-0.235)*x1160))+(((-0.03)*x1172))+(((-1.0)*cj3*x1174))+(((-1.0)*r01*x1171))+(((-0.235)*x1162))+(((0.095)*sj3)));
evalcond[8]=((((-1.0)*sj3*x1174))+(((-1.0)*(0.095)*cj3))+(((-1.0)*(1.0)*py))+(((-0.03)*x1173))+(((-0.235)*x1164))+((sj3*x1175))+(((-0.235)*x1163))+((r10*x1170))+(((-1.0)*r11*x1171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1176=((1.0)*sj8);
IkReal x1177=(r21*sj3);
IkReal x1178=(r20*sj3);
CheckValue<IkReal> x1179=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj7*r11*x1176))+((cj7*cj8*r10))+((r12*sj7)))),-1);
if(!x1179.valid){
continue;
}
CheckValue<IkReal> x1180 = IKatan2WithCheck(IkReal(((((-1.0)*cj8*x1177))+(((-1.0)*x1176*x1178)))),IkReal(((((-1.0)*cj8*sj7*x1178))+((cj7*r22*sj3))+((sj7*sj8*x1177)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1180.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1179.value)))+(x1180.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x1181=IKsin(j6);
IkReal x1182=((1.0)*cj7*x1181);
IkReal x1183=IKcos(j6);
IkReal x1184=((1.0)*cj8*x1183);
IkReal x1185=((1.0)*sj8*x1183);
IkReal x1186=(cj8*sj7*x1181);
IkReal x1187=((1.0)*sj7*sj8*x1181);
evalcond[0]=((((-1.0)*r21*x1187))+(((-1.0)*r22*x1182))+(((-1.0)*r20*x1185))+((r20*x1186))+(((-1.0)*r21*x1184)));
evalcond[1]=((((-1.0)*r12*x1182))+((r10*x1186))+(((-1.0)*r11*x1187))+cj3+(((-1.0)*r10*x1185))+(((-1.0)*r11*x1184)));
evalcond[2]=((((-1.0)*r01*x1187))+(((-1.0)*r00*x1185))+((r00*x1186))+(((-1.0)*r02*x1182))+(((-1.0)*(1.0)*sj3))+(((-1.0)*r01*x1184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
IkReal x1188=(cj3*pz);
IkReal x1189=(r02*sj7);
IkReal x1190=(cj3*cj8*r20);
IkReal x1191=(cj3*r21*sj8);
IkReal x1192=(cj3*r22*sj7);
IkReal x1193=(cj7*cj8*r00);
IkReal x1194=(cj7*r01*sj8);
IkReal x1195=(cj3*cj7*cj8*r20);
IkReal x1196=(cj3*cj7*r21*sj8);
IkReal x1197=((((-12.0)*x1188))+(((2.82)*x1192))+(((-0.36)*x1193))+(((-0.36)*x1189))+(((1.08)*x1190))+(((-1.08)*x1191))+(((0.36)*x1194))+(((2.82)*x1195))+(((-2.82)*x1196)));
j4eval[0]=((IKabs((cj3+x1197)))+(IKabs(((((-0.12)*x1189))+(((0.12)*x1194))+(((0.94)*x1192))+(((0.94)*x1195))+(((-0.94)*x1196))+cj3+(((-4.0)*x1188))+(((0.36)*x1190))+(((-0.12)*x1193))+(((-0.36)*x1191)))))+(IKabs(((((-1.0)*(1.0)*cj3))+x1197))));
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j4, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j4evalpoly[1];
IkReal x1198=(cj3*pz);
IkReal x1199=(r02*sj7);
IkReal x1200=(cj3*cj8*r20);
IkReal x1201=(cj3*r21*sj8);
IkReal x1202=(cj3*r22*sj7);
IkReal x1203=(cj7*cj8*r00);
IkReal x1204=(cj7*r01*sj8);
IkReal x1205=(cj3*cj7*cj8*r20);
IkReal x1206=(cj3*cj7*r21*sj8);
IkReal x1207=((((0.36)*x1200))+(((-0.94)*x1206))+(((-4.0)*x1198))+(((0.94)*x1205))+(((-0.12)*x1199))+(((-0.12)*x1203))+(((-0.36)*x1201))+(((0.94)*x1202))+(((0.12)*x1204)));
IkReal x1208=((((2.82)*x1202))+(((-12.0)*x1198))+(((0.36)*x1204))+(((1.08)*x1200))+(((-0.36)*x1199))+(((2.82)*x1205))+(((-1.08)*x1201))+(((-0.36)*x1203))+(((-2.82)*x1206)));
IkReal x1209=((-1.0)*(((1.0)*cj3)));
op[0]=(x1207+cj3);
op[1]=0;
op[2]=(x1208+cj3);
op[3]=0;
op[4]=(x1209+x1208);
op[5]=0;
op[6]=(x1207+x1209);
polyroots6(op,zeror,numroots);
IkReal j4array[6], cj4array[6], sj4array[6], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[6]={true,true,true,true,true,true};
_nj4 = 6;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

IkReal x1210=(pz*sj3);
IkReal x1211=(r12*sj7);
IkReal x1212=(cj7*cj8*r10);
IkReal x1213=(cj7*r11*sj8);
IkReal x1214=(cj8*r20*sj3);
IkReal x1215=(r21*sj3*sj8);
IkReal x1216=(r22*sj3*sj7);
IkReal x1217=(cj7*cj8*r20*sj3);
IkReal x1218=(cj7*r21*sj3*sj8);
IkReal x1219=((((-0.36)*x1215))+(((-0.94)*x1218))+(((0.94)*x1217))+(((0.12)*x1213))+(((0.36)*x1214))+(((0.94)*x1216))+(((-4.0)*x1210))+(((-0.12)*x1211))+(((-0.12)*x1212)));
IkReal x1220=((-1.0)*(((1.0)*sj3)));
IkReal x1221=((((-1.08)*x1215))+(((-2.82)*x1218))+(((2.82)*x1217))+(((0.36)*x1213))+(((-0.36)*x1211))+(((-0.36)*x1212))+(((2.82)*x1216))+(((-12.0)*x1210))+(((1.08)*x1214)));
j4evalpoly[0]=((((htj4*htj4)*((x1221+x1220))))+(((htj4*htj4*htj4*htj4)*((sj3+x1221))))+x1220+x1219+(((htj4*htj4*htj4*htj4*htj4*htj4)*((sj3+x1219)))));
if( IKabs(j4evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1222=(r22*sj7);
IkReal x1223=(cj4*r21);
IkReal x1224=(cj8*sj6);
IkReal x1225=(r20*sj6*sj8);
IkReal x1226=(cj7*cj8*r20);
IkReal x1227=((1.0)*cj4);
IkReal x1228=(cj6*cj7*r22);
IkReal x1229=(cj7*sj8);
IkReal x1230=((1.0)*r21*sj4);
IkReal x1231=(cj6*cj8*r20*sj7);
IkReal x1232=(cj6*sj7*sj8);
if( IKabs((((sj4*x1222))+((cj4*x1225))+((cj4*x1231))+((sj4*x1226))+(((-1.0)*x1229*x1230))+((x1223*x1224))+(((-1.0)*cj4*r21*x1232))+(((-1.0)*x1227*x1228)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1223*x1229))+(((-1.0)*sj4*x1228))+((sj4*x1231))+((sj4*x1225))+((r21*sj4*x1224))+(((-1.0)*x1226*x1227))+(((-1.0)*x1222*x1227))+(((-1.0)*x1230*x1232)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x1222))+((cj4*x1225))+((cj4*x1231))+((sj4*x1226))+(((-1.0)*x1229*x1230))+((x1223*x1224))+(((-1.0)*cj4*r21*x1232))+(((-1.0)*x1227*x1228))))+IKsqr((((x1223*x1229))+(((-1.0)*sj4*x1228))+((sj4*x1231))+((sj4*x1225))+((r21*sj4*x1224))+(((-1.0)*x1226*x1227))+(((-1.0)*x1222*x1227))+(((-1.0)*x1230*x1232))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((sj4*x1222))+((cj4*x1225))+((cj4*x1231))+((sj4*x1226))+(((-1.0)*x1229*x1230))+((x1223*x1224))+(((-1.0)*cj4*r21*x1232))+(((-1.0)*x1227*x1228))), (((x1223*x1229))+(((-1.0)*sj4*x1228))+((sj4*x1231))+((sj4*x1225))+((r21*sj4*x1224))+(((-1.0)*x1226*x1227))+(((-1.0)*x1222*x1227))+(((-1.0)*x1230*x1232))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1233=IKcos(j5);
IkReal x1234=(cj4*x1233);
IkReal x1235=(cj7*cj8);
IkReal x1236=IKsin(j5);
IkReal x1237=(sj4*x1236);
IkReal x1238=((1.0)*x1237);
IkReal x1239=((1.0)*cj7*sj8);
IkReal x1240=(cj4*x1236);
IkReal x1241=(cj3*x1240);
IkReal x1242=(sj4*x1233);
IkReal x1243=(cj3*x1242);
IkReal x1244=(sj3*x1240);
IkReal x1245=(sj3*x1242);
IkReal x1246=(cj8*sj6);
IkReal x1247=(sj6*sj8);
IkReal x1248=((1.0)*cj6*cj7);
IkReal x1249=(cj6*cj8*sj7);
IkReal x1250=((1.0)*cj6*sj7*sj8);
IkReal x1251=((0.09)*cj8);
IkReal x1252=((0.09)*sj8);
IkReal x1253=(cj3*x1234);
IkReal x1254=(sj3*x1234);
IkReal x1255=((0.25)*sj4);
IkReal x1256=((0.03)*sj4*x1236);
evalcond[0]=((((-1.0)*x1238))+x1234+(((-1.0)*r21*x1239))+((r20*x1235))+((r22*sj7)));
evalcond[1]=(((r02*sj7))+(((-1.0)*r01*x1239))+x1241+x1243+((r00*x1235)));
evalcond[2]=(((r10*x1235))+((r12*sj7))+(((-1.0)*r11*x1239))+x1245+x1244);
evalcond[3]=((((-1.0)*r22*x1248))+((r20*x1249))+(((-1.0)*x1242))+(((-1.0)*r21*x1250))+((r20*x1247))+((r21*x1246))+(((-1.0)*x1240)));
evalcond[4]=((((-1.0)*(1.0)*pz))+(((0.235)*x1237))+(((0.03)*x1240))+(((0.03)*x1242))+(((-1.0)*r21*x1252))+((r20*x1251))+(((-1.0)*(0.25)*cj4))+(((-0.235)*x1234)));
evalcond[5]=((((-1.0)*cj3*x1238))+(((-1.0)*r01*x1250))+x1253+(((-1.0)*r02*x1248))+((r00*x1249))+((r00*x1247))+((r01*x1246)));
evalcond[6]=(x1254+((r11*x1246))+(((-1.0)*r12*x1248))+((r10*x1249))+(((-1.0)*sj3*x1238))+((r10*x1247))+(((-1.0)*r11*x1250)));
evalcond[7]=((((-1.0)*cj3*x1255))+(((-1.0)*(1.0)*px))+((r00*x1251))+(((-1.0)*r01*x1252))+(((-0.03)*x1253))+(((-0.235)*x1243))+(((0.095)*sj3))+((cj3*x1256))+(((-0.235)*x1241)));
evalcond[8]=((((-1.0)*(0.095)*cj3))+(((-1.0)*(1.0)*py))+((r10*x1251))+((sj3*x1256))+(((-1.0)*sj3*x1255))+(((-0.235)*x1244))+(((-0.235)*x1245))+(((-1.0)*r11*x1252))+(((-0.03)*x1254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1257=((1.0)*cj7);
IkReal x1258=(cj3*cj8);
IkReal x1259=(cj3*sj8);
CheckValue<IkReal> x1260=IKPowWithIntegerCheck(IKsign((((cj7*r01*sj8))+(((-1.0)*cj8*r00*x1257))+(((-1.0)*r02*sj7)))),-1);
if(!x1260.valid){
continue;
}
CheckValue<IkReal> x1261 = IKatan2WithCheck(IkReal((((r20*x1259))+((r21*x1258)))),IkReal(((((-1.0)*cj3*r22*x1257))+(((-1.0)*r21*sj7*x1259))+((r20*sj7*x1258)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1261.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1260.value)))+(x1261.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x1262=IKsin(j6);
IkReal x1263=((1.0)*cj7*x1262);
IkReal x1264=IKcos(j6);
IkReal x1265=((1.0)*cj8*x1264);
IkReal x1266=((1.0)*sj8*x1264);
IkReal x1267=(cj8*sj7*x1262);
IkReal x1268=((1.0)*sj7*sj8*x1262);
evalcond[0]=((((-1.0)*r20*x1266))+(((-1.0)*r21*x1268))+(((-1.0)*r22*x1263))+(((-1.0)*r21*x1265))+((r20*x1267)));
evalcond[1]=((((-1.0)*r12*x1263))+(((-1.0)*r11*x1268))+((r10*x1267))+cj3+(((-1.0)*r10*x1266))+(((-1.0)*r11*x1265)));
evalcond[2]=(((r00*x1267))+(((-1.0)*r01*x1265))+(((-1.0)*r02*x1263))+(((-1.0)*r00*x1266))+(((-1.0)*r01*x1268))+(((-1.0)*(1.0)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
IkReal x1269=(cj3*pz);
IkReal x1270=(r02*sj7);
IkReal x1271=(cj3*cj8*r20);
IkReal x1272=(cj3*r21*sj8);
IkReal x1273=(cj3*r22*sj7);
IkReal x1274=(cj7*cj8*r00);
IkReal x1275=(cj7*r01*sj8);
IkReal x1276=(cj3*cj7*cj8*r20);
IkReal x1277=(cj3*cj7*r21*sj8);
IkReal x1278=((((-0.36)*x1270))+(((-12.0)*x1269))+(((1.08)*x1271))+(((2.82)*x1276))+(((-1.08)*x1272))+(((-0.36)*x1274))+(((0.36)*x1275))+(((2.82)*x1273))+(((-2.82)*x1277)));
j4eval[0]=((IKabs(((((0.94)*x1273))+(((-4.0)*x1269))+(((-0.12)*x1274))+(((0.36)*x1271))+cj3+(((0.94)*x1276))+(((-0.94)*x1277))+(((0.12)*x1275))+(((-0.12)*x1270))+(((-0.36)*x1272)))))+(IKabs((x1278+cj3)))+(IKabs(((((-1.0)*(1.0)*cj3))+x1278))));
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j4, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j4evalpoly[1];
IkReal x1279=(cj3*pz);
IkReal x1280=(r02*sj7);
IkReal x1281=(cj3*cj8*r20);
IkReal x1282=(cj3*r21*sj8);
IkReal x1283=(cj3*r22*sj7);
IkReal x1284=(cj7*cj8*r00);
IkReal x1285=(cj7*r01*sj8);
IkReal x1286=(cj3*cj7*cj8*r20);
IkReal x1287=(cj3*cj7*r21*sj8);
IkReal x1288=((((0.94)*x1286))+(((-0.12)*x1284))+(((-0.12)*x1280))+(((-4.0)*x1279))+(((-0.94)*x1287))+(((-0.36)*x1282))+(((0.36)*x1281))+(((0.12)*x1285))+(((0.94)*x1283)));
IkReal x1289=((((-12.0)*x1279))+(((-0.36)*x1284))+(((1.08)*x1281))+(((0.36)*x1285))+(((-1.08)*x1282))+(((2.82)*x1283))+(((2.82)*x1286))+(((-0.36)*x1280))+(((-2.82)*x1287)));
IkReal x1290=((-1.0)*(((1.0)*cj3)));
op[0]=(cj3+x1288);
op[1]=0;
op[2]=(cj3+x1289);
op[3]=0;
op[4]=(x1290+x1289);
op[5]=0;
op[6]=(x1290+x1288);
polyroots6(op,zeror,numroots);
IkReal j4array[6], cj4array[6], sj4array[6], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[6]={true,true,true,true,true,true};
_nj4 = 6;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

IkReal x1291=(pz*sj3);
IkReal x1292=(r12*sj7);
IkReal x1293=(cj7*cj8*r10);
IkReal x1294=(cj7*r11*sj8);
IkReal x1295=(cj8*r20*sj3);
IkReal x1296=(r21*sj3*sj8);
IkReal x1297=(r22*sj3*sj7);
IkReal x1298=(cj7*cj8*r20*sj3);
IkReal x1299=(cj7*r21*sj3*sj8);
IkReal x1300=((((-0.36)*x1296))+(((0.94)*x1298))+(((0.94)*x1297))+(((0.12)*x1294))+(((-4.0)*x1291))+(((-0.94)*x1299))+(((-0.12)*x1293))+(((0.36)*x1295))+(((-0.12)*x1292)));
IkReal x1301=((-1.0)*(((1.0)*sj3)));
IkReal x1302=((((1.08)*x1295))+(((-2.82)*x1299))+(((2.82)*x1298))+(((-12.0)*x1291))+(((0.36)*x1294))+(((-0.36)*x1292))+(((-0.36)*x1293))+(((-1.08)*x1296))+(((2.82)*x1297)));
j4evalpoly[0]=((((htj4*htj4*htj4*htj4*htj4*htj4)*((x1300+sj3))))+(((htj4*htj4)*((x1302+x1301))))+x1300+x1301+(((htj4*htj4*htj4*htj4)*((x1302+sj3)))));
if( IKabs(j4evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1303=(r22*sj7);
IkReal x1304=(cj4*r21);
IkReal x1305=(cj8*sj6);
IkReal x1306=(r20*sj6*sj8);
IkReal x1307=(cj7*cj8*r20);
IkReal x1308=((1.0)*cj4);
IkReal x1309=(cj6*cj7*r22);
IkReal x1310=(cj7*sj8);
IkReal x1311=((1.0)*r21*sj4);
IkReal x1312=(cj6*cj8*r20*sj7);
IkReal x1313=(cj6*sj7*sj8);
if( IKabs(((((-1.0)*cj4*r21*x1313))+((x1304*x1305))+((sj4*x1303))+((cj4*x1312))+(((-1.0)*x1308*x1309))+((sj4*x1307))+((cj4*x1306))+(((-1.0)*x1310*x1311)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1311*x1313))+((x1304*x1310))+(((-1.0)*sj4*x1309))+((sj4*x1306))+((sj4*x1312))+(((-1.0)*x1307*x1308))+((r21*sj4*x1305))+(((-1.0)*x1303*x1308)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r21*x1313))+((x1304*x1305))+((sj4*x1303))+((cj4*x1312))+(((-1.0)*x1308*x1309))+((sj4*x1307))+((cj4*x1306))+(((-1.0)*x1310*x1311))))+IKsqr(((((-1.0)*x1311*x1313))+((x1304*x1310))+(((-1.0)*sj4*x1309))+((sj4*x1306))+((sj4*x1312))+(((-1.0)*x1307*x1308))+((r21*sj4*x1305))+(((-1.0)*x1303*x1308))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj4*r21*x1313))+((x1304*x1305))+((sj4*x1303))+((cj4*x1312))+(((-1.0)*x1308*x1309))+((sj4*x1307))+((cj4*x1306))+(((-1.0)*x1310*x1311))), ((((-1.0)*x1311*x1313))+((x1304*x1310))+(((-1.0)*sj4*x1309))+((sj4*x1306))+((sj4*x1312))+(((-1.0)*x1307*x1308))+((r21*sj4*x1305))+(((-1.0)*x1303*x1308))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1314=IKcos(j5);
IkReal x1315=(cj4*x1314);
IkReal x1316=(cj7*cj8);
IkReal x1317=IKsin(j5);
IkReal x1318=(sj4*x1317);
IkReal x1319=((1.0)*x1318);
IkReal x1320=((1.0)*cj7*sj8);
IkReal x1321=(cj4*x1317);
IkReal x1322=(cj3*x1321);
IkReal x1323=(sj4*x1314);
IkReal x1324=(cj3*x1323);
IkReal x1325=(sj3*x1321);
IkReal x1326=(sj3*x1323);
IkReal x1327=(cj8*sj6);
IkReal x1328=(sj6*sj8);
IkReal x1329=((1.0)*cj6*cj7);
IkReal x1330=(cj6*cj8*sj7);
IkReal x1331=((1.0)*cj6*sj7*sj8);
IkReal x1332=((0.09)*cj8);
IkReal x1333=((0.09)*sj8);
IkReal x1334=(cj3*x1315);
IkReal x1335=(sj3*x1315);
IkReal x1336=((0.25)*sj4);
IkReal x1337=((0.03)*sj4*x1317);
evalcond[0]=((((-1.0)*r21*x1320))+((r22*sj7))+(((-1.0)*x1319))+((r20*x1316))+x1315);
evalcond[1]=(x1324+x1322+((r02*sj7))+(((-1.0)*r01*x1320))+((r00*x1316)));
evalcond[2]=(x1326+x1325+(((-1.0)*r11*x1320))+((r10*x1316))+((r12*sj7)));
evalcond[3]=((((-1.0)*x1321))+(((-1.0)*r22*x1329))+((r20*x1330))+((r21*x1327))+(((-1.0)*r21*x1331))+(((-1.0)*x1323))+((r20*x1328)));
evalcond[4]=(((r20*x1332))+(((0.03)*x1321))+(((-1.0)*(1.0)*pz))+(((-0.235)*x1315))+(((-1.0)*r21*x1333))+(((0.235)*x1318))+(((-1.0)*(0.25)*cj4))+(((0.03)*x1323)));
evalcond[5]=((((-1.0)*r02*x1329))+(((-1.0)*cj3*x1319))+x1334+((r00*x1328))+((r00*x1330))+((r01*x1327))+(((-1.0)*r01*x1331)));
evalcond[6]=((((-1.0)*r11*x1331))+(((-1.0)*sj3*x1319))+((r10*x1330))+x1335+((r11*x1327))+((r10*x1328))+(((-1.0)*r12*x1329)));
evalcond[7]=(((r00*x1332))+(((-1.0)*(1.0)*px))+(((-0.03)*x1334))+(((-0.235)*x1322))+(((-1.0)*cj3*x1336))+(((-1.0)*r01*x1333))+(((0.095)*sj3))+(((-0.235)*x1324))+((cj3*x1337)));
evalcond[8]=(((sj3*x1337))+(((-1.0)*(0.095)*cj3))+(((-1.0)*(1.0)*py))+(((-1.0)*r11*x1333))+(((-1.0)*sj3*x1336))+((r10*x1332))+(((-0.235)*x1325))+(((-0.03)*x1335))+(((-0.235)*x1326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "1178b25b2a7573d3b092bbd22e2d12d7"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
