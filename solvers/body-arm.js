// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB;
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret; return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the a given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);

HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===

var ASM_CONSTS = [];





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 14448;
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([10,85,115,97,103,101,58,32,46,47,105,107,32,114,48,48,32,114,48,49,32,114,48,50,32,116,48,32,114,49,48,32,114,49,49,32,114,49,50,32,116,49,32,114,50,48,32,114,50,49,32,114,50,50,32,116,50,32,102,114,101,101,48,32,46,46,46,10,10,82,101,116,117,114,110,115,32,116,104,101,32,105,107,32,115,111,108,117,116,105,111,110,115,32,103,105,118,101,110,32,116,104,101,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,32,111,102,32,116,104,101,32,101,110,100,32,101,102,102,101,99,116,111,114,32,115,112,101,99,105,102,105,101,100,32,98,121,10,97,32,51,120,51,32,114,111,116,97,116,105,111,110,32,82,32,40,114,88,88,41,44,32,97,110,100,32,97,32,51,120,49,32,116,114,97,110,115,108,97,116,105,111,110,32,40,116,88,41,46,10,84,104,101,114,101,32,97,114,101,32,37,100,32,102,114,101,101,32,112,97,114,97,109,101,116,101,114,115,32,116,104,97,116,32,104,97,118,101,32,116,111,32,98,101,32,115,112,101,99,105,102,105,101,100,46,10,10,0,0,0,70,97,105,108,101,100,32,116,111,32,103,101,116,32,105,107,32,115,111,108,117,116,105,111,110,10,0,0,0,0,0,0,70,111,117,110,100,32,37,100,32,105,107,32,115,111,108,117,116,105,111,110,115,58,10,0,115,111,108,37,100,32,40,102,114,101,101,61,37,100,41,58,32,0,0,0,0,0,0,0,37,46,49,53,102,44,32,0,71,101,116,83,111,108,117,116,105,111,110,32,105,110,100,101,120,32,105,115,32,105,110,118,97,108,105,100,0,0,0,0,0,0,0,0,248,1,0,0,1,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,78,54,105,107,102,97,115,116,49,52,73,107,83,111,108,117,116,105,111,110,76,105,115,116,73,100,69,69,0,0,0,0,78,54,105,107,102,97,115,116,49,56,73,107,83,111,108,117,116,105,111,110,76,105,115,116,66,97,115,101,73,100,69,69,0,0,0,0,0,0,0,0,32,10,0,0,200,1,0,0,72,10,0,0,168,1,0,0,240,1,0,0,0,0,0,0,0,0,0,0,120,2,0,0,4,0,0,0,5,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,6,0,0,0,1,0,0,0,78,54,105,107,102,97,115,116,49,48,73,107,83,111,108,117,116,105,111,110,73,100,69,69,0,0,0,0,0,0,0,0,78,54,105,107,102,97,115,116,49,52,73,107,83,111,108,117,116,105,111,110,66,97,115,101,73,100,69,69,0,0,0,0,32,10,0,0,80,2,0,0,72,10,0,0,48,2,0,0,112,2,0,0,0,0,0,0,109,97,120,32,115,111,108,117,116,105,111,110,115,32,102,111,114,32,106,111,105,110,116,32,110,111,116,32,105,110,105,116,105,97,108,105,122,101,100,0,105,110,100,101,120,32,62,61,32,109,97,120,32,115,111,108,117,116,105,111,110,115,32,102,111,114,32,106,111,105,110,116,0,0,0,0,0,0,0,0,50,110,100,32,105,110,100,101,120,32,62,61,32,109,97,120,32,115,111,108,117,116,105,111,110,115,32,102,111,114,32,106,111,105,110,116,0,0,0,0,102,111,102,102,115,101,116,32,119,97,115,32,110,111,116,32,102,105,110,105,116,101,0,0,0,0,0,0,112,2,0,0,7,0,0,0,8,0,0,0,1,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,240,1,0,0,9,0,0,0,10,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,105,107,102,97,115,116,32,101,120,99,101,112,116,105,111,110,58,32,0,0,0,0,0,0,46,47,115,111,108,118,101,114,115,47,98,111,100,121,45,97,114,109,46,99,112,112,0,0,58,0,0,0,0,0,0,0,58,32,0,0,0,0,0,0,73,75,97,116,97,110,50,0,58,32,65,115,115,101,114,116,105,111,110,32,39,0,0,0,33,105,115,110,97,110,40,102,120,41,0,0,0,0,0,0,39,32,102,97,105,108,101,100,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,16,5,0,0,11,0,0,0,12,0,0,0,56,0,0,0,248,255,255,255,16,5,0,0,13,0,0,0,14,0,0,0,192,255,255,255,192,255,255,255,16,5,0,0,15,0,0,0,16,0,0,0,0,0,0,0,220,3,0,0,68,4,0,0,132,4,0,0,152,4,0,0,172,4,0,0,192,4,0,0,108,4,0,0,88,4,0,0,4,4,0,0,240,3,0,0,64,0,0,0,0,0,0,0,8,19,0,0,17,0,0,0,18,0,0,0,56,0,0,0,248,255,255,255,8,19,0,0,19,0,0,0,20,0,0,0,192,255,255,255,192,255,255,255,8,19,0,0,21,0,0,0,22,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,120,18,0,0,23,0,0,0,24,0,0,0,192,255,255,255,192,255,255,255,120,18,0,0,25,0,0,0,26,0,0,0,56,0,0,0,0,0,0,0,192,18,0,0,27,0,0,0,28,0,0,0,200,255,255,255,200,255,255,255,192,18,0,0,29,0,0,0,30,0,0,0,78,83,116,51,95,95,49,49,56,98,97,115,105,99,95,115,116,114,105,110,103,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,0,72,10,0,0,200,4,0,0,8,19,0,0,0,0,0,0,0,0,0,0,168,5,0,0,31,0,0,0,32,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,5,0,0,0,3,0,0,0,6,0,0,0,7,0,0,0,2,0,0,0,4,0,0,0,3,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,105,110,103,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,0,0,0,0,72,10,0,0,96,5,0,0,64,18,0,0,0,0,0,0,73,75,97,99,111,115,0,0,102,32,62,32,45,49,45,73,75,70,65,83,84,95,83,73,78,67,79,83,95,84,72,82,69,83,72,32,38,38,32,102,32,60,32,49,43,73,75,70,65,83,84,95,83,73,78,67,79,83,95,84,72,82,69,83,72,0,0,0,0,0,0,0,73,75,97,115,105,110,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,117,110,99,97,117,103,104,116,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,0,0,116,101,114,109,105,110,97,116,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,0,0,0,0,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,0,136,8,0,0,33,0,0,0,34,0,0,0,8,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,72,10,0,0,120,8,0,0,216,8,0,0,0,0,0,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,0,0,0,0,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,32,10,0,0,200,8,0,0,0,0,0,0,16,9,0,0,35,0,0,0,36,0,0,0,9,0,0,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,72,10,0,0,248,8,0,0,216,8,0,0,0,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,32,10,0,0,32,9,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,72,10,0,0,56,9,0,0,48,9,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,72,10,0,0,112,9,0,0,96,9,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,72,10,0,0,208,9,0,0,96,9,0,0,0,0,0,0,72,10,0,0,168,9,0,0,248,9,0,0,0,0,0,0,0,0,0,0,152,9,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,5,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,144,10,0,0,37,0,0,0,41,0,0,0,39,0,0,0,40,0,0,0,5,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,72,10,0,0,104,10,0,0,152,9,0,0,0,0,0,0,0,0,0,0,240,10,0,0,37,0,0,0,42,0,0,0,39,0,0,0,40,0,0,0,5,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,72,10,0,0,200,10,0,0,152,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,0,0,0,47,104,111,109,101,47,108,100,47,106,115,45,105,107,115,111,108,118,101,114,115,47,101,109,115,100,107,95,112,111,114,116,97,98,108,101,47,101,109,115,99,114,105,112,116,101,110,47,109,97,115,116,101,114,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,115,116,114,105,110,103,0,0,0,0,0,0,0,0,0,64,18,0,0,43,0,0,0,44,0,0,0,2,0,0,0,2,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,3,0,0,0,10,0,0,0,7,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,192,17,0,0,45,0,0,0,46,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,32,10,0,0,168,17,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,72,10,0,0,200,17,0,0,192,17,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,32,10,0,0,8,18,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,168,10,0,0,72,18,0,0,0,0,0,0,1,0,0,0,248,17,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,168,10,0,0,144,18,0,0,0,0,0,0,1,0,0,0,248,17,0,0,3,244,255,255,78,83,116,51,95,95,49,49,52,98,97,115,105,99,95,105,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,168,10,0,0,216,18,0,0,3,0,0,0,2,0,0,0,120,18,0,0,2,0,0,0,192,18,0,0,2,8,0,0,0,0,0,0,232,33,0,0,47,0,0,0,48,0,0,0,49,0,0,0,1,0,0,0,6,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,34,0,0,50,0,0,0,51,0,0,0,49,0,0,0,2,0,0,0,7,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,35,0,0,52,0,0,0,53,0,0,0,49,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,120,36,0,0,54,0,0,0,55,0,0,0,49,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,37,0,0,56,0,0,0,57,0,0,0,49,0,0,0,6,0,0,0,7,0,0,0,23,0,0,0,8,0,0,0,24,0,0,0,1,0,0,0,2,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,108,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,0,0,0,0,208,37,0,0,58,0,0,0,59,0,0,0,49,0,0,0,10,0,0,0,11,0,0,0,25,0,0,0,12,0,0,0,26,0,0,0,3,0,0,0,4,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,136,38,0,0,60,0,0,0,61,0,0,0,49,0,0,0,11,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,1,0,0,0,248,255,255,255,136,38,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,72,58,37,77,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,40,39,0,0,62,0,0,0,63,0,0,0,49,0,0,0,19,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,2,0,0,0,248,255,255,255,40,39,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,184,39,0,0,64,0,0,0,65,0,0,0,49,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,40,0,0,66,0,0,0,67,0,0,0,49,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,34,0,0,68,0,0,0,69,0,0,0,49,0,0,0,27,0,0,0,28,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,29,0,0,0,7,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,34,0,0,70,0,0,0,71,0,0,0,49,0,0,0,30,0,0,0,31,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,32,0,0,0,13,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,34,0,0,72,0,0,0,73,0,0,0,49,0,0,0,33,0,0,0,34,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,35,0,0,0,19,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,35,0,0,74,0,0,0,75,0,0,0,49,0,0,0,36,0,0,0,37,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,38,0,0,0,25,0,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,40,0,0,76,0,0,0,77,0,0,0,49,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,76,102,0,0,0,0,0,0,0,0,0,64,41,0,0,78,0,0,0,79,0,0,0,49,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,0,0,0,0,208,41,0,0,80,0,0,0,81,0,0,0,49,0,0,0,1,0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,46,48,76,102,0,0,0,0,0,0,0,96,42,0,0,82,0,0,0,83,0,0,0,49,0,0,0,2,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,42,0,0,84,0,0,0,85,0,0,0,49,0,0,0,9,0,0,0,14,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,42,0,0,86,0,0,0,87,0,0,0,49,0,0,0,10,0,0,0,15,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,33,34,118,101,99,116,111,114,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,0,47,104,111,109,101,47,108,100,47,106,115,45,105,107,115,111,108,118,101,114,115,47,101,109,115,100,107,95,112,111,114,116,97,98,108,101,47,101,109,115,99,114,105,112,116,101,110,47,109,97,115,116,101,114,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,118,101,99,116,111,114,0,0,0,0,0,95,95,116,104,114,111,119,95,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,33,34,118,101,99,116,111,114,32,111,117,116,95,111,102,95,114,97,110,103,101,34,0,0,95,95,116,104,114,111,119,95,111,117,116,95,111,102,95,114,97,110,103,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,0,192,33,0,0,88,0,0,0,89,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,30,0,0,90,0,0,0,91,0,0,0,49,0,0,0,6,0,0,0,11,0,0,0,7,0,0,0,12,0,0,0,8,0,0,0,1,0,0,0,13,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,31,0,0,92,0,0,0,93,0,0,0,49,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,39,0,0,0,40,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,33,0,0,94,0,0,0,95,0,0,0,49,0,0,0,42,0,0,0,43,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,0,0,0,0,152,33,0,0,96,0,0,0,97,0,0,0,49,0,0,0,44,0,0,0,45,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,116,114,117,101,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,109,47,37,100,47,37,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,0,0,0,0,208,29,0,0,98,0,0,0,99,0,0,0,49,0,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,72,10,0,0,184,29,0,0,32,56,0,0,0,0,0,0,0,0,0,0,96,30,0,0,98,0,0,0,100,0,0,0,49,0,0,0,14,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,9,0,0,0,15,0,0,0,10,0,0,0,16,0,0,0,11,0,0,0,5,0,0,0,17,0,0,0,6,0,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,32,10,0,0,64,30,0,0,168,10,0,0,40,30,0,0,0,0,0,0,2,0,0,0,208,29,0,0,2,0,0,0,88,30,0,0,2,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,168,10,0,0,128,30,0,0,0,0,0,0,2,0,0,0,208,29,0,0,2,0,0,0,88,30,0,0,2,0,0,0,0,0,0,0,48,31,0,0,98,0,0,0,101,0,0,0,49,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,46,0,0,0,47,0,0,0,8,0,0,0,48,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,32,10,0,0,16,31,0,0,168,10,0,0,232,30,0,0,0,0,0,0,2,0,0,0,208,29,0,0,2,0,0,0,40,31,0,0,2,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,168,10,0,0,80,31,0,0,0,0,0,0,2,0,0,0,208,29,0,0,2,0,0,0,40,31,0,0,2,0,0,0,0,0,0,0,240,31,0,0,98,0,0,0,102,0,0,0,49,0,0,0,5,0,0,0,6,0,0,0,9,0,0,0,49,0,0,0,50,0,0,0,10,0,0,0,51,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,168,10,0,0,200,31,0,0,0,0,0,0,2,0,0,0,208,29,0,0,2,0,0,0,40,31,0,0,2,0,0,0,0,0,0,0,104,32,0,0,98,0,0,0,103,0,0,0,49,0,0,0,7,0,0,0,8,0,0,0,11,0,0,0,52,0,0,0,53,0,0,0,12,0,0,0,54,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,168,10,0,0,64,32,0,0,0,0,0,0,2,0,0,0,208,29,0,0,2,0,0,0,40,31,0,0,2,0,0,0,0,0,0,0,224,32,0,0,98,0,0,0,104,0,0,0,49,0,0,0,7,0,0,0,8,0,0,0,11,0,0,0,52,0,0,0,53,0,0,0,12,0,0,0,54,0,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,72,10,0,0,184,32,0,0,104,32,0,0,0,0,0,0,0,0,0,0,72,33,0,0,98,0,0,0,105,0,0,0,49,0,0,0,7,0,0,0,8,0,0,0,11,0,0,0,52,0,0,0,53,0,0,0,12,0,0,0,54,0,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,72,10,0,0,32,33,0,0,104,32,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,72,10,0,0,88,33,0,0,208,29,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,72,10,0,0,128,33,0,0,208,29,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,72,10,0,0,168,33,0,0,208,29,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,72,10,0,0,208,33,0,0,208,29,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,72,10,0,0,248,33,0,0,208,29,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,32,10,0,0,64,34,0,0,168,10,0,0,32,34,0,0,0,0,0,0,2,0,0,0,208,29,0,0,2,0,0,0,88,34,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,168,10,0,0,128,34,0,0,0,0,0,0,2,0,0,0,208,29,0,0,2,0,0,0,88,34,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,168,10,0,0,192,34,0,0,0,0,0,0,2,0,0,0,208,29,0,0,2,0,0,0,88,34,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,168,10,0,0,0,35,0,0,0,0,0,0,2,0,0,0,208,29,0,0,2,0,0,0,88,34,0,0,2,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,32,10,0,0,160,35,0,0,168,10,0,0,136,35,0,0,0,0,0,0,1,0,0,0,192,35,0,0,0,0,0,0,168,10,0,0,64,35,0,0,0,0,0,0,2,0,0,0,208,29,0,0,2,0,0,0,200,35,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,168,10,0,0,72,36,0,0,0,0,0,0,1,0,0,0,192,35,0,0,0,0,0,0,168,10,0,0,0,36,0,0,0,0,0,0,2,0,0,0,208,29,0,0,2,0,0,0,96,36,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,32,10,0,0,248,36,0,0,168,10,0,0,224,36,0,0,0,0,0,0,1,0,0,0,24,37,0,0,0,0,0,0,168,10,0,0,152,36,0,0,0,0,0,0,2,0,0,0,208,29,0,0,2,0,0,0,32,37,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,168,10,0,0,160,37,0,0,0,0,0,0,1,0,0,0,24,37,0,0,0,0,0,0,168,10,0,0,88,37,0,0,0,0,0,0,2,0,0,0,208,29,0,0,2,0,0,0,184,37,0,0,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,32,10,0,0,56,38,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,32,10,0,0,88,38,0,0,168,10,0,0,240,37,0,0,0,0,0,0,3,0,0,0,208,29,0,0,2,0,0,0,80,38,0,0,2,0,0,0,128,38,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,32,10,0,0,248,38,0,0,168,10,0,0,176,38,0,0,0,0,0,0,3,0,0,0,208,29,0,0,2,0,0,0,80,38,0,0,2,0,0,0,32,39,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,32,10,0,0,152,39,0,0,168,10,0,0,80,39,0,0,0,0,0,0,2,0,0,0,208,29,0,0,2,0,0,0,176,39,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,168,10,0,0,216,39,0,0,0,0,0,0,2,0,0,0,208,29,0,0,2,0,0,0,176,39,0,0,0,8,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,32,10,0,0,136,40,0,0,168,10,0,0,64,40,0,0,0,0,0,0,2,0,0,0,208,29,0,0,2,0,0,0,168,40,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,32,10,0,0,24,41,0,0,168,10,0,0,208,40,0,0,0,0,0,0,2,0,0,0,208,29,0,0,2,0,0,0,56,41,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,32,10,0,0,168,41,0,0,168,10,0,0,96,41,0,0,0,0,0,0,2,0,0,0,208,29,0,0,2,0,0,0,200,41,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,32,10,0,0,56,42,0,0,168,10,0,0,240,41,0,0,0,0,0,0,2,0,0,0,208,29,0,0,2,0,0,0,88,42,0,0,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,32,10,0,0,152,42,0,0,168,10,0,0,128,42,0,0,0,0,0,0,2,0,0,0,208,29,0,0,2,0,0,0,176,42,0,0,2,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,168,10,0,0,216,42,0,0,0,0,0,0,2,0,0,0,208,29,0,0,2,0,0,0,176,42,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,77,0,0,0,0,0,0,80,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,77,97,114,99,104,0,0,0,65,112,114,105,108,0,0,0,77,97,121,0,0,0,0,0,74,117,110,101,0,0,0,0,74,117,108,121,0,0,0,0,65,117,103,117,115,116,0,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,74,97,110,0,0,0,0,0,70,101,98,0,0,0,0,0,77,97,114,0,0,0,0,0,65,112,114,0,0,0,0,0,74,117,110,0,0,0,0,0,74,117,108,0,0,0,0,0,65,117,103,0,0,0,0,0,83,101,112,0,0,0,0,0,79,99,116,0,0,0,0,0,78,111,118,0,0,0,0,0,68,101,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,117,110,100,97,121,0,0,77,111,110,100,97,121,0,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,83,117,110,0,0,0,0,0,77,111,110,0,0,0,0,0,84,117,101,0,0,0,0,0,87,101,100,0,0,0,0,0,84,104,117,0,0,0,0,0,70,114,105,0,0,0,0,0,83,97,116,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,32,10,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);




/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


   
  Module["_i64Subtract"] = _i64Subtract;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _pthread_mutex_lock() {}

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _abort() {
      Module['abort']();
    }

  
  
  
  var FS=undefined;
  
  
  
  var SOCKFS=undefined;function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      assert((varargs & 7) === 0);
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        argIndex = Runtime.prepVararg(argIndex, type);
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
          argIndex += 8;
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
          argIndex += 8;
        } else {
          assert((argIndex & 3) === 0);
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += 4;
        }
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      // extra effort to support printf, even without a filesystem. very partial, very hackish
      var result = __formatString(format, varargs);
      var string = intArrayToString(result);
      if (string[string.length-1] === '\n') string = string.substr(0, string.length-1); // remove a final \n, as Module.print will do that
      Module.print(string);
      return result.length;
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }


  var _asin=Math_asin;

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  var _fabs=Math_abs;


  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  
  var LOCALE={curr:0,check:function (locale) {
        if (locale) locale = Pointer_stringify(locale);
        return locale === 'C' || locale === 'POSIX' || !locale;
      }};
  
  function _free() {
  }
  Module["_free"] = _free;function _freelocale(locale) {
      _free(locale);
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  var _sin=Math_sin;

   
  Module["_i64Add"] = _i64Add;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  var _BDtoIHigh=true;

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _pthread_cond_broadcast() {
      return 0;
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  function ___cxa_guard_release() {}

  function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;


  var _cos=Math_cos;

  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);function _putchar(c) {
      // int putchar(int c);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/putchar.html
      return _fputc(c, HEAP32[((_stdout)>>2)]);
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  
  function _calloc(n, s) {
      var ret = _malloc(n*s);
      _memset(ret, 0, n*s);
      return ret;
    }function _newlocale(mask, locale, base) {
      if (!LOCALE.check(locale)) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      if (!base) base = _calloc(1, 4);
      return base;
    }

   
  Module["_memmove"] = _memmove;

  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

  function _pthread_cond_wait() {
      return 0;
    }

  var _atan2=Math_atan2;

  function _pthread_mutex_unlock() {}

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  var _acos=Math_acos;

  function _uselocale(locale) {
      var old = LOCALE.curr;
      if (locale) LOCALE.curr = locale;
      return old;
    }

  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiid"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "invoke_iiii": invoke_iiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_ii": invoke_ii, "invoke_viiiiiid": invoke_viiiiiid, "invoke_viii": invoke_viii, "invoke_viiiiid": invoke_viiiiid, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiii": invoke_iiiii, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_strftime": _strftime, "_pthread_cond_wait": _pthread_cond_wait, "_sin": _sin, "___ctype_tolower_loc": ___ctype_tolower_loc, "_uselocale": _uselocale, "___ctype_b_loc": ___ctype_b_loc, "___cxa_guard_acquire": ___cxa_guard_acquire, "_atan2": _atan2, "__reallyNegative": __reallyNegative, "_vfprintf": _vfprintf, "___assert_fail": ___assert_fail, "___cxa_allocate_exception": ___cxa_allocate_exception, "_asin": _asin, "__isLeapYear": __isLeapYear, "___ctype_toupper_loc": ___ctype_toupper_loc, "___cxa_guard_release": ___cxa_guard_release, "__addDays": __addDays, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "_strftime_l": _strftime_l, "_fprintf": _fprintf, "___setErrNo": ___setErrNo, "_sbrk": _sbrk, "_acos": _acos, "_catgets": _catgets, "_newlocale": _newlocale, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "___resumeException": ___resumeException, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_freelocale": _freelocale, "_pthread_getspecific": _pthread_getspecific, "__arraySum": __arraySum, "_putchar": _putchar, "_cos": _cos, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_pthread_once": _pthread_once, "_printf": _printf, "_pthread_key_create": _pthread_key_create, "_calloc": _calloc, "_write": _write, "_pthread_cond_broadcast": _pthread_cond_broadcast, "___errno_location": ___errno_location, "_pthread_setspecific": _pthread_setspecific, "_fputc": _fputc, "___cxa_throw": ___cxa_throw, "_sysconf": _sysconf, "_send": _send, "_abort": _abort, "_catclose": _catclose, "_fwrite": _fwrite, "_time": _time, "_pthread_mutex_lock": _pthread_mutex_lock, "_strerror": _strerror, "__formatString": __formatString, "_catopen": _catopen, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_pure_virtual": ___cxa_pure_virtual, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "_stderr": _stderr };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var _stderr=env._stderr|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viiiiiid=env.invoke_viiiiiid;
  var invoke_viii=env.invoke_viii;
  var invoke_viiiiid=env.invoke_viiiiid;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _strftime=env._strftime;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _sin=env._sin;
  var ___ctype_tolower_loc=env.___ctype_tolower_loc;
  var _uselocale=env._uselocale;
  var ___ctype_b_loc=env.___ctype_b_loc;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var _atan2=env._atan2;
  var __reallyNegative=env.__reallyNegative;
  var _vfprintf=env._vfprintf;
  var ___assert_fail=env.___assert_fail;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _asin=env._asin;
  var __isLeapYear=env.__isLeapYear;
  var ___ctype_toupper_loc=env.___ctype_toupper_loc;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var __addDays=env.__addDays;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _strftime_l=env._strftime_l;
  var _fprintf=env._fprintf;
  var ___setErrNo=env.___setErrNo;
  var _sbrk=env._sbrk;
  var _acos=env._acos;
  var _catgets=env._catgets;
  var _newlocale=env._newlocale;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var ___resumeException=env.___resumeException;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _freelocale=env._freelocale;
  var _pthread_getspecific=env._pthread_getspecific;
  var __arraySum=env.__arraySum;
  var _putchar=env._putchar;
  var _cos=env._cos;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _pthread_once=env._pthread_once;
  var _printf=env._printf;
  var _pthread_key_create=env._pthread_key_create;
  var _calloc=env._calloc;
  var _write=env._write;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var ___errno_location=env.___errno_location;
  var _pthread_setspecific=env._pthread_setspecific;
  var _fputc=env._fputc;
  var ___cxa_throw=env.___cxa_throw;
  var _sysconf=env._sysconf;
  var _send=env._send;
  var _abort=env._abort;
  var _catclose=env._catclose;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var _strerror=env._strerror;
  var __formatString=env.__formatString;
  var _catopen=env._catopen;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __Z9ComputeIkPKdS0_S0_RN6ikfast18IkSolutionListBaseIdEE($eetrans,$eerot,$pfree,$solutions) {
 $eetrans = $eetrans|0;
 $eerot = $eerot|0;
 $pfree = $pfree|0;
 $solutions = $solutions|0;
 var $0 = 0, $solver = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0;
 $solver = sp;
 $0 = (__ZN8IKSolver9ComputeIkEPKdS1_S1_RN6ikfast18IkSolutionListBaseIdEE($solver,$eetrans,$eerot,$pfree,$solutions)|0);
 STACKTOP = sp;return ($0|0);
}
function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $$0 = 0, $$1 = 0, $$6 = 0, $$lcssa = 0, $$lcssa23 = 0, $$lcssa8 = 0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eerot = 0, $eetrans = 0, $i$013 = 0, $i1$010 = 0, $j$09 = 0, $phitmp = 0, $phitmp22 = 0, $solutions = 0, $solvalues = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr7 = 0, $vfree = 0;
 var $vsolfree = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $vararg_buffer8 = sp + 120|0;
 $vararg_buffer4 = sp + 112|0;
 $vararg_buffer1 = sp + 104|0;
 $vararg_buffer = sp + 96|0;
 $solutions = sp + 168|0;
 $vfree = sp + 152|0;
 $eerot = sp + 24|0;
 $eetrans = sp;
 $solvalues = sp + 140|0;
 $vsolfree = sp + 128|0;
 $0 = ($argc|0)==(13);
 if (!($0)) {
  HEAP32[$vararg_buffer>>2] = 0;
  (_printf((8|0),($vararg_buffer|0))|0);
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 __ZN6ikfast14IkSolutionListIdEC2Ev($solutions);
 __ZNSt3__16vectorIdNS_9allocatorIdEEEC2Ej($vfree,0);
 $1 = (($argv) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (+_atof($2));
 HEAPF64[$eerot>>3] = $3;
 $4 = (($argv) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (+_atof($5));
 $7 = (($eerot) + 8|0);
 HEAPF64[$7>>3] = $6;
 $8 = (($argv) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (+_atof($9));
 $11 = (($eerot) + 16|0);
 HEAPF64[$11>>3] = $10;
 $12 = (($argv) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (+_atof($13));
 HEAPF64[$eetrans>>3] = $14;
 $15 = (($argv) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (+_atof($16));
 $18 = (($eerot) + 24|0);
 HEAPF64[$18>>3] = $17;
 $19 = (($argv) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (+_atof($20));
 $22 = (($eerot) + 32|0);
 HEAPF64[$22>>3] = $21;
 $23 = (($argv) + 28|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (+_atof($24));
 $26 = (($eerot) + 40|0);
 HEAPF64[$26>>3] = $25;
 $27 = (($argv) + 32|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (+_atof($28));
 $30 = (($eetrans) + 8|0);
 HEAPF64[$30>>3] = $29;
 $31 = (($argv) + 36|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (+_atof($32));
 $34 = (($eerot) + 48|0);
 HEAPF64[$34>>3] = $33;
 $35 = (($argv) + 40|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (+_atof($36));
 $38 = (($eerot) + 56|0);
 HEAPF64[$38>>3] = $37;
 $39 = (($argv) + 44|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (+_atof($40));
 $42 = (($eerot) + 64|0);
 HEAPF64[$42>>3] = $41;
 $43 = (($argv) + 48|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (+_atof($44));
 $46 = (($eetrans) + 16|0);
 HEAPF64[$46>>3] = $45;
 $47 = (($vfree) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = HEAP32[$vfree>>2]|0;
 $50 = ($48|0)==($49|0);
 if ($50) {
  $$lcssa8 = 0;
 } else {
  $56 = $49;$i$013 = 0;
  while(1) {
   $51 = (($i$013) + 13)|0;
   $52 = (($argv) + ($51<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (+_atof($53));
   $55 = (($56) + ($i$013<<3)|0);
   HEAPF64[$55>>3] = $54;
   $57 = (($i$013) + 1)|0;
   $58 = HEAP32[$47>>2]|0;
   $59 = HEAP32[$vfree>>2]|0;
   $60 = $58;
   $61 = $59;
   $62 = (($60) - ($61))|0;
   $63 = $62 >> 3;
   $64 = ($57>>>0)<($63>>>0);
   if ($64) {
    $56 = $59;$i$013 = $57;
   } else {
    $$lcssa = $59;$$lcssa23 = $63;
    break;
   }
  }
  $phitmp = ($$lcssa23|0)==(0);
  $phitmp22 = $phitmp ? 0 : $$lcssa;
  $$lcssa8 = $phitmp22;
 }
 $65 = (__Z9ComputeIkPKdS0_S0_RN6ikfast18IkSolutionListBaseIdEE($eetrans,$eerot,$$lcssa8,$solutions)|0);
 if ($65) {
  $67 = (__ZNK6ikfast14IkSolutionListIdE15GetNumSolutionsEv($solutions)|0);
  HEAP32[$vararg_buffer1>>2] = $67;
  (_printf((304|0),($vararg_buffer1|0))|0);
  __ZNSt3__16vectorIdNS_9allocatorIdEEEC2Ej($solvalues,6);
  $68 = (__ZNK6ikfast14IkSolutionListIdE15GetNumSolutionsEv($solutions)|0);
  $69 = ($68|0)==(0);
  if (!($69)) {
   $70 = (($vsolfree) + 4|0);
   $71 = (($solvalues) + 4|0);
   $i1$010 = 0;
   while(1) {
    $72 = (__ZNK6ikfast14IkSolutionListIdE11GetSolutionEj($solutions,$i1$010)|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (($73) + 16|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (FUNCTION_TABLE_ii[$75 & 63]($72)|0);
    $77 = (($76) + 4|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = HEAP32[$76>>2]|0;
    $80 = $78;
    $81 = $79;
    $82 = (($80) - ($81))|0;
    $83 = $82 >> 2;
    HEAP32[$vararg_buffer4>>2] = $i1$010;
    $vararg_ptr7 = (($vararg_buffer4) + 4|0);
    HEAP32[$vararg_ptr7>>2] = $83;
    (_printf((328|0),($vararg_buffer4|0))|0);
    $84 = HEAP32[$72>>2]|0;
    $85 = (($84) + 16|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (FUNCTION_TABLE_ii[$86 & 63]($72)|0);
    $88 = (($87) + 4|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = HEAP32[$87>>2]|0;
    $91 = $89;
    $92 = $90;
    $93 = (($91) - ($92))|0;
    $94 = $93 >> 2;
    __ZNSt3__16vectorIdNS_9allocatorIdEEEC2Ej($vsolfree,$94);
    $95 = HEAP32[$72>>2]|0;
    $96 = (($95) + 8|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = HEAP32[$solvalues>>2]|0;
    $99 = HEAP32[$70>>2]|0;
    $100 = HEAP32[$vsolfree>>2]|0;
    $101 = ($99|0)==($100|0);
    $$6 = $101 ? 0 : $100;
    FUNCTION_TABLE_viii[$97 & 3]($72,$98,$$6);
    $102 = HEAP32[$71>>2]|0;
    $103 = HEAP32[$solvalues>>2]|0;
    $104 = ($102|0)==($103|0);
    if (!($104)) {
     $106 = $103;$j$09 = 0;
     while(1) {
      $105 = (($106) + ($j$09<<3)|0);
      $107 = +HEAPF64[$105>>3];
      HEAPF64[$vararg_buffer8>>3] = $107;
      (_printf((352|0),($vararg_buffer8|0))|0);
      $108 = (($j$09) + 1)|0;
      $109 = HEAP32[$71>>2]|0;
      $110 = HEAP32[$solvalues>>2]|0;
      $111 = $109;
      $112 = $110;
      $113 = (($111) - ($112))|0;
      $114 = $113 >> 3;
      $115 = ($108>>>0)<($114>>>0);
      if ($115) {
       $106 = $110;$j$09 = $108;
      } else {
       break;
      }
     }
    }
    (_putchar(10)|0);
    __ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev($vsolfree);
    $116 = (($i1$010) + 1)|0;
    $117 = (__ZNK6ikfast14IkSolutionListIdE15GetNumSolutionsEv($solutions)|0);
    $118 = ($116>>>0)<($117>>>0);
    if ($118) {
     $i1$010 = $116;
    } else {
     break;
    }
   }
  }
  __ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev($solvalues);
  $$0 = 0;
 } else {
  $66 = HEAP32[_stderr>>2]|0;
  (_fwrite((272|0),26,1,($66|0))|0);
  $$0 = -1;
 }
 __ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev($vfree);
 __ZN6ikfast14IkSolutionListIdED2Ev($solutions);
 $$1 = $$0;
 STACKTOP = sp;return ($$1|0);
}
function __Z5IKcosd($f) {
 $f = +$f;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+Math_cos((+$f)));
 return (+$0);
}
function __Z5IKsind($f) {
 $f = +$f;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+Math_sin((+$f)));
 return (+$0);
}
function __ZN8IKSolver9ComputeIkEPKdS1_S1_RN6ikfast18IkSolutionListBaseIdEE($this,$eetrans,$eerot,$pfree,$solutions) {
 $this = $this|0;
 $eetrans = $eetrans|0;
 $eerot = $eerot|0;
 $pfree = $pfree|0;
 $solutions = $solutions|0;
 var $$ = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0;
 var $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0;
 var $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0;
 var $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0;
 var $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0;
 var $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0;
 var $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0;
 var $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0.0, $258 = 0, $259 = 0.0;
 var $26 = 0, $260 = 0.0, $261 = 0, $262 = 0.0, $263 = 0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0.0, $276 = 0, $277 = 0.0;
 var $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0, $281 = 0.0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0, $293 = 0.0, $294 = 0.0, $295 = 0.0;
 var $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0;
 var $313 = 0.0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0.0, $337 = 0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0, $342 = 0.0, $343 = 0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0.0, $351 = 0, $352 = 0.0, $353 = 0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0;
 var $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0;
 var $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0, $397 = 0.0, $398 = 0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0.0;
 var $403 = 0.0, $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0.0;
 var $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0.0;
 var $44 = 0, $440 = 0.0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0, $450 = 0.0, $451 = 0.0, $452 = 0.0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0.0;
 var $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0, $461 = 0.0, $462 = 0, $463 = 0.0, $464 = 0.0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0.0, $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0.0;
 var $476 = 0.0, $477 = 0.0, $478 = 0.0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0.0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0.0;
 var $494 = 0.0, $495 = 0.0, $496 = 0.0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0.0, $504 = 0.0, $505 = 0.0, $506 = 0.0, $507 = 0.0, $508 = 0.0, $509 = 0.0, $51 = 0, $510 = 0.0;
 var $511 = 0.0, $512 = 0.0, $513 = 0.0, $514 = 0.0, $515 = 0.0, $516 = 0.0, $517 = 0.0, $518 = 0.0, $519 = 0, $52 = 0, $520 = 0.0, $521 = 0.0, $522 = 0, $523 = 0.0, $524 = 0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0.0, $529 = 0.0;
 var $53 = 0, $530 = 0.0, $531 = 0.0, $532 = 0.0, $533 = 0.0, $534 = 0.0, $535 = 0.0, $536 = 0.0, $537 = 0.0, $538 = 0.0, $539 = 0.0, $54 = 0, $540 = 0.0, $541 = 0.0, $542 = 0.0, $543 = 0.0, $544 = 0.0, $545 = 0.0, $546 = 0.0, $547 = 0.0;
 var $548 = 0.0, $549 = 0.0, $55 = 0, $550 = 0.0, $551 = 0.0, $552 = 0.0, $553 = 0.0, $554 = 0.0, $555 = 0.0, $556 = 0.0, $557 = 0.0, $558 = 0.0, $559 = 0.0, $56 = 0, $560 = 0, $561 = 0, $562 = 0.0, $563 = 0.0, $564 = 0.0, $565 = 0.0;
 var $566 = 0.0, $567 = 0.0, $568 = 0.0, $569 = 0.0, $57 = 0, $570 = 0.0, $571 = 0.0, $572 = 0.0, $573 = 0.0, $574 = 0.0, $575 = 0.0, $576 = 0.0, $577 = 0.0, $578 = 0.0, $579 = 0.0, $58 = 0, $580 = 0.0, $581 = 0.0, $582 = 0, $583 = 0;
 var $584 = 0.0, $585 = 0.0, $586 = 0.0, $587 = 0.0, $588 = 0.0, $589 = 0.0, $59 = 0, $590 = 0.0, $591 = 0, $592 = 0.0, $593 = 0, $594 = 0.0, $595 = 0.0, $596 = 0.0, $597 = 0.0, $598 = 0.0, $599 = 0.0, $6 = 0, $60 = 0, $600 = 0.0;
 var $601 = 0.0, $602 = 0.0, $603 = 0.0, $604 = 0.0, $605 = 0.0, $606 = 0.0, $607 = 0.0, $608 = 0.0, $609 = 0.0, $61 = 0, $610 = 0.0, $611 = 0.0, $612 = 0.0, $613 = 0.0, $614 = 0.0, $615 = 0.0, $616 = 0.0, $617 = 0.0, $618 = 0.0, $619 = 0.0;
 var $62 = 0, $620 = 0.0, $621 = 0.0, $622 = 0.0, $623 = 0.0, $624 = 0.0, $625 = 0.0, $626 = 0.0, $627 = 0.0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0.0, $632 = 0.0, $633 = 0.0, $634 = 0.0, $635 = 0.0, $636 = 0.0, $637 = 0.0;
 var $638 = 0.0, $639 = 0.0, $64 = 0, $640 = 0.0, $641 = 0.0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0.0, $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0.0, $652 = 0.0, $653 = 0, $654 = 0.0, $655 = 0.0;
 var $656 = 0.0, $657 = 0.0, $658 = 0.0, $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0.0, $663 = 0, $664 = 0.0, $665 = 0, $666 = 0.0, $667 = 0, $668 = 0.0, $669 = 0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0.0, $673 = 0.0;
 var $674 = 0.0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0.0, $681 = 0.0, $682 = 0.0, $683 = 0.0, $684 = 0.0, $685 = 0.0, $686 = 0.0, $687 = 0.0, $688 = 0.0, $689 = 0.0, $69 = 0, $690 = 0.0, $691 = 0.0;
 var $692 = 0.0, $693 = 0.0, $694 = 0.0, $695 = 0, $696 = 0, $697 = 0.0, $698 = 0.0, $699 = 0.0, $7 = 0, $70 = 0, $700 = 0.0, $701 = 0.0, $702 = 0.0, $703 = 0.0, $704 = 0.0, $705 = 0.0, $706 = 0.0, $707 = 0.0, $708 = 0.0, $709 = 0.0;
 var $71 = 0, $710 = 0.0, $711 = 0.0, $712 = 0.0, $713 = 0.0, $714 = 0.0, $715 = 0.0, $716 = 0.0, $717 = 0, $718 = 0, $719 = 0.0, $72 = 0, $720 = 0.0, $721 = 0.0, $722 = 0.0, $723 = 0.0, $724 = 0.0, $725 = 0.0, $726 = 0, $727 = 0.0;
 var $728 = 0, $729 = 0.0, $73 = 0, $730 = 0.0, $731 = 0.0, $732 = 0.0, $733 = 0.0, $734 = 0.0, $735 = 0.0, $736 = 0.0, $737 = 0.0, $738 = 0.0, $739 = 0.0, $74 = 0, $740 = 0.0, $741 = 0.0, $742 = 0.0, $743 = 0.0, $744 = 0.0, $745 = 0.0;
 var $746 = 0.0, $747 = 0.0, $748 = 0.0, $749 = 0.0, $75 = 0, $750 = 0.0, $751 = 0.0, $752 = 0.0, $753 = 0.0, $754 = 0.0, $755 = 0.0, $756 = 0.0, $757 = 0.0, $758 = 0.0, $759 = 0.0, $76 = 0, $760 = 0.0, $761 = 0.0, $762 = 0.0, $763 = 0.0;
 var $764 = 0.0, $765 = 0.0, $766 = 0.0, $767 = 0.0, $768 = 0.0, $769 = 0.0, $77 = 0, $770 = 0.0, $771 = 0.0, $772 = 0.0, $773 = 0.0, $774 = 0.0, $775 = 0.0, $776 = 0.0, $777 = 0.0, $778 = 0.0, $779 = 0.0, $78 = 0, $780 = 0.0, $781 = 0.0;
 var $782 = 0.0, $783 = 0.0, $784 = 0.0, $785 = 0.0, $786 = 0.0, $787 = 0.0, $788 = 0, $789 = 0.0, $79 = 0, $790 = 0.0, $791 = 0.0, $792 = 0.0, $793 = 0.0, $794 = 0.0, $795 = 0.0, $796 = 0.0, $797 = 0.0, $798 = 0, $799 = 0.0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0.0, $802 = 0, $803 = 0.0, $804 = 0, $805 = 0.0, $806 = 0.0, $807 = 0.0, $808 = 0.0, $809 = 0.0, $81 = 0, $810 = 0.0, $811 = 0.0, $812 = 0.0, $813 = 0.0, $814 = 0.0, $815 = 0.0, $816 = 0.0, $817 = 0.0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0.0, $821 = 0.0, $822 = 0.0, $823 = 0.0, $824 = 0.0, $825 = 0.0, $826 = 0.0, $827 = 0.0, $828 = 0.0, $829 = 0.0, $83 = 0, $830 = 0.0, $831 = 0.0, $832 = 0.0, $833 = 0.0, $834 = 0.0, $835 = 0.0;
 var $836 = 0.0, $837 = 0.0, $838 = 0.0, $839 = 0.0, $84 = 0, $840 = 0.0, $841 = 0.0, $842 = 0.0, $843 = 0.0, $844 = 0.0, $845 = 0.0, $846 = 0.0, $847 = 0.0, $848 = 0.0, $849 = 0, $85 = 0, $850 = 0, $851 = 0.0, $852 = 0.0, $853 = 0.0;
 var $854 = 0.0, $855 = 0.0, $856 = 0.0, $857 = 0.0, $858 = 0, $859 = 0.0, $86 = 0, $860 = 0, $861 = 0.0, $862 = 0.0, $863 = 0.0, $864 = 0.0, $865 = 0.0, $866 = 0.0, $867 = 0.0, $868 = 0.0, $869 = 0.0, $87 = 0, $870 = 0.0, $871 = 0.0;
 var $872 = 0.0, $873 = 0.0, $874 = 0.0, $875 = 0.0, $876 = 0.0, $877 = 0.0, $878 = 0.0, $879 = 0.0, $88 = 0, $880 = 0.0, $881 = 0.0, $882 = 0.0, $883 = 0.0, $884 = 0.0, $885 = 0.0, $886 = 0.0, $887 = 0.0, $888 = 0.0, $889 = 0.0, $89 = 0;
 var $890 = 0.0, $891 = 0.0, $892 = 0.0, $893 = 0.0, $894 = 0.0, $895 = 0.0, $896 = 0.0, $897 = 0.0, $898 = 0.0, $899 = 0.0, $9 = 0, $90 = 0, $900 = 0.0, $901 = 0.0, $902 = 0.0, $903 = 0.0, $904 = 0.0, $905 = 0.0, $906 = 0.0, $907 = 0.0;
 var $908 = 0.0, $909 = 0.0, $91 = 0, $910 = 0.0, $911 = 0.0, $912 = 0.0, $913 = 0.0, $914 = 0.0, $915 = 0.0, $916 = 0.0, $917 = 0.0, $918 = 0.0, $919 = 0.0, $92 = 0, $920 = 0, $921 = 0.0, $922 = 0.0, $923 = 0.0, $924 = 0.0, $925 = 0.0;
 var $926 = 0.0, $927 = 0.0, $928 = 0.0, $929 = 0.0, $93 = 0, $930 = 0, $931 = 0.0, $932 = 0, $933 = 0.0, $934 = 0, $935 = 0.0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0;
 var $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $cj0array = 0, $cj1array = 0, $cj1array12 = 0, $cj1array4 = 0, $cj2array = 0, $exitcond = 0, $exitcond62 = 0, $iij0$028 = 0, $iij2$030 = 0, $ij0$046 = 0, $ij2$045 = 0, $j0array = 0, $j0valid = 0, $j1array = 0, $j1array11 = 0;
 var $j1array3 = 0, $j2array = 0, $j2valid = 0, $or$cond = 0, $sj0array = 0, $sj1array = 0, $sj1array13 = 0, $sj1array5 = 0, $sj2array = 0, $x390 = 0, $x391 = 0, $x405 = 0, $x406 = 0, $x47 = 0, $x74 = 0, $x75 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $j0array = sp + 264|0;
 $cj0array = sp + 248|0;
 $sj0array = sp + 232|0;
 $j0valid = sp + 282|0;
 $x47 = sp + 216|0;
 $j2array = sp + 200|0;
 $cj2array = sp + 184|0;
 $sj2array = sp + 168|0;
 $j2valid = sp + 280|0;
 $j1array = sp + 160|0;
 $cj1array = sp + 152|0;
 $sj1array = sp + 144|0;
 $x74 = sp + 128|0;
 $x75 = sp + 112|0;
 $j1array3 = sp + 104|0;
 $cj1array4 = sp + 96|0;
 $sj1array5 = sp + 88|0;
 $x390 = sp + 72|0;
 $x391 = sp + 56|0;
 $j1array11 = sp + 48|0;
 $cj1array12 = sp + 40|0;
 $sj1array13 = sp + 32|0;
 $x405 = sp + 16|0;
 $x406 = sp;
 HEAPF64[$this>>3] = nan;
 $0 = (($this) + 536|0);
 HEAP8[$0>>0] = -1;
 $1 = (($this) + 537|0);
 HEAP8[$1>>0] = -1;
 $2 = (($this) + 538|0);
 HEAP8[$2>>0] = -1;
 $3 = (($this) + 40|0);
 HEAPF64[$3>>3] = nan;
 $4 = (($this) + 539|0);
 HEAP8[$4>>0] = -1;
 $5 = (($this) + 540|0);
 HEAP8[$5>>0] = -1;
 $6 = (($this) + 541|0);
 HEAP8[$6>>0] = -1;
 $7 = (($this) + 80|0);
 HEAPF64[$7>>3] = nan;
 $8 = (($this) + 542|0);
 HEAP8[$8>>0] = -1;
 $9 = (($this) + 543|0);
 HEAP8[$9>>0] = -1;
 $10 = (($this) + 544|0);
 HEAP8[$10>>0] = -1;
 $11 = (($this) + 120|0);
 HEAPF64[$11>>3] = nan;
 $12 = (($this) + 545|0);
 HEAP8[$12>>0] = -1;
 $13 = (($this) + 546|0);
 HEAP8[$13>>0] = -1;
 $14 = (($this) + 547|0);
 HEAP8[$14>>0] = -1;
 $15 = (($this) + 160|0);
 HEAPF64[$15>>3] = nan;
 $16 = (($this) + 548|0);
 HEAP8[$16>>0] = -1;
 $17 = (($this) + 549|0);
 HEAP8[$17>>0] = -1;
 $18 = (($this) + 550|0);
 HEAP8[$18>>0] = -1;
 $19 = (($this) + 200|0);
 HEAPF64[$19>>3] = nan;
 $20 = (($this) + 551|0);
 HEAP8[$20>>0] = -1;
 $21 = (($this) + 552|0);
 HEAP8[$21>>0] = -1;
 $22 = (($this) + 553|0);
 HEAP8[$22>>0] = -1;
 $23 = (($this) + 248|0);
 $24 = (($eerot) + 8|0);
 $25 = (($this) + 272|0);
 $26 = (($eerot) + 16|0);
 $27 = (($this) + 296|0);
 $28 = (($eerot) + 24|0);
 $29 = (($this) + 320|0);
 $30 = (($eerot) + 32|0);
 $31 = (($this) + 344|0);
 $32 = (($eerot) + 40|0);
 $33 = (($this) + 368|0);
 $34 = (($eerot) + 48|0);
 $35 = (($this) + 392|0);
 $36 = (($eerot) + 56|0);
 $37 = (($this) + 416|0);
 $38 = (($eerot) + 64|0);
 $39 = (($this) + 440|0);
 $40 = (($this) + 464|0);
 $41 = (($eetrans) + 8|0);
 $42 = (($this) + 488|0);
 $43 = (($eetrans) + 16|0);
 $44 = (($this) + 512|0);
 $45 = (($this) + 240|0);
 $46 = (($this) + 264|0);
 $47 = (($this) + 288|0);
 $48 = (($this) + 456|0);
 $49 = (($this) + 312|0);
 $50 = (($this) + 336|0);
 $51 = (($this) + 360|0);
 $52 = (($this) + 480|0);
 $53 = (($this) + 384|0);
 $54 = (($this) + 408|0);
 $55 = (($this) + 432|0);
 $56 = (($this) + 504|0);
 $57 = (($this) + 528|0);
 $58 = (($this) + 472|0);
 $59 = (($this) + 496|0);
 $60 = (($this) + 520|0);
 $61 = (($this) + 256|0);
 $62 = (($this) + 280|0);
 $63 = (($this) + 304|0);
 $64 = (($this) + 328|0);
 $65 = (($this) + 352|0);
 $66 = (($this) + 376|0);
 $67 = (($this) + 400|0);
 $68 = (($this) + 424|0);
 $69 = (($this) + 448|0);
 $70 = (($j0array) + 8|0);
 $71 = (($sj0array) + 8|0);
 $72 = (($cj0array) + 8|0);
 $73 = (($j0valid) + 1|0);
 $74 = (($this) + 8|0);
 $75 = (($this) + 16|0);
 $76 = (($j2valid) + 1|0);
 $77 = (($sj2array) + 8|0);
 $78 = (($j2array) + 8|0);
 $79 = (($cj2array) + 8|0);
 $80 = (($this) + 88|0);
 $81 = (($this) + 96|0);
 $82 = (($x74) + 8|0);
 $83 = (($x75) + 8|0);
 $84 = (($this) + 48|0);
 $85 = (($this) + 56|0);
 $86 = (($x390) + 8|0);
 $87 = (($x391) + 8|0);
 $88 = (($this) + 48|0);
 $89 = (($this) + 56|0);
 $90 = (($x405) + 8|0);
 $91 = (($x406) + 8|0);
 $92 = (($this) + 48|0);
 $93 = (($this) + 56|0);
 $94 = HEAP32[$solutions>>2]|0;
 $95 = (($94) + 20|0);
 $96 = HEAP32[$95>>2]|0;
 FUNCTION_TABLE_vi[$96 & 127]($solutions);
 $97 = +HEAPF64[$eerot>>3];
 HEAPF64[$23>>3] = $97;
 $98 = +HEAPF64[$24>>3];
 HEAPF64[$25>>3] = $98;
 $99 = +HEAPF64[$26>>3];
 HEAPF64[$27>>3] = $99;
 $100 = +HEAPF64[$28>>3];
 HEAPF64[$29>>3] = $100;
 $101 = +HEAPF64[$30>>3];
 HEAPF64[$31>>3] = $101;
 $102 = +HEAPF64[$32>>3];
 HEAPF64[$33>>3] = $102;
 $103 = +HEAPF64[$34>>3];
 HEAPF64[$35>>3] = $103;
 $104 = +HEAPF64[$36>>3];
 HEAPF64[$37>>3] = $104;
 $105 = +HEAPF64[$38>>3];
 HEAPF64[$39>>3] = $105;
 $106 = +HEAPF64[$eetrans>>3];
 HEAPF64[$40>>3] = $106;
 $107 = +HEAPF64[$41>>3];
 HEAPF64[$42>>3] = $107;
 $108 = +HEAPF64[$43>>3];
 HEAPF64[$44>>3] = $108;
 $109 = +HEAPF64[$25>>3];
 HEAPF64[$45>>3] = $109;
 $110 = +HEAPF64[$23>>3];
 $111 = -$110;
 HEAPF64[$46>>3] = $111;
 $112 = +HEAPF64[$27>>3];
 HEAPF64[$47>>3] = $112;
 $113 = +HEAPF64[$40>>3];
 HEAPF64[$48>>3] = $113;
 $114 = +HEAPF64[$31>>3];
 $115 = -$114;
 HEAPF64[$49>>3] = $115;
 $116 = +HEAPF64[$29>>3];
 HEAPF64[$50>>3] = $116;
 $117 = +HEAPF64[$33>>3];
 $118 = -$117;
 HEAPF64[$51>>3] = $118;
 $119 = +HEAPF64[$42>>3];
 $120 = -$119;
 HEAPF64[$52>>3] = $120;
 $121 = +HEAPF64[$37>>3];
 $122 = -$121;
 HEAPF64[$53>>3] = $122;
 $123 = +HEAPF64[$35>>3];
 HEAPF64[$54>>3] = $123;
 $124 = +HEAPF64[$39>>3];
 $125 = -$124;
 HEAPF64[$55>>3] = $125;
 $126 = +HEAPF64[$44>>3];
 $127 = 0.34999999999999998 - $126;
 HEAPF64[$56>>3] = $127;
 $128 = +HEAPF64[$45>>3];
 HEAPF64[$23>>3] = $128;
 $129 = +HEAPF64[$46>>3];
 HEAPF64[$25>>3] = $129;
 $130 = +HEAPF64[$47>>3];
 HEAPF64[$27>>3] = $130;
 $131 = +HEAPF64[$49>>3];
 HEAPF64[$29>>3] = $131;
 $132 = +HEAPF64[$50>>3];
 HEAPF64[$31>>3] = $132;
 $133 = +HEAPF64[$51>>3];
 HEAPF64[$33>>3] = $133;
 $134 = +HEAPF64[$53>>3];
 HEAPF64[$35>>3] = $134;
 $135 = +HEAPF64[$54>>3];
 HEAPF64[$37>>3] = $135;
 $136 = +HEAPF64[$55>>3];
 HEAPF64[$39>>3] = $136;
 $137 = +HEAPF64[$48>>3];
 HEAPF64[$40>>3] = $137;
 $138 = +HEAPF64[$52>>3];
 HEAPF64[$42>>3] = $138;
 $139 = +HEAPF64[$56>>3];
 HEAPF64[$44>>3] = $139;
 $140 = +HEAPF64[$40>>3];
 $141 = +HEAPF64[$42>>3];
 $142 = $140 * $140;
 $143 = $141 * $141;
 $144 = $142 + $143;
 $145 = $139 * $139;
 $146 = $145 + $144;
 HEAPF64[$57>>3] = $146;
 $147 = +HEAPF64[$40>>3];
 $148 = +HEAPF64[$23>>3];
 $149 = $147 * $148;
 $150 = +HEAPF64[$42>>3];
 $151 = +HEAPF64[$29>>3];
 $152 = $150 * $151;
 $153 = $149 + $152;
 $154 = +HEAPF64[$44>>3];
 $155 = +HEAPF64[$35>>3];
 $156 = $154 * $155;
 $157 = $153 + $156;
 HEAPF64[$58>>3] = $157;
 $158 = +HEAPF64[$40>>3];
 $159 = +HEAPF64[$25>>3];
 $160 = $158 * $159;
 $161 = +HEAPF64[$42>>3];
 $162 = +HEAPF64[$31>>3];
 $163 = $161 * $162;
 $164 = $160 + $163;
 $165 = +HEAPF64[$44>>3];
 $166 = +HEAPF64[$37>>3];
 $167 = $165 * $166;
 $168 = $164 + $167;
 HEAPF64[$59>>3] = $168;
 $169 = +HEAPF64[$40>>3];
 $170 = +HEAPF64[$27>>3];
 $171 = $169 * $170;
 $172 = +HEAPF64[$42>>3];
 $173 = +HEAPF64[$33>>3];
 $174 = $172 * $173;
 $175 = $171 + $174;
 $176 = +HEAPF64[$44>>3];
 $177 = +HEAPF64[$39>>3];
 $178 = $176 * $177;
 $179 = $175 + $178;
 HEAPF64[$60>>3] = $179;
 $180 = +HEAPF64[$35>>3];
 $181 = $141 * $180;
 $182 = +HEAPF64[$44>>3];
 $183 = +HEAPF64[$29>>3];
 $184 = $182 * $183;
 $185 = $184 - $181;
 HEAPF64[$61>>3] = $185;
 $186 = +HEAPF64[$40>>3];
 $187 = +HEAPF64[$35>>3];
 $188 = $186 * $187;
 $189 = +HEAPF64[$23>>3];
 $190 = $139 * $189;
 $191 = $188 - $190;
 HEAPF64[$62>>3] = $191;
 $192 = +HEAPF64[$29>>3];
 $193 = $140 * $192;
 $194 = +HEAPF64[$42>>3];
 $195 = +HEAPF64[$23>>3];
 $196 = $194 * $195;
 $197 = $196 - $193;
 HEAPF64[$63>>3] = $197;
 $198 = +HEAPF64[$37>>3];
 $199 = $141 * $198;
 $200 = +HEAPF64[$44>>3];
 $201 = +HEAPF64[$31>>3];
 $202 = $200 * $201;
 $203 = $202 - $199;
 HEAPF64[$64>>3] = $203;
 $204 = +HEAPF64[$40>>3];
 $205 = +HEAPF64[$37>>3];
 $206 = $204 * $205;
 $207 = +HEAPF64[$25>>3];
 $208 = $139 * $207;
 $209 = $206 - $208;
 HEAPF64[$65>>3] = $209;
 $210 = +HEAPF64[$31>>3];
 $211 = $140 * $210;
 $212 = +HEAPF64[$42>>3];
 $213 = +HEAPF64[$25>>3];
 $214 = $212 * $213;
 $215 = $214 - $211;
 HEAPF64[$66>>3] = $215;
 $216 = +HEAPF64[$39>>3];
 $217 = $141 * $216;
 $218 = +HEAPF64[$44>>3];
 $219 = +HEAPF64[$33>>3];
 $220 = $218 * $219;
 $221 = $220 - $217;
 HEAPF64[$67>>3] = $221;
 $222 = +HEAPF64[$27>>3];
 $223 = $139 * $222;
 $224 = +HEAPF64[$40>>3];
 $225 = +HEAPF64[$39>>3];
 $226 = $224 * $225;
 $227 = $226 - $223;
 HEAPF64[$68>>3] = $227;
 $228 = +HEAPF64[$33>>3];
 $229 = $140 * $228;
 $230 = +HEAPF64[$42>>3];
 $231 = +HEAPF64[$27>>3];
 $232 = $230 * $231;
 $233 = $232 - $229;
 HEAPF64[$69>>3] = $233;
 $234 = +HEAPF64[$40>>3];
 $235 = (+__Z5IKabsd($234));
 $236 = +HEAPF64[$42>>3];
 $237 = (+__Z5IKabsd($236));
 $238 = $235 + $237;
 $239 = (+__Z5IKabsd($238));
 $240 = $239 < 9.9999999999999995E-7;
 if ($240) {
  $939 = HEAP32[$solutions>>2]|0;
  $940 = (($939) + 16|0);
  $941 = HEAP32[$940>>2]|0;
  $942 = (FUNCTION_TABLE_ii[$941 & 63]($solutions)|0);
  $943 = ($942|0)!=(0);
  STACKTOP = sp;return ($943|0);
 }
 $241 = (($x47) + 8|0);
 HEAP16[$j0valid>>1] = 0;
 HEAP8[$2>>0] = 2;
 $242 = +HEAPF64[$42>>3];
 $243 = +HEAPF64[$40>>3];
 $244 = -$243;
 __Z16IKatan2WithCheckIdE10CheckValueIT_ES1_S1_S1_($x47,$242,$244,1.9999999999999999E-6);
 $245 = HEAP8[$241>>0]|0;
 $246 = ($245<<24>>24)==(0);
 if ($246) {
  $939 = HEAP32[$solutions>>2]|0;
  $940 = (($939) + 16|0);
  $941 = HEAP32[$940>>2]|0;
  $942 = (FUNCTION_TABLE_ii[$941 & 63]($solutions)|0);
  $943 = ($942|0)!=(0);
  STACKTOP = sp;return ($943|0);
 }
 $247 = +HEAPF64[$x47>>3];
 $248 = -$247;
 HEAPF64[$j0array>>3] = $248;
 $249 = (+__Z5IKsind($248));
 HEAPF64[$sj0array>>3] = $249;
 $250 = (+__Z5IKcosd($248));
 HEAPF64[$cj0array>>3] = $250;
 $251 = 3.14159265358979 - $247;
 HEAPF64[$70>>3] = $251;
 $252 = (+__Z5IKsind($251));
 HEAPF64[$71>>3] = $252;
 $253 = +HEAPF64[$70>>3];
 $254 = (+__Z5IKcosd($253));
 HEAPF64[$72>>3] = $254;
 $255 = +HEAPF64[$j0array>>3];
 $256 = $255 > 3.14159265358979;
 if ($256) {
  $257 = $255 + -6.2831853071795898;
  HEAPF64[$j0array>>3] = $257;
 } else {
  $258 = $255 < -3.14159265358979;
  if ($258) {
   $259 = $255 + 6.2831853071795898;
   HEAPF64[$j0array>>3] = $259;
  }
 }
 HEAP8[$j0valid>>0] = 1;
 $260 = +HEAPF64[$70>>3];
 $261 = $260 > 3.14159265358979;
 if ($261) {
  $262 = $260 + -6.2831853071795898;
  HEAPF64[$70>>3] = $262;
 } else {
  $263 = $260 < -3.14159265358979;
  if ($263) {
   $264 = $260 + 6.2831853071795898;
   HEAPF64[$70>>3] = $264;
  }
 }
 HEAP8[$73>>0] = 1;
 $ij0$046 = 0;
 while(1) {
  $265 = (($j0valid) + ($ij0$046)|0);
  $266 = HEAP8[$265>>0]|0;
  $267 = ($266<<24>>24)==(0);
  if (!($267)) {
   $268 = $ij0$046&255;
   HEAP8[$0>>0] = $268;
   HEAP8[$1>>0] = -1;
   $iij0$028 = (($ij0$046) + 1)|0;
   $269 = ($iij0$028|0)<(2);
   if ($269) {
    $270 = (($sj0array) + ($ij0$046<<3)|0);
    $271 = (($j0valid) + ($iij0$028)|0);
    $272 = HEAP8[$271>>0]|0;
    $273 = ($272<<24>>24)==(0);
    if (!($273)) {
     $274 = (($cj0array) + ($ij0$046<<3)|0);
     $275 = +HEAPF64[$274>>3];
     $276 = (($cj0array) + ($iij0$028<<3)|0);
     $277 = +HEAPF64[$276>>3];
     $278 = $275 - $277;
     $279 = (+__Z5IKabsd($278));
     $280 = $279 < 9.9999999999999995E-7;
     if ($280) {
      $281 = +HEAPF64[$270>>3];
      $282 = (($sj0array) + ($iij0$028<<3)|0);
      $283 = +HEAPF64[$282>>3];
      $284 = $281 - $283;
      $285 = (+__Z5IKabsd($284));
      $286 = $285 < 9.9999999999999995E-7;
      if ($286) {
       HEAP8[$271>>0] = 0;
       $287 = $iij0$028&255;
       HEAP8[$1>>0] = $287;
      }
     }
    }
   }
   $288 = (($j0array) + ($ij0$046<<3)|0);
   $289 = +HEAPF64[$288>>3];
   HEAPF64[$this>>3] = $289;
   $290 = (($cj0array) + ($ij0$046<<3)|0);
   $291 = +HEAPF64[$290>>3];
   HEAPF64[$74>>3] = $291;
   $292 = (($sj0array) + ($ij0$046<<3)|0);
   $293 = +HEAPF64[$292>>3];
   HEAPF64[$75>>3] = $293;
   HEAP16[$j2valid>>1] = 0;
   HEAP8[$10>>0] = 2;
   $294 = +HEAPF64[$42>>3];
   $295 = $294 * 1.39762403913347;
   $296 = +HEAPF64[$75>>3];
   $297 = $295 * $296;
   $298 = $297 + 0.93029350104821795;
   $299 = +HEAPF64[$57>>3];
   $300 = $299 * 6.9881201956673697;
   $301 = $298 - $300;
   $302 = +HEAPF64[$74>>3];
   $303 = $302 * 1.39762403913347;
   $304 = +HEAPF64[$40>>3];
   $305 = $303 * $304;
   $306 = $301 + $305;
   HEAPF64[$sj2array>>3] = $306;
   $307 = !($306 >= -1.0000020000000001);
   $308 = !($306 <= 1.0000020000000001);
   $or$cond = $307 | $308;
   if ($or$cond) {
    $318 = (__Z13__DOUBLE_BITSd($306)|0);
    $319 = tempRet0;
    $320 = $319 & 2147483647;
    $321 = ($320>>>0)>(2146435072);
    $322 = ($318>>>0)>(0);
    $323 = ($320|0)==(2146435072);
    $324 = $323 & $322;
    $325 = $321 | $324;
    if ($325) {
     HEAP8[$j2valid>>0] = 1;
     HEAPF64[$cj2array>>3] = 1.0;
     HEAPF64[$sj2array>>3] = 0.0;
     HEAPF64[$j2array>>3] = 0.0;
     $ij2$045 = 0;
    } else {
     $ij2$045 = 0;
    }
   } else {
    HEAP8[$76>>0] = 1;
    HEAP8[$j2valid>>0] = 1;
    $309 = +HEAPF64[$sj2array>>3];
    $310 = (+__Z6IKasind($309));
    HEAPF64[$j2array>>3] = $310;
    $311 = (+__Z5IKcosd($310));
    HEAPF64[$cj2array>>3] = $311;
    $312 = +HEAPF64[$sj2array>>3];
    HEAPF64[$77>>3] = $312;
    $313 = +HEAPF64[$j2array>>3];
    $314 = $313 > 0.0;
    $$ = $314 ? 3.14159265358979 : -3.14159265358979;
    $315 = $$ - $313;
    HEAPF64[$78>>3] = $315;
    $316 = +HEAPF64[$cj2array>>3];
    $317 = -$316;
    HEAPF64[$79>>3] = $317;
    $ij2$045 = 0;
   }
   while(1) {
    $326 = (($j2valid) + ($ij2$045)|0);
    $327 = HEAP8[$326>>0]|0;
    $328 = ($327<<24>>24)==(0);
    do {
     if (!($328)) {
      $329 = $ij2$045&255;
      HEAP8[$8>>0] = $329;
      HEAP8[$9>>0] = -1;
      $iij2$030 = (($ij2$045) + 1)|0;
      $330 = ($iij2$030|0)<(2);
      if ($330) {
       $331 = (($sj2array) + ($ij2$045<<3)|0);
       $332 = (($j2valid) + ($iij2$030)|0);
       $333 = HEAP8[$332>>0]|0;
       $334 = ($333<<24>>24)==(0);
       if (!($334)) {
        $335 = (($cj2array) + ($ij2$045<<3)|0);
        $336 = +HEAPF64[$335>>3];
        $337 = (($cj2array) + ($iij2$030<<3)|0);
        $338 = +HEAPF64[$337>>3];
        $339 = $336 - $338;
        $340 = (+__Z5IKabsd($339));
        $341 = $340 < 9.9999999999999995E-7;
        if ($341) {
         $342 = +HEAPF64[$331>>3];
         $343 = (($sj2array) + ($iij2$030<<3)|0);
         $344 = +HEAPF64[$343>>3];
         $345 = $342 - $344;
         $346 = (+__Z5IKabsd($345));
         $347 = $346 < 9.9999999999999995E-7;
         if ($347) {
          HEAP8[$332>>0] = 0;
          $348 = $iij2$030&255;
          HEAP8[$9>>0] = $348;
         }
        }
       }
      }
      $349 = (($j2array) + ($ij2$045<<3)|0);
      $350 = +HEAPF64[$349>>3];
      HEAPF64[$7>>3] = $350;
      $351 = (($cj2array) + ($ij2$045<<3)|0);
      $352 = +HEAPF64[$351>>3];
      HEAPF64[$80>>3] = $352;
      $353 = (($sj2array) + ($ij2$045<<3)|0);
      $354 = +HEAPF64[$353>>3];
      HEAPF64[$81>>3] = $354;
      $355 = +HEAPF64[$80>>3];
      $356 = $355 * 2700.0;
      $357 = +HEAPF64[$74>>3];
      $358 = +HEAPF64[$40>>3];
      $359 = $357 * $358;
      $360 = $354 * 2700.0;
      $361 = +HEAPF64[$42>>3];
      $362 = +HEAPF64[$75>>3];
      $363 = $361 * $362;
      $364 = 1.00017470300489 - $354;
      $365 = $359 * 2650.0;
      $366 = $365 + -265.0;
      $367 = $363 * 2650.0;
      $368 = $366 + $367;
      $369 = +HEAPF64[$44>>3];
      $370 = $356 * $369;
      $371 = $370 + $368;
      $372 = $360 * $359;
      $373 = $371 - $372;
      $374 = $354 * 270.0;
      $375 = $374 + $373;
      $376 = $360 * $363;
      $377 = $375 - $376;
      $378 = (+__Z5IKabsd($377));
      $379 = $369 * 2650.0;
      $380 = $356 * $359;
      $381 = $380 - $379;
      $382 = $355 * 270.0;
      $383 = $381 - $382;
      $384 = $356 * $363;
      $385 = $384 + $383;
      $386 = $360 * $369;
      $387 = $386 + $385;
      $388 = (+__Z5IKabsd($387));
      $389 = $378 + $388;
      $390 = (+__Z5IKabsd($364));
      $391 = $390 < 9.9999999999999995E-7;
      if (!($391)) {
       $392 = $354 * 1431.0;
       $393 = 1431.25 - $392;
       $394 = (+__Z6IKsignd($393));
       $395 = (+__Z5IKabsd($394));
       $396 = $395 < 9.9999999999999995E-7;
       if (!($396)) {
        $397 = (+__Z5IKabsd($389));
        $398 = $397 < 9.9999999999999995E-7;
        if (!($398)) {
         HEAP8[$6>>0] = 1;
         $805 = +HEAPF64[$44>>3];
         $806 = $805 * 2700.0;
         $807 = +HEAPF64[$74>>3];
         $808 = +HEAPF64[$40>>3];
         $809 = $807 * $808;
         $810 = +HEAPF64[$42>>3];
         $811 = $810 * 2700.0;
         $812 = +HEAPF64[$75>>3];
         $813 = $811 * $812;
         $814 = +HEAPF64[$81>>3];
         $815 = $814 * 1431.0;
         $816 = 1431.25 - $815;
         $817 = (+__Z6IKsignd($816));
         __Z21IKPowWithIntegerCheckIdE10CheckValueIT_ES1_i($x405,$817,-1);
         $818 = HEAP8[$90>>0]|0;
         $819 = ($818<<24>>24)==(0);
         if ($819) {
          break;
         }
         $820 = $809 * 2650.0;
         $821 = $820 + -265.0;
         $822 = +HEAPF64[$81>>3];
         $823 = $822 * -2700.0;
         $824 = $809 * $823;
         $825 = $821 + $824;
         $826 = $813 * $822;
         $827 = $825 - $826;
         $828 = +HEAPF64[$42>>3];
         $829 = $828 * 2650.0;
         $830 = +HEAPF64[$75>>3];
         $831 = $829 * $830;
         $832 = $831 + $827;
         $833 = $822 * 270.0;
         $834 = $833 + $832;
         $835 = +HEAPF64[$80>>3];
         $836 = $806 * $835;
         $837 = $836 + $834;
         $838 = +HEAPF64[$44>>3];
         $839 = $838 * 2650.0;
         $840 = $806 * $822;
         $841 = $840 - $839;
         $842 = $835 * 2700.0;
         $843 = $809 * $842;
         $844 = $843 + $841;
         $845 = $835 * 270.0;
         $846 = $844 - $845;
         $847 = $813 * $835;
         $848 = $847 + $846;
         __Z16IKatan2WithCheckIdE10CheckValueIT_ES1_S1_S1_($x406,$837,$848,1.9999999999999999E-6);
         $849 = HEAP8[$91>>0]|0;
         $850 = ($849<<24>>24)==(0);
         if ($850) {
          break;
         }
         $851 = +HEAPF64[$x405>>3];
         $852 = $851 * 1.5707963267949001;
         $853 = $852 + -1.5707963267949001;
         $854 = +HEAPF64[$x406>>3];
         $855 = $854 + $853;
         HEAPF64[$j1array11>>3] = $855;
         $856 = (+__Z5IKsind($855));
         HEAPF64[$sj1array13>>3] = $856;
         $857 = (+__Z5IKcosd($855));
         HEAPF64[$cj1array12>>3] = $857;
         $858 = $855 > 3.14159265358979;
         do {
          if ($858) {
           $859 = $855 + -6.2831853071795898;
           HEAPF64[$j1array11>>3] = $859;
          } else {
           $860 = $855 < -3.14159265358979;
           if (!($860)) {
            break;
           }
           $861 = $855 + 6.2831853071795898;
           HEAPF64[$j1array11>>3] = $861;
          }
         } while(0);
         HEAP8[$4>>0] = 0;
         HEAP8[$5>>0] = -1;
         $862 = +HEAPF64[$j1array11>>3];
         HEAPF64[$3>>3] = $862;
         $863 = +HEAPF64[$cj1array12>>3];
         HEAPF64[$92>>3] = $863;
         $864 = +HEAPF64[$sj1array13>>3];
         HEAPF64[$93>>3] = $864;
         $865 = +HEAPF64[$3>>3];
         $866 = (+__Z5IKcosd($865));
         $867 = (+__Z5IKsind($865));
         $868 = +HEAPF64[$74>>3];
         $869 = +HEAPF64[$40>>3];
         $870 = $868 * $869;
         $871 = +HEAPF64[$80>>3];
         $872 = $871 * 0.27000000000000002;
         $873 = +HEAPF64[$42>>3];
         $874 = +HEAPF64[$75>>3];
         $875 = $873 * $874;
         $876 = +HEAPF64[$44>>3];
         $877 = +HEAPF64[$81>>3];
         $878 = $877 * 0.27000000000000002;
         $879 = $867 * $875;
         $880 = $866 * $878;
         $881 = $866 * 0.26500000000000001;
         $882 = $880 - $881;
         $883 = $867 * $872;
         $884 = $883 + $882;
         $885 = $884 - $876;
         $886 = -$867;
         $887 = $867 * $870;
         $888 = $887 + -0.26500000000000001;
         $889 = $888 + $878;
         $890 = $879 + $889;
         $891 = $867 * 0.10000000000000001;
         $892 = $890 - $891;
         $893 = $866 * $876;
         $894 = $892 - $893;
         $895 = $866 * 0.10000000000000001;
         $896 = $895 + $872;
         $897 = $866 * $875;
         $898 = $896 - $897;
         $899 = $876 * $886;
         $900 = $899 + $898;
         $901 = $866 * $870;
         $902 = $900 - $901;
         $903 = $876 * -0.53000000000000003;
         $904 = $866 * $903;
         $905 = $904 + -0.0073249999999999999;
         $906 = $879 * 0.53000000000000003;
         $907 = $906 + $905;
         $908 = +HEAPF64[$57>>3];
         $909 = $907 - $908;
         $910 = $867 * 0.53000000000000003;
         $911 = $910 * $870;
         $912 = $911 + $909;
         $913 = $875 * 0.20000000000000001;
         $914 = $913 + $912;
         $915 = $870 * 0.20000000000000001;
         $916 = $915 + $914;
         $917 = $867 * 0.052999999999999999;
         $918 = $916 - $917;
         $919 = (+__Z5IKabsd($885));
         $920 = $919 > 5.0000000000000004E-6;
         if ($920) {
          break;
         }
         $921 = $866 * $872;
         $922 = $921 + 0.10000000000000001;
         $923 = $867 * 0.26500000000000001;
         $924 = $923 + $922;
         $925 = $878 * $886;
         $926 = $924 + $925;
         $927 = $926 - $870;
         $928 = $927 - $875;
         $929 = (+__Z5IKabsd($928));
         $930 = $929 > 5.0000000000000004E-6;
         if ($930) {
          break;
         }
         $931 = (+__Z5IKabsd($894));
         $932 = $931 > 5.0000000000000004E-6;
         if ($932) {
          break;
         }
         $933 = (+__Z5IKabsd($902));
         $934 = $933 > 5.0000000000000004E-6;
         if ($934) {
          break;
         }
         $935 = (+__Z5IKabsd($918));
         $936 = $935 > 5.0000000000000004E-6;
         if ($936) {
          break;
         }
         __ZN8IKSolver17rotationfunction0ERN6ikfast18IkSolutionListBaseIdEE($this,$solutions);
         break;
        }
       }
      }
      $399 = +HEAPF64[$42>>3];
      $400 = +HEAPF64[$75>>3];
      $401 = $399 * $400;
      $402 = +HEAPF64[$81>>3];
      $403 = $402 * 27.0;
      $404 = +HEAPF64[$74>>3];
      $405 = +HEAPF64[$40>>3];
      $406 = $404 * $405;
      $407 = +HEAPF64[$80>>3];
      $408 = +HEAPF64[$44>>3];
      $409 = $407 * $408;
      $410 = $408 * 100.0;
      $411 = $402 * 10.188679245283;
      $412 = $401 * 10.0;
      $413 = 1.0 - $412;
      $414 = $406 * 10.0;
      $415 = $413 - $414;
      $416 = $402 * 1.0188679245283001;
      $417 = $415 - $416;
      $418 = $409 * 10.188679245283;
      $419 = $417 + $418;
      $420 = $401 * $411;
      $421 = $420 + $419;
      $422 = $411 * $406;
      $423 = $422 + $421;
      $424 = $402 * 14.31;
      $425 = $424 + -14.3125;
      $426 = $408 * $410;
      $427 = $425 + $426;
      $428 = $407 * $407;
      $429 = $428 * 7.29;
      $430 = $429 + $427;
      $431 = (+__Z5IKabsd($430));
      $432 = $408 * 10.0;
      $433 = $401 * $410;
      $434 = $433 - $432;
      $435 = $407 * 7.1550000000000002;
      $436 = $434 - $435;
      $437 = $407 * 7.29;
      $438 = $402 * $437;
      $439 = $438 + $436;
      $440 = $406 * $410;
      $441 = $440 + $439;
      $442 = (+__Z5IKabsd($441));
      $443 = $431 + $442;
      $444 = (+__Z5IKabsd($423));
      $445 = $444 < 9.9999999999999995E-7;
      if (!($445)) {
       $446 = $409 * 27.0;
       $447 = $446 + 2.6499999999999999;
       $448 = $406 * 26.5;
       $449 = $447 - $448;
       $450 = $401 * 26.5;
       $451 = $449 - $450;
       $452 = $402 * 2.7000000000000002;
       $453 = $451 - $452;
       $454 = $403 * $406;
       $455 = $454 + $453;
       $456 = $401 * $403;
       $457 = $456 + $455;
       $458 = (+__Z6IKsignd($457));
       $459 = (+__Z5IKabsd($458));
       $460 = $459 < 9.9999999999999995E-7;
       if (!($460)) {
        $461 = (+__Z5IKabsd($443));
        $462 = $461 < 9.9999999999999995E-7;
        if (!($462)) {
         HEAP8[$6>>0] = 1;
         $670 = +HEAPF64[$81>>3];
         $671 = $670 * 27.0;
         $672 = +HEAPF64[$42>>3];
         $673 = +HEAPF64[$75>>3];
         $674 = $672 * $673;
         $675 = +HEAPF64[$74>>3];
         $676 = +HEAPF64[$40>>3];
         $677 = $675 * $676;
         $678 = +HEAPF64[$44>>3];
         $679 = $678 * 100.0;
         $680 = $671 * $677;
         $681 = $680 + 2.6499999999999999;
         $682 = $671 * $674;
         $683 = $682 + $681;
         $684 = $674 * 26.5;
         $685 = $683 - $684;
         $686 = $677 * 26.5;
         $687 = $685 - $686;
         $688 = $670 * 2.7000000000000002;
         $689 = $687 - $688;
         $690 = +HEAPF64[$80>>3];
         $691 = $690 * 27.0;
         $692 = $678 * $691;
         $693 = $692 + $689;
         $694 = (+__Z6IKsignd($693));
         __Z21IKPowWithIntegerCheckIdE10CheckValueIT_ES1_i($x390,$694,-1);
         $695 = HEAP8[$86>>0]|0;
         $696 = ($695<<24>>24)==(0);
         if ($696) {
          break;
         }
         $697 = +HEAPF64[$81>>3];
         $698 = $697 * 14.31;
         $699 = $698 + -14.3125;
         $700 = +HEAPF64[$44>>3];
         $701 = $679 * $700;
         $702 = $699 + $701;
         $703 = +HEAPF64[$80>>3];
         $704 = $703 * $703;
         $705 = $704 * 7.29;
         $706 = $702 + $705;
         $707 = $674 * $679;
         $708 = $677 * $679;
         $709 = $707 + $708;
         $710 = $700 * 10.0;
         $711 = $709 - $710;
         $712 = $703 * 7.1550000000000002;
         $713 = $711 - $712;
         $714 = $703 * 7.29;
         $715 = $697 * $714;
         $716 = $713 + $715;
         __Z16IKatan2WithCheckIdE10CheckValueIT_ES1_S1_S1_($x391,$706,$716,1.9999999999999999E-6);
         $717 = HEAP8[$87>>0]|0;
         $718 = ($717<<24>>24)==(0);
         if ($718) {
          break;
         }
         $719 = +HEAPF64[$x390>>3];
         $720 = $719 * 1.5707963267949001;
         $721 = $720 + -1.5707963267949001;
         $722 = +HEAPF64[$x391>>3];
         $723 = $722 + $721;
         HEAPF64[$j1array3>>3] = $723;
         $724 = (+__Z5IKsind($723));
         HEAPF64[$sj1array5>>3] = $724;
         $725 = (+__Z5IKcosd($723));
         HEAPF64[$cj1array4>>3] = $725;
         $726 = $723 > 3.14159265358979;
         do {
          if ($726) {
           $727 = $723 + -6.2831853071795898;
           HEAPF64[$j1array3>>3] = $727;
          } else {
           $728 = $723 < -3.14159265358979;
           if (!($728)) {
            break;
           }
           $729 = $723 + 6.2831853071795898;
           HEAPF64[$j1array3>>3] = $729;
          }
         } while(0);
         HEAP8[$4>>0] = 0;
         HEAP8[$5>>0] = -1;
         $730 = +HEAPF64[$j1array3>>3];
         HEAPF64[$3>>3] = $730;
         $731 = +HEAPF64[$cj1array4>>3];
         HEAPF64[$88>>3] = $731;
         $732 = +HEAPF64[$sj1array5>>3];
         HEAPF64[$89>>3] = $732;
         $733 = +HEAPF64[$3>>3];
         $734 = (+__Z5IKcosd($733));
         $735 = (+__Z5IKsind($733));
         $736 = +HEAPF64[$74>>3];
         $737 = +HEAPF64[$40>>3];
         $738 = $736 * $737;
         $739 = +HEAPF64[$80>>3];
         $740 = $739 * 0.27000000000000002;
         $741 = +HEAPF64[$42>>3];
         $742 = +HEAPF64[$75>>3];
         $743 = $741 * $742;
         $744 = +HEAPF64[$44>>3];
         $745 = +HEAPF64[$81>>3];
         $746 = $745 * 0.27000000000000002;
         $747 = $735 * $743;
         $748 = $734 * -0.26500000000000001;
         $749 = $748 - $744;
         $750 = $735 * $740;
         $751 = $750 + $749;
         $752 = $734 * $746;
         $753 = $751 + $752;
         $754 = -$735;
         $755 = $746 + -0.26500000000000001;
         $756 = $747 + $755;
         $757 = $735 * 0.10000000000000001;
         $758 = $756 - $757;
         $759 = $734 * $744;
         $760 = $758 - $759;
         $761 = $735 * $738;
         $762 = $761 + $760;
         $763 = $734 * $738;
         $764 = $740 - $763;
         $765 = $734 * 0.10000000000000001;
         $766 = $765 + $764;
         $767 = $734 * $743;
         $768 = $766 - $767;
         $769 = $744 * $754;
         $770 = $769 + $768;
         $771 = $738 * 0.20000000000000001;
         $772 = $771 + -0.0073249999999999999;
         $773 = $743 * 0.20000000000000001;
         $774 = $772 + $773;
         $775 = $735 * 0.052999999999999999;
         $776 = $774 - $775;
         $777 = $735 * 0.53000000000000003;
         $778 = $777 * $738;
         $779 = $778 + $776;
         $780 = $747 * 0.53000000000000003;
         $781 = $780 + $779;
         $782 = +HEAPF64[$57>>3];
         $783 = $781 - $782;
         $784 = $744 * -0.53000000000000003;
         $785 = $734 * $784;
         $786 = $785 + $783;
         $787 = (+__Z5IKabsd($753));
         $788 = $787 > 5.0000000000000004E-6;
         if ($788) {
          break;
         }
         $789 = 0.10000000000000001 - $743;
         $790 = $789 - $738;
         $791 = $735 * 0.26500000000000001;
         $792 = $791 + $790;
         $793 = $746 * $754;
         $794 = $792 + $793;
         $795 = $734 * $740;
         $796 = $795 + $794;
         $797 = (+__Z5IKabsd($796));
         $798 = $797 > 5.0000000000000004E-6;
         if ($798) {
          break;
         }
         $799 = (+__Z5IKabsd($762));
         $800 = $799 > 5.0000000000000004E-6;
         if ($800) {
          break;
         }
         $801 = (+__Z5IKabsd($770));
         $802 = $801 > 5.0000000000000004E-6;
         if ($802) {
          break;
         }
         $803 = (+__Z5IKabsd($786));
         $804 = $803 > 5.0000000000000004E-6;
         if ($804) {
          break;
         }
         __ZN8IKSolver17rotationfunction0ERN6ikfast18IkSolutionListBaseIdEE($this,$solutions);
         break;
        }
       }
      }
      $463 = +HEAPF64[$74>>3];
      $464 = $463 * $463;
      $465 = +HEAPF64[$42>>3];
      $466 = $465 * $465;
      $467 = +HEAPF64[$40>>3];
      $468 = $463 * $467;
      $469 = +HEAPF64[$80>>3];
      $470 = $469 * 27.0;
      $471 = +HEAPF64[$81>>3];
      $472 = $471 * 27.0;
      $473 = +HEAPF64[$75>>3];
      $474 = $465 * $473;
      $475 = $464 * 100.0;
      $476 = $466 * 100.0;
      $477 = $476 + 1.0;
      $478 = +HEAPF64[$44>>3];
      $479 = $478 * $478;
      $480 = $479 * 100.0;
      $481 = $477 + $480;
      $482 = $466 * $475;
      $483 = $481 - $482;
      $484 = $468 * 20.0;
      $485 = $483 - $484;
      $486 = $474 * 20.0;
      $487 = $485 - $486;
      $488 = $468 * 200.0;
      $489 = $488 * $474;
      $490 = $489 + $487;
      $491 = $467 * $467;
      $492 = $475 * $491;
      $493 = $492 + $490;
      $494 = $474 * 26.5;
      $495 = $494 + -2.6499999999999999;
      $496 = $468 * 26.5;
      $497 = $496 + $495;
      $498 = $468 * $472;
      $499 = $497 - $498;
      $500 = $470 * $478;
      $501 = $500 + $499;
      $502 = $472 * $474;
      $503 = $501 - $502;
      $504 = $471 * 2.7000000000000002;
      $505 = $504 + $503;
      $506 = (+__Z5IKabsd($505));
      $507 = $468 * $470;
      $508 = $469 * 2.7000000000000002;
      $509 = $507 - $508;
      $510 = $470 * $474;
      $511 = $509 + $510;
      $512 = $472 * $478;
      $513 = $512 + $511;
      $514 = $478 * 26.5;
      $515 = $513 - $514;
      $516 = (+__Z5IKabsd($515));
      $517 = $506 + $516;
      $518 = (+__Z5IKabsd($493));
      $519 = $518 < 9.9999999999999995E-7;
      if (!($519)) {
       $520 = (+__Z6IKsignd($493));
       $521 = (+__Z5IKabsd($520));
       $522 = $521 < 9.9999999999999995E-7;
       if (!($522)) {
        $523 = (+__Z5IKabsd($517));
        $524 = $523 < 9.9999999999999995E-7;
        if (!($524)) {
         HEAP8[$6>>0] = 1;
         $525 = +HEAPF64[$74>>3];
         $526 = $525 * $525;
         $527 = +HEAPF64[$42>>3];
         $528 = $527 * $527;
         $529 = +HEAPF64[$75>>3];
         $530 = $527 * $529;
         $531 = +HEAPF64[$81>>3];
         $532 = $531 * 27.0;
         $533 = +HEAPF64[$80>>3];
         $534 = $533 * 27.0;
         $535 = +HEAPF64[$40>>3];
         $536 = $525 * $535;
         $537 = $526 * 100.0;
         $538 = $530 * 26.5;
         $539 = $538 + -2.6499999999999999;
         $540 = +HEAPF64[$44>>3];
         $541 = $534 * $540;
         $542 = $539 + $541;
         $543 = $536 * 26.5;
         $544 = $543 + $542;
         $545 = $530 * $532;
         $546 = $544 - $545;
         $547 = $532 * $536;
         $548 = $546 - $547;
         $549 = $531 * 2.7000000000000002;
         $550 = $549 + $548;
         $551 = $533 * 2.7000000000000002;
         $552 = $530 * $534;
         $553 = $552 - $551;
         $554 = $534 * $536;
         $555 = $553 + $554;
         $556 = $532 * $540;
         $557 = $556 + $555;
         $558 = $540 * 26.5;
         $559 = $557 - $558;
         __Z16IKatan2WithCheckIdE10CheckValueIT_ES1_S1_S1_($x74,$550,$559,1.9999999999999999E-6);
         $560 = HEAP8[$82>>0]|0;
         $561 = ($560<<24>>24)==(0);
         if (!($561)) {
          $562 = +HEAPF64[$40>>3];
          $563 = $562 * $562;
          $564 = $537 * $563;
          $565 = $564 + 1.0;
          $566 = +HEAPF64[$44>>3];
          $567 = $566 * $566;
          $568 = $567 * 100.0;
          $569 = $565 + $568;
          $570 = $530 * 20.0;
          $571 = $569 - $570;
          $572 = $536 * 20.0;
          $573 = $571 - $572;
          $574 = $528 * $537;
          $575 = $573 - $574;
          $576 = $530 * 200.0;
          $577 = $576 * $536;
          $578 = $577 + $575;
          $579 = $528 * 100.0;
          $580 = $579 + $578;
          $581 = (+__Z6IKsignd($580));
          __Z21IKPowWithIntegerCheckIdE10CheckValueIT_ES1_i($x75,$581,-1);
          $582 = HEAP8[$83>>0]|0;
          $583 = ($582<<24>>24)==(0);
          if (!($583)) {
           $584 = +HEAPF64[$x74>>3];
           $585 = $584 + -1.5707963267949001;
           $586 = +HEAPF64[$x75>>3];
           $587 = $586 * 1.5707963267949001;
           $588 = $585 + $587;
           HEAPF64[$j1array>>3] = $588;
           $589 = (+__Z5IKsind($588));
           HEAPF64[$sj1array>>3] = $589;
           $590 = (+__Z5IKcosd($588));
           HEAPF64[$cj1array>>3] = $590;
           $591 = $588 > 3.14159265358979;
           do {
            if ($591) {
             $592 = $588 + -6.2831853071795898;
             HEAPF64[$j1array>>3] = $592;
            } else {
             $593 = $588 < -3.14159265358979;
             if (!($593)) {
              break;
             }
             $594 = $588 + 6.2831853071795898;
             HEAPF64[$j1array>>3] = $594;
            }
           } while(0);
           HEAP8[$4>>0] = 0;
           HEAP8[$5>>0] = -1;
           $595 = +HEAPF64[$j1array>>3];
           HEAPF64[$3>>3] = $595;
           $596 = +HEAPF64[$cj1array>>3];
           HEAPF64[$84>>3] = $596;
           $597 = +HEAPF64[$sj1array>>3];
           HEAPF64[$85>>3] = $597;
           $598 = +HEAPF64[$3>>3];
           $599 = (+__Z5IKcosd($598));
           $600 = (+__Z5IKsind($598));
           $601 = +HEAPF64[$74>>3];
           $602 = +HEAPF64[$40>>3];
           $603 = $601 * $602;
           $604 = +HEAPF64[$80>>3];
           $605 = $604 * 0.27000000000000002;
           $606 = +HEAPF64[$42>>3];
           $607 = +HEAPF64[$75>>3];
           $608 = $606 * $607;
           $609 = +HEAPF64[$44>>3];
           $610 = +HEAPF64[$81>>3];
           $611 = $610 * 0.27000000000000002;
           $612 = $600 * $608;
           $613 = $599 * $611;
           $614 = $599 * 0.26500000000000001;
           $615 = $613 - $614;
           $616 = $615 - $609;
           $617 = $600 * $605;
           $618 = $617 + $616;
           $619 = -$600;
           $620 = $600 * 0.10000000000000001;
           $621 = -0.26500000000000001 - $620;
           $622 = $621 + $611;
           $623 = $612 + $622;
           $624 = $599 * $609;
           $625 = $623 - $624;
           $626 = $600 * $603;
           $627 = $626 + $625;
           $628 = $599 * $608;
           $629 = $599 * 0.10000000000000001;
           $630 = $629 - $628;
           $631 = $609 * $619;
           $632 = $631 + $630;
           $633 = $599 * $603;
           $634 = $632 - $633;
           $635 = $605 + $634;
           $636 = $612 * 0.53000000000000003;
           $637 = $636 + -0.0073249999999999999;
           $638 = $600 * 0.052999999999999999;
           $639 = $637 - $638;
           $640 = $603 * 0.20000000000000001;
           $641 = $640 + $639;
           $642 = $608 * 0.20000000000000001;
           $643 = $642 + $641;
           $644 = $600 * 0.53000000000000003;
           $645 = $644 * $603;
           $646 = $645 + $643;
           $647 = +HEAPF64[$57>>3];
           $648 = $646 - $647;
           $649 = $609 * -0.53000000000000003;
           $650 = $599 * $649;
           $651 = $650 + $648;
           $652 = (+__Z5IKabsd($618));
           $653 = $652 > 5.0000000000000004E-6;
           if ($653) {
            break;
           }
           $654 = $600 * 0.26500000000000001;
           $655 = $654 + 0.10000000000000001;
           $656 = $611 * $619;
           $657 = $655 + $656;
           $658 = $599 * $605;
           $659 = $658 + $657;
           $660 = $659 - $608;
           $661 = $660 - $603;
           $662 = (+__Z5IKabsd($661));
           $663 = $662 > 5.0000000000000004E-6;
           if ($663) {
            break;
           }
           $664 = (+__Z5IKabsd($627));
           $665 = $664 > 5.0000000000000004E-6;
           if ($665) {
            break;
           }
           $666 = (+__Z5IKabsd($635));
           $667 = $666 > 5.0000000000000004E-6;
           if ($667) {
            break;
           }
           $668 = (+__Z5IKabsd($651));
           $669 = $668 > 5.0000000000000004E-6;
           if ($669) {
            break;
           }
           __ZN8IKSolver17rotationfunction0ERN6ikfast18IkSolutionListBaseIdEE($this,$solutions);
          }
         }
        }
       }
      }
     }
    } while(0);
    $937 = (($ij2$045) + 1)|0;
    $exitcond = ($937|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $ij2$045 = $937;
    }
   }
  }
  $938 = (($ij0$046) + 1)|0;
  $exitcond62 = ($938|0)==(2);
  if ($exitcond62) {
   break;
  } else {
   $ij0$046 = $938;
  }
 }
 $939 = HEAP32[$solutions>>2]|0;
 $940 = (($939) + 16|0);
 $941 = HEAP32[$940>>2]|0;
 $942 = (FUNCTION_TABLE_ii[$941 & 63]($solutions)|0);
 $943 = ($942|0)!=(0);
 STACKTOP = sp;return ($943|0);
}
function __ZN6ikfast14IkSolutionListIdEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ikfast18IkSolutionListBaseIdEC2Ev($this);
 HEAP32[$this>>2] = ((392 + 8|0));
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $0;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = $0;
 $2 = (($this) + 12|0);
 HEAP32[$2>>2] = 0;
 return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ($__n|0)==(0);
 if ($2) {
  return;
 }
 __ZNSt3__16vectorIdNS_9allocatorIdEEE8allocateEj($this,$__n);
 __ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endEj($this,$__n);
 return;
}
function __ZNK6ikfast14IkSolutionListIdE15GetNumSolutionsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNK6ikfast14IkSolutionListIdE11GetSolutionEj($this,$index) {
 $this = $this|0;
 $index = $index|0;
 var $$03$i$i = 0, $$14$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)>($index>>>0);
 if (!($2)) {
  $3 = (___cxa_allocate_exception(8)|0);
  __ZNSt13runtime_errorC2EPKc($3,360);
  ___cxa_throw(($3|0),(2320|0),(35|0));
  // unreachable;
 }
 $4 = (($this) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($index|0)>(-1);
 if (!($6)) {
  $$14$i$i = $index;$14 = $5;
  while(1) {
   $13 = HEAP32[$14>>2]|0;
   $15 = (($$14$i$i) + 1)|0;
   $16 = ($$14$i$i|0)<(-1);
   if ($16) {
    $$14$i$i = $15;$14 = $13;
   } else {
    $18 = $13;
    break;
   }
  }
  $17 = (($18) + 8|0);
  return ($17|0);
 }
 $7 = ($index|0)>(0);
 if ($7) {
  $$03$i$i = $index;$9 = $5;
 } else {
  $18 = $5;
  $17 = (($18) + 8|0);
  return ($17|0);
 }
 while(1) {
  $8 = (($9) + 4|0);
  $10 = HEAP32[$8>>2]|0;
  $11 = (($$03$i$i) + -1)|0;
  $12 = ($$03$i$i|0)>(1);
  if ($12) {
   $$03$i$i = $11;$9 = $10;
  } else {
   $18 = $10;
   break;
  }
 }
 $17 = (($18) + 8|0);
 return ($17|0);
}
function __ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($0|0);
 if (!($4)) {
  $scevgep$i$i = (($3) + -8|0);
  $5 = $scevgep$i$i;
  $__new_last2$i$i = $0;
  $6 = (($5) - ($__new_last2$i$i))|0;
  $7 = $6 >>> 3;
  $8 = $7 ^ -1;
  $scevgep4$i$i = (($3) + ($8<<3)|0);
  HEAP32[$2>>2] = $scevgep4$i$i;
 }
 $9 = HEAP32[$this>>2]|0;
 __ZdlPv($9);
 return;
}
function __ZN6ikfast14IkSolutionListIdED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((392 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__110__list_impIN6ikfast10IkSolutionIdEENS_9allocatorIS3_EEED2Ev($0);
 return;
}
function __ZN6ikfast14IkSolutionListIdED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ikfast14IkSolutionListIdED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZN6ikfast14IkSolutionListIdE11AddSolutionERKNSt3__16vectorINS_23IkSingleDOFSolutionBaseIdEENS2_9allocatorIS5_EEEERKNS3_IiNS6_IiEEEE($this,$vinfos,$vfree) {
 $this = $this|0;
 $vinfos = $vinfos|0;
 $vfree = $vfree|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp;
 $1 = (($this) + 4|0);
 $2 = (($this) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __ZN6ikfast10IkSolutionIdEC2ERKNSt3__16vectorINS_23IkSingleDOFSolutionBaseIdEENS2_9allocatorIS5_EEEERKNS3_IiNS6_IiEEEE($0,$vinfos,$vfree);
 __ZNSt3__14listIN6ikfast10IkSolutionIdEENS_9allocatorIS3_EEE9push_backERKS3_($1,$0);
 __ZN6ikfast10IkSolutionIdED2Ev($0);
 STACKTOP = sp;return ($3|0);
}
function __ZN6ikfast14IkSolutionListIdE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__110__list_impIN6ikfast10IkSolutionIdEENS_9allocatorIS3_EEE5clearEv($0);
 return;
}
function __ZN6ikfast10IkSolutionIdED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((520 + 8|0));
 $0 = (($this) + 16|0);
 __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($0);
 $1 = (($this) + 4|0);
 __ZNSt3__113__vector_baseIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEED2Ev($1);
 return;
}
function __ZN6ikfast10IkSolutionIdED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ikfast10IkSolutionIdED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNK6ikfast10IkSolutionIdE11GetSolutionEPdPKd($this,$solution,$freevalues) {
 $this = $this|0;
 $solution = $solution|0;
 $freevalues = $freevalues|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if ($4) {
  return;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = HEAP32[$2>>2]|0;
 $7 = $5;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = (($9|0) / 24)&-1;
 $12 = $3;$i$01 = 0;
 while(1) {
  $11 = ((($12) + (($i$01*24)|0)|0) + 16|0);
  $13 = HEAP8[$11>>0]|0;
  $14 = ($13<<24>>24)<(0);
  do {
   if ($14) {
    $15 = ((($12) + (($i$01*24)|0)|0) + 8|0);
    $16 = +HEAPF64[$15>>3];
    $17 = (($solution) + ($i$01<<3)|0);
    HEAPF64[$17>>3] = $16;
   } else {
    $18 = $13 << 24 >> 24;
    $19 = (($freevalues) + ($18<<3)|0);
    $20 = +HEAPF64[$19>>3];
    $21 = (($12) + (($i$01*24)|0)|0);
    $22 = +HEAPF64[$21>>3];
    $23 = $20 * $22;
    $24 = ((($12) + (($i$01*24)|0)|0) + 8|0);
    $25 = +HEAPF64[$24>>3];
    $26 = $23 + $25;
    $27 = (($solution) + ($i$01<<3)|0);
    HEAPF64[$27>>3] = $26;
    $28 = $26 > 3.14159265358979;
    if ($28) {
     $29 = $26 + -6.2831853071795898;
     HEAPF64[$27>>3] = $29;
     break;
    }
    $30 = $26 < -3.14159265358979;
    if ($30) {
     $31 = $26 + 6.2831853071795898;
     HEAPF64[$27>>3] = $31;
    }
   }
  } while(0);
  $32 = (($i$01) + 1)|0;
  $33 = ($32>>>0)<($10>>>0);
  if ($33) {
   $12 = $6;$i$01 = $32;
  } else {
   break;
  }
 }
 return;
}
function __ZNK6ikfast10IkSolutionIdE11GetSolutionERNSt3__16vectorIdNS2_9allocatorIdEEEERKS6_($this,$solution,$freevalues) {
 $this = $this|0;
 $solution = $solution|0;
 $freevalues = $freevalues|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 63]($this)|0);
 __ZNSt3__16vectorIdNS_9allocatorIdEEE6resizeEj($solution,$3);
 $4 = HEAP32[$this>>2]|0;
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZNSt3__16vectorIdNS_9allocatorIdEEE2atEj($solution,0)|0);
 $8 = (($freevalues) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$freevalues>>2]|0;
 $11 = ($9|0)==($10|0);
 if ($11) {
  $13 = 0;
  FUNCTION_TABLE_viii[$6 & 3]($this,$7,$13);
  return;
 }
 $12 = (__ZNKSt3__16vectorIdNS_9allocatorIdEEE2atEj($freevalues,0)|0);
 $13 = $12;
 FUNCTION_TABLE_viii[$6 & 3]($this,$7,$13);
 return;
}
function __ZNK6ikfast10IkSolutionIdE7GetFreeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 return ($0|0);
}
function __ZNK6ikfast10IkSolutionIdE6GetDOFEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = (($6|0) / 24)&-1;
 return ($7|0);
}
function __ZNK6ikfast10IkSolutionIdE8ValidateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if ($4) {
  return;
 } else {
  $14 = $3;$i$02 = 0;
 }
 while(1) {
  $13 = ((($14) + (($i$02*24)|0)|0) + 18|0);
  $15 = HEAP8[$13>>0]|0;
  if ((($15<<24>>24) == -1)) {
   label = 4;
   break;
  } else if (!((($15<<24>>24) == 0))) {
   $17 = ((($14) + (($i$02*24)|0)|0) + 19|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = ($18&255)<($15&255);
   if (!($19)) {
    label = 6;
    break;
   }
   $21 = ((($14) + (($i$02*24)|0)|0) + 20|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = ($22<<24>>24)==(-1);
   $24 = ($22&255)<($15&255);
   $or$cond = $23 | $24;
   if (!($or$cond)) {
    label = 8;
    break;
   }
  }
  $26 = HEAP32[$2>>2]|0;
  $27 = ((($26) + (($i$02*24)|0)|0) + 8|0);
  $28 = +HEAPF64[$27>>3];
  (__Z13__DOUBLE_BITSd($28)|0);
  $29 = tempRet0;
  $30 = $29 & 2146435072;
  $31 = ($30>>>0)<(2146435072);
  $32 = (0)<(0);
  $33 = ($30|0)==(2146435072);
  $34 = $33 & $32;
  $35 = $31 | $34;
  $11 = (($i$02) + 1)|0;
  if (!($35)) {
   label = 10;
   break;
  }
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$2>>2]|0;
  $7 = $5;
  $8 = $6;
  $9 = (($7) - ($8))|0;
  $10 = (($9|0) / 24)&-1;
  $12 = ($11>>>0)<($10>>>0);
  if ($12) {
   $14 = $6;$i$02 = $11;
  } else {
   label = 11;
   break;
  }
 }
 if ((label|0) == 4) {
  $16 = (___cxa_allocate_exception(8)|0);
  __ZNSt13runtime_errorC2EPKc($16,648);
  ___cxa_throw(($16|0),(2320|0),(35|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  $20 = (___cxa_allocate_exception(8)|0);
  __ZNSt13runtime_errorC2EPKc($20,688);
  ___cxa_throw(($20|0),(2320|0),(35|0));
  // unreachable;
 }
 else if ((label|0) == 8) {
  $25 = (___cxa_allocate_exception(8)|0);
  __ZNSt13runtime_errorC2EPKc($25,728);
  ___cxa_throw(($25|0),(2320|0),(35|0));
  // unreachable;
 }
 else if ((label|0) == 10) {
  $36 = (___cxa_allocate_exception(8)|0);
  __ZNSt13runtime_errorC2EPKc($36,768);
  ___cxa_throw(($36|0),(2320|0),(35|0));
  // unreachable;
 }
 else if ((label|0) == 11) {
  return;
 }
}
function __ZNK6ikfast10IkSolutionIdE18GetSolutionIndicesERNSt3__16vectorIjNS2_9allocatorIjEEEE($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $$lcssa6 = 0, $$lcssa7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var $exitcond19 = 0, $i$016 = 0, $i$016$in = 0, $j$08 = 0, $j1$011 = 0, $j2$013 = 0, $or$cond = 0, $or$cond20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNSt3__16vectorIjNS_9allocatorIjEEE6resizeEj($v,0);
 HEAP32[$0>>2] = 0;
 $2 = (($v) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($v) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if ($6) {
  __ZNSt3__16vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIKjEEvRT_($v,$0);
 } else {
  $7 = ($3|0)==(0|0);
  if (!($7)) {
   HEAP32[$3>>2] = 0;
  }
  $8 = HEAP32[$2>>2]|0;
  $9 = (($8) + 4|0);
  HEAP32[$2>>2] = $9;
 }
 $10 = (($this) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($this) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $11;
 $15 = $13;
 $16 = (($14) - ($15))|0;
 $17 = ($16|0)>(0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($16|0) / 24)&-1;
 $i$016$in = $18;
 while(1) {
  $i$016 = (($i$016$in) + -1)|0;
  $19 = HEAP32[$12>>2]|0;
  $20 = ((($19) + (($i$016*24)|0)|0) + 18|0);
  $21 = HEAP8[$20>>0]|0;
  if (!((($21<<24>>24) == 0) | (($21<<24>>24) == 1) | (($21<<24>>24) == -1))) {
   $22 = HEAP32[$2>>2]|0;
   $23 = HEAP32[$v>>2]|0;
   $24 = ($22|0)==($23|0);
   $25 = HEAP32[$12>>2]|0;
   if ($24) {
    $$lcssa6 = 0;$$lcssa7 = $25;
   } else {
    $26 = HEAP32[$2>>2]|0;
    $27 = HEAP32[$v>>2]|0;
    $28 = $26;
    $29 = $27;
    $30 = (($28) - ($29))|0;
    $31 = $30 >> 2;
    $32 = HEAP32[$12>>2]|0;
    $34 = $25;$38 = $23;$j$08 = 0;
    while(1) {
     $33 = ((($34) + (($i$016*24)|0)|0) + 18|0);
     $35 = HEAP8[$33>>0]|0;
     $36 = $35&255;
     $37 = (($38) + ($j$08<<2)|0);
     $39 = HEAP32[$37>>2]|0;
     $40 = Math_imul($39, $36)|0;
     HEAP32[$37>>2] = $40;
     $41 = (($j$08) + 1)|0;
     $42 = ($41>>>0)<($31>>>0);
     if ($42) {
      $34 = $32;$38 = $27;$j$08 = $41;
     } else {
      $$lcssa6 = $31;$$lcssa7 = $32;
      break;
     }
    }
   }
   $43 = ((($$lcssa7) + (($i$016*24)|0)|0) + 20|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==(-1);
   $46 = ($$lcssa6|0)==(0);
   $or$cond = $45 | $46;
   if (!($or$cond)) {
    $j1$011 = 0;
    while(1) {
     $47 = HEAP32[$v>>2]|0;
     $48 = (($47) + ($j1$011<<2)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = HEAP32[$12>>2]|0;
     $51 = ((($50) + (($i$016*24)|0)|0) + 20|0);
     $52 = HEAP8[$51>>0]|0;
     $53 = $52&255;
     $54 = (($53) + ($49))|0;
     HEAP32[$1>>2] = $54;
     $55 = HEAP32[$2>>2]|0;
     $56 = HEAP32[$4>>2]|0;
     $57 = ($55|0)==($56|0);
     if ($57) {
      __ZNSt3__16vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIKjEEvRT_($v,$1);
     } else {
      $58 = ($55|0)==(0|0);
      if (!($58)) {
       HEAP32[$55>>2] = $54;
      }
      $59 = HEAP32[$2>>2]|0;
      $60 = (($59) + 4|0);
      HEAP32[$2>>2] = $60;
     }
     $61 = (($j1$011) + 1)|0;
     $exitcond = ($61|0)==($$lcssa6|0);
     if ($exitcond) {
      break;
     } else {
      $j1$011 = $61;
     }
    }
   }
   $62 = HEAP32[$12>>2]|0;
   $63 = ((($62) + (($i$016*24)|0)|0) + 19|0);
   $64 = HEAP8[$63>>0]|0;
   $65 = ($64<<24>>24)==(-1);
   $66 = ($$lcssa6|0)==(0);
   $or$cond20 = $65 | $66;
   if (!($or$cond20)) {
    $j2$013 = 0;
    while(1) {
     $68 = HEAP32[$12>>2]|0;
     $69 = ((($68) + (($i$016*24)|0)|0) + 19|0);
     $70 = HEAP8[$69>>0]|0;
     $71 = $70&255;
     $72 = HEAP32[$v>>2]|0;
     $73 = (($72) + ($j2$013<<2)|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = (($74) + ($71))|0;
     HEAP32[$73>>2] = $75;
     $76 = (($j2$013) + 1)|0;
     $exitcond19 = ($76|0)==($$lcssa6|0);
     if ($exitcond19) {
      break;
     } else {
      $j2$013 = $76;
     }
    }
   }
  }
  $67 = ($i$016$in|0)>(1);
  if ($67) {
   $i$016$in = $i$016;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZN6ikfast14IkSolutionBaseIdED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN6ikfast14IkSolutionBaseIdED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK6ikfast14IkSolutionBaseIdE11GetSolutionERNSt3__16vectorIdNS2_9allocatorIdEEEERKS6_($this,$solution,$freevalues) {
 $this = $this|0;
 $solution = $solution|0;
 $freevalues = $freevalues|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 63]($this)|0);
 __ZNSt3__16vectorIdNS_9allocatorIdEEE6resizeEj($solution,$3);
 $4 = HEAP32[$this>>2]|0;
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZNSt3__16vectorIdNS_9allocatorIdEEE2atEj($solution,0)|0);
 $8 = (($freevalues) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$freevalues>>2]|0;
 $11 = ($9|0)==($10|0);
 if ($11) {
  $13 = 0;
  FUNCTION_TABLE_viii[$6 & 3]($this,$7,$13);
  return;
 }
 $12 = (__ZNKSt3__16vectorIdNS_9allocatorIdEEE2atEj($freevalues,0)|0);
 $13 = $12;
 FUNCTION_TABLE_viii[$6 & 3]($this,$7,$13);
 return;
}
function __ZN6ikfast18IkSolutionListBaseIdED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN6ikfast18IkSolutionListBaseIdED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this,1040);
 $0 = (($this) + 64|0);
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($0);
 return;
}
function __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this);
 __ZdlPv($this);
 return;
}
function __ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + -8|0);
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 return;
}
function __ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + -8|0);
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($0);
 return;
}
function __ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
 return;
}
function __ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($3);
 return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((1312 + 8|0));
 $0 = (($this) + 32|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$__way,$__wch) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $__way = $__way|0;
 $__wch = $__wch|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($this) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($this) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  HEAP32[$2>>2] = $5;
 }
 $7 = $__wch & 24;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = $agg$result;
  $10 = $9;
  HEAP32[$10>>2] = 0;
  $11 = (($9) + 4)|0;
  $12 = $11;
  HEAP32[$12>>2] = 0;
  $13 = (($agg$result) + 8|0);
  $14 = $13;
  $15 = $14;
  HEAP32[$15>>2] = -1;
  $16 = (($14) + 4)|0;
  $17 = $16;
  HEAP32[$17>>2] = -1;
  return;
 }
 $18 = ($7|0)==(24);
 $19 = ($__way|0)==(1);
 $or$cond = $19 & $18;
 if ($or$cond) {
  $20 = $agg$result;
  $21 = $20;
  HEAP32[$21>>2] = 0;
  $22 = (($20) + 4)|0;
  $23 = $22;
  HEAP32[$23>>2] = 0;
  $24 = (($agg$result) + 8|0);
  $25 = $24;
  $26 = $25;
  HEAP32[$26>>2] = -1;
  $27 = (($25) + 4)|0;
  $28 = $27;
  HEAP32[$28>>2] = -1;
  return;
 }
 do {
  if ((($__way|0) == 1)) {
   $29 = $__wch & 8;
   $30 = ($29|0)==(0);
   if ($30) {
    $40 = HEAP32[$4>>2]|0;
    $41 = (($this) + 20|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $40;
    $44 = $42;
    $45 = (($43) - ($44))|0;
    $46 = ($45|0)<(0);
    $47 = $46 << 31 >> 31;
    $71 = $45;$72 = $47;
    break;
   } else {
    $31 = (($this) + 12|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($this) + 8|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $32;
    $36 = $34;
    $37 = (($35) - ($36))|0;
    $38 = ($37|0)<(0);
    $39 = $38 << 31 >> 31;
    $71 = $37;$72 = $39;
    break;
   }
  } else if ((($__way|0) == 2)) {
   $48 = HEAP32[$2>>2]|0;
   $49 = (($this) + 32|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $50 & 1;
   $52 = ($51<<24>>24)==(0);
   if ($52) {
    $55 = (($49) + 1|0);
    $57 = $55;
   } else {
    $53 = (($this) + 40|0);
    $54 = HEAP32[$53>>2]|0;
    $57 = $54;
   }
   $56 = $48;
   $58 = $57;
   $59 = (($56) - ($58))|0;
   $60 = ($59|0)<(0);
   $61 = $60 << 31 >> 31;
   $71 = $59;$72 = $61;
  } else if ((($__way|0) == 0)) {
   $71 = 0;$72 = 0;
  } else {
   $62 = $agg$result;
   $63 = $62;
   HEAP32[$63>>2] = 0;
   $64 = (($62) + 4)|0;
   $65 = $64;
   HEAP32[$65>>2] = 0;
   $66 = (($agg$result) + 8|0);
   $67 = $66;
   $68 = $67;
   HEAP32[$68>>2] = -1;
   $69 = (($67) + 4)|0;
   $70 = $69;
   HEAP32[$70>>2] = -1;
   return;
  }
 } while(0);
 $73 = (_i64Add(($71|0),($72|0),($0|0),($1|0))|0);
 $74 = tempRet0;
 $75 = ($74|0)<(0);
 if (!($75)) {
  $76 = HEAP32[$2>>2]|0;
  $77 = (($this) + 32|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78 & 1;
  $80 = ($79<<24>>24)==(0);
  if ($80) {
   $83 = (($77) + 1|0);
   $85 = $83;
  } else {
   $81 = (($this) + 40|0);
   $82 = HEAP32[$81>>2]|0;
   $85 = $82;
  }
  $84 = $76;
  $86 = $85;
  $87 = (($84) - ($86))|0;
  $88 = ($87|0)<(0);
  $89 = $88 << 31 >> 31;
  $90 = ($89|0)<($74|0);
  $91 = ($87>>>0)<($73>>>0);
  $92 = ($89|0)==($74|0);
  $93 = $92 & $91;
  $94 = $90 | $93;
  if (!($94)) {
   $104 = ($73|0)==(0);
   $105 = ($74|0)==(0);
   $106 = $104 & $105;
   if (!($106)) {
    $107 = $__wch & 8;
    $108 = ($107|0)==(0);
    if (!($108)) {
     $109 = (($this) + 12|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $112 = $agg$result;
      $113 = $112;
      HEAP32[$113>>2] = 0;
      $114 = (($112) + 4)|0;
      $115 = $114;
      HEAP32[$115>>2] = 0;
      $116 = (($agg$result) + 8|0);
      $117 = $116;
      $118 = $117;
      HEAP32[$118>>2] = -1;
      $119 = (($117) + 4)|0;
      $120 = $119;
      HEAP32[$120>>2] = -1;
      return;
     }
    }
    $121 = $__wch & 16;
    $122 = ($121|0)==(0);
    if (!($122)) {
     $123 = HEAP32[$4>>2]|0;
     $124 = ($123|0)==(0|0);
     if ($124) {
      $125 = $agg$result;
      $126 = $125;
      HEAP32[$126>>2] = 0;
      $127 = (($125) + 4)|0;
      $128 = $127;
      HEAP32[$128>>2] = 0;
      $129 = (($agg$result) + 8|0);
      $130 = $129;
      $131 = $130;
      HEAP32[$131>>2] = -1;
      $132 = (($130) + 4)|0;
      $133 = $132;
      HEAP32[$133>>2] = -1;
      return;
     }
    }
   }
   $134 = $__wch & 8;
   $135 = ($134|0)==(0);
   if (!($135)) {
    $136 = (($this) + 8|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = (($137) + ($73)|0);
    $139 = HEAP32[$2>>2]|0;
    $140 = (($this) + 12|0);
    HEAP32[$140>>2] = $138;
    $141 = (($this) + 16|0);
    HEAP32[$141>>2] = $139;
   }
   $142 = $__wch & 16;
   $143 = ($142|0)==(0);
   if (!($143)) {
    $144 = (($this) + 20|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = (($145) + ($73)|0);
    HEAP32[$4>>2] = $146;
   }
   $147 = $agg$result;
   $148 = $147;
   HEAP32[$148>>2] = 0;
   $149 = (($147) + 4)|0;
   $150 = $149;
   HEAP32[$150>>2] = 0;
   $151 = (($agg$result) + 8|0);
   $152 = $151;
   $153 = $152;
   HEAP32[$153>>2] = $73;
   $154 = (($152) + 4)|0;
   $155 = $154;
   HEAP32[$155>>2] = $74;
   return;
  }
 }
 $95 = $agg$result;
 $96 = $95;
 HEAP32[$96>>2] = 0;
 $97 = (($95) + 4)|0;
 $98 = $97;
 HEAP32[$98>>2] = 0;
 $99 = (($agg$result) + 8|0);
 $100 = $99;
 $101 = $100;
 HEAP32[$101>>2] = -1;
 $102 = (($100) + 4)|0;
 $103 = $102;
 HEAP32[$103>>2] = -1;
 return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$__sp,$__wch) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__sp = $__sp|0;
 $__wch = $__wch|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($__sp) + 8|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 FUNCTION_TABLE_viiiiii[$2 & 15]($agg$result,$this,$6,$9,0,$__wch);
 return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  HEAP32[$0>>2] = $3;
 }
 $5 = (($this) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = -1;
  return ($$0|0);
 }
 $9 = (($this) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = ($10>>>0)<($11>>>0);
 if ($12) {
  HEAP32[$9>>2] = $11;
 }
 $13 = (($this) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$9>>2]|0;
 $16 = ($14>>>0)<($15>>>0);
 if (!($16)) {
  $$0 = -1;
  return ($$0|0);
 }
 $17 = HEAP8[$14>>0]|0;
 $18 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($17)|0);
 $$0 = $18;
 return ($$0|0);
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  HEAP32[$0>>2] = $3;
 }
 $5 = (($this) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($this) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 if (!($9)) {
  $$0 = -1;
  return ($$0|0);
 }
 $10 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($__c,-1)|0);
 if ($10) {
  $11 = (($8) + -1|0);
  $12 = HEAP32[$0>>2]|0;
  HEAP32[$5>>2] = $6;
  HEAP32[$7>>2] = $11;
  $13 = (($this) + 16|0);
  HEAP32[$13>>2] = $12;
  $14 = (__ZNSt3__111char_traitsIcE7not_eofEi($__c)|0);
  $$0 = $14;
  return ($$0|0);
 }
 $15 = (($this) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 & 16;
 $18 = ($17|0)==(0);
 if ($18) {
  $19 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($__c)|0);
  $20 = (($8) + -1|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = (__ZNSt3__111char_traitsIcE2eqEcc($19,$21)|0);
  if (!($22)) {
   $$0 = -1;
   return ($$0|0);
  }
 }
 $23 = HEAP32[$7>>2]|0;
 $24 = (($23) + -1|0);
 $25 = HEAP32[$0>>2]|0;
 HEAP32[$7>>2] = $24;
 $26 = (($this) + 16|0);
 HEAP32[$26>>2] = $25;
 $27 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($__c)|0);
 $28 = HEAP32[$7>>2]|0;
 HEAP8[$28>>0] = $27;
 $$0 = $__c;
 return ($$0|0);
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($__c,-1)|0);
 if ($0) {
  $85 = (__ZNSt3__111char_traitsIcE7not_eofEi($__c)|0);
  $$0 = $85;
  return ($$0|0);
 }
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($this) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($this) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9|0)==($11|0);
 if ($12) {
  $13 = (($this) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 & 16;
  $16 = ($15|0)==(0);
  if ($16) {
   $$0 = -1;
   return ($$0|0);
  }
  $17 = (($this) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $9;
  $20 = $18;
  $21 = (($19) - ($20))|0;
  $22 = (($this) + 44|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23;
  $25 = (($24) - ($20))|0;
  $26 = (($this) + 32|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($26,0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 & 1;
  $29 = ($28<<24>>24)==(0);
  if ($29) {
   $32 = 10;
  } else {
   $30 = HEAP32[$26>>2]|0;
   $31 = $30 & -2;
   $phitmp$i = (($31) + -1)|0;
   $32 = $phitmp$i;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($26,$32,0);
  $33 = HEAP8[$26>>0]|0;
  $34 = $33 & 1;
  $35 = ($34<<24>>24)==(0);
  if ($35) {
   $38 = (($26) + 1|0);
   $47 = $38;
  } else {
   $36 = (($this) + 40|0);
   $37 = HEAP32[$36>>2]|0;
   $47 = $37;
  }
  $39 = HEAP8[$26>>0]|0;
  $40 = $39 & 1;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   $44 = $39&255;
   $45 = $44 >>> 1;
   $48 = $45;
  } else {
   $42 = (($this) + 36|0);
   $43 = HEAP32[$42>>2]|0;
   $48 = $43;
  }
  $46 = (($47) + ($48)|0);
  HEAP32[$8>>2] = $47;
  HEAP32[$17>>2] = $47;
  HEAP32[$10>>2] = $46;
  $49 = HEAP32[$8>>2]|0;
  $50 = (($49) + ($21)|0);
  HEAP32[$8>>2] = $50;
  $51 = HEAP32[$17>>2]|0;
  $52 = (($51) + ($25)|0);
  HEAP32[$22>>2] = $52;
 }
 $53 = HEAP32[$8>>2]|0;
 $54 = (($53) + 1|0);
 $55 = (($this) + 44|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ($54>>>0)<($56>>>0);
 $58 = $57 ? $56 : $54;
 HEAP32[$55>>2] = $58;
 $59 = (($this) + 48|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $60 & 8;
 $62 = ($61|0)==(0);
 if (!($62)) {
  $63 = (($this) + 32|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64 & 1;
  $66 = ($65<<24>>24)==(0);
  if ($66) {
   $69 = (($63) + 1|0);
   $71 = $69;
  } else {
   $67 = (($this) + 40|0);
   $68 = HEAP32[$67>>2]|0;
   $71 = $68;
  }
  $70 = (($71) + ($7)|0);
  $72 = HEAP32[$55>>2]|0;
  HEAP32[$3>>2] = $71;
  HEAP32[$1>>2] = $70;
  $73 = (($this) + 16|0);
  HEAP32[$73>>2] = $72;
 }
 $74 = $__c&255;
 $75 = HEAP32[$8>>2]|0;
 $76 = HEAP32[$10>>2]|0;
 $77 = ($75|0)==($76|0);
 if ($77) {
  $78 = HEAP32[$this>>2]|0;
  $79 = (($78) + 52|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($74)|0);
  $82 = (FUNCTION_TABLE_iii[$80 & 15]($this,$81)|0);
  $$0 = $82;
  return ($$0|0);
 } else {
  $83 = (($75) + 1|0);
  HEAP32[$8>>2] = $83;
  HEAP8[$75>>0] = $74;
  $84 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($74)|0);
  $$0 = $84;
  return ($$0|0);
 }
 return (0)|0;
}
function __Z5IKabsd($f) {
 $f = +$f;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+Math_abs((+$f)));
 return (+$0);
}
function __Z16IKatan2WithCheckIdE10CheckValueIT_ES1_S1_S1_($agg$result,$fy,$fx,$epsilon) {
 $agg$result = $agg$result|0;
 $fy = +$fy;
 $fx = +$fx;
 $epsilon = +$epsilon;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($agg$result) + 8|0);
 HEAP8[$0>>0] = 0;
 HEAPF64[$agg$result>>3] = 0.0;
 $1 = (__Z13__DOUBLE_BITSd($fy)|0);
 $2 = tempRet0;
 $3 = $2 & 2147483647;
 $4 = ($3>>>0)>(2146435072);
 $5 = ($1>>>0)>(0);
 $6 = ($3|0)==(2146435072);
 $7 = $6 & $5;
 $8 = $4 | $7;
 if ($8) {
  return;
 }
 $9 = (__Z13__DOUBLE_BITSd($fx)|0);
 $10 = tempRet0;
 $11 = $10 & 2147483647;
 $12 = ($11>>>0)>(2146435072);
 $13 = ($9>>>0)>(0);
 $14 = ($11|0)==(2146435072);
 $15 = $14 & $13;
 $16 = $12 | $15;
 if ($16) {
  return;
 }
 $17 = (+__Z5IKabsd($fy));
 $18 = !($17 >= 1.9999999999999999E-6);
 if ($18) {
  $19 = (+__Z5IKabsd($fx));
  $20 = $19 > 1.9999999999999999E-6;
  if (!($20)) {
   return;
  }
 }
 $21 = (+__Z13IKatan2Simpledd($fy,$fx));
 HEAPF64[$agg$result>>3] = $21;
 HEAP8[$0>>0] = 1;
 return;
}
function __Z6IKasind($f) {
 $f = +$f;
 var $$06 = 0.0, $$sum$i$i$i = 0, $$sum1$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $ss = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $0 = sp + 160|0;
 $ss = sp + 16|0;
 $1 = sp;
 $2 = $f > -1.0000020000000001;
 $3 = $f < 1.0000020000000001;
 $or$cond = $2 & $3;
 if (!($or$cond)) {
  $4 = (($ss) + 64|0);
  $5 = (($ss) + 8|0);
  HEAP32[$5>>2] = ((976 + 32|0));
  $6 = (($ss) + 12|0);
  HEAP32[$ss>>2] = ((1144 + 12|0));
  HEAP32[$4>>2] = ((1144 + 32|0));
  $7 = (($ss) + 4|0);
  HEAP32[$7>>2] = 0;
  $8 = HEAP32[$ss>>2]|0;
  $9 = (($8) + -12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($ss) + ($10)|0);
  __ZNSt3__18ios_base4initEPv($11,$6);
  $$sum$i$i$i = (($10) + 72)|0;
  $12 = (($ss) + ($$sum$i$i$i)|0);
  HEAP32[$12>>2] = 0;
  $$sum1$i$i$i = (($10) + 76)|0;
  $13 = (($ss) + ($$sum1$i$i$i)|0);
  HEAP32[$13>>2] = -1;
  HEAP32[$ss>>2] = ((976 + 12|0));
  HEAP32[$4>>2] = ((976 + 52|0));
  HEAP32[$5>>2] = ((976 + 32|0));
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($6);
  HEAP32[$6>>2] = ((1312 + 8|0));
  $14 = (($ss) + 44|0);
  $15 = (($ss) + 60|0);
  ;HEAP32[$14+0>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;HEAP32[$14+12>>2]=0|0;
  HEAP32[$15>>2] = 24;
  ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
  __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($6,$0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
  $16 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($5,856)|0);
  $17 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($16,880)|0);
  $18 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($17,904)|0);
  $19 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($18,130)|0);
  $20 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($19,912)|0);
  $21 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($20,1536)|0);
  $22 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($21,928)|0);
  $23 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($22,1472)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($23,960)|0);
  $24 = (___cxa_allocate_exception(8)|0);
  __ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($1,$6);
  __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($24,$1);
  ___cxa_throw(($24|0),(2320|0),(35|0));
  // unreachable;
 }
 $25 = !($f <= -1.0);
 if (!($25)) {
  $$06 = -1.5707963267949001;
  STACKTOP = sp;return (+$$06);
 }
 $26 = !($f >= 1.0);
 if (!($26)) {
  $$06 = 1.5707963267949001;
  STACKTOP = sp;return (+$$06);
 }
 $27 = (+Math_asin((+$f)));
 $$06 = $27;
 STACKTOP = sp;return (+$$06);
}
function __Z13__DOUBLE_BITSd($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $__f;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = $1;
 return ($0|0);
}
function __Z6IKsignd($f) {
 $f = +$f;
 var $$ = 0.0, $$0 = 0.0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $f > 0.0;
 if ($0) {
  $$0 = 1.0;
 } else {
  $1 = $f < 0.0;
  $$ = $1 ? -1.0 : 0.0;
  $$0 = $$;
 }
 return (+$$0);
}
function __Z21IKPowWithIntegerCheckIdE10CheckValueIT_ES1_i($agg$result,$f,$n) {
 $agg$result = $agg$result|0;
 $f = +$f;
 $n = $n|0;
 var $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0.0, $num$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($agg$result) + 8|0);
 HEAP8[$0>>0] = 1;
 if ((($n|0) == 0)) {
  HEAPF64[$agg$result>>3] = 1.0;
  return;
 } else if ((($n|0) == 1)) {
  HEAPF64[$agg$result>>3] = $f;
  return;
 } else {
  $1 = ($n|0)<(0);
  if ($1) {
   $2 = $f == 0.0;
   if ($2) {
    HEAP8[$0>>0] = 0;
    HEAPF64[$agg$result>>3] = 1.0E+30;
    return;
   }
   $3 = ($n|0)==(-1);
   if ($3) {
    $4 = 1.0 / $f;
    HEAPF64[$agg$result>>3] = $4;
    return;
   }
  }
  $5 = ($n|0)>(0);
  $6 = (0 - ($n))|0;
  $7 = $5 ? $n : $6;
  if ((($7|0) == 2)) {
   $8 = $f * $f;
   HEAPF64[$agg$result>>3] = $8;
  } else if ((($7|0) == 3)) {
   $9 = $f * $f;
   $10 = $9 * $f;
   HEAPF64[$agg$result>>3] = $10;
  } else {
   HEAPF64[$agg$result>>3] = 1.0;
   $11 = ($7|0)>(0);
   if ($11) {
    $$01 = $f;$num$02 = $7;
    while(1) {
     $12 = $num$02 & 1;
     $13 = ($12|0)==(0);
     if (!($13)) {
      $14 = +HEAPF64[$agg$result>>3];
      $15 = $$01 * $14;
      HEAPF64[$agg$result>>3] = $15;
     }
     $16 = $num$02 >> 1;
     $17 = $$01 * $$01;
     $18 = ($16|0)>(0);
     if ($18) {
      $$01 = $17;$num$02 = $16;
     } else {
      break;
     }
    }
   }
  }
  if (!($1)) {
   return;
  }
  $19 = +HEAPF64[$agg$result>>3];
  $20 = 1.0 / $19;
  HEAPF64[$agg$result>>3] = $20;
  return;
 }
}
function __ZN8IKSolver17rotationfunction0ERN6ikfast18IkSolutionListBaseIdEE($this,$solutions) {
 $this = $this|0;
 $solutions = $solutions|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0.0, $1001 = 0.0, $1002 = 0.0, $1003 = 0.0, $1004 = 0.0, $1005 = 0.0, $1006 = 0.0, $1007 = 0.0, $1008 = 0.0, $1009 = 0.0, $101 = 0, $1010 = 0, $1011 = 0.0, $1012 = 0.0, $1013 = 0.0, $1014 = 0.0;
 var $1015 = 0.0, $1016 = 0.0, $1017 = 0.0, $1018 = 0.0, $1019 = 0.0, $102 = 0, $1020 = 0, $1021 = 0.0, $1022 = 0.0, $1023 = 0.0, $1024 = 0.0, $1025 = 0, $1026 = 0.0, $1027 = 0.0, $1028 = 0.0, $1029 = 0.0, $103 = 0, $1030 = 0.0, $1031 = 0, $1032 = 0.0;
 var $1033 = 0.0, $1034 = 0.0, $1035 = 0.0, $1036 = 0.0, $1037 = 0.0, $1038 = 0.0, $1039 = 0.0, $104 = 0, $1040 = 0.0, $1041 = 0.0, $1042 = 0.0, $1043 = 0.0, $1044 = 0.0, $1045 = 0, $1046 = 0.0, $1047 = 0, $1048 = 0.0, $1049 = 0.0, $105 = 0, $1050 = 0.0;
 var $1051 = 0.0, $1052 = 0.0, $1053 = 0.0, $1054 = 0.0, $1055 = 0.0, $1056 = 0.0, $1057 = 0.0, $1058 = 0.0, $1059 = 0.0, $106 = 0, $1060 = 0.0, $1061 = 0.0, $1062 = 0.0, $1063 = 0.0, $1064 = 0.0, $1065 = 0.0, $1066 = 0.0, $1067 = 0.0, $1068 = 0.0, $1069 = 0.0;
 var $107 = 0, $1070 = 0.0, $1071 = 0.0, $1072 = 0.0, $1073 = 0.0, $1074 = 0.0, $1075 = 0.0, $1076 = 0.0, $1077 = 0.0, $1078 = 0.0, $1079 = 0.0, $108 = 0, $1080 = 0.0, $1081 = 0.0, $1082 = 0.0, $1083 = 0.0, $1084 = 0.0, $1085 = 0.0, $1086 = 0, $1087 = 0.0;
 var $1088 = 0.0, $1089 = 0.0, $109 = 0, $1090 = 0.0, $1091 = 0.0, $1092 = 0, $1093 = 0.0, $1094 = 0, $1095 = 0.0, $1096 = 0, $1097 = 0.0, $1098 = 0, $1099 = 0.0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0.0, $1102 = 0, $1103 = 0.0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0.0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0.0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0.0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0.0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0.0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0.0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0.0, $1195 = 0;
 var $1196 = 0, $1197 = 0.0, $1198 = 0.0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0.0, $1202 = 0.0, $1203 = 0.0, $1204 = 0.0, $1205 = 0.0, $1206 = 0.0, $1207 = 0.0, $1208 = 0.0, $1209 = 0.0, $121 = 0, $1210 = 0.0, $1211 = 0, $1212 = 0.0;
 var $1213 = 0.0, $1214 = 0.0, $1215 = 0, $1216 = 0.0, $1217 = 0.0, $1218 = 0.0, $1219 = 0.0, $122 = 0, $1220 = 0.0, $1221 = 0, $1222 = 0.0, $1223 = 0.0, $1224 = 0.0, $1225 = 0.0, $1226 = 0.0, $1227 = 0.0, $1228 = 0.0, $1229 = 0.0, $123 = 0, $1230 = 0.0;
 var $1231 = 0.0, $1232 = 0.0, $1233 = 0.0, $1234 = 0.0, $1235 = 0.0, $1236 = 0, $1237 = 0.0, $1238 = 0, $1239 = 0.0, $124 = 0, $1240 = 0.0, $1241 = 0.0, $1242 = 0.0, $1243 = 0.0, $1244 = 0.0, $1245 = 0.0, $1246 = 0.0, $1247 = 0.0, $1248 = 0.0, $1249 = 0.0;
 var $125 = 0, $1250 = 0.0, $1251 = 0.0, $1252 = 0.0, $1253 = 0.0, $1254 = 0.0, $1255 = 0.0, $1256 = 0.0, $1257 = 0.0, $1258 = 0.0, $1259 = 0.0, $126 = 0, $1260 = 0.0, $1261 = 0.0, $1262 = 0.0, $1263 = 0.0, $1264 = 0.0, $1265 = 0.0, $1266 = 0.0, $1267 = 0.0;
 var $1268 = 0.0, $1269 = 0.0, $127 = 0, $1270 = 0.0, $1271 = 0.0, $1272 = 0.0, $1273 = 0.0, $1274 = 0.0, $1275 = 0.0, $1276 = 0.0, $1277 = 0.0, $1278 = 0.0, $1279 = 0.0, $128 = 0, $1280 = 0.0, $1281 = 0.0, $1282 = 0.0, $1283 = 0.0, $1284 = 0.0, $1285 = 0.0;
 var $1286 = 0.0, $1287 = 0.0, $1288 = 0.0, $1289 = 0.0, $129 = 0, $1290 = 0.0, $1291 = 0.0, $1292 = 0, $1293 = 0.0, $1294 = 0.0, $1295 = 0.0, $1296 = 0, $1297 = 0.0, $1298 = 0, $1299 = 0.0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0.0, $1302 = 0;
 var $1303 = 0.0, $1304 = 0, $1305 = 0.0, $1306 = 0, $1307 = 0.0, $1308 = 0, $1309 = 0.0, $131 = 0, $1310 = 0.0, $1311 = 0.0, $1312 = 0.0, $1313 = 0.0, $1314 = 0.0, $1315 = 0.0, $1316 = 0.0, $1317 = 0.0, $1318 = 0.0, $1319 = 0.0, $132 = 0, $1320 = 0.0;
 var $1321 = 0.0, $1322 = 0.0, $1323 = 0.0, $1324 = 0.0, $1325 = 0.0, $1326 = 0.0, $1327 = 0.0, $1328 = 0.0, $1329 = 0.0, $133 = 0, $1330 = 0.0, $1331 = 0.0, $1332 = 0.0, $1333 = 0.0, $1334 = 0.0, $1335 = 0.0, $1336 = 0.0, $1337 = 0.0, $1338 = 0.0, $1339 = 0.0;
 var $134 = 0, $1340 = 0.0, $1341 = 0.0, $1342 = 0.0, $1343 = 0.0, $1344 = 0.0, $1345 = 0.0, $1346 = 0.0, $1347 = 0.0, $1348 = 0.0, $1349 = 0.0, $135 = 0, $1350 = 0.0, $1351 = 0.0, $1352 = 0.0, $1353 = 0.0, $1354 = 0.0, $1355 = 0.0, $1356 = 0.0, $1357 = 0.0;
 var $1358 = 0.0, $1359 = 0.0, $136 = 0, $1360 = 0.0, $1361 = 0.0, $1362 = 0.0, $1363 = 0.0, $1364 = 0.0, $1365 = 0.0, $1366 = 0.0, $1367 = 0.0, $1368 = 0.0, $1369 = 0.0, $137 = 0, $1370 = 0.0, $1371 = 0.0, $1372 = 0.0, $1373 = 0.0, $1374 = 0.0, $1375 = 0.0;
 var $1376 = 0.0, $1377 = 0.0, $1378 = 0.0, $1379 = 0.0, $138 = 0, $1380 = 0.0, $1381 = 0.0, $1382 = 0.0, $1383 = 0.0, $1384 = 0, $1385 = 0.0, $1386 = 0.0, $1387 = 0, $1388 = 0.0, $1389 = 0.0, $139 = 0, $1390 = 0.0, $1391 = 0.0, $1392 = 0.0, $1393 = 0.0;
 var $1394 = 0.0, $1395 = 0.0, $1396 = 0.0, $1397 = 0.0, $1398 = 0.0, $1399 = 0.0, $14 = 0, $140 = 0, $1400 = 0.0, $1401 = 0.0, $1402 = 0.0, $1403 = 0.0, $1404 = 0.0, $1405 = 0.0, $1406 = 0.0, $1407 = 0.0, $1408 = 0.0, $1409 = 0.0, $141 = 0, $1410 = 0.0;
 var $1411 = 0.0, $1412 = 0.0, $1413 = 0.0, $1414 = 0.0, $1415 = 0.0, $1416 = 0.0, $1417 = 0.0, $1418 = 0.0, $1419 = 0.0, $142 = 0, $1420 = 0.0, $1421 = 0.0, $1422 = 0.0, $1423 = 0.0, $1424 = 0.0, $1425 = 0.0, $1426 = 0.0, $1427 = 0.0, $1428 = 0.0, $1429 = 0.0;
 var $143 = 0, $1430 = 0.0, $1431 = 0.0, $1432 = 0.0, $1433 = 0.0, $1434 = 0.0, $1435 = 0.0, $1436 = 0.0, $1437 = 0.0, $1438 = 0.0, $1439 = 0.0, $144 = 0, $1440 = 0.0, $1441 = 0.0, $1442 = 0.0, $1443 = 0.0, $1444 = 0.0, $1445 = 0.0, $1446 = 0.0, $1447 = 0.0;
 var $1448 = 0.0, $1449 = 0.0, $145 = 0, $1450 = 0.0, $1451 = 0.0, $1452 = 0.0, $1453 = 0.0, $1454 = 0.0, $1455 = 0.0, $1456 = 0.0, $1457 = 0.0, $1458 = 0.0, $1459 = 0.0, $146 = 0, $1460 = 0.0, $1461 = 0.0, $1462 = 0.0, $1463 = 0, $1464 = 0.0, $1465 = 0.0;
 var $1466 = 0, $1467 = 0.0, $1468 = 0.0, $1469 = 0.0, $147 = 0, $1470 = 0.0, $1471 = 0.0, $1472 = 0.0, $1473 = 0.0, $1474 = 0.0, $1475 = 0.0, $1476 = 0.0, $1477 = 0.0, $1478 = 0.0, $1479 = 0.0, $148 = 0, $1480 = 0.0, $1481 = 0.0, $1482 = 0.0, $1483 = 0.0;
 var $1484 = 0.0, $1485 = 0.0, $1486 = 0.0, $1487 = 0.0, $1488 = 0.0, $1489 = 0.0, $149 = 0, $1490 = 0.0, $1491 = 0.0, $1492 = 0.0, $1493 = 0.0, $1494 = 0.0, $1495 = 0.0, $1496 = 0.0, $1497 = 0.0, $1498 = 0.0, $1499 = 0.0, $15 = 0, $150 = 0, $1500 = 0.0;
 var $1501 = 0.0, $1502 = 0.0, $1503 = 0.0, $1504 = 0.0, $1505 = 0.0, $1506 = 0.0, $1507 = 0.0, $1508 = 0.0, $1509 = 0.0, $151 = 0, $1510 = 0.0, $1511 = 0.0, $1512 = 0.0, $1513 = 0.0, $1514 = 0.0, $1515 = 0.0, $1516 = 0.0, $1517 = 0.0, $1518 = 0.0, $1519 = 0.0;
 var $152 = 0, $1520 = 0.0, $1521 = 0.0, $1522 = 0.0, $1523 = 0.0, $1524 = 0.0, $1525 = 0.0, $1526 = 0.0, $1527 = 0.0, $1528 = 0.0, $1529 = 0.0, $153 = 0, $1530 = 0.0, $1531 = 0.0, $1532 = 0.0, $1533 = 0.0, $1534 = 0.0, $1535 = 0.0, $1536 = 0.0, $1537 = 0.0;
 var $1538 = 0.0, $1539 = 0.0, $154 = 0, $1540 = 0.0, $1541 = 0.0, $1542 = 0.0, $1543 = 0, $1544 = 0.0, $1545 = 0.0, $1546 = 0, $1547 = 0.0, $1548 = 0, $1549 = 0.0, $155 = 0, $1550 = 0.0, $1551 = 0.0, $1552 = 0.0, $1553 = 0.0, $1554 = 0.0, $1555 = 0.0;
 var $1556 = 0.0, $1557 = 0.0, $1558 = 0.0, $1559 = 0.0, $156 = 0, $1560 = 0.0, $1561 = 0.0, $1562 = 0.0, $1563 = 0.0, $1564 = 0.0, $1565 = 0.0, $1566 = 0.0, $1567 = 0.0, $1568 = 0, $1569 = 0.0, $157 = 0, $1570 = 0.0, $1571 = 0.0, $1572 = 0, $1573 = 0.0;
 var $1574 = 0, $1575 = 0.0, $1576 = 0, $1577 = 0.0, $1578 = 0, $1579 = 0.0, $158 = 0, $1580 = 0, $1581 = 0.0, $1582 = 0, $1583 = 0.0, $1584 = 0, $1585 = 0.0, $1586 = 0, $1587 = 0.0, $1588 = 0.0, $1589 = 0.0, $159 = 0, $1590 = 0.0, $1591 = 0.0;
 var $1592 = 0.0, $1593 = 0.0, $1594 = 0.0, $1595 = 0.0, $1596 = 0, $1597 = 0.0, $1598 = 0.0, $1599 = 0.0, $16 = 0, $160 = 0, $1600 = 0.0, $1601 = 0, $1602 = 0.0, $1603 = 0.0, $1604 = 0.0, $1605 = 0.0, $1606 = 0.0, $1607 = 0, $1608 = 0.0, $1609 = 0.0;
 var $161 = 0, $1610 = 0.0, $1611 = 0.0, $1612 = 0.0, $1613 = 0.0, $1614 = 0.0, $1615 = 0.0, $1616 = 0.0, $1617 = 0.0, $1618 = 0.0, $1619 = 0.0, $162 = 0, $1620 = 0.0, $1621 = 0, $1622 = 0.0, $1623 = 0, $1624 = 0.0, $1625 = 0.0, $1626 = 0.0, $1627 = 0.0;
 var $1628 = 0.0, $1629 = 0.0, $163 = 0, $1630 = 0.0, $1631 = 0.0, $1632 = 0.0, $1633 = 0.0, $1634 = 0.0, $1635 = 0.0, $1636 = 0.0, $1637 = 0.0, $1638 = 0.0, $1639 = 0.0, $164 = 0, $1640 = 0.0, $1641 = 0.0, $1642 = 0.0, $1643 = 0.0, $1644 = 0.0, $1645 = 0.0;
 var $1646 = 0.0, $1647 = 0.0, $1648 = 0.0, $1649 = 0.0, $165 = 0, $1650 = 0.0, $1651 = 0.0, $1652 = 0.0, $1653 = 0.0, $1654 = 0.0, $1655 = 0.0, $1656 = 0.0, $1657 = 0.0, $1658 = 0.0, $1659 = 0.0, $166 = 0, $1660 = 0.0, $1661 = 0.0, $1662 = 0, $1663 = 0.0;
 var $1664 = 0.0, $1665 = 0.0, $1666 = 0.0, $1667 = 0.0, $1668 = 0, $1669 = 0.0, $167 = 0, $1670 = 0, $1671 = 0.0, $1672 = 0, $1673 = 0.0, $1674 = 0, $1675 = 0.0, $1676 = 0, $1677 = 0.0, $1678 = 0, $1679 = 0.0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0.0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0.0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0.0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0.0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0.0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0.0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0.0, $1769 = 0.0, $177 = 0, $1770 = 0.0, $1771 = 0.0;
 var $1772 = 0.0, $1773 = 0.0, $1774 = 0.0, $1775 = 0.0, $1776 = 0.0, $1777 = 0.0, $1778 = 0.0, $1779 = 0.0, $178 = 0, $1780 = 0.0, $1781 = 0.0, $1782 = 0.0, $1783 = 0.0, $1784 = 0.0, $1785 = 0.0, $1786 = 0.0, $1787 = 0, $1788 = 0.0, $1789 = 0.0, $179 = 0;
 var $1790 = 0.0, $1791 = 0, $1792 = 0.0, $1793 = 0, $1794 = 0.0, $1795 = 0, $1796 = 0.0, $1797 = 0, $1798 = 0.0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0.0, $1801 = 0, $1802 = 0.0, $1803 = 0, $1804 = 0.0, $1805 = 0.0, $1806 = 0.0, $1807 = 0.0;
 var $1808 = 0.0, $1809 = 0.0, $181 = 0, $1810 = 0.0, $1811 = 0.0, $1812 = 0.0, $1813 = 0, $1814 = 0.0, $1815 = 0.0, $1816 = 0.0, $1817 = 0.0, $1818 = 0, $1819 = 0.0, $182 = 0, $1820 = 0.0, $1821 = 0.0, $1822 = 0.0, $1823 = 0.0, $1824 = 0, $1825 = 0.0;
 var $1826 = 0.0, $1827 = 0.0, $1828 = 0.0, $1829 = 0.0, $183 = 0, $1830 = 0.0, $1831 = 0.0, $1832 = 0.0, $1833 = 0.0, $1834 = 0.0, $1835 = 0.0, $1836 = 0.0, $1837 = 0.0, $1838 = 0, $1839 = 0.0, $184 = 0, $1840 = 0, $1841 = 0.0, $1842 = 0.0, $1843 = 0.0;
 var $1844 = 0.0, $1845 = 0.0, $1846 = 0.0, $1847 = 0.0, $1848 = 0.0, $1849 = 0.0, $185 = 0, $1850 = 0.0, $1851 = 0.0, $1852 = 0.0, $1853 = 0.0, $1854 = 0.0, $1855 = 0.0, $1856 = 0.0, $1857 = 0.0, $1858 = 0.0, $1859 = 0.0, $186 = 0, $1860 = 0.0, $1861 = 0.0;
 var $1862 = 0.0, $1863 = 0.0, $1864 = 0.0, $1865 = 0.0, $1866 = 0.0, $1867 = 0.0, $1868 = 0.0, $1869 = 0.0, $187 = 0, $1870 = 0.0, $1871 = 0.0, $1872 = 0.0, $1873 = 0.0, $1874 = 0.0, $1875 = 0.0, $1876 = 0.0, $1877 = 0.0, $1878 = 0.0, $1879 = 0.0, $188 = 0;
 var $1880 = 0, $1881 = 0.0, $1882 = 0.0, $1883 = 0.0, $1884 = 0.0, $1885 = 0.0, $1886 = 0, $1887 = 0.0, $1888 = 0, $1889 = 0.0, $189 = 0, $1890 = 0, $1891 = 0.0, $1892 = 0, $1893 = 0.0, $1894 = 0, $1895 = 0.0, $1896 = 0, $1897 = 0.0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0.0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0.0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0.0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0.0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0.0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0.0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0.0, $1987 = 0.0, $1988 = 0.0;
 var $1989 = 0.0, $199 = 0, $1990 = 0.0, $1991 = 0.0, $1992 = 0.0, $1993 = 0.0, $1994 = 0.0, $1995 = 0.0, $1996 = 0.0, $1997 = 0.0, $1998 = 0.0, $1999 = 0.0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0.0, $2001 = 0.0, $2002 = 0.0, $2003 = 0.0, $2004 = 0.0;
 var $2005 = 0.0, $2006 = 0.0, $2007 = 0.0, $2008 = 0.0, $2009 = 0.0, $201 = 0, $2010 = 0.0, $2011 = 0.0, $2012 = 0.0, $2013 = 0.0, $2014 = 0.0, $2015 = 0.0, $2016 = 0, $2017 = 0.0, $2018 = 0.0, $2019 = 0, $202 = 0, $2020 = 0.0, $2021 = 0, $2022 = 0.0;
 var $2023 = 0, $2024 = 0.0, $2025 = 0, $2026 = 0.0, $2027 = 0, $2028 = 0.0, $2029 = 0, $203 = 0, $2030 = 0.0, $2031 = 0, $2032 = 0.0, $2033 = 0.0, $2034 = 0, $2035 = 0.0, $2036 = 0.0, $2037 = 0, $2038 = 0.0, $2039 = 0.0, $204 = 0, $2040 = 0.0;
 var $2041 = 0.0, $2042 = 0.0, $2043 = 0, $2044 = 0.0, $2045 = 0.0, $2046 = 0.0, $2047 = 0.0, $2048 = 0.0, $2049 = 0, $205 = 0, $2050 = 0.0, $2051 = 0, $2052 = 0.0, $2053 = 0.0, $2054 = 0.0, $2055 = 0.0, $2056 = 0.0, $2057 = 0.0, $2058 = 0.0, $2059 = 0.0;
 var $206 = 0, $2060 = 0.0, $2061 = 0.0, $2062 = 0.0, $2063 = 0.0, $2064 = 0.0, $2065 = 0.0, $2066 = 0.0, $2067 = 0.0, $2068 = 0.0, $2069 = 0.0, $207 = 0, $2070 = 0.0, $2071 = 0.0, $2072 = 0.0, $2073 = 0.0, $2074 = 0.0, $2075 = 0.0, $2076 = 0.0, $2077 = 0.0;
 var $2078 = 0.0, $2079 = 0.0, $208 = 0, $2080 = 0.0, $2081 = 0.0, $2082 = 0.0, $2083 = 0.0, $2084 = 0, $2085 = 0.0, $2086 = 0.0, $2087 = 0.0, $2088 = 0, $2089 = 0.0, $209 = 0, $2090 = 0, $2091 = 0.0, $2092 = 0, $2093 = 0.0, $2094 = 0, $2095 = 0.0;
 var $2096 = 0, $2097 = 0.0, $2098 = 0, $2099 = 0.0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0.0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0;
 var $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0.0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0;
 var $2131 = 0.0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0.0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0;
 var $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0.0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0;
 var $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0.0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0;
 var $2186 = 0, $2187 = 0, $2188 = 0.0, $2189 = 0.0, $219 = 0, $2190 = 0.0, $2191 = 0.0, $2192 = 0.0, $2193 = 0.0, $2194 = 0.0, $2195 = 0.0, $2196 = 0.0, $2197 = 0.0, $2198 = 0.0, $2199 = 0.0, $22 = 0, $220 = 0, $2200 = 0.0, $2201 = 0.0, $2202 = 0.0;
 var $2203 = 0.0, $2204 = 0.0, $2205 = 0.0, $2206 = 0.0, $2207 = 0.0, $2208 = 0.0, $2209 = 0.0, $221 = 0, $2210 = 0.0, $2211 = 0.0, $2212 = 0.0, $2213 = 0.0, $2214 = 0.0, $2215 = 0.0, $2216 = 0.0, $2217 = 0.0, $2218 = 0.0, $2219 = 0.0, $222 = 0, $2220 = 0.0;
 var $2221 = 0.0, $2222 = 0, $2223 = 0.0, $2224 = 0.0, $2225 = 0, $2226 = 0.0, $2227 = 0, $2228 = 0.0, $2229 = 0, $223 = 0, $2230 = 0.0, $2231 = 0, $2232 = 0.0, $2233 = 0, $2234 = 0.0, $2235 = 0, $2236 = 0.0, $2237 = 0, $2238 = 0.0, $2239 = 0;
 var $224 = 0, $2240 = 0.0, $2241 = 0, $2242 = 0.0, $2243 = 0, $2244 = 0.0, $2245 = 0.0, $2246 = 0.0, $2247 = 0, $2248 = 0.0, $2249 = 0.0, $225 = 0, $2250 = 0.0, $2251 = 0, $2252 = 0.0, $2253 = 0.0, $2254 = 0.0, $2255 = 0.0, $2256 = 0.0, $2257 = 0;
 var $2258 = 0.0, $2259 = 0.0, $226 = 0, $2260 = 0.0, $2261 = 0.0, $2262 = 0.0, $2263 = 0.0, $2264 = 0.0, $2265 = 0, $2266 = 0.0, $2267 = 0, $2268 = 0.0, $2269 = 0.0, $227 = 0, $2270 = 0.0, $2271 = 0.0, $2272 = 0.0, $2273 = 0.0, $2274 = 0.0, $2275 = 0.0;
 var $2276 = 0.0, $2277 = 0.0, $2278 = 0.0, $2279 = 0.0, $228 = 0, $2280 = 0.0, $2281 = 0.0, $2282 = 0.0, $2283 = 0.0, $2284 = 0.0, $2285 = 0.0, $2286 = 0.0, $2287 = 0.0, $2288 = 0.0, $2289 = 0.0, $229 = 0, $2290 = 0.0, $2291 = 0.0, $2292 = 0.0, $2293 = 0.0;
 var $2294 = 0.0, $2295 = 0.0, $2296 = 0.0, $2297 = 0.0, $2298 = 0.0, $2299 = 0.0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0.0, $2302 = 0.0, $2303 = 0.0, $2304 = 0, $2305 = 0.0, $2306 = 0, $2307 = 0.0, $2308 = 0, $2309 = 0.0, $231 = 0, $2310 = 0;
 var $2311 = 0.0, $2312 = 0, $2313 = 0.0, $2314 = 0, $2315 = 0.0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0.0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0;
 var $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0.0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0.0;
 var $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0.0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0;
 var $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0.0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0;
 var $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0.0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0;
 var $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0.0, $2405 = 0.0, $2406 = 0.0, $2407 = 0.0, $2408 = 0.0, $2409 = 0.0, $241 = 0, $2410 = 0.0, $2411 = 0.0, $2412 = 0.0, $2413 = 0.0, $2414 = 0.0, $2415 = 0.0, $2416 = 0.0, $2417 = 0.0, $2418 = 0.0, $2419 = 0.0;
 var $242 = 0, $2420 = 0.0, $2421 = 0.0, $2422 = 0.0, $2423 = 0.0, $2424 = 0.0, $2425 = 0.0, $2426 = 0.0, $2427 = 0.0, $2428 = 0.0, $2429 = 0.0, $243 = 0, $2430 = 0.0, $2431 = 0.0, $2432 = 0.0, $2433 = 0.0, $2434 = 0, $2435 = 0.0, $2436 = 0.0, $2437 = 0;
 var $2438 = 0.0, $2439 = 0, $244 = 0, $2440 = 0.0, $2441 = 0, $2442 = 0.0, $2443 = 0, $2444 = 0.0, $2445 = 0, $2446 = 0.0, $2447 = 0, $2448 = 0.0, $2449 = 0, $245 = 0, $2450 = 0.0, $2451 = 0.0, $2452 = 0.0, $2453 = 0, $2454 = 0.0, $2455 = 0.0;
 var $2456 = 0, $2457 = 0.0, $2458 = 0.0, $2459 = 0.0, $246 = 0, $2460 = 0.0, $2461 = 0.0, $2462 = 0, $2463 = 0.0, $2464 = 0.0, $2465 = 0.0, $2466 = 0.0, $2467 = 0.0, $2468 = 0.0, $2469 = 0, $247 = 0, $2470 = 0.0, $2471 = 0, $2472 = 0.0, $2473 = 0.0;
 var $2474 = 0.0, $2475 = 0.0, $2476 = 0.0, $2477 = 0.0, $2478 = 0.0, $2479 = 0.0, $248 = 0, $2480 = 0.0, $2481 = 0.0, $2482 = 0.0, $2483 = 0.0, $2484 = 0.0, $2485 = 0.0, $2486 = 0.0, $2487 = 0.0, $2488 = 0.0, $2489 = 0.0, $249 = 0, $2490 = 0.0, $2491 = 0.0;
 var $2492 = 0.0, $2493 = 0.0, $2494 = 0.0, $2495 = 0.0, $2496 = 0.0, $2497 = 0.0, $2498 = 0.0, $2499 = 0.0, $25 = 0, $250 = 0, $2500 = 0.0, $2501 = 0.0, $2502 = 0.0, $2503 = 0.0, $2504 = 0, $2505 = 0.0, $2506 = 0.0, $2507 = 0.0, $2508 = 0, $2509 = 0.0;
 var $251 = 0, $2510 = 0, $2511 = 0.0, $2512 = 0, $2513 = 0.0, $2514 = 0, $2515 = 0.0, $2516 = 0, $2517 = 0.0, $2518 = 0, $2519 = 0.0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0.0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0;
 var $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0.0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0;
 var $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0.0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0;
 var $2564 = 0, $2565 = 0.0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0.0, $258 = 0, $2580 = 0, $2581 = 0;
 var $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0.0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0;
 var $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0.0, $2609 = 0.0, $261 = 0, $2610 = 0.0, $2611 = 0.0, $2612 = 0.0, $2613 = 0.0, $2614 = 0.0, $2615 = 0.0, $2616 = 0.0, $2617 = 0.0;
 var $2618 = 0.0, $2619 = 0.0, $262 = 0, $2620 = 0.0, $2621 = 0.0, $2622 = 0.0, $2623 = 0.0, $2624 = 0.0, $2625 = 0.0, $2626 = 0.0, $2627 = 0.0, $2628 = 0.0, $2629 = 0.0, $263 = 0, $2630 = 0.0, $2631 = 0.0, $2632 = 0.0, $2633 = 0.0, $2634 = 0.0, $2635 = 0.0;
 var $2636 = 0.0, $2637 = 0.0, $2638 = 0.0, $2639 = 0.0, $264 = 0, $2640 = 0.0, $2641 = 0.0, $2642 = 0, $2643 = 0.0, $2644 = 0.0, $2645 = 0, $2646 = 0.0, $2647 = 0, $2648 = 0.0, $2649 = 0, $265 = 0, $2650 = 0.0, $2651 = 0, $2652 = 0.0, $2653 = 0;
 var $2654 = 0.0, $2655 = 0, $2656 = 0.0, $2657 = 0, $2658 = 0.0, $2659 = 0, $266 = 0, $2660 = 0.0, $2661 = 0.0, $2662 = 0, $2663 = 0.0, $2664 = 0.0, $2665 = 0.0, $2666 = 0, $2667 = 0.0, $2668 = 0.0, $2669 = 0.0, $267 = 0, $2670 = 0.0, $2671 = 0.0;
 var $2672 = 0, $2673 = 0.0, $2674 = 0.0, $2675 = 0.0, $2676 = 0.0, $2677 = 0.0, $2678 = 0.0, $2679 = 0, $268 = 0, $2680 = 0.0, $2681 = 0, $2682 = 0.0, $2683 = 0.0, $2684 = 0.0, $2685 = 0.0, $2686 = 0.0, $2687 = 0.0, $2688 = 0.0, $2689 = 0.0, $269 = 0;
 var $2690 = 0.0, $2691 = 0.0, $2692 = 0.0, $2693 = 0.0, $2694 = 0.0, $2695 = 0.0, $2696 = 0.0, $2697 = 0.0, $2698 = 0.0, $2699 = 0.0, $27 = 0, $270 = 0, $2700 = 0.0, $2701 = 0.0, $2702 = 0.0, $2703 = 0.0, $2704 = 0.0, $2705 = 0.0, $2706 = 0.0, $2707 = 0.0;
 var $2708 = 0.0, $2709 = 0.0, $271 = 0, $2710 = 0.0, $2711 = 0.0, $2712 = 0.0, $2713 = 0.0, $2714 = 0.0, $2715 = 0.0, $2716 = 0, $2717 = 0.0, $2718 = 0.0, $2719 = 0.0, $272 = 0, $2720 = 0, $2721 = 0.0, $2722 = 0, $2723 = 0.0, $2724 = 0, $2725 = 0.0;
 var $2726 = 0, $2727 = 0.0, $2728 = 0, $2729 = 0.0, $273 = 0, $2730 = 0, $2731 = 0.0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0.0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0;
 var $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0.0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0;
 var $2762 = 0, $2763 = 0.0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0.0, $2778 = 0, $2779 = 0, $278 = 0;
 var $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0.0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0;
 var $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0.0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0;
 var $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0.0, $2821 = 0.0, $2822 = 0.0, $2823 = 0.0, $2824 = 0.0, $2825 = 0.0, $2826 = 0.0, $2827 = 0.0, $2828 = 0.0, $2829 = 0.0, $283 = 0, $2830 = 0.0, $2831 = 0.0, $2832 = 0.0, $2833 = 0.0;
 var $2834 = 0.0, $2835 = 0.0, $2836 = 0.0, $2837 = 0.0, $2838 = 0.0, $2839 = 0.0, $284 = 0, $2840 = 0.0, $2841 = 0.0, $2842 = 0.0, $2843 = 0.0, $2844 = 0.0, $2845 = 0.0, $2846 = 0.0, $2847 = 0.0, $2848 = 0.0, $2849 = 0.0, $285 = 0, $2850 = 0.0, $2851 = 0.0;
 var $2852 = 0.0, $2853 = 0.0, $2854 = 0, $2855 = 0.0, $2856 = 0.0, $2857 = 0, $2858 = 0.0, $2859 = 0, $286 = 0, $2860 = 0.0, $2861 = 0, $2862 = 0.0, $2863 = 0, $2864 = 0.0, $2865 = 0, $2866 = 0.0, $2867 = 0, $2868 = 0.0, $2869 = 0, $287 = 0;
 var $2870 = 0.0, $2871 = 0, $2872 = 0.0, $2873 = 0.0, $2874 = 0.0, $2875 = 0, $2876 = 0.0, $2877 = 0.0, $2878 = 0, $2879 = 0.0, $288 = 0, $2880 = 0.0, $2881 = 0.0, $2882 = 0.0, $2883 = 0.0, $2884 = 0, $2885 = 0.0, $2886 = 0.0, $2887 = 0.0, $2888 = 0.0;
 var $2889 = 0.0, $289 = 0, $2890 = 0.0, $2891 = 0, $2892 = 0.0, $2893 = 0, $2894 = 0.0, $2895 = 0.0, $2896 = 0.0, $2897 = 0.0, $2898 = 0.0, $2899 = 0.0, $29 = 0, $290 = 0, $2900 = 0.0, $2901 = 0.0, $2902 = 0.0, $2903 = 0.0, $2904 = 0.0, $2905 = 0.0;
 var $2906 = 0.0, $2907 = 0.0, $2908 = 0.0, $2909 = 0.0, $291 = 0, $2910 = 0.0, $2911 = 0.0, $2912 = 0.0, $2913 = 0.0, $2914 = 0.0, $2915 = 0.0, $2916 = 0.0, $2917 = 0.0, $2918 = 0.0, $2919 = 0.0, $292 = 0, $2920 = 0.0, $2921 = 0.0, $2922 = 0.0, $2923 = 0.0;
 var $2924 = 0.0, $2925 = 0.0, $2926 = 0, $2927 = 0.0, $2928 = 0.0, $2929 = 0.0, $293 = 0, $2930 = 0, $2931 = 0.0, $2932 = 0, $2933 = 0.0, $2934 = 0, $2935 = 0.0, $2936 = 0, $2937 = 0.0, $2938 = 0, $2939 = 0.0, $294 = 0, $2940 = 0, $2941 = 0.0;
 var $2942 = 0, $2943 = 0, $2944 = 0, $2945 = 0.0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0.0, $296 = 0;
 var $2960 = 0, $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0.0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0;
 var $2979 = 0, $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0.0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0;
 var $2997 = 0, $2998 = 0, $2999 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0.0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0;
 var $3013 = 0, $3014 = 0, $3015 = 0.0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0.0;
 var $3031 = 0.0, $3032 = 0.0, $3033 = 0.0, $3034 = 0.0, $3035 = 0.0, $3036 = 0.0, $3037 = 0.0, $3038 = 0.0, $3039 = 0.0, $304 = 0, $3040 = 0.0, $3041 = 0.0, $3042 = 0.0, $3043 = 0.0, $3044 = 0.0, $3045 = 0.0, $3046 = 0.0, $3047 = 0.0, $3048 = 0.0, $3049 = 0.0;
 var $305 = 0, $3050 = 0.0, $3051 = 0.0, $3052 = 0.0, $3053 = 0.0, $3054 = 0.0, $3055 = 0.0, $3056 = 0.0, $3057 = 0.0, $3058 = 0.0, $3059 = 0.0, $306 = 0, $3060 = 0.0, $3061 = 0, $3062 = 0.0, $3063 = 0.0, $3064 = 0, $3065 = 0.0, $3066 = 0, $3067 = 0.0;
 var $3068 = 0, $3069 = 0.0, $307 = 0, $3070 = 0, $3071 = 0.0, $3072 = 0, $3073 = 0.0, $3074 = 0, $3075 = 0.0, $3076 = 0, $3077 = 0.0, $3078 = 0.0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0.0, $3082 = 0.0, $3083 = 0.0, $3084 = 0.0, $3085 = 0;
 var $3086 = 0, $3087 = 0.0, $3088 = 0.0, $3089 = 0.0, $309 = 0, $3090 = 0.0, $3091 = 0.0, $3092 = 0.0, $3093 = 0.0, $3094 = 0, $3095 = 0.0, $3096 = 0, $3097 = 0.0, $3098 = 0.0, $3099 = 0.0, $31 = 0, $310 = 0, $3100 = 0.0, $3101 = 0.0, $3102 = 0.0;
 var $3103 = 0.0, $3104 = 0.0, $3105 = 0.0, $3106 = 0.0, $3107 = 0.0, $3108 = 0.0, $3109 = 0.0, $311 = 0, $3110 = 0.0, $3111 = 0.0, $3112 = 0.0, $3113 = 0.0, $3114 = 0.0, $3115 = 0.0, $3116 = 0.0, $3117 = 0.0, $3118 = 0.0, $3119 = 0.0, $312 = 0, $3120 = 0.0;
 var $3121 = 0.0, $3122 = 0.0, $3123 = 0.0, $3124 = 0.0, $3125 = 0.0, $3126 = 0.0, $3127 = 0.0, $3128 = 0.0, $3129 = 0.0, $313 = 0, $3130 = 0, $3131 = 0.0, $3132 = 0.0, $3133 = 0.0, $3134 = 0, $3135 = 0.0, $3136 = 0, $3137 = 0.0, $3138 = 0, $3139 = 0.0;
 var $314 = 0, $3140 = 0, $3141 = 0.0, $3142 = 0, $3143 = 0.0, $3144 = 0, $3145 = 0.0, $3146 = 0, $3147 = 0, $3148 = 0, $3149 = 0.0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0, $3157 = 0;
 var $3158 = 0, $3159 = 0, $316 = 0, $3160 = 0, $3161 = 0, $3162 = 0, $3163 = 0.0, $3164 = 0, $3165 = 0, $3166 = 0, $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0, $3174 = 0, $3175 = 0;
 var $3176 = 0, $3177 = 0.0, $3178 = 0, $3179 = 0, $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0, $3183 = 0, $3184 = 0, $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0.0, $3192 = 0, $3193 = 0;
 var $3194 = 0, $3195 = 0, $3196 = 0, $3197 = 0, $3198 = 0, $3199 = 0, $32 = 0, $320 = 0, $3200 = 0, $3201 = 0, $3202 = 0, $3203 = 0, $3204 = 0, $3205 = 0.0, $3206 = 0, $3207 = 0, $3208 = 0, $3209 = 0, $321 = 0, $3210 = 0;
 var $3211 = 0, $3212 = 0, $3213 = 0, $3214 = 0, $3215 = 0, $3216 = 0, $3217 = 0, $3218 = 0, $3219 = 0.0, $322 = 0, $3220 = 0, $3221 = 0, $3222 = 0, $3223 = 0, $3224 = 0, $3225 = 0, $3226 = 0, $3227 = 0, $3228 = 0, $3229 = 0;
 var $323 = 0, $3230 = 0, $3231 = 0, $3232 = 0, $3233 = 0, $3234 = 0.0, $3235 = 0, $3236 = 0, $3237 = 0.0, $3238 = 0.0, $3239 = 0, $324 = 0, $3240 = 0, $3241 = 0.0, $3242 = 0, $3243 = 0, $3244 = 0.0, $3245 = 0.0, $3246 = 0.0, $3247 = 0;
 var $3248 = 0.0, $3249 = 0.0, $325 = 0, $3250 = 0.0, $3251 = 0.0, $3252 = 0.0, $3253 = 0.0, $3254 = 0.0, $3255 = 0.0, $3256 = 0.0, $3257 = 0.0, $3258 = 0.0, $3259 = 0.0, $326 = 0, $3260 = 0.0, $3261 = 0, $3262 = 0.0, $3263 = 0.0, $3264 = 0.0, $3265 = 0.0;
 var $3266 = 0.0, $3267 = 0, $3268 = 0.0, $3269 = 0.0, $327 = 0, $3270 = 0.0, $3271 = 0.0, $3272 = 0.0, $3273 = 0.0, $3274 = 0.0, $3275 = 0.0, $3276 = 0.0, $3277 = 0.0, $3278 = 0.0, $3279 = 0.0, $328 = 0, $3280 = 0.0, $3281 = 0.0, $3282 = 0.0, $3283 = 0.0;
 var $3284 = 0.0, $3285 = 0, $3286 = 0.0, $3287 = 0, $3288 = 0.0, $3289 = 0.0, $329 = 0, $3290 = 0.0, $3291 = 0.0, $3292 = 0.0, $3293 = 0.0, $3294 = 0.0, $3295 = 0.0, $3296 = 0.0, $3297 = 0.0, $3298 = 0.0, $3299 = 0.0, $33 = 0, $330 = 0, $3300 = 0.0;
 var $3301 = 0.0, $3302 = 0.0, $3303 = 0.0, $3304 = 0.0, $3305 = 0.0, $3306 = 0.0, $3307 = 0.0, $3308 = 0.0, $3309 = 0.0, $331 = 0, $3310 = 0.0, $3311 = 0.0, $3312 = 0.0, $3313 = 0.0, $3314 = 0.0, $3315 = 0.0, $3316 = 0.0, $3317 = 0.0, $3318 = 0.0, $3319 = 0.0;
 var $332 = 0, $3320 = 0.0, $3321 = 0.0, $3322 = 0.0, $3323 = 0.0, $3324 = 0.0, $3325 = 0.0, $3326 = 0.0, $3327 = 0.0, $3328 = 0.0, $3329 = 0.0, $333 = 0, $3330 = 0.0, $3331 = 0.0, $3332 = 0.0, $3333 = 0.0, $3334 = 0.0, $3335 = 0.0, $3336 = 0.0, $3337 = 0.0;
 var $3338 = 0.0, $3339 = 0.0, $334 = 0, $3340 = 0.0, $3341 = 0.0, $3342 = 0.0, $3343 = 0.0, $3344 = 0.0, $3345 = 0.0, $3346 = 0.0, $3347 = 0.0, $3348 = 0.0, $3349 = 0.0, $335 = 0, $3350 = 0.0, $3351 = 0.0, $3352 = 0.0, $3353 = 0.0, $3354 = 0.0, $3355 = 0.0;
 var $3356 = 0.0, $3357 = 0.0, $3358 = 0.0, $3359 = 0, $336 = 0, $3360 = 0.0, $3361 = 0.0, $3362 = 0.0, $3363 = 0, $3364 = 0.0, $3365 = 0, $3366 = 0.0, $3367 = 0, $3368 = 0.0, $3369 = 0, $337 = 0, $3370 = 0.0, $3371 = 0, $3372 = 0.0, $3373 = 0;
 var $3374 = 0.0, $3375 = 0, $3376 = 0.0, $3377 = 0, $3378 = 0.0, $3379 = 0, $338 = 0, $3380 = 0.0, $3381 = 0, $3382 = 0.0, $3383 = 0, $3384 = 0, $3385 = 0, $3386 = 0.0, $3387 = 0, $3388 = 0, $3389 = 0, $339 = 0, $3390 = 0, $3391 = 0;
 var $3392 = 0, $3393 = 0, $3394 = 0, $3395 = 0, $3396 = 0, $3397 = 0, $3398 = 0, $3399 = 0, $34 = 0, $340 = 0, $3400 = 0.0, $3401 = 0, $3402 = 0, $3403 = 0, $3404 = 0, $3405 = 0, $3406 = 0, $3407 = 0, $3408 = 0, $3409 = 0;
 var $341 = 0, $3410 = 0, $3411 = 0, $3412 = 0, $3413 = 0, $3414 = 0.0, $3415 = 0, $3416 = 0, $3417 = 0, $3418 = 0, $3419 = 0, $342 = 0, $3420 = 0, $3421 = 0, $3422 = 0, $3423 = 0, $3424 = 0, $3425 = 0, $3426 = 0, $3427 = 0;
 var $3428 = 0.0, $3429 = 0, $343 = 0, $3430 = 0, $3431 = 0, $3432 = 0, $3433 = 0, $3434 = 0, $3435 = 0, $3436 = 0, $3437 = 0, $3438 = 0, $3439 = 0, $344 = 0, $3440 = 0, $3441 = 0, $3442 = 0.0, $3443 = 0, $3444 = 0, $3445 = 0;
 var $3446 = 0, $3447 = 0, $3448 = 0, $3449 = 0, $345 = 0, $3450 = 0, $3451 = 0, $3452 = 0, $3453 = 0, $3454 = 0, $3455 = 0, $3456 = 0.0, $3457 = 0, $3458 = 0, $3459 = 0, $346 = 0, $3460 = 0, $3461 = 0, $3462 = 0, $3463 = 0;
 var $3464 = 0, $3465 = 0, $3466 = 0, $3467 = 0, $3468 = 0, $3469 = 0, $347 = 0, $3470 = 0, $3471 = 0.0, $3472 = 0, $3473 = 0, $3474 = 0.0, $3475 = 0.0, $3476 = 0, $3477 = 0, $3478 = 0.0, $3479 = 0.0, $348 = 0, $3480 = 0.0, $3481 = 0;
 var $3482 = 0.0, $3483 = 0.0, $3484 = 0.0, $3485 = 0.0, $3486 = 0.0, $3487 = 0.0, $3488 = 0.0, $3489 = 0.0, $349 = 0, $3490 = 0.0, $3491 = 0.0, $3492 = 0.0, $3493 = 0.0, $3494 = 0, $3495 = 0.0, $3496 = 0.0, $3497 = 0.0, $3498 = 0.0, $3499 = 0.0, $35 = 0;
 var $350 = 0, $3500 = 0, $3501 = 0.0, $3502 = 0.0, $3503 = 0.0, $3504 = 0.0, $3505 = 0.0, $3506 = 0.0, $3507 = 0.0, $3508 = 0.0, $3509 = 0.0, $351 = 0, $3510 = 0.0, $3511 = 0.0, $3512 = 0.0, $3513 = 0.0, $3514 = 0.0, $3515 = 0.0, $3516 = 0.0, $3517 = 0;
 var $3518 = 0.0, $3519 = 0, $352 = 0, $3520 = 0.0, $3521 = 0.0, $3522 = 0.0, $3523 = 0.0, $3524 = 0.0, $3525 = 0.0, $3526 = 0.0, $3527 = 0.0, $3528 = 0.0, $3529 = 0.0, $353 = 0, $3530 = 0.0, $3531 = 0.0, $3532 = 0.0, $3533 = 0.0, $3534 = 0.0, $3535 = 0.0;
 var $3536 = 0.0, $3537 = 0.0, $3538 = 0.0, $3539 = 0.0, $354 = 0, $3540 = 0.0, $3541 = 0.0, $3542 = 0.0, $3543 = 0.0, $3544 = 0.0, $3545 = 0.0, $3546 = 0.0, $3547 = 0.0, $3548 = 0.0, $3549 = 0.0, $355 = 0, $3550 = 0.0, $3551 = 0.0, $3552 = 0.0, $3553 = 0.0;
 var $3554 = 0.0, $3555 = 0.0, $3556 = 0.0, $3557 = 0.0, $3558 = 0.0, $3559 = 0.0, $356 = 0, $3560 = 0.0, $3561 = 0.0, $3562 = 0.0, $3563 = 0.0, $3564 = 0.0, $3565 = 0.0, $3566 = 0.0, $3567 = 0.0, $3568 = 0.0, $3569 = 0.0, $357 = 0, $3570 = 0.0, $3571 = 0.0;
 var $3572 = 0.0, $3573 = 0.0, $3574 = 0.0, $3575 = 0.0, $3576 = 0.0, $3577 = 0.0, $3578 = 0.0, $3579 = 0.0, $358 = 0, $3580 = 0.0, $3581 = 0.0, $3582 = 0.0, $3583 = 0.0, $3584 = 0.0, $3585 = 0.0, $3586 = 0.0, $3587 = 0.0, $3588 = 0.0, $3589 = 0.0, $359 = 0;
 var $3590 = 0.0, $3591 = 0.0, $3592 = 0, $3593 = 0.0, $3594 = 0.0, $3595 = 0.0, $3596 = 0, $3597 = 0.0, $3598 = 0, $3599 = 0.0, $36 = 0, $360 = 0, $3600 = 0, $3601 = 0.0, $3602 = 0, $3603 = 0.0, $3604 = 0, $3605 = 0.0, $3606 = 0, $3607 = 0.0;
 var $3608 = 0, $3609 = 0.0, $361 = 0, $3610 = 0, $3611 = 0.0, $3612 = 0, $3613 = 0.0, $3614 = 0, $3615 = 0.0, $3616 = 0, $3617 = 0, $3618 = 0, $3619 = 0.0, $362 = 0, $3620 = 0, $3621 = 0, $3622 = 0, $3623 = 0, $3624 = 0, $3625 = 0;
 var $3626 = 0, $3627 = 0, $3628 = 0, $3629 = 0, $363 = 0, $3630 = 0, $3631 = 0, $3632 = 0, $3633 = 0.0, $3634 = 0, $3635 = 0, $3636 = 0, $3637 = 0, $3638 = 0, $3639 = 0, $364 = 0, $3640 = 0, $3641 = 0, $3642 = 0, $3643 = 0;
 var $3644 = 0, $3645 = 0, $3646 = 0, $3647 = 0.0, $3648 = 0, $3649 = 0, $365 = 0, $3650 = 0, $3651 = 0, $3652 = 0, $3653 = 0, $3654 = 0, $3655 = 0, $3656 = 0, $3657 = 0, $3658 = 0, $3659 = 0, $366 = 0, $3660 = 0, $3661 = 0.0;
 var $3662 = 0, $3663 = 0, $3664 = 0, $3665 = 0, $3666 = 0, $3667 = 0, $3668 = 0, $3669 = 0, $367 = 0, $3670 = 0, $3671 = 0, $3672 = 0, $3673 = 0, $3674 = 0, $3675 = 0.0, $3676 = 0, $3677 = 0, $3678 = 0, $3679 = 0, $368 = 0;
 var $3680 = 0, $3681 = 0, $3682 = 0, $3683 = 0, $3684 = 0, $3685 = 0, $3686 = 0, $3687 = 0, $3688 = 0, $3689 = 0.0, $369 = 0, $3690 = 0, $3691 = 0, $3692 = 0, $3693 = 0, $3694 = 0, $3695 = 0, $3696 = 0, $3697 = 0, $3698 = 0;
 var $3699 = 0, $37 = 0, $370 = 0, $3700 = 0, $3701 = 0, $3702 = 0, $3703 = 0, $3704 = 0.0, $3705 = 0.0, $3706 = 0, $3707 = 0, $3708 = 0.0, $3709 = 0.0, $371 = 0, $3710 = 0, $3711 = 0, $3712 = 0.0, $3713 = 0.0, $3714 = 0.0, $3715 = 0.0;
 var $3716 = 0.0, $3717 = 0.0, $3718 = 0.0, $3719 = 0, $372 = 0, $3720 = 0.0, $3721 = 0, $3722 = 0.0, $3723 = 0.0, $3724 = 0.0, $3725 = 0.0, $3726 = 0.0, $3727 = 0.0, $3728 = 0.0, $3729 = 0.0, $373 = 0, $3730 = 0.0, $3731 = 0.0, $3732 = 0.0, $3733 = 0.0;
 var $3734 = 0.0, $3735 = 0.0, $3736 = 0.0, $3737 = 0.0, $3738 = 0.0, $3739 = 0.0, $374 = 0.0, $3740 = 0.0, $3741 = 0.0, $3742 = 0.0, $3743 = 0.0, $3744 = 0.0, $3745 = 0.0, $3746 = 0.0, $3747 = 0.0, $3748 = 0.0, $3749 = 0.0, $375 = 0.0, $3750 = 0.0, $3751 = 0.0;
 var $3752 = 0.0, $3753 = 0.0, $3754 = 0.0, $3755 = 0.0, $3756 = 0.0, $3757 = 0.0, $3758 = 0.0, $3759 = 0.0, $376 = 0.0, $3760 = 0.0, $3761 = 0.0, $3762 = 0.0, $3763 = 0.0, $3764 = 0.0, $3765 = 0.0, $3766 = 0.0, $3767 = 0.0, $3768 = 0.0, $3769 = 0.0, $377 = 0.0;
 var $3770 = 0.0, $3771 = 0.0, $3772 = 0.0, $3773 = 0.0, $3774 = 0.0, $3775 = 0.0, $3776 = 0.0, $3777 = 0.0, $3778 = 0.0, $3779 = 0.0, $378 = 0.0, $3780 = 0.0, $3781 = 0.0, $3782 = 0.0, $3783 = 0.0, $3784 = 0.0, $3785 = 0.0, $3786 = 0.0, $3787 = 0.0, $3788 = 0.0;
 var $3789 = 0.0, $379 = 0.0, $3790 = 0.0, $3791 = 0.0, $3792 = 0.0, $3793 = 0.0, $3794 = 0, $3795 = 0.0, $3796 = 0.0, $3797 = 0.0, $3798 = 0, $3799 = 0.0, $38 = 0, $380 = 0.0, $3800 = 0, $3801 = 0.0, $3802 = 0, $3803 = 0.0, $3804 = 0, $3805 = 0.0;
 var $3806 = 0, $3807 = 0.0, $3808 = 0, $3809 = 0.0, $381 = 0.0, $3810 = 0, $3811 = 0.0, $3812 = 0, $3813 = 0.0, $3814 = 0, $3815 = 0.0, $3816 = 0, $3817 = 0.0, $3818 = 0, $3819 = 0, $382 = 0.0, $3820 = 0, $3821 = 0.0, $3822 = 0, $3823 = 0;
 var $3824 = 0, $3825 = 0, $3826 = 0, $3827 = 0, $3828 = 0, $3829 = 0, $383 = 0.0, $3830 = 0, $3831 = 0, $3832 = 0, $3833 = 0, $3834 = 0, $3835 = 0.0, $3836 = 0, $3837 = 0, $3838 = 0, $3839 = 0, $384 = 0.0, $3840 = 0, $3841 = 0;
 var $3842 = 0, $3843 = 0, $3844 = 0, $3845 = 0, $3846 = 0, $3847 = 0, $3848 = 0, $3849 = 0.0, $385 = 0.0, $3850 = 0, $3851 = 0, $3852 = 0, $3853 = 0, $3854 = 0, $3855 = 0, $3856 = 0, $3857 = 0, $3858 = 0, $3859 = 0, $386 = 0.0;
 var $3860 = 0, $3861 = 0, $3862 = 0, $3863 = 0.0, $3864 = 0, $3865 = 0, $3866 = 0, $3867 = 0, $3868 = 0, $3869 = 0, $387 = 0.0, $3870 = 0, $3871 = 0, $3872 = 0, $3873 = 0, $3874 = 0, $3875 = 0, $3876 = 0, $3877 = 0.0, $3878 = 0;
 var $3879 = 0, $388 = 0.0, $3880 = 0, $3881 = 0, $3882 = 0, $3883 = 0, $3884 = 0, $3885 = 0, $3886 = 0, $3887 = 0, $3888 = 0, $3889 = 0, $389 = 0.0, $3890 = 0, $3891 = 0.0, $3892 = 0, $3893 = 0, $3894 = 0, $3895 = 0, $3896 = 0;
 var $3897 = 0, $3898 = 0, $3899 = 0, $39 = 0, $390 = 0.0, $3900 = 0, $3901 = 0, $3902 = 0, $3903 = 0, $3904 = 0, $3905 = 0, $3906 = 0.0, $3907 = 0.0, $3908 = 0, $3909 = 0, $391 = 0.0, $3910 = 0.0, $3911 = 0.0, $3912 = 0, $3913 = 0;
 var $3914 = 0.0, $3915 = 0.0, $3916 = 0.0, $3917 = 0.0, $3918 = 0.0, $3919 = 0.0, $392 = 0.0, $3920 = 0.0, $3921 = 0, $3922 = 0.0, $3923 = 0, $3924 = 0.0, $3925 = 0.0, $3926 = 0.0, $3927 = 0.0, $3928 = 0.0, $3929 = 0.0, $393 = 0.0, $3930 = 0.0, $3931 = 0.0;
 var $3932 = 0.0, $3933 = 0.0, $3934 = 0.0, $3935 = 0.0, $3936 = 0, $3937 = 0.0, $3938 = 0.0, $3939 = 0.0, $394 = 0.0, $3940 = 0.0, $3941 = 0.0, $3942 = 0, $3943 = 0.0, $3944 = 0.0, $3945 = 0.0, $3946 = 0.0, $3947 = 0.0, $3948 = 0.0, $3949 = 0.0, $395 = 0.0;
 var $3950 = 0.0, $3951 = 0.0, $3952 = 0.0, $3953 = 0.0, $3954 = 0.0, $3955 = 0.0, $3956 = 0.0, $3957 = 0.0, $3958 = 0.0, $3959 = 0.0, $396 = 0.0, $3960 = 0.0, $3961 = 0.0, $3962 = 0.0, $3963 = 0.0, $3964 = 0.0, $3965 = 0.0, $3966 = 0.0, $3967 = 0.0, $3968 = 0.0;
 var $3969 = 0.0, $397 = 0.0, $3970 = 0.0, $3971 = 0.0, $3972 = 0.0, $3973 = 0.0, $3974 = 0.0, $3975 = 0.0, $3976 = 0.0, $3977 = 0.0, $3978 = 0.0, $3979 = 0.0, $398 = 0.0, $3980 = 0.0, $3981 = 0.0, $3982 = 0.0, $3983 = 0.0, $3984 = 0.0, $3985 = 0.0, $3986 = 0.0;
 var $3987 = 0.0, $3988 = 0.0, $3989 = 0.0, $399 = 0.0, $3990 = 0.0, $3991 = 0.0, $3992 = 0.0, $3993 = 0.0, $3994 = 0.0, $3995 = 0.0, $3996 = 0.0, $3997 = 0.0, $3998 = 0.0, $3999 = 0.0, $4 = 0, $40 = 0, $400 = 0.0, $4000 = 0.0, $4001 = 0.0, $4002 = 0.0;
 var $4003 = 0.0, $4004 = 0.0, $4005 = 0.0, $4006 = 0.0, $4007 = 0.0, $4008 = 0.0, $4009 = 0.0, $401 = 0.0, $4010 = 0.0, $4011 = 0.0, $4012 = 0.0, $4013 = 0.0, $4014 = 0.0, $4015 = 0.0, $4016 = 0.0, $4017 = 0.0, $4018 = 0, $4019 = 0.0, $402 = 0.0, $4020 = 0.0;
 var $4021 = 0, $4022 = 0.0, $4023 = 0.0, $4024 = 0.0, $4025 = 0.0, $4026 = 0.0, $4027 = 0.0, $4028 = 0.0, $4029 = 0.0, $403 = 0.0, $4030 = 0.0, $4031 = 0.0, $4032 = 0.0, $4033 = 0.0, $4034 = 0.0, $4035 = 0.0, $4036 = 0.0, $4037 = 0.0, $4038 = 0.0, $4039 = 0.0;
 var $404 = 0.0, $4040 = 0.0, $4041 = 0.0, $4042 = 0.0, $4043 = 0.0, $4044 = 0.0, $4045 = 0.0, $4046 = 0.0, $4047 = 0.0, $4048 = 0.0, $4049 = 0.0, $405 = 0.0, $4050 = 0.0, $4051 = 0.0, $4052 = 0.0, $4053 = 0.0, $4054 = 0.0, $4055 = 0.0, $4056 = 0.0, $4057 = 0.0;
 var $4058 = 0.0, $4059 = 0.0, $406 = 0.0, $4060 = 0.0, $4061 = 0.0, $4062 = 0.0, $4063 = 0.0, $4064 = 0.0, $4065 = 0.0, $4066 = 0.0, $4067 = 0.0, $4068 = 0.0, $4069 = 0.0, $407 = 0.0, $4070 = 0.0, $4071 = 0.0, $4072 = 0.0, $4073 = 0.0, $4074 = 0.0, $4075 = 0.0;
 var $4076 = 0.0, $4077 = 0.0, $4078 = 0.0, $4079 = 0.0, $408 = 0.0, $4080 = 0.0, $4081 = 0.0, $4082 = 0.0, $4083 = 0.0, $4084 = 0.0, $4085 = 0.0, $4086 = 0.0, $4087 = 0.0, $4088 = 0.0, $4089 = 0.0, $409 = 0.0, $4090 = 0.0, $4091 = 0.0, $4092 = 0.0, $4093 = 0.0;
 var $4094 = 0.0, $4095 = 0.0, $4096 = 0.0, $4097 = 0, $4098 = 0.0, $4099 = 0.0, $41 = 0, $410 = 0.0, $4100 = 0.0, $4101 = 0.0, $4102 = 0.0, $4103 = 0.0, $4104 = 0.0, $4105 = 0.0, $4106 = 0.0, $4107 = 0.0, $4108 = 0, $4109 = 0.0, $411 = 0.0, $4110 = 0.0;
 var $4111 = 0, $4112 = 0.0, $4113 = 0, $4114 = 0.0, $4115 = 0, $4116 = 0.0, $4117 = 0, $4118 = 0.0, $4119 = 0, $412 = 0.0, $4120 = 0.0, $4121 = 0.0, $4122 = 0.0, $4123 = 0.0, $4124 = 0.0, $4125 = 0.0, $4126 = 0.0, $4127 = 0.0, $4128 = 0, $4129 = 0;
 var $413 = 0.0, $4130 = 0.0, $4131 = 0.0, $4132 = 0.0, $4133 = 0.0, $4134 = 0.0, $4135 = 0.0, $4136 = 0, $4137 = 0, $4138 = 0.0, $4139 = 0.0, $414 = 0.0, $4140 = 0.0, $4141 = 0.0, $4142 = 0.0, $4143 = 0.0, $4144 = 0.0, $4145 = 0, $4146 = 0.0, $4147 = 0;
 var $4148 = 0.0, $4149 = 0.0, $415 = 0.0, $4150 = 0.0, $4151 = 0.0, $4152 = 0.0, $4153 = 0.0, $4154 = 0.0, $4155 = 0.0, $4156 = 0.0, $4157 = 0.0, $4158 = 0.0, $4159 = 0.0, $416 = 0.0, $4160 = 0.0, $4161 = 0.0, $4162 = 0.0, $4163 = 0.0, $4164 = 0.0, $4165 = 0.0;
 var $4166 = 0.0, $4167 = 0.0, $4168 = 0.0, $4169 = 0.0, $417 = 0.0, $4170 = 0.0, $4171 = 0.0, $4172 = 0.0, $4173 = 0.0, $4174 = 0.0, $4175 = 0.0, $4176 = 0.0, $4177 = 0.0, $4178 = 0.0, $4179 = 0.0, $418 = 0.0, $4180 = 0.0, $4181 = 0.0, $4182 = 0.0, $4183 = 0.0;
 var $4184 = 0.0, $4185 = 0.0, $4186 = 0.0, $4187 = 0.0, $4188 = 0.0, $4189 = 0.0, $419 = 0.0, $4190 = 0.0, $4191 = 0.0, $4192 = 0.0, $4193 = 0.0, $4194 = 0, $4195 = 0.0, $4196 = 0.0, $4197 = 0.0, $4198 = 0.0, $4199 = 0.0, $42 = 0, $420 = 0.0, $4200 = 0;
 var $4201 = 0.0, $4202 = 0, $4203 = 0.0, $4204 = 0, $4205 = 0.0, $4206 = 0, $4207 = 0.0, $4208 = 0, $4209 = 0.0, $421 = 0.0, $4210 = 0, $4211 = 0.0, $4212 = 0, $4213 = 0.0, $4214 = 0, $4215 = 0.0, $4216 = 0, $4217 = 0, $4218 = 0, $4219 = 0.0;
 var $422 = 0.0, $4220 = 0, $4221 = 0, $4222 = 0, $4223 = 0, $4224 = 0, $4225 = 0, $4226 = 0, $4227 = 0, $4228 = 0, $4229 = 0, $423 = 0.0, $4230 = 0, $4231 = 0, $4232 = 0, $4233 = 0.0, $4234 = 0, $4235 = 0, $4236 = 0, $4237 = 0;
 var $4238 = 0, $4239 = 0, $424 = 0.0, $4240 = 0, $4241 = 0, $4242 = 0, $4243 = 0, $4244 = 0, $4245 = 0, $4246 = 0, $4247 = 0.0, $4248 = 0, $4249 = 0, $425 = 0.0, $4250 = 0, $4251 = 0, $4252 = 0, $4253 = 0, $4254 = 0, $4255 = 0;
 var $4256 = 0, $4257 = 0, $4258 = 0, $4259 = 0, $426 = 0.0, $4260 = 0, $4261 = 0.0, $4262 = 0, $4263 = 0, $4264 = 0, $4265 = 0, $4266 = 0, $4267 = 0, $4268 = 0, $4269 = 0, $427 = 0.0, $4270 = 0, $4271 = 0, $4272 = 0, $4273 = 0;
 var $4274 = 0, $4275 = 0.0, $4276 = 0, $4277 = 0, $4278 = 0, $4279 = 0, $428 = 0.0, $4280 = 0, $4281 = 0, $4282 = 0, $4283 = 0, $4284 = 0, $4285 = 0, $4286 = 0, $4287 = 0, $4288 = 0, $4289 = 0.0, $429 = 0.0, $4290 = 0, $4291 = 0;
 var $4292 = 0, $4293 = 0, $4294 = 0, $4295 = 0, $4296 = 0, $4297 = 0, $4298 = 0, $4299 = 0, $43 = 0, $430 = 0.0, $4300 = 0, $4301 = 0, $4302 = 0, $4303 = 0, $4304 = 0.0, $4305 = 0.0, $4306 = 0.0, $4307 = 0.0, $4308 = 0.0, $4309 = 0.0;
 var $431 = 0.0, $4310 = 0.0, $4311 = 0.0, $4312 = 0.0, $4313 = 0.0, $4314 = 0.0, $4315 = 0, $4316 = 0.0, $4317 = 0.0, $4318 = 0.0, $4319 = 0, $432 = 0.0, $4320 = 0.0, $4321 = 0, $4322 = 0.0, $4323 = 0, $4324 = 0.0, $4325 = 0, $4326 = 0.0, $4327 = 0;
 var $4328 = 0.0, $4329 = 0.0, $433 = 0.0, $4330 = 0.0, $4331 = 0.0, $4332 = 0.0, $4333 = 0.0, $4334 = 0, $4335 = 0, $4336 = 0.0, $4337 = 0.0, $4338 = 0.0, $4339 = 0.0, $434 = 0.0, $4340 = 0.0, $4341 = 0.0, $4342 = 0.0, $4343 = 0.0, $4344 = 0, $4345 = 0;
 var $4346 = 0.0, $4347 = 0.0, $4348 = 0.0, $4349 = 0.0, $435 = 0.0, $4350 = 0.0, $4351 = 0.0, $4352 = 0.0, $4353 = 0, $4354 = 0.0, $4355 = 0, $4356 = 0.0, $4357 = 0.0, $4358 = 0.0, $4359 = 0.0, $436 = 0.0, $4360 = 0.0, $4361 = 0.0, $4362 = 0.0, $4363 = 0.0;
 var $4364 = 0.0, $4365 = 0.0, $4366 = 0.0, $4367 = 0.0, $4368 = 0.0, $4369 = 0.0, $437 = 0.0, $4370 = 0.0, $4371 = 0.0, $4372 = 0.0, $4373 = 0.0, $4374 = 0.0, $4375 = 0.0, $4376 = 0.0, $4377 = 0.0, $4378 = 0.0, $4379 = 0.0, $438 = 0.0, $4380 = 0.0, $4381 = 0.0;
 var $4382 = 0.0, $4383 = 0.0, $4384 = 0.0, $4385 = 0.0, $4386 = 0.0, $4387 = 0.0, $4388 = 0.0, $4389 = 0.0, $439 = 0.0, $4390 = 0.0, $4391 = 0.0, $4392 = 0.0, $4393 = 0.0, $4394 = 0.0, $4395 = 0.0, $4396 = 0.0, $4397 = 0.0, $4398 = 0.0, $4399 = 0.0, $44 = 0;
 var $440 = 0.0, $4400 = 0.0, $4401 = 0, $4402 = 0.0, $4403 = 0.0, $4404 = 0.0, $4405 = 0.0, $4406 = 0.0, $4407 = 0, $4408 = 0.0, $4409 = 0, $441 = 0.0, $4410 = 0.0, $4411 = 0, $4412 = 0.0, $4413 = 0, $4414 = 0.0, $4415 = 0, $4416 = 0.0, $4417 = 0;
 var $4418 = 0.0, $4419 = 0, $442 = 0.0, $4420 = 0.0, $4421 = 0, $4422 = 0.0, $4423 = 0, $4424 = 0, $4425 = 0, $4426 = 0.0, $4427 = 0, $4428 = 0, $4429 = 0, $443 = 0.0, $4430 = 0, $4431 = 0, $4432 = 0, $4433 = 0, $4434 = 0, $4435 = 0;
 var $4436 = 0, $4437 = 0, $4438 = 0, $4439 = 0, $444 = 0.0, $4440 = 0.0, $4441 = 0, $4442 = 0, $4443 = 0, $4444 = 0, $4445 = 0, $4446 = 0, $4447 = 0, $4448 = 0, $4449 = 0, $445 = 0.0, $4450 = 0, $4451 = 0, $4452 = 0, $4453 = 0;
 var $4454 = 0.0, $4455 = 0, $4456 = 0, $4457 = 0, $4458 = 0, $4459 = 0, $446 = 0.0, $4460 = 0, $4461 = 0, $4462 = 0, $4463 = 0, $4464 = 0, $4465 = 0, $4466 = 0, $4467 = 0, $4468 = 0.0, $4469 = 0, $447 = 0.0, $4470 = 0, $4471 = 0;
 var $4472 = 0, $4473 = 0, $4474 = 0, $4475 = 0, $4476 = 0, $4477 = 0, $4478 = 0, $4479 = 0, $448 = 0.0, $4480 = 0, $4481 = 0, $4482 = 0.0, $4483 = 0, $4484 = 0, $4485 = 0, $4486 = 0, $4487 = 0, $4488 = 0, $4489 = 0, $449 = 0.0;
 var $4490 = 0, $4491 = 0, $4492 = 0, $4493 = 0, $4494 = 0, $4495 = 0, $4496 = 0.0, $4497 = 0, $4498 = 0, $4499 = 0, $45 = 0, $450 = 0.0, $4500 = 0, $4501 = 0, $4502 = 0, $4503 = 0, $4504 = 0, $4505 = 0, $4506 = 0, $4507 = 0;
 var $4508 = 0, $4509 = 0, $451 = 0.0, $4510 = 0, $4511 = 0.0, $4512 = 0, $4513 = 0, $4514 = 0.0, $4515 = 0.0, $4516 = 0, $4517 = 0, $4518 = 0.0, $4519 = 0.0, $452 = 0, $4520 = 0.0, $4521 = 0.0, $4522 = 0.0, $4523 = 0.0, $4524 = 0.0, $4525 = 0.0;
 var $4526 = 0.0, $4527 = 0.0, $4528 = 0.0, $4529 = 0, $453 = 0, $4530 = 0.0, $4531 = 0.0, $4532 = 0.0, $4533 = 0, $4534 = 0.0, $4535 = 0.0, $4536 = 0.0, $4537 = 0.0, $4538 = 0.0, $4539 = 0, $454 = 0, $4540 = 0.0, $4541 = 0.0, $4542 = 0.0, $4543 = 0.0;
 var $4544 = 0.0, $4545 = 0.0, $4546 = 0.0, $4547 = 0.0, $4548 = 0.0, $4549 = 0.0, $455 = 0, $4550 = 0.0, $4551 = 0.0, $4552 = 0.0, $4553 = 0.0, $4554 = 0.0, $4555 = 0, $4556 = 0.0, $4557 = 0, $4558 = 0.0, $4559 = 0.0, $456 = 0, $4560 = 0.0, $4561 = 0.0;
 var $4562 = 0.0, $4563 = 0.0, $4564 = 0.0, $4565 = 0.0, $4566 = 0.0, $4567 = 0.0, $4568 = 0.0, $4569 = 0.0, $457 = 0, $4570 = 0.0, $4571 = 0.0, $4572 = 0.0, $4573 = 0.0, $4574 = 0.0, $4575 = 0.0, $4576 = 0.0, $4577 = 0.0, $4578 = 0.0, $4579 = 0.0, $458 = 0.0;
 var $4580 = 0.0, $4581 = 0.0, $4582 = 0.0, $4583 = 0.0, $4584 = 0.0, $4585 = 0.0, $4586 = 0.0, $4587 = 0.0, $4588 = 0.0, $4589 = 0.0, $459 = 0.0, $4590 = 0.0, $4591 = 0.0, $4592 = 0.0, $4593 = 0.0, $4594 = 0.0, $4595 = 0.0, $4596 = 0.0, $4597 = 0.0, $4598 = 0.0;
 var $4599 = 0.0, $46 = 0, $460 = 0.0, $4600 = 0.0, $4601 = 0.0, $4602 = 0.0, $4603 = 0.0, $4604 = 0.0, $4605 = 0.0, $4606 = 0.0, $4607 = 0.0, $4608 = 0.0, $4609 = 0.0, $461 = 0.0, $4610 = 0.0, $4611 = 0.0, $4612 = 0.0, $4613 = 0.0, $4614 = 0.0, $4615 = 0.0;
 var $4616 = 0.0, $4617 = 0.0, $4618 = 0.0, $4619 = 0.0, $462 = 0.0, $4620 = 0.0, $4621 = 0.0, $4622 = 0.0, $4623 = 0.0, $4624 = 0.0, $4625 = 0.0, $4626 = 0.0, $4627 = 0.0, $4628 = 0.0, $4629 = 0.0, $463 = 0.0, $4630 = 0.0, $4631 = 0.0, $4632 = 0.0, $4633 = 0.0;
 var $4634 = 0.0, $4635 = 0.0, $4636 = 0.0, $4637 = 0.0, $4638 = 0.0, $4639 = 0.0, $464 = 0.0, $4640 = 0.0, $4641 = 0.0, $4642 = 0.0, $4643 = 0.0, $4644 = 0.0, $4645 = 0.0, $4646 = 0.0, $4647 = 0.0, $4648 = 0.0, $4649 = 0.0, $465 = 0.0, $4650 = 0.0, $4651 = 0.0;
 var $4652 = 0.0, $4653 = 0.0, $4654 = 0.0, $4655 = 0.0, $4656 = 0.0, $4657 = 0.0, $4658 = 0.0, $4659 = 0.0, $466 = 0, $4660 = 0.0, $4661 = 0.0, $4662 = 0.0, $4663 = 0.0, $4664 = 0.0, $4665 = 0, $4666 = 0.0, $4667 = 0.0, $4668 = 0, $4669 = 0.0, $467 = 0;
 var $4670 = 0, $4671 = 0.0, $4672 = 0, $4673 = 0.0, $4674 = 0, $4675 = 0.0, $4676 = 0, $4677 = 0.0, $4678 = 0, $4679 = 0.0, $468 = 0, $4680 = 0, $4681 = 0.0, $4682 = 0, $4683 = 0.0, $4684 = 0, $4685 = 0.0, $4686 = 0, $4687 = 0.0, $4688 = 0;
 var $4689 = 0.0, $469 = 0, $4690 = 0, $4691 = 0.0, $4692 = 0, $4693 = 0.0, $4694 = 0, $4695 = 0.0, $4696 = 0, $4697 = 0.0, $4698 = 0, $4699 = 0.0, $47 = 0, $470 = 0, $4700 = 0, $4701 = 0, $4702 = 0, $4703 = 0.0, $4704 = 0, $4705 = 0;
 var $4706 = 0, $4707 = 0, $4708 = 0, $4709 = 0, $471 = 0, $4710 = 0, $4711 = 0, $4712 = 0, $4713 = 0, $4714 = 0, $4715 = 0, $4716 = 0, $4717 = 0.0, $4718 = 0, $4719 = 0, $472 = 0, $4720 = 0, $4721 = 0, $4722 = 0, $4723 = 0;
 var $4724 = 0, $4725 = 0, $4726 = 0, $4727 = 0, $4728 = 0, $4729 = 0, $473 = 0, $4730 = 0, $4731 = 0.0, $4732 = 0, $4733 = 0, $4734 = 0, $4735 = 0, $4736 = 0, $4737 = 0, $4738 = 0, $4739 = 0, $474 = 0, $4740 = 0, $4741 = 0;
 var $4742 = 0, $4743 = 0, $4744 = 0, $4745 = 0.0, $4746 = 0, $4747 = 0, $4748 = 0, $4749 = 0, $475 = 0, $4750 = 0, $4751 = 0, $4752 = 0, $4753 = 0, $4754 = 0, $4755 = 0, $4756 = 0, $4757 = 0, $4758 = 0, $4759 = 0.0, $476 = 0;
 var $4760 = 0, $4761 = 0, $4762 = 0, $4763 = 0, $4764 = 0, $4765 = 0, $4766 = 0, $4767 = 0, $4768 = 0, $4769 = 0, $477 = 0, $4770 = 0, $4771 = 0, $4772 = 0, $4773 = 0.0, $4774 = 0, $4775 = 0, $4776 = 0, $4777 = 0, $4778 = 0;
 var $4779 = 0, $478 = 0, $4780 = 0, $4781 = 0, $4782 = 0, $4783 = 0, $4784 = 0, $4785 = 0, $4786 = 0, $4787 = 0, $4788 = 0.0, $4789 = 0.0, $479 = 0, $4790 = 0, $4791 = 0, $4792 = 0.0, $4793 = 0.0, $4794 = 0.0, $4795 = 0, $4796 = 0;
 var $4797 = 0.0, $4798 = 0.0, $4799 = 0.0, $48 = 0, $480 = 0, $4800 = 0.0, $4801 = 0.0, $4802 = 0.0, $4803 = 0.0, $4804 = 0, $4805 = 0.0, $4806 = 0, $4807 = 0.0, $4808 = 0.0, $4809 = 0.0, $481 = 0, $4810 = 0.0, $4811 = 0.0, $4812 = 0.0, $4813 = 0.0;
 var $4814 = 0.0, $4815 = 0.0, $4816 = 0.0, $4817 = 0.0, $4818 = 0.0, $4819 = 0.0, $482 = 0, $4820 = 0.0, $4821 = 0.0, $4822 = 0.0, $4823 = 0.0, $4824 = 0.0, $4825 = 0.0, $4826 = 0.0, $4827 = 0.0, $4828 = 0.0, $4829 = 0.0, $483 = 0, $4830 = 0.0, $4831 = 0.0;
 var $4832 = 0.0, $4833 = 0.0, $4834 = 0.0, $4835 = 0.0, $4836 = 0.0, $4837 = 0.0, $4838 = 0.0, $4839 = 0.0, $484 = 0.0, $4840 = 0.0, $4841 = 0.0, $4842 = 0.0, $4843 = 0.0, $4844 = 0.0, $4845 = 0.0, $4846 = 0.0, $4847 = 0.0, $4848 = 0.0, $4849 = 0.0, $485 = 0;
 var $4850 = 0.0, $4851 = 0.0, $4852 = 0.0, $4853 = 0.0, $4854 = 0.0, $4855 = 0.0, $4856 = 0.0, $4857 = 0.0, $4858 = 0.0, $4859 = 0.0, $486 = 0.0, $4860 = 0.0, $4861 = 0.0, $4862 = 0.0, $4863 = 0.0, $4864 = 0.0, $4865 = 0.0, $4866 = 0.0, $4867 = 0.0, $4868 = 0.0;
 var $4869 = 0.0, $487 = 0.0, $4870 = 0.0, $4871 = 0.0, $4872 = 0.0, $4873 = 0.0, $4874 = 0.0, $4875 = 0.0, $4876 = 0.0, $4877 = 0.0, $4878 = 0.0, $4879 = 0.0, $488 = 0.0, $4880 = 0.0, $4881 = 0.0, $4882 = 0.0, $4883 = 0.0, $4884 = 0.0, $4885 = 0.0, $4886 = 0.0;
 var $4887 = 0.0, $4888 = 0.0, $4889 = 0.0, $489 = 0, $4890 = 0.0, $4891 = 0.0, $4892 = 0.0, $4893 = 0.0, $4894 = 0.0, $4895 = 0.0, $4896 = 0.0, $4897 = 0.0, $4898 = 0.0, $4899 = 0.0, $49 = 0, $490 = 0.0, $4900 = 0.0, $4901 = 0.0, $4902 = 0.0, $4903 = 0.0;
 var $4904 = 0.0, $4905 = 0.0, $4906 = 0.0, $4907 = 0.0, $4908 = 0.0, $4909 = 0.0, $491 = 0, $4910 = 0.0, $4911 = 0.0, $4912 = 0.0, $4913 = 0.0, $4914 = 0, $4915 = 0.0, $4916 = 0.0, $4917 = 0, $4918 = 0.0, $4919 = 0, $492 = 0.0, $4920 = 0.0, $4921 = 0;
 var $4922 = 0.0, $4923 = 0, $4924 = 0.0, $4925 = 0, $4926 = 0.0, $4927 = 0, $4928 = 0.0, $4929 = 0, $493 = 0.0, $4930 = 0.0, $4931 = 0, $4932 = 0.0, $4933 = 0, $4934 = 0.0, $4935 = 0, $4936 = 0.0, $4937 = 0, $4938 = 0.0, $4939 = 0, $494 = 0.0;
 var $4940 = 0.0, $4941 = 0, $4942 = 0.0, $4943 = 0, $4944 = 0.0, $4945 = 0, $4946 = 0.0, $4947 = 0, $4948 = 0.0, $4949 = 0, $495 = 0, $4950 = 0, $4951 = 0, $4952 = 0.0, $4953 = 0, $4954 = 0, $4955 = 0, $4956 = 0, $4957 = 0, $4958 = 0;
 var $4959 = 0, $496 = 0, $4960 = 0, $4961 = 0, $4962 = 0, $4963 = 0, $4964 = 0, $4965 = 0, $4966 = 0.0, $4967 = 0, $4968 = 0, $4969 = 0, $497 = 0, $4970 = 0, $4971 = 0, $4972 = 0, $4973 = 0, $4974 = 0, $4975 = 0, $4976 = 0;
 var $4977 = 0, $4978 = 0, $4979 = 0, $498 = 0.0, $4980 = 0.0, $4981 = 0, $4982 = 0, $4983 = 0, $4984 = 0, $4985 = 0, $4986 = 0, $4987 = 0, $4988 = 0, $4989 = 0, $499 = 0, $4990 = 0, $4991 = 0, $4992 = 0, $4993 = 0, $4994 = 0.0;
 var $4995 = 0, $4996 = 0, $4997 = 0, $4998 = 0, $4999 = 0, $5 = 0, $50 = 0, $500 = 0.0, $5000 = 0, $5001 = 0, $5002 = 0, $5003 = 0, $5004 = 0, $5005 = 0, $5006 = 0, $5007 = 0, $5008 = 0.0, $5009 = 0, $501 = 0, $5010 = 0;
 var $5011 = 0, $5012 = 0, $5013 = 0, $5014 = 0, $5015 = 0, $5016 = 0, $5017 = 0, $5018 = 0, $5019 = 0, $502 = 0.0, $5020 = 0, $5021 = 0, $5022 = 0.0, $5023 = 0, $5024 = 0, $5025 = 0, $5026 = 0, $5027 = 0, $5028 = 0, $5029 = 0;
 var $503 = 0.0, $5030 = 0, $5031 = 0, $5032 = 0, $5033 = 0, $5034 = 0, $5035 = 0, $5036 = 0, $5037 = 0, $5038 = 0, $504 = 0.0, $505 = 0.0, $506 = 0.0, $507 = 0.0, $508 = 0.0, $509 = 0.0, $51 = 0, $510 = 0.0, $511 = 0.0, $512 = 0.0;
 var $513 = 0.0, $514 = 0.0, $515 = 0.0, $516 = 0.0, $517 = 0.0, $518 = 0.0, $519 = 0.0, $52 = 0, $520 = 0.0, $521 = 0.0, $522 = 0.0, $523 = 0.0, $524 = 0.0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0.0, $529 = 0.0, $53 = 0, $530 = 0.0;
 var $531 = 0.0, $532 = 0.0, $533 = 0.0, $534 = 0.0, $535 = 0.0, $536 = 0.0, $537 = 0.0, $538 = 0.0, $539 = 0.0, $54 = 0, $540 = 0.0, $541 = 0.0, $542 = 0.0, $543 = 0.0, $544 = 0.0, $545 = 0.0, $546 = 0.0, $547 = 0.0, $548 = 0.0, $549 = 0.0;
 var $55 = 0, $550 = 0.0, $551 = 0.0, $552 = 0.0, $553 = 0.0, $554 = 0.0, $555 = 0.0, $556 = 0.0, $557 = 0.0, $558 = 0.0, $559 = 0.0, $56 = 0, $560 = 0.0, $561 = 0.0, $562 = 0.0, $563 = 0.0, $564 = 0.0, $565 = 0.0, $566 = 0.0, $567 = 0.0;
 var $568 = 0.0, $569 = 0.0, $57 = 0, $570 = 0.0, $571 = 0.0, $572 = 0.0, $573 = 0.0, $574 = 0.0, $575 = 0.0, $576 = 0.0, $577 = 0.0, $578 = 0, $579 = 0.0, $58 = 0, $580 = 0.0, $581 = 0, $582 = 0.0, $583 = 0.0, $584 = 0.0, $585 = 0.0;
 var $586 = 0.0, $587 = 0.0, $588 = 0.0, $589 = 0.0, $59 = 0, $590 = 0.0, $591 = 0.0, $592 = 0.0, $593 = 0.0, $594 = 0.0, $595 = 0.0, $596 = 0.0, $597 = 0.0, $598 = 0.0, $599 = 0.0, $6 = 0, $60 = 0, $600 = 0.0, $601 = 0.0, $602 = 0.0;
 var $603 = 0.0, $604 = 0.0, $605 = 0.0, $606 = 0.0, $607 = 0.0, $608 = 0.0, $609 = 0.0, $61 = 0, $610 = 0.0, $611 = 0.0, $612 = 0.0, $613 = 0.0, $614 = 0.0, $615 = 0.0, $616 = 0.0, $617 = 0.0, $618 = 0.0, $619 = 0.0, $62 = 0, $620 = 0.0;
 var $621 = 0.0, $622 = 0.0, $623 = 0.0, $624 = 0.0, $625 = 0.0, $626 = 0.0, $627 = 0.0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0.0, $632 = 0.0, $633 = 0.0, $634 = 0.0, $635 = 0.0, $636 = 0.0, $637 = 0.0, $638 = 0.0, $639 = 0.0;
 var $64 = 0, $640 = 0.0, $641 = 0.0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0.0, $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0.0, $656 = 0.0, $657 = 0;
 var $658 = 0.0, $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0.0, $663 = 0.0, $664 = 0.0, $665 = 0.0, $666 = 0.0, $667 = 0.0, $668 = 0, $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0, $672 = 0.0, $673 = 0, $674 = 0.0, $675 = 0;
 var $676 = 0.0, $677 = 0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0.0, $681 = 0.0, $682 = 0, $683 = 0, $684 = 0.0, $685 = 0.0, $686 = 0.0, $687 = 0.0, $688 = 0.0, $689 = 0.0, $69 = 0, $690 = 0.0, $691 = 0.0, $692 = 0.0, $693 = 0;
 var $694 = 0.0, $695 = 0, $696 = 0.0, $697 = 0.0, $698 = 0, $699 = 0.0, $7 = 0, $70 = 0, $700 = 0, $701 = 0.0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0.0, $713 = 0, $714 = 0.0, $715 = 0.0, $716 = 0.0, $717 = 0, $718 = 0.0, $719 = 0, $72 = 0, $720 = 0.0, $721 = 0.0, $722 = 0.0, $723 = 0, $724 = 0, $725 = 0, $726 = 0.0, $727 = 0, $728 = 0.0, $729 = 0;
 var $73 = 0, $730 = 0.0, $731 = 0.0, $732 = 0.0, $733 = 0.0, $734 = 0.0, $735 = 0.0, $736 = 0.0, $737 = 0.0, $738 = 0.0, $739 = 0.0, $74 = 0, $740 = 0, $741 = 0.0, $742 = 0.0, $743 = 0.0, $744 = 0.0, $745 = 0.0, $746 = 0.0, $747 = 0.0;
 var $748 = 0.0, $749 = 0.0, $75 = 0, $750 = 0, $751 = 0.0, $752 = 0.0, $753 = 0.0, $754 = 0.0, $755 = 0, $756 = 0.0, $757 = 0.0, $758 = 0.0, $759 = 0.0, $76 = 0, $760 = 0.0, $761 = 0, $762 = 0.0, $763 = 0.0, $764 = 0.0, $765 = 0.0;
 var $766 = 0.0, $767 = 0.0, $768 = 0.0, $769 = 0.0, $77 = 0, $770 = 0.0, $771 = 0.0, $772 = 0.0, $773 = 0.0, $774 = 0.0, $775 = 0, $776 = 0.0, $777 = 0, $778 = 0.0, $779 = 0.0, $78 = 0, $780 = 0.0, $781 = 0.0, $782 = 0.0, $783 = 0.0;
 var $784 = 0.0, $785 = 0.0, $786 = 0.0, $787 = 0.0, $788 = 0.0, $789 = 0.0, $79 = 0, $790 = 0.0, $791 = 0.0, $792 = 0.0, $793 = 0.0, $794 = 0.0, $795 = 0.0, $796 = 0.0, $797 = 0.0, $798 = 0.0, $799 = 0.0, $8 = 0, $80 = 0, $800 = 0.0;
 var $801 = 0.0, $802 = 0.0, $803 = 0.0, $804 = 0.0, $805 = 0.0, $806 = 0.0, $807 = 0.0, $808 = 0.0, $809 = 0.0, $81 = 0, $810 = 0.0, $811 = 0.0, $812 = 0.0, $813 = 0.0, $814 = 0.0, $815 = 0.0, $816 = 0.0, $817 = 0.0, $818 = 0, $819 = 0.0;
 var $82 = 0, $820 = 0.0, $821 = 0.0, $822 = 0.0, $823 = 0.0, $824 = 0, $825 = 0.0, $826 = 0, $827 = 0.0, $828 = 0, $829 = 0.0, $83 = 0, $830 = 0, $831 = 0.0, $832 = 0, $833 = 0.0, $834 = 0, $835 = 0.0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0.0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0.0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0.0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0.0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0.0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0.0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0.0, $927 = 0.0;
 var $928 = 0.0, $929 = 0.0, $93 = 0, $930 = 0.0, $931 = 0.0, $932 = 0.0, $933 = 0.0, $934 = 0.0, $935 = 0.0, $936 = 0.0, $937 = 0, $938 = 0.0, $939 = 0.0, $94 = 0, $940 = 0.0, $941 = 0, $942 = 0.0, $943 = 0, $944 = 0.0, $945 = 0;
 var $946 = 0.0, $947 = 0, $948 = 0.0, $949 = 0, $95 = 0, $950 = 0.0, $951 = 0.0, $952 = 0, $953 = 0, $954 = 0.0, $955 = 0.0, $956 = 0.0, $957 = 0.0, $958 = 0.0, $959 = 0.0, $96 = 0, $960 = 0.0, $961 = 0.0, $962 = 0.0, $963 = 0;
 var $964 = 0.0, $965 = 0, $966 = 0.0, $967 = 0.0, $968 = 0, $969 = 0.0, $97 = 0, $970 = 0, $971 = 0.0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
 var $982 = 0.0, $983 = 0, $984 = 0.0, $985 = 0.0, $986 = 0.0, $987 = 0, $988 = 0.0, $989 = 0, $99 = 0, $990 = 0.0, $991 = 0.0, $992 = 0.0, $993 = 0, $994 = 0, $995 = 0, $996 = 0.0, $997 = 0, $998 = 0.0, $999 = 0, $cj3array = 0;
 var $cj3array165 = 0, $cj3array176 = 0, $cj3array187 = 0, $cj3array197 = 0, $cj3array23 = 0, $cj3array5 = 0, $cj4array = 0, $cj5array = 0, $cj5array102 = 0, $cj5array113 = 0, $cj5array12 = 0, $cj5array124 = 0, $cj5array134 = 0, $cj5array144 = 0, $cj5array154 = 0, $cj5array36 = 0, $cj5array47 = 0, $cj5array58 = 0, $cj5array69 = 0, $cj5array80 = 0;
 var $cj5array91 = 0, $iij3$0281 = 0, $iij39$0273 = 0, $iij4$0203 = 0, $ij3$0288 = 0, $ij38$0280 = 0, $ij4$0289 = 0, $j3array = 0, $j3array164 = 0, $j3array175 = 0, $j3array186 = 0, $j3array196 = 0, $j3array22 = 0, $j3array4 = 0, $j3valid = 0, $j3valid7 = 0, $j4array = 0, $j4valid = 0, $j5array = 0, $j5array101 = 0;
 var $j5array11 = 0, $j5array112 = 0, $j5array123 = 0, $j5array133 = 0, $j5array143 = 0, $j5array153 = 0, $j5array35 = 0, $j5array46 = 0, $j5array57 = 0, $j5array68 = 0, $j5array79 = 0, $j5array90 = 0, $or$cond = 0, $sj3array = 0, $sj3array166 = 0, $sj3array177 = 0, $sj3array188 = 0, $sj3array198 = 0, $sj3array24 = 0, $sj3array6 = 0;
 var $sj4array = 0, $sj5array = 0, $sj5array103 = 0, $sj5array114 = 0, $sj5array125 = 0, $sj5array13 = 0, $sj5array135 = 0, $sj5array145 = 0, $sj5array155 = 0, $sj5array37 = 0, $sj5array48 = 0, $sj5array59 = 0, $sj5array70 = 0, $sj5array81 = 0, $sj5array92 = 0, $vfree = 0, $vfree110 = 0, $vfree121 = 0, $vfree132 = 0, $vfree142 = 0;
 var $vfree152 = 0, $vfree173 = 0, $vfree184 = 0, $vfree195 = 0, $vfree20 = 0, $vfree205 = 0, $vfree44 = 0, $vfree55 = 0, $vfree66 = 0, $vfree77 = 0, $vfree88 = 0, $vfree99 = 0, $vinfos = 0, $vinfos109 = 0, $vinfos120 = 0, $vinfos131 = 0, $vinfos141 = 0, $vinfos151 = 0, $vinfos172 = 0, $vinfos183 = 0;
 var $vinfos19 = 0, $vinfos194 = 0, $vinfos204 = 0, $vinfos43 = 0, $vinfos54 = 0, $vinfos65 = 0, $vinfos76 = 0, $vinfos87 = 0, $vinfos98 = 0, $x129 = 0, $x139 = 0, $x148 = 0, $x149 = 0, $x263 = 0, $x264 = 0, $x269 = 0, $x270 = 0, $x271 = 0, $x283 = 0, $x284 = 0;
 var $x295 = 0, $x296 = 0, $x307 = 0, $x308 = 0, $x338 = 0, $x339 = 0, $x348 = 0, $x349 = 0, $x358 = 0, $x359 = 0, $x372 = 0, $x373 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1392|0;
 $j4array = sp + 952|0;
 $cj4array = sp + 936|0;
 $sj4array = sp + 920|0;
 $j4valid = sp + 1380|0;
 $j3array = sp + 904|0;
 $cj3array = sp + 888|0;
 $sj3array = sp + 872|0;
 $j3valid = sp + 1378|0;
 $x129 = sp + 856|0;
 $j5array = sp + 848|0;
 $cj5array = sp + 840|0;
 $sj5array = sp + 832|0;
 $vinfos = sp + 1364|0;
 $vfree = sp + 1352|0;
 $j3array4 = sp + 816|0;
 $cj3array5 = sp + 800|0;
 $sj3array6 = sp + 784|0;
 $j3valid7 = sp + 1376|0;
 $x139 = sp + 768|0;
 $j5array11 = sp + 760|0;
 $cj5array12 = sp + 752|0;
 $sj5array13 = sp + 744|0;
 $vinfos19 = sp + 1340|0;
 $vfree20 = sp + 1328|0;
 $j3array22 = sp + 736|0;
 $cj3array23 = sp + 728|0;
 $sj3array24 = sp + 720|0;
 $x148 = sp + 704|0;
 $x149 = sp + 688|0;
 $j5array35 = sp + 680|0;
 $cj5array36 = sp + 672|0;
 $sj5array37 = sp + 664|0;
 $vinfos43 = sp + 1316|0;
 $vfree44 = sp + 1304|0;
 $j5array46 = sp + 656|0;
 $cj5array47 = sp + 648|0;
 $sj5array48 = sp + 640|0;
 $vinfos54 = sp + 1292|0;
 $vfree55 = sp + 1280|0;
 $j5array57 = sp + 632|0;
 $cj5array58 = sp + 624|0;
 $sj5array59 = sp + 616|0;
 $vinfos65 = sp + 1268|0;
 $vfree66 = sp + 1256|0;
 $j5array68 = sp + 608|0;
 $cj5array69 = sp + 600|0;
 $sj5array70 = sp + 592|0;
 $vinfos76 = sp + 1244|0;
 $vfree77 = sp + 1232|0;
 $j5array79 = sp + 584|0;
 $cj5array80 = sp + 576|0;
 $sj5array81 = sp + 568|0;
 $vinfos87 = sp + 1220|0;
 $vfree88 = sp + 1208|0;
 $j5array90 = sp + 560|0;
 $cj5array91 = sp + 552|0;
 $sj5array92 = sp + 544|0;
 $vinfos98 = sp + 1196|0;
 $vfree99 = sp + 1184|0;
 $j5array101 = sp + 536|0;
 $cj5array102 = sp + 528|0;
 $sj5array103 = sp + 520|0;
 $vinfos109 = sp + 1172|0;
 $vfree110 = sp + 1160|0;
 $j5array112 = sp + 512|0;
 $cj5array113 = sp + 504|0;
 $sj5array114 = sp + 496|0;
 $x263 = sp + 480|0;
 $x264 = sp + 464|0;
 $vinfos120 = sp + 1148|0;
 $vfree121 = sp + 1136|0;
 $j5array123 = sp + 456|0;
 $cj5array124 = sp + 448|0;
 $sj5array125 = sp + 440|0;
 $x269 = sp + 424|0;
 $x270 = sp + 408|0;
 $x271 = sp + 392|0;
 $vinfos131 = sp + 1124|0;
 $vfree132 = sp + 1112|0;
 $j5array133 = sp + 384|0;
 $cj5array134 = sp + 376|0;
 $sj5array135 = sp + 368|0;
 $x283 = sp + 352|0;
 $x284 = sp + 336|0;
 $vinfos141 = sp + 1100|0;
 $vfree142 = sp + 1088|0;
 $j5array143 = sp + 328|0;
 $cj5array144 = sp + 320|0;
 $sj5array145 = sp + 312|0;
 $x295 = sp + 296|0;
 $x296 = sp + 280|0;
 $vinfos151 = sp + 1076|0;
 $vfree152 = sp + 1064|0;
 $j5array153 = sp + 272|0;
 $cj5array154 = sp + 264|0;
 $sj5array155 = sp + 256|0;
 $x307 = sp + 240|0;
 $x308 = sp + 224|0;
 $j3array164 = sp + 216|0;
 $cj3array165 = sp + 208|0;
 $sj3array166 = sp + 200|0;
 $x338 = sp + 184|0;
 $x339 = sp + 168|0;
 $vinfos172 = sp + 1052|0;
 $vfree173 = sp + 1040|0;
 $j3array175 = sp + 160|0;
 $cj3array176 = sp + 152|0;
 $sj3array177 = sp + 144|0;
 $x348 = sp + 128|0;
 $x349 = sp + 112|0;
 $vinfos183 = sp + 1028|0;
 $vfree184 = sp + 1016|0;
 $j3array186 = sp + 104|0;
 $cj3array187 = sp + 96|0;
 $sj3array188 = sp + 88|0;
 $x358 = sp + 72|0;
 $x359 = sp + 56|0;
 $vinfos194 = sp + 1004|0;
 $vfree195 = sp + 992|0;
 $j3array196 = sp + 48|0;
 $cj3array197 = sp + 40|0;
 $sj3array198 = sp + 32|0;
 $x372 = sp + 16|0;
 $x373 = sp;
 $vinfos204 = sp + 980|0;
 $vfree205 = sp + 968|0;
 $0 = (($this) + 8|0);
 $1 = (($this) + 344|0);
 $2 = (($this) + 16|0);
 $3 = (($this) + 56|0);
 $4 = (($this) + 96|0);
 $5 = (($this) + 320|0);
 $6 = (($this) + 248|0);
 $7 = (($this) + 48|0);
 $8 = (($this) + 88|0);
 $9 = (($this) + 272|0);
 $10 = (($this) + 368|0);
 $11 = (($this) + 296|0);
 $12 = (($this) + 240|0);
 $13 = (($this) + 264|0);
 $14 = (($this) + 288|0);
 $15 = (($this) + 392|0);
 $16 = (($this) + 312|0);
 $17 = (($this) + 416|0);
 $18 = (($this) + 336|0);
 $19 = (($this) + 440|0);
 $20 = (($this) + 360|0);
 $21 = (($this) + 384|0);
 $22 = (($this) + 408|0);
 $23 = (($this) + 432|0);
 $24 = (($this) + 550|0);
 $25 = (($this) + 548|0);
 $26 = (($this) + 549|0);
 $27 = (($this) + 160|0);
 $28 = (($this) + 168|0);
 $29 = (($this) + 176|0);
 $30 = (($this) + 547|0);
 $31 = (($x129) + 8|0);
 $32 = (($j3array) + 8|0);
 $33 = (($sj3array) + 8|0);
 $34 = (($cj3array) + 8|0);
 $35 = (($j3valid) + 1|0);
 $36 = (($this) + 545|0);
 $37 = (($this) + 546|0);
 $38 = (($this) + 120|0);
 $39 = (($this) + 128|0);
 $40 = (($this) + 136|0);
 $41 = (($this) + 553|0);
 $42 = (($this) + 551|0);
 $43 = (($this) + 552|0);
 $44 = (($this) + 200|0);
 $45 = (($this) + 208|0);
 $46 = (($this) + 216|0);
 $47 = (($this) + 536|0);
 $48 = (($this) + 537|0);
 $49 = (($this) + 538|0);
 $50 = (($this) + 40|0);
 $51 = (($this) + 539|0);
 $52 = (($this) + 540|0);
 $53 = (($this) + 541|0);
 $54 = (($this) + 80|0);
 $55 = (($this) + 542|0);
 $56 = (($this) + 543|0);
 $57 = (($this) + 544|0);
 $58 = (($this) + 547|0);
 $59 = (($x139) + 8|0);
 $60 = (($j3array4) + 8|0);
 $61 = (($sj3array6) + 8|0);
 $62 = (($cj3array5) + 8|0);
 $63 = (($j3valid7) + 1|0);
 $64 = (($this) + 545|0);
 $65 = (($this) + 546|0);
 $66 = (($this) + 120|0);
 $67 = (($this) + 128|0);
 $68 = (($this) + 136|0);
 $69 = (($this) + 553|0);
 $70 = (($this) + 551|0);
 $71 = (($this) + 552|0);
 $72 = (($this) + 200|0);
 $73 = (($this) + 208|0);
 $74 = (($this) + 216|0);
 $75 = (($this) + 536|0);
 $76 = (($this) + 537|0);
 $77 = (($this) + 538|0);
 $78 = (($this) + 40|0);
 $79 = (($this) + 539|0);
 $80 = (($this) + 540|0);
 $81 = (($this) + 541|0);
 $82 = (($this) + 80|0);
 $83 = (($this) + 542|0);
 $84 = (($this) + 543|0);
 $85 = (($this) + 544|0);
 $86 = (($this) + 547|0);
 $87 = (($x148) + 8|0);
 $88 = (($x149) + 8|0);
 $89 = (($this) + 545|0);
 $90 = (($this) + 546|0);
 $91 = (($this) + 120|0);
 $92 = (($this) + 128|0);
 $93 = (($this) + 136|0);
 $94 = (($this) + 553|0);
 $95 = (($this) + 551|0);
 $96 = (($this) + 552|0);
 $97 = (($this) + 200|0);
 $98 = (($this) + 208|0);
 $99 = (($this) + 216|0);
 $100 = (($this) + 536|0);
 $101 = (($this) + 537|0);
 $102 = (($this) + 538|0);
 $103 = (($this) + 40|0);
 $104 = (($this) + 539|0);
 $105 = (($this) + 540|0);
 $106 = (($this) + 541|0);
 $107 = (($this) + 80|0);
 $108 = (($this) + 542|0);
 $109 = (($this) + 543|0);
 $110 = (($this) + 544|0);
 $111 = (($this) + 553|0);
 $112 = (($this) + 551|0);
 $113 = (($this) + 552|0);
 $114 = (($this) + 200|0);
 $115 = (($this) + 208|0);
 $116 = (($this) + 216|0);
 $117 = (($this) + 536|0);
 $118 = (($this) + 537|0);
 $119 = (($this) + 538|0);
 $120 = (($this) + 40|0);
 $121 = (($this) + 539|0);
 $122 = (($this) + 540|0);
 $123 = (($this) + 541|0);
 $124 = (($this) + 80|0);
 $125 = (($this) + 542|0);
 $126 = (($this) + 543|0);
 $127 = (($this) + 544|0);
 $128 = (($this) + 553|0);
 $129 = (($this) + 551|0);
 $130 = (($this) + 552|0);
 $131 = (($this) + 200|0);
 $132 = (($this) + 208|0);
 $133 = (($this) + 216|0);
 $134 = (($this) + 536|0);
 $135 = (($this) + 537|0);
 $136 = (($this) + 538|0);
 $137 = (($this) + 40|0);
 $138 = (($this) + 539|0);
 $139 = (($this) + 540|0);
 $140 = (($this) + 541|0);
 $141 = (($this) + 80|0);
 $142 = (($this) + 542|0);
 $143 = (($this) + 543|0);
 $144 = (($this) + 544|0);
 $145 = (($this) + 553|0);
 $146 = (($this) + 551|0);
 $147 = (($this) + 552|0);
 $148 = (($this) + 200|0);
 $149 = (($this) + 208|0);
 $150 = (($this) + 216|0);
 $151 = (($this) + 536|0);
 $152 = (($this) + 537|0);
 $153 = (($this) + 538|0);
 $154 = (($this) + 40|0);
 $155 = (($this) + 539|0);
 $156 = (($this) + 540|0);
 $157 = (($this) + 541|0);
 $158 = (($this) + 80|0);
 $159 = (($this) + 542|0);
 $160 = (($this) + 543|0);
 $161 = (($this) + 544|0);
 $162 = (($this) + 553|0);
 $163 = (($this) + 551|0);
 $164 = (($this) + 552|0);
 $165 = (($this) + 200|0);
 $166 = (($this) + 208|0);
 $167 = (($this) + 216|0);
 $168 = (($this) + 536|0);
 $169 = (($this) + 537|0);
 $170 = (($this) + 538|0);
 $171 = (($this) + 40|0);
 $172 = (($this) + 539|0);
 $173 = (($this) + 540|0);
 $174 = (($this) + 541|0);
 $175 = (($this) + 80|0);
 $176 = (($this) + 542|0);
 $177 = (($this) + 543|0);
 $178 = (($this) + 544|0);
 $179 = (($this) + 553|0);
 $180 = (($this) + 551|0);
 $181 = (($this) + 552|0);
 $182 = (($this) + 200|0);
 $183 = (($this) + 208|0);
 $184 = (($this) + 216|0);
 $185 = (($this) + 536|0);
 $186 = (($this) + 537|0);
 $187 = (($this) + 538|0);
 $188 = (($this) + 40|0);
 $189 = (($this) + 539|0);
 $190 = (($this) + 540|0);
 $191 = (($this) + 541|0);
 $192 = (($this) + 80|0);
 $193 = (($this) + 542|0);
 $194 = (($this) + 543|0);
 $195 = (($this) + 544|0);
 $196 = (($this) + 553|0);
 $197 = (($this) + 551|0);
 $198 = (($this) + 552|0);
 $199 = (($this) + 200|0);
 $200 = (($this) + 208|0);
 $201 = (($this) + 216|0);
 $202 = (($this) + 536|0);
 $203 = (($this) + 537|0);
 $204 = (($this) + 538|0);
 $205 = (($this) + 40|0);
 $206 = (($this) + 539|0);
 $207 = (($this) + 540|0);
 $208 = (($this) + 541|0);
 $209 = (($this) + 80|0);
 $210 = (($this) + 542|0);
 $211 = (($this) + 543|0);
 $212 = (($this) + 544|0);
 $213 = (($this) + 553|0);
 $214 = (($x263) + 8|0);
 $215 = (($x264) + 8|0);
 $216 = (($this) + 551|0);
 $217 = (($this) + 552|0);
 $218 = (($this) + 200|0);
 $219 = (($this) + 208|0);
 $220 = (($this) + 216|0);
 $221 = (($this) + 536|0);
 $222 = (($this) + 537|0);
 $223 = (($this) + 538|0);
 $224 = (($this) + 40|0);
 $225 = (($this) + 539|0);
 $226 = (($this) + 540|0);
 $227 = (($this) + 541|0);
 $228 = (($this) + 80|0);
 $229 = (($this) + 542|0);
 $230 = (($this) + 543|0);
 $231 = (($this) + 544|0);
 $232 = (($this) + 553|0);
 $233 = (($x269) + 8|0);
 $234 = (($x270) + 8|0);
 $235 = (($x271) + 8|0);
 $236 = (($this) + 551|0);
 $237 = (($this) + 552|0);
 $238 = (($this) + 200|0);
 $239 = (($this) + 208|0);
 $240 = (($this) + 216|0);
 $241 = (($this) + 536|0);
 $242 = (($this) + 537|0);
 $243 = (($this) + 538|0);
 $244 = (($this) + 40|0);
 $245 = (($this) + 539|0);
 $246 = (($this) + 540|0);
 $247 = (($this) + 541|0);
 $248 = (($this) + 80|0);
 $249 = (($this) + 542|0);
 $250 = (($this) + 543|0);
 $251 = (($this) + 544|0);
 $252 = (($this) + 553|0);
 $253 = (($x283) + 8|0);
 $254 = (($x284) + 8|0);
 $255 = (($this) + 551|0);
 $256 = (($this) + 552|0);
 $257 = (($this) + 200|0);
 $258 = (($this) + 208|0);
 $259 = (($this) + 216|0);
 $260 = (($this) + 536|0);
 $261 = (($this) + 537|0);
 $262 = (($this) + 538|0);
 $263 = (($this) + 40|0);
 $264 = (($this) + 539|0);
 $265 = (($this) + 540|0);
 $266 = (($this) + 541|0);
 $267 = (($this) + 80|0);
 $268 = (($this) + 542|0);
 $269 = (($this) + 543|0);
 $270 = (($this) + 544|0);
 $271 = (($this) + 553|0);
 $272 = (($x295) + 8|0);
 $273 = (($x296) + 8|0);
 $274 = (($this) + 551|0);
 $275 = (($this) + 552|0);
 $276 = (($this) + 200|0);
 $277 = (($this) + 208|0);
 $278 = (($this) + 216|0);
 $279 = (($this) + 536|0);
 $280 = (($this) + 537|0);
 $281 = (($this) + 538|0);
 $282 = (($this) + 40|0);
 $283 = (($this) + 539|0);
 $284 = (($this) + 540|0);
 $285 = (($this) + 541|0);
 $286 = (($this) + 80|0);
 $287 = (($this) + 542|0);
 $288 = (($this) + 543|0);
 $289 = (($this) + 544|0);
 $290 = (($this) + 553|0);
 $291 = (($x307) + 8|0);
 $292 = (($x308) + 8|0);
 $293 = (($this) + 551|0);
 $294 = (($this) + 552|0);
 $295 = (($this) + 200|0);
 $296 = (($this) + 208|0);
 $297 = (($this) + 216|0);
 $298 = (($this) + 547|0);
 $299 = (($x338) + 8|0);
 $300 = (($x339) + 8|0);
 $301 = (($this) + 545|0);
 $302 = (($this) + 546|0);
 $303 = (($this) + 120|0);
 $304 = (($this) + 128|0);
 $305 = (($this) + 136|0);
 $306 = (($this) + 536|0);
 $307 = (($this) + 537|0);
 $308 = (($this) + 538|0);
 $309 = (($this) + 40|0);
 $310 = (($this) + 539|0);
 $311 = (($this) + 540|0);
 $312 = (($this) + 541|0);
 $313 = (($this) + 80|0);
 $314 = (($this) + 542|0);
 $315 = (($this) + 543|0);
 $316 = (($this) + 544|0);
 $317 = (($this) + 547|0);
 $318 = (($x348) + 8|0);
 $319 = (($x349) + 8|0);
 $320 = (($this) + 545|0);
 $321 = (($this) + 546|0);
 $322 = (($this) + 120|0);
 $323 = (($this) + 128|0);
 $324 = (($this) + 136|0);
 $325 = (($this) + 536|0);
 $326 = (($this) + 537|0);
 $327 = (($this) + 538|0);
 $328 = (($this) + 40|0);
 $329 = (($this) + 539|0);
 $330 = (($this) + 540|0);
 $331 = (($this) + 541|0);
 $332 = (($this) + 80|0);
 $333 = (($this) + 542|0);
 $334 = (($this) + 543|0);
 $335 = (($this) + 544|0);
 $336 = (($this) + 547|0);
 $337 = (($x358) + 8|0);
 $338 = (($x359) + 8|0);
 $339 = (($this) + 545|0);
 $340 = (($this) + 546|0);
 $341 = (($this) + 120|0);
 $342 = (($this) + 128|0);
 $343 = (($this) + 136|0);
 $344 = (($this) + 536|0);
 $345 = (($this) + 537|0);
 $346 = (($this) + 538|0);
 $347 = (($this) + 40|0);
 $348 = (($this) + 539|0);
 $349 = (($this) + 540|0);
 $350 = (($this) + 541|0);
 $351 = (($this) + 80|0);
 $352 = (($this) + 542|0);
 $353 = (($this) + 543|0);
 $354 = (($this) + 544|0);
 $355 = (($this) + 547|0);
 $356 = (($x372) + 8|0);
 $357 = (($x373) + 8|0);
 $358 = (($this) + 545|0);
 $359 = (($this) + 546|0);
 $360 = (($this) + 120|0);
 $361 = (($this) + 128|0);
 $362 = (($this) + 136|0);
 $363 = (($this) + 536|0);
 $364 = (($this) + 537|0);
 $365 = (($this) + 538|0);
 $366 = (($this) + 40|0);
 $367 = (($this) + 539|0);
 $368 = (($this) + 540|0);
 $369 = (($this) + 541|0);
 $370 = (($this) + 80|0);
 $371 = (($this) + 542|0);
 $372 = (($this) + 543|0);
 $373 = (($this) + 544|0);
 $374 = +HEAPF64[$0>>3];
 $375 = +HEAPF64[$1>>3];
 $376 = +HEAPF64[$2>>3];
 $377 = $375 * $376;
 $378 = +HEAPF64[$3>>3];
 $379 = +HEAPF64[$4>>3];
 $380 = $378 * $379;
 $381 = +HEAPF64[$5>>3];
 $382 = $376 * $381;
 $383 = +HEAPF64[$6>>3];
 $384 = $374 * $383;
 $385 = +HEAPF64[$7>>3];
 $386 = +HEAPF64[$8>>3];
 $387 = $385 * $386;
 $388 = +HEAPF64[$9>>3];
 $389 = $374 * $388;
 $390 = +HEAPF64[$10>>3];
 $391 = $376 * $390;
 $392 = +HEAPF64[$11>>3];
 $393 = $374 * $392;
 $394 = $387 - $380;
 $395 = $380 - $387;
 $396 = $378 * $386;
 $397 = $379 * $385;
 $398 = -$397;
 $399 = $398 - $396;
 $400 = $376 * $383;
 $401 = $374 * $381;
 $402 = $400 - $401;
 HEAPF64[$12>>3] = $402;
 $403 = +HEAPF64[$9>>3];
 $404 = +HEAPF64[$2>>3];
 $405 = $403 * $404;
 $406 = +HEAPF64[$1>>3];
 $407 = $374 * $406;
 $408 = $405 - $407;
 HEAPF64[$13>>3] = $408;
 $409 = +HEAPF64[$10>>3];
 $410 = $374 * $409;
 $411 = +HEAPF64[$11>>3];
 $412 = +HEAPF64[$2>>3];
 $413 = $411 * $412;
 $414 = $413 - $410;
 HEAPF64[$14>>3] = $414;
 $415 = $382 * $399;
 $416 = +HEAPF64[$15>>3];
 $417 = $394 * $416;
 $418 = $415 + $417;
 $419 = $384 * $399;
 $420 = $419 + $418;
 HEAPF64[$16>>3] = $420;
 $421 = +HEAPF64[$17>>3];
 $422 = $394 * $421;
 $423 = $377 * $399;
 $424 = $423 + $422;
 $425 = $389 * $399;
 $426 = $425 + $424;
 HEAPF64[$18>>3] = $426;
 $427 = $399 * $391;
 $428 = +HEAPF64[$19>>3];
 $429 = $394 * $428;
 $430 = $427 + $429;
 $431 = $399 * $393;
 $432 = $431 + $430;
 HEAPF64[$20>>3] = $432;
 $433 = $382 * $395;
 $434 = +HEAPF64[$15>>3];
 $435 = $399 * $434;
 $436 = $433 + $435;
 $437 = $384 * $395;
 $438 = $437 + $436;
 HEAPF64[$21>>3] = $438;
 $439 = +HEAPF64[$17>>3];
 $440 = $399 * $439;
 $441 = $377 * $395;
 $442 = $441 + $440;
 $443 = $389 * $395;
 $444 = $443 + $442;
 HEAPF64[$22>>3] = $444;
 $445 = $395 * $391;
 $446 = +HEAPF64[$19>>3];
 $447 = $399 * $446;
 $448 = $445 + $447;
 $449 = $395 * $393;
 $450 = $449 + $448;
 HEAPF64[$23>>3] = $450;
 HEAP16[$j4valid>>1] = 0;
 HEAP8[$24>>0] = 2;
 $451 = +HEAPF64[$23>>3];
 HEAPF64[$cj4array>>3] = $451;
 $452 = !($451 >= -1.0000020000000001);
 $453 = !($451 <= 1.0000020000000001);
 $or$cond = $452 | $453;
 if ($or$cond) {
  $466 = (__Z13__DOUBLE_BITSd($451)|0);
  $467 = tempRet0;
  $468 = $467 & 2147483647;
  $469 = ($468>>>0)>(2146435072);
  $470 = ($466>>>0)>(0);
  $471 = ($468|0)==(2146435072);
  $472 = $471 & $470;
  $473 = $469 | $472;
  if ($473) {
   HEAP8[$j4valid>>0] = 1;
   HEAPF64[$cj4array>>3] = 1.0;
   HEAPF64[$sj4array>>3] = 0.0;
   HEAPF64[$j4array>>3] = 0.0;
   $ij4$0289 = 0;
  } else {
   $ij4$0289 = 0;
  }
 } else {
  $454 = (($sj4array) + 8|0);
  $455 = (($j4array) + 8|0);
  $456 = (($cj4array) + 8|0);
  $457 = (($j4valid) + 1|0);
  HEAP8[$457>>0] = 1;
  HEAP8[$j4valid>>0] = 1;
  $458 = +HEAPF64[$cj4array>>3];
  $459 = (+__Z6IKacosd($458));
  HEAPF64[$j4array>>3] = $459;
  $460 = (+__Z5IKsind($459));
  HEAPF64[$sj4array>>3] = $460;
  $461 = +HEAPF64[$cj4array>>3];
  HEAPF64[$456>>3] = $461;
  $462 = +HEAPF64[$j4array>>3];
  $463 = -$462;
  HEAPF64[$455>>3] = $463;
  $464 = +HEAPF64[$sj4array>>3];
  $465 = -$464;
  HEAPF64[$454>>3] = $465;
  $ij4$0289 = 0;
 }
 while(1) {
  $474 = (($j4valid) + ($ij4$0289)|0);
  $475 = HEAP8[$474>>0]|0;
  $476 = ($475<<24>>24)==(0);
  L7: do {
   if (!($476)) {
    $477 = $ij4$0289&255;
    HEAP8[$25>>0] = $477;
    HEAP8[$26>>0] = -1;
    $iij4$0203 = (($ij4$0289) + 1)|0;
    $478 = ($iij4$0203|0)<(2);
    if ($478) {
     $479 = (($sj4array) + ($ij4$0289<<3)|0);
     $480 = (($j4valid) + ($iij4$0203)|0);
     $481 = HEAP8[$480>>0]|0;
     $482 = ($481<<24>>24)==(0);
     if (!($482)) {
      $483 = (($cj4array) + ($ij4$0289<<3)|0);
      $484 = +HEAPF64[$483>>3];
      $485 = (($cj4array) + ($iij4$0203<<3)|0);
      $486 = +HEAPF64[$485>>3];
      $487 = $484 - $486;
      $488 = (+__Z5IKabsd($487));
      $489 = $488 < 9.9999999999999995E-7;
      if ($489) {
       $490 = +HEAPF64[$479>>3];
       $491 = (($sj4array) + ($iij4$0203<<3)|0);
       $492 = +HEAPF64[$491>>3];
       $493 = $490 - $492;
       $494 = (+__Z5IKabsd($493));
       $495 = $494 < 9.9999999999999995E-7;
       if ($495) {
        HEAP8[$480>>0] = 0;
        $496 = $iij4$0203&255;
        HEAP8[$26>>0] = $496;
       }
      }
     }
    }
    $497 = (($j4array) + ($ij4$0289<<3)|0);
    $498 = +HEAPF64[$497>>3];
    HEAPF64[$27>>3] = $498;
    $499 = (($cj4array) + ($ij4$0289<<3)|0);
    $500 = +HEAPF64[$499>>3];
    HEAPF64[$28>>3] = $500;
    $501 = (($sj4array) + ($ij4$0289<<3)|0);
    $502 = +HEAPF64[$501>>3];
    HEAPF64[$29>>3] = $502;
    $503 = +HEAPF64[$0>>3];
    $504 = +HEAPF64[$1>>3];
    $505 = +HEAPF64[$2>>3];
    $506 = $504 * $505;
    $507 = +HEAPF64[$3>>3];
    $508 = +HEAPF64[$4>>3];
    $509 = $507 * $508;
    $510 = +HEAPF64[$5>>3];
    $511 = $505 * $510;
    $512 = +HEAPF64[$6>>3];
    $513 = $503 * $512;
    $514 = +HEAPF64[$7>>3];
    $515 = +HEAPF64[$8>>3];
    $516 = $514 * $515;
    $517 = +HEAPF64[$9>>3];
    $518 = $503 * $517;
    $519 = +HEAPF64[$10>>3];
    $520 = $505 * $519;
    $521 = +HEAPF64[$11>>3];
    $522 = $503 * $521;
    $523 = $516 - $509;
    $524 = $509 - $516;
    $525 = $505 * $512;
    $526 = $503 * $510;
    $527 = $525 - $526;
    HEAPF64[$12>>3] = $527;
    $528 = +HEAPF64[$1>>3];
    $529 = $503 * $528;
    $530 = +HEAPF64[$9>>3];
    $531 = +HEAPF64[$2>>3];
    $532 = $530 * $531;
    $533 = $532 - $529;
    HEAPF64[$13>>3] = $533;
    $534 = +HEAPF64[$10>>3];
    $535 = $503 * $534;
    $536 = +HEAPF64[$11>>3];
    $537 = +HEAPF64[$2>>3];
    $538 = $536 * $537;
    $539 = $538 - $535;
    HEAPF64[$14>>3] = $539;
    $540 = $399 * $511;
    $541 = +HEAPF64[$15>>3];
    $542 = $523 * $541;
    $543 = $540 + $542;
    $544 = $399 * $513;
    $545 = $544 + $543;
    HEAPF64[$16>>3] = $545;
    $546 = $399 * $518;
    $547 = +HEAPF64[$17>>3];
    $548 = $523 * $547;
    $549 = $546 + $548;
    $550 = $399 * $506;
    $551 = $550 + $549;
    HEAPF64[$18>>3] = $551;
    $552 = +HEAPF64[$19>>3];
    $553 = $523 * $552;
    $554 = $399 * $522;
    $555 = $554 + $553;
    $556 = $399 * $520;
    $557 = $556 + $555;
    HEAPF64[$20>>3] = $557;
    $558 = $511 * $524;
    $559 = +HEAPF64[$15>>3];
    $560 = $399 * $559;
    $561 = $558 + $560;
    $562 = $513 * $524;
    $563 = $562 + $561;
    HEAPF64[$21>>3] = $563;
    $564 = $518 * $524;
    $565 = +HEAPF64[$17>>3];
    $566 = $399 * $565;
    $567 = $564 + $566;
    $568 = $506 * $524;
    $569 = $568 + $567;
    HEAPF64[$22>>3] = $569;
    $570 = +HEAPF64[$19>>3];
    $571 = $399 * $570;
    $572 = $524 * $522;
    $573 = $572 + $571;
    $574 = $524 * $520;
    $575 = $574 + $573;
    HEAPF64[$23>>3] = $575;
    $576 = +HEAPF64[$29>>3];
    $577 = (+__Z5IKabsd($576));
    $578 = $577 < 9.9999999999999995E-7;
    if (!($578)) {
     $579 = (+__Z6IKsignd($576));
     $580 = (+__Z5IKabsd($579));
     $581 = $580 < 9.9999999999999995E-7;
     if (!($581)) {
      HEAP8[$290>>0] = 1;
      $3906 = +HEAPF64[$29>>3];
      $3907 = (+__Z6IKsignd($3906));
      __Z21IKPowWithIntegerCheckIdE10CheckValueIT_ES1_i($x307,$3907,-1);
      $3908 = HEAP8[$291>>0]|0;
      $3909 = ($3908<<24>>24)==(0);
      if ($3909) {
       break;
      }
      $3910 = +HEAPF64[$21>>3];
      $3911 = +HEAPF64[$22>>3];
      __Z16IKatan2WithCheckIdE10CheckValueIT_ES1_S1_S1_($x308,$3910,$3911,1.9999999999999999E-6);
      $3912 = HEAP8[$292>>0]|0;
      $3913 = ($3912<<24>>24)==(0);
      if ($3913) {
       break;
      }
      $3914 = +HEAPF64[$x307>>3];
      $3915 = $3914 * 1.5707963267949001;
      $3916 = $3915 + -1.5707963267949001;
      $3917 = +HEAPF64[$x308>>3];
      $3918 = $3917 + $3916;
      HEAPF64[$j5array153>>3] = $3918;
      $3919 = (+__Z5IKsind($3918));
      HEAPF64[$sj5array155>>3] = $3919;
      $3920 = (+__Z5IKcosd($3918));
      HEAPF64[$cj5array154>>3] = $3920;
      $3921 = $3918 > 3.14159265358979;
      if ($3921) {
       $3922 = $3918 + -6.2831853071795898;
       HEAPF64[$j5array153>>3] = $3922;
      } else {
       $3923 = $3918 < -3.14159265358979;
       if ($3923) {
        $3924 = $3918 + 6.2831853071795898;
        HEAPF64[$j5array153>>3] = $3924;
       }
      }
      HEAP8[$293>>0] = 0;
      HEAP8[$294>>0] = -1;
      $3925 = +HEAPF64[$j5array153>>3];
      HEAPF64[$295>>3] = $3925;
      $3926 = +HEAPF64[$cj5array154>>3];
      HEAPF64[$296>>3] = $3926;
      $3927 = +HEAPF64[$sj5array155>>3];
      HEAPF64[$297>>3] = $3927;
      $3928 = +HEAPF64[$29>>3];
      $3929 = -$3928;
      $3930 = +HEAPF64[$295>>3];
      $3931 = (+__Z5IKsind($3930));
      $3932 = $3931 * $3929;
      $3933 = +HEAPF64[$21>>3];
      $3934 = $3932 + $3933;
      $3935 = (+__Z5IKabsd($3934));
      $3936 = $3935 > 5.0000000000000004E-6;
      if ($3936) {
       break;
      }
      $3937 = +HEAPF64[$22>>3];
      $3938 = (+__Z5IKcosd($3930));
      $3939 = $3938 * $3929;
      $3940 = $3937 + $3939;
      $3941 = (+__Z5IKabsd($3940));
      $3942 = $3941 > 5.0000000000000004E-6;
      if ($3942) {
       break;
      }
      $3943 = +HEAPF64[$0>>3];
      $3944 = +HEAPF64[$1>>3];
      $3945 = +HEAPF64[$2>>3];
      $3946 = $3944 * $3945;
      $3947 = +HEAPF64[$3>>3];
      $3948 = +HEAPF64[$4>>3];
      $3949 = $3947 * $3948;
      $3950 = +HEAPF64[$5>>3];
      $3951 = $3945 * $3950;
      $3952 = +HEAPF64[$6>>3];
      $3953 = $3943 * $3952;
      $3954 = +HEAPF64[$7>>3];
      $3955 = +HEAPF64[$8>>3];
      $3956 = $3954 * $3955;
      $3957 = +HEAPF64[$9>>3];
      $3958 = $3943 * $3957;
      $3959 = +HEAPF64[$10>>3];
      $3960 = $3945 * $3959;
      $3961 = +HEAPF64[$11>>3];
      $3962 = $3943 * $3961;
      $3963 = $3956 - $3949;
      $3964 = $3949 - $3956;
      $3965 = $3945 * $3952;
      $3966 = $3943 * $3950;
      $3967 = $3965 - $3966;
      HEAPF64[$12>>3] = $3967;
      $3968 = +HEAPF64[$9>>3];
      $3969 = +HEAPF64[$2>>3];
      $3970 = $3968 * $3969;
      $3971 = +HEAPF64[$1>>3];
      $3972 = $3943 * $3971;
      $3973 = $3970 - $3972;
      HEAPF64[$13>>3] = $3973;
      $3974 = +HEAPF64[$10>>3];
      $3975 = $3943 * $3974;
      $3976 = +HEAPF64[$11>>3];
      $3977 = +HEAPF64[$2>>3];
      $3978 = $3976 * $3977;
      $3979 = $3978 - $3975;
      HEAPF64[$14>>3] = $3979;
      $3980 = +HEAPF64[$15>>3];
      $3981 = $3963 * $3980;
      $3982 = $399 * $3951;
      $3983 = $3982 + $3981;
      $3984 = $399 * $3953;
      $3985 = $3984 + $3983;
      HEAPF64[$16>>3] = $3985;
      $3986 = $399 * $3958;
      $3987 = $399 * $3946;
      $3988 = $3987 + $3986;
      $3989 = +HEAPF64[$17>>3];
      $3990 = $3963 * $3989;
      $3991 = $3988 + $3990;
      HEAPF64[$18>>3] = $3991;
      $3992 = $399 * $3962;
      $3993 = $399 * $3960;
      $3994 = $3993 + $3992;
      $3995 = +HEAPF64[$19>>3];
      $3996 = $3963 * $3995;
      $3997 = $3994 + $3996;
      HEAPF64[$20>>3] = $3997;
      $3998 = +HEAPF64[$15>>3];
      $3999 = $399 * $3998;
      $4000 = $3951 * $3964;
      $4001 = $4000 + $3999;
      $4002 = $3953 * $3964;
      $4003 = $4002 + $4001;
      HEAPF64[$21>>3] = $4003;
      $4004 = +HEAPF64[$17>>3];
      $4005 = $399 * $4004;
      $4006 = $3958 * $3964;
      $4007 = $4006 + $4005;
      $4008 = $3946 * $3964;
      $4009 = $4008 + $4007;
      HEAPF64[$22>>3] = $4009;
      $4010 = $3964 * $3962;
      $4011 = +HEAPF64[$19>>3];
      $4012 = $399 * $4011;
      $4013 = $4010 + $4012;
      $4014 = $3964 * $3960;
      $4015 = $4014 + $4013;
      HEAPF64[$23>>3] = $4015;
      $4016 = +HEAPF64[$29>>3];
      $4017 = (+__Z5IKabsd($4016));
      $4018 = $4017 < 9.9999999999999995E-7;
      if (!($4018)) {
       $4019 = (+__Z6IKsignd($4016));
       $4020 = (+__Z5IKabsd($4019));
       $4021 = $4020 < 9.9999999999999995E-7;
       if (!($4021)) {
        HEAP8[$355>>0] = 1;
        $4788 = +HEAPF64[$29>>3];
        $4789 = (+__Z6IKsignd($4788));
        __Z21IKPowWithIntegerCheckIdE10CheckValueIT_ES1_i($x372,$4789,-1);
        $4790 = HEAP8[$356>>0]|0;
        $4791 = ($4790<<24>>24)==(0);
        if ($4791) {
         break;
        }
        $4792 = +HEAPF64[$14>>3];
        $4793 = +HEAPF64[$20>>3];
        $4794 = -$4793;
        __Z16IKatan2WithCheckIdE10CheckValueIT_ES1_S1_S1_($x373,$4792,$4794,1.9999999999999999E-6);
        $4795 = HEAP8[$357>>0]|0;
        $4796 = ($4795<<24>>24)==(0);
        if ($4796) {
         break;
        }
        $4797 = +HEAPF64[$x372>>3];
        $4798 = $4797 * 1.5707963267949001;
        $4799 = $4798 + -1.5707963267949001;
        $4800 = +HEAPF64[$x373>>3];
        $4801 = $4800 + $4799;
        HEAPF64[$j3array196>>3] = $4801;
        $4802 = (+__Z5IKsind($4801));
        HEAPF64[$sj3array198>>3] = $4802;
        $4803 = (+__Z5IKcosd($4801));
        HEAPF64[$cj3array197>>3] = $4803;
        $4804 = $4801 > 3.14159265358979;
        do {
         if ($4804) {
          $4805 = $4801 + -6.2831853071795898;
          HEAPF64[$j3array196>>3] = $4805;
         } else {
          $4806 = $4801 < -3.14159265358979;
          if (!($4806)) {
           break;
          }
          $4807 = $4801 + 6.2831853071795898;
          HEAPF64[$j3array196>>3] = $4807;
         }
        } while(0);
        HEAP8[$358>>0] = 0;
        HEAP8[$359>>0] = -1;
        $4808 = +HEAPF64[$j3array196>>3];
        HEAPF64[$360>>3] = $4808;
        $4809 = +HEAPF64[$cj3array197>>3];
        HEAPF64[$361>>3] = $4809;
        $4810 = +HEAPF64[$sj3array198>>3];
        HEAPF64[$362>>3] = $4810;
        $4811 = +HEAPF64[$360>>3];
        $4812 = (+__Z5IKsind($4811));
        $4813 = (+__Z5IKcosd($4811));
        $4814 = +HEAPF64[$296>>3];
        $4815 = +HEAPF64[$28>>3];
        $4816 = +HEAPF64[$29>>3];
        $4817 = +HEAPF64[$18>>3];
        $4818 = $4813 * $4817;
        $4819 = +HEAPF64[$297>>3];
        $4820 = $4813 * $4819;
        $4821 = $4813 * $4815;
        $4822 = $4813 * $4816;
        $4823 = $4812 * $4815;
        $4824 = $4812 * $4816;
        $4825 = +HEAPF64[$20>>3];
        $4826 = $4822 + $4825;
        $4827 = +HEAPF64[$14>>3];
        $4828 = $4812 * $4825;
        $4829 = $4813 * $4827;
        $4830 = $4828 + $4829;
        $4831 = +HEAPF64[$13>>3];
        $4832 = $4813 * $4831;
        $4833 = $4819 + $4832;
        $4834 = $4812 * $4817;
        $4835 = $4834 + $4833;
        $4836 = $4813 * $4825;
        $4837 = $4816 + $4836;
        $4838 = -$4827;
        $4839 = $4812 * $4838;
        $4840 = $4837 + $4839;
        $4841 = $4814 * $4823;
        $4842 = $4841 + $4820;
        $4843 = $4842 + $4831;
        $4844 = +HEAPF64[$12>>3];
        $4845 = $4813 * $4844;
        $4846 = $4845 - $4814;
        $4847 = +HEAPF64[$16>>3];
        $4848 = $4812 * $4847;
        $4849 = $4846 + $4848;
        $4850 = $4823 * $4819;
        $4851 = $4850 + $4844;
        $4852 = $4813 * $4814;
        $4853 = $4851 - $4852;
        $4854 = $4814 * $4821;
        $4855 = $4812 * $4819;
        $4856 = $4855 - $4854;
        $4857 = $4817 + $4856;
        $4858 = $4812 * $4814;
        $4859 = $4847 - $4858;
        $4860 = -$4815;
        $4861 = $4820 * $4860;
        $4862 = $4861 + $4859;
        $4863 = -$4844;
        $4864 = $4812 * $4863;
        $4865 = $4815 * $4819;
        $4866 = $4864 - $4865;
        $4867 = $4813 * $4847;
        $4868 = $4866 + $4867;
        $4869 = $4814 * $4860;
        $4870 = -$4831;
        $4871 = $4812 * $4870;
        $4872 = $4869 + $4871;
        $4873 = $4818 + $4872;
        $4874 = $4815 * $4836;
        $4875 = $4823 * $4827;
        $4876 = $4875 - $4874;
        $4877 = +HEAPF64[$23>>3];
        $4878 = -$4877;
        $4879 = $4816 * $4878;
        $4880 = $4876 + $4879;
        $4881 = +HEAPF64[$21>>3];
        $4882 = -$4881;
        $4883 = $4815 * $4882;
        $4884 = $4824 * $4863;
        $4885 = $4884 + $4883;
        $4886 = $4822 * $4847;
        $4887 = $4886 + $4885;
        $4888 = +HEAPF64[$22>>3];
        $4889 = -$4888;
        $4890 = $4815 * $4889;
        $4891 = $4816 * $4818;
        $4892 = $4891 + $4890;
        $4893 = $4824 * $4870;
        $4894 = $4893 + $4892;
        $4895 = $4815 * $4878;
        $4896 = $4895 + 1.0;
        $4897 = $4822 * $4825;
        $4898 = $4897 + $4896;
        $4899 = $4824 * $4838;
        $4900 = $4899 + $4898;
        $4901 = $4816 * $4882;
        $4902 = $4819 + $4901;
        $4903 = $4823 * $4844;
        $4904 = $4903 + $4902;
        $4905 = $4815 * $4867;
        $4906 = $4904 - $4905;
        $4907 = $4816 * $4889;
        $4908 = $4814 + $4907;
        $4909 = $4823 * $4831;
        $4910 = $4909 + $4908;
        $4911 = $4818 * $4860;
        $4912 = $4911 + $4910;
        $4913 = (+__Z5IKabsd($4826));
        $4914 = $4913 > 5.0000000000000004E-6;
        if ($4914) {
         break;
        }
        $4915 = $4827 - $4824;
        $4916 = (+__Z5IKabsd($4915));
        $4917 = $4916 > 5.0000000000000004E-6;
        if ($4917) {
         break;
        }
        $4918 = (+__Z5IKabsd($4830));
        $4919 = $4918 > 5.0000000000000004E-6;
        if ($4919) {
         break;
        }
        $4920 = (+__Z5IKabsd($4835));
        $4921 = $4920 > 5.0000000000000004E-6;
        if ($4921) {
         break;
        }
        $4922 = (+__Z5IKabsd($4840));
        $4923 = $4922 > 5.0000000000000004E-6;
        if ($4923) {
         break;
        }
        $4924 = (+__Z5IKabsd($4843));
        $4925 = $4924 > 5.0000000000000004E-6;
        if ($4925) {
         break;
        }
        $4926 = (+__Z5IKabsd($4849));
        $4927 = $4926 > 5.0000000000000004E-6;
        if ($4927) {
         break;
        }
        $4928 = (+__Z5IKabsd($4853));
        $4929 = $4928 > 5.0000000000000004E-6;
        if ($4929) {
         break;
        }
        $4930 = (+__Z5IKabsd($4857));
        $4931 = $4930 > 5.0000000000000004E-6;
        if ($4931) {
         break;
        }
        $4932 = (+__Z5IKabsd($4862));
        $4933 = $4932 > 5.0000000000000004E-6;
        if ($4933) {
         break;
        }
        $4934 = (+__Z5IKabsd($4868));
        $4935 = $4934 > 5.0000000000000004E-6;
        if ($4935) {
         break;
        }
        $4936 = (+__Z5IKabsd($4873));
        $4937 = $4936 > 5.0000000000000004E-6;
        if ($4937) {
         break;
        }
        $4938 = (+__Z5IKabsd($4880));
        $4939 = $4938 > 5.0000000000000004E-6;
        if ($4939) {
         break;
        }
        $4940 = (+__Z5IKabsd($4887));
        $4941 = $4940 > 5.0000000000000004E-6;
        if ($4941) {
         break;
        }
        $4942 = (+__Z5IKabsd($4894));
        $4943 = $4942 > 5.0000000000000004E-6;
        if ($4943) {
         break;
        }
        $4944 = (+__Z5IKabsd($4900));
        $4945 = $4944 > 5.0000000000000004E-6;
        if ($4945) {
         break;
        }
        $4946 = (+__Z5IKabsd($4906));
        $4947 = $4946 > 5.0000000000000004E-6;
        if ($4947) {
         break;
        }
        $4948 = (+__Z5IKabsd($4912));
        $4949 = $4948 > 5.0000000000000004E-6;
        if ($4949) {
         break;
        }
        __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEEC2Ej($vinfos204,6);
        $4950 = HEAP32[$vinfos204>>2]|0;
        $4951 = (($4950) + 17|0);
        HEAP8[$4951>>0] = 1;
        $4952 = +HEAPF64[$this>>3];
        $4953 = HEAP32[$vinfos204>>2]|0;
        $4954 = (($4953) + 8|0);
        HEAPF64[$4954>>3] = $4952;
        $4955 = HEAP8[$363>>0]|0;
        $4956 = HEAP32[$vinfos204>>2]|0;
        $4957 = (($4956) + 19|0);
        HEAP8[$4957>>0] = $4955;
        $4958 = HEAP8[$364>>0]|0;
        $4959 = HEAP32[$vinfos204>>2]|0;
        $4960 = (($4959) + 20|0);
        HEAP8[$4960>>0] = $4958;
        $4961 = HEAP8[$365>>0]|0;
        $4962 = HEAP32[$vinfos204>>2]|0;
        $4963 = (($4962) + 18|0);
        HEAP8[$4963>>0] = $4961;
        $4964 = HEAP32[$vinfos204>>2]|0;
        $4965 = (($4964) + 41|0);
        HEAP8[$4965>>0] = 1;
        $4966 = +HEAPF64[$366>>3];
        $4967 = HEAP32[$vinfos204>>2]|0;
        $4968 = (($4967) + 32|0);
        HEAPF64[$4968>>3] = $4966;
        $4969 = HEAP8[$367>>0]|0;
        $4970 = HEAP32[$vinfos204>>2]|0;
        $4971 = (($4970) + 43|0);
        HEAP8[$4971>>0] = $4969;
        $4972 = HEAP8[$368>>0]|0;
        $4973 = HEAP32[$vinfos204>>2]|0;
        $4974 = (($4973) + 44|0);
        HEAP8[$4974>>0] = $4972;
        $4975 = HEAP8[$369>>0]|0;
        $4976 = HEAP32[$vinfos204>>2]|0;
        $4977 = (($4976) + 42|0);
        HEAP8[$4977>>0] = $4975;
        $4978 = HEAP32[$vinfos204>>2]|0;
        $4979 = (($4978) + 65|0);
        HEAP8[$4979>>0] = 1;
        $4980 = +HEAPF64[$370>>3];
        $4981 = HEAP32[$vinfos204>>2]|0;
        $4982 = (($4981) + 56|0);
        HEAPF64[$4982>>3] = $4980;
        $4983 = HEAP8[$371>>0]|0;
        $4984 = HEAP32[$vinfos204>>2]|0;
        $4985 = (($4984) + 67|0);
        HEAP8[$4985>>0] = $4983;
        $4986 = HEAP8[$372>>0]|0;
        $4987 = HEAP32[$vinfos204>>2]|0;
        $4988 = (($4987) + 68|0);
        HEAP8[$4988>>0] = $4986;
        $4989 = HEAP8[$373>>0]|0;
        $4990 = HEAP32[$vinfos204>>2]|0;
        $4991 = (($4990) + 66|0);
        HEAP8[$4991>>0] = $4989;
        $4992 = HEAP32[$vinfos204>>2]|0;
        $4993 = (($4992) + 89|0);
        HEAP8[$4993>>0] = 1;
        $4994 = +HEAPF64[$360>>3];
        $4995 = HEAP32[$vinfos204>>2]|0;
        $4996 = (($4995) + 80|0);
        HEAPF64[$4996>>3] = $4994;
        $4997 = HEAP8[$358>>0]|0;
        $4998 = HEAP32[$vinfos204>>2]|0;
        $4999 = (($4998) + 91|0);
        HEAP8[$4999>>0] = $4997;
        $5000 = HEAP8[$359>>0]|0;
        $5001 = HEAP32[$vinfos204>>2]|0;
        $5002 = (($5001) + 92|0);
        HEAP8[$5002>>0] = $5000;
        $5003 = HEAP8[$355>>0]|0;
        $5004 = HEAP32[$vinfos204>>2]|0;
        $5005 = (($5004) + 90|0);
        HEAP8[$5005>>0] = $5003;
        $5006 = HEAP32[$vinfos204>>2]|0;
        $5007 = (($5006) + 113|0);
        HEAP8[$5007>>0] = 1;
        $5008 = +HEAPF64[$27>>3];
        $5009 = HEAP32[$vinfos204>>2]|0;
        $5010 = (($5009) + 104|0);
        HEAPF64[$5010>>3] = $5008;
        $5011 = HEAP8[$25>>0]|0;
        $5012 = HEAP32[$vinfos204>>2]|0;
        $5013 = (($5012) + 115|0);
        HEAP8[$5013>>0] = $5011;
        $5014 = HEAP8[$26>>0]|0;
        $5015 = HEAP32[$vinfos204>>2]|0;
        $5016 = (($5015) + 116|0);
        HEAP8[$5016>>0] = $5014;
        $5017 = HEAP8[$24>>0]|0;
        $5018 = HEAP32[$vinfos204>>2]|0;
        $5019 = (($5018) + 114|0);
        HEAP8[$5019>>0] = $5017;
        $5020 = HEAP32[$vinfos204>>2]|0;
        $5021 = (($5020) + 137|0);
        HEAP8[$5021>>0] = 1;
        $5022 = +HEAPF64[$295>>3];
        $5023 = HEAP32[$vinfos204>>2]|0;
        $5024 = (($5023) + 128|0);
        HEAPF64[$5024>>3] = $5022;
        $5025 = HEAP8[$293>>0]|0;
        $5026 = HEAP32[$vinfos204>>2]|0;
        $5027 = (($5026) + 139|0);
        HEAP8[$5027>>0] = $5025;
        $5028 = HEAP8[$294>>0]|0;
        $5029 = HEAP32[$vinfos204>>2]|0;
        $5030 = (($5029) + 140|0);
        HEAP8[$5030>>0] = $5028;
        $5031 = HEAP8[$290>>0]|0;
        $5032 = HEAP32[$vinfos204>>2]|0;
        $5033 = (($5032) + 138|0);
        HEAP8[$5033>>0] = $5031;
        __ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ej($vfree205,0);
        $5034 = HEAP32[$solutions>>2]|0;
        $5035 = (($5034) + 8|0);
        $5036 = HEAP32[$5035>>2]|0;
        (FUNCTION_TABLE_iiii[$5036 & 31]($solutions,$vinfos204,$vfree205)|0);
        __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($vfree205);
        __ZNSt3__113__vector_baseIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEED2Ev($vinfos204);
        break;
       }
      }
      $4022 = +HEAPF64[$0>>3];
      $4023 = +HEAPF64[$1>>3];
      $4024 = +HEAPF64[$2>>3];
      $4025 = $4023 * $4024;
      $4026 = +HEAPF64[$3>>3];
      $4027 = +HEAPF64[$4>>3];
      $4028 = $4026 * $4027;
      $4029 = +HEAPF64[$5>>3];
      $4030 = $4024 * $4029;
      $4031 = +HEAPF64[$6>>3];
      $4032 = $4022 * $4031;
      $4033 = +HEAPF64[$7>>3];
      $4034 = +HEAPF64[$8>>3];
      $4035 = $4033 * $4034;
      $4036 = +HEAPF64[$9>>3];
      $4037 = $4022 * $4036;
      $4038 = +HEAPF64[$10>>3];
      $4039 = $4024 * $4038;
      $4040 = +HEAPF64[$11>>3];
      $4041 = $4022 * $4040;
      $4042 = $4035 - $4028;
      $4043 = $4028 - $4035;
      $4044 = $4024 * $4031;
      $4045 = $4022 * $4029;
      $4046 = $4044 - $4045;
      HEAPF64[$12>>3] = $4046;
      $4047 = +HEAPF64[$9>>3];
      $4048 = +HEAPF64[$2>>3];
      $4049 = $4047 * $4048;
      $4050 = +HEAPF64[$1>>3];
      $4051 = $4022 * $4050;
      $4052 = $4049 - $4051;
      HEAPF64[$13>>3] = $4052;
      $4053 = +HEAPF64[$10>>3];
      $4054 = $4022 * $4053;
      $4055 = +HEAPF64[$11>>3];
      $4056 = +HEAPF64[$2>>3];
      $4057 = $4055 * $4056;
      $4058 = $4057 - $4054;
      HEAPF64[$14>>3] = $4058;
      $4059 = +HEAPF64[$15>>3];
      $4060 = $4042 * $4059;
      $4061 = $399 * $4030;
      $4062 = $4061 + $4060;
      $4063 = $399 * $4032;
      $4064 = $4063 + $4062;
      HEAPF64[$16>>3] = $4064;
      $4065 = $399 * $4037;
      $4066 = +HEAPF64[$17>>3];
      $4067 = $4042 * $4066;
      $4068 = $4065 + $4067;
      $4069 = $399 * $4025;
      $4070 = $4069 + $4068;
      HEAPF64[$18>>3] = $4070;
      $4071 = +HEAPF64[$19>>3];
      $4072 = $4042 * $4071;
      $4073 = $399 * $4039;
      $4074 = $4073 + $4072;
      $4075 = $399 * $4041;
      $4076 = $4075 + $4074;
      HEAPF64[$20>>3] = $4076;
      $4077 = +HEAPF64[$15>>3];
      $4078 = $399 * $4077;
      $4079 = $4030 * $4043;
      $4080 = $4079 + $4078;
      $4081 = $4032 * $4043;
      $4082 = $4081 + $4080;
      HEAPF64[$21>>3] = $4082;
      $4083 = $4037 * $4043;
      $4084 = +HEAPF64[$17>>3];
      $4085 = $399 * $4084;
      $4086 = $4083 + $4085;
      $4087 = $4025 * $4043;
      $4088 = $4087 + $4086;
      HEAPF64[$22>>3] = $4088;
      $4089 = +HEAPF64[$19>>3];
      $4090 = $399 * $4089;
      $4091 = $4043 * $4039;
      $4092 = $4091 + $4090;
      $4093 = $4043 * $4041;
      $4094 = $4093 + $4092;
      HEAPF64[$23>>3] = $4094;
      $4095 = +HEAPF64[$29>>3];
      $4096 = (+__Z5IKabsd($4095));
      $4097 = $4096 < 9.9999999999999995E-7;
      if (!($4097)) {
       HEAP8[$336>>0] = 1;
       $4511 = +HEAPF64[$29>>3];
       __Z21IKPowWithIntegerCheckIdE10CheckValueIT_ES1_i($x358,$4511,-1);
       $4512 = HEAP8[$337>>0]|0;
       $4513 = ($4512<<24>>24)==(0);
       if ($4513) {
        break;
       }
       $4514 = +HEAPF64[$x358>>3];
       $4515 = +HEAPF64[$18>>3];
       __Z21IKPowWithIntegerCheckIdE10CheckValueIT_ES1_i($x359,$4515,-1);
       $4516 = HEAP8[$338>>0]|0;
       $4517 = ($4516<<24>>24)==(0);
       if ($4517) {
        break;
       }
       $4518 = +HEAPF64[$x359>>3];
       $4519 = $4514 * $4518;
       $4520 = +HEAPF64[$13>>3];
       $4521 = +HEAPF64[$20>>3];
       $4522 = $4520 * $4521;
       $4523 = +HEAPF64[$29>>3];
       $4524 = +HEAPF64[$297>>3];
       $4525 = $4523 * $4524;
       $4526 = $4522 - $4525;
       $4527 = $4519 * $4526;
       $4528 = (+__Z5IKabsd($4527));
       $4529 = $4528 < 1.9999999999999999E-6;
       do {
        if ($4529) {
         $4530 = $4514 * $4521;
         $4531 = -$4530;
         $4532 = (+__Z5IKabsd($4531));
         $4533 = $4532 < 1.9999999999999999E-6;
         if (!($4533)) {
          break;
         }
         $4534 = (+__Z5IKsqrd($4527));
         $4535 = (+__Z5IKsqrd($4531));
         $4536 = $4534 + $4535;
         $4537 = $4536 + -1.0;
         $4538 = (+__Z5IKabsd($4537));
         $4539 = !($4538 <= 1.9999999999999999E-6);
         if (!($4539)) {
          break L7;
         }
        }
       } while(0);
       $4540 = +HEAPF64[$x359>>3];
       $4541 = $4514 * $4540;
       $4542 = +HEAPF64[$13>>3];
       $4543 = +HEAPF64[$20>>3];
       $4544 = $4542 * $4543;
       $4545 = +HEAPF64[$29>>3];
       $4546 = +HEAPF64[$297>>3];
       $4547 = $4545 * $4546;
       $4548 = $4544 - $4547;
       $4549 = $4541 * $4548;
       $4550 = $4514 * $4543;
       $4551 = -$4550;
       $4552 = (+__Z7IKatan2dd($4549,$4551));
       HEAPF64[$j3array186>>3] = $4552;
       $4553 = (+__Z5IKsind($4552));
       HEAPF64[$sj3array188>>3] = $4553;
       $4554 = (+__Z5IKcosd($4552));
       HEAPF64[$cj3array187>>3] = $4554;
       $4555 = $4552 > 3.14159265358979;
       do {
        if ($4555) {
         $4556 = $4552 + -6.2831853071795898;
         HEAPF64[$j3array186>>3] = $4556;
        } else {
         $4557 = $4552 < -3.14159265358979;
         if (!($4557)) {
          break;
         }
         $4558 = $4552 + 6.2831853071795898;
         HEAPF64[$j3array186>>3] = $4558;
        }
       } while(0);
       HEAP8[$339>>0] = 0;
       HEAP8[$340>>0] = -1;
       $4559 = +HEAPF64[$j3array186>>3];
       HEAPF64[$341>>3] = $4559;
       $4560 = +HEAPF64[$cj3array187>>3];
       HEAPF64[$342>>3] = $4560;
       $4561 = +HEAPF64[$sj3array188>>3];
       HEAPF64[$343>>3] = $4561;
       $4562 = +HEAPF64[$341>>3];
       $4563 = (+__Z5IKsind($4562));
       $4564 = (+__Z5IKcosd($4562));
       $4565 = +HEAPF64[$296>>3];
       $4566 = +HEAPF64[$28>>3];
       $4567 = +HEAPF64[$29>>3];
       $4568 = +HEAPF64[$18>>3];
       $4569 = $4564 * $4568;
       $4570 = +HEAPF64[$297>>3];
       $4571 = $4564 * $4570;
       $4572 = $4564 * $4566;
       $4573 = $4564 * $4567;
       $4574 = $4563 * $4566;
       $4575 = $4563 * $4567;
       $4576 = +HEAPF64[$20>>3];
       $4577 = $4573 + $4576;
       $4578 = +HEAPF64[$14>>3];
       $4579 = $4564 * $4578;
       $4580 = $4563 * $4576;
       $4581 = $4580 + $4579;
       $4582 = +HEAPF64[$13>>3];
       $4583 = $4564 * $4582;
       $4584 = $4570 + $4583;
       $4585 = $4563 * $4568;
       $4586 = $4585 + $4584;
       $4587 = -$4578;
       $4588 = $4563 * $4587;
       $4589 = $4567 + $4588;
       $4590 = $4564 * $4576;
       $4591 = $4590 + $4589;
       $4592 = $4565 * $4574;
       $4593 = $4592 + $4571;
       $4594 = $4593 + $4582;
       $4595 = +HEAPF64[$12>>3];
       $4596 = $4564 * $4595;
       $4597 = $4596 - $4565;
       $4598 = +HEAPF64[$16>>3];
       $4599 = $4563 * $4598;
       $4600 = $4597 + $4599;
       $4601 = $4564 * $4565;
       $4602 = $4574 * $4570;
       $4603 = $4602 - $4601;
       $4604 = $4603 + $4595;
       $4605 = $4565 * $4572;
       $4606 = $4563 * $4570;
       $4607 = $4606 - $4605;
       $4608 = $4568 + $4607;
       $4609 = -$4566;
       $4610 = $4571 * $4609;
       $4611 = $4563 * $4565;
       $4612 = $4610 - $4611;
       $4613 = $4612 + $4598;
       $4614 = -$4595;
       $4615 = $4563 * $4614;
       $4616 = $4566 * $4570;
       $4617 = $4615 - $4616;
       $4618 = $4564 * $4598;
       $4619 = $4617 + $4618;
       $4620 = $4565 * $4609;
       $4621 = $4620 + $4569;
       $4622 = -$4582;
       $4623 = $4563 * $4622;
       $4624 = $4621 + $4623;
       $4625 = $4566 * $4590;
       $4626 = +HEAPF64[$23>>3];
       $4627 = -$4626;
       $4628 = $4567 * $4627;
       $4629 = $4628 - $4625;
       $4630 = $4574 * $4578;
       $4631 = $4630 + $4629;
       $4632 = $4575 * $4614;
       $4633 = +HEAPF64[$21>>3];
       $4634 = -$4633;
       $4635 = $4566 * $4634;
       $4636 = $4632 + $4635;
       $4637 = $4573 * $4598;
       $4638 = $4637 + $4636;
       $4639 = $4567 * $4569;
       $4640 = $4575 * $4622;
       $4641 = $4639 + $4640;
       $4642 = +HEAPF64[$22>>3];
       $4643 = -$4642;
       $4644 = $4566 * $4643;
       $4645 = $4641 + $4644;
       $4646 = $4566 * $4627;
       $4647 = $4646 + 1.0;
       $4648 = $4575 * $4587;
       $4649 = $4648 + $4647;
       $4650 = $4573 * $4576;
       $4651 = $4650 + $4649;
       $4652 = $4566 * $4618;
       $4653 = $4570 - $4652;
       $4654 = $4567 * $4634;
       $4655 = $4653 + $4654;
       $4656 = $4574 * $4595;
       $4657 = $4656 + $4655;
       $4658 = $4569 * $4609;
       $4659 = $4565 + $4658;
       $4660 = $4574 * $4582;
       $4661 = $4659 + $4660;
       $4662 = $4567 * $4643;
       $4663 = $4661 + $4662;
       $4664 = (+__Z5IKabsd($4577));
       $4665 = $4664 > 5.0000000000000004E-6;
       if ($4665) {
        break;
       }
       $4666 = $4578 - $4575;
       $4667 = (+__Z5IKabsd($4666));
       $4668 = $4667 > 5.0000000000000004E-6;
       if ($4668) {
        break;
       }
       $4669 = (+__Z5IKabsd($4581));
       $4670 = $4669 > 5.0000000000000004E-6;
       if ($4670) {
        break;
       }
       $4671 = (+__Z5IKabsd($4586));
       $4672 = $4671 > 5.0000000000000004E-6;
       if ($4672) {
        break;
       }
       $4673 = (+__Z5IKabsd($4591));
       $4674 = $4673 > 5.0000000000000004E-6;
       if ($4674) {
        break;
       }
       $4675 = (+__Z5IKabsd($4594));
       $4676 = $4675 > 5.0000000000000004E-6;
       if ($4676) {
        break;
       }
       $4677 = (+__Z5IKabsd($4600));
       $4678 = $4677 > 5.0000000000000004E-6;
       if ($4678) {
        break;
       }
       $4679 = (+__Z5IKabsd($4604));
       $4680 = $4679 > 5.0000000000000004E-6;
       if ($4680) {
        break;
       }
       $4681 = (+__Z5IKabsd($4608));
       $4682 = $4681 > 5.0000000000000004E-6;
       if ($4682) {
        break;
       }
       $4683 = (+__Z5IKabsd($4613));
       $4684 = $4683 > 5.0000000000000004E-6;
       if ($4684) {
        break;
       }
       $4685 = (+__Z5IKabsd($4619));
       $4686 = $4685 > 5.0000000000000004E-6;
       if ($4686) {
        break;
       }
       $4687 = (+__Z5IKabsd($4624));
       $4688 = $4687 > 5.0000000000000004E-6;
       if ($4688) {
        break;
       }
       $4689 = (+__Z5IKabsd($4631));
       $4690 = $4689 > 5.0000000000000004E-6;
       if ($4690) {
        break;
       }
       $4691 = (+__Z5IKabsd($4638));
       $4692 = $4691 > 5.0000000000000004E-6;
       if ($4692) {
        break;
       }
       $4693 = (+__Z5IKabsd($4645));
       $4694 = $4693 > 5.0000000000000004E-6;
       if ($4694) {
        break;
       }
       $4695 = (+__Z5IKabsd($4651));
       $4696 = $4695 > 5.0000000000000004E-6;
       if ($4696) {
        break;
       }
       $4697 = (+__Z5IKabsd($4657));
       $4698 = $4697 > 5.0000000000000004E-6;
       if ($4698) {
        break;
       }
       $4699 = (+__Z5IKabsd($4663));
       $4700 = $4699 > 5.0000000000000004E-6;
       if ($4700) {
        break;
       }
       __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEEC2Ej($vinfos194,6);
       $4701 = HEAP32[$vinfos194>>2]|0;
       $4702 = (($4701) + 17|0);
       HEAP8[$4702>>0] = 1;
       $4703 = +HEAPF64[$this>>3];
       $4704 = HEAP32[$vinfos194>>2]|0;
       $4705 = (($4704) + 8|0);
       HEAPF64[$4705>>3] = $4703;
       $4706 = HEAP8[$344>>0]|0;
       $4707 = HEAP32[$vinfos194>>2]|0;
       $4708 = (($4707) + 19|0);
       HEAP8[$4708>>0] = $4706;
       $4709 = HEAP8[$345>>0]|0;
       $4710 = HEAP32[$vinfos194>>2]|0;
       $4711 = (($4710) + 20|0);
       HEAP8[$4711>>0] = $4709;
       $4712 = HEAP8[$346>>0]|0;
       $4713 = HEAP32[$vinfos194>>2]|0;
       $4714 = (($4713) + 18|0);
       HEAP8[$4714>>0] = $4712;
       $4715 = HEAP32[$vinfos194>>2]|0;
       $4716 = (($4715) + 41|0);
       HEAP8[$4716>>0] = 1;
       $4717 = +HEAPF64[$347>>3];
       $4718 = HEAP32[$vinfos194>>2]|0;
       $4719 = (($4718) + 32|0);
       HEAPF64[$4719>>3] = $4717;
       $4720 = HEAP8[$348>>0]|0;
       $4721 = HEAP32[$vinfos194>>2]|0;
       $4722 = (($4721) + 43|0);
       HEAP8[$4722>>0] = $4720;
       $4723 = HEAP8[$349>>0]|0;
       $4724 = HEAP32[$vinfos194>>2]|0;
       $4725 = (($4724) + 44|0);
       HEAP8[$4725>>0] = $4723;
       $4726 = HEAP8[$350>>0]|0;
       $4727 = HEAP32[$vinfos194>>2]|0;
       $4728 = (($4727) + 42|0);
       HEAP8[$4728>>0] = $4726;
       $4729 = HEAP32[$vinfos194>>2]|0;
       $4730 = (($4729) + 65|0);
       HEAP8[$4730>>0] = 1;
       $4731 = +HEAPF64[$351>>3];
       $4732 = HEAP32[$vinfos194>>2]|0;
       $4733 = (($4732) + 56|0);
       HEAPF64[$4733>>3] = $4731;
       $4734 = HEAP8[$352>>0]|0;
       $4735 = HEAP32[$vinfos194>>2]|0;
       $4736 = (($4735) + 67|0);
       HEAP8[$4736>>0] = $4734;
       $4737 = HEAP8[$353>>0]|0;
       $4738 = HEAP32[$vinfos194>>2]|0;
       $4739 = (($4738) + 68|0);
       HEAP8[$4739>>0] = $4737;
       $4740 = HEAP8[$354>>0]|0;
       $4741 = HEAP32[$vinfos194>>2]|0;
       $4742 = (($4741) + 66|0);
       HEAP8[$4742>>0] = $4740;
       $4743 = HEAP32[$vinfos194>>2]|0;
       $4744 = (($4743) + 89|0);
       HEAP8[$4744>>0] = 1;
       $4745 = +HEAPF64[$341>>3];
       $4746 = HEAP32[$vinfos194>>2]|0;
       $4747 = (($4746) + 80|0);
       HEAPF64[$4747>>3] = $4745;
       $4748 = HEAP8[$339>>0]|0;
       $4749 = HEAP32[$vinfos194>>2]|0;
       $4750 = (($4749) + 91|0);
       HEAP8[$4750>>0] = $4748;
       $4751 = HEAP8[$340>>0]|0;
       $4752 = HEAP32[$vinfos194>>2]|0;
       $4753 = (($4752) + 92|0);
       HEAP8[$4753>>0] = $4751;
       $4754 = HEAP8[$336>>0]|0;
       $4755 = HEAP32[$vinfos194>>2]|0;
       $4756 = (($4755) + 90|0);
       HEAP8[$4756>>0] = $4754;
       $4757 = HEAP32[$vinfos194>>2]|0;
       $4758 = (($4757) + 113|0);
       HEAP8[$4758>>0] = 1;
       $4759 = +HEAPF64[$27>>3];
       $4760 = HEAP32[$vinfos194>>2]|0;
       $4761 = (($4760) + 104|0);
       HEAPF64[$4761>>3] = $4759;
       $4762 = HEAP8[$25>>0]|0;
       $4763 = HEAP32[$vinfos194>>2]|0;
       $4764 = (($4763) + 115|0);
       HEAP8[$4764>>0] = $4762;
       $4765 = HEAP8[$26>>0]|0;
       $4766 = HEAP32[$vinfos194>>2]|0;
       $4767 = (($4766) + 116|0);
       HEAP8[$4767>>0] = $4765;
       $4768 = HEAP8[$24>>0]|0;
       $4769 = HEAP32[$vinfos194>>2]|0;
       $4770 = (($4769) + 114|0);
       HEAP8[$4770>>0] = $4768;
       $4771 = HEAP32[$vinfos194>>2]|0;
       $4772 = (($4771) + 137|0);
       HEAP8[$4772>>0] = 1;
       $4773 = +HEAPF64[$295>>3];
       $4774 = HEAP32[$vinfos194>>2]|0;
       $4775 = (($4774) + 128|0);
       HEAPF64[$4775>>3] = $4773;
       $4776 = HEAP8[$293>>0]|0;
       $4777 = HEAP32[$vinfos194>>2]|0;
       $4778 = (($4777) + 139|0);
       HEAP8[$4778>>0] = $4776;
       $4779 = HEAP8[$294>>0]|0;
       $4780 = HEAP32[$vinfos194>>2]|0;
       $4781 = (($4780) + 140|0);
       HEAP8[$4781>>0] = $4779;
       $4782 = HEAP8[$290>>0]|0;
       $4783 = HEAP32[$vinfos194>>2]|0;
       $4784 = (($4783) + 138|0);
       HEAP8[$4784>>0] = $4782;
       __ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ej($vfree195,0);
       $4785 = HEAP32[$solutions>>2]|0;
       $4786 = (($4785) + 8|0);
       $4787 = HEAP32[$4786>>2]|0;
       (FUNCTION_TABLE_iiii[$4787 & 31]($solutions,$vinfos194,$vfree195)|0);
       __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($vfree195);
       __ZNSt3__113__vector_baseIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEED2Ev($vinfos194);
       break;
      }
      $4098 = +HEAPF64[$27>>3];
      $4099 = (+__Z5IKabsd($4098));
      $4100 = $4099 + 3.14159265358979;
      $4101 = (+__Z6IKfmoddd($4100,6.2831853071795898));
      $4102 = $4101 + -3.14159265358979;
      $4103 = +HEAPF64[$20>>3];
      $4104 = +HEAPF64[$14>>3];
      $4105 = +HEAPF64[$21>>3];
      $4106 = +HEAPF64[$22>>3];
      $4107 = (+__Z5IKabsd($4102));
      $4108 = $4107 < 9.9999999999999995E-7;
      do {
       if ($4108) {
        $4109 = $4094 + -1.0;
        $4110 = (+__Z5IKabsd($4109));
        $4111 = $4110 < 9.9999999999999995E-7;
        if ($4111) {
         $4112 = (+__Z5IKabsd($4103));
         $4113 = $4112 < 9.9999999999999995E-7;
         if ($4113) {
          $4114 = (+__Z5IKabsd($4104));
          $4115 = $4114 < 9.9999999999999995E-7;
          if ($4115) {
           $4116 = (+__Z5IKabsd($4105));
           $4117 = $4116 < 9.9999999999999995E-7;
           if (!($4117)) {
            break;
           }
           $4118 = (+__Z5IKabsd($4106));
           $4119 = $4118 < 9.9999999999999995E-7;
           if (!($4119)) {
            break;
           }
           HEAP8[$298>>0] = 1;
           $4120 = +HEAPF64[$13>>3];
           $4121 = +HEAPF64[$20>>3];
           $4122 = $4120 * $4121;
           $4123 = +HEAPF64[$14>>3];
           $4124 = +HEAPF64[$18>>3];
           $4125 = $4123 * $4124;
           $4126 = $4122 - $4125;
           $4127 = (+__Z6IKsignd($4126));
           __Z21IKPowWithIntegerCheckIdE10CheckValueIT_ES1_i($x338,$4127,-1);
           $4128 = HEAP8[$299>>0]|0;
           $4129 = ($4128<<24>>24)==(0);
           if ($4129) {
            break L7;
           }
           $4130 = +HEAPF64[$14>>3];
           $4131 = +HEAPF64[$297>>3];
           $4132 = $4130 * $4131;
           $4133 = +HEAPF64[$20>>3];
           $4134 = $4131 * $4133;
           $4135 = -$4134;
           __Z16IKatan2WithCheckIdE10CheckValueIT_ES1_S1_S1_($x339,$4132,$4135,1.9999999999999999E-6);
           $4136 = HEAP8[$300>>0]|0;
           $4137 = ($4136<<24>>24)==(0);
           if ($4137) {
            break L7;
           }
           $4138 = +HEAPF64[$x338>>3];
           $4139 = $4138 * 1.5707963267949001;
           $4140 = $4139 + -1.5707963267949001;
           $4141 = +HEAPF64[$x339>>3];
           $4142 = $4141 + $4140;
           HEAPF64[$j3array164>>3] = $4142;
           $4143 = (+__Z5IKsind($4142));
           HEAPF64[$sj3array166>>3] = $4143;
           $4144 = (+__Z5IKcosd($4142));
           HEAPF64[$cj3array165>>3] = $4144;
           $4145 = $4142 > 3.14159265358979;
           do {
            if ($4145) {
             $4146 = $4142 + -6.2831853071795898;
             HEAPF64[$j3array164>>3] = $4146;
            } else {
             $4147 = $4142 < -3.14159265358979;
             if (!($4147)) {
              break;
             }
             $4148 = $4142 + 6.2831853071795898;
             HEAPF64[$j3array164>>3] = $4148;
            }
           } while(0);
           HEAP8[$301>>0] = 0;
           HEAP8[$302>>0] = -1;
           $4149 = +HEAPF64[$j3array164>>3];
           HEAPF64[$303>>3] = $4149;
           $4150 = +HEAPF64[$cj3array165>>3];
           HEAPF64[$304>>3] = $4150;
           $4151 = +HEAPF64[$sj3array166>>3];
           HEAPF64[$305>>3] = $4151;
           $4152 = +HEAPF64[$303>>3];
           $4153 = (+__Z5IKcosd($4152));
           $4154 = (+__Z5IKsind($4152));
           $4155 = +HEAPF64[$296>>3];
           $4156 = +HEAPF64[$297>>3];
           $4157 = $4154 * $4156;
           $4158 = $4154 * $4155;
           $4159 = $4153 * $4156;
           $4160 = $4153 * $4155;
           $4161 = +HEAPF64[$14>>3];
           $4162 = $4153 * $4161;
           $4163 = +HEAPF64[$20>>3];
           $4164 = $4154 * $4163;
           $4165 = $4162 + $4164;
           $4166 = +HEAPF64[$18>>3];
           $4167 = +HEAPF64[$13>>3];
           $4168 = $4154 * $4161;
           $4169 = $4153 * $4163;
           $4170 = $4169 - $4168;
           $4171 = $4158 + $4159;
           $4172 = $4171 + $4167;
           $4173 = +HEAPF64[$12>>3];
           $4174 = $4157 + $4173;
           $4175 = $4174 - $4160;
           $4176 = $4157 + $4166;
           $4177 = $4176 - $4160;
           $4178 = $4153 * $4173;
           $4179 = +HEAPF64[$16>>3];
           $4180 = $4154 * $4179;
           $4181 = $4178 + $4180;
           $4182 = $4181 - $4155;
           $4183 = $4179 - $4158;
           $4184 = $4183 - $4159;
           $4185 = $4153 * $4179;
           $4186 = $4185 - $4156;
           $4187 = $4154 * $4173;
           $4188 = $4186 - $4187;
           $4189 = $4153 * $4166;
           $4190 = $4154 * $4167;
           $4191 = $4189 - $4190;
           $4192 = $4191 - $4155;
           $4193 = (+__Z5IKabsd($4165));
           $4194 = $4193 > 5.0000000000000004E-6;
           if ($4194) {
            break L7;
           }
           $4195 = $4154 * $4166;
           $4196 = $4156 + $4195;
           $4197 = $4153 * $4167;
           $4198 = $4196 + $4197;
           $4199 = (+__Z5IKabsd($4198));
           $4200 = $4199 > 5.0000000000000004E-6;
           if ($4200) {
            break L7;
           }
           $4201 = (+__Z5IKabsd($4170));
           $4202 = $4201 > 5.0000000000000004E-6;
           if ($4202) {
            break L7;
           }
           $4203 = (+__Z5IKabsd($4172));
           $4204 = $4203 > 5.0000000000000004E-6;
           if ($4204) {
            break L7;
           }
           $4205 = (+__Z5IKabsd($4175));
           $4206 = $4205 > 5.0000000000000004E-6;
           if ($4206) {
            break L7;
           }
           $4207 = (+__Z5IKabsd($4177));
           $4208 = $4207 > 5.0000000000000004E-6;
           if ($4208) {
            break L7;
           }
           $4209 = (+__Z5IKabsd($4182));
           $4210 = $4209 > 5.0000000000000004E-6;
           if ($4210) {
            break L7;
           }
           $4211 = (+__Z5IKabsd($4184));
           $4212 = $4211 > 5.0000000000000004E-6;
           if ($4212) {
            break L7;
           }
           $4213 = (+__Z5IKabsd($4188));
           $4214 = $4213 > 5.0000000000000004E-6;
           if ($4214) {
            break L7;
           }
           $4215 = (+__Z5IKabsd($4192));
           $4216 = $4215 > 5.0000000000000004E-6;
           if ($4216) {
            break L7;
           }
           __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEEC2Ej($vinfos172,6);
           $4217 = HEAP32[$vinfos172>>2]|0;
           $4218 = (($4217) + 17|0);
           HEAP8[$4218>>0] = 1;
           $4219 = +HEAPF64[$this>>3];
           $4220 = HEAP32[$vinfos172>>2]|0;
           $4221 = (($4220) + 8|0);
           HEAPF64[$4221>>3] = $4219;
           $4222 = HEAP8[$306>>0]|0;
           $4223 = HEAP32[$vinfos172>>2]|0;
           $4224 = (($4223) + 19|0);
           HEAP8[$4224>>0] = $4222;
           $4225 = HEAP8[$307>>0]|0;
           $4226 = HEAP32[$vinfos172>>2]|0;
           $4227 = (($4226) + 20|0);
           HEAP8[$4227>>0] = $4225;
           $4228 = HEAP8[$308>>0]|0;
           $4229 = HEAP32[$vinfos172>>2]|0;
           $4230 = (($4229) + 18|0);
           HEAP8[$4230>>0] = $4228;
           $4231 = HEAP32[$vinfos172>>2]|0;
           $4232 = (($4231) + 41|0);
           HEAP8[$4232>>0] = 1;
           $4233 = +HEAPF64[$309>>3];
           $4234 = HEAP32[$vinfos172>>2]|0;
           $4235 = (($4234) + 32|0);
           HEAPF64[$4235>>3] = $4233;
           $4236 = HEAP8[$310>>0]|0;
           $4237 = HEAP32[$vinfos172>>2]|0;
           $4238 = (($4237) + 43|0);
           HEAP8[$4238>>0] = $4236;
           $4239 = HEAP8[$311>>0]|0;
           $4240 = HEAP32[$vinfos172>>2]|0;
           $4241 = (($4240) + 44|0);
           HEAP8[$4241>>0] = $4239;
           $4242 = HEAP8[$312>>0]|0;
           $4243 = HEAP32[$vinfos172>>2]|0;
           $4244 = (($4243) + 42|0);
           HEAP8[$4244>>0] = $4242;
           $4245 = HEAP32[$vinfos172>>2]|0;
           $4246 = (($4245) + 65|0);
           HEAP8[$4246>>0] = 1;
           $4247 = +HEAPF64[$313>>3];
           $4248 = HEAP32[$vinfos172>>2]|0;
           $4249 = (($4248) + 56|0);
           HEAPF64[$4249>>3] = $4247;
           $4250 = HEAP8[$314>>0]|0;
           $4251 = HEAP32[$vinfos172>>2]|0;
           $4252 = (($4251) + 67|0);
           HEAP8[$4252>>0] = $4250;
           $4253 = HEAP8[$315>>0]|0;
           $4254 = HEAP32[$vinfos172>>2]|0;
           $4255 = (($4254) + 68|0);
           HEAP8[$4255>>0] = $4253;
           $4256 = HEAP8[$316>>0]|0;
           $4257 = HEAP32[$vinfos172>>2]|0;
           $4258 = (($4257) + 66|0);
           HEAP8[$4258>>0] = $4256;
           $4259 = HEAP32[$vinfos172>>2]|0;
           $4260 = (($4259) + 89|0);
           HEAP8[$4260>>0] = 1;
           $4261 = +HEAPF64[$303>>3];
           $4262 = HEAP32[$vinfos172>>2]|0;
           $4263 = (($4262) + 80|0);
           HEAPF64[$4263>>3] = $4261;
           $4264 = HEAP8[$301>>0]|0;
           $4265 = HEAP32[$vinfos172>>2]|0;
           $4266 = (($4265) + 91|0);
           HEAP8[$4266>>0] = $4264;
           $4267 = HEAP8[$302>>0]|0;
           $4268 = HEAP32[$vinfos172>>2]|0;
           $4269 = (($4268) + 92|0);
           HEAP8[$4269>>0] = $4267;
           $4270 = HEAP8[$298>>0]|0;
           $4271 = HEAP32[$vinfos172>>2]|0;
           $4272 = (($4271) + 90|0);
           HEAP8[$4272>>0] = $4270;
           $4273 = HEAP32[$vinfos172>>2]|0;
           $4274 = (($4273) + 113|0);
           HEAP8[$4274>>0] = 1;
           $4275 = +HEAPF64[$27>>3];
           $4276 = HEAP32[$vinfos172>>2]|0;
           $4277 = (($4276) + 104|0);
           HEAPF64[$4277>>3] = $4275;
           $4278 = HEAP8[$25>>0]|0;
           $4279 = HEAP32[$vinfos172>>2]|0;
           $4280 = (($4279) + 115|0);
           HEAP8[$4280>>0] = $4278;
           $4281 = HEAP8[$26>>0]|0;
           $4282 = HEAP32[$vinfos172>>2]|0;
           $4283 = (($4282) + 116|0);
           HEAP8[$4283>>0] = $4281;
           $4284 = HEAP8[$24>>0]|0;
           $4285 = HEAP32[$vinfos172>>2]|0;
           $4286 = (($4285) + 114|0);
           HEAP8[$4286>>0] = $4284;
           $4287 = HEAP32[$vinfos172>>2]|0;
           $4288 = (($4287) + 137|0);
           HEAP8[$4288>>0] = 1;
           $4289 = +HEAPF64[$295>>3];
           $4290 = HEAP32[$vinfos172>>2]|0;
           $4291 = (($4290) + 128|0);
           HEAPF64[$4291>>3] = $4289;
           $4292 = HEAP8[$293>>0]|0;
           $4293 = HEAP32[$vinfos172>>2]|0;
           $4294 = (($4293) + 139|0);
           HEAP8[$4294>>0] = $4292;
           $4295 = HEAP8[$294>>0]|0;
           $4296 = HEAP32[$vinfos172>>2]|0;
           $4297 = (($4296) + 140|0);
           HEAP8[$4297>>0] = $4295;
           $4298 = HEAP8[$290>>0]|0;
           $4299 = HEAP32[$vinfos172>>2]|0;
           $4300 = (($4299) + 138|0);
           HEAP8[$4300>>0] = $4298;
           __ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ej($vfree173,0);
           $4301 = HEAP32[$solutions>>2]|0;
           $4302 = (($4301) + 8|0);
           $4303 = HEAP32[$4302>>2]|0;
           (FUNCTION_TABLE_iiii[$4303 & 31]($solutions,$vinfos172,$vfree173)|0);
           __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($vfree173);
           __ZNSt3__113__vector_baseIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEED2Ev($vinfos172);
           break L7;
          }
         }
        }
       }
      } while(0);
      $4304 = +HEAPF64[$27>>3];
      $4305 = $4304 + -3.14159265358979;
      $4306 = (+__Z5IKabsd($4305));
      $4307 = $4306 + 3.14159265358979;
      $4308 = (+__Z6IKfmoddd($4307,6.2831853071795898));
      $4309 = $4308 + -3.14159265358979;
      $4310 = +HEAPF64[$20>>3];
      $4311 = +HEAPF64[$14>>3];
      $4312 = +HEAPF64[$21>>3];
      $4313 = +HEAPF64[$22>>3];
      $4314 = (+__Z5IKabsd($4309));
      $4315 = $4314 < 9.9999999999999995E-7;
      if (!($4315)) {
       break;
      }
      $4316 = +HEAPF64[$23>>3];
      $4317 = $4316 + 1.0;
      $4318 = (+__Z5IKabsd($4317));
      $4319 = $4318 < 9.9999999999999995E-7;
      if (!($4319)) {
       break;
      }
      $4320 = (+__Z5IKabsd($4310));
      $4321 = $4320 < 9.9999999999999995E-7;
      if (!($4321)) {
       break;
      }
      $4322 = (+__Z5IKabsd($4311));
      $4323 = $4322 < 9.9999999999999995E-7;
      if (!($4323)) {
       break;
      }
      $4324 = (+__Z5IKabsd($4312));
      $4325 = $4324 < 9.9999999999999995E-7;
      if (!($4325)) {
       break;
      }
      $4326 = (+__Z5IKabsd($4313));
      $4327 = $4326 < 9.9999999999999995E-7;
      if (!($4327)) {
       break;
      }
      HEAP8[$317>>0] = 1;
      $4328 = +HEAPF64[$13>>3];
      $4329 = +HEAPF64[$14>>3];
      $4330 = $4328 * $4329;
      $4331 = +HEAPF64[$20>>3];
      $4332 = $4328 * $4331;
      $4333 = -$4332;
      __Z16IKatan2WithCheckIdE10CheckValueIT_ES1_S1_S1_($x348,$4330,$4333,1.9999999999999999E-6);
      $4334 = HEAP8[$318>>0]|0;
      $4335 = ($4334<<24>>24)==(0);
      if ($4335) {
       break;
      }
      $4336 = +HEAPF64[$20>>3];
      $4337 = +HEAPF64[$297>>3];
      $4338 = $4336 * $4337;
      $4339 = +HEAPF64[$296>>3];
      $4340 = +HEAPF64[$14>>3];
      $4341 = $4339 * $4340;
      $4342 = $4338 + $4341;
      $4343 = (+__Z6IKsignd($4342));
      __Z21IKPowWithIntegerCheckIdE10CheckValueIT_ES1_i($x349,$4343,-1);
      $4344 = HEAP8[$319>>0]|0;
      $4345 = ($4344<<24>>24)==(0);
      if ($4345) {
       break;
      }
      $4346 = +HEAPF64[$x348>>3];
      $4347 = $4346 + -1.5707963267949001;
      $4348 = +HEAPF64[$x349>>3];
      $4349 = $4348 * 1.5707963267949001;
      $4350 = $4347 + $4349;
      HEAPF64[$j3array175>>3] = $4350;
      $4351 = (+__Z5IKsind($4350));
      HEAPF64[$sj3array177>>3] = $4351;
      $4352 = (+__Z5IKcosd($4350));
      HEAPF64[$cj3array176>>3] = $4352;
      $4353 = $4350 > 3.14159265358979;
      do {
       if ($4353) {
        $4354 = $4350 + -6.2831853071795898;
        HEAPF64[$j3array175>>3] = $4354;
       } else {
        $4355 = $4350 < -3.14159265358979;
        if (!($4355)) {
         break;
        }
        $4356 = $4350 + 6.2831853071795898;
        HEAPF64[$j3array175>>3] = $4356;
       }
      } while(0);
      HEAP8[$320>>0] = 0;
      HEAP8[$321>>0] = -1;
      $4357 = +HEAPF64[$j3array175>>3];
      HEAPF64[$322>>3] = $4357;
      $4358 = +HEAPF64[$cj3array176>>3];
      HEAPF64[$323>>3] = $4358;
      $4359 = +HEAPF64[$sj3array177>>3];
      HEAPF64[$324>>3] = $4359;
      $4360 = +HEAPF64[$322>>3];
      $4361 = (+__Z5IKcosd($4360));
      $4362 = (+__Z5IKsind($4360));
      $4363 = +HEAPF64[$296>>3];
      $4364 = +HEAPF64[$297>>3];
      $4365 = $4361 * $4364;
      $4366 = $4361 * $4363;
      $4367 = $4362 * $4363;
      $4368 = +HEAPF64[$14>>3];
      $4369 = $4361 * $4368;
      $4370 = +HEAPF64[$20>>3];
      $4371 = $4362 * $4370;
      $4372 = $4369 + $4371;
      $4373 = +HEAPF64[$13>>3];
      $4374 = +HEAPF64[$18>>3];
      $4375 = $4362 * $4368;
      $4376 = $4361 * $4370;
      $4377 = $4376 - $4375;
      $4378 = $4362 * $4364;
      $4379 = $4366 + $4378;
      $4380 = $4379 + $4374;
      $4381 = $4365 - $4367;
      $4382 = $4381 + $4373;
      $4383 = +HEAPF64[$12>>3];
      $4384 = $4362 * $4383;
      $4385 = $4364 - $4384;
      $4386 = +HEAPF64[$16>>3];
      $4387 = $4361 * $4386;
      $4388 = $4385 + $4387;
      $4389 = $4362 * $4373;
      $4390 = $4363 - $4389;
      $4391 = $4361 * $4374;
      $4392 = $4390 + $4391;
      $4393 = $4381 + $4386;
      $4394 = $4362 * $4386;
      $4395 = $4394 - $4363;
      $4396 = $4361 * $4383;
      $4397 = $4396 + $4395;
      $4398 = $4383 - $4378;
      $4399 = $4398 - $4366;
      $4400 = (+__Z5IKabsd($4372));
      $4401 = $4400 > 5.0000000000000004E-6;
      if ($4401) {
       break;
      }
      $4402 = $4361 * $4373;
      $4403 = $4364 + $4402;
      $4404 = $4362 * $4374;
      $4405 = $4403 + $4404;
      $4406 = (+__Z5IKabsd($4405));
      $4407 = $4406 > 5.0000000000000004E-6;
      if ($4407) {
       break;
      }
      $4408 = (+__Z5IKabsd($4377));
      $4409 = $4408 > 5.0000000000000004E-6;
      if ($4409) {
       break;
      }
      $4410 = (+__Z5IKabsd($4380));
      $4411 = $4410 > 5.0000000000000004E-6;
      if ($4411) {
       break;
      }
      $4412 = (+__Z5IKabsd($4382));
      $4413 = $4412 > 5.0000000000000004E-6;
      if ($4413) {
       break;
      }
      $4414 = (+__Z5IKabsd($4388));
      $4415 = $4414 > 5.0000000000000004E-6;
      if ($4415) {
       break;
      }
      $4416 = (+__Z5IKabsd($4392));
      $4417 = $4416 > 5.0000000000000004E-6;
      if ($4417) {
       break;
      }
      $4418 = (+__Z5IKabsd($4393));
      $4419 = $4418 > 5.0000000000000004E-6;
      if ($4419) {
       break;
      }
      $4420 = (+__Z5IKabsd($4397));
      $4421 = $4420 > 5.0000000000000004E-6;
      if ($4421) {
       break;
      }
      $4422 = (+__Z5IKabsd($4399));
      $4423 = $4422 > 5.0000000000000004E-6;
      if ($4423) {
       break;
      }
      __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEEC2Ej($vinfos183,6);
      $4424 = HEAP32[$vinfos183>>2]|0;
      $4425 = (($4424) + 17|0);
      HEAP8[$4425>>0] = 1;
      $4426 = +HEAPF64[$this>>3];
      $4427 = HEAP32[$vinfos183>>2]|0;
      $4428 = (($4427) + 8|0);
      HEAPF64[$4428>>3] = $4426;
      $4429 = HEAP8[$325>>0]|0;
      $4430 = HEAP32[$vinfos183>>2]|0;
      $4431 = (($4430) + 19|0);
      HEAP8[$4431>>0] = $4429;
      $4432 = HEAP8[$326>>0]|0;
      $4433 = HEAP32[$vinfos183>>2]|0;
      $4434 = (($4433) + 20|0);
      HEAP8[$4434>>0] = $4432;
      $4435 = HEAP8[$327>>0]|0;
      $4436 = HEAP32[$vinfos183>>2]|0;
      $4437 = (($4436) + 18|0);
      HEAP8[$4437>>0] = $4435;
      $4438 = HEAP32[$vinfos183>>2]|0;
      $4439 = (($4438) + 41|0);
      HEAP8[$4439>>0] = 1;
      $4440 = +HEAPF64[$328>>3];
      $4441 = HEAP32[$vinfos183>>2]|0;
      $4442 = (($4441) + 32|0);
      HEAPF64[$4442>>3] = $4440;
      $4443 = HEAP8[$329>>0]|0;
      $4444 = HEAP32[$vinfos183>>2]|0;
      $4445 = (($4444) + 43|0);
      HEAP8[$4445>>0] = $4443;
      $4446 = HEAP8[$330>>0]|0;
      $4447 = HEAP32[$vinfos183>>2]|0;
      $4448 = (($4447) + 44|0);
      HEAP8[$4448>>0] = $4446;
      $4449 = HEAP8[$331>>0]|0;
      $4450 = HEAP32[$vinfos183>>2]|0;
      $4451 = (($4450) + 42|0);
      HEAP8[$4451>>0] = $4449;
      $4452 = HEAP32[$vinfos183>>2]|0;
      $4453 = (($4452) + 65|0);
      HEAP8[$4453>>0] = 1;
      $4454 = +HEAPF64[$332>>3];
      $4455 = HEAP32[$vinfos183>>2]|0;
      $4456 = (($4455) + 56|0);
      HEAPF64[$4456>>3] = $4454;
      $4457 = HEAP8[$333>>0]|0;
      $4458 = HEAP32[$vinfos183>>2]|0;
      $4459 = (($4458) + 67|0);
      HEAP8[$4459>>0] = $4457;
      $4460 = HEAP8[$334>>0]|0;
      $4461 = HEAP32[$vinfos183>>2]|0;
      $4462 = (($4461) + 68|0);
      HEAP8[$4462>>0] = $4460;
      $4463 = HEAP8[$335>>0]|0;
      $4464 = HEAP32[$vinfos183>>2]|0;
      $4465 = (($4464) + 66|0);
      HEAP8[$4465>>0] = $4463;
      $4466 = HEAP32[$vinfos183>>2]|0;
      $4467 = (($4466) + 89|0);
      HEAP8[$4467>>0] = 1;
      $4468 = +HEAPF64[$322>>3];
      $4469 = HEAP32[$vinfos183>>2]|0;
      $4470 = (($4469) + 80|0);
      HEAPF64[$4470>>3] = $4468;
      $4471 = HEAP8[$320>>0]|0;
      $4472 = HEAP32[$vinfos183>>2]|0;
      $4473 = (($4472) + 91|0);
      HEAP8[$4473>>0] = $4471;
      $4474 = HEAP8[$321>>0]|0;
      $4475 = HEAP32[$vinfos183>>2]|0;
      $4476 = (($4475) + 92|0);
      HEAP8[$4476>>0] = $4474;
      $4477 = HEAP8[$317>>0]|0;
      $4478 = HEAP32[$vinfos183>>2]|0;
      $4479 = (($4478) + 90|0);
      HEAP8[$4479>>0] = $4477;
      $4480 = HEAP32[$vinfos183>>2]|0;
      $4481 = (($4480) + 113|0);
      HEAP8[$4481>>0] = 1;
      $4482 = +HEAPF64[$27>>3];
      $4483 = HEAP32[$vinfos183>>2]|0;
      $4484 = (($4483) + 104|0);
      HEAPF64[$4484>>3] = $4482;
      $4485 = HEAP8[$25>>0]|0;
      $4486 = HEAP32[$vinfos183>>2]|0;
      $4487 = (($4486) + 115|0);
      HEAP8[$4487>>0] = $4485;
      $4488 = HEAP8[$26>>0]|0;
      $4489 = HEAP32[$vinfos183>>2]|0;
      $4490 = (($4489) + 116|0);
      HEAP8[$4490>>0] = $4488;
      $4491 = HEAP8[$24>>0]|0;
      $4492 = HEAP32[$vinfos183>>2]|0;
      $4493 = (($4492) + 114|0);
      HEAP8[$4493>>0] = $4491;
      $4494 = HEAP32[$vinfos183>>2]|0;
      $4495 = (($4494) + 137|0);
      HEAP8[$4495>>0] = 1;
      $4496 = +HEAPF64[$295>>3];
      $4497 = HEAP32[$vinfos183>>2]|0;
      $4498 = (($4497) + 128|0);
      HEAPF64[$4498>>3] = $4496;
      $4499 = HEAP8[$293>>0]|0;
      $4500 = HEAP32[$vinfos183>>2]|0;
      $4501 = (($4500) + 139|0);
      HEAP8[$4501>>0] = $4499;
      $4502 = HEAP8[$294>>0]|0;
      $4503 = HEAP32[$vinfos183>>2]|0;
      $4504 = (($4503) + 140|0);
      HEAP8[$4504>>0] = $4502;
      $4505 = HEAP8[$290>>0]|0;
      $4506 = HEAP32[$vinfos183>>2]|0;
      $4507 = (($4506) + 138|0);
      HEAP8[$4507>>0] = $4505;
      __ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ej($vfree184,0);
      $4508 = HEAP32[$solutions>>2]|0;
      $4509 = (($4508) + 8|0);
      $4510 = HEAP32[$4509>>2]|0;
      (FUNCTION_TABLE_iiii[$4510 & 31]($solutions,$vinfos183,$vfree184)|0);
      __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($vfree184);
      __ZNSt3__113__vector_baseIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEED2Ev($vinfos183);
      break;
     }
    }
    $582 = +HEAPF64[$0>>3];
    $583 = +HEAPF64[$1>>3];
    $584 = +HEAPF64[$2>>3];
    $585 = $583 * $584;
    $586 = +HEAPF64[$3>>3];
    $587 = +HEAPF64[$4>>3];
    $588 = $586 * $587;
    $589 = +HEAPF64[$5>>3];
    $590 = $584 * $589;
    $591 = +HEAPF64[$6>>3];
    $592 = $582 * $591;
    $593 = +HEAPF64[$7>>3];
    $594 = +HEAPF64[$8>>3];
    $595 = $593 * $594;
    $596 = +HEAPF64[$9>>3];
    $597 = $582 * $596;
    $598 = +HEAPF64[$10>>3];
    $599 = $584 * $598;
    $600 = +HEAPF64[$11>>3];
    $601 = $582 * $600;
    $602 = $595 - $588;
    $603 = $588 - $595;
    $604 = $584 * $591;
    $605 = $582 * $589;
    $606 = $604 - $605;
    HEAPF64[$12>>3] = $606;
    $607 = +HEAPF64[$9>>3];
    $608 = +HEAPF64[$2>>3];
    $609 = $607 * $608;
    $610 = +HEAPF64[$1>>3];
    $611 = $582 * $610;
    $612 = $609 - $611;
    HEAPF64[$13>>3] = $612;
    $613 = +HEAPF64[$10>>3];
    $614 = $582 * $613;
    $615 = +HEAPF64[$11>>3];
    $616 = +HEAPF64[$2>>3];
    $617 = $615 * $616;
    $618 = $617 - $614;
    HEAPF64[$14>>3] = $618;
    $619 = $399 * $590;
    $620 = +HEAPF64[$15>>3];
    $621 = $602 * $620;
    $622 = $619 + $621;
    $623 = $399 * $592;
    $624 = $623 + $622;
    HEAPF64[$16>>3] = $624;
    $625 = +HEAPF64[$17>>3];
    $626 = $602 * $625;
    $627 = $399 * $597;
    $628 = $627 + $626;
    $629 = $399 * $585;
    $630 = $629 + $628;
    HEAPF64[$18>>3] = $630;
    $631 = $399 * $599;
    $632 = +HEAPF64[$19>>3];
    $633 = $602 * $632;
    $634 = $631 + $633;
    $635 = $399 * $601;
    $636 = $635 + $634;
    HEAPF64[$20>>3] = $636;
    $637 = $590 * $603;
    $638 = +HEAPF64[$15>>3];
    $639 = $399 * $638;
    $640 = $637 + $639;
    $641 = $592 * $603;
    $642 = $641 + $640;
    HEAPF64[$21>>3] = $642;
    $643 = +HEAPF64[$17>>3];
    $644 = $399 * $643;
    $645 = $597 * $603;
    $646 = $645 + $644;
    $647 = $585 * $603;
    $648 = $647 + $646;
    HEAPF64[$22>>3] = $648;
    $649 = $603 * $599;
    $650 = +HEAPF64[$19>>3];
    $651 = $399 * $650;
    $652 = $649 + $651;
    $653 = $603 * $601;
    $654 = $653 + $652;
    HEAPF64[$23>>3] = $654;
    $655 = +HEAPF64[$29>>3];
    $656 = (+__Z5IKabsd($655));
    $657 = $656 < 9.9999999999999995E-7;
    if ($657) {
     $658 = +HEAPF64[$27>>3];
     $659 = (+__Z5IKabsd($658));
     $660 = $659 + 3.14159265358979;
     $661 = (+__Z6IKfmoddd($660,6.2831853071795898));
     $662 = $661 + -3.14159265358979;
     $663 = +HEAPF64[$20>>3];
     $664 = +HEAPF64[$14>>3];
     $665 = +HEAPF64[$21>>3];
     $666 = +HEAPF64[$22>>3];
     $667 = (+__Z5IKabsd($662));
     $668 = $667 < 9.9999999999999995E-7;
     if ($668) {
      $669 = $654 + -1.0;
      $670 = (+__Z5IKabsd($669));
      $671 = $670 < 9.9999999999999995E-7;
      if ($671) {
       $672 = (+__Z5IKabsd($663));
       $673 = $672 < 9.9999999999999995E-7;
       if ($673) {
        $674 = (+__Z5IKabsd($664));
        $675 = $674 < 9.9999999999999995E-7;
        if ($675) {
         $676 = (+__Z5IKabsd($665));
         $677 = $676 < 9.9999999999999995E-7;
         if ($677) {
          $678 = (+__Z5IKabsd($666));
          $679 = $678 < 9.9999999999999995E-7;
          if ($679) {
           HEAP16[$j3valid>>1] = 0;
           HEAP8[$30>>0] = 2;
           $680 = +HEAPF64[$14>>3];
           $681 = +HEAPF64[$20>>3];
           __Z16IKatan2WithCheckIdE10CheckValueIT_ES1_S1_S1_($x129,$680,$681,1.9999999999999999E-6);
           $682 = HEAP8[$31>>0]|0;
           $683 = ($682<<24>>24)==(0);
           if ($683) {
            break;
           }
           $684 = +HEAPF64[$x129>>3];
           $685 = -$684;
           HEAPF64[$j3array>>3] = $685;
           $686 = (+__Z5IKsind($685));
           HEAPF64[$sj3array>>3] = $686;
           $687 = (+__Z5IKcosd($685));
           HEAPF64[$cj3array>>3] = $687;
           $688 = 3.14159265358979 - $684;
           HEAPF64[$32>>3] = $688;
           $689 = (+__Z5IKsind($688));
           HEAPF64[$33>>3] = $689;
           $690 = +HEAPF64[$32>>3];
           $691 = (+__Z5IKcosd($690));
           HEAPF64[$34>>3] = $691;
           $692 = +HEAPF64[$j3array>>3];
           $693 = $692 > 3.14159265358979;
           if ($693) {
            $694 = $692 + -6.2831853071795898;
            HEAPF64[$j3array>>3] = $694;
           } else {
            $695 = $692 < -3.14159265358979;
            if ($695) {
             $696 = $692 + 6.2831853071795898;
             HEAPF64[$j3array>>3] = $696;
            }
           }
           HEAP8[$j3valid>>0] = 1;
           $697 = +HEAPF64[$32>>3];
           $698 = $697 > 3.14159265358979;
           if ($698) {
            $699 = $697 + -6.2831853071795898;
            HEAPF64[$32>>3] = $699;
           } else {
            $700 = $697 < -3.14159265358979;
            if ($700) {
             $701 = $697 + 6.2831853071795898;
             HEAPF64[$32>>3] = $701;
            }
           }
           HEAP8[$35>>0] = 1;
           $ij3$0288 = 0;
           while(1) {
            $702 = (($j3valid) + ($ij3$0288)|0);
            $703 = HEAP8[$702>>0]|0;
            $704 = ($703<<24>>24)==(0);
            L159: do {
             if (!($704)) {
              $705 = $ij3$0288&255;
              HEAP8[$36>>0] = $705;
              HEAP8[$37>>0] = -1;
              $iij3$0281 = (($ij3$0288) + 1)|0;
              $706 = ($iij3$0281|0)<(2);
              do {
               if ($706) {
                $707 = (($sj3array) + ($ij3$0288<<3)|0);
                $708 = (($j3valid) + ($iij3$0281)|0);
                $709 = HEAP8[$708>>0]|0;
                $710 = ($709<<24>>24)==(0);
                if ($710) {
                 break;
                }
                $711 = (($cj3array) + ($ij3$0288<<3)|0);
                $712 = +HEAPF64[$711>>3];
                $713 = (($cj3array) + ($iij3$0281<<3)|0);
                $714 = +HEAPF64[$713>>3];
                $715 = $712 - $714;
                $716 = (+__Z5IKabsd($715));
                $717 = $716 < 9.9999999999999995E-7;
                if (!($717)) {
                 break;
                }
                $718 = +HEAPF64[$707>>3];
                $719 = (($sj3array) + ($iij3$0281<<3)|0);
                $720 = +HEAPF64[$719>>3];
                $721 = $718 - $720;
                $722 = (+__Z5IKabsd($721));
                $723 = $722 < 9.9999999999999995E-7;
                if (!($723)) {
                 break;
                }
                HEAP8[$708>>0] = 0;
                $724 = $iij3$0281&255;
                HEAP8[$37>>0] = $724;
               }
              } while(0);
              $725 = (($j3array) + ($ij3$0288<<3)|0);
              $726 = +HEAPF64[$725>>3];
              HEAPF64[$38>>3] = $726;
              $727 = (($cj3array) + ($ij3$0288<<3)|0);
              $728 = +HEAPF64[$727>>3];
              HEAPF64[$39>>3] = $728;
              $729 = (($sj3array) + ($ij3$0288<<3)|0);
              $730 = +HEAPF64[$729>>3];
              HEAPF64[$40>>3] = $730;
              $731 = +HEAPF64[$14>>3];
              $732 = +HEAPF64[$38>>3];
              $733 = (+__Z5IKsind($732));
              $734 = $731 * $733;
              $735 = +HEAPF64[$20>>3];
              $736 = (+__Z5IKcosd($732));
              $737 = $735 * $736;
              $738 = $737 - $734;
              $739 = (+__Z5IKabsd($738));
              $740 = $739 > 5.0000000000000004E-6;
              if ($740) {
               break;
              }
              HEAP8[$41>>0] = 1;
              $741 = +HEAPF64[$13>>3];
              $742 = +HEAPF64[$39>>3];
              $743 = $741 * $742;
              $744 = +HEAPF64[$12>>3];
              $745 = +HEAPF64[$40>>3];
              $746 = $744 * $745;
              $747 = -$746;
              $748 = $747 - $743;
              $749 = (+__Z5IKabsd($748));
              $750 = $749 < 1.9999999999999999E-6;
              do {
               if ($750) {
                $751 = $741 * $745;
                $752 = $742 * $744;
                $753 = $752 - $751;
                $754 = (+__Z5IKabsd($753));
                $755 = $754 < 1.9999999999999999E-6;
                if (!($755)) {
                 break;
                }
                $756 = (+__Z5IKsqrd($748));
                $757 = (+__Z5IKsqrd($753));
                $758 = $756 + $757;
                $759 = $758 + -1.0;
                $760 = (+__Z5IKabsd($759));
                $761 = !($760 <= 1.9999999999999999E-6);
                if (!($761)) {
                 break L159;
                }
               }
              } while(0);
              $762 = +HEAPF64[$39>>3];
              $763 = $741 * $762;
              $764 = +HEAPF64[$12>>3];
              $765 = +HEAPF64[$40>>3];
              $766 = $764 * $765;
              $767 = -$766;
              $768 = $767 - $763;
              $769 = $741 * $765;
              $770 = $762 * $764;
              $771 = $770 - $769;
              $772 = (+__Z7IKatan2dd($768,$771));
              HEAPF64[$j5array>>3] = $772;
              $773 = (+__Z5IKsind($772));
              HEAPF64[$sj5array>>3] = $773;
              $774 = (+__Z5IKcosd($772));
              HEAPF64[$cj5array>>3] = $774;
              $775 = $772 > 3.14159265358979;
              do {
               if ($775) {
                $776 = $772 + -6.2831853071795898;
                HEAPF64[$j5array>>3] = $776;
               } else {
                $777 = $772 < -3.14159265358979;
                if (!($777)) {
                 break;
                }
                $778 = $772 + 6.2831853071795898;
                HEAPF64[$j5array>>3] = $778;
               }
              } while(0);
              HEAP8[$42>>0] = 0;
              HEAP8[$43>>0] = -1;
              $779 = +HEAPF64[$j5array>>3];
              HEAPF64[$44>>3] = $779;
              $780 = +HEAPF64[$cj5array>>3];
              HEAPF64[$45>>3] = $780;
              $781 = +HEAPF64[$sj5array>>3];
              HEAPF64[$46>>3] = $781;
              $782 = +HEAPF64[$44>>3];
              $783 = (+__Z5IKsind($782));
              $784 = (+__Z5IKcosd($782));
              $785 = +HEAPF64[$40>>3];
              $786 = $783 * $785;
              $787 = +HEAPF64[$39>>3];
              $788 = $784 * $787;
              $789 = +HEAPF64[$18>>3];
              $790 = $785 * $789;
              $791 = $783 + $790;
              $792 = +HEAPF64[$13>>3];
              $793 = $787 * $792;
              $794 = $791 + $793;
              $795 = +HEAPF64[$16>>3];
              $796 = -$784;
              $797 = +HEAPF64[$12>>3];
              $798 = $783 * $787;
              $799 = $784 * $785;
              $800 = $799 + $798;
              $801 = $800 + $792;
              $802 = $786 - $788;
              $803 = $802 + $797;
              $804 = $789 + $802;
              $805 = $785 * $797;
              $806 = -$783;
              $807 = $806 - $805;
              $808 = $787 * $795;
              $809 = $808 + $807;
              $810 = $785 * $792;
              $811 = $796 - $810;
              $812 = $787 * $789;
              $813 = $812 + $811;
              $814 = $785 * $796;
              $815 = $814 - $798;
              $816 = $815 + $795;
              $817 = (+__Z5IKabsd($794));
              $818 = $817 > 5.0000000000000004E-6;
              if ($818) {
               break;
              }
              $819 = $785 * $795;
              $820 = $819 - $784;
              $821 = $787 * $797;
              $822 = $820 + $821;
              $823 = (+__Z5IKabsd($822));
              $824 = $823 > 5.0000000000000004E-6;
              if ($824) {
               break;
              }
              $825 = (+__Z5IKabsd($801));
              $826 = $825 > 5.0000000000000004E-6;
              if ($826) {
               break;
              }
              $827 = (+__Z5IKabsd($803));
              $828 = $827 > 5.0000000000000004E-6;
              if ($828) {
               break;
              }
              $829 = (+__Z5IKabsd($804));
              $830 = $829 > 5.0000000000000004E-6;
              if ($830) {
               break;
              }
              $831 = (+__Z5IKabsd($809));
              $832 = $831 > 5.0000000000000004E-6;
              if ($832) {
               break;
              }
              $833 = (+__Z5IKabsd($813));
              $834 = $833 > 5.0000000000000004E-6;
              if ($834) {
               break;
              }
              $835 = (+__Z5IKabsd($816));
              $836 = $835 > 5.0000000000000004E-6;
              if ($836) {
               break;
              }
              __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEEC2Ej($vinfos,6);
              $837 = HEAP32[$vinfos>>2]|0;
              $838 = (($837) + 17|0);
              HEAP8[$838>>0] = 1;
              $839 = +HEAPF64[$this>>3];
              $840 = HEAP32[$vinfos>>2]|0;
              $841 = (($840) + 8|0);
              HEAPF64[$841>>3] = $839;
              $842 = HEAP8[$47>>0]|0;
              $843 = HEAP32[$vinfos>>2]|0;
              $844 = (($843) + 19|0);
              HEAP8[$844>>0] = $842;
              $845 = HEAP8[$48>>0]|0;
              $846 = HEAP32[$vinfos>>2]|0;
              $847 = (($846) + 20|0);
              HEAP8[$847>>0] = $845;
              $848 = HEAP8[$49>>0]|0;
              $849 = HEAP32[$vinfos>>2]|0;
              $850 = (($849) + 18|0);
              HEAP8[$850>>0] = $848;
              $851 = HEAP32[$vinfos>>2]|0;
              $852 = (($851) + 41|0);
              HEAP8[$852>>0] = 1;
              $853 = +HEAPF64[$50>>3];
              $854 = HEAP32[$vinfos>>2]|0;
              $855 = (($854) + 32|0);
              HEAPF64[$855>>3] = $853;
              $856 = HEAP8[$51>>0]|0;
              $857 = HEAP32[$vinfos>>2]|0;
              $858 = (($857) + 43|0);
              HEAP8[$858>>0] = $856;
              $859 = HEAP8[$52>>0]|0;
              $860 = HEAP32[$vinfos>>2]|0;
              $861 = (($860) + 44|0);
              HEAP8[$861>>0] = $859;
              $862 = HEAP8[$53>>0]|0;
              $863 = HEAP32[$vinfos>>2]|0;
              $864 = (($863) + 42|0);
              HEAP8[$864>>0] = $862;
              $865 = HEAP32[$vinfos>>2]|0;
              $866 = (($865) + 65|0);
              HEAP8[$866>>0] = 1;
              $867 = +HEAPF64[$54>>3];
              $868 = HEAP32[$vinfos>>2]|0;
              $869 = (($868) + 56|0);
              HEAPF64[$869>>3] = $867;
              $870 = HEAP8[$55>>0]|0;
              $871 = HEAP32[$vinfos>>2]|0;
              $872 = (($871) + 67|0);
              HEAP8[$872>>0] = $870;
              $873 = HEAP8[$56>>0]|0;
              $874 = HEAP32[$vinfos>>2]|0;
              $875 = (($874) + 68|0);
              HEAP8[$875>>0] = $873;
              $876 = HEAP8[$57>>0]|0;
              $877 = HEAP32[$vinfos>>2]|0;
              $878 = (($877) + 66|0);
              HEAP8[$878>>0] = $876;
              $879 = HEAP32[$vinfos>>2]|0;
              $880 = (($879) + 89|0);
              HEAP8[$880>>0] = 1;
              $881 = +HEAPF64[$38>>3];
              $882 = HEAP32[$vinfos>>2]|0;
              $883 = (($882) + 80|0);
              HEAPF64[$883>>3] = $881;
              $884 = HEAP8[$36>>0]|0;
              $885 = HEAP32[$vinfos>>2]|0;
              $886 = (($885) + 91|0);
              HEAP8[$886>>0] = $884;
              $887 = HEAP8[$37>>0]|0;
              $888 = HEAP32[$vinfos>>2]|0;
              $889 = (($888) + 92|0);
              HEAP8[$889>>0] = $887;
              $890 = HEAP8[$30>>0]|0;
              $891 = HEAP32[$vinfos>>2]|0;
              $892 = (($891) + 90|0);
              HEAP8[$892>>0] = $890;
              $893 = HEAP32[$vinfos>>2]|0;
              $894 = (($893) + 113|0);
              HEAP8[$894>>0] = 1;
              $895 = +HEAPF64[$27>>3];
              $896 = HEAP32[$vinfos>>2]|0;
              $897 = (($896) + 104|0);
              HEAPF64[$897>>3] = $895;
              $898 = HEAP8[$25>>0]|0;
              $899 = HEAP32[$vinfos>>2]|0;
              $900 = (($899) + 115|0);
              HEAP8[$900>>0] = $898;
              $901 = HEAP8[$26>>0]|0;
              $902 = HEAP32[$vinfos>>2]|0;
              $903 = (($902) + 116|0);
              HEAP8[$903>>0] = $901;
              $904 = HEAP8[$24>>0]|0;
              $905 = HEAP32[$vinfos>>2]|0;
              $906 = (($905) + 114|0);
              HEAP8[$906>>0] = $904;
              $907 = HEAP32[$vinfos>>2]|0;
              $908 = (($907) + 137|0);
              HEAP8[$908>>0] = 1;
              $909 = +HEAPF64[$44>>3];
              $910 = HEAP32[$vinfos>>2]|0;
              $911 = (($910) + 128|0);
              HEAPF64[$911>>3] = $909;
              $912 = HEAP8[$42>>0]|0;
              $913 = HEAP32[$vinfos>>2]|0;
              $914 = (($913) + 139|0);
              HEAP8[$914>>0] = $912;
              $915 = HEAP8[$43>>0]|0;
              $916 = HEAP32[$vinfos>>2]|0;
              $917 = (($916) + 140|0);
              HEAP8[$917>>0] = $915;
              $918 = HEAP8[$41>>0]|0;
              $919 = HEAP32[$vinfos>>2]|0;
              $920 = (($919) + 138|0);
              HEAP8[$920>>0] = $918;
              __ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ej($vfree,0);
              $921 = HEAP32[$solutions>>2]|0;
              $922 = (($921) + 8|0);
              $923 = HEAP32[$922>>2]|0;
              (FUNCTION_TABLE_iiii[$923 & 31]($solutions,$vinfos,$vfree)|0);
              __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($vfree);
              __ZNSt3__113__vector_baseIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEED2Ev($vinfos);
             }
            } while(0);
            $924 = (($ij3$0288) + 1)|0;
            $925 = ($924|0)<(2);
            if ($925) {
             $ij3$0288 = $924;
            } else {
             break L7;
            }
           }
          }
         }
        }
       }
      }
     }
     $926 = +HEAPF64[$27>>3];
     $927 = $926 + -3.14159265358979;
     $928 = (+__Z5IKabsd($927));
     $929 = $928 + 3.14159265358979;
     $930 = (+__Z6IKfmoddd($929,6.2831853071795898));
     $931 = $930 + -3.14159265358979;
     $932 = +HEAPF64[$20>>3];
     $933 = +HEAPF64[$14>>3];
     $934 = +HEAPF64[$21>>3];
     $935 = +HEAPF64[$22>>3];
     $936 = (+__Z5IKabsd($931));
     $937 = $936 < 9.9999999999999995E-7;
     if (!($937)) {
      break;
     }
     $938 = +HEAPF64[$23>>3];
     $939 = $938 + 1.0;
     $940 = (+__Z5IKabsd($939));
     $941 = $940 < 9.9999999999999995E-7;
     if (!($941)) {
      break;
     }
     $942 = (+__Z5IKabsd($932));
     $943 = $942 < 9.9999999999999995E-7;
     if (!($943)) {
      break;
     }
     $944 = (+__Z5IKabsd($933));
     $945 = $944 < 9.9999999999999995E-7;
     if (!($945)) {
      break;
     }
     $946 = (+__Z5IKabsd($934));
     $947 = $946 < 9.9999999999999995E-7;
     if (!($947)) {
      break;
     }
     $948 = (+__Z5IKabsd($935));
     $949 = $948 < 9.9999999999999995E-7;
     if (!($949)) {
      break;
     }
     HEAP16[$j3valid7>>1] = 0;
     HEAP8[$58>>0] = 2;
     $950 = +HEAPF64[$14>>3];
     $951 = +HEAPF64[$20>>3];
     __Z16IKatan2WithCheckIdE10CheckValueIT_ES1_S1_S1_($x139,$950,$951,1.9999999999999999E-6);
     $952 = HEAP8[$59>>0]|0;
     $953 = ($952<<24>>24)==(0);
     if ($953) {
      break;
     }
     $954 = +HEAPF64[$x139>>3];
     $955 = -$954;
     HEAPF64[$j3array4>>3] = $955;
     $956 = (+__Z5IKsind($955));
     HEAPF64[$sj3array6>>3] = $956;
     $957 = (+__Z5IKcosd($955));
     HEAPF64[$cj3array5>>3] = $957;
     $958 = 3.14159265358979 - $954;
     HEAPF64[$60>>3] = $958;
     $959 = (+__Z5IKsind($958));
     HEAPF64[$61>>3] = $959;
     $960 = +HEAPF64[$60>>3];
     $961 = (+__Z5IKcosd($960));
     HEAPF64[$62>>3] = $961;
     $962 = +HEAPF64[$j3array4>>3];
     $963 = $962 > 3.14159265358979;
     if ($963) {
      $964 = $962 + -6.2831853071795898;
      HEAPF64[$j3array4>>3] = $964;
     } else {
      $965 = $962 < -3.14159265358979;
      if ($965) {
       $966 = $962 + 6.2831853071795898;
       HEAPF64[$j3array4>>3] = $966;
      }
     }
     HEAP8[$j3valid7>>0] = 1;
     $967 = +HEAPF64[$60>>3];
     $968 = $967 > 3.14159265358979;
     if ($968) {
      $969 = $967 + -6.2831853071795898;
      HEAPF64[$60>>3] = $969;
     } else {
      $970 = $967 < -3.14159265358979;
      if ($970) {
       $971 = $967 + 6.2831853071795898;
       HEAPF64[$60>>3] = $971;
      }
     }
     HEAP8[$63>>0] = 1;
     $ij38$0280 = 0;
     while(1) {
      $972 = (($j3valid7) + ($ij38$0280)|0);
      $973 = HEAP8[$972>>0]|0;
      $974 = ($973<<24>>24)==(0);
      L206: do {
       if (!($974)) {
        $975 = $ij38$0280&255;
        HEAP8[$64>>0] = $975;
        HEAP8[$65>>0] = -1;
        $iij39$0273 = (($ij38$0280) + 1)|0;
        $976 = ($iij39$0273|0)<(2);
        do {
         if ($976) {
          $977 = (($sj3array6) + ($ij38$0280<<3)|0);
          $978 = (($j3valid7) + ($iij39$0273)|0);
          $979 = HEAP8[$978>>0]|0;
          $980 = ($979<<24>>24)==(0);
          if ($980) {
           break;
          }
          $981 = (($cj3array5) + ($ij38$0280<<3)|0);
          $982 = +HEAPF64[$981>>3];
          $983 = (($cj3array5) + ($iij39$0273<<3)|0);
          $984 = +HEAPF64[$983>>3];
          $985 = $982 - $984;
          $986 = (+__Z5IKabsd($985));
          $987 = $986 < 9.9999999999999995E-7;
          if (!($987)) {
           break;
          }
          $988 = +HEAPF64[$977>>3];
          $989 = (($sj3array6) + ($iij39$0273<<3)|0);
          $990 = +HEAPF64[$989>>3];
          $991 = $988 - $990;
          $992 = (+__Z5IKabsd($991));
          $993 = $992 < 9.9999999999999995E-7;
          if (!($993)) {
           break;
          }
          HEAP8[$978>>0] = 0;
          $994 = $iij39$0273&255;
          HEAP8[$65>>0] = $994;
         }
        } while(0);
        $995 = (($j3array4) + ($ij38$0280<<3)|0);
        $996 = +HEAPF64[$995>>3];
        HEAPF64[$66>>3] = $996;
        $997 = (($cj3array5) + ($ij38$0280<<3)|0);
        $998 = +HEAPF64[$997>>3];
        HEAPF64[$67>>3] = $998;
        $999 = (($sj3array6) + ($ij38$0280<<3)|0);
        $1000 = +HEAPF64[$999>>3];
        HEAPF64[$68>>3] = $1000;
        $1001 = +HEAPF64[$14>>3];
        $1002 = +HEAPF64[$66>>3];
        $1003 = (+__Z5IKsind($1002));
        $1004 = $1001 * $1003;
        $1005 = +HEAPF64[$20>>3];
        $1006 = (+__Z5IKcosd($1002));
        $1007 = $1005 * $1006;
        $1008 = $1007 - $1004;
        $1009 = (+__Z5IKabsd($1008));
        $1010 = $1009 > 5.0000000000000004E-6;
        if ($1010) {
         break;
        }
        HEAP8[$69>>0] = 1;
        $1011 = +HEAPF64[$67>>3];
        $1012 = +HEAPF64[$13>>3];
        $1013 = $1011 * $1012;
        $1014 = +HEAPF64[$18>>3];
        $1015 = +HEAPF64[$68>>3];
        $1016 = $1014 * $1015;
        $1017 = -$1016;
        $1018 = $1017 - $1013;
        $1019 = (+__Z5IKabsd($1018));
        $1020 = $1019 < 1.9999999999999999E-6;
        do {
         if ($1020) {
          $1021 = $1012 * $1015;
          $1022 = $1011 * $1014;
          $1023 = $1021 - $1022;
          $1024 = (+__Z5IKabsd($1023));
          $1025 = $1024 < 1.9999999999999999E-6;
          if (!($1025)) {
           break;
          }
          $1026 = (+__Z5IKsqrd($1018));
          $1027 = (+__Z5IKsqrd($1023));
          $1028 = $1026 + $1027;
          $1029 = $1028 + -1.0;
          $1030 = (+__Z5IKabsd($1029));
          $1031 = !($1030 <= 1.9999999999999999E-6);
          if (!($1031)) {
           break L206;
          }
         }
        } while(0);
        $1032 = +HEAPF64[$13>>3];
        $1033 = $1011 * $1032;
        $1034 = +HEAPF64[$18>>3];
        $1035 = -$1034;
        $1036 = +HEAPF64[$68>>3];
        $1037 = $1036 * $1035;
        $1038 = $1037 - $1033;
        $1039 = $1032 * $1036;
        $1040 = $1011 * $1035;
        $1041 = $1040 + $1039;
        $1042 = (+__Z7IKatan2dd($1038,$1041));
        HEAPF64[$j5array11>>3] = $1042;
        $1043 = (+__Z5IKsind($1042));
        HEAPF64[$sj5array13>>3] = $1043;
        $1044 = (+__Z5IKcosd($1042));
        HEAPF64[$cj5array12>>3] = $1044;
        $1045 = $1042 > 3.14159265358979;
        do {
         if ($1045) {
          $1046 = $1042 + -6.2831853071795898;
          HEAPF64[$j5array11>>3] = $1046;
         } else {
          $1047 = $1042 < -3.14159265358979;
          if (!($1047)) {
           break;
          }
          $1048 = $1042 + 6.2831853071795898;
          HEAPF64[$j5array11>>3] = $1048;
         }
        } while(0);
        HEAP8[$70>>0] = 0;
        HEAP8[$71>>0] = -1;
        $1049 = +HEAPF64[$j5array11>>3];
        HEAPF64[$72>>3] = $1049;
        $1050 = +HEAPF64[$cj5array12>>3];
        HEAPF64[$73>>3] = $1050;
        $1051 = +HEAPF64[$sj5array13>>3];
        HEAPF64[$74>>3] = $1051;
        $1052 = +HEAPF64[$72>>3];
        $1053 = (+__Z5IKsind($1052));
        $1054 = (+__Z5IKcosd($1052));
        $1055 = +HEAPF64[$68>>3];
        $1056 = +HEAPF64[$67>>3];
        $1057 = $1053 * $1056;
        $1058 = $1054 * $1055;
        $1059 = +HEAPF64[$18>>3];
        $1060 = $1055 * $1059;
        $1061 = $1053 + $1060;
        $1062 = +HEAPF64[$13>>3];
        $1063 = $1056 * $1062;
        $1064 = $1061 + $1063;
        $1065 = +HEAPF64[$16>>3];
        $1066 = +HEAPF64[$12>>3];
        $1067 = $1055 * $1062;
        $1068 = $1054 - $1067;
        $1069 = $1056 * $1059;
        $1070 = $1069 + $1068;
        $1071 = $1055 * $1065;
        $1072 = $1071 - $1054;
        $1073 = $1056 * $1066;
        $1074 = $1072 + $1073;
        $1075 = $1054 * $1056;
        $1076 = $1075 + $1059;
        $1077 = $1053 * $1055;
        $1078 = $1077 + $1076;
        $1079 = $1057 - $1058;
        $1080 = $1079 + $1062;
        $1081 = $1079 + $1065;
        $1082 = -$1077;
        $1083 = $1082 - $1075;
        $1084 = $1083 + $1066;
        $1085 = (+__Z5IKabsd($1064));
        $1086 = $1085 > 5.0000000000000004E-6;
        if ($1086) {
         break;
        }
        $1087 = $1056 * $1065;
        $1088 = $1053 + $1087;
        $1089 = $1055 * $1066;
        $1090 = $1088 - $1089;
        $1091 = (+__Z5IKabsd($1090));
        $1092 = $1091 > 5.0000000000000004E-6;
        if ($1092) {
         break;
        }
        $1093 = (+__Z5IKabsd($1070));
        $1094 = $1093 > 5.0000000000000004E-6;
        if ($1094) {
         break;
        }
        $1095 = (+__Z5IKabsd($1074));
        $1096 = $1095 > 5.0000000000000004E-6;
        if ($1096) {
         break;
        }
        $1097 = (+__Z5IKabsd($1078));
        $1098 = $1097 > 5.0000000000000004E-6;
        if ($1098) {
         break;
        }
        $1099 = (+__Z5IKabsd($1080));
        $1100 = $1099 > 5.0000000000000004E-6;
        if ($1100) {
         break;
        }
        $1101 = (+__Z5IKabsd($1081));
        $1102 = $1101 > 5.0000000000000004E-6;
        if ($1102) {
         break;
        }
        $1103 = (+__Z5IKabsd($1084));
        $1104 = $1103 > 5.0000000000000004E-6;
        if ($1104) {
         break;
        }
        __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEEC2Ej($vinfos19,6);
        $1105 = HEAP32[$vinfos19>>2]|0;
        $1106 = (($1105) + 17|0);
        HEAP8[$1106>>0] = 1;
        $1107 = +HEAPF64[$this>>3];
        $1108 = HEAP32[$vinfos19>>2]|0;
        $1109 = (($1108) + 8|0);
        HEAPF64[$1109>>3] = $1107;
        $1110 = HEAP8[$75>>0]|0;
        $1111 = HEAP32[$vinfos19>>2]|0;
        $1112 = (($1111) + 19|0);
        HEAP8[$1112>>0] = $1110;
        $1113 = HEAP8[$76>>0]|0;
        $1114 = HEAP32[$vinfos19>>2]|0;
        $1115 = (($1114) + 20|0);
        HEAP8[$1115>>0] = $1113;
        $1116 = HEAP8[$77>>0]|0;
        $1117 = HEAP32[$vinfos19>>2]|0;
        $1118 = (($1117) + 18|0);
        HEAP8[$1118>>0] = $1116;
        $1119 = HEAP32[$vinfos19>>2]|0;
        $1120 = (($1119) + 41|0);
        HEAP8[$1120>>0] = 1;
        $1121 = +HEAPF64[$78>>3];
        $1122 = HEAP32[$vinfos19>>2]|0;
        $1123 = (($1122) + 32|0);
        HEAPF64[$1123>>3] = $1121;
        $1124 = HEAP8[$79>>0]|0;
        $1125 = HEAP32[$vinfos19>>2]|0;
        $1126 = (($1125) + 43|0);
        HEAP8[$1126>>0] = $1124;
        $1127 = HEAP8[$80>>0]|0;
        $1128 = HEAP32[$vinfos19>>2]|0;
        $1129 = (($1128) + 44|0);
        HEAP8[$1129>>0] = $1127;
        $1130 = HEAP8[$81>>0]|0;
        $1131 = HEAP32[$vinfos19>>2]|0;
        $1132 = (($1131) + 42|0);
        HEAP8[$1132>>0] = $1130;
        $1133 = HEAP32[$vinfos19>>2]|0;
        $1134 = (($1133) + 65|0);
        HEAP8[$1134>>0] = 1;
        $1135 = +HEAPF64[$82>>3];
        $1136 = HEAP32[$vinfos19>>2]|0;
        $1137 = (($1136) + 56|0);
        HEAPF64[$1137>>3] = $1135;
        $1138 = HEAP8[$83>>0]|0;
        $1139 = HEAP32[$vinfos19>>2]|0;
        $1140 = (($1139) + 67|0);
        HEAP8[$1140>>0] = $1138;
        $1141 = HEAP8[$84>>0]|0;
        $1142 = HEAP32[$vinfos19>>2]|0;
        $1143 = (($1142) + 68|0);
        HEAP8[$1143>>0] = $1141;
        $1144 = HEAP8[$85>>0]|0;
        $1145 = HEAP32[$vinfos19>>2]|0;
        $1146 = (($1145) + 66|0);
        HEAP8[$1146>>0] = $1144;
        $1147 = HEAP32[$vinfos19>>2]|0;
        $1148 = (($1147) + 89|0);
        HEAP8[$1148>>0] = 1;
        $1149 = +HEAPF64[$66>>3];
        $1150 = HEAP32[$vinfos19>>2]|0;
        $1151 = (($1150) + 80|0);
        HEAPF64[$1151>>3] = $1149;
        $1152 = HEAP8[$64>>0]|0;
        $1153 = HEAP32[$vinfos19>>2]|0;
        $1154 = (($1153) + 91|0);
        HEAP8[$1154>>0] = $1152;
        $1155 = HEAP8[$65>>0]|0;
        $1156 = HEAP32[$vinfos19>>2]|0;
        $1157 = (($1156) + 92|0);
        HEAP8[$1157>>0] = $1155;
        $1158 = HEAP8[$58>>0]|0;
        $1159 = HEAP32[$vinfos19>>2]|0;
        $1160 = (($1159) + 90|0);
        HEAP8[$1160>>0] = $1158;
        $1161 = HEAP32[$vinfos19>>2]|0;
        $1162 = (($1161) + 113|0);
        HEAP8[$1162>>0] = 1;
        $1163 = +HEAPF64[$27>>3];
        $1164 = HEAP32[$vinfos19>>2]|0;
        $1165 = (($1164) + 104|0);
        HEAPF64[$1165>>3] = $1163;
        $1166 = HEAP8[$25>>0]|0;
        $1167 = HEAP32[$vinfos19>>2]|0;
        $1168 = (($1167) + 115|0);
        HEAP8[$1168>>0] = $1166;
        $1169 = HEAP8[$26>>0]|0;
        $1170 = HEAP32[$vinfos19>>2]|0;
        $1171 = (($1170) + 116|0);
        HEAP8[$1171>>0] = $1169;
        $1172 = HEAP8[$24>>0]|0;
        $1173 = HEAP32[$vinfos19>>2]|0;
        $1174 = (($1173) + 114|0);
        HEAP8[$1174>>0] = $1172;
        $1175 = HEAP32[$vinfos19>>2]|0;
        $1176 = (($1175) + 137|0);
        HEAP8[$1176>>0] = 1;
        $1177 = +HEAPF64[$72>>3];
        $1178 = HEAP32[$vinfos19>>2]|0;
        $1179 = (($1178) + 128|0);
        HEAPF64[$1179>>3] = $1177;
        $1180 = HEAP8[$70>>0]|0;
        $1181 = HEAP32[$vinfos19>>2]|0;
        $1182 = (($1181) + 139|0);
        HEAP8[$1182>>0] = $1180;
        $1183 = HEAP8[$71>>0]|0;
        $1184 = HEAP32[$vinfos19>>2]|0;
        $1185 = (($1184) + 140|0);
        HEAP8[$1185>>0] = $1183;
        $1186 = HEAP8[$69>>0]|0;
        $1187 = HEAP32[$vinfos19>>2]|0;
        $1188 = (($1187) + 138|0);
        HEAP8[$1188>>0] = $1186;
        __ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ej($vfree20,0);
        $1189 = HEAP32[$solutions>>2]|0;
        $1190 = (($1189) + 8|0);
        $1191 = HEAP32[$1190>>2]|0;
        (FUNCTION_TABLE_iiii[$1191 & 31]($solutions,$vinfos19,$vfree20)|0);
        __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($vfree20);
        __ZNSt3__113__vector_baseIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEED2Ev($vinfos19);
       }
      } while(0);
      $1192 = (($ij38$0280) + 1)|0;
      $1193 = ($1192|0)<(2);
      if ($1193) {
       $ij38$0280 = $1192;
      } else {
       break L7;
      }
     }
    }
    HEAP8[$86>>0] = 1;
    $1194 = +HEAPF64[$29>>3];
    __Z21IKPowWithIntegerCheckIdE10CheckValueIT_ES1_i($x148,$1194,-1);
    $1195 = HEAP8[$87>>0]|0;
    $1196 = ($1195<<24>>24)==(0);
    if (!($1196)) {
     $1197 = +HEAPF64[$x148>>3];
     $1198 = +HEAPF64[$14>>3];
     __Z21IKPowWithIntegerCheckIdE10CheckValueIT_ES1_i($x149,$1198,-1);
     $1199 = HEAP8[$88>>0]|0;
     $1200 = ($1199<<24>>24)==(0);
     if (!($1200)) {
      $1201 = +HEAPF64[$x149>>3];
      $1202 = $1197 * $1201;
      $1203 = +HEAPF64[$28>>3];
      $1204 = $1203 * $1203;
      $1205 = 1.0 - $1204;
      $1206 = +HEAPF64[$20>>3];
      $1207 = $1206 * $1206;
      $1208 = $1205 - $1207;
      $1209 = $1202 * $1208;
      $1210 = (+__Z5IKabsd($1209));
      $1211 = $1210 < 1.9999999999999999E-6;
      if ($1211) {
       $1212 = $1197 * $1206;
       $1213 = -$1212;
       $1214 = (+__Z5IKabsd($1213));
       $1215 = $1214 < 1.9999999999999999E-6;
       if ($1215) {
        $1216 = (+__Z5IKsqrd($1209));
        $1217 = (+__Z5IKsqrd($1213));
        $1218 = $1216 + $1217;
        $1219 = $1218 + -1.0;
        $1220 = (+__Z5IKabsd($1219));
        $1221 = !($1220 <= 1.9999999999999999E-6);
        if (!($1221)) {
         break;
        }
       }
      }
      $1222 = +HEAPF64[$x149>>3];
      $1223 = $1197 * $1222;
      $1224 = +HEAPF64[$28>>3];
      $1225 = $1224 * $1224;
      $1226 = 1.0 - $1225;
      $1227 = +HEAPF64[$20>>3];
      $1228 = $1227 * $1227;
      $1229 = $1226 - $1228;
      $1230 = $1223 * $1229;
      $1231 = $1197 * $1227;
      $1232 = -$1231;
      $1233 = (+__Z7IKatan2dd($1230,$1232));
      HEAPF64[$j3array22>>3] = $1233;
      $1234 = (+__Z5IKsind($1233));
      HEAPF64[$sj3array24>>3] = $1234;
      $1235 = (+__Z5IKcosd($1233));
      HEAPF64[$cj3array23>>3] = $1235;
      $1236 = $1233 > 3.14159265358979;
      if ($1236) {
       $1237 = $1233 + -6.2831853071795898;
       HEAPF64[$j3array22>>3] = $1237;
      } else {
       $1238 = $1233 < -3.14159265358979;
       if ($1238) {
        $1239 = $1233 + 6.2831853071795898;
        HEAPF64[$j3array22>>3] = $1239;
       }
      }
      HEAP8[$89>>0] = 0;
      HEAP8[$90>>0] = -1;
      $1240 = +HEAPF64[$j3array22>>3];
      HEAPF64[$91>>3] = $1240;
      $1241 = +HEAPF64[$cj3array23>>3];
      HEAPF64[$92>>3] = $1241;
      $1242 = +HEAPF64[$sj3array24>>3];
      HEAPF64[$93>>3] = $1242;
      $1243 = +HEAPF64[$91>>3];
      $1244 = (+__Z5IKsind($1243));
      $1245 = (+__Z5IKcosd($1243));
      $1246 = +HEAPF64[$28>>3];
      $1247 = +HEAPF64[$29>>3];
      $1248 = $1245 * $1247;
      $1249 = +HEAPF64[$14>>3];
      $1250 = $1244 * $1249;
      $1251 = +HEAPF64[$20>>3];
      $1252 = $1245 * $1251;
      $1253 = $1248 + $1251;
      $1254 = $1244 * $1251;
      $1255 = $1245 * $1249;
      $1256 = $1255 + $1254;
      $1257 = $1247 + $1252;
      $1258 = $1257 - $1250;
      $1259 = $1246 * $1250;
      $1260 = +HEAPF64[$23>>3];
      $1261 = -$1260;
      $1262 = $1247 * $1261;
      $1263 = $1259 + $1262;
      $1264 = $1246 * $1252;
      $1265 = $1263 - $1264;
      $1266 = +HEAPF64[$21>>3];
      $1267 = $1246 * $1266;
      $1268 = +HEAPF64[$12>>3];
      $1269 = $1244 * $1268;
      $1270 = $1247 * $1269;
      $1271 = -$1270;
      $1272 = $1271 - $1267;
      $1273 = +HEAPF64[$16>>3];
      $1274 = $1248 * $1273;
      $1275 = $1274 + $1272;
      $1276 = +HEAPF64[$18>>3];
      $1277 = $1248 * $1276;
      $1278 = +HEAPF64[$22>>3];
      $1279 = $1246 * $1278;
      $1280 = $1277 - $1279;
      $1281 = +HEAPF64[$13>>3];
      $1282 = $1244 * $1281;
      $1283 = $1247 * $1282;
      $1284 = $1280 - $1283;
      $1285 = $1248 * $1251;
      $1286 = $1285 + 1.0;
      $1287 = $1247 * $1250;
      $1288 = $1286 - $1287;
      $1289 = $1246 * $1261;
      $1290 = $1289 + $1288;
      $1291 = (+__Z5IKabsd($1253));
      $1292 = $1291 > 5.0000000000000004E-6;
      if (!($1292)) {
       $1293 = $1244 * $1247;
       $1294 = $1249 - $1293;
       $1295 = (+__Z5IKabsd($1294));
       $1296 = $1295 > 5.0000000000000004E-6;
       if (!($1296)) {
        $1297 = (+__Z5IKabsd($1256));
        $1298 = $1297 > 5.0000000000000004E-6;
        if (!($1298)) {
         $1299 = (+__Z5IKabsd($1258));
         $1300 = $1299 > 5.0000000000000004E-6;
         if (!($1300)) {
          $1301 = (+__Z5IKabsd($1265));
          $1302 = $1301 > 5.0000000000000004E-6;
          if (!($1302)) {
           $1303 = (+__Z5IKabsd($1275));
           $1304 = $1303 > 5.0000000000000004E-6;
           if (!($1304)) {
            $1305 = (+__Z5IKabsd($1284));
            $1306 = $1305 > 5.0000000000000004E-6;
            if (!($1306)) {
             $1307 = (+__Z5IKabsd($1290));
             $1308 = $1307 > 5.0000000000000004E-6;
             if (!($1308)) {
              $1309 = +HEAPF64[$0>>3];
              $1310 = +HEAPF64[$1>>3];
              $1311 = +HEAPF64[$2>>3];
              $1312 = $1310 * $1311;
              $1313 = +HEAPF64[$3>>3];
              $1314 = +HEAPF64[$4>>3];
              $1315 = $1313 * $1314;
              $1316 = +HEAPF64[$5>>3];
              $1317 = $1311 * $1316;
              $1318 = +HEAPF64[$6>>3];
              $1319 = $1309 * $1318;
              $1320 = +HEAPF64[$7>>3];
              $1321 = +HEAPF64[$8>>3];
              $1322 = $1320 * $1321;
              $1323 = +HEAPF64[$9>>3];
              $1324 = $1309 * $1323;
              $1325 = +HEAPF64[$10>>3];
              $1326 = $1311 * $1325;
              $1327 = +HEAPF64[$11>>3];
              $1328 = $1309 * $1327;
              $1329 = $1322 - $1315;
              $1330 = $1315 - $1322;
              $1331 = $1311 * $1318;
              $1332 = $1309 * $1316;
              $1333 = $1331 - $1332;
              HEAPF64[$12>>3] = $1333;
              $1334 = +HEAPF64[$9>>3];
              $1335 = +HEAPF64[$2>>3];
              $1336 = $1334 * $1335;
              $1337 = +HEAPF64[$1>>3];
              $1338 = $1309 * $1337;
              $1339 = $1336 - $1338;
              HEAPF64[$13>>3] = $1339;
              $1340 = +HEAPF64[$11>>3];
              $1341 = +HEAPF64[$2>>3];
              $1342 = $1340 * $1341;
              $1343 = +HEAPF64[$10>>3];
              $1344 = $1309 * $1343;
              $1345 = $1342 - $1344;
              HEAPF64[$14>>3] = $1345;
              $1346 = $399 * $1319;
              $1347 = +HEAPF64[$15>>3];
              $1348 = $1329 * $1347;
              $1349 = $1346 + $1348;
              $1350 = $399 * $1317;
              $1351 = $1350 + $1349;
              HEAPF64[$16>>3] = $1351;
              $1352 = +HEAPF64[$17>>3];
              $1353 = $1329 * $1352;
              $1354 = $399 * $1312;
              $1355 = $1354 + $1353;
              $1356 = $399 * $1324;
              $1357 = $1356 + $1355;
              HEAPF64[$18>>3] = $1357;
              $1358 = +HEAPF64[$19>>3];
              $1359 = $1329 * $1358;
              $1360 = $399 * $1326;
              $1361 = $1360 + $1359;
              $1362 = $399 * $1328;
              $1363 = $1362 + $1361;
              HEAPF64[$20>>3] = $1363;
              $1364 = $1319 * $1330;
              $1365 = +HEAPF64[$15>>3];
              $1366 = $399 * $1365;
              $1367 = $1364 + $1366;
              $1368 = $1317 * $1330;
              $1369 = $1368 + $1367;
              HEAPF64[$21>>3] = $1369;
              $1370 = +HEAPF64[$17>>3];
              $1371 = $399 * $1370;
              $1372 = $1312 * $1330;
              $1373 = $1372 + $1371;
              $1374 = $1324 * $1330;
              $1375 = $1374 + $1373;
              HEAPF64[$22>>3] = $1375;
              $1376 = +HEAPF64[$19>>3];
              $1377 = $399 * $1376;
              $1378 = $1330 * $1326;
              $1379 = $1378 + $1377;
              $1380 = $1330 * $1328;
              $1381 = $1380 + $1379;
              HEAPF64[$23>>3] = $1381;
              $1382 = +HEAPF64[$29>>3];
              $1383 = (+__Z5IKabsd($1382));
              $1384 = $1383 < 9.9999999999999995E-7;
              do {
               if (!($1384)) {
                $1385 = (+__Z6IKsignd($1382));
                $1386 = (+__Z5IKabsd($1385));
                $1387 = $1386 < 9.9999999999999995E-7;
                if ($1387) {
                 break;
                }
                HEAP8[$271>>0] = 1;
                $3704 = +HEAPF64[$29>>3];
                $3705 = (+__Z6IKsignd($3704));
                __Z21IKPowWithIntegerCheckIdE10CheckValueIT_ES1_i($x295,$3705,-1);
                $3706 = HEAP8[$272>>0]|0;
                $3707 = ($3706<<24>>24)==(0);
                if ($3707) {
                 break L7;
                }
                $3708 = +HEAPF64[$21>>3];
                $3709 = +HEAPF64[$22>>3];
                __Z16IKatan2WithCheckIdE10CheckValueIT_ES1_S1_S1_($x296,$3708,$3709,1.9999999999999999E-6);
                $3710 = HEAP8[$273>>0]|0;
                $3711 = ($3710<<24>>24)==(0);
                if ($3711) {
                 break L7;
                }
                $3712 = +HEAPF64[$x295>>3];
                $3713 = $3712 * 1.5707963267949001;
                $3714 = $3713 + -1.5707963267949001;
                $3715 = +HEAPF64[$x296>>3];
                $3716 = $3715 + $3714;
                HEAPF64[$j5array143>>3] = $3716;
                $3717 = (+__Z5IKsind($3716));
                HEAPF64[$sj5array145>>3] = $3717;
                $3718 = (+__Z5IKcosd($3716));
                HEAPF64[$cj5array144>>3] = $3718;
                $3719 = $3716 > 3.14159265358979;
                do {
                 if ($3719) {
                  $3720 = $3716 + -6.2831853071795898;
                  HEAPF64[$j5array143>>3] = $3720;
                 } else {
                  $3721 = $3716 < -3.14159265358979;
                  if (!($3721)) {
                   break;
                  }
                  $3722 = $3716 + 6.2831853071795898;
                  HEAPF64[$j5array143>>3] = $3722;
                 }
                } while(0);
                HEAP8[$274>>0] = 0;
                HEAP8[$275>>0] = -1;
                $3723 = +HEAPF64[$j5array143>>3];
                HEAPF64[$276>>3] = $3723;
                $3724 = +HEAPF64[$cj5array144>>3];
                HEAPF64[$277>>3] = $3724;
                $3725 = +HEAPF64[$sj5array145>>3];
                HEAPF64[$278>>3] = $3725;
                $3726 = +HEAPF64[$276>>3];
                $3727 = (+__Z5IKsind($3726));
                $3728 = (+__Z5IKcosd($3726));
                $3729 = +HEAPF64[$28>>3];
                $3730 = +HEAPF64[$93>>3];
                $3731 = $3729 * $3730;
                $3732 = +HEAPF64[$92>>3];
                $3733 = +HEAPF64[$16>>3];
                $3734 = $3732 * $3733;
                $3735 = +HEAPF64[$18>>3];
                $3736 = $3732 * $3735;
                $3737 = +HEAPF64[$29>>3];
                $3738 = -$3727;
                $3739 = $3737 * $3738;
                $3740 = +HEAPF64[$21>>3];
                $3741 = $3739 + $3740;
                $3742 = -$3728;
                $3743 = +HEAPF64[$22>>3];
                $3744 = $3730 * $3735;
                $3745 = $3727 + $3744;
                $3746 = +HEAPF64[$13>>3];
                $3747 = $3732 * $3746;
                $3748 = $3745 + $3747;
                $3749 = $3730 * $3733;
                $3750 = +HEAPF64[$12>>3];
                $3751 = $3732 * $3750;
                $3752 = $3749 + $3751;
                $3753 = $3752 - $3728;
                $3754 = $3727 * $3732;
                $3755 = $3728 * $3731;
                $3756 = $3754 + $3755;
                $3757 = $3756 + $3746;
                $3758 = -$3732;
                $3759 = $3728 * $3758;
                $3760 = $3727 * $3731;
                $3761 = $3759 + $3760;
                $3762 = $3761 + $3750;
                $3763 = $3729 * $3759;
                $3764 = $3763 + $3735;
                $3765 = $3727 * $3730;
                $3766 = $3765 + $3764;
                $3767 = $3729 * $3738;
                $3768 = $3767 + $3734;
                $3769 = $3730 * $3750;
                $3770 = $3768 - $3769;
                $3771 = $3729 * $3742;
                $3772 = $3771 + $3736;
                $3773 = $3730 * $3746;
                $3774 = $3772 - $3773;
                $3775 = $3730 * $3742;
                $3776 = $3727 * $3758;
                $3777 = $3729 * $3776;
                $3778 = $3775 + $3777;
                $3779 = $3733 + $3778;
                $3780 = $3737 * $3740;
                $3781 = $3731 * $3750;
                $3782 = $3781 - $3780;
                $3783 = $3727 + $3782;
                $3784 = $3729 * $3734;
                $3785 = $3783 - $3784;
                $3786 = $3729 * $3736;
                $3787 = $3737 * $3743;
                $3788 = -$3787;
                $3789 = $3788 - $3786;
                $3790 = $3728 + $3789;
                $3791 = $3731 * $3746;
                $3792 = $3791 + $3790;
                $3793 = (+__Z5IKabsd($3741));
                $3794 = $3793 > 5.0000000000000004E-6;
                if ($3794) {
                 break L7;
                }
                $3795 = $3737 * $3742;
                $3796 = $3795 + $3743;
                $3797 = (+__Z5IKabsd($3796));
                $3798 = $3797 > 5.0000000000000004E-6;
                if ($3798) {
                 break L7;
                }
                $3799 = (+__Z5IKabsd($3748));
                $3800 = $3799 > 5.0000000000000004E-6;
                if ($3800) {
                 break L7;
                }
                $3801 = (+__Z5IKabsd($3753));
                $3802 = $3801 > 5.0000000000000004E-6;
                if ($3802) {
                 break L7;
                }
                $3803 = (+__Z5IKabsd($3757));
                $3804 = $3803 > 5.0000000000000004E-6;
                if ($3804) {
                 break L7;
                }
                $3805 = (+__Z5IKabsd($3762));
                $3806 = $3805 > 5.0000000000000004E-6;
                if ($3806) {
                 break L7;
                }
                $3807 = (+__Z5IKabsd($3766));
                $3808 = $3807 > 5.0000000000000004E-6;
                if ($3808) {
                 break L7;
                }
                $3809 = (+__Z5IKabsd($3770));
                $3810 = $3809 > 5.0000000000000004E-6;
                if ($3810) {
                 break L7;
                }
                $3811 = (+__Z5IKabsd($3774));
                $3812 = $3811 > 5.0000000000000004E-6;
                if ($3812) {
                 break L7;
                }
                $3813 = (+__Z5IKabsd($3779));
                $3814 = $3813 > 5.0000000000000004E-6;
                if ($3814) {
                 break L7;
                }
                $3815 = (+__Z5IKabsd($3785));
                $3816 = $3815 > 5.0000000000000004E-6;
                if ($3816) {
                 break L7;
                }
                $3817 = (+__Z5IKabsd($3792));
                $3818 = $3817 > 5.0000000000000004E-6;
                if ($3818) {
                 break L7;
                }
                __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEEC2Ej($vinfos151,6);
                $3819 = HEAP32[$vinfos151>>2]|0;
                $3820 = (($3819) + 17|0);
                HEAP8[$3820>>0] = 1;
                $3821 = +HEAPF64[$this>>3];
                $3822 = HEAP32[$vinfos151>>2]|0;
                $3823 = (($3822) + 8|0);
                HEAPF64[$3823>>3] = $3821;
                $3824 = HEAP8[$279>>0]|0;
                $3825 = HEAP32[$vinfos151>>2]|0;
                $3826 = (($3825) + 19|0);
                HEAP8[$3826>>0] = $3824;
                $3827 = HEAP8[$280>>0]|0;
                $3828 = HEAP32[$vinfos151>>2]|0;
                $3829 = (($3828) + 20|0);
                HEAP8[$3829>>0] = $3827;
                $3830 = HEAP8[$281>>0]|0;
                $3831 = HEAP32[$vinfos151>>2]|0;
                $3832 = (($3831) + 18|0);
                HEAP8[$3832>>0] = $3830;
                $3833 = HEAP32[$vinfos151>>2]|0;
                $3834 = (($3833) + 41|0);
                HEAP8[$3834>>0] = 1;
                $3835 = +HEAPF64[$282>>3];
                $3836 = HEAP32[$vinfos151>>2]|0;
                $3837 = (($3836) + 32|0);
                HEAPF64[$3837>>3] = $3835;
                $3838 = HEAP8[$283>>0]|0;
                $3839 = HEAP32[$vinfos151>>2]|0;
                $3840 = (($3839) + 43|0);
                HEAP8[$3840>>0] = $3838;
                $3841 = HEAP8[$284>>0]|0;
                $3842 = HEAP32[$vinfos151>>2]|0;
                $3843 = (($3842) + 44|0);
                HEAP8[$3843>>0] = $3841;
                $3844 = HEAP8[$285>>0]|0;
                $3845 = HEAP32[$vinfos151>>2]|0;
                $3846 = (($3845) + 42|0);
                HEAP8[$3846>>0] = $3844;
                $3847 = HEAP32[$vinfos151>>2]|0;
                $3848 = (($3847) + 65|0);
                HEAP8[$3848>>0] = 1;
                $3849 = +HEAPF64[$286>>3];
                $3850 = HEAP32[$vinfos151>>2]|0;
                $3851 = (($3850) + 56|0);
                HEAPF64[$3851>>3] = $3849;
                $3852 = HEAP8[$287>>0]|0;
                $3853 = HEAP32[$vinfos151>>2]|0;
                $3854 = (($3853) + 67|0);
                HEAP8[$3854>>0] = $3852;
                $3855 = HEAP8[$288>>0]|0;
                $3856 = HEAP32[$vinfos151>>2]|0;
                $3857 = (($3856) + 68|0);
                HEAP8[$3857>>0] = $3855;
                $3858 = HEAP8[$289>>0]|0;
                $3859 = HEAP32[$vinfos151>>2]|0;
                $3860 = (($3859) + 66|0);
                HEAP8[$3860>>0] = $3858;
                $3861 = HEAP32[$vinfos151>>2]|0;
                $3862 = (($3861) + 89|0);
                HEAP8[$3862>>0] = 1;
                $3863 = +HEAPF64[$91>>3];
                $3864 = HEAP32[$vinfos151>>2]|0;
                $3865 = (($3864) + 80|0);
                HEAPF64[$3865>>3] = $3863;
                $3866 = HEAP8[$89>>0]|0;
                $3867 = HEAP32[$vinfos151>>2]|0;
                $3868 = (($3867) + 91|0);
                HEAP8[$3868>>0] = $3866;
                $3869 = HEAP8[$90>>0]|0;
                $3870 = HEAP32[$vinfos151>>2]|0;
                $3871 = (($3870) + 92|0);
                HEAP8[$3871>>0] = $3869;
                $3872 = HEAP8[$86>>0]|0;
                $3873 = HEAP32[$vinfos151>>2]|0;
                $3874 = (($3873) + 90|0);
                HEAP8[$3874>>0] = $3872;
                $3875 = HEAP32[$vinfos151>>2]|0;
                $3876 = (($3875) + 113|0);
                HEAP8[$3876>>0] = 1;
                $3877 = +HEAPF64[$27>>3];
                $3878 = HEAP32[$vinfos151>>2]|0;
                $3879 = (($3878) + 104|0);
                HEAPF64[$3879>>3] = $3877;
                $3880 = HEAP8[$25>>0]|0;
                $3881 = HEAP32[$vinfos151>>2]|0;
                $3882 = (($3881) + 115|0);
                HEAP8[$3882>>0] = $3880;
                $3883 = HEAP8[$26>>0]|0;
                $3884 = HEAP32[$vinfos151>>2]|0;
                $3885 = (($3884) + 116|0);
                HEAP8[$3885>>0] = $3883;
                $3886 = HEAP8[$24>>0]|0;
                $3887 = HEAP32[$vinfos151>>2]|0;
                $3888 = (($3887) + 114|0);
                HEAP8[$3888>>0] = $3886;
                $3889 = HEAP32[$vinfos151>>2]|0;
                $3890 = (($3889) + 137|0);
                HEAP8[$3890>>0] = 1;
                $3891 = +HEAPF64[$276>>3];
                $3892 = HEAP32[$vinfos151>>2]|0;
                $3893 = (($3892) + 128|0);
                HEAPF64[$3893>>3] = $3891;
                $3894 = HEAP8[$274>>0]|0;
                $3895 = HEAP32[$vinfos151>>2]|0;
                $3896 = (($3895) + 139|0);
                HEAP8[$3896>>0] = $3894;
                $3897 = HEAP8[$275>>0]|0;
                $3898 = HEAP32[$vinfos151>>2]|0;
                $3899 = (($3898) + 140|0);
                HEAP8[$3899>>0] = $3897;
                $3900 = HEAP8[$271>>0]|0;
                $3901 = HEAP32[$vinfos151>>2]|0;
                $3902 = (($3901) + 138|0);
                HEAP8[$3902>>0] = $3900;
                __ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ej($vfree152,0);
                $3903 = HEAP32[$solutions>>2]|0;
                $3904 = (($3903) + 8|0);
                $3905 = HEAP32[$3904>>2]|0;
                (FUNCTION_TABLE_iiii[$3905 & 31]($solutions,$vinfos151,$vfree152)|0);
                __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($vfree152);
                __ZNSt3__113__vector_baseIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEED2Ev($vinfos151);
                break L7;
               }
              } while(0);
              $1388 = +HEAPF64[$0>>3];
              $1389 = +HEAPF64[$1>>3];
              $1390 = +HEAPF64[$2>>3];
              $1391 = $1389 * $1390;
              $1392 = +HEAPF64[$3>>3];
              $1393 = +HEAPF64[$4>>3];
              $1394 = $1392 * $1393;
              $1395 = +HEAPF64[$5>>3];
              $1396 = $1390 * $1395;
              $1397 = +HEAPF64[$6>>3];
              $1398 = $1388 * $1397;
              $1399 = +HEAPF64[$7>>3];
              $1400 = +HEAPF64[$8>>3];
              $1401 = $1399 * $1400;
              $1402 = +HEAPF64[$9>>3];
              $1403 = $1388 * $1402;
              $1404 = +HEAPF64[$10>>3];
              $1405 = $1390 * $1404;
              $1406 = +HEAPF64[$11>>3];
              $1407 = $1388 * $1406;
              $1408 = $1401 - $1394;
              $1409 = $1394 - $1401;
              $1410 = $1390 * $1397;
              $1411 = $1388 * $1395;
              $1412 = $1410 - $1411;
              HEAPF64[$12>>3] = $1412;
              $1413 = +HEAPF64[$1>>3];
              $1414 = $1388 * $1413;
              $1415 = +HEAPF64[$9>>3];
              $1416 = +HEAPF64[$2>>3];
              $1417 = $1415 * $1416;
              $1418 = $1417 - $1414;
              HEAPF64[$13>>3] = $1418;
              $1419 = +HEAPF64[$11>>3];
              $1420 = +HEAPF64[$2>>3];
              $1421 = $1419 * $1420;
              $1422 = +HEAPF64[$10>>3];
              $1423 = $1388 * $1422;
              $1424 = $1421 - $1423;
              HEAPF64[$14>>3] = $1424;
              $1425 = $399 * $1396;
              $1426 = +HEAPF64[$15>>3];
              $1427 = $1408 * $1426;
              $1428 = $1425 + $1427;
              $1429 = $399 * $1398;
              $1430 = $1429 + $1428;
              HEAPF64[$16>>3] = $1430;
              $1431 = $399 * $1403;
              $1432 = $399 * $1391;
              $1433 = $1432 + $1431;
              $1434 = +HEAPF64[$17>>3];
              $1435 = $1408 * $1434;
              $1436 = $1433 + $1435;
              HEAPF64[$18>>3] = $1436;
              $1437 = $399 * $1405;
              $1438 = $399 * $1407;
              $1439 = $1437 + $1438;
              $1440 = +HEAPF64[$19>>3];
              $1441 = $1408 * $1440;
              $1442 = $1439 + $1441;
              HEAPF64[$20>>3] = $1442;
              $1443 = $1396 * $1409;
              $1444 = +HEAPF64[$15>>3];
              $1445 = $399 * $1444;
              $1446 = $1443 + $1445;
              $1447 = $1398 * $1409;
              $1448 = $1447 + $1446;
              HEAPF64[$21>>3] = $1448;
              $1449 = $1403 * $1409;
              $1450 = $1391 * $1409;
              $1451 = $1449 + $1450;
              $1452 = +HEAPF64[$17>>3];
              $1453 = $399 * $1452;
              $1454 = $1451 + $1453;
              HEAPF64[$22>>3] = $1454;
              $1455 = $1409 * $1405;
              $1456 = $1409 * $1407;
              $1457 = $1455 + $1456;
              $1458 = +HEAPF64[$19>>3];
              $1459 = $399 * $1458;
              $1460 = $1457 + $1459;
              HEAPF64[$23>>3] = $1460;
              $1461 = +HEAPF64[$29>>3];
              $1462 = (+__Z5IKabsd($1461));
              $1463 = $1462 < 9.9999999999999995E-7;
              do {
               if (!($1463)) {
                $1464 = +HEAPF64[$92>>3];
                $1465 = (+__Z5IKabsd($1464));
                $1466 = $1465 < 9.9999999999999995E-7;
                if ($1466) {
                 break;
                }
                HEAP8[$252>>0] = 1;
                $3471 = +HEAPF64[$29>>3];
                __Z21IKPowWithIntegerCheckIdE10CheckValueIT_ES1_i($x283,$3471,-1);
                $3472 = HEAP8[$253>>0]|0;
                $3473 = ($3472<<24>>24)==(0);
                if ($3473) {
                 break L7;
                }
                $3474 = +HEAPF64[$x283>>3];
                $3475 = +HEAPF64[$92>>3];
                __Z21IKPowWithIntegerCheckIdE10CheckValueIT_ES1_i($x284,$3475,-1);
                $3476 = HEAP8[$254>>0]|0;
                $3477 = ($3476<<24>>24)==(0);
                if ($3477) {
                 break L7;
                }
                $3478 = +HEAPF64[$21>>3];
                $3479 = $3474 * $3478;
                $3480 = (+__Z5IKabsd($3479));
                $3481 = $3480 < 1.9999999999999999E-6;
                do {
                 if ($3481) {
                  $3482 = +HEAPF64[$x284>>3];
                  $3483 = $3474 * $3482;
                  $3484 = +HEAPF64[$12>>3];
                  $3485 = +HEAPF64[$29>>3];
                  $3486 = $3484 * $3485;
                  $3487 = +HEAPF64[$28>>3];
                  $3488 = $3478 * $3487;
                  $3489 = +HEAPF64[$93>>3];
                  $3490 = $3488 * $3489;
                  $3491 = $3486 + $3490;
                  $3492 = $3483 * $3491;
                  $3493 = (+__Z5IKabsd($3492));
                  $3494 = $3493 < 1.9999999999999999E-6;
                  if (!($3494)) {
                   break;
                  }
                  $3495 = (+__Z5IKsqrd($3479));
                  $3496 = (+__Z5IKsqrd($3492));
                  $3497 = $3495 + $3496;
                  $3498 = $3497 + -1.0;
                  $3499 = (+__Z5IKabsd($3498));
                  $3500 = !($3499 <= 1.9999999999999999E-6);
                  if (!($3500)) {
                   break L7;
                  }
                 }
                } while(0);
                $3501 = +HEAPF64[$21>>3];
                $3502 = $3474 * $3501;
                $3503 = +HEAPF64[$x284>>3];
                $3504 = $3474 * $3503;
                $3505 = +HEAPF64[$12>>3];
                $3506 = +HEAPF64[$29>>3];
                $3507 = $3505 * $3506;
                $3508 = +HEAPF64[$28>>3];
                $3509 = $3501 * $3508;
                $3510 = +HEAPF64[$93>>3];
                $3511 = $3509 * $3510;
                $3512 = $3507 + $3511;
                $3513 = $3504 * $3512;
                $3514 = (+__Z7IKatan2dd($3502,$3513));
                HEAPF64[$j5array133>>3] = $3514;
                $3515 = (+__Z5IKsind($3514));
                HEAPF64[$sj5array135>>3] = $3515;
                $3516 = (+__Z5IKcosd($3514));
                HEAPF64[$cj5array134>>3] = $3516;
                $3517 = $3514 > 3.14159265358979;
                do {
                 if ($3517) {
                  $3518 = $3514 + -6.2831853071795898;
                  HEAPF64[$j5array133>>3] = $3518;
                 } else {
                  $3519 = $3514 < -3.14159265358979;
                  if (!($3519)) {
                   break;
                  }
                  $3520 = $3514 + 6.2831853071795898;
                  HEAPF64[$j5array133>>3] = $3520;
                 }
                } while(0);
                HEAP8[$255>>0] = 0;
                HEAP8[$256>>0] = -1;
                $3521 = +HEAPF64[$j5array133>>3];
                HEAPF64[$257>>3] = $3521;
                $3522 = +HEAPF64[$cj5array134>>3];
                HEAPF64[$258>>3] = $3522;
                $3523 = +HEAPF64[$sj5array135>>3];
                HEAPF64[$259>>3] = $3523;
                $3524 = +HEAPF64[$257>>3];
                $3525 = (+__Z5IKsind($3524));
                $3526 = (+__Z5IKcosd($3524));
                $3527 = +HEAPF64[$28>>3];
                $3528 = +HEAPF64[$93>>3];
                $3529 = $3527 * $3528;
                $3530 = +HEAPF64[$92>>3];
                $3531 = +HEAPF64[$16>>3];
                $3532 = $3530 * $3531;
                $3533 = +HEAPF64[$18>>3];
                $3534 = $3530 * $3533;
                $3535 = +HEAPF64[$29>>3];
                $3536 = -$3525;
                $3537 = $3535 * $3536;
                $3538 = +HEAPF64[$21>>3];
                $3539 = $3537 + $3538;
                $3540 = -$3526;
                $3541 = +HEAPF64[$22>>3];
                $3542 = $3528 * $3533;
                $3543 = $3525 + $3542;
                $3544 = +HEAPF64[$13>>3];
                $3545 = $3530 * $3544;
                $3546 = $3543 + $3545;
                $3547 = $3528 * $3531;
                $3548 = $3547 - $3526;
                $3549 = +HEAPF64[$12>>3];
                $3550 = $3530 * $3549;
                $3551 = $3548 + $3550;
                $3552 = $3526 * $3529;
                $3553 = $3525 * $3530;
                $3554 = $3552 + $3553;
                $3555 = $3554 + $3544;
                $3556 = $3525 * $3529;
                $3557 = -$3530;
                $3558 = $3526 * $3557;
                $3559 = $3556 + $3558;
                $3560 = $3559 + $3549;
                $3561 = $3525 * $3528;
                $3562 = $3527 * $3558;
                $3563 = $3561 + $3562;
                $3564 = $3533 + $3563;
                $3565 = $3527 * $3536;
                $3566 = $3565 + $3532;
                $3567 = $3528 * $3549;
                $3568 = $3566 - $3567;
                $3569 = $3528 * $3544;
                $3570 = $3527 * $3540;
                $3571 = $3570 - $3569;
                $3572 = $3534 + $3571;
                $3573 = $3528 * $3540;
                $3574 = $3573 + $3531;
                $3575 = $3525 * $3557;
                $3576 = $3527 * $3575;
                $3577 = $3574 + $3576;
                $3578 = $3535 * $3538;
                $3579 = $3525 - $3578;
                $3580 = $3527 * $3532;
                $3581 = $3579 - $3580;
                $3582 = $3529 * $3549;
                $3583 = $3581 + $3582;
                $3584 = $3535 * $3541;
                $3585 = $3527 * $3534;
                $3586 = -$3585;
                $3587 = $3586 - $3584;
                $3588 = $3526 + $3587;
                $3589 = $3529 * $3544;
                $3590 = $3589 + $3588;
                $3591 = (+__Z5IKabsd($3539));
                $3592 = $3591 > 5.0000000000000004E-6;
                if ($3592) {
                 break L7;
                }
                $3593 = $3535 * $3540;
                $3594 = $3593 + $3541;
                $3595 = (+__Z5IKabsd($3594));
                $3596 = $3595 > 5.0000000000000004E-6;
                if ($3596) {
                 break L7;
                }
                $3597 = (+__Z5IKabsd($3546));
                $3598 = $3597 > 5.0000000000000004E-6;
                if ($3598) {
                 break L7;
                }
                $3599 = (+__Z5IKabsd($3551));
                $3600 = $3599 > 5.0000000000000004E-6;
                if ($3600) {
                 break L7;
                }
                $3601 = (+__Z5IKabsd($3555));
                $3602 = $3601 > 5.0000000000000004E-6;
                if ($3602) {
                 break L7;
                }
                $3603 = (+__Z5IKabsd($3560));
                $3604 = $3603 > 5.0000000000000004E-6;
                if ($3604) {
                 break L7;
                }
                $3605 = (+__Z5IKabsd($3564));
                $3606 = $3605 > 5.0000000000000004E-6;
                if ($3606) {
                 break L7;
                }
                $3607 = (+__Z5IKabsd($3568));
                $3608 = $3607 > 5.0000000000000004E-6;
                if ($3608) {
                 break L7;
                }
                $3609 = (+__Z5IKabsd($3572));
                $3610 = $3609 > 5.0000000000000004E-6;
                if ($3610) {
                 break L7;
                }
                $3611 = (+__Z5IKabsd($3577));
                $3612 = $3611 > 5.0000000000000004E-6;
                if ($3612) {
                 break L7;
                }
                $3613 = (+__Z5IKabsd($3583));
                $3614 = $3613 > 5.0000000000000004E-6;
                if ($3614) {
                 break L7;
                }
                $3615 = (+__Z5IKabsd($3590));
                $3616 = $3615 > 5.0000000000000004E-6;
                if ($3616) {
                 break L7;
                }
                __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEEC2Ej($vinfos141,6);
                $3617 = HEAP32[$vinfos141>>2]|0;
                $3618 = (($3617) + 17|0);
                HEAP8[$3618>>0] = 1;
                $3619 = +HEAPF64[$this>>3];
                $3620 = HEAP32[$vinfos141>>2]|0;
                $3621 = (($3620) + 8|0);
                HEAPF64[$3621>>3] = $3619;
                $3622 = HEAP8[$260>>0]|0;
                $3623 = HEAP32[$vinfos141>>2]|0;
                $3624 = (($3623) + 19|0);
                HEAP8[$3624>>0] = $3622;
                $3625 = HEAP8[$261>>0]|0;
                $3626 = HEAP32[$vinfos141>>2]|0;
                $3627 = (($3626) + 20|0);
                HEAP8[$3627>>0] = $3625;
                $3628 = HEAP8[$262>>0]|0;
                $3629 = HEAP32[$vinfos141>>2]|0;
                $3630 = (($3629) + 18|0);
                HEAP8[$3630>>0] = $3628;
                $3631 = HEAP32[$vinfos141>>2]|0;
                $3632 = (($3631) + 41|0);
                HEAP8[$3632>>0] = 1;
                $3633 = +HEAPF64[$263>>3];
                $3634 = HEAP32[$vinfos141>>2]|0;
                $3635 = (($3634) + 32|0);
                HEAPF64[$3635>>3] = $3633;
                $3636 = HEAP8[$264>>0]|0;
                $3637 = HEAP32[$vinfos141>>2]|0;
                $3638 = (($3637) + 43|0);
                HEAP8[$3638>>0] = $3636;
                $3639 = HEAP8[$265>>0]|0;
                $3640 = HEAP32[$vinfos141>>2]|0;
                $3641 = (($3640) + 44|0);
                HEAP8[$3641>>0] = $3639;
                $3642 = HEAP8[$266>>0]|0;
                $3643 = HEAP32[$vinfos141>>2]|0;
                $3644 = (($3643) + 42|0);
                HEAP8[$3644>>0] = $3642;
                $3645 = HEAP32[$vinfos141>>2]|0;
                $3646 = (($3645) + 65|0);
                HEAP8[$3646>>0] = 1;
                $3647 = +HEAPF64[$267>>3];
                $3648 = HEAP32[$vinfos141>>2]|0;
                $3649 = (($3648) + 56|0);
                HEAPF64[$3649>>3] = $3647;
                $3650 = HEAP8[$268>>0]|0;
                $3651 = HEAP32[$vinfos141>>2]|0;
                $3652 = (($3651) + 67|0);
                HEAP8[$3652>>0] = $3650;
                $3653 = HEAP8[$269>>0]|0;
                $3654 = HEAP32[$vinfos141>>2]|0;
                $3655 = (($3654) + 68|0);
                HEAP8[$3655>>0] = $3653;
                $3656 = HEAP8[$270>>0]|0;
                $3657 = HEAP32[$vinfos141>>2]|0;
                $3658 = (($3657) + 66|0);
                HEAP8[$3658>>0] = $3656;
                $3659 = HEAP32[$vinfos141>>2]|0;
                $3660 = (($3659) + 89|0);
                HEAP8[$3660>>0] = 1;
                $3661 = +HEAPF64[$91>>3];
                $3662 = HEAP32[$vinfos141>>2]|0;
                $3663 = (($3662) + 80|0);
                HEAPF64[$3663>>3] = $3661;
                $3664 = HEAP8[$89>>0]|0;
                $3665 = HEAP32[$vinfos141>>2]|0;
                $3666 = (($3665) + 91|0);
                HEAP8[$3666>>0] = $3664;
                $3667 = HEAP8[$90>>0]|0;
                $3668 = HEAP32[$vinfos141>>2]|0;
                $3669 = (($3668) + 92|0);
                HEAP8[$3669>>0] = $3667;
                $3670 = HEAP8[$86>>0]|0;
                $3671 = HEAP32[$vinfos141>>2]|0;
                $3672 = (($3671) + 90|0);
                HEAP8[$3672>>0] = $3670;
                $3673 = HEAP32[$vinfos141>>2]|0;
                $3674 = (($3673) + 113|0);
                HEAP8[$3674>>0] = 1;
                $3675 = +HEAPF64[$27>>3];
                $3676 = HEAP32[$vinfos141>>2]|0;
                $3677 = (($3676) + 104|0);
                HEAPF64[$3677>>3] = $3675;
                $3678 = HEAP8[$25>>0]|0;
                $3679 = HEAP32[$vinfos141>>2]|0;
                $3680 = (($3679) + 115|0);
                HEAP8[$3680>>0] = $3678;
                $3681 = HEAP8[$26>>0]|0;
                $3682 = HEAP32[$vinfos141>>2]|0;
                $3683 = (($3682) + 116|0);
                HEAP8[$3683>>0] = $3681;
                $3684 = HEAP8[$24>>0]|0;
                $3685 = HEAP32[$vinfos141>>2]|0;
                $3686 = (($3685) + 114|0);
                HEAP8[$3686>>0] = $3684;
                $3687 = HEAP32[$vinfos141>>2]|0;
                $3688 = (($3687) + 137|0);
                HEAP8[$3688>>0] = 1;
                $3689 = +HEAPF64[$257>>3];
                $3690 = HEAP32[$vinfos141>>2]|0;
                $3691 = (($3690) + 128|0);
                HEAPF64[$3691>>3] = $3689;
                $3692 = HEAP8[$255>>0]|0;
                $3693 = HEAP32[$vinfos141>>2]|0;
                $3694 = (($3693) + 139|0);
                HEAP8[$3694>>0] = $3692;
                $3695 = HEAP8[$256>>0]|0;
                $3696 = HEAP32[$vinfos141>>2]|0;
                $3697 = (($3696) + 140|0);
                HEAP8[$3697>>0] = $3695;
                $3698 = HEAP8[$252>>0]|0;
                $3699 = HEAP32[$vinfos141>>2]|0;
                $3700 = (($3699) + 138|0);
                HEAP8[$3700>>0] = $3698;
                __ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ej($vfree142,0);
                $3701 = HEAP32[$solutions>>2]|0;
                $3702 = (($3701) + 8|0);
                $3703 = HEAP32[$3702>>2]|0;
                (FUNCTION_TABLE_iiii[$3703 & 31]($solutions,$vinfos141,$vfree142)|0);
                __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($vfree142);
                __ZNSt3__113__vector_baseIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEED2Ev($vinfos141);
                break L7;
               }
              } while(0);
              $1467 = +HEAPF64[$0>>3];
              $1468 = +HEAPF64[$1>>3];
              $1469 = +HEAPF64[$2>>3];
              $1470 = $1468 * $1469;
              $1471 = +HEAPF64[$3>>3];
              $1472 = +HEAPF64[$4>>3];
              $1473 = $1471 * $1472;
              $1474 = +HEAPF64[$5>>3];
              $1475 = $1469 * $1474;
              $1476 = +HEAPF64[$6>>3];
              $1477 = $1467 * $1476;
              $1478 = +HEAPF64[$7>>3];
              $1479 = +HEAPF64[$8>>3];
              $1480 = $1478 * $1479;
              $1481 = +HEAPF64[$9>>3];
              $1482 = $1467 * $1481;
              $1483 = +HEAPF64[$10>>3];
              $1484 = $1469 * $1483;
              $1485 = +HEAPF64[$11>>3];
              $1486 = $1467 * $1485;
              $1487 = $1480 - $1473;
              $1488 = $1473 - $1480;
              $1489 = $1469 * $1476;
              $1490 = $1467 * $1474;
              $1491 = $1489 - $1490;
              HEAPF64[$12>>3] = $1491;
              $1492 = +HEAPF64[$1>>3];
              $1493 = $1467 * $1492;
              $1494 = +HEAPF64[$9>>3];
              $1495 = +HEAPF64[$2>>3];
              $1496 = $1494 * $1495;
              $1497 = $1496 - $1493;
              HEAPF64[$13>>3] = $1497;
              $1498 = +HEAPF64[$10>>3];
              $1499 = $1467 * $1498;
              $1500 = +HEAPF64[$11>>3];
              $1501 = +HEAPF64[$2>>3];
              $1502 = $1500 * $1501;
              $1503 = $1502 - $1499;
              HEAPF64[$14>>3] = $1503;
              $1504 = $399 * $1475;
              $1505 = $399 * $1477;
              $1506 = $1504 + $1505;
              $1507 = +HEAPF64[$15>>3];
              $1508 = $1487 * $1507;
              $1509 = $1506 + $1508;
              HEAPF64[$16>>3] = $1509;
              $1510 = $399 * $1470;
              $1511 = $399 * $1482;
              $1512 = $1510 + $1511;
              $1513 = +HEAPF64[$17>>3];
              $1514 = $1487 * $1513;
              $1515 = $1512 + $1514;
              HEAPF64[$18>>3] = $1515;
              $1516 = $399 * $1486;
              $1517 = $399 * $1484;
              $1518 = $1517 + $1516;
              $1519 = +HEAPF64[$19>>3];
              $1520 = $1487 * $1519;
              $1521 = $1518 + $1520;
              HEAPF64[$20>>3] = $1521;
              $1522 = $1475 * $1488;
              $1523 = $1477 * $1488;
              $1524 = $1522 + $1523;
              $1525 = +HEAPF64[$15>>3];
              $1526 = $399 * $1525;
              $1527 = $1524 + $1526;
              HEAPF64[$21>>3] = $1527;
              $1528 = $1470 * $1488;
              $1529 = $1482 * $1488;
              $1530 = $1528 + $1529;
              $1531 = +HEAPF64[$17>>3];
              $1532 = $399 * $1531;
              $1533 = $1530 + $1532;
              HEAPF64[$22>>3] = $1533;
              $1534 = $1488 * $1486;
              $1535 = $1488 * $1484;
              $1536 = $1535 + $1534;
              $1537 = +HEAPF64[$19>>3];
              $1538 = $399 * $1537;
              $1539 = $1536 + $1538;
              HEAPF64[$23>>3] = $1539;
              $1540 = +HEAPF64[$29>>3];
              $1541 = +HEAPF64[$93>>3];
              $1542 = (+__Z5IKabsd($1540));
              $1543 = $1542 < 9.9999999999999995E-7;
              do {
               if (!($1543)) {
                $1544 = +HEAPF64[$28>>3];
                $1545 = (+__Z5IKabsd($1544));
                $1546 = $1545 < 9.9999999999999995E-7;
                if ($1546) {
                 break;
                }
                $1547 = (+__Z5IKabsd($1541));
                $1548 = $1547 < 9.9999999999999995E-7;
                if ($1548) {
                 break;
                }
                HEAP8[$232>>0] = 1;
                $3234 = +HEAPF64[$29>>3];
                __Z21IKPowWithIntegerCheckIdE10CheckValueIT_ES1_i($x269,$3234,-1);
                $3235 = HEAP8[$233>>0]|0;
                $3236 = ($3235<<24>>24)==(0);
                if ($3236) {
                 break L7;
                }
                $3237 = +HEAPF64[$x269>>3];
                $3238 = +HEAPF64[$28>>3];
                __Z21IKPowWithIntegerCheckIdE10CheckValueIT_ES1_i($x270,$3238,-1);
                $3239 = HEAP8[$234>>0]|0;
                $3240 = ($3239<<24>>24)==(0);
                if ($3240) {
                 break L7;
                }
                $3241 = +HEAPF64[$93>>3];
                __Z21IKPowWithIntegerCheckIdE10CheckValueIT_ES1_i($x271,$3241,-1);
                $3242 = HEAP8[$235>>0]|0;
                $3243 = ($3242<<24>>24)==(0);
                if ($3243) {
                 break L7;
                }
                $3244 = +HEAPF64[$21>>3];
                $3245 = $3237 * $3244;
                $3246 = (+__Z5IKabsd($3245));
                $3247 = $3246 < 1.9999999999999999E-6;
                do {
                 if ($3247) {
                  $3248 = +HEAPF64[$x270>>3];
                  $3249 = $3237 * $3248;
                  $3250 = +HEAPF64[$x271>>3];
                  $3251 = $3249 * $3250;
                  $3252 = +HEAPF64[$13>>3];
                  $3253 = +HEAPF64[$29>>3];
                  $3254 = $3252 * $3253;
                  $3255 = +HEAPF64[$92>>3];
                  $3256 = $3244 * $3255;
                  $3257 = -$3256;
                  $3258 = $3257 - $3254;
                  $3259 = $3251 * $3258;
                  $3260 = (+__Z5IKabsd($3259));
                  $3261 = $3260 < 1.9999999999999999E-6;
                  if (!($3261)) {
                   break;
                  }
                  $3262 = (+__Z5IKsqrd($3245));
                  $3263 = (+__Z5IKsqrd($3259));
                  $3264 = $3262 + $3263;
                  $3265 = $3264 + -1.0;
                  $3266 = (+__Z5IKabsd($3265));
                  $3267 = !($3266 <= 1.9999999999999999E-6);
                  if (!($3267)) {
                   break L7;
                  }
                 }
                } while(0);
                $3268 = +HEAPF64[$21>>3];
                $3269 = $3237 * $3268;
                $3270 = +HEAPF64[$x270>>3];
                $3271 = $3237 * $3270;
                $3272 = +HEAPF64[$x271>>3];
                $3273 = $3271 * $3272;
                $3274 = +HEAPF64[$13>>3];
                $3275 = +HEAPF64[$29>>3];
                $3276 = $3274 * $3275;
                $3277 = +HEAPF64[$92>>3];
                $3278 = $3268 * $3277;
                $3279 = -$3278;
                $3280 = $3279 - $3276;
                $3281 = $3273 * $3280;
                $3282 = (+__Z7IKatan2dd($3269,$3281));
                HEAPF64[$j5array123>>3] = $3282;
                $3283 = (+__Z5IKsind($3282));
                HEAPF64[$sj5array125>>3] = $3283;
                $3284 = (+__Z5IKcosd($3282));
                HEAPF64[$cj5array124>>3] = $3284;
                $3285 = $3282 > 3.14159265358979;
                do {
                 if ($3285) {
                  $3286 = $3282 + -6.2831853071795898;
                  HEAPF64[$j5array123>>3] = $3286;
                 } else {
                  $3287 = $3282 < -3.14159265358979;
                  if (!($3287)) {
                   break;
                  }
                  $3288 = $3282 + 6.2831853071795898;
                  HEAPF64[$j5array123>>3] = $3288;
                 }
                } while(0);
                HEAP8[$236>>0] = 0;
                HEAP8[$237>>0] = -1;
                $3289 = +HEAPF64[$j5array123>>3];
                HEAPF64[$238>>3] = $3289;
                $3290 = +HEAPF64[$cj5array124>>3];
                HEAPF64[$239>>3] = $3290;
                $3291 = +HEAPF64[$sj5array125>>3];
                HEAPF64[$240>>3] = $3291;
                $3292 = +HEAPF64[$238>>3];
                $3293 = (+__Z5IKsind($3292));
                $3294 = (+__Z5IKcosd($3292));
                $3295 = +HEAPF64[$28>>3];
                $3296 = +HEAPF64[$93>>3];
                $3297 = $3295 * $3296;
                $3298 = +HEAPF64[$92>>3];
                $3299 = +HEAPF64[$16>>3];
                $3300 = $3298 * $3299;
                $3301 = +HEAPF64[$18>>3];
                $3302 = $3298 * $3301;
                $3303 = +HEAPF64[$29>>3];
                $3304 = -$3293;
                $3305 = $3303 * $3304;
                $3306 = +HEAPF64[$21>>3];
                $3307 = $3305 + $3306;
                $3308 = -$3294;
                $3309 = +HEAPF64[$22>>3];
                $3310 = $3296 * $3301;
                $3311 = $3293 + $3310;
                $3312 = +HEAPF64[$13>>3];
                $3313 = $3298 * $3312;
                $3314 = $3311 + $3313;
                $3315 = $3296 * $3299;
                $3316 = +HEAPF64[$12>>3];
                $3317 = $3298 * $3316;
                $3318 = $3315 + $3317;
                $3319 = $3318 - $3294;
                $3320 = $3294 * $3297;
                $3321 = $3320 + $3312;
                $3322 = $3293 * $3298;
                $3323 = $3322 + $3321;
                $3324 = $3293 * $3297;
                $3325 = -$3298;
                $3326 = $3294 * $3325;
                $3327 = $3324 + $3326;
                $3328 = $3327 + $3316;
                $3329 = $3293 * $3296;
                $3330 = $3295 * $3326;
                $3331 = $3329 + $3330;
                $3332 = $3301 + $3331;
                $3333 = $3295 * $3304;
                $3334 = $3296 * $3316;
                $3335 = $3333 - $3334;
                $3336 = $3300 + $3335;
                $3337 = $3295 * $3308;
                $3338 = $3296 * $3312;
                $3339 = $3337 - $3338;
                $3340 = $3302 + $3339;
                $3341 = $3296 * $3308;
                $3342 = $3293 * $3325;
                $3343 = $3295 * $3342;
                $3344 = $3341 + $3343;
                $3345 = $3299 + $3344;
                $3346 = $3297 * $3316;
                $3347 = $3293 + $3346;
                $3348 = $3303 * $3306;
                $3349 = $3347 - $3348;
                $3350 = $3295 * $3300;
                $3351 = $3349 - $3350;
                $3352 = $3303 * $3309;
                $3353 = $3294 - $3352;
                $3354 = $3297 * $3312;
                $3355 = $3353 + $3354;
                $3356 = $3295 * $3302;
                $3357 = $3355 - $3356;
                $3358 = (+__Z5IKabsd($3307));
                $3359 = $3358 > 5.0000000000000004E-6;
                if ($3359) {
                 break L7;
                }
                $3360 = $3303 * $3308;
                $3361 = $3360 + $3309;
                $3362 = (+__Z5IKabsd($3361));
                $3363 = $3362 > 5.0000000000000004E-6;
                if ($3363) {
                 break L7;
                }
                $3364 = (+__Z5IKabsd($3314));
                $3365 = $3364 > 5.0000000000000004E-6;
                if ($3365) {
                 break L7;
                }
                $3366 = (+__Z5IKabsd($3319));
                $3367 = $3366 > 5.0000000000000004E-6;
                if ($3367) {
                 break L7;
                }
                $3368 = (+__Z5IKabsd($3323));
                $3369 = $3368 > 5.0000000000000004E-6;
                if ($3369) {
                 break L7;
                }
                $3370 = (+__Z5IKabsd($3328));
                $3371 = $3370 > 5.0000000000000004E-6;
                if ($3371) {
                 break L7;
                }
                $3372 = (+__Z5IKabsd($3332));
                $3373 = $3372 > 5.0000000000000004E-6;
                if ($3373) {
                 break L7;
                }
                $3374 = (+__Z5IKabsd($3336));
                $3375 = $3374 > 5.0000000000000004E-6;
                if ($3375) {
                 break L7;
                }
                $3376 = (+__Z5IKabsd($3340));
                $3377 = $3376 > 5.0000000000000004E-6;
                if ($3377) {
                 break L7;
                }
                $3378 = (+__Z5IKabsd($3345));
                $3379 = $3378 > 5.0000000000000004E-6;
                if ($3379) {
                 break L7;
                }
                $3380 = (+__Z5IKabsd($3351));
                $3381 = $3380 > 5.0000000000000004E-6;
                if ($3381) {
                 break L7;
                }
                $3382 = (+__Z5IKabsd($3357));
                $3383 = $3382 > 5.0000000000000004E-6;
                if ($3383) {
                 break L7;
                }
                __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEEC2Ej($vinfos131,6);
                $3384 = HEAP32[$vinfos131>>2]|0;
                $3385 = (($3384) + 17|0);
                HEAP8[$3385>>0] = 1;
                $3386 = +HEAPF64[$this>>3];
                $3387 = HEAP32[$vinfos131>>2]|0;
                $3388 = (($3387) + 8|0);
                HEAPF64[$3388>>3] = $3386;
                $3389 = HEAP8[$241>>0]|0;
                $3390 = HEAP32[$vinfos131>>2]|0;
                $3391 = (($3390) + 19|0);
                HEAP8[$3391>>0] = $3389;
                $3392 = HEAP8[$242>>0]|0;
                $3393 = HEAP32[$vinfos131>>2]|0;
                $3394 = (($3393) + 20|0);
                HEAP8[$3394>>0] = $3392;
                $3395 = HEAP8[$243>>0]|0;
                $3396 = HEAP32[$vinfos131>>2]|0;
                $3397 = (($3396) + 18|0);
                HEAP8[$3397>>0] = $3395;
                $3398 = HEAP32[$vinfos131>>2]|0;
                $3399 = (($3398) + 41|0);
                HEAP8[$3399>>0] = 1;
                $3400 = +HEAPF64[$244>>3];
                $3401 = HEAP32[$vinfos131>>2]|0;
                $3402 = (($3401) + 32|0);
                HEAPF64[$3402>>3] = $3400;
                $3403 = HEAP8[$245>>0]|0;
                $3404 = HEAP32[$vinfos131>>2]|0;
                $3405 = (($3404) + 43|0);
                HEAP8[$3405>>0] = $3403;
                $3406 = HEAP8[$246>>0]|0;
                $3407 = HEAP32[$vinfos131>>2]|0;
                $3408 = (($3407) + 44|0);
                HEAP8[$3408>>0] = $3406;
                $3409 = HEAP8[$247>>0]|0;
                $3410 = HEAP32[$vinfos131>>2]|0;
                $3411 = (($3410) + 42|0);
                HEAP8[$3411>>0] = $3409;
                $3412 = HEAP32[$vinfos131>>2]|0;
                $3413 = (($3412) + 65|0);
                HEAP8[$3413>>0] = 1;
                $3414 = +HEAPF64[$248>>3];
                $3415 = HEAP32[$vinfos131>>2]|0;
                $3416 = (($3415) + 56|0);
                HEAPF64[$3416>>3] = $3414;
                $3417 = HEAP8[$249>>0]|0;
                $3418 = HEAP32[$vinfos131>>2]|0;
                $3419 = (($3418) + 67|0);
                HEAP8[$3419>>0] = $3417;
                $3420 = HEAP8[$250>>0]|0;
                $3421 = HEAP32[$vinfos131>>2]|0;
                $3422 = (($3421) + 68|0);
                HEAP8[$3422>>0] = $3420;
                $3423 = HEAP8[$251>>0]|0;
                $3424 = HEAP32[$vinfos131>>2]|0;
                $3425 = (($3424) + 66|0);
                HEAP8[$3425>>0] = $3423;
                $3426 = HEAP32[$vinfos131>>2]|0;
                $3427 = (($3426) + 89|0);
                HEAP8[$3427>>0] = 1;
                $3428 = +HEAPF64[$91>>3];
                $3429 = HEAP32[$vinfos131>>2]|0;
                $3430 = (($3429) + 80|0);
                HEAPF64[$3430>>3] = $3428;
                $3431 = HEAP8[$89>>0]|0;
                $3432 = HEAP32[$vinfos131>>2]|0;
                $3433 = (($3432) + 91|0);
                HEAP8[$3433>>0] = $3431;
                $3434 = HEAP8[$90>>0]|0;
                $3435 = HEAP32[$vinfos131>>2]|0;
                $3436 = (($3435) + 92|0);
                HEAP8[$3436>>0] = $3434;
                $3437 = HEAP8[$86>>0]|0;
                $3438 = HEAP32[$vinfos131>>2]|0;
                $3439 = (($3438) + 90|0);
                HEAP8[$3439>>0] = $3437;
                $3440 = HEAP32[$vinfos131>>2]|0;
                $3441 = (($3440) + 113|0);
                HEAP8[$3441>>0] = 1;
                $3442 = +HEAPF64[$27>>3];
                $3443 = HEAP32[$vinfos131>>2]|0;
                $3444 = (($3443) + 104|0);
                HEAPF64[$3444>>3] = $3442;
                $3445 = HEAP8[$25>>0]|0;
                $3446 = HEAP32[$vinfos131>>2]|0;
                $3447 = (($3446) + 115|0);
                HEAP8[$3447>>0] = $3445;
                $3448 = HEAP8[$26>>0]|0;
                $3449 = HEAP32[$vinfos131>>2]|0;
                $3450 = (($3449) + 116|0);
                HEAP8[$3450>>0] = $3448;
                $3451 = HEAP8[$24>>0]|0;
                $3452 = HEAP32[$vinfos131>>2]|0;
                $3453 = (($3452) + 114|0);
                HEAP8[$3453>>0] = $3451;
                $3454 = HEAP32[$vinfos131>>2]|0;
                $3455 = (($3454) + 137|0);
                HEAP8[$3455>>0] = 1;
                $3456 = +HEAPF64[$238>>3];
                $3457 = HEAP32[$vinfos131>>2]|0;
                $3458 = (($3457) + 128|0);
                HEAPF64[$3458>>3] = $3456;
                $3459 = HEAP8[$236>>0]|0;
                $3460 = HEAP32[$vinfos131>>2]|0;
                $3461 = (($3460) + 139|0);
                HEAP8[$3461>>0] = $3459;
                $3462 = HEAP8[$237>>0]|0;
                $3463 = HEAP32[$vinfos131>>2]|0;
                $3464 = (($3463) + 140|0);
                HEAP8[$3464>>0] = $3462;
                $3465 = HEAP8[$232>>0]|0;
                $3466 = HEAP32[$vinfos131>>2]|0;
                $3467 = (($3466) + 138|0);
                HEAP8[$3467>>0] = $3465;
                __ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ej($vfree132,0);
                $3468 = HEAP32[$solutions>>2]|0;
                $3469 = (($3468) + 8|0);
                $3470 = HEAP32[$3469>>2]|0;
                (FUNCTION_TABLE_iiii[$3470 & 31]($solutions,$vinfos131,$vfree132)|0);
                __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($vfree132);
                __ZNSt3__113__vector_baseIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEED2Ev($vinfos131);
                break L7;
               }
              } while(0);
              $1549 = +HEAPF64[$92>>3];
              $1550 = +HEAPF64[$20>>3];
              $1551 = $1549 * $1550;
              $1552 = +HEAPF64[$14>>3];
              $1553 = +HEAPF64[$93>>3];
              $1554 = $1552 * $1553;
              $1555 = $1550 * $1553;
              $1556 = $1549 * $1552;
              $1557 = $1556 + $1555;
              $1558 = +HEAPF64[$27>>3];
              $1559 = (+__Z5IKabsd($1558));
              $1560 = $1559 + 3.14159265358979;
              $1561 = (+__Z6IKfmoddd($1560,6.2831853071795898));
              $1562 = $1561 + -3.14159265358979;
              $1563 = +HEAPF64[$21>>3];
              $1564 = +HEAPF64[$22>>3];
              $1565 = $1551 - $1554;
              $1566 = $1554 - $1551;
              $1567 = (+__Z5IKabsd($1562));
              $1568 = $1567 < 9.9999999999999995E-7;
              do {
               if ($1568) {
                $1569 = +HEAPF64[$23>>3];
                $1570 = $1569 + -1.0;
                $1571 = (+__Z5IKabsd($1570));
                $1572 = $1571 < 9.9999999999999995E-7;
                if (!($1572)) {
                 break;
                }
                $1573 = (+__Z5IKabsd($1550));
                $1574 = $1573 < 9.9999999999999995E-7;
                if (!($1574)) {
                 break;
                }
                $1575 = (+__Z5IKabsd($1552));
                $1576 = $1575 < 9.9999999999999995E-7;
                if (!($1576)) {
                 break;
                }
                $1577 = (+__Z5IKabsd($1563));
                $1578 = $1577 < 9.9999999999999995E-7;
                if (!($1578)) {
                 break;
                }
                $1579 = (+__Z5IKabsd($1564));
                $1580 = $1579 < 9.9999999999999995E-7;
                if (!($1580)) {
                 break;
                }
                $1581 = (+__Z5IKabsd($1557));
                $1582 = $1581 < 9.9999999999999995E-7;
                if (!($1582)) {
                 break;
                }
                $1583 = (+__Z5IKabsd($1565));
                $1584 = $1583 < 9.9999999999999995E-7;
                if (!($1584)) {
                 break;
                }
                $1585 = (+__Z5IKabsd($1566));
                $1586 = $1585 < 9.9999999999999995E-7;
                if (!($1586)) {
                 break;
                }
                HEAP8[$94>>0] = 1;
                $1587 = +HEAPF64[$13>>3];
                $1588 = +HEAPF64[$12>>3];
                $1589 = +HEAPF64[$93>>3];
                $1590 = $1588 * $1589;
                $1591 = +HEAPF64[$92>>3];
                $1592 = $1587 * $1591;
                $1593 = -$1592;
                $1594 = $1593 - $1590;
                $1595 = (+__Z5IKabsd($1594));
                $1596 = $1595 < 1.9999999999999999E-6;
                do {
                 if ($1596) {
                  $1597 = $1588 * $1591;
                  $1598 = $1587 * $1589;
                  $1599 = $1597 - $1598;
                  $1600 = (+__Z5IKabsd($1599));
                  $1601 = $1600 < 1.9999999999999999E-6;
                  if (!($1601)) {
                   break;
                  }
                  $1602 = (+__Z5IKsqrd($1594));
                  $1603 = (+__Z5IKsqrd($1599));
                  $1604 = $1602 + $1603;
                  $1605 = $1604 + -1.0;
                  $1606 = (+__Z5IKabsd($1605));
                  $1607 = !($1606 <= 1.9999999999999999E-6);
                  if (!($1607)) {
                   break L7;
                  }
                 }
                } while(0);
                $1608 = +HEAPF64[$12>>3];
                $1609 = +HEAPF64[$93>>3];
                $1610 = $1608 * $1609;
                $1611 = +HEAPF64[$92>>3];
                $1612 = $1587 * $1611;
                $1613 = -$1612;
                $1614 = $1613 - $1610;
                $1615 = $1608 * $1611;
                $1616 = $1587 * $1609;
                $1617 = $1615 - $1616;
                $1618 = (+__Z7IKatan2dd($1614,$1617));
                HEAPF64[$j5array35>>3] = $1618;
                $1619 = (+__Z5IKsind($1618));
                HEAPF64[$sj5array37>>3] = $1619;
                $1620 = (+__Z5IKcosd($1618));
                HEAPF64[$cj5array36>>3] = $1620;
                $1621 = $1618 > 3.14159265358979;
                do {
                 if ($1621) {
                  $1622 = $1618 + -6.2831853071795898;
                  HEAPF64[$j5array35>>3] = $1622;
                 } else {
                  $1623 = $1618 < -3.14159265358979;
                  if (!($1623)) {
                   break;
                  }
                  $1624 = $1618 + 6.2831853071795898;
                  HEAPF64[$j5array35>>3] = $1624;
                 }
                } while(0);
                HEAP8[$95>>0] = 0;
                HEAP8[$96>>0] = -1;
                $1625 = +HEAPF64[$j5array35>>3];
                HEAPF64[$97>>3] = $1625;
                $1626 = +HEAPF64[$cj5array36>>3];
                HEAPF64[$98>>3] = $1626;
                $1627 = +HEAPF64[$sj5array37>>3];
                HEAPF64[$99>>3] = $1627;
                $1628 = +HEAPF64[$97>>3];
                $1629 = (+__Z5IKsind($1628));
                $1630 = (+__Z5IKcosd($1628));
                $1631 = +HEAPF64[$93>>3];
                $1632 = $1629 * $1631;
                $1633 = +HEAPF64[$92>>3];
                $1634 = $1630 * $1633;
                $1635 = +HEAPF64[$18>>3];
                $1636 = $1631 * $1635;
                $1637 = $1629 + $1636;
                $1638 = +HEAPF64[$13>>3];
                $1639 = $1633 * $1638;
                $1640 = $1637 + $1639;
                $1641 = +HEAPF64[$16>>3];
                $1642 = +HEAPF64[$12>>3];
                $1643 = $1630 * $1631;
                $1644 = $1629 * $1633;
                $1645 = $1643 + $1644;
                $1646 = $1645 + $1638;
                $1647 = $1632 - $1634;
                $1648 = $1647 + $1642;
                $1649 = $1635 + $1647;
                $1650 = $1631 * $1642;
                $1651 = -$1629;
                $1652 = $1651 - $1650;
                $1653 = $1633 * $1641;
                $1654 = $1653 + $1652;
                $1655 = $1633 * $1635;
                $1656 = $1655 - $1630;
                $1657 = $1631 * $1638;
                $1658 = $1656 - $1657;
                $1659 = $1641 - $1643;
                $1660 = $1659 - $1644;
                $1661 = (+__Z5IKabsd($1640));
                $1662 = $1661 > 5.0000000000000004E-6;
                if ($1662) {
                 break L7;
                }
                $1663 = $1631 * $1641;
                $1664 = $1663 - $1630;
                $1665 = $1633 * $1642;
                $1666 = $1664 + $1665;
                $1667 = (+__Z5IKabsd($1666));
                $1668 = $1667 > 5.0000000000000004E-6;
                if ($1668) {
                 break L7;
                }
                $1669 = (+__Z5IKabsd($1646));
                $1670 = $1669 > 5.0000000000000004E-6;
                if ($1670) {
                 break L7;
                }
                $1671 = (+__Z5IKabsd($1648));
                $1672 = $1671 > 5.0000000000000004E-6;
                if ($1672) {
                 break L7;
                }
                $1673 = (+__Z5IKabsd($1649));
                $1674 = $1673 > 5.0000000000000004E-6;
                if ($1674) {
                 break L7;
                }
                $1675 = (+__Z5IKabsd($1654));
                $1676 = $1675 > 5.0000000000000004E-6;
                if ($1676) {
                 break L7;
                }
                $1677 = (+__Z5IKabsd($1658));
                $1678 = $1677 > 5.0000000000000004E-6;
                if ($1678) {
                 break L7;
                }
                $1679 = (+__Z5IKabsd($1660));
                $1680 = $1679 > 5.0000000000000004E-6;
                if ($1680) {
                 break L7;
                }
                __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEEC2Ej($vinfos43,6);
                $1681 = HEAP32[$vinfos43>>2]|0;
                $1682 = (($1681) + 17|0);
                HEAP8[$1682>>0] = 1;
                $1683 = +HEAPF64[$this>>3];
                $1684 = HEAP32[$vinfos43>>2]|0;
                $1685 = (($1684) + 8|0);
                HEAPF64[$1685>>3] = $1683;
                $1686 = HEAP8[$100>>0]|0;
                $1687 = HEAP32[$vinfos43>>2]|0;
                $1688 = (($1687) + 19|0);
                HEAP8[$1688>>0] = $1686;
                $1689 = HEAP8[$101>>0]|0;
                $1690 = HEAP32[$vinfos43>>2]|0;
                $1691 = (($1690) + 20|0);
                HEAP8[$1691>>0] = $1689;
                $1692 = HEAP8[$102>>0]|0;
                $1693 = HEAP32[$vinfos43>>2]|0;
                $1694 = (($1693) + 18|0);
                HEAP8[$1694>>0] = $1692;
                $1695 = HEAP32[$vinfos43>>2]|0;
                $1696 = (($1695) + 41|0);
                HEAP8[$1696>>0] = 1;
                $1697 = +HEAPF64[$103>>3];
                $1698 = HEAP32[$vinfos43>>2]|0;
                $1699 = (($1698) + 32|0);
                HEAPF64[$1699>>3] = $1697;
                $1700 = HEAP8[$104>>0]|0;
                $1701 = HEAP32[$vinfos43>>2]|0;
                $1702 = (($1701) + 43|0);
                HEAP8[$1702>>0] = $1700;
                $1703 = HEAP8[$105>>0]|0;
                $1704 = HEAP32[$vinfos43>>2]|0;
                $1705 = (($1704) + 44|0);
                HEAP8[$1705>>0] = $1703;
                $1706 = HEAP8[$106>>0]|0;
                $1707 = HEAP32[$vinfos43>>2]|0;
                $1708 = (($1707) + 42|0);
                HEAP8[$1708>>0] = $1706;
                $1709 = HEAP32[$vinfos43>>2]|0;
                $1710 = (($1709) + 65|0);
                HEAP8[$1710>>0] = 1;
                $1711 = +HEAPF64[$107>>3];
                $1712 = HEAP32[$vinfos43>>2]|0;
                $1713 = (($1712) + 56|0);
                HEAPF64[$1713>>3] = $1711;
                $1714 = HEAP8[$108>>0]|0;
                $1715 = HEAP32[$vinfos43>>2]|0;
                $1716 = (($1715) + 67|0);
                HEAP8[$1716>>0] = $1714;
                $1717 = HEAP8[$109>>0]|0;
                $1718 = HEAP32[$vinfos43>>2]|0;
                $1719 = (($1718) + 68|0);
                HEAP8[$1719>>0] = $1717;
                $1720 = HEAP8[$110>>0]|0;
                $1721 = HEAP32[$vinfos43>>2]|0;
                $1722 = (($1721) + 66|0);
                HEAP8[$1722>>0] = $1720;
                $1723 = HEAP32[$vinfos43>>2]|0;
                $1724 = (($1723) + 89|0);
                HEAP8[$1724>>0] = 1;
                $1725 = +HEAPF64[$91>>3];
                $1726 = HEAP32[$vinfos43>>2]|0;
                $1727 = (($1726) + 80|0);
                HEAPF64[$1727>>3] = $1725;
                $1728 = HEAP8[$89>>0]|0;
                $1729 = HEAP32[$vinfos43>>2]|0;
                $1730 = (($1729) + 91|0);
                HEAP8[$1730>>0] = $1728;
                $1731 = HEAP8[$90>>0]|0;
                $1732 = HEAP32[$vinfos43>>2]|0;
                $1733 = (($1732) + 92|0);
                HEAP8[$1733>>0] = $1731;
                $1734 = HEAP8[$86>>0]|0;
                $1735 = HEAP32[$vinfos43>>2]|0;
                $1736 = (($1735) + 90|0);
                HEAP8[$1736>>0] = $1734;
                $1737 = HEAP32[$vinfos43>>2]|0;
                $1738 = (($1737) + 113|0);
                HEAP8[$1738>>0] = 1;
                $1739 = +HEAPF64[$27>>3];
                $1740 = HEAP32[$vinfos43>>2]|0;
                $1741 = (($1740) + 104|0);
                HEAPF64[$1741>>3] = $1739;
                $1742 = HEAP8[$25>>0]|0;
                $1743 = HEAP32[$vinfos43>>2]|0;
                $1744 = (($1743) + 115|0);
                HEAP8[$1744>>0] = $1742;
                $1745 = HEAP8[$26>>0]|0;
                $1746 = HEAP32[$vinfos43>>2]|0;
                $1747 = (($1746) + 116|0);
                HEAP8[$1747>>0] = $1745;
                $1748 = HEAP8[$24>>0]|0;
                $1749 = HEAP32[$vinfos43>>2]|0;
                $1750 = (($1749) + 114|0);
                HEAP8[$1750>>0] = $1748;
                $1751 = HEAP32[$vinfos43>>2]|0;
                $1752 = (($1751) + 137|0);
                HEAP8[$1752>>0] = 1;
                $1753 = +HEAPF64[$97>>3];
                $1754 = HEAP32[$vinfos43>>2]|0;
                $1755 = (($1754) + 128|0);
                HEAPF64[$1755>>3] = $1753;
                $1756 = HEAP8[$95>>0]|0;
                $1757 = HEAP32[$vinfos43>>2]|0;
                $1758 = (($1757) + 139|0);
                HEAP8[$1758>>0] = $1756;
                $1759 = HEAP8[$96>>0]|0;
                $1760 = HEAP32[$vinfos43>>2]|0;
                $1761 = (($1760) + 140|0);
                HEAP8[$1761>>0] = $1759;
                $1762 = HEAP8[$94>>0]|0;
                $1763 = HEAP32[$vinfos43>>2]|0;
                $1764 = (($1763) + 138|0);
                HEAP8[$1764>>0] = $1762;
                __ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ej($vfree44,0);
                $1765 = HEAP32[$solutions>>2]|0;
                $1766 = (($1765) + 8|0);
                $1767 = HEAP32[$1766>>2]|0;
                (FUNCTION_TABLE_iiii[$1767 & 31]($solutions,$vinfos43,$vfree44)|0);
                __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($vfree44);
                __ZNSt3__113__vector_baseIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEED2Ev($vinfos43);
                break L7;
               }
              } while(0);
              $1768 = +HEAPF64[$20>>3];
              $1769 = +HEAPF64[$93>>3];
              $1770 = $1768 * $1769;
              $1771 = +HEAPF64[$92>>3];
              $1772 = +HEAPF64[$14>>3];
              $1773 = $1771 * $1772;
              $1774 = $1770 + $1773;
              $1775 = $1769 * $1772;
              $1776 = $1768 * $1771;
              $1777 = $1776 - $1775;
              $1778 = +HEAPF64[$27>>3];
              $1779 = $1778 + -3.14159265358979;
              $1780 = (+__Z5IKabsd($1779));
              $1781 = $1780 + 3.14159265358979;
              $1782 = (+__Z6IKfmoddd($1781,6.2831853071795898));
              $1783 = $1782 + -3.14159265358979;
              $1784 = +HEAPF64[$21>>3];
              $1785 = +HEAPF64[$22>>3];
              $1786 = (+__Z5IKabsd($1783));
              $1787 = $1786 < 9.9999999999999995E-7;
              do {
               if ($1787) {
                $1788 = +HEAPF64[$23>>3];
                $1789 = $1788 + 1.0;
                $1790 = (+__Z5IKabsd($1789));
                $1791 = $1790 < 9.9999999999999995E-7;
                if (!($1791)) {
                 break;
                }
                $1792 = (+__Z5IKabsd($1768));
                $1793 = $1792 < 9.9999999999999995E-7;
                if (!($1793)) {
                 break;
                }
                $1794 = (+__Z5IKabsd($1772));
                $1795 = $1794 < 9.9999999999999995E-7;
                if (!($1795)) {
                 break;
                }
                $1796 = (+__Z5IKabsd($1784));
                $1797 = $1796 < 9.9999999999999995E-7;
                if (!($1797)) {
                 break;
                }
                $1798 = (+__Z5IKabsd($1785));
                $1799 = $1798 < 9.9999999999999995E-7;
                if (!($1799)) {
                 break;
                }
                $1800 = (+__Z5IKabsd($1774));
                $1801 = $1800 < 9.9999999999999995E-7;
                if (!($1801)) {
                 break;
                }
                $1802 = (+__Z5IKabsd($1777));
                $1803 = $1802 < 9.9999999999999995E-7;
                if (!($1803)) {
                 break;
                }
                HEAP8[$111>>0] = 1;
                $1804 = +HEAPF64[$92>>3];
                $1805 = +HEAPF64[$13>>3];
                $1806 = $1804 * $1805;
                $1807 = +HEAPF64[$18>>3];
                $1808 = +HEAPF64[$93>>3];
                $1809 = $1807 * $1808;
                $1810 = -$1809;
                $1811 = $1810 - $1806;
                $1812 = (+__Z5IKabsd($1811));
                $1813 = $1812 < 1.9999999999999999E-6;
                do {
                 if ($1813) {
                  $1814 = $1804 * $1807;
                  $1815 = $1805 * $1808;
                  $1816 = $1815 - $1814;
                  $1817 = (+__Z5IKabsd($1816));
                  $1818 = $1817 < 1.9999999999999999E-6;
                  if (!($1818)) {
                   break;
                  }
                  $1819 = (+__Z5IKsqrd($1811));
                  $1820 = (+__Z5IKsqrd($1816));
                  $1821 = $1819 + $1820;
                  $1822 = $1821 + -1.0;
                  $1823 = (+__Z5IKabsd($1822));
                  $1824 = !($1823 <= 1.9999999999999999E-6);
                  if (!($1824)) {
                   break L7;
                  }
                 }
                } while(0);
                $1825 = +HEAPF64[$13>>3];
                $1826 = $1804 * $1825;
                $1827 = +HEAPF64[$18>>3];
                $1828 = -$1827;
                $1829 = +HEAPF64[$93>>3];
                $1830 = $1829 * $1828;
                $1831 = $1830 - $1826;
                $1832 = $1804 * $1828;
                $1833 = $1825 * $1829;
                $1834 = $1832 + $1833;
                $1835 = (+__Z7IKatan2dd($1831,$1834));
                HEAPF64[$j5array46>>3] = $1835;
                $1836 = (+__Z5IKsind($1835));
                HEAPF64[$sj5array48>>3] = $1836;
                $1837 = (+__Z5IKcosd($1835));
                HEAPF64[$cj5array47>>3] = $1837;
                $1838 = $1835 > 3.14159265358979;
                do {
                 if ($1838) {
                  $1839 = $1835 + -6.2831853071795898;
                  HEAPF64[$j5array46>>3] = $1839;
                 } else {
                  $1840 = $1835 < -3.14159265358979;
                  if (!($1840)) {
                   break;
                  }
                  $1841 = $1835 + 6.2831853071795898;
                  HEAPF64[$j5array46>>3] = $1841;
                 }
                } while(0);
                HEAP8[$112>>0] = 0;
                HEAP8[$113>>0] = -1;
                $1842 = +HEAPF64[$j5array46>>3];
                HEAPF64[$114>>3] = $1842;
                $1843 = +HEAPF64[$cj5array47>>3];
                HEAPF64[$115>>3] = $1843;
                $1844 = +HEAPF64[$sj5array48>>3];
                HEAPF64[$116>>3] = $1844;
                $1845 = +HEAPF64[$114>>3];
                $1846 = (+__Z5IKsind($1845));
                $1847 = (+__Z5IKcosd($1845));
                $1848 = +HEAPF64[$93>>3];
                $1849 = +HEAPF64[$92>>3];
                $1850 = $1846 * $1849;
                $1851 = $1847 * $1848;
                $1852 = +HEAPF64[$18>>3];
                $1853 = $1848 * $1852;
                $1854 = $1846 + $1853;
                $1855 = +HEAPF64[$13>>3];
                $1856 = $1849 * $1855;
                $1857 = $1854 + $1856;
                $1858 = +HEAPF64[$16>>3];
                $1859 = +HEAPF64[$12>>3];
                $1860 = $1848 * $1855;
                $1861 = $1847 - $1860;
                $1862 = $1849 * $1852;
                $1863 = $1862 + $1861;
                $1864 = $1848 * $1858;
                $1865 = $1849 * $1859;
                $1866 = $1864 + $1865;
                $1867 = $1866 - $1847;
                $1868 = $1846 * $1848;
                $1869 = $1847 * $1849;
                $1870 = $1868 + $1869;
                $1871 = $1852 + $1870;
                $1872 = $1850 + $1855;
                $1873 = $1872 - $1851;
                $1874 = $1850 + $1858;
                $1875 = $1874 - $1851;
                $1876 = -$1868;
                $1877 = $1876 - $1869;
                $1878 = $1877 + $1859;
                $1879 = (+__Z5IKabsd($1857));
                $1880 = $1879 > 5.0000000000000004E-6;
                if ($1880) {
                 break L7;
                }
                $1881 = $1849 * $1858;
                $1882 = $1846 + $1881;
                $1883 = $1848 * $1859;
                $1884 = $1882 - $1883;
                $1885 = (+__Z5IKabsd($1884));
                $1886 = $1885 > 5.0000000000000004E-6;
                if ($1886) {
                 break L7;
                }
                $1887 = (+__Z5IKabsd($1863));
                $1888 = $1887 > 5.0000000000000004E-6;
                if ($1888) {
                 break L7;
                }
                $1889 = (+__Z5IKabsd($1867));
                $1890 = $1889 > 5.0000000000000004E-6;
                if ($1890) {
                 break L7;
                }
                $1891 = (+__Z5IKabsd($1871));
                $1892 = $1891 > 5.0000000000000004E-6;
                if ($1892) {
                 break L7;
                }
                $1893 = (+__Z5IKabsd($1873));
                $1894 = $1893 > 5.0000000000000004E-6;
                if ($1894) {
                 break L7;
                }
                $1895 = (+__Z5IKabsd($1875));
                $1896 = $1895 > 5.0000000000000004E-6;
                if ($1896) {
                 break L7;
                }
                $1897 = (+__Z5IKabsd($1878));
                $1898 = $1897 > 5.0000000000000004E-6;
                if ($1898) {
                 break L7;
                }
                __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEEC2Ej($vinfos54,6);
                $1899 = HEAP32[$vinfos54>>2]|0;
                $1900 = (($1899) + 17|0);
                HEAP8[$1900>>0] = 1;
                $1901 = +HEAPF64[$this>>3];
                $1902 = HEAP32[$vinfos54>>2]|0;
                $1903 = (($1902) + 8|0);
                HEAPF64[$1903>>3] = $1901;
                $1904 = HEAP8[$117>>0]|0;
                $1905 = HEAP32[$vinfos54>>2]|0;
                $1906 = (($1905) + 19|0);
                HEAP8[$1906>>0] = $1904;
                $1907 = HEAP8[$118>>0]|0;
                $1908 = HEAP32[$vinfos54>>2]|0;
                $1909 = (($1908) + 20|0);
                HEAP8[$1909>>0] = $1907;
                $1910 = HEAP8[$119>>0]|0;
                $1911 = HEAP32[$vinfos54>>2]|0;
                $1912 = (($1911) + 18|0);
                HEAP8[$1912>>0] = $1910;
                $1913 = HEAP32[$vinfos54>>2]|0;
                $1914 = (($1913) + 41|0);
                HEAP8[$1914>>0] = 1;
                $1915 = +HEAPF64[$120>>3];
                $1916 = HEAP32[$vinfos54>>2]|0;
                $1917 = (($1916) + 32|0);
                HEAPF64[$1917>>3] = $1915;
                $1918 = HEAP8[$121>>0]|0;
                $1919 = HEAP32[$vinfos54>>2]|0;
                $1920 = (($1919) + 43|0);
                HEAP8[$1920>>0] = $1918;
                $1921 = HEAP8[$122>>0]|0;
                $1922 = HEAP32[$vinfos54>>2]|0;
                $1923 = (($1922) + 44|0);
                HEAP8[$1923>>0] = $1921;
                $1924 = HEAP8[$123>>0]|0;
                $1925 = HEAP32[$vinfos54>>2]|0;
                $1926 = (($1925) + 42|0);
                HEAP8[$1926>>0] = $1924;
                $1927 = HEAP32[$vinfos54>>2]|0;
                $1928 = (($1927) + 65|0);
                HEAP8[$1928>>0] = 1;
                $1929 = +HEAPF64[$124>>3];
                $1930 = HEAP32[$vinfos54>>2]|0;
                $1931 = (($1930) + 56|0);
                HEAPF64[$1931>>3] = $1929;
                $1932 = HEAP8[$125>>0]|0;
                $1933 = HEAP32[$vinfos54>>2]|0;
                $1934 = (($1933) + 67|0);
                HEAP8[$1934>>0] = $1932;
                $1935 = HEAP8[$126>>0]|0;
                $1936 = HEAP32[$vinfos54>>2]|0;
                $1937 = (($1936) + 68|0);
                HEAP8[$1937>>0] = $1935;
                $1938 = HEAP8[$127>>0]|0;
                $1939 = HEAP32[$vinfos54>>2]|0;
                $1940 = (($1939) + 66|0);
                HEAP8[$1940>>0] = $1938;
                $1941 = HEAP32[$vinfos54>>2]|0;
                $1942 = (($1941) + 89|0);
                HEAP8[$1942>>0] = 1;
                $1943 = +HEAPF64[$91>>3];
                $1944 = HEAP32[$vinfos54>>2]|0;
                $1945 = (($1944) + 80|0);
                HEAPF64[$1945>>3] = $1943;
                $1946 = HEAP8[$89>>0]|0;
                $1947 = HEAP32[$vinfos54>>2]|0;
                $1948 = (($1947) + 91|0);
                HEAP8[$1948>>0] = $1946;
                $1949 = HEAP8[$90>>0]|0;
                $1950 = HEAP32[$vinfos54>>2]|0;
                $1951 = (($1950) + 92|0);
                HEAP8[$1951>>0] = $1949;
                $1952 = HEAP8[$86>>0]|0;
                $1953 = HEAP32[$vinfos54>>2]|0;
                $1954 = (($1953) + 90|0);
                HEAP8[$1954>>0] = $1952;
                $1955 = HEAP32[$vinfos54>>2]|0;
                $1956 = (($1955) + 113|0);
                HEAP8[$1956>>0] = 1;
                $1957 = +HEAPF64[$27>>3];
                $1958 = HEAP32[$vinfos54>>2]|0;
                $1959 = (($1958) + 104|0);
                HEAPF64[$1959>>3] = $1957;
                $1960 = HEAP8[$25>>0]|0;
                $1961 = HEAP32[$vinfos54>>2]|0;
                $1962 = (($1961) + 115|0);
                HEAP8[$1962>>0] = $1960;
                $1963 = HEAP8[$26>>0]|0;
                $1964 = HEAP32[$vinfos54>>2]|0;
                $1965 = (($1964) + 116|0);
                HEAP8[$1965>>0] = $1963;
                $1966 = HEAP8[$24>>0]|0;
                $1967 = HEAP32[$vinfos54>>2]|0;
                $1968 = (($1967) + 114|0);
                HEAP8[$1968>>0] = $1966;
                $1969 = HEAP32[$vinfos54>>2]|0;
                $1970 = (($1969) + 137|0);
                HEAP8[$1970>>0] = 1;
                $1971 = +HEAPF64[$114>>3];
                $1972 = HEAP32[$vinfos54>>2]|0;
                $1973 = (($1972) + 128|0);
                HEAPF64[$1973>>3] = $1971;
                $1974 = HEAP8[$112>>0]|0;
                $1975 = HEAP32[$vinfos54>>2]|0;
                $1976 = (($1975) + 139|0);
                HEAP8[$1976>>0] = $1974;
                $1977 = HEAP8[$113>>0]|0;
                $1978 = HEAP32[$vinfos54>>2]|0;
                $1979 = (($1978) + 140|0);
                HEAP8[$1979>>0] = $1977;
                $1980 = HEAP8[$111>>0]|0;
                $1981 = HEAP32[$vinfos54>>2]|0;
                $1982 = (($1981) + 138|0);
                HEAP8[$1982>>0] = $1980;
                __ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ej($vfree55,0);
                $1983 = HEAP32[$solutions>>2]|0;
                $1984 = (($1983) + 8|0);
                $1985 = HEAP32[$1984>>2]|0;
                (FUNCTION_TABLE_iiii[$1985 & 31]($solutions,$vinfos54,$vfree55)|0);
                __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($vfree55);
                __ZNSt3__113__vector_baseIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEED2Ev($vinfos54);
                break L7;
               }
              } while(0);
              $1986 = +HEAPF64[$93>>3];
              $1987 = +HEAPF64[$20>>3];
              $1988 = $1986 * $1987;
              $1989 = +HEAPF64[$92>>3];
              $1990 = +HEAPF64[$14>>3];
              $1991 = $1989 * $1990;
              $1992 = $1988 + $1991;
              $1993 = +HEAPF64[$16>>3];
              $1994 = $1989 * $1993;
              $1995 = +HEAPF64[$12>>3];
              $1996 = $1986 * $1995;
              $1997 = $1994 - $1996;
              $1998 = +HEAPF64[$13>>3];
              $1999 = $1986 * $1998;
              $2000 = +HEAPF64[$18>>3];
              $2001 = $1989 * $2000;
              $2002 = $2001 - $1999;
              $2003 = $1986 * $1990;
              $2004 = 1.0 - $2003;
              $2005 = $1987 * $1989;
              $2006 = $2005 + $2004;
              $2007 = +HEAPF64[$27>>3];
              $2008 = $2007 + -1.5707963267949001;
              $2009 = (+__Z5IKabsd($2008));
              $2010 = $2009 + 3.14159265358979;
              $2011 = (+__Z6IKfmoddd($2010,6.2831853071795898));
              $2012 = $2011 + -3.14159265358979;
              $2013 = $1987 + $1989;
              $2014 = $1990 - $1986;
              $2015 = (+__Z5IKabsd($2012));
              $2016 = $2015 < 9.9999999999999995E-7;
              do {
               if ($2016) {
                $2017 = +HEAPF64[$23>>3];
                $2018 = (+__Z5IKabsd($2017));
                $2019 = $2018 < 9.9999999999999995E-7;
                if (!($2019)) {
                 break;
                }
                $2020 = (+__Z5IKabsd($2013));
                $2021 = $2020 < 9.9999999999999995E-7;
                if (!($2021)) {
                 break;
                }
                $2022 = (+__Z5IKabsd($2014));
                $2023 = $2022 < 9.9999999999999995E-7;
                if (!($2023)) {
                 break;
                }
                $2024 = (+__Z5IKabsd($1992));
                $2025 = $2024 < 9.9999999999999995E-7;
                if (!($2025)) {
                 break;
                }
                $2026 = (+__Z5IKabsd($2006));
                $2027 = $2026 < 9.9999999999999995E-7;
                if (!($2027)) {
                 break;
                }
                $2028 = (+__Z5IKabsd($1997));
                $2029 = $2028 < 9.9999999999999995E-7;
                if (!($2029)) {
                 break;
                }
                $2030 = (+__Z5IKabsd($2002));
                $2031 = $2030 < 9.9999999999999995E-7;
                if (!($2031)) {
                 break;
                }
                HEAP8[$128>>0] = 1;
                $2032 = +HEAPF64[$21>>3];
                $2033 = (+__Z5IKabsd($2032));
                $2034 = $2033 < 1.9999999999999999E-6;
                do {
                 if ($2034) {
                  $2035 = +HEAPF64[$22>>3];
                  $2036 = (+__Z5IKabsd($2035));
                  $2037 = $2036 < 1.9999999999999999E-6;
                  if (!($2037)) {
                   break;
                  }
                  $2038 = (+__Z5IKsqrd($2032));
                  $2039 = (+__Z5IKsqrd($2035));
                  $2040 = $2038 + $2039;
                  $2041 = $2040 + -1.0;
                  $2042 = (+__Z5IKabsd($2041));
                  $2043 = !($2042 <= 1.9999999999999999E-6);
                  if (!($2043)) {
                   break L7;
                  }
                 }
                } while(0);
                $2044 = +HEAPF64[$21>>3];
                $2045 = +HEAPF64[$22>>3];
                $2046 = (+__Z7IKatan2dd($2044,$2045));
                HEAPF64[$j5array57>>3] = $2046;
                $2047 = (+__Z5IKsind($2046));
                HEAPF64[$sj5array59>>3] = $2047;
                $2048 = (+__Z5IKcosd($2046));
                HEAPF64[$cj5array58>>3] = $2048;
                $2049 = $2046 > 3.14159265358979;
                do {
                 if ($2049) {
                  $2050 = $2046 + -6.2831853071795898;
                  HEAPF64[$j5array57>>3] = $2050;
                 } else {
                  $2051 = $2046 < -3.14159265358979;
                  if (!($2051)) {
                   break;
                  }
                  $2052 = $2046 + 6.2831853071795898;
                  HEAPF64[$j5array57>>3] = $2052;
                 }
                } while(0);
                HEAP8[$129>>0] = 0;
                HEAP8[$130>>0] = -1;
                $2053 = +HEAPF64[$j5array57>>3];
                HEAPF64[$131>>3] = $2053;
                $2054 = +HEAPF64[$cj5array58>>3];
                HEAPF64[$132>>3] = $2054;
                $2055 = +HEAPF64[$sj5array59>>3];
                HEAPF64[$133>>3] = $2055;
                $2056 = +HEAPF64[$131>>3];
                $2057 = (+__Z5IKcosd($2056));
                $2058 = (+__Z5IKsind($2056));
                $2059 = +HEAPF64[$20>>3];
                $2060 = +HEAPF64[$21>>3];
                $2061 = $2060 - $2058;
                $2062 = $2057 * $2059;
                $2063 = +HEAPF64[$12>>3];
                $2064 = $2062 + $2063;
                $2065 = +HEAPF64[$14>>3];
                $2066 = $2058 * $2065;
                $2067 = +HEAPF64[$18>>3];
                $2068 = $2066 + $2067;
                $2069 = $2058 * $2059;
                $2070 = +HEAPF64[$13>>3];
                $2071 = $2070 - $2069;
                $2072 = +HEAPF64[$16>>3];
                $2073 = $2057 * $2065;
                $2074 = $2072 - $2073;
                $2075 = $2059 * $2070;
                $2076 = $2058 - $2075;
                $2077 = $2065 * $2067;
                $2078 = $2077 + $2076;
                $2079 = $2065 * $2072;
                $2080 = $2079 - $2057;
                $2081 = $2059 * $2063;
                $2082 = $2080 - $2081;
                $2083 = (+__Z5IKabsd($2061));
                $2084 = $2083 > 5.0000000000000004E-6;
                if ($2084) {
                 break L7;
                }
                $2085 = +HEAPF64[$22>>3];
                $2086 = $2085 - $2057;
                $2087 = (+__Z5IKabsd($2086));
                $2088 = $2087 > 5.0000000000000004E-6;
                if ($2088) {
                 break L7;
                }
                $2089 = (+__Z5IKabsd($2064));
                $2090 = $2089 > 5.0000000000000004E-6;
                if ($2090) {
                 break L7;
                }
                $2091 = (+__Z5IKabsd($2068));
                $2092 = $2091 > 5.0000000000000004E-6;
                if ($2092) {
                 break L7;
                }
                $2093 = (+__Z5IKabsd($2071));
                $2094 = $2093 > 5.0000000000000004E-6;
                if ($2094) {
                 break L7;
                }
                $2095 = (+__Z5IKabsd($2074));
                $2096 = $2095 > 5.0000000000000004E-6;
                if ($2096) {
                 break L7;
                }
                $2097 = (+__Z5IKabsd($2078));
                $2098 = $2097 > 5.0000000000000004E-6;
                if ($2098) {
                 break L7;
                }
                $2099 = (+__Z5IKabsd($2082));
                $2100 = $2099 > 5.0000000000000004E-6;
                if ($2100) {
                 break L7;
                }
                __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEEC2Ej($vinfos65,6);
                $2101 = HEAP32[$vinfos65>>2]|0;
                $2102 = (($2101) + 17|0);
                HEAP8[$2102>>0] = 1;
                $2103 = +HEAPF64[$this>>3];
                $2104 = HEAP32[$vinfos65>>2]|0;
                $2105 = (($2104) + 8|0);
                HEAPF64[$2105>>3] = $2103;
                $2106 = HEAP8[$134>>0]|0;
                $2107 = HEAP32[$vinfos65>>2]|0;
                $2108 = (($2107) + 19|0);
                HEAP8[$2108>>0] = $2106;
                $2109 = HEAP8[$135>>0]|0;
                $2110 = HEAP32[$vinfos65>>2]|0;
                $2111 = (($2110) + 20|0);
                HEAP8[$2111>>0] = $2109;
                $2112 = HEAP8[$136>>0]|0;
                $2113 = HEAP32[$vinfos65>>2]|0;
                $2114 = (($2113) + 18|0);
                HEAP8[$2114>>0] = $2112;
                $2115 = HEAP32[$vinfos65>>2]|0;
                $2116 = (($2115) + 41|0);
                HEAP8[$2116>>0] = 1;
                $2117 = +HEAPF64[$137>>3];
                $2118 = HEAP32[$vinfos65>>2]|0;
                $2119 = (($2118) + 32|0);
                HEAPF64[$2119>>3] = $2117;
                $2120 = HEAP8[$138>>0]|0;
                $2121 = HEAP32[$vinfos65>>2]|0;
                $2122 = (($2121) + 43|0);
                HEAP8[$2122>>0] = $2120;
                $2123 = HEAP8[$139>>0]|0;
                $2124 = HEAP32[$vinfos65>>2]|0;
                $2125 = (($2124) + 44|0);
                HEAP8[$2125>>0] = $2123;
                $2126 = HEAP8[$140>>0]|0;
                $2127 = HEAP32[$vinfos65>>2]|0;
                $2128 = (($2127) + 42|0);
                HEAP8[$2128>>0] = $2126;
                $2129 = HEAP32[$vinfos65>>2]|0;
                $2130 = (($2129) + 65|0);
                HEAP8[$2130>>0] = 1;
                $2131 = +HEAPF64[$141>>3];
                $2132 = HEAP32[$vinfos65>>2]|0;
                $2133 = (($2132) + 56|0);
                HEAPF64[$2133>>3] = $2131;
                $2134 = HEAP8[$142>>0]|0;
                $2135 = HEAP32[$vinfos65>>2]|0;
                $2136 = (($2135) + 67|0);
                HEAP8[$2136>>0] = $2134;
                $2137 = HEAP8[$143>>0]|0;
                $2138 = HEAP32[$vinfos65>>2]|0;
                $2139 = (($2138) + 68|0);
                HEAP8[$2139>>0] = $2137;
                $2140 = HEAP8[$144>>0]|0;
                $2141 = HEAP32[$vinfos65>>2]|0;
                $2142 = (($2141) + 66|0);
                HEAP8[$2142>>0] = $2140;
                $2143 = HEAP32[$vinfos65>>2]|0;
                $2144 = (($2143) + 89|0);
                HEAP8[$2144>>0] = 1;
                $2145 = +HEAPF64[$91>>3];
                $2146 = HEAP32[$vinfos65>>2]|0;
                $2147 = (($2146) + 80|0);
                HEAPF64[$2147>>3] = $2145;
                $2148 = HEAP8[$89>>0]|0;
                $2149 = HEAP32[$vinfos65>>2]|0;
                $2150 = (($2149) + 91|0);
                HEAP8[$2150>>0] = $2148;
                $2151 = HEAP8[$90>>0]|0;
                $2152 = HEAP32[$vinfos65>>2]|0;
                $2153 = (($2152) + 92|0);
                HEAP8[$2153>>0] = $2151;
                $2154 = HEAP8[$86>>0]|0;
                $2155 = HEAP32[$vinfos65>>2]|0;
                $2156 = (($2155) + 90|0);
                HEAP8[$2156>>0] = $2154;
                $2157 = HEAP32[$vinfos65>>2]|0;
                $2158 = (($2157) + 113|0);
                HEAP8[$2158>>0] = 1;
                $2159 = +HEAPF64[$27>>3];
                $2160 = HEAP32[$vinfos65>>2]|0;
                $2161 = (($2160) + 104|0);
                HEAPF64[$2161>>3] = $2159;
                $2162 = HEAP8[$25>>0]|0;
                $2163 = HEAP32[$vinfos65>>2]|0;
                $2164 = (($2163) + 115|0);
                HEAP8[$2164>>0] = $2162;
                $2165 = HEAP8[$26>>0]|0;
                $2166 = HEAP32[$vinfos65>>2]|0;
                $2167 = (($2166) + 116|0);
                HEAP8[$2167>>0] = $2165;
                $2168 = HEAP8[$24>>0]|0;
                $2169 = HEAP32[$vinfos65>>2]|0;
                $2170 = (($2169) + 114|0);
                HEAP8[$2170>>0] = $2168;
                $2171 = HEAP32[$vinfos65>>2]|0;
                $2172 = (($2171) + 137|0);
                HEAP8[$2172>>0] = 1;
                $2173 = +HEAPF64[$131>>3];
                $2174 = HEAP32[$vinfos65>>2]|0;
                $2175 = (($2174) + 128|0);
                HEAPF64[$2175>>3] = $2173;
                $2176 = HEAP8[$129>>0]|0;
                $2177 = HEAP32[$vinfos65>>2]|0;
                $2178 = (($2177) + 139|0);
                HEAP8[$2178>>0] = $2176;
                $2179 = HEAP8[$130>>0]|0;
                $2180 = HEAP32[$vinfos65>>2]|0;
                $2181 = (($2180) + 140|0);
                HEAP8[$2181>>0] = $2179;
                $2182 = HEAP8[$128>>0]|0;
                $2183 = HEAP32[$vinfos65>>2]|0;
                $2184 = (($2183) + 138|0);
                HEAP8[$2184>>0] = $2182;
                __ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ej($vfree66,0);
                $2185 = HEAP32[$solutions>>2]|0;
                $2186 = (($2185) + 8|0);
                $2187 = HEAP32[$2186>>2]|0;
                (FUNCTION_TABLE_iiii[$2187 & 31]($solutions,$vinfos65,$vfree66)|0);
                __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($vfree66);
                __ZNSt3__113__vector_baseIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEED2Ev($vinfos65);
                break L7;
               }
              } while(0);
              $2188 = +HEAPF64[$92>>3];
              $2189 = +HEAPF64[$20>>3];
              $2190 = $2188 * $2189;
              $2191 = +HEAPF64[$13>>3];
              $2192 = +HEAPF64[$93>>3];
              $2193 = $2191 * $2192;
              $2194 = +HEAPF64[$12>>3];
              $2195 = $2192 * $2194;
              $2196 = +HEAPF64[$14>>3];
              $2197 = $2192 * $2196;
              $2198 = $2189 * $2192;
              $2199 = $2188 * $2196;
              $2200 = $2198 + $2199;
              $2201 = +HEAPF64[$27>>3];
              $2202 = $2201 + 1.5707963267949001;
              $2203 = (+__Z5IKabsd($2202));
              $2204 = $2203 + 3.14159265358979;
              $2205 = (+__Z6IKfmoddd($2204,6.2831853071795898));
              $2206 = $2205 + -3.14159265358979;
              $2207 = $2189 - $2188;
              $2208 = $2192 + $2196;
              $2209 = $2190 + -1.0;
              $2210 = $2209 - $2197;
              $2211 = +HEAPF64[$16>>3];
              $2212 = $2188 * $2211;
              $2213 = $2212 - $2195;
              $2214 = +HEAPF64[$18>>3];
              $2215 = $2188 * $2214;
              $2216 = $2215 - $2193;
              $2217 = $2195 - $2212;
              $2218 = $2193 - $2215;
              $2219 = $2197 + 1.0;
              $2220 = $2219 - $2190;
              $2221 = (+__Z5IKabsd($2206));
              $2222 = $2221 < 9.9999999999999995E-7;
              do {
               if ($2222) {
                $2223 = +HEAPF64[$23>>3];
                $2224 = (+__Z5IKabsd($2223));
                $2225 = $2224 < 9.9999999999999995E-7;
                if (!($2225)) {
                 break;
                }
                $2226 = (+__Z5IKabsd($2207));
                $2227 = $2226 < 9.9999999999999995E-7;
                if (!($2227)) {
                 break;
                }
                $2228 = (+__Z5IKabsd($2208));
                $2229 = $2228 < 9.9999999999999995E-7;
                if (!($2229)) {
                 break;
                }
                $2230 = (+__Z5IKabsd($2200));
                $2231 = $2230 < 9.9999999999999995E-7;
                if (!($2231)) {
                 break;
                }
                $2232 = (+__Z5IKabsd($2210));
                $2233 = $2232 < 9.9999999999999995E-7;
                if (!($2233)) {
                 break;
                }
                $2234 = (+__Z5IKabsd($2213));
                $2235 = $2234 < 9.9999999999999995E-7;
                if (!($2235)) {
                 break;
                }
                $2236 = (+__Z5IKabsd($2216));
                $2237 = $2236 < 9.9999999999999995E-7;
                if (!($2237)) {
                 break;
                }
                $2238 = (+__Z5IKabsd($2217));
                $2239 = $2238 < 9.9999999999999995E-7;
                if (!($2239)) {
                 break;
                }
                $2240 = (+__Z5IKabsd($2218));
                $2241 = $2240 < 9.9999999999999995E-7;
                if (!($2241)) {
                 break;
                }
                $2242 = (+__Z5IKabsd($2220));
                $2243 = $2242 < 9.9999999999999995E-7;
                if (!($2243)) {
                 break;
                }
                HEAP8[$145>>0] = 1;
                $2244 = +HEAPF64[$21>>3];
                $2245 = -$2244;
                $2246 = (+__Z5IKabsd($2245));
                $2247 = $2246 < 1.9999999999999999E-6;
                do {
                 if ($2247) {
                  $2248 = +HEAPF64[$22>>3];
                  $2249 = -$2248;
                  $2250 = (+__Z5IKabsd($2249));
                  $2251 = $2250 < 1.9999999999999999E-6;
                  if (!($2251)) {
                   break;
                  }
                  $2252 = (+__Z5IKsqrd($2245));
                  $2253 = (+__Z5IKsqrd($2249));
                  $2254 = $2252 + $2253;
                  $2255 = $2254 + -1.0;
                  $2256 = (+__Z5IKabsd($2255));
                  $2257 = !($2256 <= 1.9999999999999999E-6);
                  if (!($2257)) {
                   break L7;
                  }
                 }
                } while(0);
                $2258 = +HEAPF64[$21>>3];
                $2259 = -$2258;
                $2260 = +HEAPF64[$22>>3];
                $2261 = -$2260;
                $2262 = (+__Z7IKatan2dd($2259,$2261));
                HEAPF64[$j5array68>>3] = $2262;
                $2263 = (+__Z5IKsind($2262));
                HEAPF64[$sj5array70>>3] = $2263;
                $2264 = (+__Z5IKcosd($2262));
                HEAPF64[$cj5array69>>3] = $2264;
                $2265 = $2262 > 3.14159265358979;
                do {
                 if ($2265) {
                  $2266 = $2262 + -6.2831853071795898;
                  HEAPF64[$j5array68>>3] = $2266;
                 } else {
                  $2267 = $2262 < -3.14159265358979;
                  if (!($2267)) {
                   break;
                  }
                  $2268 = $2262 + 6.2831853071795898;
                  HEAPF64[$j5array68>>3] = $2268;
                 }
                } while(0);
                HEAP8[$146>>0] = 0;
                HEAP8[$147>>0] = -1;
                $2269 = +HEAPF64[$j5array68>>3];
                HEAPF64[$148>>3] = $2269;
                $2270 = +HEAPF64[$cj5array69>>3];
                HEAPF64[$149>>3] = $2270;
                $2271 = +HEAPF64[$sj5array70>>3];
                HEAPF64[$150>>3] = $2271;
                $2272 = +HEAPF64[$148>>3];
                $2273 = (+__Z5IKsind($2272));
                $2274 = (+__Z5IKcosd($2272));
                $2275 = +HEAPF64[$14>>3];
                $2276 = +HEAPF64[$21>>3];
                $2277 = $2273 + $2276;
                $2278 = +HEAPF64[$20>>3];
                $2279 = $2273 * $2278;
                $2280 = +HEAPF64[$13>>3];
                $2281 = $2279 + $2280;
                $2282 = $2274 * $2275;
                $2283 = +HEAPF64[$16>>3];
                $2284 = $2282 + $2283;
                $2285 = $2274 * $2278;
                $2286 = +HEAPF64[$12>>3];
                $2287 = $2286 - $2285;
                $2288 = $2273 * $2275;
                $2289 = +HEAPF64[$18>>3];
                $2290 = $2289 - $2288;
                $2291 = $2278 * $2280;
                $2292 = $2273 + $2291;
                $2293 = $2275 * $2289;
                $2294 = $2292 - $2293;
                $2295 = $2278 * $2286;
                $2296 = $2295 - $2274;
                $2297 = $2275 * $2283;
                $2298 = $2296 - $2297;
                $2299 = (+__Z5IKabsd($2277));
                $2300 = $2299 > 5.0000000000000004E-6;
                if ($2300) {
                 break L7;
                }
                $2301 = +HEAPF64[$22>>3];
                $2302 = $2274 + $2301;
                $2303 = (+__Z5IKabsd($2302));
                $2304 = $2303 > 5.0000000000000004E-6;
                if ($2304) {
                 break L7;
                }
                $2305 = (+__Z5IKabsd($2281));
                $2306 = $2305 > 5.0000000000000004E-6;
                if ($2306) {
                 break L7;
                }
                $2307 = (+__Z5IKabsd($2284));
                $2308 = $2307 > 5.0000000000000004E-6;
                if ($2308) {
                 break L7;
                }
                $2309 = (+__Z5IKabsd($2287));
                $2310 = $2309 > 5.0000000000000004E-6;
                if ($2310) {
                 break L7;
                }
                $2311 = (+__Z5IKabsd($2290));
                $2312 = $2311 > 5.0000000000000004E-6;
                if ($2312) {
                 break L7;
                }
                $2313 = (+__Z5IKabsd($2294));
                $2314 = $2313 > 5.0000000000000004E-6;
                if ($2314) {
                 break L7;
                }
                $2315 = (+__Z5IKabsd($2298));
                $2316 = $2315 > 5.0000000000000004E-6;
                if ($2316) {
                 break L7;
                }
                __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEEC2Ej($vinfos76,6);
                $2317 = HEAP32[$vinfos76>>2]|0;
                $2318 = (($2317) + 17|0);
                HEAP8[$2318>>0] = 1;
                $2319 = +HEAPF64[$this>>3];
                $2320 = HEAP32[$vinfos76>>2]|0;
                $2321 = (($2320) + 8|0);
                HEAPF64[$2321>>3] = $2319;
                $2322 = HEAP8[$151>>0]|0;
                $2323 = HEAP32[$vinfos76>>2]|0;
                $2324 = (($2323) + 19|0);
                HEAP8[$2324>>0] = $2322;
                $2325 = HEAP8[$152>>0]|0;
                $2326 = HEAP32[$vinfos76>>2]|0;
                $2327 = (($2326) + 20|0);
                HEAP8[$2327>>0] = $2325;
                $2328 = HEAP8[$153>>0]|0;
                $2329 = HEAP32[$vinfos76>>2]|0;
                $2330 = (($2329) + 18|0);
                HEAP8[$2330>>0] = $2328;
                $2331 = HEAP32[$vinfos76>>2]|0;
                $2332 = (($2331) + 41|0);
                HEAP8[$2332>>0] = 1;
                $2333 = +HEAPF64[$154>>3];
                $2334 = HEAP32[$vinfos76>>2]|0;
                $2335 = (($2334) + 32|0);
                HEAPF64[$2335>>3] = $2333;
                $2336 = HEAP8[$155>>0]|0;
                $2337 = HEAP32[$vinfos76>>2]|0;
                $2338 = (($2337) + 43|0);
                HEAP8[$2338>>0] = $2336;
                $2339 = HEAP8[$156>>0]|0;
                $2340 = HEAP32[$vinfos76>>2]|0;
                $2341 = (($2340) + 44|0);
                HEAP8[$2341>>0] = $2339;
                $2342 = HEAP8[$157>>0]|0;
                $2343 = HEAP32[$vinfos76>>2]|0;
                $2344 = (($2343) + 42|0);
                HEAP8[$2344>>0] = $2342;
                $2345 = HEAP32[$vinfos76>>2]|0;
                $2346 = (($2345) + 65|0);
                HEAP8[$2346>>0] = 1;
                $2347 = +HEAPF64[$158>>3];
                $2348 = HEAP32[$vinfos76>>2]|0;
                $2349 = (($2348) + 56|0);
                HEAPF64[$2349>>3] = $2347;
                $2350 = HEAP8[$159>>0]|0;
                $2351 = HEAP32[$vinfos76>>2]|0;
                $2352 = (($2351) + 67|0);
                HEAP8[$2352>>0] = $2350;
                $2353 = HEAP8[$160>>0]|0;
                $2354 = HEAP32[$vinfos76>>2]|0;
                $2355 = (($2354) + 68|0);
                HEAP8[$2355>>0] = $2353;
                $2356 = HEAP8[$161>>0]|0;
                $2357 = HEAP32[$vinfos76>>2]|0;
                $2358 = (($2357) + 66|0);
                HEAP8[$2358>>0] = $2356;
                $2359 = HEAP32[$vinfos76>>2]|0;
                $2360 = (($2359) + 89|0);
                HEAP8[$2360>>0] = 1;
                $2361 = +HEAPF64[$91>>3];
                $2362 = HEAP32[$vinfos76>>2]|0;
                $2363 = (($2362) + 80|0);
                HEAPF64[$2363>>3] = $2361;
                $2364 = HEAP8[$89>>0]|0;
                $2365 = HEAP32[$vinfos76>>2]|0;
                $2366 = (($2365) + 91|0);
                HEAP8[$2366>>0] = $2364;
                $2367 = HEAP8[$90>>0]|0;
                $2368 = HEAP32[$vinfos76>>2]|0;
                $2369 = (($2368) + 92|0);
                HEAP8[$2369>>0] = $2367;
                $2370 = HEAP8[$86>>0]|0;
                $2371 = HEAP32[$vinfos76>>2]|0;
                $2372 = (($2371) + 90|0);
                HEAP8[$2372>>0] = $2370;
                $2373 = HEAP32[$vinfos76>>2]|0;
                $2374 = (($2373) + 113|0);
                HEAP8[$2374>>0] = 1;
                $2375 = +HEAPF64[$27>>3];
                $2376 = HEAP32[$vinfos76>>2]|0;
                $2377 = (($2376) + 104|0);
                HEAPF64[$2377>>3] = $2375;
                $2378 = HEAP8[$25>>0]|0;
                $2379 = HEAP32[$vinfos76>>2]|0;
                $2380 = (($2379) + 115|0);
                HEAP8[$2380>>0] = $2378;
                $2381 = HEAP8[$26>>0]|0;
                $2382 = HEAP32[$vinfos76>>2]|0;
                $2383 = (($2382) + 116|0);
                HEAP8[$2383>>0] = $2381;
                $2384 = HEAP8[$24>>0]|0;
                $2385 = HEAP32[$vinfos76>>2]|0;
                $2386 = (($2385) + 114|0);
                HEAP8[$2386>>0] = $2384;
                $2387 = HEAP32[$vinfos76>>2]|0;
                $2388 = (($2387) + 137|0);
                HEAP8[$2388>>0] = 1;
                $2389 = +HEAPF64[$148>>3];
                $2390 = HEAP32[$vinfos76>>2]|0;
                $2391 = (($2390) + 128|0);
                HEAPF64[$2391>>3] = $2389;
                $2392 = HEAP8[$146>>0]|0;
                $2393 = HEAP32[$vinfos76>>2]|0;
                $2394 = (($2393) + 139|0);
                HEAP8[$2394>>0] = $2392;
                $2395 = HEAP8[$147>>0]|0;
                $2396 = HEAP32[$vinfos76>>2]|0;
                $2397 = (($2396) + 140|0);
                HEAP8[$2397>>0] = $2395;
                $2398 = HEAP8[$145>>0]|0;
                $2399 = HEAP32[$vinfos76>>2]|0;
                $2400 = (($2399) + 138|0);
                HEAP8[$2400>>0] = $2398;
                __ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ej($vfree77,0);
                $2401 = HEAP32[$solutions>>2]|0;
                $2402 = (($2401) + 8|0);
                $2403 = HEAP32[$2402>>2]|0;
                (FUNCTION_TABLE_iiii[$2403 & 31]($solutions,$vinfos76,$vfree77)|0);
                __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($vfree77);
                __ZNSt3__113__vector_baseIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEED2Ev($vinfos76);
                break L7;
               }
              } while(0);
              $2404 = +HEAPF64[$23>>3];
              $2405 = +HEAPF64[$28>>3];
              $2406 = +HEAPF64[$29>>3];
              $2407 = +HEAPF64[$20>>3];
              $2408 = $2406 + $2407;
              $2409 = +HEAPF64[$91>>3];
              $2410 = (+__Z5IKabsd($2409));
              $2411 = $2410 + 3.14159265358979;
              $2412 = (+__Z6IKfmoddd($2411,6.2831853071795898));
              $2413 = $2412 + -3.14159265358979;
              $2414 = +HEAPF64[$14>>3];
              $2415 = $2405 * $2407;
              $2416 = -$2404;
              $2417 = $2406 * $2416;
              $2418 = $2417 - $2415;
              $2419 = +HEAPF64[$16>>3];
              $2420 = $2406 * $2419;
              $2421 = +HEAPF64[$21>>3];
              $2422 = $2405 * $2421;
              $2423 = $2420 - $2422;
              $2424 = +HEAPF64[$18>>3];
              $2425 = $2406 * $2424;
              $2426 = +HEAPF64[$22>>3];
              $2427 = $2405 * $2426;
              $2428 = $2425 - $2427;
              $2429 = $2406 * $2407;
              $2430 = $2429 + 1.0;
              $2431 = $2405 * $2416;
              $2432 = $2431 + $2430;
              $2433 = (+__Z5IKabsd($2413));
              $2434 = $2433 < 9.9999999999999995E-7;
              do {
               if ($2434) {
                $2435 = $2404 - $2405;
                $2436 = (+__Z5IKabsd($2435));
                $2437 = $2436 < 9.9999999999999995E-7;
                if (!($2437)) {
                 break;
                }
                $2438 = (+__Z5IKabsd($2408));
                $2439 = $2438 < 9.9999999999999995E-7;
                if (!($2439)) {
                 break;
                }
                $2440 = (+__Z5IKabsd($2414));
                $2441 = $2440 < 9.9999999999999995E-7;
                if (!($2441)) {
                 break;
                }
                $2442 = (+__Z5IKabsd($2418));
                $2443 = $2442 < 9.9999999999999995E-7;
                if (!($2443)) {
                 break;
                }
                $2444 = (+__Z5IKabsd($2423));
                $2445 = $2444 < 9.9999999999999995E-7;
                if (!($2445)) {
                 break;
                }
                $2446 = (+__Z5IKabsd($2428));
                $2447 = $2446 < 9.9999999999999995E-7;
                if (!($2447)) {
                 break;
                }
                $2448 = (+__Z5IKabsd($2432));
                $2449 = $2448 < 9.9999999999999995E-7;
                if (!($2449)) {
                 break;
                }
                HEAP8[$162>>0] = 1;
                $2450 = +HEAPF64[$13>>3];
                $2451 = -$2450;
                $2452 = (+__Z5IKabsd($2451));
                $2453 = $2452 < 1.9999999999999999E-6;
                do {
                 if ($2453) {
                  $2454 = +HEAPF64[$12>>3];
                  $2455 = (+__Z5IKabsd($2454));
                  $2456 = $2455 < 1.9999999999999999E-6;
                  if (!($2456)) {
                   break;
                  }
                  $2457 = (+__Z5IKsqrd($2451));
                  $2458 = (+__Z5IKsqrd($2454));
                  $2459 = $2457 + $2458;
                  $2460 = $2459 + -1.0;
                  $2461 = (+__Z5IKabsd($2460));
                  $2462 = !($2461 <= 1.9999999999999999E-6);
                  if (!($2462)) {
                   break L7;
                  }
                 }
                } while(0);
                $2463 = +HEAPF64[$13>>3];
                $2464 = -$2463;
                $2465 = +HEAPF64[$12>>3];
                $2466 = (+__Z7IKatan2dd($2464,$2465));
                HEAPF64[$j5array79>>3] = $2466;
                $2467 = (+__Z5IKsind($2466));
                HEAPF64[$sj5array81>>3] = $2467;
                $2468 = (+__Z5IKcosd($2466));
                HEAPF64[$cj5array80>>3] = $2468;
                $2469 = $2466 > 3.14159265358979;
                do {
                 if ($2469) {
                  $2470 = $2466 + -6.2831853071795898;
                  HEAPF64[$j5array79>>3] = $2470;
                 } else {
                  $2471 = $2466 < -3.14159265358979;
                  if (!($2471)) {
                   break;
                  }
                  $2472 = $2466 + 6.2831853071795898;
                  HEAPF64[$j5array79>>3] = $2472;
                 }
                } while(0);
                HEAP8[$163>>0] = 0;
                HEAP8[$164>>0] = -1;
                $2473 = +HEAPF64[$j5array79>>3];
                HEAPF64[$165>>3] = $2473;
                $2474 = +HEAPF64[$cj5array80>>3];
                HEAPF64[$166>>3] = $2474;
                $2475 = +HEAPF64[$sj5array81>>3];
                HEAPF64[$167>>3] = $2475;
                $2476 = +HEAPF64[$165>>3];
                $2477 = (+__Z5IKsind($2476));
                $2478 = (+__Z5IKcosd($2476));
                $2479 = +HEAPF64[$23>>3];
                $2480 = +HEAPF64[$13>>3];
                $2481 = $2477 + $2480;
                $2482 = +HEAPF64[$20>>3];
                $2483 = +HEAPF64[$21>>3];
                $2484 = $2478 * $2482;
                $2485 = +HEAPF64[$22>>3];
                $2486 = $2484 + $2485;
                $2487 = +HEAPF64[$12>>3];
                $2488 = $2487 - $2478;
                $2489 = $2478 * $2479;
                $2490 = +HEAPF64[$18>>3];
                $2491 = $2490 - $2489;
                $2492 = $2477 * $2479;
                $2493 = +HEAPF64[$16>>3];
                $2494 = $2493 - $2492;
                $2495 = $2482 * $2483;
                $2496 = $2477 + $2495;
                $2497 = $2479 * $2493;
                $2498 = $2496 - $2497;
                $2499 = $2482 * $2485;
                $2500 = $2478 + $2499;
                $2501 = $2479 * $2490;
                $2502 = $2500 - $2501;
                $2503 = (+__Z5IKabsd($2481));
                $2504 = $2503 > 5.0000000000000004E-6;
                if ($2504) {
                 break L7;
                }
                $2505 = $2477 * $2482;
                $2506 = $2505 + $2483;
                $2507 = (+__Z5IKabsd($2506));
                $2508 = $2507 > 5.0000000000000004E-6;
                if ($2508) {
                 break L7;
                }
                $2509 = (+__Z5IKabsd($2486));
                $2510 = $2509 > 5.0000000000000004E-6;
                if ($2510) {
                 break L7;
                }
                $2511 = (+__Z5IKabsd($2488));
                $2512 = $2511 > 5.0000000000000004E-6;
                if ($2512) {
                 break L7;
                }
                $2513 = (+__Z5IKabsd($2491));
                $2514 = $2513 > 5.0000000000000004E-6;
                if ($2514) {
                 break L7;
                }
                $2515 = (+__Z5IKabsd($2494));
                $2516 = $2515 > 5.0000000000000004E-6;
                if ($2516) {
                 break L7;
                }
                $2517 = (+__Z5IKabsd($2498));
                $2518 = $2517 > 5.0000000000000004E-6;
                if ($2518) {
                 break L7;
                }
                $2519 = (+__Z5IKabsd($2502));
                $2520 = $2519 > 5.0000000000000004E-6;
                if ($2520) {
                 break L7;
                }
                __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEEC2Ej($vinfos87,6);
                $2521 = HEAP32[$vinfos87>>2]|0;
                $2522 = (($2521) + 17|0);
                HEAP8[$2522>>0] = 1;
                $2523 = +HEAPF64[$this>>3];
                $2524 = HEAP32[$vinfos87>>2]|0;
                $2525 = (($2524) + 8|0);
                HEAPF64[$2525>>3] = $2523;
                $2526 = HEAP8[$168>>0]|0;
                $2527 = HEAP32[$vinfos87>>2]|0;
                $2528 = (($2527) + 19|0);
                HEAP8[$2528>>0] = $2526;
                $2529 = HEAP8[$169>>0]|0;
                $2530 = HEAP32[$vinfos87>>2]|0;
                $2531 = (($2530) + 20|0);
                HEAP8[$2531>>0] = $2529;
                $2532 = HEAP8[$170>>0]|0;
                $2533 = HEAP32[$vinfos87>>2]|0;
                $2534 = (($2533) + 18|0);
                HEAP8[$2534>>0] = $2532;
                $2535 = HEAP32[$vinfos87>>2]|0;
                $2536 = (($2535) + 41|0);
                HEAP8[$2536>>0] = 1;
                $2537 = +HEAPF64[$171>>3];
                $2538 = HEAP32[$vinfos87>>2]|0;
                $2539 = (($2538) + 32|0);
                HEAPF64[$2539>>3] = $2537;
                $2540 = HEAP8[$172>>0]|0;
                $2541 = HEAP32[$vinfos87>>2]|0;
                $2542 = (($2541) + 43|0);
                HEAP8[$2542>>0] = $2540;
                $2543 = HEAP8[$173>>0]|0;
                $2544 = HEAP32[$vinfos87>>2]|0;
                $2545 = (($2544) + 44|0);
                HEAP8[$2545>>0] = $2543;
                $2546 = HEAP8[$174>>0]|0;
                $2547 = HEAP32[$vinfos87>>2]|0;
                $2548 = (($2547) + 42|0);
                HEAP8[$2548>>0] = $2546;
                $2549 = HEAP32[$vinfos87>>2]|0;
                $2550 = (($2549) + 65|0);
                HEAP8[$2550>>0] = 1;
                $2551 = +HEAPF64[$175>>3];
                $2552 = HEAP32[$vinfos87>>2]|0;
                $2553 = (($2552) + 56|0);
                HEAPF64[$2553>>3] = $2551;
                $2554 = HEAP8[$176>>0]|0;
                $2555 = HEAP32[$vinfos87>>2]|0;
                $2556 = (($2555) + 67|0);
                HEAP8[$2556>>0] = $2554;
                $2557 = HEAP8[$177>>0]|0;
                $2558 = HEAP32[$vinfos87>>2]|0;
                $2559 = (($2558) + 68|0);
                HEAP8[$2559>>0] = $2557;
                $2560 = HEAP8[$178>>0]|0;
                $2561 = HEAP32[$vinfos87>>2]|0;
                $2562 = (($2561) + 66|0);
                HEAP8[$2562>>0] = $2560;
                $2563 = HEAP32[$vinfos87>>2]|0;
                $2564 = (($2563) + 89|0);
                HEAP8[$2564>>0] = 1;
                $2565 = +HEAPF64[$91>>3];
                $2566 = HEAP32[$vinfos87>>2]|0;
                $2567 = (($2566) + 80|0);
                HEAPF64[$2567>>3] = $2565;
                $2568 = HEAP8[$89>>0]|0;
                $2569 = HEAP32[$vinfos87>>2]|0;
                $2570 = (($2569) + 91|0);
                HEAP8[$2570>>0] = $2568;
                $2571 = HEAP8[$90>>0]|0;
                $2572 = HEAP32[$vinfos87>>2]|0;
                $2573 = (($2572) + 92|0);
                HEAP8[$2573>>0] = $2571;
                $2574 = HEAP8[$86>>0]|0;
                $2575 = HEAP32[$vinfos87>>2]|0;
                $2576 = (($2575) + 90|0);
                HEAP8[$2576>>0] = $2574;
                $2577 = HEAP32[$vinfos87>>2]|0;
                $2578 = (($2577) + 113|0);
                HEAP8[$2578>>0] = 1;
                $2579 = +HEAPF64[$27>>3];
                $2580 = HEAP32[$vinfos87>>2]|0;
                $2581 = (($2580) + 104|0);
                HEAPF64[$2581>>3] = $2579;
                $2582 = HEAP8[$25>>0]|0;
                $2583 = HEAP32[$vinfos87>>2]|0;
                $2584 = (($2583) + 115|0);
                HEAP8[$2584>>0] = $2582;
                $2585 = HEAP8[$26>>0]|0;
                $2586 = HEAP32[$vinfos87>>2]|0;
                $2587 = (($2586) + 116|0);
                HEAP8[$2587>>0] = $2585;
                $2588 = HEAP8[$24>>0]|0;
                $2589 = HEAP32[$vinfos87>>2]|0;
                $2590 = (($2589) + 114|0);
                HEAP8[$2590>>0] = $2588;
                $2591 = HEAP32[$vinfos87>>2]|0;
                $2592 = (($2591) + 137|0);
                HEAP8[$2592>>0] = 1;
                $2593 = +HEAPF64[$165>>3];
                $2594 = HEAP32[$vinfos87>>2]|0;
                $2595 = (($2594) + 128|0);
                HEAPF64[$2595>>3] = $2593;
                $2596 = HEAP8[$163>>0]|0;
                $2597 = HEAP32[$vinfos87>>2]|0;
                $2598 = (($2597) + 139|0);
                HEAP8[$2598>>0] = $2596;
                $2599 = HEAP8[$164>>0]|0;
                $2600 = HEAP32[$vinfos87>>2]|0;
                $2601 = (($2600) + 140|0);
                HEAP8[$2601>>0] = $2599;
                $2602 = HEAP8[$162>>0]|0;
                $2603 = HEAP32[$vinfos87>>2]|0;
                $2604 = (($2603) + 138|0);
                HEAP8[$2604>>0] = $2602;
                __ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ej($vfree88,0);
                $2605 = HEAP32[$solutions>>2]|0;
                $2606 = (($2605) + 8|0);
                $2607 = HEAP32[$2606>>2]|0;
                (FUNCTION_TABLE_iiii[$2607 & 31]($solutions,$vinfos87,$vfree88)|0);
                __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($vfree88);
                __ZNSt3__113__vector_baseIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEED2Ev($vinfos87);
                break L7;
               }
              } while(0);
              $2608 = +HEAPF64[$23>>3];
              $2609 = +HEAPF64[$28>>3];
              $2610 = +HEAPF64[$20>>3];
              $2611 = +HEAPF64[$29>>3];
              $2612 = +HEAPF64[$91>>3];
              $2613 = $2612 + -3.14159265358979;
              $2614 = (+__Z5IKabsd($2613));
              $2615 = $2614 + 3.14159265358979;
              $2616 = (+__Z6IKfmoddd($2615,6.2831853071795898));
              $2617 = $2616 + -3.14159265358979;
              $2618 = $2610 - $2611;
              $2619 = +HEAPF64[$14>>3];
              $2620 = $2611 - $2610;
              $2621 = $2609 * $2610;
              $2622 = -$2608;
              $2623 = $2611 * $2622;
              $2624 = $2621 + $2623;
              $2625 = +HEAPF64[$21>>3];
              $2626 = $2609 * $2625;
              $2627 = +HEAPF64[$16>>3];
              $2628 = $2611 * $2627;
              $2629 = -$2628;
              $2630 = $2629 - $2626;
              $2631 = +HEAPF64[$22>>3];
              $2632 = $2609 * $2631;
              $2633 = +HEAPF64[$18>>3];
              $2634 = $2611 * $2633;
              $2635 = -$2634;
              $2636 = $2635 - $2632;
              $2637 = $2610 * $2611;
              $2638 = 1.0 - $2637;
              $2639 = $2609 * $2622;
              $2640 = $2639 + $2638;
              $2641 = (+__Z5IKabsd($2617));
              $2642 = $2641 < 9.9999999999999995E-7;
              do {
               if ($2642) {
                $2643 = $2608 - $2609;
                $2644 = (+__Z5IKabsd($2643));
                $2645 = $2644 < 9.9999999999999995E-7;
                if (!($2645)) {
                 break;
                }
                $2646 = (+__Z5IKabsd($2618));
                $2647 = $2646 < 9.9999999999999995E-7;
                if (!($2647)) {
                 break;
                }
                $2648 = (+__Z5IKabsd($2619));
                $2649 = $2648 < 9.9999999999999995E-7;
                if (!($2649)) {
                 break;
                }
                $2650 = (+__Z5IKabsd($2620));
                $2651 = $2650 < 9.9999999999999995E-7;
                if (!($2651)) {
                 break;
                }
                $2652 = (+__Z5IKabsd($2624));
                $2653 = $2652 < 9.9999999999999995E-7;
                if (!($2653)) {
                 break;
                }
                $2654 = (+__Z5IKabsd($2630));
                $2655 = $2654 < 9.9999999999999995E-7;
                if (!($2655)) {
                 break;
                }
                $2656 = (+__Z5IKabsd($2636));
                $2657 = $2656 < 9.9999999999999995E-7;
                if (!($2657)) {
                 break;
                }
                $2658 = (+__Z5IKabsd($2640));
                $2659 = $2658 < 9.9999999999999995E-7;
                if (!($2659)) {
                 break;
                }
                HEAP8[$179>>0] = 1;
                $2660 = +HEAPF64[$13>>3];
                $2661 = (+__Z5IKabsd($2660));
                $2662 = $2661 < 1.9999999999999999E-6;
                do {
                 if ($2662) {
                  $2663 = +HEAPF64[$12>>3];
                  $2664 = -$2663;
                  $2665 = (+__Z5IKabsd($2664));
                  $2666 = $2665 < 1.9999999999999999E-6;
                  if (!($2666)) {
                   break;
                  }
                  $2667 = (+__Z5IKsqrd($2660));
                  $2668 = (+__Z5IKsqrd($2664));
                  $2669 = $2667 + $2668;
                  $2670 = $2669 + -1.0;
                  $2671 = (+__Z5IKabsd($2670));
                  $2672 = !($2671 <= 1.9999999999999999E-6);
                  if (!($2672)) {
                   break L7;
                  }
                 }
                } while(0);
                $2673 = +HEAPF64[$13>>3];
                $2674 = +HEAPF64[$12>>3];
                $2675 = -$2674;
                $2676 = (+__Z7IKatan2dd($2673,$2675));
                HEAPF64[$j5array90>>3] = $2676;
                $2677 = (+__Z5IKsind($2676));
                HEAPF64[$sj5array92>>3] = $2677;
                $2678 = (+__Z5IKcosd($2676));
                HEAPF64[$cj5array91>>3] = $2678;
                $2679 = $2676 > 3.14159265358979;
                do {
                 if ($2679) {
                  $2680 = $2676 + -6.2831853071795898;
                  HEAPF64[$j5array90>>3] = $2680;
                 } else {
                  $2681 = $2676 < -3.14159265358979;
                  if (!($2681)) {
                   break;
                  }
                  $2682 = $2676 + 6.2831853071795898;
                  HEAPF64[$j5array90>>3] = $2682;
                 }
                } while(0);
                HEAP8[$180>>0] = 0;
                HEAP8[$181>>0] = -1;
                $2683 = +HEAPF64[$j5array90>>3];
                HEAPF64[$182>>3] = $2683;
                $2684 = +HEAPF64[$cj5array91>>3];
                HEAPF64[$183>>3] = $2684;
                $2685 = +HEAPF64[$sj5array92>>3];
                HEAPF64[$184>>3] = $2685;
                $2686 = +HEAPF64[$182>>3];
                $2687 = (+__Z5IKsind($2686));
                $2688 = (+__Z5IKcosd($2686));
                $2689 = +HEAPF64[$20>>3];
                $2690 = +HEAPF64[$13>>3];
                $2691 = $2687 - $2690;
                $2692 = +HEAPF64[$23>>3];
                $2693 = +HEAPF64[$18>>3];
                $2694 = $2687 * $2689;
                $2695 = +HEAPF64[$21>>3];
                $2696 = $2695 - $2694;
                $2697 = -$2688;
                $2698 = $2689 * $2697;
                $2699 = +HEAPF64[$22>>3];
                $2700 = $2698 + $2699;
                $2701 = +HEAPF64[$12>>3];
                $2702 = $2697 - $2701;
                $2703 = +HEAPF64[$16>>3];
                $2704 = $2687 * $2692;
                $2705 = -$2704;
                $2706 = $2705 - $2703;
                $2707 = $2692 * $2703;
                $2708 = $2687 + $2707;
                $2709 = $2689 * $2695;
                $2710 = $2708 - $2709;
                $2711 = $2689 * $2699;
                $2712 = $2688 - $2711;
                $2713 = $2692 * $2693;
                $2714 = $2713 + $2712;
                $2715 = (+__Z5IKabsd($2691));
                $2716 = $2715 > 5.0000000000000004E-6;
                if ($2716) {
                 break L7;
                }
                $2717 = $2688 * $2692;
                $2718 = $2717 + $2693;
                $2719 = (+__Z5IKabsd($2718));
                $2720 = $2719 > 5.0000000000000004E-6;
                if ($2720) {
                 break L7;
                }
                $2721 = (+__Z5IKabsd($2696));
                $2722 = $2721 > 5.0000000000000004E-6;
                if ($2722) {
                 break L7;
                }
                $2723 = (+__Z5IKabsd($2700));
                $2724 = $2723 > 5.0000000000000004E-6;
                if ($2724) {
                 break L7;
                }
                $2725 = (+__Z5IKabsd($2702));
                $2726 = $2725 > 5.0000000000000004E-6;
                if ($2726) {
                 break L7;
                }
                $2727 = (+__Z5IKabsd($2706));
                $2728 = $2727 > 5.0000000000000004E-6;
                if ($2728) {
                 break L7;
                }
                $2729 = (+__Z5IKabsd($2710));
                $2730 = $2729 > 5.0000000000000004E-6;
                if ($2730) {
                 break L7;
                }
                $2731 = (+__Z5IKabsd($2714));
                $2732 = $2731 > 5.0000000000000004E-6;
                if ($2732) {
                 break L7;
                }
                __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEEC2Ej($vinfos98,6);
                $2733 = HEAP32[$vinfos98>>2]|0;
                $2734 = (($2733) + 17|0);
                HEAP8[$2734>>0] = 1;
                $2735 = +HEAPF64[$this>>3];
                $2736 = HEAP32[$vinfos98>>2]|0;
                $2737 = (($2736) + 8|0);
                HEAPF64[$2737>>3] = $2735;
                $2738 = HEAP8[$185>>0]|0;
                $2739 = HEAP32[$vinfos98>>2]|0;
                $2740 = (($2739) + 19|0);
                HEAP8[$2740>>0] = $2738;
                $2741 = HEAP8[$186>>0]|0;
                $2742 = HEAP32[$vinfos98>>2]|0;
                $2743 = (($2742) + 20|0);
                HEAP8[$2743>>0] = $2741;
                $2744 = HEAP8[$187>>0]|0;
                $2745 = HEAP32[$vinfos98>>2]|0;
                $2746 = (($2745) + 18|0);
                HEAP8[$2746>>0] = $2744;
                $2747 = HEAP32[$vinfos98>>2]|0;
                $2748 = (($2747) + 41|0);
                HEAP8[$2748>>0] = 1;
                $2749 = +HEAPF64[$188>>3];
                $2750 = HEAP32[$vinfos98>>2]|0;
                $2751 = (($2750) + 32|0);
                HEAPF64[$2751>>3] = $2749;
                $2752 = HEAP8[$189>>0]|0;
                $2753 = HEAP32[$vinfos98>>2]|0;
                $2754 = (($2753) + 43|0);
                HEAP8[$2754>>0] = $2752;
                $2755 = HEAP8[$190>>0]|0;
                $2756 = HEAP32[$vinfos98>>2]|0;
                $2757 = (($2756) + 44|0);
                HEAP8[$2757>>0] = $2755;
                $2758 = HEAP8[$191>>0]|0;
                $2759 = HEAP32[$vinfos98>>2]|0;
                $2760 = (($2759) + 42|0);
                HEAP8[$2760>>0] = $2758;
                $2761 = HEAP32[$vinfos98>>2]|0;
                $2762 = (($2761) + 65|0);
                HEAP8[$2762>>0] = 1;
                $2763 = +HEAPF64[$192>>3];
                $2764 = HEAP32[$vinfos98>>2]|0;
                $2765 = (($2764) + 56|0);
                HEAPF64[$2765>>3] = $2763;
                $2766 = HEAP8[$193>>0]|0;
                $2767 = HEAP32[$vinfos98>>2]|0;
                $2768 = (($2767) + 67|0);
                HEAP8[$2768>>0] = $2766;
                $2769 = HEAP8[$194>>0]|0;
                $2770 = HEAP32[$vinfos98>>2]|0;
                $2771 = (($2770) + 68|0);
                HEAP8[$2771>>0] = $2769;
                $2772 = HEAP8[$195>>0]|0;
                $2773 = HEAP32[$vinfos98>>2]|0;
                $2774 = (($2773) + 66|0);
                HEAP8[$2774>>0] = $2772;
                $2775 = HEAP32[$vinfos98>>2]|0;
                $2776 = (($2775) + 89|0);
                HEAP8[$2776>>0] = 1;
                $2777 = +HEAPF64[$91>>3];
                $2778 = HEAP32[$vinfos98>>2]|0;
                $2779 = (($2778) + 80|0);
                HEAPF64[$2779>>3] = $2777;
                $2780 = HEAP8[$89>>0]|0;
                $2781 = HEAP32[$vinfos98>>2]|0;
                $2782 = (($2781) + 91|0);
                HEAP8[$2782>>0] = $2780;
                $2783 = HEAP8[$90>>0]|0;
                $2784 = HEAP32[$vinfos98>>2]|0;
                $2785 = (($2784) + 92|0);
                HEAP8[$2785>>0] = $2783;
                $2786 = HEAP8[$86>>0]|0;
                $2787 = HEAP32[$vinfos98>>2]|0;
                $2788 = (($2787) + 90|0);
                HEAP8[$2788>>0] = $2786;
                $2789 = HEAP32[$vinfos98>>2]|0;
                $2790 = (($2789) + 113|0);
                HEAP8[$2790>>0] = 1;
                $2791 = +HEAPF64[$27>>3];
                $2792 = HEAP32[$vinfos98>>2]|0;
                $2793 = (($2792) + 104|0);
                HEAPF64[$2793>>3] = $2791;
                $2794 = HEAP8[$25>>0]|0;
                $2795 = HEAP32[$vinfos98>>2]|0;
                $2796 = (($2795) + 115|0);
                HEAP8[$2796>>0] = $2794;
                $2797 = HEAP8[$26>>0]|0;
                $2798 = HEAP32[$vinfos98>>2]|0;
                $2799 = (($2798) + 116|0);
                HEAP8[$2799>>0] = $2797;
                $2800 = HEAP8[$24>>0]|0;
                $2801 = HEAP32[$vinfos98>>2]|0;
                $2802 = (($2801) + 114|0);
                HEAP8[$2802>>0] = $2800;
                $2803 = HEAP32[$vinfos98>>2]|0;
                $2804 = (($2803) + 137|0);
                HEAP8[$2804>>0] = 1;
                $2805 = +HEAPF64[$182>>3];
                $2806 = HEAP32[$vinfos98>>2]|0;
                $2807 = (($2806) + 128|0);
                HEAPF64[$2807>>3] = $2805;
                $2808 = HEAP8[$180>>0]|0;
                $2809 = HEAP32[$vinfos98>>2]|0;
                $2810 = (($2809) + 139|0);
                HEAP8[$2810>>0] = $2808;
                $2811 = HEAP8[$181>>0]|0;
                $2812 = HEAP32[$vinfos98>>2]|0;
                $2813 = (($2812) + 140|0);
                HEAP8[$2813>>0] = $2811;
                $2814 = HEAP8[$179>>0]|0;
                $2815 = HEAP32[$vinfos98>>2]|0;
                $2816 = (($2815) + 138|0);
                HEAP8[$2816>>0] = $2814;
                __ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ej($vfree99,0);
                $2817 = HEAP32[$solutions>>2]|0;
                $2818 = (($2817) + 8|0);
                $2819 = HEAP32[$2818>>2]|0;
                (FUNCTION_TABLE_iiii[$2819 & 31]($solutions,$vinfos98,$vfree99)|0);
                __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($vfree99);
                __ZNSt3__113__vector_baseIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEED2Ev($vinfos98);
                break L7;
               }
              } while(0);
              $2820 = +HEAPF64[$23>>3];
              $2821 = +HEAPF64[$28>>3];
              $2822 = +HEAPF64[$29>>3];
              $2823 = +HEAPF64[$91>>3];
              $2824 = $2823 + -1.5707963267949001;
              $2825 = (+__Z5IKabsd($2824));
              $2826 = $2825 + 3.14159265358979;
              $2827 = (+__Z6IKfmoddd($2826,6.2831853071795898));
              $2828 = $2827 + -3.14159265358979;
              $2829 = +HEAPF64[$20>>3];
              $2830 = +HEAPF64[$14>>3];
              $2831 = $2830 - $2822;
              $2832 = $2822 - $2830;
              $2833 = $2821 * $2830;
              $2834 = -$2820;
              $2835 = $2822 * $2834;
              $2836 = $2835 + $2833;
              $2837 = +HEAPF64[$21>>3];
              $2838 = $2821 * $2837;
              $2839 = +HEAPF64[$12>>3];
              $2840 = $2822 * $2839;
              $2841 = -$2840;
              $2842 = $2841 - $2838;
              $2843 = +HEAPF64[$22>>3];
              $2844 = $2821 * $2843;
              $2845 = +HEAPF64[$13>>3];
              $2846 = $2822 * $2845;
              $2847 = -$2846;
              $2848 = $2847 - $2844;
              $2849 = $2821 * $2834;
              $2850 = $2849 + 1.0;
              $2851 = $2822 * $2830;
              $2852 = $2850 - $2851;
              $2853 = (+__Z5IKabsd($2828));
              $2854 = $2853 < 9.9999999999999995E-7;
              do {
               if ($2854) {
                $2855 = $2820 - $2821;
                $2856 = (+__Z5IKabsd($2855));
                $2857 = $2856 < 9.9999999999999995E-7;
                if (!($2857)) {
                 break;
                }
                $2858 = (+__Z5IKabsd($2829));
                $2859 = $2858 < 9.9999999999999995E-7;
                if (!($2859)) {
                 break;
                }
                $2860 = (+__Z5IKabsd($2831));
                $2861 = $2860 < 9.9999999999999995E-7;
                if (!($2861)) {
                 break;
                }
                $2862 = (+__Z5IKabsd($2832));
                $2863 = $2862 < 9.9999999999999995E-7;
                if (!($2863)) {
                 break;
                }
                $2864 = (+__Z5IKabsd($2836));
                $2865 = $2864 < 9.9999999999999995E-7;
                if (!($2865)) {
                 break;
                }
                $2866 = (+__Z5IKabsd($2842));
                $2867 = $2866 < 9.9999999999999995E-7;
                if (!($2867)) {
                 break;
                }
                $2868 = (+__Z5IKabsd($2848));
                $2869 = $2868 < 9.9999999999999995E-7;
                if (!($2869)) {
                 break;
                }
                $2870 = (+__Z5IKabsd($2852));
                $2871 = $2870 < 9.9999999999999995E-7;
                if (!($2871)) {
                 break;
                }
                HEAP8[$196>>0] = 1;
                $2872 = +HEAPF64[$18>>3];
                $2873 = -$2872;
                $2874 = (+__Z5IKabsd($2873));
                $2875 = $2874 < 1.9999999999999999E-6;
                do {
                 if ($2875) {
                  $2876 = +HEAPF64[$16>>3];
                  $2877 = (+__Z5IKabsd($2876));
                  $2878 = $2877 < 1.9999999999999999E-6;
                  if (!($2878)) {
                   break;
                  }
                  $2879 = (+__Z5IKsqrd($2873));
                  $2880 = (+__Z5IKsqrd($2876));
                  $2881 = $2879 + $2880;
                  $2882 = $2881 + -1.0;
                  $2883 = (+__Z5IKabsd($2882));
                  $2884 = !($2883 <= 1.9999999999999999E-6);
                  if (!($2884)) {
                   break L7;
                  }
                 }
                } while(0);
                $2885 = +HEAPF64[$18>>3];
                $2886 = -$2885;
                $2887 = +HEAPF64[$16>>3];
                $2888 = (+__Z7IKatan2dd($2886,$2887));
                HEAPF64[$j5array101>>3] = $2888;
                $2889 = (+__Z5IKsind($2888));
                HEAPF64[$sj5array103>>3] = $2889;
                $2890 = (+__Z5IKcosd($2888));
                HEAPF64[$cj5array102>>3] = $2890;
                $2891 = $2888 > 3.14159265358979;
                do {
                 if ($2891) {
                  $2892 = $2888 + -6.2831853071795898;
                  HEAPF64[$j5array101>>3] = $2892;
                 } else {
                  $2893 = $2888 < -3.14159265358979;
                  if (!($2893)) {
                   break;
                  }
                  $2894 = $2888 + 6.2831853071795898;
                  HEAPF64[$j5array101>>3] = $2894;
                 }
                } while(0);
                HEAP8[$197>>0] = 0;
                HEAP8[$198>>0] = -1;
                $2895 = +HEAPF64[$j5array101>>3];
                HEAPF64[$199>>3] = $2895;
                $2896 = +HEAPF64[$cj5array102>>3];
                HEAPF64[$200>>3] = $2896;
                $2897 = +HEAPF64[$sj5array103>>3];
                HEAPF64[$201>>3] = $2897;
                $2898 = +HEAPF64[$199>>3];
                $2899 = (+__Z5IKcosd($2898));
                $2900 = (+__Z5IKsind($2898));
                $2901 = +HEAPF64[$14>>3];
                $2902 = +HEAPF64[$18>>3];
                $2903 = $2900 + $2902;
                $2904 = +HEAPF64[$23>>3];
                $2905 = $2899 * $2904;
                $2906 = +HEAPF64[$13>>3];
                $2907 = $2905 + $2906;
                $2908 = $2900 * $2904;
                $2909 = +HEAPF64[$12>>3];
                $2910 = $2908 + $2909;
                $2911 = +HEAPF64[$21>>3];
                $2912 = $2900 * $2901;
                $2913 = $2911 - $2912;
                $2914 = $2899 * $2901;
                $2915 = +HEAPF64[$22>>3];
                $2916 = $2915 - $2914;
                $2917 = $2904 * $2909;
                $2918 = $2900 + $2917;
                $2919 = $2901 * $2911;
                $2920 = $2918 - $2919;
                $2921 = $2901 * $2915;
                $2922 = $2904 * $2906;
                $2923 = $2922 - $2921;
                $2924 = $2899 + $2923;
                $2925 = (+__Z5IKabsd($2903));
                $2926 = $2925 > 5.0000000000000004E-6;
                if ($2926) {
                 break L7;
                }
                $2927 = +HEAPF64[$16>>3];
                $2928 = $2927 - $2899;
                $2929 = (+__Z5IKabsd($2928));
                $2930 = $2929 > 5.0000000000000004E-6;
                if ($2930) {
                 break L7;
                }
                $2931 = (+__Z5IKabsd($2907));
                $2932 = $2931 > 5.0000000000000004E-6;
                if ($2932) {
                 break L7;
                }
                $2933 = (+__Z5IKabsd($2910));
                $2934 = $2933 > 5.0000000000000004E-6;
                if ($2934) {
                 break L7;
                }
                $2935 = (+__Z5IKabsd($2913));
                $2936 = $2935 > 5.0000000000000004E-6;
                if ($2936) {
                 break L7;
                }
                $2937 = (+__Z5IKabsd($2916));
                $2938 = $2937 > 5.0000000000000004E-6;
                if ($2938) {
                 break L7;
                }
                $2939 = (+__Z5IKabsd($2920));
                $2940 = $2939 > 5.0000000000000004E-6;
                if ($2940) {
                 break L7;
                }
                $2941 = (+__Z5IKabsd($2924));
                $2942 = $2941 > 5.0000000000000004E-6;
                if ($2942) {
                 break L7;
                }
                __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEEC2Ej($vinfos109,6);
                $2943 = HEAP32[$vinfos109>>2]|0;
                $2944 = (($2943) + 17|0);
                HEAP8[$2944>>0] = 1;
                $2945 = +HEAPF64[$this>>3];
                $2946 = HEAP32[$vinfos109>>2]|0;
                $2947 = (($2946) + 8|0);
                HEAPF64[$2947>>3] = $2945;
                $2948 = HEAP8[$202>>0]|0;
                $2949 = HEAP32[$vinfos109>>2]|0;
                $2950 = (($2949) + 19|0);
                HEAP8[$2950>>0] = $2948;
                $2951 = HEAP8[$203>>0]|0;
                $2952 = HEAP32[$vinfos109>>2]|0;
                $2953 = (($2952) + 20|0);
                HEAP8[$2953>>0] = $2951;
                $2954 = HEAP8[$204>>0]|0;
                $2955 = HEAP32[$vinfos109>>2]|0;
                $2956 = (($2955) + 18|0);
                HEAP8[$2956>>0] = $2954;
                $2957 = HEAP32[$vinfos109>>2]|0;
                $2958 = (($2957) + 41|0);
                HEAP8[$2958>>0] = 1;
                $2959 = +HEAPF64[$205>>3];
                $2960 = HEAP32[$vinfos109>>2]|0;
                $2961 = (($2960) + 32|0);
                HEAPF64[$2961>>3] = $2959;
                $2962 = HEAP8[$206>>0]|0;
                $2963 = HEAP32[$vinfos109>>2]|0;
                $2964 = (($2963) + 43|0);
                HEAP8[$2964>>0] = $2962;
                $2965 = HEAP8[$207>>0]|0;
                $2966 = HEAP32[$vinfos109>>2]|0;
                $2967 = (($2966) + 44|0);
                HEAP8[$2967>>0] = $2965;
                $2968 = HEAP8[$208>>0]|0;
                $2969 = HEAP32[$vinfos109>>2]|0;
                $2970 = (($2969) + 42|0);
                HEAP8[$2970>>0] = $2968;
                $2971 = HEAP32[$vinfos109>>2]|0;
                $2972 = (($2971) + 65|0);
                HEAP8[$2972>>0] = 1;
                $2973 = +HEAPF64[$209>>3];
                $2974 = HEAP32[$vinfos109>>2]|0;
                $2975 = (($2974) + 56|0);
                HEAPF64[$2975>>3] = $2973;
                $2976 = HEAP8[$210>>0]|0;
                $2977 = HEAP32[$vinfos109>>2]|0;
                $2978 = (($2977) + 67|0);
                HEAP8[$2978>>0] = $2976;
                $2979 = HEAP8[$211>>0]|0;
                $2980 = HEAP32[$vinfos109>>2]|0;
                $2981 = (($2980) + 68|0);
                HEAP8[$2981>>0] = $2979;
                $2982 = HEAP8[$212>>0]|0;
                $2983 = HEAP32[$vinfos109>>2]|0;
                $2984 = (($2983) + 66|0);
                HEAP8[$2984>>0] = $2982;
                $2985 = HEAP32[$vinfos109>>2]|0;
                $2986 = (($2985) + 89|0);
                HEAP8[$2986>>0] = 1;
                $2987 = +HEAPF64[$91>>3];
                $2988 = HEAP32[$vinfos109>>2]|0;
                $2989 = (($2988) + 80|0);
                HEAPF64[$2989>>3] = $2987;
                $2990 = HEAP8[$89>>0]|0;
                $2991 = HEAP32[$vinfos109>>2]|0;
                $2992 = (($2991) + 91|0);
                HEAP8[$2992>>0] = $2990;
                $2993 = HEAP8[$90>>0]|0;
                $2994 = HEAP32[$vinfos109>>2]|0;
                $2995 = (($2994) + 92|0);
                HEAP8[$2995>>0] = $2993;
                $2996 = HEAP8[$86>>0]|0;
                $2997 = HEAP32[$vinfos109>>2]|0;
                $2998 = (($2997) + 90|0);
                HEAP8[$2998>>0] = $2996;
                $2999 = HEAP32[$vinfos109>>2]|0;
                $3000 = (($2999) + 113|0);
                HEAP8[$3000>>0] = 1;
                $3001 = +HEAPF64[$27>>3];
                $3002 = HEAP32[$vinfos109>>2]|0;
                $3003 = (($3002) + 104|0);
                HEAPF64[$3003>>3] = $3001;
                $3004 = HEAP8[$25>>0]|0;
                $3005 = HEAP32[$vinfos109>>2]|0;
                $3006 = (($3005) + 115|0);
                HEAP8[$3006>>0] = $3004;
                $3007 = HEAP8[$26>>0]|0;
                $3008 = HEAP32[$vinfos109>>2]|0;
                $3009 = (($3008) + 116|0);
                HEAP8[$3009>>0] = $3007;
                $3010 = HEAP8[$24>>0]|0;
                $3011 = HEAP32[$vinfos109>>2]|0;
                $3012 = (($3011) + 114|0);
                HEAP8[$3012>>0] = $3010;
                $3013 = HEAP32[$vinfos109>>2]|0;
                $3014 = (($3013) + 137|0);
                HEAP8[$3014>>0] = 1;
                $3015 = +HEAPF64[$199>>3];
                $3016 = HEAP32[$vinfos109>>2]|0;
                $3017 = (($3016) + 128|0);
                HEAPF64[$3017>>3] = $3015;
                $3018 = HEAP8[$197>>0]|0;
                $3019 = HEAP32[$vinfos109>>2]|0;
                $3020 = (($3019) + 139|0);
                HEAP8[$3020>>0] = $3018;
                $3021 = HEAP8[$198>>0]|0;
                $3022 = HEAP32[$vinfos109>>2]|0;
                $3023 = (($3022) + 140|0);
                HEAP8[$3023>>0] = $3021;
                $3024 = HEAP8[$196>>0]|0;
                $3025 = HEAP32[$vinfos109>>2]|0;
                $3026 = (($3025) + 138|0);
                HEAP8[$3026>>0] = $3024;
                __ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ej($vfree110,0);
                $3027 = HEAP32[$solutions>>2]|0;
                $3028 = (($3027) + 8|0);
                $3029 = HEAP32[$3028>>2]|0;
                (FUNCTION_TABLE_iiii[$3029 & 31]($solutions,$vinfos109,$vfree110)|0);
                __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($vfree110);
                __ZNSt3__113__vector_baseIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEED2Ev($vinfos109);
                break L7;
               }
              } while(0);
              $3030 = +HEAPF64[$23>>3];
              $3031 = +HEAPF64[$28>>3];
              $3032 = +HEAPF64[$29>>3];
              $3033 = +HEAPF64[$14>>3];
              $3034 = $3032 + $3033;
              $3035 = +HEAPF64[$91>>3];
              $3036 = $3035 + 1.5707963267949001;
              $3037 = (+__Z5IKabsd($3036));
              $3038 = $3037 + 3.14159265358979;
              $3039 = (+__Z6IKfmoddd($3038,6.2831853071795898));
              $3040 = $3039 + -3.14159265358979;
              $3041 = +HEAPF64[$20>>3];
              $3042 = -$3030;
              $3043 = $3032 * $3042;
              $3044 = $3031 * $3033;
              $3045 = $3043 - $3044;
              $3046 = +HEAPF64[$12>>3];
              $3047 = $3032 * $3046;
              $3048 = +HEAPF64[$21>>3];
              $3049 = $3031 * $3048;
              $3050 = $3047 - $3049;
              $3051 = +HEAPF64[$13>>3];
              $3052 = $3032 * $3051;
              $3053 = +HEAPF64[$22>>3];
              $3054 = $3031 * $3053;
              $3055 = $3052 - $3054;
              $3056 = $3032 * $3033;
              $3057 = $3056 + 1.0;
              $3058 = $3031 * $3042;
              $3059 = $3058 + $3057;
              $3060 = (+__Z5IKabsd($3040));
              $3061 = $3060 < 9.9999999999999995E-7;
              if (!($3061)) {
               break;
              }
              $3062 = $3030 - $3031;
              $3063 = (+__Z5IKabsd($3062));
              $3064 = $3063 < 9.9999999999999995E-7;
              if (!($3064)) {
               break;
              }
              $3065 = (+__Z5IKabsd($3041));
              $3066 = $3065 < 9.9999999999999995E-7;
              if (!($3066)) {
               break;
              }
              $3067 = (+__Z5IKabsd($3034));
              $3068 = $3067 < 9.9999999999999995E-7;
              if (!($3068)) {
               break;
              }
              $3069 = (+__Z5IKabsd($3045));
              $3070 = $3069 < 9.9999999999999995E-7;
              if (!($3070)) {
               break;
              }
              $3071 = (+__Z5IKabsd($3050));
              $3072 = $3071 < 9.9999999999999995E-7;
              if (!($3072)) {
               break;
              }
              $3073 = (+__Z5IKabsd($3055));
              $3074 = $3073 < 9.9999999999999995E-7;
              if (!($3074)) {
               break;
              }
              $3075 = (+__Z5IKabsd($3059));
              $3076 = $3075 < 9.9999999999999995E-7;
              if (!($3076)) {
               break;
              }
              HEAP8[$213>>0] = 1;
              $3077 = +HEAPF64[$14>>3];
              $3078 = (+__Z6IKsignd($3077));
              __Z21IKPowWithIntegerCheckIdE10CheckValueIT_ES1_i($x263,$3078,-1);
              $3079 = HEAP8[$214>>0]|0;
              $3080 = ($3079<<24>>24)==(0);
              if ($3080) {
               break;
              }
              $3081 = +HEAPF64[$21>>3];
              $3082 = -$3081;
              $3083 = +HEAPF64[$22>>3];
              $3084 = -$3083;
              __Z16IKatan2WithCheckIdE10CheckValueIT_ES1_S1_S1_($x264,$3082,$3084,1.9999999999999999E-6);
              $3085 = HEAP8[$215>>0]|0;
              $3086 = ($3085<<24>>24)==(0);
              if ($3086) {
               break;
              }
              $3087 = +HEAPF64[$x263>>3];
              $3088 = $3087 * 1.5707963267949001;
              $3089 = $3088 + -1.5707963267949001;
              $3090 = +HEAPF64[$x264>>3];
              $3091 = $3090 + $3089;
              HEAPF64[$j5array112>>3] = $3091;
              $3092 = (+__Z5IKsind($3091));
              HEAPF64[$sj5array114>>3] = $3092;
              $3093 = (+__Z5IKcosd($3091));
              HEAPF64[$cj5array113>>3] = $3093;
              $3094 = $3091 > 3.14159265358979;
              do {
               if ($3094) {
                $3095 = $3091 + -6.2831853071795898;
                HEAPF64[$j5array112>>3] = $3095;
               } else {
                $3096 = $3091 < -3.14159265358979;
                if (!($3096)) {
                 break;
                }
                $3097 = $3091 + 6.2831853071795898;
                HEAPF64[$j5array112>>3] = $3097;
               }
              } while(0);
              HEAP8[$216>>0] = 0;
              HEAP8[$217>>0] = -1;
              $3098 = +HEAPF64[$j5array112>>3];
              HEAPF64[$218>>3] = $3098;
              $3099 = +HEAPF64[$cj5array113>>3];
              HEAPF64[$219>>3] = $3099;
              $3100 = +HEAPF64[$sj5array114>>3];
              HEAPF64[$220>>3] = $3100;
              $3101 = +HEAPF64[$218>>3];
              $3102 = (+__Z5IKsind($3101));
              $3103 = (+__Z5IKcosd($3101));
              $3104 = +HEAPF64[$23>>3];
              $3105 = +HEAPF64[$21>>3];
              $3106 = +HEAPF64[$14>>3];
              $3107 = $3102 * $3106;
              $3108 = $3105 + $3107;
              $3109 = +HEAPF64[$22>>3];
              $3110 = +HEAPF64[$18>>3];
              $3111 = $3102 - $3110;
              $3112 = +HEAPF64[$13>>3];
              $3113 = $3103 * $3104;
              $3114 = $3112 - $3113;
              $3115 = $3102 * $3104;
              $3116 = +HEAPF64[$12>>3];
              $3117 = $3116 - $3115;
              $3118 = +HEAPF64[$16>>3];
              $3119 = -$3118;
              $3120 = $3119 - $3103;
              $3121 = $3104 * $3116;
              $3122 = $3102 - $3121;
              $3123 = $3105 * $3106;
              $3124 = $3123 + $3122;
              $3125 = $3104 * $3112;
              $3126 = $3103 - $3125;
              $3127 = $3106 * $3109;
              $3128 = $3127 + $3126;
              $3129 = (+__Z5IKabsd($3108));
              $3130 = $3129 > 5.0000000000000004E-6;
              if ($3130) {
               break;
              }
              $3131 = $3103 * $3106;
              $3132 = $3109 + $3131;
              $3133 = (+__Z5IKabsd($3132));
              $3134 = $3133 > 5.0000000000000004E-6;
              if ($3134) {
               break;
              }
              $3135 = (+__Z5IKabsd($3111));
              $3136 = $3135 > 5.0000000000000004E-6;
              if ($3136) {
               break;
              }
              $3137 = (+__Z5IKabsd($3114));
              $3138 = $3137 > 5.0000000000000004E-6;
              if ($3138) {
               break;
              }
              $3139 = (+__Z5IKabsd($3117));
              $3140 = $3139 > 5.0000000000000004E-6;
              if ($3140) {
               break;
              }
              $3141 = (+__Z5IKabsd($3120));
              $3142 = $3141 > 5.0000000000000004E-6;
              if ($3142) {
               break;
              }
              $3143 = (+__Z5IKabsd($3124));
              $3144 = $3143 > 5.0000000000000004E-6;
              if ($3144) {
               break;
              }
              $3145 = (+__Z5IKabsd($3128));
              $3146 = $3145 > 5.0000000000000004E-6;
              if ($3146) {
               break;
              }
              __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEEC2Ej($vinfos120,6);
              $3147 = HEAP32[$vinfos120>>2]|0;
              $3148 = (($3147) + 17|0);
              HEAP8[$3148>>0] = 1;
              $3149 = +HEAPF64[$this>>3];
              $3150 = HEAP32[$vinfos120>>2]|0;
              $3151 = (($3150) + 8|0);
              HEAPF64[$3151>>3] = $3149;
              $3152 = HEAP8[$221>>0]|0;
              $3153 = HEAP32[$vinfos120>>2]|0;
              $3154 = (($3153) + 19|0);
              HEAP8[$3154>>0] = $3152;
              $3155 = HEAP8[$222>>0]|0;
              $3156 = HEAP32[$vinfos120>>2]|0;
              $3157 = (($3156) + 20|0);
              HEAP8[$3157>>0] = $3155;
              $3158 = HEAP8[$223>>0]|0;
              $3159 = HEAP32[$vinfos120>>2]|0;
              $3160 = (($3159) + 18|0);
              HEAP8[$3160>>0] = $3158;
              $3161 = HEAP32[$vinfos120>>2]|0;
              $3162 = (($3161) + 41|0);
              HEAP8[$3162>>0] = 1;
              $3163 = +HEAPF64[$224>>3];
              $3164 = HEAP32[$vinfos120>>2]|0;
              $3165 = (($3164) + 32|0);
              HEAPF64[$3165>>3] = $3163;
              $3166 = HEAP8[$225>>0]|0;
              $3167 = HEAP32[$vinfos120>>2]|0;
              $3168 = (($3167) + 43|0);
              HEAP8[$3168>>0] = $3166;
              $3169 = HEAP8[$226>>0]|0;
              $3170 = HEAP32[$vinfos120>>2]|0;
              $3171 = (($3170) + 44|0);
              HEAP8[$3171>>0] = $3169;
              $3172 = HEAP8[$227>>0]|0;
              $3173 = HEAP32[$vinfos120>>2]|0;
              $3174 = (($3173) + 42|0);
              HEAP8[$3174>>0] = $3172;
              $3175 = HEAP32[$vinfos120>>2]|0;
              $3176 = (($3175) + 65|0);
              HEAP8[$3176>>0] = 1;
              $3177 = +HEAPF64[$228>>3];
              $3178 = HEAP32[$vinfos120>>2]|0;
              $3179 = (($3178) + 56|0);
              HEAPF64[$3179>>3] = $3177;
              $3180 = HEAP8[$229>>0]|0;
              $3181 = HEAP32[$vinfos120>>2]|0;
              $3182 = (($3181) + 67|0);
              HEAP8[$3182>>0] = $3180;
              $3183 = HEAP8[$230>>0]|0;
              $3184 = HEAP32[$vinfos120>>2]|0;
              $3185 = (($3184) + 68|0);
              HEAP8[$3185>>0] = $3183;
              $3186 = HEAP8[$231>>0]|0;
              $3187 = HEAP32[$vinfos120>>2]|0;
              $3188 = (($3187) + 66|0);
              HEAP8[$3188>>0] = $3186;
              $3189 = HEAP32[$vinfos120>>2]|0;
              $3190 = (($3189) + 89|0);
              HEAP8[$3190>>0] = 1;
              $3191 = +HEAPF64[$91>>3];
              $3192 = HEAP32[$vinfos120>>2]|0;
              $3193 = (($3192) + 80|0);
              HEAPF64[$3193>>3] = $3191;
              $3194 = HEAP8[$89>>0]|0;
              $3195 = HEAP32[$vinfos120>>2]|0;
              $3196 = (($3195) + 91|0);
              HEAP8[$3196>>0] = $3194;
              $3197 = HEAP8[$90>>0]|0;
              $3198 = HEAP32[$vinfos120>>2]|0;
              $3199 = (($3198) + 92|0);
              HEAP8[$3199>>0] = $3197;
              $3200 = HEAP8[$86>>0]|0;
              $3201 = HEAP32[$vinfos120>>2]|0;
              $3202 = (($3201) + 90|0);
              HEAP8[$3202>>0] = $3200;
              $3203 = HEAP32[$vinfos120>>2]|0;
              $3204 = (($3203) + 113|0);
              HEAP8[$3204>>0] = 1;
              $3205 = +HEAPF64[$27>>3];
              $3206 = HEAP32[$vinfos120>>2]|0;
              $3207 = (($3206) + 104|0);
              HEAPF64[$3207>>3] = $3205;
              $3208 = HEAP8[$25>>0]|0;
              $3209 = HEAP32[$vinfos120>>2]|0;
              $3210 = (($3209) + 115|0);
              HEAP8[$3210>>0] = $3208;
              $3211 = HEAP8[$26>>0]|0;
              $3212 = HEAP32[$vinfos120>>2]|0;
              $3213 = (($3212) + 116|0);
              HEAP8[$3213>>0] = $3211;
              $3214 = HEAP8[$24>>0]|0;
              $3215 = HEAP32[$vinfos120>>2]|0;
              $3216 = (($3215) + 114|0);
              HEAP8[$3216>>0] = $3214;
              $3217 = HEAP32[$vinfos120>>2]|0;
              $3218 = (($3217) + 137|0);
              HEAP8[$3218>>0] = 1;
              $3219 = +HEAPF64[$218>>3];
              $3220 = HEAP32[$vinfos120>>2]|0;
              $3221 = (($3220) + 128|0);
              HEAPF64[$3221>>3] = $3219;
              $3222 = HEAP8[$216>>0]|0;
              $3223 = HEAP32[$vinfos120>>2]|0;
              $3224 = (($3223) + 139|0);
              HEAP8[$3224>>0] = $3222;
              $3225 = HEAP8[$217>>0]|0;
              $3226 = HEAP32[$vinfos120>>2]|0;
              $3227 = (($3226) + 140|0);
              HEAP8[$3227>>0] = $3225;
              $3228 = HEAP8[$213>>0]|0;
              $3229 = HEAP32[$vinfos120>>2]|0;
              $3230 = (($3229) + 138|0);
              HEAP8[$3230>>0] = $3228;
              __ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ej($vfree121,0);
              $3231 = HEAP32[$solutions>>2]|0;
              $3232 = (($3231) + 8|0);
              $3233 = HEAP32[$3232>>2]|0;
              (FUNCTION_TABLE_iiii[$3233 & 31]($solutions,$vinfos120,$vfree121)|0);
              __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($vfree121);
              __ZNSt3__113__vector_baseIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEED2Ev($vinfos120);
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  } while(0);
  $5037 = (($ij4$0289) + 1)|0;
  $5038 = ($5037|0)<(2);
  if ($5038) {
   $ij4$0289 = $5037;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZN6ikfast18IkSolutionListBaseIdEC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((824 + 8|0));
 return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv($this)|0);
 $1 = ($0>>>0)<($__n>>>0);
 if ($1) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 } else {
  $2 = $__n << 3;
  $3 = (__Znwj($2)|0);
  $4 = (($this) + 4|0);
  HEAP32[$4>>2] = $3;
  HEAP32[$this>>2] = $3;
  $5 = (($3) + ($__n<<3)|0);
  $6 = (($this) + 8|0);
  HEAP32[$6>>2] = $5;
  return;
 }
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$promoted = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $$promoted = HEAP32[$0>>2]|0;
 $$0 = $__n;$1 = $$promoted;
 while(1) {
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   HEAPF64[$1>>3] = 0.0;
  }
  $3 = (($1) + 8|0);
  $4 = (($$0) + -1)|0;
  $5 = ($4|0)==(0);
  if ($5) {
   break;
  } else {
   $$0 = $4;$1 = $3;
  }
 }
 $scevgep = (($$promoted) + ($__n<<3)|0);
 HEAP32[$0>>2] = $scevgep;
 return;
}
function __ZNSt3__110__list_impIN6ikfast10IkSolutionIdEENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__110__list_impIN6ikfast10IkSolutionIdEENS_9allocatorIS3_EEE5clearEv($this);
 return;
}
function __ZN6ikfast10IkSolutionIdEC2ERKNSt3__16vectorINS_23IkSingleDOFSolutionBaseIdEENS2_9allocatorIS5_EEEERKNS3_IiNS6_IiEEEE($this,$vinfos,$vfree) {
 $this = $this|0;
 $vinfos = $vinfos|0;
 $vfree = $vfree|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ikfast14IkSolutionBaseIdEC2Ev($this);
 HEAP32[$this>>2] = ((520 + 8|0));
 $0 = (($this) + 4|0);
 $1 = (($this) + 16|0);
 $2 = ($0|0)==($vinfos|0);
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
 if (!($2)) {
  $3 = HEAP32[$vinfos>>2]|0;
  $4 = (($vinfos) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEE6assignIPS3_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_($0,$3,$5);
 }
 $6 = ($1|0)==($vfree|0);
 if ($6) {
  return;
 }
 $7 = HEAP32[$vfree>>2]|0;
 $8 = (($vfree) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 __ZNSt3__16vectorIiNS_9allocatorIiEEE6assignIPiEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIiNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($1,$7,$9);
 return;
}
function __ZNSt3__14listIN6ikfast10IkSolutionIdEENS_9allocatorIS3_EEE9push_backERKS3_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(36)|0);
 $1 = (($0) + 8|0);
 __ZN6ikfast10IkSolutionIdEC2ERKS1_($1,$__x);
 $2 = (($0) + 4|0);
 HEAP32[$2>>2] = $this;
 $3 = HEAP32[$this>>2]|0;
 HEAP32[$0>>2] = $3;
 $4 = (($3) + 4|0);
 HEAP32[$4>>2] = $0;
 HEAP32[$this>>2] = $0;
 $5 = (($this) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$5>>2] = $7;
 return;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNSt3__110__list_impIN6ikfast10IkSolutionIdEENS_9allocatorIS3_EEE5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__f$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 $3 = (($this) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$this>>2]|0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$4>>2]|0;
 $9 = (($8) + 4|0);
 HEAP32[$9>>2] = $7;
 $10 = HEAP32[$4>>2]|0;
 $11 = HEAP32[$6>>2]|0;
 HEAP32[$11>>2] = $10;
 HEAP32[$0>>2] = 0;
 $12 = ($4|0)==($this|0);
 if ($12) {
  return;
 } else {
  $__f$01 = $4;
 }
 while(1) {
  $13 = (($__f$01) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($__f$01) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vi[$17 & 127]($15);
  __ZdlPv($__f$01);
  $18 = ($14|0)==($this|0);
  if ($18) {
   break;
  } else {
   $__f$01 = $14;
  }
 }
 return;
}
function __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($0|0);
 if (!($4)) {
  $scevgep$i$i = (($3) + -4|0);
  $5 = $scevgep$i$i;
  $__new_last2$i$i = $0;
  $6 = (($5) - ($__new_last2$i$i))|0;
  $7 = $6 >>> 2;
  $8 = $7 ^ -1;
  $scevgep4$i$i = (($3) + ($8<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i;
 }
 $9 = HEAP32[$this>>2]|0;
 __ZdlPv($9);
 return;
}
function __ZNSt3__113__vector_baseIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($0|0);
 if (!($4)) {
  $scevgep$i$i = (($3) + -24|0);
  $5 = $scevgep$i$i;
  $__new_last2$i$i = $0;
  $6 = (($5) - ($__new_last2$i$i))|0;
  $7 = (($6>>>0) / 24)&-1;
  $8 = $7 ^ -1;
  $scevgep4$i$i = (($3) + (($8*24)|0)|0);
  HEAP32[$2>>2] = $scevgep4$i$i;
 }
 $9 = HEAP32[$this>>2]|0;
 __ZdlPv($9);
 return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 3;
 $7 = ($6>>>0)<($__sz>>>0);
 if ($7) {
  $8 = (($__sz) - ($6))|0;
  __ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEj($this,$8);
  return;
 }
 $9 = ($6>>>0)>($__sz>>>0);
 if (!($9)) {
  return;
 }
 $10 = (($2) + ($__sz<<3)|0);
 $11 = ($1|0)==($10|0);
 if ($11) {
  return;
 }
 $scevgep$i$i = (($1) + -8|0);
 $12 = $scevgep$i$i;
 $__new_last2$i$i = $10;
 $13 = (($12) - ($__new_last2$i$i))|0;
 $14 = $13 >>> 3;
 $15 = $14 ^ -1;
 $scevgep4$i$i = (($1) + ($15<<3)|0);
 HEAP32[$0>>2] = $scevgep4$i$i;
 return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE2atEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 3;
 $7 = ($6>>>0)>($__n>>>0);
 if ($7) {
  $8 = HEAP32[$this>>2]|0;
  $9 = (($8) + ($__n<<3)|0);
  return ($9|0);
 } else {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv($this);
  // unreachable;
 }
 return (0)|0;
}
function __ZNKSt3__16vectorIdNS_9allocatorIdEEE2atEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 3;
 $7 = ($6>>>0)>($__n>>>0);
 if ($7) {
  $8 = HEAP32[$this>>2]|0;
  $9 = (($8) + ($__n<<3)|0);
  return ($9|0);
 } else {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv($this);
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($__sz>>>0);
 if ($7) {
  $8 = (($__sz) - ($6))|0;
  __ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEj($this,$8);
  return;
 }
 $9 = ($6>>>0)>($__sz>>>0);
 if (!($9)) {
  return;
 }
 $10 = (($2) + ($__sz<<2)|0);
 $11 = ($1|0)==($10|0);
 if ($11) {
  return;
 }
 $scevgep$i$i = (($1) + -4|0);
 $12 = $scevgep$i$i;
 $__new_last2$i$i = $10;
 $13 = (($12) - ($__new_last2$i$i))|0;
 $14 = $13 >>> 2;
 $15 = $14 ^ -1;
 $scevgep4$i$i = (($1) + ($15<<2)|0);
 HEAP32[$0>>2] = $scevgep4$i$i;
 return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIKjEEvRT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$this>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__16vectorIjNS_9allocatorIjEEE8max_sizeEv($this)|0);
 $10 = ($9>>>0)<($8>>>0);
 if ($10) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $11 = (($this) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$this>>2]|0;
 $14 = $12;
 $15 = $13;
 $16 = (($14) - ($15))|0;
 $17 = $16 >> 2;
 $18 = $9 >>> 1;
 $19 = ($17>>>0)<($18>>>0);
 if ($19) {
  $20 = $16 >> 1;
  $21 = ($20>>>0)<($8>>>0);
  $22 = $21 ? $8 : $20;
  $$0$i = $22;
 } else {
  $$0$i = $9;
 }
 $23 = HEAP32[$1>>2]|0;
 $24 = HEAP32[$this>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = $27 >> 2;
 __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEEC2EjjS3_($__v,$$0$i,$28,$0);
 $29 = (($__v) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if (!($31)) {
  $32 = HEAP32[$__x>>2]|0;
  HEAP32[$30>>2] = $32;
 }
 $33 = HEAP32[$29>>2]|0;
 $34 = (($33) + 4|0);
 HEAP32[$29>>2] = $34;
 __ZNSt3__16vectorIjNS_9allocatorIjEEE26__swap_out_circular_bufferERNS_14__split_bufferIjRS2_EE($this,$__v);
 __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vtt>>2]|0;
 HEAP32[$this>>2] = $0;
 $1 = (($vtt) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($this) + ($4)|0);
 HEAP32[$5>>2] = $2;
 $6 = (($vtt) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($this) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = (($this) + 12|0);
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 return;
}
function __ZNSt3__111char_traitsIcE11to_int_typeEc($__c) {
 $__c = $__c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__c&255;
 return ($0|0);
}
function __ZNSt3__111char_traitsIcE11eq_int_typeEii($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c1|0)==($__c2|0);
 return ($0|0);
}
function __ZNSt3__111char_traitsIcE7not_eofEi($__c) {
 $__c = $__c|0;
 var $$__c = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($__c,-1)|0);
 $$__c = $0 ? 0 : $__c;
 return ($$__c|0);
}
function __ZNSt3__111char_traitsIcE12to_char_typeEi($__c) {
 $__c = $__c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__c&255;
 return ($0|0);
}
function __ZNSt3__111char_traitsIcE2eqEcc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c1<<24>>24)==($__c2<<24>>24);
 return ($0|0);
}
function __Z13IKatan2Simpledd($fy,$fx) {
 $fy = +$fy;
 $fx = +$fx;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+Math_atan2((+$fy),(+$fx)));
 return (+$0);
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 32|0);
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($0,$__s)|0);
 $1 = (($this) + 44|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 8;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = HEAP8[$0>>0]|0;
  $7 = $6 & 1;
  $8 = ($7<<24>>24)==(0);
  if ($8) {
   $11 = (($0) + 1|0);
   $20 = $11;
  } else {
   $9 = (($this) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $20 = $10;
  }
  $12 = HEAP8[$0>>0]|0;
  $13 = $12 & 1;
  $14 = ($13<<24>>24)==(0);
  if ($14) {
   $17 = $12&255;
   $18 = $17 >>> 1;
   $21 = $18;
  } else {
   $15 = (($this) + 36|0);
   $16 = HEAP32[$15>>2]|0;
   $21 = $16;
  }
  $19 = (($20) + ($21)|0);
  HEAP32[$1>>2] = $19;
  $22 = HEAP8[$0>>0]|0;
  $23 = $22 & 1;
  $24 = ($23<<24>>24)==(0);
  if ($24) {
   $27 = (($0) + 1|0);
   $36 = $27;
  } else {
   $25 = (($this) + 40|0);
   $26 = HEAP32[$25>>2]|0;
   $36 = $26;
  }
  $28 = HEAP8[$0>>0]|0;
  $29 = $28 & 1;
  $30 = ($29<<24>>24)==(0);
  if ($30) {
   $33 = (($0) + 1|0);
   $38 = $33;
  } else {
   $31 = (($this) + 40|0);
   $32 = HEAP32[$31>>2]|0;
   $38 = $32;
  }
  $34 = HEAP32[$1>>2]|0;
  $35 = (($this) + 8|0);
  HEAP32[$35>>2] = $36;
  $37 = (($this) + 12|0);
  HEAP32[$37>>2] = $38;
  $39 = (($this) + 16|0);
  HEAP32[$39>>2] = $34;
 }
 $40 = HEAP32[$2>>2]|0;
 $41 = $40 & 16;
 $42 = ($41|0)==(0);
 if ($42) {
  return;
 }
 $43 = HEAP8[$0>>0]|0;
 $44 = $43 & 1;
 $45 = ($44<<24>>24)==(0);
 if ($45) {
  $48 = $43&255;
  $49 = $48 >>> 1;
  $58 = $49;
 } else {
  $46 = (($this) + 36|0);
  $47 = HEAP32[$46>>2]|0;
  $58 = $47;
 }
 $50 = HEAP8[$0>>0]|0;
 $51 = $50 & 1;
 $52 = ($51<<24>>24)==(0);
 if ($52) {
  $55 = (($0) + 1|0);
  $57 = $55;
 } else {
  $53 = (($this) + 40|0);
  $54 = HEAP32[$53>>2]|0;
  $57 = $54;
 }
 $56 = (($57) + ($58)|0);
 HEAP32[$1>>2] = $56;
 $59 = HEAP8[$0>>0]|0;
 $60 = $59 & 1;
 $61 = ($60<<24>>24)==(0);
 if ($61) {
  $64 = 10;
 } else {
  $62 = HEAP32[$0>>2]|0;
  $63 = $62 & -2;
  $phitmp$i = (($63) + -1)|0;
  $64 = $phitmp$i;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($0,$64,0);
 $65 = HEAP8[$0>>0]|0;
 $66 = $65 & 1;
 $67 = ($66<<24>>24)==(0);
 if ($67) {
  $70 = (($0) + 1|0);
  $88 = $70;
 } else {
  $68 = (($this) + 40|0);
  $69 = HEAP32[$68>>2]|0;
  $88 = $69;
 }
 $71 = HEAP8[$0>>0]|0;
 $72 = $71 & 1;
 $73 = ($72<<24>>24)==(0);
 if ($73) {
  $76 = (($0) + 1|0);
  $85 = $76;
 } else {
  $74 = (($this) + 40|0);
  $75 = HEAP32[$74>>2]|0;
  $85 = $75;
 }
 $77 = HEAP8[$0>>0]|0;
 $78 = $77 & 1;
 $79 = ($78<<24>>24)==(0);
 if ($79) {
  $82 = $77&255;
  $83 = $82 >>> 1;
  $86 = $83;
 } else {
  $80 = (($this) + 36|0);
  $81 = HEAP32[$80>>2]|0;
  $86 = $81;
 }
 $84 = (($85) + ($86)|0);
 $87 = (($this) + 24|0);
 HEAP32[$87>>2] = $88;
 $89 = (($this) + 20|0);
 HEAP32[$89>>2] = $88;
 $90 = (($this) + 28|0);
 HEAP32[$90>>2] = $84;
 $91 = HEAP32[$2>>2]|0;
 $92 = $91 & 3;
 $93 = ($92|0)==(0);
 if ($93) {
  return;
 }
 $94 = HEAP32[$87>>2]|0;
 $95 = (($94) + ($58)|0);
 HEAP32[$87>>2] = $95;
 return;
}
function __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($__os,$__str) {
 $__os = $__os|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__111char_traitsIcE6lengthEPKc($__str)|0);
 $1 = (__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($__os,$__str,$0)|0);
 return ($1|0);
}
function __ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 16;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = (($this) + 44|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($this) + 24|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5>>>0)<($7>>>0);
  if ($8) {
   HEAP32[$4>>2] = $7;
  }
  $9 = (($this) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$4>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($agg$result,$10,$11);
  return;
 }
 $12 = $1 & 8;
 $13 = ($12|0)==(0);
 if ($13) {
  ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
  return;
 } else {
  $14 = (($this) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($this) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($agg$result,$15,$17);
  return;
 }
}
function __Z6IKacosd($f) {
 $f = +$f;
 var $$06 = 0.0, $$sum$i$i$i = 0, $$sum1$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $ss = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $0 = sp + 160|0;
 $ss = sp + 16|0;
 $1 = sp;
 $2 = $f > -1.0000020000000001;
 $3 = $f < 1.0000020000000001;
 $or$cond = $2 & $3;
 if (!($or$cond)) {
  $4 = (($ss) + 64|0);
  $5 = (($ss) + 8|0);
  HEAP32[$5>>2] = ((976 + 32|0));
  $6 = (($ss) + 12|0);
  HEAP32[$ss>>2] = ((1144 + 12|0));
  HEAP32[$4>>2] = ((1144 + 32|0));
  $7 = (($ss) + 4|0);
  HEAP32[$7>>2] = 0;
  $8 = HEAP32[$ss>>2]|0;
  $9 = (($8) + -12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($ss) + ($10)|0);
  __ZNSt3__18ios_base4initEPv($11,$6);
  $$sum$i$i$i = (($10) + 72)|0;
  $12 = (($ss) + ($$sum$i$i$i)|0);
  HEAP32[$12>>2] = 0;
  $$sum1$i$i$i = (($10) + 76)|0;
  $13 = (($ss) + ($$sum1$i$i$i)|0);
  HEAP32[$13>>2] = -1;
  HEAP32[$ss>>2] = ((976 + 12|0));
  HEAP32[$4>>2] = ((976 + 52|0));
  HEAP32[$5>>2] = ((976 + 32|0));
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($6);
  HEAP32[$6>>2] = ((1312 + 8|0));
  $14 = (($ss) + 44|0);
  $15 = (($ss) + 60|0);
  ;HEAP32[$14+0>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;HEAP32[$14+12>>2]=0|0;
  HEAP32[$15>>2] = 24;
  ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
  __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($6,$0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
  $16 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($5,856)|0);
  $17 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($16,880)|0);
  $18 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($17,904)|0);
  $19 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($18,163)|0);
  $20 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($19,912)|0);
  $21 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($20,1464)|0);
  $22 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($21,928)|0);
  $23 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($22,1472)|0);
  (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($23,960)|0);
  $24 = (___cxa_allocate_exception(8)|0);
  __ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($1,$6);
  __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($24,$1);
  ___cxa_throw(($24|0),(2320|0),(35|0));
  // unreachable;
 }
 $25 = !($f <= -1.0);
 if (!($25)) {
  $$06 = 3.14159265358979;
  STACKTOP = sp;return (+$$06);
 }
 $26 = !($f >= 1.0);
 if (!($26)) {
  $$06 = 0.0;
  STACKTOP = sp;return (+$$06);
 }
 $27 = (+Math_acos((+$f)));
 $$06 = $27;
 STACKTOP = sp;return (+$$06);
}
function __Z6IKfmoddd($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0$lcssa = 0.0, $$01 = 0.0, $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x < 0.0;
 if ($0) {
  $$01 = $x;
  while(1) {
   $1 = $$01 + $y;
   $2 = $1 < 0.0;
   if ($2) {
    $$01 = $1;
   } else {
    $$0$lcssa = $1;
    break;
   }
  }
 } else {
  $$0$lcssa = $x;
 }
 $3 = (+_fmod($$0$lcssa,$y));
 return (+$3);
}
function __Z5IKsqrd($f) {
 $f = +$f;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $f * $f;
 return (+$0);
}
function __Z7IKatan2dd($fy,$fx) {
 $fy = +$fy;
 $fx = +$fx;
 var $$05 = 0.0, $$sum$i$i$i = 0, $$sum1$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $ss = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $0 = sp + 160|0;
 $ss = sp + 16|0;
 $1 = sp;
 $2 = (__Z13__DOUBLE_BITSd($fy)|0);
 $3 = tempRet0;
 $4 = $3 & 2147483647;
 $5 = ($4>>>0)>(2146435072);
 $6 = ($2>>>0)>(0);
 $7 = ($4|0)==(2146435072);
 $8 = $7 & $6;
 $9 = $5 | $8;
 $10 = (__Z13__DOUBLE_BITSd($fx)|0);
 $11 = tempRet0;
 $12 = $11 & 2147483647;
 $13 = ($12>>>0)>(2146435072);
 $14 = ($10>>>0)>(0);
 $15 = ($12|0)==(2146435072);
 $16 = $15 & $14;
 $17 = $13 | $16;
 if ($9) {
  if ($17) {
   $18 = (($ss) + 64|0);
   $19 = (($ss) + 8|0);
   HEAP32[$19>>2] = ((976 + 32|0));
   $20 = (($ss) + 12|0);
   HEAP32[$ss>>2] = ((1144 + 12|0));
   HEAP32[$18>>2] = ((1144 + 32|0));
   $21 = (($ss) + 4|0);
   HEAP32[$21>>2] = 0;
   $22 = HEAP32[$ss>>2]|0;
   $23 = (($22) + -12|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($ss) + ($24)|0);
   __ZNSt3__18ios_base4initEPv($25,$20);
   $$sum$i$i$i = (($24) + 72)|0;
   $26 = (($ss) + ($$sum$i$i$i)|0);
   HEAP32[$26>>2] = 0;
   $$sum1$i$i$i = (($24) + 76)|0;
   $27 = (($ss) + ($$sum1$i$i$i)|0);
   HEAP32[$27>>2] = -1;
   HEAP32[$ss>>2] = ((976 + 12|0));
   HEAP32[$18>>2] = ((976 + 52|0));
   HEAP32[$19>>2] = ((976 + 32|0));
   __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($20);
   HEAP32[$20>>2] = ((1312 + 8|0));
   $28 = (($ss) + 44|0);
   $29 = (($ss) + 60|0);
   ;HEAP32[$28+0>>2]=0|0;HEAP32[$28+4>>2]=0|0;HEAP32[$28+8>>2]=0|0;HEAP32[$28+12>>2]=0|0;
   HEAP32[$29>>2] = 24;
   ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
   __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($20,$0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
   $30 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($19,856)|0);
   $31 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($30,880)|0);
   $32 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($31,904)|0);
   $33 = (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($32,194)|0);
   $34 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($33,912)|0);
   $35 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($34,920)|0);
   $36 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($35,928)|0);
   $37 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($36,944)|0);
   (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($37,960)|0);
   $38 = (___cxa_allocate_exception(8)|0);
   __ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($1,$20);
   __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($38,$1);
   ___cxa_throw(($38|0),(2320|0),(35|0));
   // unreachable;
  } else {
   $$05 = 1.5707963267949001;
   STACKTOP = sp;return (+$$05);
  }
 }
 if ($17) {
  $$05 = 0.0;
  STACKTOP = sp;return (+$$05);
 }
 $39 = (+Math_atan2((+$fy),(+$fx)));
 $$05 = $39;
 STACKTOP = sp;return (+$$05);
}
function __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ($__n|0)==(0);
 if ($2) {
  return;
 }
 __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEE8allocateEj($this,$__n);
 __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEE18__construct_at_endEj($this,$__n);
 return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ($__n|0)==(0);
 if ($2) {
  return;
 }
 __ZNSt3__16vectorIiNS_9allocatorIiEEE8allocateEj($this,$__n);
 __ZNSt3__16vectorIiNS_9allocatorIiEEE18__construct_at_endEj($this,$__n);
 return;
}
function __ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 536870911;
}
function __ZN6ikfast14IkSolutionBaseIdEC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((792 + 8|0));
 return;
}
function __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEE6assignIPS3_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__growing$0$off0 = 0, $__last1 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__last;
 $1 = $__first;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 24)&-1;
 $4 = (($this) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$this>>2]|0;
 $7 = $5;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = (($9|0) / 24)&-1;
 $11 = ($3>>>0)>($10>>>0);
 if ($11) {
  __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEE10deallocateEv($this);
  $30 = (__ZNKSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEE8max_sizeEv($this)|0);
  $31 = ($30>>>0)<($3>>>0);
  if ($31) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
   // unreachable;
  }
  $32 = HEAP32[$4>>2]|0;
  $33 = HEAP32[$this>>2]|0;
  $34 = $32;
  $35 = $33;
  $36 = (($34) - ($35))|0;
  $37 = (($36|0) / 24)&-1;
  $38 = $30 >>> 1;
  $39 = ($37>>>0)<($38>>>0);
  if ($39) {
   $40 = $37 << 1;
   $41 = ($40>>>0)<($3>>>0);
   $42 = $41 ? $3 : $40;
   $$0$i = $42;
  } else {
   $$0$i = $30;
  }
  __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEE8allocateEj($this,$$0$i);
  __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last);
  return;
 }
 $12 = (($this) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13;
 $15 = (($14) - ($8))|0;
 $16 = (($15|0) / 24)&-1;
 $17 = ($3>>>0)>($16>>>0);
 if ($17) {
  $18 = (($__first) + (($16*24)|0)|0);
  $__growing$0$off0 = 1;$__last1 = $18;
 } else {
  $__growing$0$off0 = 0;$__last1 = $__last;
 }
 $19 = HEAP32[$this>>2]|0;
 $20 = $__last1;
 $21 = (($20) - ($1))|0;
 $22 = (($21|0) / 24)&-1;
 _memmove(($19|0),($__first|0),($21|0))|0;
 $23 = (($19) + (($22*24)|0)|0);
 if ($__growing$0$off0) {
  __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__last1,$__last);
  return;
 }
 $24 = HEAP32[$12>>2]|0;
 $25 = ($24|0)==($23|0);
 if ($25) {
  return;
 }
 $scevgep$i$i = (($24) + -24|0);
 $26 = $scevgep$i$i;
 $__new_last2$i$i = $23;
 $27 = (($26) - ($__new_last2$i$i))|0;
 $28 = (($27>>>0) / 24)&-1;
 $29 = $28 ^ -1;
 $scevgep4$i$i = (($24) + (($29*24)|0)|0);
 HEAP32[$12>>2] = $scevgep4$i$i;
 return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE6assignIPiEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIiNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__growing$0$off0 = 0, $__last1 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__last;
 $1 = $__first;
 $2 = (($0) - ($1))|0;
 $3 = $2 >> 2;
 $4 = (($this) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$this>>2]|0;
 $7 = $5;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = $9 >> 2;
 $11 = ($3>>>0)>($10>>>0);
 if ($11) {
  __ZNSt3__16vectorIiNS_9allocatorIiEEE10deallocateEv($this);
  $30 = (__ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv($this)|0);
  $31 = ($30>>>0)<($3>>>0);
  if ($31) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
   // unreachable;
  }
  $32 = HEAP32[$4>>2]|0;
  $33 = HEAP32[$this>>2]|0;
  $34 = $32;
  $35 = $33;
  $36 = (($34) - ($35))|0;
  $37 = $36 >> 2;
  $38 = $30 >>> 1;
  $39 = ($37>>>0)<($38>>>0);
  if ($39) {
   $40 = $36 >> 1;
   $41 = ($40>>>0)<($3>>>0);
   $42 = $41 ? $3 : $40;
   $$0$i = $42;
  } else {
   $$0$i = $30;
  }
  __ZNSt3__16vectorIiNS_9allocatorIiEEE8allocateEj($this,$$0$i);
  __ZNSt3__16vectorIiNS_9allocatorIiEEE18__construct_at_endIPiEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_($this,$__first,$__last);
  return;
 }
 $12 = (($this) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13;
 $15 = (($14) - ($8))|0;
 $16 = $15 >> 2;
 $17 = ($3>>>0)>($16>>>0);
 if ($17) {
  $18 = (($__first) + ($16<<2)|0);
  $__growing$0$off0 = 1;$__last1 = $18;
 } else {
  $__growing$0$off0 = 0;$__last1 = $__last;
 }
 $19 = HEAP32[$this>>2]|0;
 $20 = $__last1;
 $21 = (($20) - ($1))|0;
 $22 = $21 >> 2;
 _memmove(($19|0),($__first|0),($21|0))|0;
 $23 = (($19) + ($22<<2)|0);
 if ($__growing$0$off0) {
  __ZNSt3__16vectorIiNS_9allocatorIiEEE18__construct_at_endIPiEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_($this,$__last1,$__last);
  return;
 }
 $24 = HEAP32[$12>>2]|0;
 $25 = ($24|0)==($23|0);
 if ($25) {
  return;
 }
 $scevgep$i$i = (($24) + -4|0);
 $26 = $scevgep$i$i;
 $__new_last2$i$i = $23;
 $27 = (($26) - ($__new_last2$i$i))|0;
 $28 = $27 >>> 2;
 $29 = $28 ^ -1;
 $scevgep4$i$i = (($24) + ($29<<2)|0);
 HEAP32[$12>>2] = $scevgep4$i$i;
 return;
}
function __ZN6ikfast10IkSolutionIdEC2ERKS1_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6ikfast14IkSolutionBaseIdEC2ERKS1_($this,$0);
 HEAP32[$this>>2] = ((520 + 8|0));
 $1 = (($this) + 4|0);
 $2 = (($0) + 4|0);
 __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEEC2ERKS6_($1,$2);
 $3 = (($this) + 16|0);
 $4 = (($0) + 16|0);
 __ZNSt3__16vectorIiNS_9allocatorIiEEEC2ERKS3_($3,$4);
 return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 3;
 $8 = ($7>>>0)<($__n>>>0);
 if (!($8)) {
  __ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endEj($this,$__n);
  STACKTOP = sp;return;
 }
 $9 = (($this) + 8|0);
 $10 = HEAP32[$this>>2]|0;
 $11 = $10;
 $12 = (($5) - ($11))|0;
 $13 = $12 >> 3;
 $14 = (($13) + ($__n))|0;
 $15 = (__ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv($this)|0);
 $16 = ($15>>>0)<($14>>>0);
 if ($16) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $17 = (($this) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$this>>2]|0;
 $20 = $18;
 $21 = $19;
 $22 = (($20) - ($21))|0;
 $23 = $22 >> 3;
 $24 = $15 >>> 1;
 $25 = ($23>>>0)<($24>>>0);
 if ($25) {
  $26 = $22 >> 2;
  $27 = ($26>>>0)<($14>>>0);
  $28 = $27 ? $14 : $26;
  $$0$i = $28;
 } else {
  $$0$i = $15;
 }
 $29 = HEAP32[$2>>2]|0;
 $30 = HEAP32[$this>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = $33 >> 3;
 __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC2EjjS3_($__v,$$0$i,$34,$9);
 __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEE18__construct_at_endEj($__v,$__n);
 __ZNSt3__16vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE($this,$__v);
 __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)<($__n>>>0);
 if (!($8)) {
  __ZNSt3__16vectorIjNS_9allocatorIjEEE18__construct_at_endEj($this,$__n);
  STACKTOP = sp;return;
 }
 $9 = (($this) + 8|0);
 $10 = HEAP32[$this>>2]|0;
 $11 = $10;
 $12 = (($5) - ($11))|0;
 $13 = $12 >> 2;
 $14 = (($13) + ($__n))|0;
 $15 = (__ZNKSt3__16vectorIjNS_9allocatorIjEEE8max_sizeEv($this)|0);
 $16 = ($15>>>0)<($14>>>0);
 if ($16) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $17 = (($this) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$this>>2]|0;
 $20 = $18;
 $21 = $19;
 $22 = (($20) - ($21))|0;
 $23 = $22 >> 2;
 $24 = $15 >>> 1;
 $25 = ($23>>>0)<($24>>>0);
 if ($25) {
  $26 = $22 >> 1;
  $27 = ($26>>>0)<($14>>>0);
  $28 = $27 ? $14 : $26;
  $$0$i = $28;
 } else {
  $$0$i = $15;
 }
 $29 = HEAP32[$2>>2]|0;
 $30 = HEAP32[$this>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = $33 >> 2;
 __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEEC2EjjS3_($__v,$$0$i,$34,$9);
 __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEE18__construct_at_endEj($__v,$__n);
 __ZNSt3__16vectorIjNS_9allocatorIjEEE26__swap_out_circular_bufferERNS_14__split_bufferIjRS2_EE($this,$__v);
 __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIjNS_9allocatorIjEEE8max_sizeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1073741823;
}
function __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEEC2EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 if ($2) {
  $5 = 0;
 } else {
  $3 = $__cap << 2;
  $4 = (__Znwj($3)|0);
  $5 = $4;
 }
 HEAP32[$this>>2] = $5;
 $6 = (($5) + ($__start<<2)|0);
 $7 = (($this) + 8|0);
 HEAP32[$7>>2] = $6;
 $8 = (($this) + 4|0);
 HEAP32[$8>>2] = $6;
 $9 = HEAP32[$this>>2]|0;
 $10 = (($9) + ($__cap<<2)|0);
 $11 = (($this) + 12|0);
 HEAP32[$11>>2] = $10;
 return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE26__swap_out_circular_bufferERNS_14__split_bufferIjRS2_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($__v) + 4|0);
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = HEAP32[$3>>2]|0;
 $9 = (0 - ($7))|0;
 $10 = (($8) + ($9<<2)|0);
 HEAP32[$3>>2] = $10;
 _memcpy(($10|0),($0|0),($6|0))|0;
 $11 = HEAP32[$this>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $12;
 HEAP32[$3>>2] = $11;
 $13 = (($__v) + 8|0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$13>>2]|0;
 HEAP32[$1>>2] = $15;
 HEAP32[$13>>2] = $14;
 $16 = (($this) + 8|0);
 $17 = (($__v) + 12|0);
 $18 = HEAP32[$16>>2]|0;
 $19 = HEAP32[$17>>2]|0;
 HEAP32[$16>>2] = $19;
 HEAP32[$17>>2] = $18;
 $20 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $20;
 return;
}
function __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $scevgep$i$i$i = (($3) + -4|0);
  $5 = $scevgep$i$i$i;
  $__new_last2$i$i$i = $1;
  $6 = (($5) - ($__new_last2$i$i$i))|0;
  $7 = $6 >>> 2;
  $8 = $7 ^ -1;
  $scevgep4$i$i$i = (($3) + ($8<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i$i;
 }
 $9 = HEAP32[$this>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  return;
 }
 __ZdlPv($9);
 return;
}
function __ZNSt3__111char_traitsIcE6lengthEPKc($__s) {
 $__s = $__s|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 return ($0|0);
}
function __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($__os,$__str,$__len) {
 $__os = $__os|0;
 $__str = $__str|0;
 $__len = $__len|0;
 var $$byval_copy = 0, $$sum = 0, $$sum$i = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 16|0;
 $__s = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s,$__os);
 $2 = HEAP8[$__s>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
  STACKTOP = sp;return ($__os|0);
 }
 $4 = HEAP32[$__os>>2]|0;
 $5 = (($4) + -12|0);
 $6 = HEAP32[$5>>2]|0;
 $$sum$i = (($6) + 24)|0;
 $7 = (($__os) + ($$sum$i)|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = HEAP32[$__os>>2]|0;
 $10 = (($9) + -12|0);
 $11 = HEAP32[$10>>2]|0;
 $$sum = (($11) + 4)|0;
 $12 = (($__os) + ($$sum)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 176;
 $15 = ($14|0)==(32);
 if ($15) {
  $16 = (($__str) + ($__len)|0);
  $33 = $16;
 } else {
  $33 = $__str;
 }
 $17 = HEAP32[$__os>>2]|0;
 $18 = (($17) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($__os) + ($19)|0);
 $$sum2 = (($19) + 76)|0;
 $21 = (($__os) + ($$sum2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii(-1,$22)|0);
 if ($23) {
  __ZNKSt3__18ios_base6getlocEv($$byval_copy,$20);
  $24 = (__ZNKSt3__16locale9use_facetERNS0_2idE($$byval_copy,6704)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + 28|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (FUNCTION_TABLE_iii[$27 & 15]($24,32)|0);
  __ZNSt3__16localeD2Ev($$byval_copy);
  $29 = $28 << 24 >> 24;
  HEAP32[$21>>2] = $29;
 }
 $30 = HEAP32[$21>>2]|0;
 $31 = $30&255;
 $32 = (($__str) + ($__len)|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($1,$$byval_copy,$__str,$33,$32,$20,$31);
 $34 = HEAP32[$1>>2]|0;
 $35 = ($34|0)==(0|0);
 if (!($35)) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
  STACKTOP = sp;return ($__os|0);
 }
 $36 = HEAP32[$__os>>2]|0;
 $37 = (($36) + -12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($__os) + ($38)|0);
 $$sum3 = (($38) + 16)|0;
 $40 = (($__os) + ($$sum3)|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $41 | 5;
 __ZNSt3__18ios_base5clearEj($39,$42);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;return ($__os|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$0$ph = 0, $__p$02 = 0, $scevgep5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $__first;
 $1 = sp;
 $2 = $__last;
 $3 = (($2) - ($0))|0;
 $4 = ($3>>>0)>(4294967279);
 if ($4) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $5 = ($3>>>0)<(11);
 if ($5) {
  $6 = $3 << 1;
  $7 = $6&255;
  HEAP8[$this>>0] = $7;
  $8 = (($this) + 1|0);
  $__p$0$ph = $8;
 } else {
  $9 = (($3) + 16)|0;
  $10 = $9 & -16;
  $11 = (__Znwj($10)|0);
  $12 = (($this) + 8|0);
  HEAP32[$12>>2] = $11;
  $13 = $10 | 1;
  HEAP32[$this>>2] = $13;
  $14 = (($this) + 4|0);
  HEAP32[$14>>2] = $3;
  $__p$0$ph = $11;
 }
 $15 = ($__first|0)==($__last|0);
 if ($15) {
  $__p$0$lcssa = $__p$0$ph;
  HEAP8[$1>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($__p$0$lcssa,$1);
  STACKTOP = sp;return;
 }
 $16 = $__last;
 $17 = (($16) - ($0))|0;
 $$03 = $__first;$__p$02 = $__p$0$ph;
 while(1) {
  __ZNSt3__111char_traitsIcE6assignERcRKc($__p$02,$$03);
  $18 = (($$03) + 1|0);
  $19 = (($__p$02) + 1|0);
  $20 = ($18|0)==($__last|0);
  if ($20) {
   break;
  } else {
   $$03 = $18;$__p$02 = $19;
  }
 }
 $scevgep5 = (($__p$0$ph) + ($17)|0);
 $__p$0$lcssa = $scevgep5;
 HEAP8[$1>>0] = 0;
 __ZNSt3__111char_traitsIcE6assignERcRKc($__p$0$lcssa,$1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEE8max_sizeEv($this)|0);
 $1 = ($0>>>0)<($__n>>>0);
 if ($1) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 } else {
  $2 = ($__n*24)|0;
  $3 = (__Znwj($2)|0);
  $4 = (($this) + 4|0);
  HEAP32[$4>>2] = $3;
  HEAP32[$this>>2] = $3;
  $5 = (($3) + (($__n*24)|0)|0);
  $6 = (($this) + 8|0);
  HEAP32[$6>>2] = $5;
  return;
 }
}
function __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $$pr = HEAP32[$0>>2]|0;
 $$0 = $__n;$1 = $$pr;
 while(1) {
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   __ZN6ikfast23IkSingleDOFSolutionBaseIdEC2Ev($1);
  }
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 24|0);
  HEAP32[$0>>2] = $4;
  $5 = (($$0) + -1)|0;
  $6 = ($5|0)==(0);
  if ($6) {
   break;
  } else {
   $$0 = $5;$1 = $4;
  }
 }
 return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv($this)|0);
 $1 = ($0>>>0)<($__n>>>0);
 if ($1) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 } else {
  $2 = $__n << 2;
  $3 = (__Znwj($2)|0);
  $4 = (($this) + 4|0);
  HEAP32[$4>>2] = $3;
  HEAP32[$this>>2] = $3;
  $5 = (($3) + ($__n<<2)|0);
  $6 = (($this) + 8|0);
  HEAP32[$6>>2] = $5;
  return;
 }
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$promoted = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $$promoted = HEAP32[$0>>2]|0;
 $$0 = $__n;$1 = $$promoted;
 while(1) {
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   HEAP32[$1>>2] = 0;
  }
  $3 = (($1) + 4|0);
  $4 = (($$0) + -1)|0;
  $5 = ($4|0)==(0);
  if ($5) {
   break;
  } else {
   $$0 = $4;$1 = $3;
  }
 }
 $scevgep = (($$promoted) + ($__n<<2)|0);
 HEAP32[$0>>2] = $scevgep;
 return;
}
function __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__first|0)==($__last|0);
 if ($0) {
  return;
 }
 $1 = (($this) + 4|0);
 $$pr = HEAP32[$1>>2]|0;
 $$01 = $__first;$2 = $$pr;
 while(1) {
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   ;HEAP32[$2+0>>2]=HEAP32[$$01+0>>2]|0;HEAP32[$2+4>>2]=HEAP32[$$01+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$$01+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$$01+12>>2]|0;HEAP32[$2+16>>2]=HEAP32[$$01+16>>2]|0;HEAP32[$2+20>>2]=HEAP32[$$01+20>>2]|0;
  }
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + 24|0);
  HEAP32[$1>>2] = $5;
  $6 = (($$01) + 24|0);
  $7 = ($6|0)==($__last|0);
  if ($7) {
   break;
  } else {
   $$01 = $6;$2 = $5;
  }
 }
 return;
}
function __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEE10deallocateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($0|0);
 if (!($4)) {
  $scevgep$i$i$i = (($3) + -24|0);
  $5 = $scevgep$i$i$i;
  $__new_last2$i$i$i = $0;
  $6 = (($5) - ($__new_last2$i$i$i))|0;
  $7 = (($6>>>0) / 24)&-1;
  $8 = $7 ^ -1;
  $scevgep4$i$i$i = (($3) + (($8*24)|0)|0);
  HEAP32[$2>>2] = $scevgep4$i$i$i;
 }
 $9 = HEAP32[$this>>2]|0;
 __ZdlPv($9);
 $10 = (($this) + 8|0);
 HEAP32[$10>>2] = 0;
 HEAP32[$2>>2] = 0;
 HEAP32[$this>>2] = 0;
 return;
}
function __ZNKSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEE8max_sizeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 178956970;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE18__construct_at_endIPiEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$promoted = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__first3 = 0, $scevgep = 0, $scevgep5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__first|0)==($__last|0);
 if ($0) {
  return;
 }
 $__first3 = $__first;
 $1 = (($this) + 4|0);
 $$promoted = HEAP32[$1>>2]|0;
 $scevgep = (($__last) + -4|0);
 $2 = $scevgep;
 $3 = (($2) - ($__first3))|0;
 $4 = $3 >>> 2;
 $5 = (($4) + 1)|0;
 $$01 = $__first;$6 = $$promoted;
 while(1) {
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = HEAP32[$$01>>2]|0;
   HEAP32[$6>>2] = $8;
  }
  $9 = (($6) + 4|0);
  $10 = (($$01) + 4|0);
  $11 = ($10|0)==($__last|0);
  if ($11) {
   break;
  } else {
   $$01 = $10;$6 = $9;
  }
 }
 $scevgep5 = (($$promoted) + ($5<<2)|0);
 HEAP32[$1>>2] = $scevgep5;
 return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE10deallocateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($0|0);
 if (!($4)) {
  $scevgep$i$i$i = (($3) + -4|0);
  $5 = $scevgep$i$i$i;
  $__new_last2$i$i$i = $0;
  $6 = (($5) - ($__new_last2$i$i$i))|0;
  $7 = $6 >>> 2;
  $8 = $7 ^ -1;
  $scevgep4$i$i$i = (($3) + ($8<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i$i;
 }
 $9 = HEAP32[$this>>2]|0;
 __ZdlPv($9);
 $10 = (($this) + 8|0);
 HEAP32[$10>>2] = 0;
 HEAP32[$2>>2] = 0;
 HEAP32[$this>>2] = 0;
 return;
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1073741823;
}
function __ZN6ikfast14IkSolutionBaseIdEC2ERKS1_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((792 + 8|0));
 return;
}
function __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEEC2ERKS6_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (($__x) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$__x>>2]|0;
 $5 = ($3|0)==($4|0);
 if ($5) {
  return;
 }
 $6 = $3;
 $7 = $4;
 $8 = (($6) - ($7))|0;
 $9 = (($8|0) / 24)&-1;
 __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEE8allocateEj($this,$9);
 $10 = HEAP32[$__x>>2]|0;
 $11 = HEAP32[$2>>2]|0;
 __ZNSt3__16vectorIN6ikfast23IkSingleDOFSolutionBaseIdEENS_9allocatorIS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$10,$11);
 return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEEC2ERKS3_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (($__x) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$__x>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 2;
 $9 = ($8|0)==(0);
 if ($9) {
  return;
 }
 __ZNSt3__16vectorIiNS_9allocatorIiEEE8allocateEj($this,$8);
 $10 = HEAP32[$__x>>2]|0;
 $11 = HEAP32[$2>>2]|0;
 __ZNSt3__16vectorIiNS_9allocatorIiEEE18__construct_at_endIPiEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_($this,$10,$11);
 return;
}
function __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC2EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 if ($2) {
  $5 = 0;
 } else {
  $3 = $__cap << 3;
  $4 = (__Znwj($3)|0);
  $5 = $4;
 }
 HEAP32[$this>>2] = $5;
 $6 = (($5) + ($__start<<3)|0);
 $7 = (($this) + 8|0);
 HEAP32[$7>>2] = $6;
 $8 = (($this) + 4|0);
 HEAP32[$8>>2] = $6;
 $9 = HEAP32[$this>>2]|0;
 $10 = (($9) + ($__cap<<3)|0);
 $11 = (($this) + 12|0);
 HEAP32[$11>>2] = $10;
 return;
}
function __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$promoted = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $$promoted = HEAP32[$0>>2]|0;
 $$0 = $__n;$1 = $$promoted;
 while(1) {
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   HEAPF64[$1>>3] = 0.0;
  }
  $3 = (($1) + 8|0);
  $4 = (($$0) + -1)|0;
  $5 = ($4|0)==(0);
  if ($5) {
   break;
  } else {
   $$0 = $4;$1 = $3;
  }
 }
 $scevgep = (($$promoted) + ($__n<<3)|0);
 HEAP32[$0>>2] = $scevgep;
 return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($__v) + 4|0);
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 3;
 $8 = HEAP32[$3>>2]|0;
 $9 = (0 - ($7))|0;
 $10 = (($8) + ($9<<3)|0);
 HEAP32[$3>>2] = $10;
 _memcpy(($10|0),($0|0),($6|0))|0;
 $11 = HEAP32[$this>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $12;
 HEAP32[$3>>2] = $11;
 $13 = (($__v) + 8|0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$13>>2]|0;
 HEAP32[$1>>2] = $15;
 HEAP32[$13>>2] = $14;
 $16 = (($this) + 8|0);
 $17 = (($__v) + 12|0);
 $18 = HEAP32[$16>>2]|0;
 $19 = HEAP32[$17>>2]|0;
 HEAP32[$16>>2] = $19;
 HEAP32[$17>>2] = $18;
 $20 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $20;
 return;
}
function __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $scevgep$i$i$i = (($3) + -8|0);
  $5 = $scevgep$i$i$i;
  $__new_last2$i$i$i = $1;
  $6 = (($5) - ($__new_last2$i$i$i))|0;
  $7 = $6 >>> 3;
  $8 = $7 ^ -1;
  $scevgep4$i$i$i = (($3) + ($8<<3)|0);
  HEAP32[$2>>2] = $scevgep4$i$i$i;
 }
 $9 = HEAP32[$this>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  return;
 }
 __ZdlPv($9);
 return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$promoted = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $$promoted = HEAP32[$0>>2]|0;
 $$0 = $__n;$1 = $$promoted;
 while(1) {
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   HEAP32[$1>>2] = 0;
  }
  $3 = (($1) + 4|0);
  $4 = (($$0) + -1)|0;
  $5 = ($4|0)==(0);
  if ($5) {
   break;
  } else {
   $$0 = $4;$1 = $3;
  }
 }
 $scevgep = (($$promoted) + ($__n<<2)|0);
 HEAP32[$0>>2] = $scevgep;
 return;
}
function __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$promoted = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $$promoted = HEAP32[$0>>2]|0;
 $$0 = $__n;$1 = $$promoted;
 while(1) {
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   HEAP32[$1>>2] = 0;
  }
  $3 = (($1) + 4|0);
  $4 = (($$0) + -1)|0;
  $5 = ($4|0)==(0);
  if ($5) {
   break;
  } else {
   $$0 = $4;$1 = $3;
  }
 }
 $scevgep = (($$promoted) + ($__n<<2)|0);
 HEAP32[$0>>2] = $scevgep;
 return;
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$agg$result>>2] = $0;
  STACKTOP = sp;return;
 }
 $2 = $__oe;
 $3 = $__ob;
 $4 = (($2) - ($3))|0;
 $5 = (($__iob) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>($4|0);
 $8 = (($6) - ($4))|0;
 $__ns$0 = $7 ? $8 : 0;
 $9 = $__op;
 $10 = (($9) - ($3))|0;
 $11 = ($10|0)>(0);
 if ($11) {
  $12 = HEAP32[$0>>2]|0;
  $13 = (($12) + 48|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (FUNCTION_TABLE_iiii[$14 & 31]($0,$__ob,$10)|0);
  $16 = ($15|0)==($10|0);
  if (!($16)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $17 = ($__ns$0|0)>(0);
 do {
  if ($17) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($__sp,$__ns$0,$__fl);
   $18 = HEAP32[$__s>>2]|0;
   $19 = HEAP8[$__sp>>0]|0;
   $20 = $19 & 1;
   $21 = ($20<<24>>24)==(0);
   if ($21) {
    $24 = (($__sp) + 1|0);
    $28 = $24;
   } else {
    $22 = (($__sp) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $28 = $23;
   }
   $25 = HEAP32[$18>>2]|0;
   $26 = (($25) + 48|0);
   $27 = HEAP32[$26>>2]|0;
   $29 = (FUNCTION_TABLE_iiii[$27 & 31]($18,$28,$__ns$0)|0);
   $30 = ($29|0)==($__ns$0|0);
   if ($30) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
    break;
   }
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sp);
   STACKTOP = sp;return;
  }
 } while(0);
 $31 = (($2) - ($9))|0;
 $32 = ($31|0)>(0);
 if ($32) {
  $33 = HEAP32[$__s>>2]|0;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 48|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_iiii[$36 & 31]($33,$__op,$31)|0);
  $38 = ($37|0)==($31|0);
  if (!($38)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$5>>2] = 0;
 $39 = HEAP32[$__s>>2]|0;
 HEAP32[$agg$result>>2] = $39;
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE6assignERcRKc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__c2>>0]|0;
 HEAP8[$__c1>>0] = $0;
 return;
}
function __ZN6ikfast23IkSingleDOFSolutionBaseIdEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 ;HEAP32[$this+0>>2]=0|0;HEAP32[$this+4>>2]=0|0;HEAP32[$this+8>>2]=0|0;HEAP32[$this+12>>2]=0|0;
 HEAP8[$0>>0] = -1;
 $1 = (($this) + 18|0);
 HEAP8[$1>>0] = 1;
 $2 = (($this) + 19|0);
 ;HEAP8[$2+0>>0]=255|0;HEAP8[$2+1>>0]=255|0;HEAP8[$2+2>>0]=255|0;HEAP8[$2+3>>0]=255|0;HEAP8[$2+4>>0]=255|0;
 return;
}
function _strtoull_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoull($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = $1;
 return ($0|0);
}
function _strtoll_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoll($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = $1;
 return ($0|0);
}
function _isdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $0 = $isdigit&1;
 return ($0|0);
}
function _isxdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isxdigit($c)|0);
 return ($0|0);
}
function _mbrlen($s,$n,$st) {
 $s = $s|0;
 $n = $n|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)!=(0|0);
 $1 = $0 ? $st : 1752;
 $2 = (_mbrtowc(0,$s,$n,$1)|0);
 return ($2|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$023 = 0, $$1 = 0, $$lcssa = 0, $$lcssa24 = 0, $$st = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$04 = 0, $c$1 = 0, $c$2 = 0, $s$05 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($st|0)==(0|0);
 $$st = $1 ? 1760 : $st;
 $2 = HEAP32[$$st>>2]|0;
 $3 = ($src|0)==(0|0);
 L1: do {
  if ($3) {
   $4 = ($2|0)==(0);
   if ($4) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $5 = ($wc|0)==(0|0);
   if ($5) {
    HEAP32[$0>>2] = $0;
    $11 = $0;
   } else {
    $11 = $wc;
   }
   $6 = ($n|0)==(0);
   if ($6) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $7 = ($2|0)==(0);
   do {
    if ($7) {
     $8 = HEAP8[$src>>0]|0;
     $9 = $8&255;
     $10 = ($8<<24>>24)>(-1);
     if ($10) {
      HEAP32[$11>>2] = $9;
      $12 = ($8<<24>>24)!=(0);
      $13 = $12&1;
      $$0 = $13;
      STACKTOP = sp;return ($$0|0);
     } else {
      $14 = (($9) + -194)|0;
      $15 = ($14>>>0)>(50);
      if ($15) {
       break L1;
      }
      $16 = (($src) + 1|0);
      $17 = (1544 + ($14<<2)|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = (($n) + -1)|0;
      $20 = ($19|0)==(0);
      if ($20) {
       $c$2 = $18;
       break;
      } else {
       $$023 = $19;$c$04 = $18;$s$05 = $16;
       label = 11;
       break;
      }
     }
    } else {
     $$023 = $n;$c$04 = $2;$s$05 = $src;
     label = 11;
    }
   } while(0);
   L16: do {
    if ((label|0) == 11) {
     $21 = HEAP8[$s$05>>0]|0;
     $22 = $21&255;
     $23 = $22 >>> 3;
     $24 = (($23) + -16)|0;
     $25 = $c$04 >> 26;
     $26 = (($23) + ($25))|0;
     $27 = $24 | $26;
     $28 = ($27>>>0)>(7);
     if ($28) {
      break L1;
     } else {
      $$1 = $$023;$32 = $21;$c$1 = $c$04;$s$1 = $s$05;
     }
     while(1) {
      $29 = $c$1 << 6;
      $30 = (($s$1) + 1|0);
      $31 = $32&255;
      $33 = (($31) + -128)|0;
      $34 = $33 | $29;
      $35 = (($$1) + -1)|0;
      $36 = ($34|0)<(0);
      if (!($36)) {
       $$lcssa = $34;$$lcssa24 = $35;
       break;
      }
      $38 = ($35|0)==(0);
      if ($38) {
       $c$2 = $34;
       break L16;
      }
      $39 = HEAP8[$30>>0]|0;
      $40 = $39 & -64;
      $41 = ($40<<24>>24)==(-128);
      if ($41) {
       $$1 = $35;$32 = $39;$c$1 = $34;$s$1 = $30;
      } else {
       break L1;
      }
     }
     HEAP32[$$st>>2] = 0;
     HEAP32[$11>>2] = $$lcssa;
     $37 = (($n) - ($$lcssa24))|0;
     $$0 = $37;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   HEAP32[$$st>>2] = $c$2;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$$st>>2] = 0;
 $42 = (___errno_location()|0);
 HEAP32[$42>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _mbsnrtowcs($wcs,$src,$n,$wn,$st) {
 $wcs = $wcs|0;
 $src = $src|0;
 $n = $n|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0$lcssa = 0, $$014$ = 0, $$014$lcssa = 0, $$01428 = 0, $$031 = 0, $$115 = 0, $$2 = 0, $$3 = 0, $$lcssa = 0, $$old4 = 0, $$old7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0$lcssa = 0, $cnt$029 = 0, $cnt$2 = 0, $cnt$2$lcssa = 0, $cnt$3 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond13 = 0, $or$cond27 = 0, $or$cond5 = 0, $or$cond8 = 0, $s = 0, $wbuf = 0, $wcs$ = 0, $wn$ = 0, $ws$0$lcssa = 0;
 var $ws$030 = 0, $ws$1 = 0, $ws$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0;
 $wbuf = sp + 8|0;
 $s = sp;
 $0 = HEAP32[$src>>2]|0;
 HEAP32[$s>>2] = $0;
 $1 = ($wcs|0)!=(0|0);
 $wn$ = $1 ? $wn : 256;
 $wcs$ = $1 ? $wcs : $wbuf;
 $2 = ($0|0)!=(0|0);
 $3 = ($wn$|0)!=(0);
 $or$cond27 = $3 & $2;
 L1: do {
  if ($or$cond27) {
   $$01428 = $wn$;$$031 = $n;$32 = $0;$cnt$029 = 0;$ws$030 = $wcs$;
   while(1) {
    $4 = $$031 >>> 2;
    $5 = ($4>>>0)>=($$01428>>>0);
    $6 = ($$031>>>0)>(131);
    $or$cond13 = $6 | $5;
    if (!($or$cond13)) {
     $$0$lcssa = $$031;$$014$lcssa = $$01428;$17 = $32;$cnt$0$lcssa = $cnt$029;$ws$0$lcssa = $ws$030;
     label = 7;
     break L1;
    }
    $$014$ = $5 ? $$01428 : $4;
    $7 = (($$031) - ($$014$))|0;
    $8 = (_mbsrtowcs($ws$030,$s,$$014$,$st)|0);
    $9 = ($8|0)==(-1);
    if ($9) {
     $cnt$3 = -1;
     break L1;
    }
    $10 = ($ws$030|0)==($wbuf|0);
    if ($10) {
     $$115 = $$01428;$ws$1 = $wbuf;
    } else {
     $11 = (($ws$030) + ($8<<2)|0);
     $12 = (($$01428) - ($8))|0;
     $$115 = $12;$ws$1 = $11;
    }
    $13 = (($8) + ($cnt$029))|0;
    $14 = HEAP32[$s>>2]|0;
    $15 = ($14|0)!=(0|0);
    $16 = ($$115|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$01428 = $$115;$$031 = $7;$32 = $14;$cnt$029 = $13;$ws$030 = $ws$1;
    } else {
     $$0$lcssa = $7;$$014$lcssa = $$115;$17 = $14;$cnt$0$lcssa = $13;$ws$0$lcssa = $ws$1;
     label = 7;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$014$lcssa = $wn$;$17 = $0;$cnt$0$lcssa = 0;$ws$0$lcssa = $wcs$;
   label = 7;
  }
 } while(0);
 L9: do {
  if ((label|0) == 7) {
   $18 = ($17|0)!=(0|0);
   $19 = ($$014$lcssa|0)!=(0);
   $or$cond5 = $19 & $18;
   $20 = ($$0$lcssa|0)!=(0);
   $or$cond8 = $20 & $or$cond5;
   if ($or$cond8) {
    $$2 = $$0$lcssa;$$3 = $$014$lcssa;$21 = $17;$cnt$2 = $cnt$0$lcssa;$ws$2 = $ws$0$lcssa;
    while(1) {
     $22 = (_mbrtowc($ws$2,$21,$$2,$st)|0);
     $23 = (($22) + 2)|0;
     $24 = ($23>>>0)<(3);
     if ($24) {
      $$lcssa = $22;$cnt$2$lcssa = $cnt$2;
      break;
     }
     $25 = HEAP32[$s>>2]|0;
     $26 = (($25) + ($22)|0);
     HEAP32[$s>>2] = $26;
     $27 = (($$2) - ($22))|0;
     $28 = (($ws$2) + 4|0);
     $29 = (($$3) + -1)|0;
     $30 = (($cnt$2) + 1)|0;
     $$old4 = ($29|0)!=(0);
     $$old7 = ($$2|0)!=($22|0);
     $or$cond10 = $$old4 & $$old7;
     if ($or$cond10) {
      $$2 = $27;$$3 = $29;$21 = $26;$cnt$2 = $30;$ws$2 = $28;
     } else {
      $cnt$3 = $30;
      break L9;
     }
    }
    if ((($$lcssa|0) == 0)) {
     HEAP32[$s>>2] = 0;
     $cnt$3 = $cnt$2$lcssa;
     break;
    } else if ((($$lcssa|0) == -1)) {
     $cnt$3 = -1;
     break;
    } else {
     HEAP32[$st>>2] = 0;
     $cnt$3 = $cnt$2$lcssa;
     break;
    }
   } else {
    $cnt$3 = $cnt$0$lcssa;
   }
  }
 } while(0);
 if (!($1)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $31 = HEAP32[$s>>2]|0;
 HEAP32[$src>>2] = $31;
 STACKTOP = sp;return ($cnt$3|0);
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0 = 0, $$02$ph = 0, $$0219 = 0, $$03 = 0, $$1 = 0, $$1$lcssa = 0, $$14$lcssa = 0, $$1415 = 0, $$2 = 0, $$2$lcssa = 0, $$25 = 0, $$25$lcssa = 0, $$3 = 0, $$36 = 0, $$4 = 0, $$434 = 0, $$47$ph = 0, $$4718 = 0, $$48 = 0, $$5 = 0;
 var $$5$lcssa = 0, $$6 = 0, $$6$lcssa = 0, $$7 = 0, $$8 = 0, $$833 = 0, $$in = 0, $$lcssa55 = 0, $$lcssa59 = 0, $$lcssa61 = 0, $$lcssa62 = 0, $$lcssa63 = 0, $$lcssa67 = 0, $$old1 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $or$cond = 0, $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0, $s$1035 = 0, $s$109 = 0, $s$116 = 0, $s$2 = 0, $s$2$lcssa = 0, $s$3 = 0, $s$4 = 0, $s$5$lcssa = 0, $s$5$ph = 0;
 var $s$520 = 0, $s$6 = 0, $s$6$lcssa = 0, $s$7 = 0, $s$7$lcssa = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src>>2]|0;
 $1 = ($st|0)==(0|0);
 if ($1) {
  label = 5;
 } else {
  $2 = HEAP32[$st>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   label = 5;
  } else {
   $4 = ($ws|0)==(0|0);
   if ($4) {
    $$36 = $wn;$c$2 = $2;$s$3 = $0;
    label = 16;
   } else {
    HEAP32[$st>>2] = 0;
    $$3 = $ws;$$7 = $wn;$c$4 = $2;$s$8 = $0;
    label = 37;
   }
  }
 }
 if ((label|0) == 5) {
  $5 = ($ws|0)==(0|0);
  if ($5) {
   $$03 = $wn;$s$0 = $0;
   label = 7;
  } else {
   $$02$ph = $ws;$$47$ph = $wn;$s$5$ph = $0;
   label = 6;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $6 = ($$47$ph|0)==(0);
   if ($6) {
    $s$5$lcssa = $s$5$ph;
    label = 26;
    break;
   } else {
    $$0219 = $$02$ph;$$4718 = $$47$ph;$s$520 = $s$5$ph;
   }
   while(1) {
    $63 = HEAP8[$s$520>>0]|0;
    $64 = $63&255;
    $65 = (($64) + -1)|0;
    $66 = ($65>>>0)<(127);
    do {
     if ($66) {
      $67 = $s$520;
      $68 = $67 & 3;
      $69 = ($68|0)==(0);
      $70 = ($$4718>>>0)>(4);
      $or$cond = $70 & $69;
      if ($or$cond) {
       $$1 = $$0219;$$5 = $$4718;$s$6 = $s$520;
       while(1) {
        $71 = HEAP32[$s$6>>2]|0;
        $72 = (($71) + -16843009)|0;
        $73 = $72 | $71;
        $74 = $73 & -2139062144;
        $75 = ($74|0)==(0);
        if (!($75)) {
         $$1$lcssa = $$1;$$5$lcssa = $$5;$$lcssa59 = $71;$s$6$lcssa = $s$6;
         label = 32;
         break;
        }
        $76 = (($s$6) + 1|0);
        $77 = $71 & 255;
        $78 = (($$1) + 4|0);
        HEAP32[$$1>>2] = $77;
        $79 = (($s$6) + 2|0);
        $80 = HEAP8[$76>>0]|0;
        $81 = $80&255;
        $82 = (($$1) + 8|0);
        HEAP32[$78>>2] = $81;
        $83 = (($s$6) + 3|0);
        $84 = HEAP8[$79>>0]|0;
        $85 = $84&255;
        $86 = (($$1) + 12|0);
        HEAP32[$82>>2] = $85;
        $87 = (($s$6) + 4|0);
        $88 = HEAP8[$83>>0]|0;
        $89 = $88&255;
        $90 = (($$1) + 16|0);
        HEAP32[$86>>2] = $89;
        $91 = (($$5) + -4)|0;
        $$old1 = ($91>>>0)>(4);
        if ($$old1) {
         $$1 = $90;$$5 = $91;$s$6 = $87;
        } else {
         $$lcssa61 = $87;$$lcssa62 = $90;$$lcssa63 = $91;
         label = 31;
         break;
        }
       }
       if ((label|0) == 31) {
        label = 0;
        $$pre$pre = HEAP8[$$lcssa61>>0]|0;
        $$2 = $$lcssa62;$$6 = $$lcssa63;$94 = $$pre$pre;$s$7 = $$lcssa61;
        break;
       }
       else if ((label|0) == 32) {
        label = 0;
        $92 = $$lcssa59&255;
        $$2 = $$1$lcssa;$$6 = $$5$lcssa;$94 = $92;$s$7 = $s$6$lcssa;
        break;
       }
      } else {
       $$2 = $$0219;$$6 = $$4718;$94 = $63;$s$7 = $s$520;
      }
     } else {
      $$2 = $$0219;$$6 = $$4718;$94 = $63;$s$7 = $s$520;
     }
    } while(0);
    $93 = $94&255;
    $95 = (($93) + -1)|0;
    $96 = ($95>>>0)<(127);
    if (!($96)) {
     $$2$lcssa = $$2;$$6$lcssa = $$6;$$lcssa67 = $93;$s$7$lcssa = $s$7;
     break;
    }
    $97 = (($s$7) + 1|0);
    $98 = (($$2) + 4|0);
    HEAP32[$$2>>2] = $93;
    $99 = (($$6) + -1)|0;
    $100 = ($99|0)==(0);
    if ($100) {
     $s$5$lcssa = $97;
     label = 26;
     break L7;
    } else {
     $$0219 = $98;$$4718 = $99;$s$520 = $97;
    }
   }
   $101 = (($$lcssa67) + -194)|0;
   $102 = ($101>>>0)>(50);
   if ($102) {
    $$434 = $$2$lcssa;$$833 = $$6$lcssa;$s$1035 = $s$7$lcssa;
    label = 48;
    break;
   }
   $103 = (($s$7$lcssa) + 1|0);
   $104 = (1544 + ($101<<2)|0);
   $105 = HEAP32[$104>>2]|0;
   $$3 = $$2$lcssa;$$7 = $$6$lcssa;$c$4 = $105;$s$8 = $103;
   label = 37;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   $7 = HEAP8[$s$0>>0]|0;
   $8 = $7&255;
   $9 = (($8) + -1)|0;
   $10 = ($9>>>0)<(127);
   if ($10) {
    $11 = $s$0;
    $12 = $11 & 3;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = HEAP32[$s$0>>2]|0;
     $15 = (($14) + -16843009)|0;
     $16 = $15 | $14;
     $17 = $16 & -2139062144;
     $18 = ($17|0)==(0);
     if ($18) {
      $$1415 = $$03;$s$116 = $s$0;
      while(1) {
       $19 = (($s$116) + 4|0);
       $20 = (($$1415) + -4)|0;
       $21 = HEAP32[$19>>2]|0;
       $22 = (($21) + -16843009)|0;
       $23 = $22 | $21;
       $24 = $23 & -2139062144;
       $25 = ($24|0)==(0);
       if ($25) {
        $$1415 = $20;$s$116 = $19;
       } else {
        $$14$lcssa = $20;$$in = $21;$s$1$lcssa = $19;
        break;
       }
      }
     } else {
      $$14$lcssa = $$03;$$in = $14;$s$1$lcssa = $s$0;
     }
     $26 = $$in&255;
     $$25 = $$14$lcssa;$28 = $26;$s$2 = $s$1$lcssa;
    } else {
     $$25 = $$03;$28 = $7;$s$2 = $s$0;
    }
   } else {
    $$25 = $$03;$28 = $7;$s$2 = $s$0;
   }
   $27 = $28&255;
   $29 = (($27) + -1)|0;
   $30 = ($29>>>0)<(127);
   if ($30) {
    $31 = (($s$2) + 1|0);
    $32 = (($$25) + -1)|0;
    $$03 = $32;$s$0 = $31;
    label = 7;
    continue;
   } else {
    $$25$lcssa = $$25;$$lcssa55 = $27;$s$2$lcssa = $s$2;
   }
   $33 = (($$lcssa55) + -194)|0;
   $34 = ($33>>>0)>(50);
   if ($34) {
    $$434 = $ws;$$833 = $$25$lcssa;$s$1035 = $s$2$lcssa;
    label = 48;
    break;
   }
   $35 = (($s$2$lcssa) + 1|0);
   $36 = (1544 + ($33<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $$36 = $$25$lcssa;$c$2 = $37;$s$3 = $35;
   label = 16;
   continue;
  }
  else if ((label|0) == 16) {
   label = 0;
   $38 = HEAP8[$s$3>>0]|0;
   $39 = $38&255;
   $40 = $39 >>> 3;
   $41 = (($40) + -16)|0;
   $42 = $c$2 >> 26;
   $43 = (($40) + ($42))|0;
   $44 = $41 | $43;
   $45 = ($44>>>0)>(7);
   if ($45) {
    label = 17;
    break;
   }
   $47 = (($s$3) + 1|0);
   $48 = $c$2 & 33554432;
   $49 = ($48|0)==(0);
   if ($49) {
    $s$4 = $47;
   } else {
    $50 = HEAP8[$47>>0]|0;
    $51 = $50 & -64;
    $52 = ($51<<24>>24)==(-128);
    if (!($52)) {
     label = 20;
     break;
    }
    $54 = (($s$3) + 2|0);
    $55 = $c$2 & 524288;
    $56 = ($55|0)==(0);
    if ($56) {
     $s$4 = $54;
    } else {
     $57 = HEAP8[$54>>0]|0;
     $58 = $57 & -64;
     $59 = ($58<<24>>24)==(-128);
     if (!($59)) {
      label = 23;
      break;
     }
     $61 = (($s$3) + 3|0);
     $s$4 = $61;
    }
   }
   $62 = (($$36) + -1)|0;
   $$03 = $62;$s$0 = $s$4;
   label = 7;
   continue;
  }
  else if ((label|0) == 37) {
   label = 0;
   $106 = HEAP8[$s$8>>0]|0;
   $107 = $106&255;
   $108 = $107 >>> 3;
   $109 = (($108) + -16)|0;
   $110 = $c$4 >> 26;
   $111 = (($108) + ($110))|0;
   $112 = $109 | $111;
   $113 = ($112>>>0)>(7);
   if ($113) {
    label = 38;
    break;
   }
   $115 = $c$4 << 6;
   $116 = (($s$8) + 1|0);
   $117 = (($107) + -128)|0;
   $118 = $117 | $115;
   $119 = ($118|0)<(0);
   if ($119) {
    $120 = HEAP8[$116>>0]|0;
    $121 = $120&255;
    $122 = $121 & 192;
    $123 = ($122|0)==(128);
    if (!($123)) {
     label = 41;
     break;
    }
    $125 = $118 << 6;
    $126 = (($s$8) + 2|0);
    $127 = (($121) + -128)|0;
    $128 = $127 | $125;
    $129 = ($128|0)<(0);
    if ($129) {
     $130 = HEAP8[$126>>0]|0;
     $131 = $130&255;
     $132 = $131 & 192;
     $133 = ($132|0)==(128);
     if (!($133)) {
      label = 44;
      break;
     }
     $135 = $128 << 6;
     $136 = (($s$8) + 3|0);
     $137 = (($131) + -128)|0;
     $138 = $137 | $135;
     $c$5 = $138;$s$9 = $136;
    } else {
     $c$5 = $128;$s$9 = $126;
    }
   } else {
    $c$5 = $118;$s$9 = $116;
   }
   $139 = (($$3) + 4|0);
   HEAP32[$$3>>2] = $c$5;
   $140 = (($$7) + -1)|0;
   $$02$ph = $139;$$47$ph = $140;$s$5$ph = $s$9;
   label = 6;
   continue;
  }
 }
 if ((label|0) == 17) {
  $46 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $46;
  label = 47;
 }
 else if ((label|0) == 20) {
  $53 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $53;
  label = 47;
 }
 else if ((label|0) == 23) {
  $60 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $60;
  label = 47;
 }
 else if ((label|0) == 26) {
  HEAP32[$src>>2] = $s$5$lcssa;
  $$0 = $wn;
  return ($$0|0);
 }
 else if ((label|0) == 38) {
  $114 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $c$4;$s$10 = $114;
  label = 47;
 }
 else if ((label|0) == 41) {
  $124 = (($s$8) + -1|0);
  $$48 = $$3;$s$109 = $124;
 }
 else if ((label|0) == 44) {
  $134 = (($s$8) + -1|0);
  $$48 = $$3;$s$109 = $134;
 }
 if ((label|0) == 47) {
  $141 = ($c$6|0)==(0);
  if ($141) {
   $$434 = $$4;$$833 = $$8;$s$1035 = $s$10;
   label = 48;
  } else {
   $$48 = $$4;$s$109 = $s$10;
  }
 }
 if ((label|0) == 48) {
  $142 = HEAP8[$s$1035>>0]|0;
  $143 = ($142<<24>>24)==(0);
  if ($143) {
   $144 = ($$434|0)==(0|0);
   if (!($144)) {
    HEAP32[$$434>>2] = 0;
    HEAP32[$src>>2] = 0;
   }
   $145 = (($wn) - ($$833))|0;
   $$0 = $145;
   return ($$0|0);
  } else {
   $$48 = $$434;$s$109 = $s$1035;
  }
 }
 $146 = (___errno_location()|0);
 HEAP32[$146>>2] = 84;
 $147 = ($$48|0)==(0|0);
 if ($147) {
  $$0 = -1;
  return ($$0|0);
 }
 HEAP32[$src>>2] = $s$109;
 $$0 = -1;
 return ($$0|0);
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($src|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($n|0)==(0);
 do {
  if (!($2)) {
   $3 = ($wc|0)==(0|0);
   if ($3) {
    HEAP32[$0>>2] = $0;
    $7 = $0;
   } else {
    $7 = $wc;
   }
   $4 = HEAP8[$src>>0]|0;
   $5 = $4&255;
   $6 = ($4<<24>>24)>(-1);
   if ($6) {
    HEAP32[$7>>2] = $5;
    $8 = ($4<<24>>24)!=(0);
    $9 = $8&1;
    $$0 = $9;
    STACKTOP = sp;return ($$0|0);
   }
   $10 = (($5) + -194)|0;
   $11 = ($10>>>0)>(50);
   if (!($11)) {
    $12 = (($src) + 1|0);
    $13 = (1544 + ($10<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($n>>>0)<(4);
    if ($15) {
     $16 = ($n*6)|0;
     $17 = (($16) + -6)|0;
     $18 = -2147483648 >>> $17;
     $19 = $14 & $18;
     $20 = ($19|0)==(0);
     if (!($20)) {
      break;
     }
    }
    $21 = HEAP8[$12>>0]|0;
    $22 = $21&255;
    $23 = $22 >>> 3;
    $24 = (($23) + -16)|0;
    $25 = $14 >> 26;
    $26 = (($23) + ($25))|0;
    $27 = $24 | $26;
    $28 = ($27>>>0)>(7);
    if (!($28)) {
     $29 = $14 << 6;
     $30 = (($22) + -128)|0;
     $31 = $30 | $29;
     $32 = ($31|0)<(0);
     if (!($32)) {
      HEAP32[$7>>2] = $31;
      $$0 = 2;
      STACKTOP = sp;return ($$0|0);
     }
     $33 = (($src) + 2|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34&255;
     $36 = $35 & 192;
     $37 = ($36|0)==(128);
     if ($37) {
      $38 = $31 << 6;
      $39 = (($35) + -128)|0;
      $40 = $39 | $38;
      $41 = ($40|0)<(0);
      if (!($41)) {
       HEAP32[$7>>2] = $40;
       $$0 = 3;
       STACKTOP = sp;return ($$0|0);
      }
      $42 = (($src) + 3|0);
      $43 = HEAP8[$42>>0]|0;
      $44 = $43&255;
      $45 = $44 & 192;
      $46 = ($45|0)==(128);
      if ($46) {
       $47 = $40 << 6;
       $48 = (($44) + -128)|0;
       $49 = $48 | $47;
       HEAP32[$7>>2] = $49;
       $$0 = 4;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
   }
  }
 } while(0);
 $50 = (___errno_location()|0);
 HEAP32[$50>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _wcsnrtombs($dst,$wcs,$wn,$n,$st) {
 $dst = $dst|0;
 $wcs = $wcs|0;
 $wn = $wn|0;
 $n = $n|0;
 $st = $st|0;
 var $$0$lcssa = 0, $$014$$0 = 0, $$014$lcssa = 0, $$01428 = 0, $$031 = 0, $$115 = 0, $$2 = 0, $$3 = 0, $$lcssa = 0, $$old4 = 0, $$old7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $cnt$0$lcssa = 0, $cnt$029 = 0, $cnt$2 = 0, $cnt$2$lcssa = 0, $cnt$3 = 0, $dst$ = 0, $n$ = 0, $or$cond = 0, $or$cond10 = 0, $or$cond13 = 0, $or$cond27 = 0, $or$cond5 = 0, $or$cond8 = 0, $s$0$lcssa = 0;
 var $s$030 = 0, $s$1 = 0, $s$2 = 0, $ws = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $buf = sp + 8|0;
 $ws = sp;
 $0 = HEAP32[$wcs>>2]|0;
 HEAP32[$ws>>2] = $0;
 $1 = ($dst|0)!=(0|0);
 $n$ = $1 ? $n : 256;
 $dst$ = $1 ? $dst : $buf;
 $2 = ($0|0)!=(0|0);
 $3 = ($n$|0)!=(0);
 $or$cond27 = $3 & $2;
 L1: do {
  if ($or$cond27) {
   $$01428 = $n$;$$031 = $wn;$33 = $0;$cnt$029 = 0;$s$030 = $dst$;
   while(1) {
    $4 = ($$031>>>0)>=($$01428>>>0);
    $5 = ($$031>>>0)>(32);
    $or$cond13 = $4 | $5;
    if (!($or$cond13)) {
     $$0$lcssa = $$031;$$014$lcssa = $$01428;$16 = $33;$cnt$0$lcssa = $cnt$029;$s$0$lcssa = $s$030;
     label = 7;
     break L1;
    }
    $$014$$0 = $4 ? $$01428 : $$031;
    $6 = (($$031) - ($$014$$0))|0;
    $7 = (_wcsrtombs($s$030,$ws,$$014$$0,0)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     $cnt$3 = -1;
     break L1;
    }
    $9 = ($s$030|0)==($buf|0);
    if ($9) {
     $$115 = $$01428;$s$1 = $buf;
    } else {
     $10 = (($s$030) + ($7)|0);
     $11 = (($$01428) - ($7))|0;
     $$115 = $11;$s$1 = $10;
    }
    $12 = (($7) + ($cnt$029))|0;
    $13 = HEAP32[$ws>>2]|0;
    $14 = ($13|0)!=(0|0);
    $15 = ($$115|0)!=(0);
    $or$cond = $15 & $14;
    if ($or$cond) {
     $$01428 = $$115;$$031 = $6;$33 = $13;$cnt$029 = $12;$s$030 = $s$1;
    } else {
     $$0$lcssa = $6;$$014$lcssa = $$115;$16 = $13;$cnt$0$lcssa = $12;$s$0$lcssa = $s$1;
     label = 7;
     break;
    }
   }
  } else {
   $$0$lcssa = $wn;$$014$lcssa = $n$;$16 = $0;$cnt$0$lcssa = 0;$s$0$lcssa = $dst$;
   label = 7;
  }
 } while(0);
 L9: do {
  if ((label|0) == 7) {
   $17 = ($16|0)!=(0|0);
   $18 = ($$014$lcssa|0)!=(0);
   $or$cond5 = $18 & $17;
   $19 = ($$0$lcssa|0)!=(0);
   $or$cond8 = $19 & $or$cond5;
   if ($or$cond8) {
    $$2 = $$0$lcssa;$$3 = $$014$lcssa;$21 = $16;$cnt$2 = $cnt$0$lcssa;$s$2 = $s$0$lcssa;
    while(1) {
     $20 = HEAP32[$21>>2]|0;
     $22 = (_wcrtomb($s$2,$20,0)|0);
     $23 = (($22) + 1)|0;
     $24 = ($23>>>0)<(2);
     if ($24) {
      $$lcssa = $22;$cnt$2$lcssa = $cnt$2;
      break;
     }
     $26 = HEAP32[$ws>>2]|0;
     $27 = (($26) + 4|0);
     HEAP32[$ws>>2] = $27;
     $28 = (($$2) + -1)|0;
     $29 = (($s$2) + ($22)|0);
     $30 = (($$3) - ($22))|0;
     $31 = (($cnt$2) + 1)|0;
     $$old4 = ($$3|0)!=($22|0);
     $$old7 = ($28|0)!=(0);
     $or$cond10 = $$old7 & $$old4;
     if ($or$cond10) {
      $$2 = $28;$$3 = $30;$21 = $27;$cnt$2 = $31;$s$2 = $29;
     } else {
      $cnt$3 = $31;
      break L9;
     }
    }
    $25 = ($$lcssa|0)==(0);
    if ($25) {
     HEAP32[$ws>>2] = 0;
     $cnt$3 = $cnt$2$lcssa;
    } else {
     $cnt$3 = -1;
    }
   } else {
    $cnt$3 = $cnt$0$lcssa;
   }
  }
 } while(0);
 if (!($1)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $32 = HEAP32[$ws>>2]|0;
 HEAP32[$wcs>>2] = $32;
 STACKTOP = sp;return ($cnt$3|0);
}
function _wcsrtombs($s,$ws,$n,$st) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01$lcssa = 0, $$0129 = 0, $$0129$lcssa = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$223 = 0, $$223$lcssa = 0, $$24$lcssa = 0, $$2428 = 0, $$2428$lcssa = 0, $$3 = 0, $$35 = 0, $$422 = 0, $$422$lcssa = 0, $$422$lcssa63 = 0, $$5 = 0, $$pn = 0, $$pre = 0;
 var $$pre43 = 0, $$pre44 = 0, $$pre45 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $ws2$019 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $buf = sp;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $2 = HEAP32[$ws>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0);
  if ($4) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$0218 = 0;$5 = $3;$ws2$019 = $2;
  }
  while(1) {
   $6 = ($5>>>0)>(127);
   if ($6) {
    $7 = (_wcrtomb($buf,$5,0)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     $$0 = -1;
     label = 26;
     break;
    } else {
     $$pn = $7;
    }
   } else {
    $$pn = 1;
   }
   $$13 = (($$pn) + ($$0218))|0;
   $9 = (($ws2$019) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $$0 = $$13;
    label = 26;
    break;
   } else {
    $$0218 = $$13;$5 = $10;$ws2$019 = $9;
   }
  }
  if ((label|0) == 26) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1 = ($n>>>0)>(3);
 L14: do {
  if ($1) {
   $$pre = HEAP32[$ws>>2]|0;
   $$0129 = $s;$$2428 = $n;$14 = $$pre;
   while(1) {
    $13 = HEAP32[$14>>2]|0;
    $15 = (($13) + -1)|0;
    $16 = ($15>>>0)>(126);
    if ($16) {
     $17 = ($13|0)==(0);
     if ($17) {
      $$0129$lcssa = $$0129;$$2428$lcssa = $$2428;
      break;
     }
     $19 = (_wcrtomb($$0129,$13,0)|0);
     $20 = ($19|0)==(-1);
     if ($20) {
      $$0 = -1;
      label = 26;
      break;
     }
     $21 = (($$0129) + ($19)|0);
     $22 = (($$2428) - ($19))|0;
     $$1 = $21;$$35 = $22;$27 = $14;
    } else {
     $23 = $13&255;
     $24 = (($$0129) + 1|0);
     HEAP8[$$0129>>0] = $23;
     $25 = (($$2428) + -1)|0;
     $$pre43 = HEAP32[$ws>>2]|0;
     $$1 = $24;$$35 = $25;$27 = $$pre43;
    }
    $26 = (($27) + 4|0);
    HEAP32[$ws>>2] = $26;
    $28 = ($$35>>>0)>(3);
    if ($28) {
     $$0129 = $$1;$$2428 = $$35;$14 = $26;
    } else {
     $$01$lcssa = $$1;$$24$lcssa = $$35;
     break L14;
    }
   }
   if ((label|0) == 26) {
    STACKTOP = sp;return ($$0|0);
   }
   HEAP8[$$0129$lcssa>>0] = 0;
   HEAP32[$ws>>2] = 0;
   $18 = (($n) - ($$2428$lcssa))|0;
   $$0 = $18;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$01$lcssa = $s;$$24$lcssa = $n;
  }
 } while(0);
 $12 = ($$24$lcssa|0)==(0);
 if ($12) {
  $$0 = $n;
  STACKTOP = sp;return ($$0|0);
 }
 $$pre44 = HEAP32[$ws>>2]|0;
 $$223 = $$01$lcssa;$$422 = $$24$lcssa;$30 = $$pre44;
 while(1) {
  $29 = HEAP32[$30>>2]|0;
  $31 = (($29) + -1)|0;
  $32 = ($31>>>0)>(126);
  if ($32) {
   $33 = ($29|0)==(0);
   if ($33) {
    $$223$lcssa = $$223;$$422$lcssa = $$422;
    label = 19;
    break;
   }
   $35 = (_wcrtomb($buf,$29,0)|0);
   $36 = ($35|0)==(-1);
   if ($36) {
    $$0 = -1;
    label = 26;
    break;
   }
   $37 = ($$422>>>0)<($35>>>0);
   if ($37) {
    $$422$lcssa63 = $$422;
    label = 22;
    break;
   }
   $39 = HEAP32[$30>>2]|0;
   (_wcrtomb($$223,$39,0)|0);
   $40 = (($$223) + ($35)|0);
   $41 = (($$422) - ($35))|0;
   $$3 = $40;$$5 = $41;$46 = $30;
  } else {
   $42 = $29&255;
   $43 = (($$223) + 1|0);
   HEAP8[$$223>>0] = $42;
   $44 = (($$422) + -1)|0;
   $$pre45 = HEAP32[$ws>>2]|0;
   $$3 = $43;$$5 = $44;$46 = $$pre45;
  }
  $45 = (($46) + 4|0);
  HEAP32[$ws>>2] = $45;
  $47 = ($$5|0)==(0);
  if ($47) {
   $$0 = $n;
   label = 26;
   break;
  } else {
   $$223 = $$3;$$422 = $$5;$30 = $45;
  }
 }
 if ((label|0) == 19) {
  HEAP8[$$223$lcssa>>0] = 0;
  HEAP32[$ws>>2] = 0;
  $34 = (($n) - ($$422$lcssa))|0;
  $$0 = $34;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 22) {
  $38 = (($n) - ($$422$lcssa63))|0;
  $$0 = $38;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 26) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $k$0 = $2;
 } else {
  $5 = $3;
  $6 = $1;
  $7 = (($5) - ($6))|0;
  $k$0 = $7;
 }
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = (($f) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = (($f) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 return ($k$0$len|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vasprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap2 = sp;
 $0 = (_malloc(240)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $$0 = -1;
  } else {
   $vacopy_currentptr = HEAP32[$ap>>2]|0;
   HEAP32[$ap2>>2] = $vacopy_currentptr;
   $2 = (_vsnprintf($0,240,$fmt,$ap2)|0);
   $3 = ($2>>>0)<(240);
   if ($3) {
    $4 = (($2) + 1)|0;
    $5 = (_realloc($0,$4)|0);
    $6 = ($5|0)!=(0|0);
    $7 = $6 ? $5 : $0;
    HEAP32[$s>>2] = $7;
    $$0 = $2;
    break;
   }
   _free($0);
   $8 = ($2|0)<(0);
   if ($8) {
    $$0 = -1;
   } else {
    $9 = (($2) + 1)|0;
    $10 = (_malloc($9)|0);
    HEAP32[$s>>2] = $10;
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$0 = -1;
    } else {
     $12 = (_vsnprintf($10,$9,$fmt,$ap)|0);
     $$0 = $12;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _MUSL_vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$13 = 0, $$8 = 0, $$lcssa = 0, $$lcssa366 = 0, $$lcssa39 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi223Z2D = 0, $$pre209 = 0, $$pre211 = 0, $$pre215 = 0, $$pre217 = 0, $$pre218 = 0, $$pre220 = 0, $$pre221 = 0;
 var $$pre222 = 0, $$size$0 = 0, $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0.0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0.0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0204 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$0101 = 0, $dest$0 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0;
 var $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $factor = 0, $factor17 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$lcssa = 0, $i$0$ph21 = 0, $i$0$ph21$lcssa = 0, $i$0$ph21$us106 = 0, $i$1$lcssa = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0;
 var $isdigit = 0, $isdigit7 = 0, $isdigit796 = 0, $isdigittmp = 0, $isdigittmp6 = 0, $isdigittmp695 = 0, $k$0$ph = 0, $k$1$ph = 0, $matches$0$ = 0, $matches$0111 = 0, $matches$0111$lcssa = 0, $matches$0111347 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond$us = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond9 = 0;
 var $p$0117 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$397 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0116 = 0, $pos$1 = 0, $pos$2 = 0, $s$0109 = 0, $s$0109$lcssa = 0;
 var $s$1 = 0, $s$2$ph = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $scanset = 0, $size$0 = 0, $st = 0, $vacopy_currentptr = 0, $wc = 0, $wcs$0110 = 0, $wcs$0110$lcssa = 0, $wcs$1 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$3$ph139 = 0;
 var $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$098 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = HEAP8[$fmt>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $matches$3 = 0;
  STACKTOP = sp;return ($matches$3|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 $5 = (($f) + 108|0);
 $6 = (($f) + 8|0);
 $7 = (($scanset) + 10|0);
 $8 = (($scanset) + 33|0);
 $9 = (($st) + 4|0);
 $10 = (($scanset) + 46|0);
 $11 = (($scanset) + 94|0);
 $13 = $1;$matches$0111 = 0;$p$0117 = $fmt;$pos$0116 = 0;$s$0109 = 0;$wcs$0110 = 0;
 L4: while(1) {
  $12 = $13&255;
  $14 = (_isspace($12)|0);
  $15 = ($14|0)==(0);
  L6: do {
   if ($15) {
    $42 = HEAP8[$p$0117>>0]|0;
    $43 = ($42<<24>>24)==(37);
    L21: do {
     if ($43) {
      $44 = (($p$0117) + 1|0);
      $45 = HEAP8[$44>>0]|0;
      do {
       if ((($45<<24>>24) == 37)) {
        break L21;
       } else if ((($45<<24>>24) == 42)) {
        $66 = (($p$0117) + 2|0);
        $dest$0 = 0;$p$2 = $66;
       } else {
        $67 = $45&255;
        $isdigittmp = (($67) + -48)|0;
        $isdigit = ($isdigittmp>>>0)<(10);
        if ($isdigit) {
         $68 = (($p$0117) + 2|0);
         $69 = HEAP8[$68>>0]|0;
         $70 = ($69<<24>>24)==(36);
         if ($70) {
          $vacopy_currentptr = HEAP32[$ap>>2]|0;
          HEAP32[$ap2$i>>2] = $vacopy_currentptr;
          $i$0$i = $isdigittmp;
          while(1) {
           $71 = ($i$0$i>>>0)>(1);
           $arglist_current = HEAP32[$ap2$i>>2]|0;
           $72 = $arglist_current;
           $73 = (0 + 4|0);
           $expanded4 = $73;
           $expanded = (($expanded4) - 1)|0;
           $74 = (($72) + ($expanded))|0;
           $75 = (0 + 4|0);
           $expanded8 = $75;
           $expanded7 = (($expanded8) - 1)|0;
           $expanded6 = $expanded7 ^ -1;
           $76 = $74 & $expanded6;
           $77 = $76;
           $78 = HEAP32[$77>>2]|0;
           $arglist_next = (($77) + 4|0);
           HEAP32[$ap2$i>>2] = $arglist_next;
           $79 = (($i$0$i) + -1)|0;
           if ($71) {
            $i$0$i = $79;
           } else {
            $$lcssa = $78;
            break;
           }
          }
          $80 = (($p$0117) + 3|0);
          $dest$0 = $$lcssa;$p$2 = $80;
          break;
         }
        }
        $arglist_current2 = HEAP32[$ap>>2]|0;
        $81 = $arglist_current2;
        $82 = (0 + 4|0);
        $expanded11 = $82;
        $expanded10 = (($expanded11) - 1)|0;
        $83 = (($81) + ($expanded10))|0;
        $84 = (0 + 4|0);
        $expanded15 = $84;
        $expanded14 = (($expanded15) - 1)|0;
        $expanded13 = $expanded14 ^ -1;
        $85 = $83 & $expanded13;
        $86 = $85;
        $87 = HEAP32[$86>>2]|0;
        $arglist_next3 = (($86) + 4|0);
        HEAP32[$ap>>2] = $arglist_next3;
        $dest$0 = $87;$p$2 = $44;
       }
      } while(0);
      $88 = HEAP8[$p$2>>0]|0;
      $89 = $88&255;
      $isdigittmp695 = (($89) + -48)|0;
      $isdigit796 = ($isdigittmp695>>>0)<(10);
      if ($isdigit796) {
       $93 = $89;$p$397 = $p$2;$width$098 = 0;
       while(1) {
        $90 = ($width$098*10)|0;
        $91 = (($90) + -48)|0;
        $92 = (($91) + ($93))|0;
        $94 = (($p$397) + 1|0);
        $95 = HEAP8[$94>>0]|0;
        $96 = $95&255;
        $isdigittmp6 = (($96) + -48)|0;
        $isdigit7 = ($isdigittmp6>>>0)<(10);
        if ($isdigit7) {
         $93 = $96;$p$397 = $94;$width$098 = $92;
        } else {
         $$lcssa39 = $95;$p$3$lcssa = $94;$width$0$lcssa = $92;
         break;
        }
       }
      } else {
       $$lcssa39 = $88;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
      }
      $97 = ($$lcssa39<<24>>24)==(109);
      if ($97) {
       $98 = ($dest$0|0)!=(0|0);
       $99 = $98&1;
       $100 = (($p$3$lcssa) + 1|0);
       $$pre = HEAP8[$100>>0]|0;
       $103 = $$pre;$alloc$0 = $99;$p$4 = $100;$s$1 = 0;$wcs$1 = 0;
      } else {
       $103 = $$lcssa39;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0109;$wcs$1 = $wcs$0110;
      }
      $101 = (($p$4) + 1|0);
      $102 = $103&255;
      switch ($102|0) {
      case 104:  {
       $104 = HEAP8[$101>>0]|0;
       $105 = ($104<<24>>24)==(104);
       $106 = (($p$4) + 2|0);
       $$10 = $105 ? $106 : $101;
       $$11 = $105 ? -2 : -1;
       $p$5 = $$10;$size$0 = $$11;
       break;
      }
      case 108:  {
       $107 = HEAP8[$101>>0]|0;
       $108 = ($107<<24>>24)==(108);
       $109 = (($p$4) + 2|0);
       $$12 = $108 ? $109 : $101;
       $$13 = $108 ? 3 : 1;
       $p$5 = $$12;$size$0 = $$13;
       break;
      }
      case 116: case 122:  {
       $p$5 = $101;$size$0 = 1;
       break;
      }
      case 76:  {
       $p$5 = $101;$size$0 = 2;
       break;
      }
      case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
       $p$5 = $p$4;$size$0 = 0;
       break;
      }
      case 106:  {
       $p$5 = $101;$size$0 = 3;
       break;
      }
      default: {
       $alloc$0204 = $alloc$0;$matches$0111347 = $matches$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
       label = 163;
       break L4;
      }
      }
      $110 = HEAP8[$p$5>>0]|0;
      $111 = $110&255;
      $112 = $111 & 47;
      $113 = ($112|0)==(3);
      $114 = $111 | 32;
      $$ = $113 ? $114 : $111;
      $$size$0 = $113 ? 1 : $size$0;
      if ((($$|0) == 91)) {
       $pos$1 = $pos$0116;$width$1 = $width$0$lcssa;
      } else if ((($$|0) == 99)) {
       $115 = ($width$0$lcssa|0)<(1);
       $$width$0 = $115 ? 1 : $width$0$lcssa;
       $pos$1 = $pos$0116;$width$1 = $$width$0;
      } else if ((($$|0) == 110)) {
       $116 = ($pos$0116|0)<(0);
       $117 = $116 << 31 >> 31;
       $118 = ($dest$0|0)==(0|0);
       if ($118) {
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       switch ($$size$0|0) {
       case 3:  {
        $121 = $dest$0;
        $122 = $121;
        HEAP32[$122>>2] = $pos$0116;
        $123 = (($121) + 4)|0;
        $124 = $123;
        HEAP32[$124>>2] = $117;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case -2:  {
        $119 = $pos$0116&255;
        HEAP8[$dest$0>>0] = $119;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case -1:  {
        $120 = $pos$0116&65535;
        HEAP16[$dest$0>>1] = $120;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 0:  {
        HEAP32[$dest$0>>2] = $pos$0116;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 1:  {
        HEAP32[$dest$0>>2] = $pos$0116;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       default: {
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       }
      } else {
       ___shlim($f,0);
       while(1) {
        $125 = HEAP32[$3>>2]|0;
        $126 = HEAP32[$4>>2]|0;
        $127 = ($125>>>0)<($126>>>0);
        if ($127) {
         $128 = (($125) + 1|0);
         HEAP32[$3>>2] = $128;
         $129 = HEAP8[$125>>0]|0;
         $130 = $129&255;
         $132 = $130;
        } else {
         $131 = (___shgetc($f)|0);
         $132 = $131;
        }
        $133 = (_isspace($132)|0);
        $134 = ($133|0)==(0);
        if ($134) {
         break;
        }
       }
       $135 = HEAP32[$4>>2]|0;
       $136 = ($135|0)==(0|0);
       $$pre209 = HEAP32[$3>>2]|0;
       if ($136) {
        $140 = $$pre209;
       } else {
        $137 = (($$pre209) + -1|0);
        HEAP32[$3>>2] = $137;
        $140 = $137;
       }
       $138 = HEAP32[$5>>2]|0;
       $139 = HEAP32[$6>>2]|0;
       $141 = $140;
       $142 = $139;
       $143 = (($138) + ($pos$0116))|0;
       $144 = (($143) + ($141))|0;
       $145 = (($144) - ($142))|0;
       $pos$1 = $145;$width$1 = $width$0$lcssa;
      }
      ___shlim($f,$width$1);
      $146 = HEAP32[$3>>2]|0;
      $147 = HEAP32[$4>>2]|0;
      $148 = ($146>>>0)<($147>>>0);
      if ($148) {
       $149 = (($146) + 1|0);
       HEAP32[$3>>2] = $149;
       $152 = $147;
      } else {
       $150 = (___shgetc($f)|0);
       $151 = ($150|0)<(0);
       if ($151) {
        $alloc$0204 = $alloc$0;$matches$0111347 = $matches$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
        label = 163;
        break L4;
       }
       $$pre211 = HEAP32[$4>>2]|0;
       $152 = $$pre211;
      }
      $153 = ($152|0)==(0|0);
      if (!($153)) {
       $154 = HEAP32[$3>>2]|0;
       $155 = (($154) + -1|0);
       HEAP32[$3>>2] = $155;
      }
      L78: do {
       switch ($$|0) {
       case 91: case 99: case 115:  {
        $156 = ($$|0)==(99);
        $157 = $$ & 239;
        $158 = ($157|0)==(99);
        L80: do {
         if ($158) {
          $159 = ($$|0)==(115);
          _memset(($scanset|0),-1,257)|0;
          HEAP8[$scanset>>0] = 0;
          if ($159) {
           HEAP8[$8>>0] = 0;
           ;HEAP8[$7+0>>0]=0|0;HEAP8[$7+1>>0]=0|0;HEAP8[$7+2>>0]=0|0;HEAP8[$7+3>>0]=0|0;HEAP8[$7+4>>0]=0|0;
           $p$9 = $p$5;
          } else {
           $p$9 = $p$5;
          }
         } else {
          $160 = (($p$5) + 1|0);
          $161 = HEAP8[$160>>0]|0;
          $162 = ($161<<24>>24)==(94);
          $163 = (($p$5) + 2|0);
          $invert$0 = $162&1;
          $164 = $162 ? $160 : $p$5;
          $p$6 = $162 ? $163 : $160;
          $165 = $162&1;
          _memset(($scanset|0),($165|0),257)|0;
          HEAP8[$scanset>>0] = 0;
          $166 = HEAP8[$p$6>>0]|0;
          if ((($166<<24>>24) == 45)) {
           $167 = (($164) + 2|0);
           $168 = $invert$0 ^ 1;
           $169 = $168&255;
           HEAP8[$10>>0] = $169;
           $$pre$phi223Z2D = $169;$p$7$ph = $167;
          } else if ((($166<<24>>24) == 93)) {
           $170 = (($164) + 2|0);
           $171 = $invert$0 ^ 1;
           $172 = $171&255;
           HEAP8[$11>>0] = $172;
           $$pre$phi223Z2D = $172;$p$7$ph = $170;
          } else {
           $$pre221 = $invert$0 ^ 1;
           $$pre222 = $$pre221&255;
           $$pre$phi223Z2D = $$pre222;$p$7$ph = $p$6;
          }
          $p$7 = $p$7$ph;
          while(1) {
           $173 = HEAP8[$p$7>>0]|0;
           if ((($173<<24>>24) == 93)) {
            $p$9 = $p$7;
            break L80;
           } else if ((($173<<24>>24) == 45)) {
            $174 = (($p$7) + 1|0);
            $175 = HEAP8[$174>>0]|0;
            if ((($175<<24>>24) == 93) | (($175<<24>>24) == 0)) {
             $186 = 45;$p$8 = $p$7;
            } else {
             $176 = (($p$7) + -1|0);
             $177 = HEAP8[$176>>0]|0;
             $178 = ($177&255)<($175&255);
             if ($178) {
              $179 = $177&255;
              $c$0101 = $179;
              while(1) {
               $180 = (($c$0101) + 1)|0;
               $181 = (($scanset) + ($180)|0);
               HEAP8[$181>>0] = $$pre$phi223Z2D;
               $182 = HEAP8[$174>>0]|0;
               $183 = $182&255;
               $184 = ($180|0)<($183|0);
               if ($184) {
                $c$0101 = $180;
               } else {
                $186 = $182;$p$8 = $174;
                break;
               }
              }
             } else {
              $186 = $175;$p$8 = $174;
             }
            }
           } else if ((($173<<24>>24) == 0)) {
            $alloc$0204 = $alloc$0;$matches$0111347 = $matches$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
            label = 163;
            break L4;
           } else {
            $186 = $173;$p$8 = $p$7;
           }
           $185 = $186&255;
           $187 = (($185) + 1)|0;
           $188 = (($scanset) + ($187)|0);
           HEAP8[$188>>0] = $$pre$phi223Z2D;
           $189 = (($p$8) + 1|0);
           $p$7 = $189;
          }
         }
        } while(0);
        $190 = (($width$1) + 1)|0;
        $$8 = $156 ? $190 : 31;
        $191 = ($$size$0|0)==(1);
        $192 = ($alloc$0|0)!=(0);
        L99: do {
         if ($191) {
          if ($192) {
           $193 = $$8 << 2;
           $194 = (_malloc($193)|0);
           $195 = ($194|0)==(0|0);
           if ($195) {
            $alloc$0204 = $alloc$0;$matches$0111347 = $matches$0111;$s$6 = 0;$wcs$7 = $194;
            label = 163;
            break L4;
           } else {
            $wcs$2 = $194;
           }
          } else {
           $wcs$2 = $dest$0;
          }
          HEAP32[$st>>2] = 0;
          HEAP32[$9>>2] = 0;
          $i$0$ph = 0;$k$0$ph = $$8;$wcs$3$ph = $wcs$2;
          L105: while(1) {
           $196 = ($wcs$3$ph|0)==(0|0);
           if ($196) {
            while(1) {
             $199 = HEAP32[$3>>2]|0;
             $210 = HEAP32[$4>>2]|0;
             $211 = ($199>>>0)<($210>>>0);
             if ($211) {
              $198 = (($199) + 1|0);
              HEAP32[$3>>2] = $198;
              $200 = HEAP8[$199>>0]|0;
              $201 = $200&255;
              $203 = $201;
             } else {
              $197 = (___shgetc($f)|0);
              $203 = $197;
             }
             $202 = (($203) + 1)|0;
             $204 = (($scanset) + ($202)|0);
             $205 = HEAP8[$204>>0]|0;
             $206 = ($205<<24>>24)==(0);
             if ($206) {
              $i$0$ph21$lcssa = $i$0$ph;$wcs$3$ph139 = 0;
              break L105;
             }
             $207 = $203&255;
             HEAP8[$0>>0] = $207;
             $208 = (_mbrtowc($wc,$0,1,$st)|0);
             if ((($208|0) == -2)) {
              continue;
             } else if ((($208|0) == -1)) {
              $alloc$0204 = $alloc$0;$matches$0111347 = $matches$0111;$s$6 = 0;$wcs$7 = 0;
              label = 163;
              break L4;
             }
             $209 = ($i$0$ph|0)==($k$0$ph|0);
             $or$cond$us = $192 & $209;
             if ($or$cond$us) {
              $i$1$lcssa = $i$0$ph;
              break;
             }
            }
           } else {
            if ($192) {
             $i$0$ph21$us106 = $i$0$ph;
            } else {
             $i$0$ph$lcssa = $i$0$ph;$wcs$3$ph$lcssa = $wcs$3$ph;
             label = 85;
             break;
            }
            while(1) {
             while(1) {
              $214 = HEAP32[$3>>2]|0;
              $228 = HEAP32[$4>>2]|0;
              $229 = ($214>>>0)<($228>>>0);
              if ($229) {
               $213 = (($214) + 1|0);
               HEAP32[$3>>2] = $213;
               $215 = HEAP8[$214>>0]|0;
               $216 = $215&255;
               $218 = $216;
              } else {
               $212 = (___shgetc($f)|0);
               $218 = $212;
              }
              $217 = (($218) + 1)|0;
              $219 = (($scanset) + ($217)|0);
              $220 = HEAP8[$219>>0]|0;
              $221 = ($220<<24>>24)==(0);
              if ($221) {
               $i$0$ph21$lcssa = $i$0$ph21$us106;$wcs$3$ph139 = $wcs$3$ph;
               break L105;
              }
              $222 = $218&255;
              HEAP8[$0>>0] = $222;
              $223 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($223|0) == -1)) {
               $alloc$0204 = $alloc$0;$matches$0111347 = $matches$0111;$s$6 = 0;$wcs$7 = $wcs$3$ph;
               label = 163;
               break L4;
              } else if (!((($223|0) == -2))) {
               break;
              }
             }
             $224 = HEAP32[$wc>>2]|0;
             $225 = (($i$0$ph21$us106) + 1)|0;
             $226 = (($wcs$3$ph) + ($i$0$ph21$us106<<2)|0);
             HEAP32[$226>>2] = $224;
             $227 = ($225|0)==($k$0$ph|0);
             if ($227) {
              $i$1$lcssa = $k$0$ph;
              break;
             } else {
              $i$0$ph21$us106 = $225;
             }
            }
           }
           $factor = $k$0$ph << 1;
           $247 = $factor | 1;
           $248 = $247 << 2;
           $249 = (_realloc($wcs$3$ph,$248)|0);
           $250 = ($249|0)==(0|0);
           if ($250) {
            $alloc$0204 = $alloc$0;$matches$0111347 = $matches$0111;$s$6 = 0;$wcs$7 = $wcs$3$ph;
            label = 163;
            break L4;
           }
           $i$0$ph = $i$1$lcssa;$k$0$ph = $247;$wcs$3$ph = $249;
          }
          L129: do {
           if ((label|0) == 85) {
            label = 0;
            $i$0$ph21 = $i$0$ph$lcssa;
            while(1) {
             while(1) {
              $230 = HEAP32[$3>>2]|0;
              $231 = HEAP32[$4>>2]|0;
              $232 = ($230>>>0)<($231>>>0);
              if ($232) {
               $233 = (($230) + 1|0);
               HEAP32[$3>>2] = $233;
               $234 = HEAP8[$230>>0]|0;
               $235 = $234&255;
               $238 = $235;
              } else {
               $236 = (___shgetc($f)|0);
               $238 = $236;
              }
              $237 = (($238) + 1)|0;
              $239 = (($scanset) + ($237)|0);
              $240 = HEAP8[$239>>0]|0;
              $241 = ($240<<24>>24)==(0);
              if ($241) {
               $i$0$ph21$lcssa = $i$0$ph21;$wcs$3$ph139 = $wcs$3$ph$lcssa;
               break L129;
              }
              $242 = $238&255;
              HEAP8[$0>>0] = $242;
              $243 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($243|0) == -1)) {
               $alloc$0204 = 0;$matches$0111347 = $matches$0111;$s$6 = 0;$wcs$7 = $wcs$3$ph$lcssa;
               label = 163;
               break L4;
              } else if (!((($243|0) == -2))) {
               break;
              }
             }
             $244 = HEAP32[$wc>>2]|0;
             $245 = (($i$0$ph21) + 1)|0;
             $246 = (($wcs$3$ph$lcssa) + ($i$0$ph21<<2)|0);
             HEAP32[$246>>2] = $244;
             $i$0$ph21 = $245;
            }
           }
          } while(0);
          $251 = (_mbsinit($st)|0);
          $252 = ($251|0)==(0);
          if ($252) {
           $alloc$0204 = $alloc$0;$matches$0111347 = $matches$0111;$s$6 = 0;$wcs$7 = $wcs$3$ph139;
           label = 163;
           break L4;
          } else {
           $i$4 = $i$0$ph21$lcssa;$s$3 = 0;$wcs$4 = $wcs$3$ph139;
          }
         } else {
          if ($192) {
           $253 = (_malloc($$8)|0);
           $254 = ($253|0)==(0|0);
           if ($254) {
            $alloc$0204 = $alloc$0;$matches$0111347 = $matches$0111;$s$6 = 0;$wcs$7 = 0;
            label = 163;
            break L4;
           } else {
            $i$2$ph = 0;$k$1$ph = $$8;$s$2$ph = $253;
           }
           while(1) {
            $i$2 = $i$2$ph;
            while(1) {
             $255 = HEAP32[$3>>2]|0;
             $256 = HEAP32[$4>>2]|0;
             $257 = ($255>>>0)<($256>>>0);
             if ($257) {
              $258 = (($255) + 1|0);
              HEAP32[$3>>2] = $258;
              $259 = HEAP8[$255>>0]|0;
              $260 = $259&255;
              $263 = $260;
             } else {
              $261 = (___shgetc($f)|0);
              $263 = $261;
             }
             $262 = (($263) + 1)|0;
             $264 = (($scanset) + ($262)|0);
             $265 = HEAP8[$264>>0]|0;
             $266 = ($265<<24>>24)==(0);
             if ($266) {
              $i$4 = $i$2;$s$3 = $s$2$ph;$wcs$4 = 0;
              break L99;
             }
             $267 = $263&255;
             $268 = (($i$2) + 1)|0;
             $269 = (($s$2$ph) + ($i$2)|0);
             HEAP8[$269>>0] = $267;
             $270 = ($268|0)==($k$1$ph|0);
             if ($270) {
              break;
             } else {
              $i$2 = $268;
             }
            }
            $factor17 = $k$1$ph << 1;
            $271 = $factor17 | 1;
            $272 = (_realloc($s$2$ph,$271)|0);
            $273 = ($272|0)==(0|0);
            if ($273) {
             $alloc$0204 = $alloc$0;$matches$0111347 = $matches$0111;$s$6 = $s$2$ph;$wcs$7 = 0;
             label = 163;
             break L4;
            } else {
             $i$2$ph$phi = $k$1$ph;$k$1$ph = $271;$s$2$ph = $272;$i$2$ph = $i$2$ph$phi;
            }
           }
          }
          $274 = ($dest$0|0)==(0|0);
          if ($274) {
           $292 = $152;
           while(1) {
            $290 = HEAP32[$3>>2]|0;
            $291 = ($290>>>0)<($292>>>0);
            if ($291) {
             $293 = (($290) + 1|0);
             HEAP32[$3>>2] = $293;
             $294 = HEAP8[$290>>0]|0;
             $295 = $294&255;
             $298 = $295;
            } else {
             $296 = (___shgetc($f)|0);
             $298 = $296;
            }
            $297 = (($298) + 1)|0;
            $299 = (($scanset) + ($297)|0);
            $300 = HEAP8[$299>>0]|0;
            $301 = ($300<<24>>24)==(0);
            if ($301) {
             $i$4 = 0;$s$3 = 0;$wcs$4 = 0;
             break L99;
            }
            $$pre217 = HEAP32[$4>>2]|0;
            $292 = $$pre217;
           }
          } else {
           $277 = $152;$i$3 = 0;
           while(1) {
            $275 = HEAP32[$3>>2]|0;
            $276 = ($275>>>0)<($277>>>0);
            if ($276) {
             $278 = (($275) + 1|0);
             HEAP32[$3>>2] = $278;
             $279 = HEAP8[$275>>0]|0;
             $280 = $279&255;
             $283 = $280;
            } else {
             $281 = (___shgetc($f)|0);
             $283 = $281;
            }
            $282 = (($283) + 1)|0;
            $284 = (($scanset) + ($282)|0);
            $285 = HEAP8[$284>>0]|0;
            $286 = ($285<<24>>24)==(0);
            if ($286) {
             $i$4 = $i$3;$s$3 = $dest$0;$wcs$4 = 0;
             break L99;
            }
            $287 = $283&255;
            $288 = (($i$3) + 1)|0;
            $289 = (($dest$0) + ($i$3)|0);
            HEAP8[$289>>0] = $287;
            $$pre218 = HEAP32[$4>>2]|0;
            $277 = $$pre218;$i$3 = $288;
           }
          }
         }
        } while(0);
        $302 = HEAP32[$4>>2]|0;
        $303 = ($302|0)==(0|0);
        $$pre215 = HEAP32[$3>>2]|0;
        if ($303) {
         $307 = $$pre215;
        } else {
         $304 = (($$pre215) + -1|0);
         HEAP32[$3>>2] = $304;
         $307 = $304;
        }
        $305 = HEAP32[$5>>2]|0;
        $306 = HEAP32[$6>>2]|0;
        $308 = $307;
        $309 = $306;
        $310 = (($308) - ($309))|0;
        $311 = (($310) + ($305))|0;
        $312 = ($311|0)==(0);
        if ($312) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0111;$s$8 = $s$3;$wcs$9 = $wcs$4;
         break L4;
        }
        $$not = $156 ^ 1;
        $313 = ($311|0)==($width$1|0);
        $or$cond9 = $313 | $$not;
        if (!($or$cond9)) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0111;$s$8 = $s$3;$wcs$9 = $wcs$4;
         break L4;
        }
        do {
         if ($192) {
          if ($191) {
           HEAP32[$dest$0>>2] = $wcs$4;
           break;
          } else {
           HEAP32[$dest$0>>2] = $s$3;
           break;
          }
         }
        } while(0);
        if ($156) {
         $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
        } else {
         $314 = ($wcs$4|0)==(0|0);
         if (!($314)) {
          $315 = (($wcs$4) + ($i$4<<2)|0);
          HEAP32[$315>>2] = 0;
         }
         $316 = ($s$3|0)==(0|0);
         if ($316) {
          $p$10 = $p$9;$s$4 = 0;$wcs$5 = $wcs$4;
         } else {
          $317 = (($s$3) + ($i$4)|0);
          HEAP8[$317>>0] = 0;
          $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
         }
        }
        break;
       }
       case 111:  {
        $base$0 = 8;
        label = 145;
        break;
       }
       case 117: case 100:  {
        $base$0 = 10;
        label = 145;
        break;
       }
       case 105:  {
        $base$0 = 0;
        label = 145;
        break;
       }
       case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
        $337 = (+___floatscan($f,$$size$0,0));
        $338 = HEAP32[$5>>2]|0;
        $339 = HEAP32[$3>>2]|0;
        $340 = HEAP32[$6>>2]|0;
        $341 = $339;
        $342 = $340;
        $343 = (($342) - ($341))|0;
        $344 = ($338|0)==($343|0);
        if ($344) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0111;$s$8 = $s$1;$wcs$9 = $wcs$1;
         break L4;
        }
        $345 = ($dest$0|0)==(0|0);
        if ($345) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         if ((($$size$0|0) == 1)) {
          HEAPF64[$dest$0>>3] = $337;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         } else if ((($$size$0|0) == 2)) {
          HEAPF64[$dest$0>>3] = $337;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         } else if ((($$size$0|0) == 0)) {
          $346 = $337;
          HEAPF32[$dest$0>>2] = $346;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         } else {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         }
        }
        break;
       }
       case 120: case 88: case 112:  {
        $base$0 = 16;
        label = 145;
        break;
       }
       default: {
        $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
       }
       }
      } while(0);
      L198: do {
       if ((label|0) == 145) {
        label = 0;
        $318 = (___intscan($f,$base$0,0,-1,-1)|0);
        $319 = tempRet0;
        $320 = HEAP32[$5>>2]|0;
        $321 = HEAP32[$3>>2]|0;
        $322 = HEAP32[$6>>2]|0;
        $323 = $321;
        $324 = $322;
        $325 = (($324) - ($323))|0;
        $326 = ($320|0)==($325|0);
        if ($326) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0111;$s$8 = $s$1;$wcs$9 = $wcs$1;
         break L4;
        }
        $327 = ($$|0)==(112);
        $328 = ($dest$0|0)!=(0|0);
        $or$cond3 = $328 & $327;
        if ($or$cond3) {
         $329 = $318;
         HEAP32[$dest$0>>2] = $329;
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
         break;
        }
        $330 = ($dest$0|0)==(0|0);
        if ($330) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         switch ($$size$0|0) {
         case -2:  {
          $331 = $318&255;
          HEAP8[$dest$0>>0] = $331;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L198;
          break;
         }
         case -1:  {
          $332 = $318&65535;
          HEAP16[$dest$0>>1] = $332;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L198;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $318;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L198;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $318;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L198;
          break;
         }
         case 3:  {
          $333 = $dest$0;
          $334 = $333;
          HEAP32[$334>>2] = $318;
          $335 = (($333) + 4)|0;
          $336 = $335;
          HEAP32[$336>>2] = $319;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L198;
          break;
         }
         default: {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L198;
         }
         }
        }
       }
      } while(0);
      $347 = HEAP32[$5>>2]|0;
      $348 = HEAP32[$3>>2]|0;
      $349 = HEAP32[$6>>2]|0;
      $350 = $348;
      $351 = $349;
      $352 = (($347) + ($pos$1))|0;
      $353 = (($352) + ($350))|0;
      $354 = (($353) - ($351))|0;
      $not$ = ($dest$0|0)!=(0|0);
      $355 = $not$&1;
      $matches$0$ = (($355) + ($matches$0111))|0;
      $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $354;$s$5 = $s$4;$wcs$6 = $wcs$5;
      break L6;
     }
    } while(0);
    $46 = $43&1;
    $47 = (($p$0117) + ($46)|0);
    ___shlim($f,0);
    $48 = HEAP32[$3>>2]|0;
    $49 = HEAP32[$4>>2]|0;
    $50 = ($48>>>0)<($49>>>0);
    if ($50) {
     $51 = (($48) + 1|0);
     HEAP32[$3>>2] = $51;
     $52 = HEAP8[$48>>0]|0;
     $53 = $52&255;
     $57 = $53;
    } else {
     $54 = (___shgetc($f)|0);
     $57 = $54;
    }
    $55 = HEAP8[$47>>0]|0;
    $56 = $55&255;
    $58 = ($57|0)==($56|0);
    if (!($58)) {
     $$lcssa366 = $57;$matches$0111$lcssa = $matches$0111;$s$0109$lcssa = $s$0109;$wcs$0110$lcssa = $wcs$0110;
     label = 19;
     break L4;
    }
    $65 = (($pos$0116) + 1)|0;
    $matches$1 = $matches$0111;$p$11 = $47;$pos$2 = $65;$s$5 = $s$0109;$wcs$6 = $wcs$0110;
   } else {
    $p$1 = $p$0117;
    while(1) {
     $16 = (($p$1) + 1|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17&255;
     $19 = (_isspace($18)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      $p$1$lcssa = $p$1;
      break;
     } else {
      $p$1 = $16;
     }
    }
    ___shlim($f,0);
    while(1) {
     $21 = HEAP32[$3>>2]|0;
     $22 = HEAP32[$4>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = (($21) + 1|0);
      HEAP32[$3>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $28 = $26;
     } else {
      $27 = (___shgetc($f)|0);
      $28 = $27;
     }
     $29 = (_isspace($28)|0);
     $30 = ($29|0)==(0);
     if ($30) {
      break;
     }
    }
    $31 = HEAP32[$4>>2]|0;
    $32 = ($31|0)==(0|0);
    $$pre220 = HEAP32[$3>>2]|0;
    if ($32) {
     $36 = $$pre220;
    } else {
     $33 = (($$pre220) + -1|0);
     HEAP32[$3>>2] = $33;
     $36 = $33;
    }
    $34 = HEAP32[$5>>2]|0;
    $35 = HEAP32[$6>>2]|0;
    $37 = $36;
    $38 = $35;
    $39 = (($34) + ($pos$0116))|0;
    $40 = (($39) + ($37))|0;
    $41 = (($40) - ($38))|0;
    $matches$1 = $matches$0111;$p$11 = $p$1$lcssa;$pos$2 = $41;$s$5 = $s$0109;$wcs$6 = $wcs$0110;
   }
  } while(0);
  $356 = (($p$11) + 1|0);
  $357 = HEAP8[$356>>0]|0;
  $358 = ($357<<24>>24)==(0);
  if ($358) {
   $matches$3 = $matches$1;
   label = 167;
   break;
  } else {
   $13 = $357;$matches$0111 = $matches$1;$p$0117 = $356;$pos$0116 = $pos$2;$s$0109 = $s$5;$wcs$0110 = $wcs$6;
  }
 }
 if ((label|0) == 19) {
  $59 = HEAP32[$4>>2]|0;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   $61 = HEAP32[$3>>2]|0;
   $62 = (($61) + -1|0);
   HEAP32[$3>>2] = $62;
  }
  $63 = ($$lcssa366|0)>(-1);
  $64 = ($matches$0111$lcssa|0)!=(0);
  $or$cond5 = $64 | $63;
  if ($or$cond5) {
   $matches$3 = $matches$0111$lcssa;
   STACKTOP = sp;return ($matches$3|0);
  } else {
   $alloc$1 = 0;$s$7 = $s$0109$lcssa;$wcs$8 = $wcs$0110$lcssa;
   label = 164;
  }
 }
 else if ((label|0) == 163) {
  $$old4 = ($matches$0111347|0)==(0);
  if ($$old4) {
   $alloc$1 = $alloc$0204;$s$7 = $s$6;$wcs$8 = $wcs$7;
   label = 164;
  } else {
   $alloc$2 = $alloc$0204;$matches$2 = $matches$0111347;$s$8 = $s$6;$wcs$9 = $wcs$7;
  }
 }
 else if ((label|0) == 167) {
  STACKTOP = sp;return ($matches$3|0);
 }
 if ((label|0) == 164) {
  $alloc$2 = $alloc$1;$matches$2 = -1;$s$8 = $s$7;$wcs$9 = $wcs$8;
 }
 $359 = ($alloc$2|0)==(0);
 if ($359) {
  $matches$3 = $matches$2;
  STACKTOP = sp;return ($matches$3|0);
 }
 _free($s$8);
 _free($wcs$9);
 $matches$3 = $matches$2;
 STACKTOP = sp;return ($matches$3|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f = sp;
 dest=$f+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f) + 32|0);
 HEAP32[$0>>2] = 18;
 $1 = (($f) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = (($f) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = (($f) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_MUSL_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function _wcslen($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP32[$$0>>2]|0;
  $1 = ($0|0)==(0);
  $2 = (($$0) + 4|0);
  if ($1) {
   $$0$lcssa = $$0;
   break;
  } else {
   $$0 = $2;
  }
 }
 $3 = $$0$lcssa;
 $4 = $s;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 return ($6|0);
}
function _wmemcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  return ($d|0);
 } else {
  $$014 = $n;$$023 = $s;$$05 = $d;
 }
 while(1) {
  $1 = (($$014) + -1)|0;
  $2 = (($$023) + 4|0);
  $3 = HEAP32[$$023>>2]|0;
  $4 = (($$05) + 4|0);
  HEAP32[$$05>>2] = $3;
  $5 = ($1|0)==(0);
  if ($5) {
   break;
  } else {
   $$014 = $1;$$023 = $2;$$05 = $4;
  }
 }
 return ($d|0);
}
function _wmemmove($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $d;
 $1 = $s;
 $2 = (($0) - ($1))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)<($n>>>0);
 $5 = ($n|0)==(0);
 if ($4) {
  if ($5) {
   return ($d|0);
  } else {
   $$in = $n;
  }
  while(1) {
   $6 = (($$in) + -1)|0;
   $7 = (($s) + ($6<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($d) + ($6<<2)|0);
   HEAP32[$9>>2] = $8;
   $10 = ($6|0)==(0);
   if ($10) {
    break;
   } else {
    $$in = $6;
   }
  }
  return ($d|0);
 } else {
  if ($5) {
   return ($d|0);
  } else {
   $$025 = $s;$$07 = $d;$$16 = $n;
  }
  while(1) {
   $11 = (($$16) + -1)|0;
   $12 = (($$025) + 4|0);
   $13 = HEAP32[$$025>>2]|0;
   $14 = (($$07) + 4|0);
   HEAP32[$$07>>2] = $13;
   $15 = ($11|0)==(0);
   if ($15) {
    break;
   } else {
    $$025 = $12;$$07 = $14;$$16 = $11;
   }
  }
  return ($d|0);
 }
 return (0)|0;
}
function _wmemset($d,$c,$n) {
 $d = $d|0;
 $c = $c|0;
 $n = $n|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  return ($d|0);
 } else {
  $$012 = $n;$$03 = $d;
 }
 while(1) {
  $1 = (($$012) + -1)|0;
  $2 = (($$03) + 4|0);
  HEAP32[$$03>>2] = $c;
  $3 = ($1|0)==(0);
  if ($3) {
   break;
  } else {
   $$012 = $1;$$03 = $2;
  }
 }
 return ($d|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 return ($0|0);
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[_stderr>>2]|0;
 (_vfprintf(($0|0),($format|0),($list|0))|0);
 (_fputc(10,($0|0))|0);
 _abort();
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (_pthread_once((1952|0),(3|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[1944>>2]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(1960,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 while(1) {
  $1 = (_malloc($$size)|0);
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $$lcssa = $1;
   label = 6;
   break;
  }
  $3 = (__ZSt15get_new_handlerv()|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   label = 5;
   break;
  }
  FUNCTION_TABLE_v[$3 & 3]();
 }
 if ((label|0) == 5) {
  $5 = (___cxa_allocate_exception(4)|0);
  HEAP32[$5>>2] = ((2128 + 8|0));
  ___cxa_throw(($5|0),(2184|0),(33|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  return ($$lcssa|0);
 }
 return (0)|0;
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 return;
}
function __ZNSt9bad_allocC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((2128 + 8|0));
 return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2152|0);
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 FUNCTION_TABLE_v[$func & 3]();
 _abort_message(2200,$vararg_buffer);
 // unreachable;
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = (($2) + 48|0);
   $5 = $4;
   $6 = $5;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5) + 4)|0;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = $7 & -256;
   $12 = ($11|0)==(1126902528);
   $13 = ($10|0)==(1129074247);
   $14 = $12 & $13;
   if ($14) {
    $15 = (($2) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    __ZSt11__terminatePFvvE($16);
    // unreachable;
   }
  }
 }
 $17 = HEAP32[442]|0;HEAP32[442] = (($17+0)|0);
 $18 = $17;
 __ZSt11__terminatePFvvE($18);
 // unreachable;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2240>>2]|0;HEAP32[2240>>2] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((2272 + 8|0));
 $0 = (($this) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 return;
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
 } else {
  $1 = ($thrown_type|0)==(0|0);
  if ($1) {
   $$1 = 0;
  } else {
   $2 = (___dynamic_cast($thrown_type,2400,2456,0)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$1 = 0;
   } else {
    dest=$info+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $2;
    $4 = (($info) + 8|0);
    HEAP32[$4>>2] = $this;
    $5 = (($info) + 12|0);
    HEAP32[$5>>2] = -1;
    $6 = (($info) + 48|0);
    HEAP32[$6>>2] = 1;
    $7 = HEAP32[$2>>2]|0;
    $8 = (($7) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$9 & 7]($2,$info,$10,1);
    $11 = (($info) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if ($13) {
     $14 = (($info) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$adjustedPtr>>2] = $15;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$1 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   HEAP32[$0>>2] = $adjustedPtr;
   $3 = (($info) + 24|0);
   HEAP32[$3>>2] = $path_below;
   $4 = (($info) + 36|0);
   HEAP32[$4>>2] = 1;
  } else {
   $5 = ($1|0)==($adjustedPtr|0);
   if (!($5)) {
    $9 = (($info) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$9>>2] = $11;
    $12 = (($info) + 24|0);
    HEAP32[$12>>2] = 2;
    $13 = (($info) + 54|0);
    HEAP8[$13>>0] = 1;
    break;
   }
   $6 = (($info) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2);
   if ($8) {
    HEAP32[$6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 7]($4,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$adjustedPtr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$11 & 7]($8,$info,$12,$15);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  } else {
   $3 = (($this) + 16|0);
   $4 = (($this) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ((($this) + ($5<<3)|0) + 16|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($3,$info,$adjustedPtr,$path_below);
   $7 = ($5|0)>(1);
   if ($7) {
    $8 = (($this) + 24|0);
    $9 = (($info) + 54|0);
    $p$0 = $8;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if (!($11)) {
      break L1;
     }
     $12 = (($p$0) + 8|0);
     $13 = ($12>>>0)<($6>>>0);
     if ($13) {
      $p$0 = $12;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = (($0) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = (($0) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = (($info) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = (($info) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = (($info) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = (($info) + 16|0);
 $11 = (($info) + 20|0);
 $12 = (($info) + 24|0);
 $13 = (($info) + 28|0);
 $14 = (($info) + 32|0);
 $15 = (($info) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38>>0]=0|0;
 do {
  if ($16) {
   $17 = (($info) + 48|0);
   HEAP32[$17>>2] = 1;
   $18 = HEAP32[$dst_type>>2]|0;
   $19 = (($18) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_viiiiii[$20 & 15]($dst_type,$info,$4,$4,1,0);
   $21 = HEAP32[$12>>2]|0;
   $22 = ($21|0)==(1);
   $$ = $22 ? $4 : 0;
   $dst_ptr$0 = $$;
  } else {
   $23 = (($info) + 36|0);
   $24 = HEAP32[$6>>2]|0;
   $25 = (($24) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   FUNCTION_TABLE_viiiii[$26 & 3]($6,$info,$4,1,0);
   $27 = HEAP32[$23>>2]|0;
   if ((($27|0) == 0)) {
    $28 = HEAP32[$15>>2]|0;
    $29 = ($28|0)==(1);
    $30 = HEAP32[$13>>2]|0;
    $31 = ($30|0)==(1);
    $or$cond = $29 & $31;
    $32 = HEAP32[$14>>2]|0;
    $33 = ($32|0)==(1);
    $or$cond3 = $or$cond & $33;
    $34 = HEAP32[$11>>2]|0;
    $$8 = $or$cond3 ? $34 : 0;
    $dst_ptr$0 = $$8;
    break;
   } else if (!((($27|0) == 1))) {
    $dst_ptr$0 = 0;
    break;
   }
   $35 = HEAP32[$12>>2]|0;
   $36 = ($35|0)==(1);
   if (!($36)) {
    $37 = HEAP32[$15>>2]|0;
    $38 = ($37|0)==(0);
    $39 = HEAP32[$13>>2]|0;
    $40 = ($39|0)==(1);
    $or$cond5 = $38 & $40;
    $41 = HEAP32[$14>>2]|0;
    $42 = ($41|0)==(1);
    $or$cond7 = $or$cond5 & $42;
    if (!($or$cond7)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $43 = HEAP32[$10>>2]|0;
   $dst_ptr$0 = $43;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = (($info) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 do {
  if ($3) {
   $4 = (($info) + 52|0);
   HEAP8[$4>>0] = 1;
   $5 = (($info) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$5>>2] = $dst_ptr;
    $8 = (($info) + 24|0);
    HEAP32[$8>>2] = $path_below;
    $9 = (($info) + 36|0);
    HEAP32[$9>>2] = 1;
    $10 = (($info) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    $13 = ($path_below|0)==(1);
    $or$cond = $12 & $13;
    if (!($or$cond)) {
     break;
    }
    $14 = (($info) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $15 = ($6|0)==($dst_ptr|0);
   if (!($15)) {
    $25 = (($info) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    $28 = (($info) + 54|0);
    HEAP8[$28>>0] = 1;
    break;
   }
   $16 = (($info) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    HEAP32[$16>>2] = $path_below;
    $22 = $path_below;
   } else {
    $22 = $17;
   }
   $19 = (($info) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   $23 = ($22|0)==(1);
   $or$cond1 = $21 & $23;
   if ($or$cond1) {
    $24 = (($info) + 54|0);
    HEAP8[$24>>0] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $does_dst_type_point_to_our_static_type$0$off0 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off0 = 0, $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $p$0 = 0;
 var $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = (($info) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = (($info) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $56 = (($this) + 16|0);
    $57 = (($this) + 12|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ((($this) + ($58<<3)|0) + 16|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($56,$info,$current_ptr,$path_below,$use_strcmp);
    $60 = (($this) + 24|0);
    $61 = ($58|0)>(1);
    if (!($61)) {
     break;
    }
    $62 = (($this) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $63 & 2;
    $65 = ($64|0)==(0);
    if ($65) {
     $66 = (($info) + 36|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)==(1);
     if (!($68)) {
      $74 = $63 & 1;
      $75 = ($74|0)==(0);
      if ($75) {
       $78 = (($info) + 54|0);
       $p2$2 = $60;
       while(1) {
        $87 = HEAP8[$78>>0]|0;
        $88 = ($87<<24>>24)==(0);
        if (!($88)) {
         break L1;
        }
        $89 = HEAP32[$66>>2]|0;
        $90 = ($89|0)==(1);
        if ($90) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2,$info,$current_ptr,$path_below,$use_strcmp);
        $91 = (($p2$2) + 8|0);
        $92 = ($91>>>0)<($59>>>0);
        if ($92) {
         $p2$2 = $91;
        } else {
         break L1;
        }
       }
      }
      $76 = (($info) + 24|0);
      $77 = (($info) + 54|0);
      $p2$1 = $60;
      while(1) {
       $79 = HEAP8[$77>>0]|0;
       $80 = ($79<<24>>24)==(0);
       if (!($80)) {
        break L1;
       }
       $81 = HEAP32[$66>>2]|0;
       $82 = ($81|0)==(1);
       if ($82) {
        $83 = HEAP32[$76>>2]|0;
        $84 = ($83|0)==(1);
        if ($84) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1,$info,$current_ptr,$path_below,$use_strcmp);
       $85 = (($p2$1) + 8|0);
       $86 = ($85>>>0)<($59>>>0);
       if ($86) {
        $p2$1 = $85;
       } else {
        break L1;
       }
      }
     }
    }
    $69 = (($info) + 54|0);
    $p2$0 = $60;
    while(1) {
     $70 = HEAP8[$69>>0]|0;
     $71 = ($70<<24>>24)==(0);
     if (!($71)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0,$info,$current_ptr,$path_below,$use_strcmp);
     $72 = (($p2$0) + 8|0);
     $73 = ($72>>>0)<($59>>>0);
     if ($73) {
      $p2$0 = $72;
     } else {
      break L1;
     }
    }
   }
   $11 = (($info) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = (($info) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = (($info) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = (($info) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = (($this) + 16|0);
     $24 = (($this) + 12|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = ((($this) + ($25<<3)|0) + 16|0);
     $27 = (($info) + 52|0);
     $28 = (($info) + 53|0);
     $29 = (($info) + 54|0);
     $30 = (($this) + 8|0);
     $31 = (($info) + 24|0);
     $does_dst_type_point_to_our_static_type$0$off0 = 0;$is_dst_type_derived_from_static_type$0$off0 = 0;$p$0 = $23;
     L34: while(1) {
      $32 = ($p$0>>>0)<($26>>>0);
      if (!($32)) {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off0;
       label = 20;
       break;
      }
      HEAP8[$27>>0] = 0;
      HEAP8[$28>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$current_ptr,$current_ptr,1,$use_strcmp);
      $33 = HEAP8[$29>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if (!($34)) {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off0;
       label = 20;
       break;
      }
      $35 = HEAP8[$28>>0]|0;
      $36 = ($35<<24>>24)==(0);
      do {
       if ($36) {
        $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off0;
       } else {
        $37 = HEAP8[$27>>0]|0;
        $38 = ($37<<24>>24)==(0);
        if ($38) {
         $44 = HEAP32[$30>>2]|0;
         $45 = $44 & 1;
         $46 = ($45|0)==(0);
         if ($46) {
          $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type$2$off0 = 1;
          label = 20;
          break L34;
         } else {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off0;$is_dst_type_derived_from_static_type$1$off0 = 1;
          break;
         }
        }
        $39 = HEAP32[$31>>2]|0;
        $40 = ($39|0)==(1);
        if ($40) {
         break L34;
        }
        $41 = HEAP32[$30>>2]|0;
        $42 = $41 & 2;
        $43 = ($42|0)==(0);
        if ($43) {
         break L34;
        } else {
         $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
        }
       }
      } while(0);
      $47 = (($p$0) + 8|0);
      $does_dst_type_point_to_our_static_type$0$off0 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off0 = $is_dst_type_derived_from_static_type$1$off0;$p$0 = $47;
     }
     do {
      if ((label|0) == 20) {
       if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
        label = 24;
       } else {
        HEAP32[$14>>2] = $current_ptr;
        $48 = (($info) + 40|0);
        $49 = HEAP32[$48>>2]|0;
        $50 = (($49) + 1)|0;
        HEAP32[$48>>2] = $50;
        $51 = (($info) + 36|0);
        $52 = HEAP32[$51>>2]|0;
        $53 = ($52|0)==(1);
        if ($53) {
         $54 = HEAP32[$31>>2]|0;
         $55 = ($54|0)==(2);
         if ($55) {
          HEAP8[$29>>0] = 1;
          if ($is_dst_type_derived_from_static_type$2$off0) {
           break;
          }
         } else {
          label = 24;
         }
        } else {
         label = 24;
        }
       }
       if ((label|0) == 24) {
        if ($is_dst_type_derived_from_static_type$2$off0) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = (($info) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$11 & 15]($8,$info,$dst_ptr,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$11 & 3]($8,$info,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = (($info) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = (($info) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $43 = (($this) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_viiiii[$47 & 3]($44,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $11 = (($info) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = (($info) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = (($info) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = (($info) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = (($info) + 52|0);
     HEAP8[$23>>0] = 0;
     $24 = (($info) + 53|0);
     HEAP8[$24>>0] = 0;
     $25 = (($this) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = (($27) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_viiiiii[$29 & 15]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $30 = HEAP8[$24>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off01 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23>>0]|0;
      $not$ = ($32<<24>>24)==(0);
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off01 = 1;
       label = 13;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$14>>2] = $current_ptr;
       $33 = (($info) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = (($info) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = (($info) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = (($info) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($is_dst_type_derived_from_static_type$0$off01) {
          break;
         }
        } else {
         label = 16;
        }
       } else {
        label = 16;
       }
       if ((label|0) == 16) {
        if ($is_dst_type_derived_from_static_type$0$off01) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = (($info) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = (($info) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = (($info) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if ($10) {
    $11 = (($info) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($current_ptr|0);
    if (!($13)) {
     $14 = (($info) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($current_ptr|0);
     if (!($16)) {
      $19 = (($info) + 32|0);
      HEAP32[$19>>2] = $path_below;
      HEAP32[$14>>2] = $current_ptr;
      $20 = (($info) + 40|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[$20>>2] = $22;
      $23 = (($info) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = (($info) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(2);
       if ($28) {
        $29 = (($info) + 54|0);
        HEAP8[$29>>0] = 1;
       }
      }
      $30 = (($info) + 44|0);
      HEAP32[$30>>2] = 4;
      break;
     }
    }
    $17 = ($path_below|0)==(1);
    if ($17) {
     $18 = (($info) + 32|0);
     HEAP32[$18>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = (($info) + 52|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = (($info) + 53|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = (($this) + 16|0);
  $8 = (($this) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($this) + ($9<<3)|0) + 16|0);
  HEAP8[$3>>0] = 0;
  HEAP8[$5>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($7,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  $11 = ($9|0)>(1);
  L4: do {
   if ($11) {
    $12 = (($this) + 24|0);
    $13 = (($info) + 24|0);
    $14 = (($this) + 8|0);
    $15 = (($info) + 54|0);
    $p$0 = $12;
    while(1) {
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(0);
     if (!($17)) {
      break L4;
     }
     $18 = HEAP8[$3>>0]|0;
     $19 = ($18<<24>>24)==(0);
     if ($19) {
      $25 = HEAP8[$5>>0]|0;
      $26 = ($25<<24>>24)==(0);
      if (!($26)) {
       $27 = HEAP32[$14>>2]|0;
       $28 = $27 & 1;
       $29 = ($28|0)==(0);
       if ($29) {
        break L4;
       }
      }
     } else {
      $20 = HEAP32[$13>>2]|0;
      $21 = ($20|0)==(1);
      if ($21) {
       break L4;
      }
      $22 = HEAP32[$14>>2]|0;
      $23 = $22 & 2;
      $24 = ($23|0)==(0);
      if ($24) {
       break L4;
      }
     }
     HEAP8[$3>>0] = 0;
     HEAP8[$5>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
     $30 = (($p$0) + 8|0);
     $31 = ($30>>>0)<($10>>>0);
     if ($31) {
      $p$0 = $30;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$3>>0] = $4;
  HEAP8[$5>>0] = $6;
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 15]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 31]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if ($4) {
  $6 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $6;
 }
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,2400,2568,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 return ($2|0);
}
function __ZSt17__throw_bad_allocv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(4)|0);
 __ZNSt9bad_allocC2Ev($0);
 ___cxa_throw(($0|0),(2184|0),(33|0));
 // unreachable;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = (($2) + 80|0);
   $5 = (($2) + 48|0);
   $6 = $5;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = $8 & -256;
   $13 = ($12|0)==(1126902528);
   $14 = ($11|0)==(1129074247);
   $15 = $13 & $14;
   if (!($15)) {
    HEAP32[$vararg_buffer7>>2] = 1776;
    _abort_message(1888,$vararg_buffer7);
    // unreachable;
   }
   $16 = ($8|0)==(1126902529);
   $17 = ($11|0)==(1129074247);
   $18 = $16 & $17;
   if ($18) {
    $19 = (($2) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20;
   } else {
    $21 = $4;
   }
   HEAP32[$thrown_object>>2] = $21;
   $22 = HEAP32[$2>>2]|0;
   $23 = (($22) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[2264>>2]|0;
   $26 = (($25) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (FUNCTION_TABLE_iiii[$27 & 31](2264,$22,$thrown_object)|0);
   if ($28) {
    $29 = HEAP32[$thrown_object>>2]|0;
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + 8|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (FUNCTION_TABLE_ii[$32 & 63]($29)|0);
    HEAP32[$vararg_buffer>>2] = 1776;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $24;
    $vararg_ptr2 = (($vararg_buffer) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $33;
    _abort_message(1792,$vararg_buffer);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer3>>2] = 1776;
    $vararg_ptr6 = (($vararg_buffer3) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $24;
    _abort_message(1840,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(1928,$vararg_buffer10);
 // unreachable;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((1944|0),(106|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(2016,$vararg_buffer);
  // unreachable;
 }
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$this>>2]|0;
  $6 = (($5) + -12|0);
  __ZdlPv($6);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[1944>>2]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(2072,$vararg_buffer);
  // unreachable;
 }
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$lcssa = 0, $$lcssa148 = 0, $$lcssa152 = 0, $$lcssa153 = 0, $$lcssa154 = 0, $$lcssa156 = 0, $$lcssa159 = 0, $$lcssa161 = 0, $$lcssa163 = 0, $$lcssa165 = 0, $$lcssa167 = 0, $$lcssa169 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0, $$pre$phi$i26Z2D = 0;
 var $$pre$phi$iZ2D = 0, $$pre$phi59$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre108 = 0, $$pre58$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i12$i = 0, $$sum$i13$i = 0, $$sum$i16$i = 0, $$sum$i19$i = 0, $$sum$i2337 = 0, $$sum$i32 = 0, $$sum$i38 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0;
 var $$sum1$i14$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0;
 var $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0;
 var $$sum2$i$i$i = 0, $$sum2$i15$i = 0, $$sum2$i17$i = 0, $$sum2$i21$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0, $$sum3$pre$i$i = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0;
 var $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0;
 var $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0;
 var $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0;
 var $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0;
 var $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0;
 var $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0;
 var $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$08$i$i = 0, $K8$053$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0, $RP$0$i17 = 0;
 var $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$052$i$i = 0, $T$052$i$i$lcssa = 0, $T$07$i$i = 0, $T$07$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0;
 var $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i26$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond24$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5$i = 0, $or$cond55$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0;
 var $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$082$i = 0, $sp$082$i$lcssa = 0, $sp$181$i = 0, $sp$181$i$lcssa = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0;
 var $tbase$253$i = 0, $tsize$0313843$i = 0, $tsize$1$i = 0, $tsize$252$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[2816>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((2816 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((2816 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[2816>>2] = $22;
     } else {
      $23 = HEAP32[((2816 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[((2816 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((2816 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((2816 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[2816>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[((2816 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[((2816 + 8|0))>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((2816 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((2816 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[2816>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[2816>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre108 = ((2816 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre108;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((2816 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((2816 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((2816 + 8|0))>>2] = $81;
     HEAP32[((2816 + 20|0))>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[((2816 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((2816 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((2816 + 16|0))>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($5)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i$lcssa) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i$lcssa) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = (($v$0$i$lcssa) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i$lcssa) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = (($v$0$i$lcssa) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i$lcssa) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((2816 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((2816 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((2816 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((2816 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((2816 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i$lcssa) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = (($R$1$i) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = (($201) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = (($v$0$i$lcssa) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[((2816 + 16|0))>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = (($R$1$i) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = (($207) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($5))|0;
      $215 = $214 | 3;
      $216 = (($v$0$i$lcssa) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $5 | 3;
      $221 = (($v$0$i$lcssa) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i38 = $5 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i38)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($5))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[((2816 + 8|0))>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[((2816 + 20|0))>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = ((2816 + ($229<<2)|0) + 40|0);
       $231 = HEAP32[2816>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[2816>>2] = $235;
        $$sum2$pre$i = (($229) + 2)|0;
        $$pre$i = ((2816 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = ((2816 + ($$sum3$i<<2)|0) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[((2816 + 16|0))>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = (($F1$0$i) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = (($227) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = (($227) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[((2816 + 8|0))>>2] = $rsize$0$i$lcssa;
      HEAP32[((2816 + 20|0))>>2] = $151;
     }
     $243 = (($v$0$i$lcssa) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[((2816 + 4|0))>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = ((2816 + ($idx$0$i<<2)|0) + 304|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L126: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 90;
      } else {
       $278 = ($idx$0$i|0)==(31);
       if ($278) {
        $282 = 0;
       } else {
        $279 = $idx$0$i >>> 1;
        $280 = (25 - ($279))|0;
        $282 = $280;
       }
       $281 = $246 << $282;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $281;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = (($t$0$i14) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 94;
          break L126;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = (($t$0$i14) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = ((($t$0$i14) + ($291<<2)|0) + 16|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 90;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 90) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = ((2816 + ($327<<2)|0) + 304|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;
      } else {
       $t$2$ph$i = $t$1$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$2$i;
       label = 94;
      }
     }
     if ((label|0) == 94) {
      while(1) {
       label = 0;
       $331 = (($t$230$i) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = (($t$230$i) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 94;
        continue;
       }
       $339 = (($t$230$i) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 94;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[((2816 + 8|0))>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[((2816 + 16|0))>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = (($v$3$lcssa$i) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = (($v$3$lcssa$i) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = (($v$3$lcssa$i) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = (($v$3$lcssa$i) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = (($R$0$i18) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = (($R$0$i18) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = (($v$3$lcssa$i) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = (($356) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = (($353) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = (($v$3$lcssa$i) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = ((2816 + ($379<<2)|0) + 304|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[((2816 + 4|0))>>2]|0;
           $386 = $385 & $384;
           HEAP32[((2816 + 4|0))>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[((2816 + 16|0))>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = (($351) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = (($351) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[((2816 + 16|0))>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = (($R$1$i20) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = (($v$3$lcssa$i) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = (($R$1$i20) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = (($398) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = (($v$3$lcssa$i) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[((2816 + 16|0))>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = (($R$1$i20) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = (($404) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L205: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2337 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2337)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = ((2816 + ($424<<2)|0) + 40|0);
          $426 = HEAP32[2816>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[2816>>2] = $430;
           $$sum14$pre$i = (($424) + 2)|0;
           $$pre$i25 = ((2816 + ($$sum14$pre$i<<2)|0) + 40|0);
           $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = ((2816 + ($$sum17$i<<2)|0) + 40|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[((2816 + 16|0))>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = (($F5$0$i) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = ((2816 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[((2816 + 4|0))>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[((2816 + 4|0))>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ($I7$0$i|0)==(31);
         if ($476) {
          $484 = 0;
         } else {
          $477 = $I7$0$i >>> 1;
          $478 = (25 - ($477))|0;
          $484 = $478;
         }
         $479 = (($475) + 4|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = $480 & -8;
         $482 = ($481|0)==($rsize$3$lcssa$i|0);
         L226: do {
          if ($482) {
           $T$0$lcssa$i = $475;
          } else {
           $483 = $rsize$3$lcssa$i << $484;
           $K12$029$i = $483;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = ((($T$028$i) + ($491<<2)|0) + 16|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa169 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = (($487) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L226;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[((2816 + 16|0))>>2]|0;
           $495 = ($$lcssa169>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa169>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L205;
           }
          }
         } while(0);
         $499 = (($T$0$lcssa$i) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[((2816 + 16|0))>>2]|0;
         $502 = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = ($500>>>0)>=($501>>>0);
         $or$cond24$i = $502 & $503;
         if ($or$cond24$i) {
          $504 = (($500) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[((2816 + 8|0))>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[((2816 + 20|0))>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[((2816 + 20|0))>>2] = $514;
   HEAP32[((2816 + 8|0))>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = (($512) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[((2816 + 8|0))>>2] = 0;
   HEAP32[((2816 + 20|0))>>2] = 0;
   $520 = $509 | 3;
   $521 = (($512) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = (($512) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[((2816 + 12|0))>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[((2816 + 12|0))>>2] = $528;
  $529 = HEAP32[((2816 + 24|0))>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[((2816 + 24|0))>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = (($529) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = (($529) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[3288>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[((3288 + 8|0))>>2] = $538;
    HEAP32[((3288 + 4|0))>>2] = $538;
    HEAP32[((3288 + 12|0))>>2] = -1;
    HEAP32[((3288 + 16|0))>>2] = -1;
    HEAP32[((3288 + 20|0))>>2] = 0;
    HEAP32[((2816 + 444|0))>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[3288>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[((3288 + 8|0))>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[((2816 + 440|0))>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[((2816 + 432|0))>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[((2816 + 444|0))>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L267: do {
  if ($560) {
   $561 = HEAP32[((2816 + 24|0))>>2]|0;
   $562 = ($561|0)==(0|0);
   L269: do {
    if ($562) {
     label = 180;
    } else {
     $sp$0$i$i = ((2816 + 448|0));
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = (($sp$0$i$i) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa165 = $sp$0$i$i;$$lcssa167 = $565;
        break;
       }
      }
      $569 = (($sp$0$i$i) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 180;
       break L269;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[((2816 + 12|0))>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa165>>2]|0;
      $600 = HEAP32[$$lcssa167>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0313843$i = $596;
       } else {
        $tbase$253$i = $598;$tsize$252$i = $596;
        label = 200;
        break L267;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;
       label = 190;
      }
     } else {
      $tsize$0313843$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 180) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0313843$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[((3288 + 4|0))>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[((2816 + 432|0))>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[((2816 + 440|0))>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0313843$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       if ($593) {
        $tbase$253$i = $572;$tsize$252$i = $ssize$0$i;
        label = 200;
        break L267;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;
        label = 190;
       }
      } else {
       $tsize$0313843$i = 0;
      }
     }
    }
   } while(0);
   L289: do {
    if ((label|0) == 190) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond4$i = $607 & $or$cond5$i;
     do {
      if ($or$cond4$i) {
       $608 = HEAP32[((3288 + 8|0))>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0313843$i = 0;
         break L289;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0313843$i = 0;
     } else {
      $tbase$253$i = $br$0$ph$i;$tsize$252$i = $ssize$2$i;
      label = 200;
      break L267;
     }
    }
   } while(0);
   $618 = HEAP32[((2816 + 444|0))>>2]|0;
   $619 = $618 | 4;
   HEAP32[((2816 + 444|0))>>2] = $619;
   $tsize$1$i = $tsize$0313843$i;
   label = 197;
  } else {
   $tsize$1$i = 0;
   label = 197;
  }
 } while(0);
 if ((label|0) == 197) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond6$i = $625 & $or$cond3$i;
   if ($or$cond6$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$253$i = $621;$tsize$252$i = $$tsize$1$i;
     label = 200;
    }
   }
  }
 }
 if ((label|0) == 200) {
  $631 = HEAP32[((2816 + 432|0))>>2]|0;
  $632 = (($631) + ($tsize$252$i))|0;
  HEAP32[((2816 + 432|0))>>2] = $632;
  $633 = HEAP32[((2816 + 436|0))>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[((2816 + 436|0))>>2] = $632;
  }
  $635 = HEAP32[((2816 + 24|0))>>2]|0;
  $636 = ($635|0)==(0|0);
  L308: do {
   if ($636) {
    $637 = HEAP32[((2816 + 16|0))>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$253$i>>>0)<($637>>>0);
    $or$cond8$i = $638 | $639;
    if ($or$cond8$i) {
     HEAP32[((2816 + 16|0))>>2] = $tbase$253$i;
    }
    HEAP32[((2816 + 448|0))>>2] = $tbase$253$i;
    HEAP32[((2816 + 452|0))>>2] = $tsize$252$i;
    HEAP32[((2816 + 460|0))>>2] = 0;
    $640 = HEAP32[3288>>2]|0;
    HEAP32[((2816 + 36|0))>>2] = $640;
    HEAP32[((2816 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = ((2816 + ($641<<2)|0) + 40|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = ((2816 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = ((2816 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$252$i) + -40)|0;
    $647 = (($tbase$253$i) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    if ($650) {
     $654 = 0;
    } else {
     $651 = (0 - ($648))|0;
     $652 = $651 & 7;
     $654 = $652;
    }
    $653 = (($tbase$253$i) + ($654)|0);
    $655 = (($646) - ($654))|0;
    HEAP32[((2816 + 24|0))>>2] = $653;
    HEAP32[((2816 + 12|0))>>2] = $655;
    $656 = $655 | 1;
    $$sum$i12$i = (($654) + 4)|0;
    $657 = (($tbase$253$i) + ($$sum$i12$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$252$i) + -36)|0;
    $658 = (($tbase$253$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[((3288 + 16|0))>>2]|0;
    HEAP32[((2816 + 28|0))>>2] = $659;
   } else {
    $sp$082$i = ((2816 + 448|0));
    while(1) {
     $660 = HEAP32[$sp$082$i>>2]|0;
     $661 = (($sp$082$i) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$253$i|0)==($663|0);
     if ($664) {
      $$lcssa159 = $660;$$lcssa161 = $661;$$lcssa163 = $662;$sp$082$i$lcssa = $sp$082$i;
      label = 212;
      break;
     }
     $665 = (($sp$082$i) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$082$i = $666;
     }
    }
    if ((label|0) == 212) {
     $668 = (($sp$082$i$lcssa) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa159>>>0);
      $673 = ($635>>>0)<($tbase$253$i>>>0);
      $or$cond55$i = $673 & $672;
      if ($or$cond55$i) {
       $674 = (($$lcssa163) + ($tsize$252$i))|0;
       HEAP32[$$lcssa161>>2] = $674;
       $675 = HEAP32[((2816 + 12|0))>>2]|0;
       $676 = (($675) + ($tsize$252$i))|0;
       $677 = (($635) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       if ($680) {
        $684 = 0;
       } else {
        $681 = (0 - ($678))|0;
        $682 = $681 & 7;
        $684 = $682;
       }
       $683 = (($635) + ($684)|0);
       $685 = (($676) - ($684))|0;
       HEAP32[((2816 + 24|0))>>2] = $683;
       HEAP32[((2816 + 12|0))>>2] = $685;
       $686 = $685 | 1;
       $$sum$i16$i = (($684) + 4)|0;
       $687 = (($635) + ($$sum$i16$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i17$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i17$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[((3288 + 16|0))>>2]|0;
       HEAP32[((2816 + 28|0))>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[((2816 + 16|0))>>2]|0;
    $691 = ($tbase$253$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[((2816 + 16|0))>>2] = $tbase$253$i;
     $755 = $tbase$253$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$253$i) + ($tsize$252$i)|0);
    $sp$181$i = ((2816 + 448|0));
    while(1) {
     $693 = HEAP32[$sp$181$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa156 = $sp$181$i;$sp$181$i$lcssa = $sp$181$i;
      label = 222;
      break;
     }
     $695 = (($sp$181$i) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = ((2816 + 448|0));
      break;
     } else {
      $sp$181$i = $696;
     }
    }
    if ((label|0) == 222) {
     $698 = (($sp$181$i$lcssa) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa156>>2] = $tbase$253$i;
      $702 = (($sp$181$i$lcssa) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$252$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = (($tbase$253$i) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      if ($708) {
       $712 = 0;
      } else {
       $709 = (0 - ($706))|0;
       $710 = $709 & 7;
       $712 = $710;
      }
      $711 = (($tbase$253$i) + ($712)|0);
      $$sum110$i = (($tsize$252$i) + 8)|0;
      $713 = (($tbase$253$i) + ($$sum110$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      if ($716) {
       $719 = 0;
      } else {
       $717 = (0 - ($714))|0;
       $718 = $717 & 7;
       $719 = $718;
      }
      $$sum111$i = (($719) + ($tsize$252$i))|0;
      $720 = (($tbase$253$i) + ($$sum111$i)|0);
      $721 = $720;
      $722 = $711;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($712) + ($nb$0))|0;
      $724 = (($tbase$253$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($712) + 4)|0;
      $727 = (($tbase$253$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L335: do {
       if ($728) {
        $729 = HEAP32[((2816 + 12|0))>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[((2816 + 12|0))>>2] = $730;
        HEAP32[((2816 + 24|0))>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$253$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[((2816 + 20|0))>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[((2816 + 8|0))>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[((2816 + 8|0))>>2] = $736;
         HEAP32[((2816 + 20|0))>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$253$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$253$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$252$i) + 4)|0;
        $$sum112$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$253$i) + ($$sum112$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L343: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum122$i = (($$sum3738$i$i) + ($tsize$252$i))|0;
           $747 = (($tbase$253$i) + ($$sum122$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$252$i) + 12)|0;
           $$sum123$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$253$i) + ($$sum123$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = ((2816 + ($751<<2)|0) + 40|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = (($748) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[2816>>2]|0;
            $763 = $762 & $761;
            HEAP32[2816>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre58$i$i = (($750) + 8|0);
             $$pre$phi59$i$iZ2D = $$pre58$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = (($750) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi59$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = (($748) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi59$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum113$i = (($$sum34$i$i) + ($tsize$252$i))|0;
           $770 = (($tbase$253$i) + ($$sum113$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$252$i) + 12)|0;
           $$sum114$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$253$i) + ($$sum114$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum120$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$253$i) + ($$sum120$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum121$i = (($$sum67$i$i) + ($tsize$252$i))|0;
              $787 = (($tbase$253$i) + ($$sum121$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = (($R$0$i$i) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = (($R$0$i$i) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum115$i = (($$sum3536$i$i) + ($tsize$252$i))|0;
             $775 = (($tbase$253$i) + ($$sum115$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = (($776) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = (($773) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$252$i) + 28)|0;
           $$sum116$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$253$i) + ($$sum116$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = ((2816 + ($799<<2)|0) + 304|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[((2816 + 4|0))>>2]|0;
             $806 = $805 & $804;
             HEAP32[((2816 + 4|0))>>2] = $806;
             break L343;
            } else {
             $807 = HEAP32[((2816 + 16|0))>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = (($771) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = (($771) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L343;
             }
            }
           } while(0);
           $814 = HEAP32[((2816 + 16|0))>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = (($R$1$i$i) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum117$i = (($$sum3132$i$i) + ($tsize$252$i))|0;
           $817 = (($tbase$253$i) + ($$sum117$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = (($R$1$i$i) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = (($818) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum118$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$253$i) + ($$sum118$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[((2816 + 16|0))>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = (($R$1$i$i) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = (($824) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum119$i = (($$sum9$i$i) + ($tsize$252$i))|0;
         $830 = (($tbase$253$i) + ($$sum119$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = (($oldfirst$0$i$i) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$253$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$253$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = ((2816 + ($840<<2)|0) + 40|0);
         $842 = HEAP32[2816>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[2816>>2] = $846;
           $$sum26$pre$i$i = (($840) + 2)|0;
           $$pre$i22$i = ((2816 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i23$iZ2D = $$pre$i22$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = ((2816 + ($$sum29$i$i<<2)|0) + 40|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[((2816 + 16|0))>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = (($F4$0$i$i) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$253$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$253$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = ((2816 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$253$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$253$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$253$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[((2816 + 4|0))>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[((2816 + 4|0))>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$253$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$253$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$253$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ($I7$0$i$i|0)==(31);
        if ($892) {
         $900 = 0;
        } else {
         $893 = $I7$0$i$i >>> 1;
         $894 = (25 - ($893))|0;
         $900 = $894;
        }
        $895 = (($891) + 4|0);
        $896 = HEAP32[$895>>2]|0;
        $897 = $896 & -8;
        $898 = ($897|0)==($qsize$0$i$i|0);
        L432: do {
         if ($898) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $899 = $qsize$0$i$i << $900;
          $K8$053$i$i = $899;$T$052$i$i = $891;
          while(1) {
           $907 = $K8$053$i$i >>> 31;
           $908 = ((($T$052$i$i) + ($907<<2)|0) + 16|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$052$i$i$lcssa = $T$052$i$i;
            break;
           }
           $901 = $K8$053$i$i << 1;
           $902 = (($903) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L432;
           } else {
            $K8$053$i$i = $901;$T$052$i$i = $903;
           }
          }
          $910 = HEAP32[((2816 + 16|0))>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$253$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$052$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$253$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$253$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L335;
          }
         }
        } while(0);
        $915 = (($T$0$lcssa$i25$i) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[((2816 + 16|0))>>2]|0;
        $918 = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = ($916>>>0)>=($917>>>0);
        $or$cond$i26$i = $918 & $919;
        if ($or$cond$i26$i) {
         $920 = (($916) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$253$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$253$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$253$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $712 | 8;
      $924 = (($tbase$253$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = ((2816 + 448|0));
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = (($sp$0$i$i$i) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa152 = $925;$$lcssa153 = $928;$$lcssa154 = $929;
       break;
      }
     }
     $931 = (($sp$0$i$i$i) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i13$i = (($$lcssa153) + -47)|0;
    $$sum1$i14$i = (($$lcssa153) + -39)|0;
    $933 = (($$lcssa152) + ($$sum1$i14$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    if ($936) {
     $939 = 0;
    } else {
     $937 = (0 - ($934))|0;
     $938 = $937 & 7;
     $939 = $938;
    }
    $$sum2$i15$i = (($$sum$i13$i) + ($939))|0;
    $940 = (($$lcssa152) + ($$sum2$i15$i)|0);
    $941 = (($635) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = (($943) + 8|0);
    $945 = (($tsize$252$i) + -40)|0;
    $946 = (($tbase$253$i) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    if ($949) {
     $953 = 0;
    } else {
     $950 = (0 - ($947))|0;
     $951 = $950 & 7;
     $953 = $951;
    }
    $952 = (($tbase$253$i) + ($953)|0);
    $954 = (($945) - ($953))|0;
    HEAP32[((2816 + 24|0))>>2] = $952;
    HEAP32[((2816 + 12|0))>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($953) + 4)|0;
    $956 = (($tbase$253$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$252$i) + -36)|0;
    $957 = (($tbase$253$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[((3288 + 16|0))>>2]|0;
    HEAP32[((2816 + 28|0))>>2] = $958;
    $959 = (($943) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944+0>>2]=HEAP32[((2816 + 448|0))+0>>2]|0;HEAP32[$944+4>>2]=HEAP32[((2816 + 448|0))+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[((2816 + 448|0))+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[((2816 + 448|0))+12>>2]|0;
    HEAP32[((2816 + 448|0))>>2] = $tbase$253$i;
    HEAP32[((2816 + 452|0))>>2] = $tsize$252$i;
    HEAP32[((2816 + 460|0))>>2] = 0;
    HEAP32[((2816 + 456|0))>>2] = $944;
    $960 = (($943) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = (($943) + 32|0);
    $962 = ($961>>>0)<($$lcssa154>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = (($964) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = (($964) + 8|0);
      $966 = ($965>>>0)<($$lcssa154>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = (($635) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = ((2816 + ($977<<2)|0) + 40|0);
      $979 = HEAP32[2816>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      do {
       if ($982) {
        $983 = $979 | $980;
        HEAP32[2816>>2] = $983;
        $$sum3$pre$i$i = (($977) + 2)|0;
        $$pre$i$i = ((2816 + ($$sum3$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $978;
       } else {
        $$sum4$i$i = (($977) + 2)|0;
        $984 = ((2816 + ($$sum4$i$i<<2)|0) + 40|0);
        $985 = HEAP32[$984>>2]|0;
        $986 = HEAP32[((2816 + 16|0))>>2]|0;
        $987 = ($985>>>0)<($986>>>0);
        if (!($987)) {
         $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = (($F$0$i$i) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = (($635) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = (($635) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = ((2816 + ($I1$0$i$i<<2)|0) + 304|0);
     $1017 = (($635) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = (($635) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[((2816 + 4|0))>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[((2816 + 4|0))>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = (($635) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = (($635) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = (($635) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ($I1$0$i$i|0)==(31);
     if ($1028) {
      $1036 = 0;
     } else {
      $1029 = $I1$0$i$i >>> 1;
      $1030 = (25 - ($1029))|0;
      $1036 = $1030;
     }
     $1031 = (($1027) + 4|0);
     $1032 = HEAP32[$1031>>2]|0;
     $1033 = $1032 & -8;
     $1034 = ($1033|0)==($970|0);
     L482: do {
      if ($1034) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1035 = $970 << $1036;
       $K2$08$i$i = $1035;$T$07$i$i = $1027;
       while(1) {
        $1043 = $K2$08$i$i >>> 31;
        $1044 = ((($T$07$i$i) + ($1043<<2)|0) + 16|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa148 = $1044;$T$07$i$i$lcssa = $T$07$i$i;
         break;
        }
        $1037 = $K2$08$i$i << 1;
        $1038 = (($1039) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L482;
        } else {
         $K2$08$i$i = $1037;$T$07$i$i = $1039;
        }
       }
       $1046 = HEAP32[((2816 + 16|0))>>2]|0;
       $1047 = ($$lcssa148>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa148>>2] = $635;
        $1048 = (($635) + 24|0);
        HEAP32[$1048>>2] = $T$07$i$i$lcssa;
        $1049 = (($635) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = (($635) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L308;
       }
      }
     } while(0);
     $1051 = (($T$0$lcssa$i$i) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[((2816 + 16|0))>>2]|0;
     $1054 = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = ($1052>>>0)>=($1053>>>0);
     $or$cond$i$i = $1054 & $1055;
     if ($or$cond$i$i) {
      $1056 = (($1052) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = (($635) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = (($635) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = (($635) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[((2816 + 12|0))>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[((2816 + 12|0))>>2] = $1062;
   $1063 = HEAP32[((2816 + 24|0))>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[((2816 + 24|0))>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = (($1063) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = (($1063) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi60Z2D = 0, $$pre$phi62Z2D = 0, $$pre$phiZ2D = 0, $$pre59 = 0, $$pre61 = 0, $$sum = 0, $$sum10$pre = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$054 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$053 = 0, $T$053$lcssa = 0, $cond = 0, $cond48 = 0, $or$cond = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((2816 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((2816 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((2816 + 8|0))>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((2816 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[2816>>2]|0;
     $36 = $35 & $34;
     HEAP32[2816>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre61 = (($24) + 8|0);
     $$pre$phi62Z2D = $$pre61;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi62Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi62Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((2816 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((2816 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((2816 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((2816 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((2816 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = (($R$1) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = (($91) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[((2816 + 16|0))>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = (($R$1) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = (($97) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[((2816 + 24|0))>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[((2816 + 12|0))>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[((2816 + 12|0))>>2] = $120;
   HEAP32[((2816 + 24|0))>>2] = $p$0;
   $121 = $120 | 1;
   $122 = (($p$0) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[((2816 + 20|0))>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[((2816 + 20|0))>>2] = 0;
   HEAP32[((2816 + 8|0))>>2] = 0;
   return;
  }
  $125 = HEAP32[((2816 + 20|0))>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[((2816 + 8|0))>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[((2816 + 8|0))>>2] = $128;
   HEAP32[((2816 + 20|0))>>2] = $p$0;
   $129 = $128 | 1;
   $130 = (($p$0) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = ((2816 + ($140<<2)|0) + 40|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[((2816 + 16|0))>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = (($137) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[2816>>2]|0;
     $152 = $151 & $150;
     HEAP32[2816>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre59 = (($139) + 8|0);
     $$pre$phi60Z2D = $$pre59;
    } else {
     $154 = HEAP32[((2816 + 16|0))>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = (($139) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi60Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = (($137) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi60Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = (($R7$0) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = (($R7$0) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[((2816 + 16|0))>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[((2816 + 16|0))>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = (($166) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = (($163) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ((2816 + ($191<<2)|0) + 304|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond48 = ($R7$1|0)==(0|0);
      if ($cond48) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[((2816 + 4|0))>>2]|0;
       $198 = $197 & $196;
       HEAP32[((2816 + 4|0))>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[((2816 + 16|0))>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = (($161) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = (($161) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[((2816 + 16|0))>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = (($R7$1) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = (($R7$1) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = (($210) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[((2816 + 16|0))>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = (($R7$1) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = (($216) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = (($p$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[((2816 + 20|0))>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[((2816 + 8|0))>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = (($p$0) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = ((2816 + ($233<<2)|0) + 40|0);
  $235 = HEAP32[2816>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[2816>>2] = $239;
   $$sum10$pre = (($233) + 2)|0;
   $$pre = ((2816 + ($$sum10$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = ((2816 + ($$sum11<<2)|0) + 40|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[((2816 + 16|0))>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = (($F16$0) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = (($p$0) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = (($p$0) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = ((2816 + ($I18$0<<2)|0) + 304|0);
 $273 = (($p$0) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = (($p$0) + 16|0);
 $275 = (($p$0) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[((2816 + 4|0))>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[((2816 + 4|0))>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = (($p$0) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = (($p$0) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = (($p$0) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ($I18$0|0)==(31);
   if ($285) {
    $293 = 0;
   } else {
    $286 = $I18$0 >>> 1;
    $287 = (25 - ($286))|0;
    $293 = $287;
   }
   $288 = (($284) + 4|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $289 & -8;
   $291 = ($290|0)==($psize$1|0);
   L205: do {
    if ($291) {
     $T$0$lcssa = $284;
    } else {
     $292 = $psize$1 << $293;
     $K19$054 = $292;$T$053 = $284;
     while(1) {
      $300 = $K19$054 >>> 31;
      $301 = ((($T$053) + ($300<<2)|0) + 16|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$053$lcssa = $T$053;
       break;
      }
      $294 = $K19$054 << 1;
      $295 = (($296) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L205;
      } else {
       $K19$054 = $294;$T$053 = $296;
      }
     }
     $303 = HEAP32[((2816 + 16|0))>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = (($p$0) + 24|0);
      HEAP32[$305>>2] = $T$053$lcssa;
      $306 = (($p$0) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = (($p$0) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = (($T$0$lcssa) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[((2816 + 16|0))>>2]|0;
   $311 = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = ($309>>>0)>=($310>>>0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $313 = (($309) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = (($p$0) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = (($p$0) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = (($p$0) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[((2816 + 32|0))>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[((2816 + 32|0))>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = ((2816 + 456|0));
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = (($sp$0$i) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[((2816 + 32|0))>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 if ($4) {
  $8 = 16;
 } else {
  $5 = (($bytes) + 11)|0;
  $6 = $5 & -8;
  $8 = $6;
 }
 $7 = (($oldmem) + -8|0);
 $9 = (_try_realloc_chunk($7,$8)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = (($9) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = (($oldmem) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 if ($isdigit) {
  $4 = 1;
  $3 = $4&1;
  return ($3|0);
 }
 $0 = $c | 32;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(6);
 $4 = $2;
 $3 = $4&1;
 return ($3|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$1 = 0, $$124 = 0, $$125 = 0, $$22 = 0, $$23 = 0, $$base21 = 0, $$lcssa = 0, $$lcssa117 = 0, $$lcssa118 = 0, $$lcssa119 = 0, $$lcssa120 = 0, $$lcssa121 = 0, $$lcssa122 = 0, $$sum = 0, $$sum14 = 0, $$sum1447 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum1867 = 0, $$sum19 = 0, $$sum20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$126 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$373 = 0;
 var $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$755 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond42 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$084 = 0, $x$148 = 0, $x$268 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $279 = 0;$280 = 0;
  tempRet0 = $279;
  return ($280|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = (($6) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $13 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $13 = $12;
  }
  $14 = (_isspace($13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $$lcssa122 = $13;
   break;
  }
 }
 $16 = ($$lcssa122|0)==(45);
 do {
  if ((($$lcssa122|0) == 43) | (($$lcssa122|0) == 45)) {
   $17 = $16 << 31 >> 31;
   $18 = HEAP32[$3>>2]|0;
   $19 = HEAP32[$4>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $21 = (($18) + 1|0);
    HEAP32[$3>>2] = $21;
    $22 = HEAP8[$18>>0]|0;
    $23 = $22&255;
    $c$0 = $23;$neg$0 = $17;
    break;
   } else {
    $24 = (___shgetc($f)|0);
    $c$0 = $24;$neg$0 = $17;
    break;
   }
  } else {
   $c$0 = $$lcssa122;$neg$0 = 0;
  }
 } while(0);
 $25 = ($base|0)==(0);
 $26 = $base & -17;
 $27 = ($26|0)==(0);
 $28 = ($c$0|0)==(48);
 $or$cond5 = $27 & $28;
 do {
  if ($or$cond5) {
   $29 = HEAP32[$3>>2]|0;
   $30 = HEAP32[$4>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    $32 = (($29) + 1|0);
    HEAP32[$3>>2] = $32;
    $33 = HEAP8[$29>>0]|0;
    $34 = $33&255;
    $37 = $34;
   } else {
    $35 = (___shgetc($f)|0);
    $37 = $35;
   }
   $36 = $37 | 32;
   $38 = ($36|0)==(120);
   if (!($38)) {
    if ($25) {
     $$125 = 8;$c$126 = $37;
     label = 46;
     break;
    } else {
     $$1 = $base;$c$1 = $37;
     label = 32;
     break;
    }
   }
   $39 = HEAP32[$3>>2]|0;
   $40 = HEAP32[$4>>2]|0;
   $41 = ($39>>>0)<($40>>>0);
   if ($41) {
    $42 = (($39) + 1|0);
    HEAP32[$3>>2] = $42;
    $43 = HEAP8[$39>>0]|0;
    $44 = $43&255;
    $46 = $44;
   } else {
    $45 = (___shgetc($f)|0);
    $46 = $45;
   }
   $$sum20 = (($46) + 1)|0;
   $47 = (3312 + ($$sum20)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48&255)>(15);
   if ($49) {
    $50 = HEAP32[$4>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = HEAP32[$3>>2]|0;
     $53 = (($52) + -1|0);
     HEAP32[$3>>2] = $53;
    }
    $54 = ($pok|0)==(0);
    if ($54) {
     ___shlim($f,0);
     $279 = 0;$280 = 0;
     tempRet0 = $279;
     return ($280|0);
    }
    if ($51) {
     $279 = 0;$280 = 0;
     tempRet0 = $279;
     return ($280|0);
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = (($55) + -1|0);
    HEAP32[$3>>2] = $56;
    $279 = 0;$280 = 0;
    tempRet0 = $279;
    return ($280|0);
   } else {
    $$125 = 16;$c$126 = $46;
    label = 46;
   }
  } else {
   $$base21 = $25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $57 = (3312 + ($$sum)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59>>>0)<($$base21>>>0);
   if ($60) {
    $$1 = $$base21;$c$1 = $c$0;
    label = 32;
   } else {
    $61 = HEAP32[$4>>2]|0;
    $62 = ($61|0)==(0|0);
    if (!($62)) {
     $63 = HEAP32[$3>>2]|0;
     $64 = (($63) + -1|0);
     HEAP32[$3>>2] = $64;
    }
    ___shlim($f,0);
    $65 = (___errno_location()|0);
    HEAP32[$65>>2] = 22;
    $279 = 0;$280 = 0;
    tempRet0 = $279;
    return ($280|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $66 = ($$1|0)==(10);
  if ($66) {
   $67 = (($c$1) + -48)|0;
   $68 = ($67>>>0)<(10);
   if ($68) {
    $71 = $67;$x$084 = 0;
    while(1) {
     $69 = ($x$084*10)|0;
     $70 = (($69) + ($71))|0;
     $72 = HEAP32[$3>>2]|0;
     $73 = HEAP32[$4>>2]|0;
     $74 = ($72>>>0)<($73>>>0);
     if ($74) {
      $75 = (($72) + 1|0);
      HEAP32[$3>>2] = $75;
      $76 = HEAP8[$72>>0]|0;
      $77 = $76&255;
      $c$2$be = $77;
     } else {
      $78 = (___shgetc($f)|0);
      $c$2$be = $78;
     }
     $79 = (($c$2$be) + -48)|0;
     $80 = ($79>>>0)<(10);
     $81 = ($70>>>0)<(429496729);
     $$ = $80 & $81;
     if ($$) {
      $71 = $79;$x$084 = $70;
     } else {
      $$lcssa121 = $70;$c$2$be$lcssa = $c$2$be;
      break;
     }
    }
    $281 = $$lcssa121;$282 = 0;$c$2$lcssa = $c$2$be$lcssa;
   } else {
    $281 = 0;$282 = 0;$c$2$lcssa = $c$1;
   }
   $82 = (($c$2$lcssa) + -48)|0;
   $83 = ($82>>>0)<(10);
   if ($83) {
    $84 = $281;$85 = $282;$88 = $82;$c$373 = $c$2$lcssa;
    while(1) {
     $86 = (___muldi3(($84|0),($85|0),10,0)|0);
     $87 = tempRet0;
     $89 = ($88|0)<(0);
     $90 = $89 << 31 >> 31;
     $91 = $88 ^ -1;
     $92 = $90 ^ -1;
     $93 = ($87>>>0)>($92>>>0);
     $94 = ($86>>>0)>($91>>>0);
     $95 = ($87|0)==($92|0);
     $96 = $95 & $94;
     $97 = $93 | $96;
     if ($97) {
      $$lcssa = $88;$283 = $84;$284 = $85;$c$3$lcssa = $c$373;
      break;
     }
     $98 = (_i64Add(($86|0),($87|0),($88|0),($90|0))|0);
     $99 = tempRet0;
     $100 = HEAP32[$3>>2]|0;
     $101 = HEAP32[$4>>2]|0;
     $102 = ($100>>>0)<($101>>>0);
     if ($102) {
      $103 = (($100) + 1|0);
      HEAP32[$3>>2] = $103;
      $104 = HEAP8[$100>>0]|0;
      $105 = $104&255;
      $c$3$be = $105;
     } else {
      $106 = (___shgetc($f)|0);
      $c$3$be = $106;
     }
     $107 = (($c$3$be) + -48)|0;
     $108 = ($107>>>0)<(10);
     $109 = ($99>>>0)<(429496729);
     $110 = ($98>>>0)<(2576980378);
     $111 = ($99|0)==(429496729);
     $112 = $111 & $110;
     $113 = $109 | $112;
     $or$cond7 = $108 & $113;
     if ($or$cond7) {
      $84 = $98;$85 = $99;$88 = $107;$c$373 = $c$3$be;
     } else {
      $$lcssa = $107;$283 = $98;$284 = $99;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $114 = ($$lcssa>>>0)>(9);
    if ($114) {
     $252 = $284;$254 = $283;
    } else {
     $$124 = 10;$285 = $283;$286 = $284;$c$8 = $c$3$lcssa;
     label = 72;
    }
   } else {
    $252 = $282;$254 = $281;
   }
  } else {
   $$125 = $$1;$c$126 = $c$1;
   label = 46;
  }
 }
 L69: do {
  if ((label|0) == 46) {
   $115 = (($$125) + -1)|0;
   $116 = $115 & $$125;
   $117 = ($116|0)==(0);
   if ($117) {
    $122 = ($$125*23)|0;
    $123 = $122 >>> 5;
    $124 = $123 & 7;
    $125 = (3576 + ($124)|0);
    $126 = HEAP8[$125>>0]|0;
    $127 = $126 << 24 >> 24;
    $$sum1447 = (($c$126) + 1)|0;
    $128 = (3312 + ($$sum1447)|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $131 = ($130>>>0)<($$125>>>0);
    if ($131) {
     $134 = $130;$x$148 = 0;
     while(1) {
      $132 = $x$148 << $127;
      $133 = $134 | $132;
      $135 = HEAP32[$3>>2]|0;
      $136 = HEAP32[$4>>2]|0;
      $137 = ($135>>>0)<($136>>>0);
      if ($137) {
       $138 = (($135) + 1|0);
       HEAP32[$3>>2] = $138;
       $139 = HEAP8[$135>>0]|0;
       $140 = $139&255;
       $c$4$be = $140;
      } else {
       $141 = (___shgetc($f)|0);
       $c$4$be = $141;
      }
      $$sum14 = (($c$4$be) + 1)|0;
      $142 = (3312 + ($$sum14)|0);
      $143 = HEAP8[$142>>0]|0;
      $144 = $143&255;
      $145 = ($144>>>0)<($$125>>>0);
      $146 = ($133>>>0)<(134217728);
      $$22 = $146 & $145;
      if ($$22) {
       $134 = $144;$x$148 = $133;
      } else {
       $$lcssa117 = $133;$$lcssa118 = $143;$c$4$be$lcssa = $c$4$be;
       break;
      }
     }
     $150 = $$lcssa118;$152 = 0;$154 = $$lcssa117;$c$4$lcssa = $c$4$be$lcssa;
    } else {
     $150 = $129;$152 = 0;$154 = 0;$c$4$lcssa = $c$126;
    }
    $147 = (_bitshift64Lshr(-1,-1,($127|0))|0);
    $148 = tempRet0;
    $149 = $150&255;
    $151 = ($149>>>0)>=($$125>>>0);
    $153 = ($152>>>0)>($148>>>0);
    $155 = ($154>>>0)>($147>>>0);
    $156 = ($152|0)==($148|0);
    $157 = $156 & $155;
    $158 = $153 | $157;
    $or$cond42 = $151 | $158;
    if ($or$cond42) {
     $$124 = $$125;$285 = $154;$286 = $152;$c$8 = $c$4$lcssa;
     label = 72;
     break;
    } else {
     $159 = $154;$160 = $152;$164 = $150;
    }
    while(1) {
     $161 = (_bitshift64Shl(($159|0),($160|0),($127|0))|0);
     $162 = tempRet0;
     $163 = $164&255;
     $165 = $163 | $161;
     $166 = HEAP32[$3>>2]|0;
     $167 = HEAP32[$4>>2]|0;
     $168 = ($166>>>0)<($167>>>0);
     if ($168) {
      $169 = (($166) + 1|0);
      HEAP32[$3>>2] = $169;
      $170 = HEAP8[$166>>0]|0;
      $171 = $170&255;
      $c$5$be = $171;
     } else {
      $172 = (___shgetc($f)|0);
      $c$5$be = $172;
     }
     $$sum15 = (($c$5$be) + 1)|0;
     $173 = (3312 + ($$sum15)|0);
     $174 = HEAP8[$173>>0]|0;
     $175 = $174&255;
     $176 = ($175>>>0)>=($$125>>>0);
     $177 = ($162>>>0)>($148>>>0);
     $178 = ($165>>>0)>($147>>>0);
     $179 = ($162|0)==($148|0);
     $180 = $179 & $178;
     $181 = $177 | $180;
     $or$cond = $176 | $181;
     if ($or$cond) {
      $$124 = $$125;$285 = $165;$286 = $162;$c$8 = $c$5$be;
      label = 72;
      break L69;
     } else {
      $159 = $165;$160 = $162;$164 = $174;
     }
    }
   }
   $$sum1867 = (($c$126) + 1)|0;
   $118 = (3312 + ($$sum1867)|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $121 = ($120>>>0)<($$125>>>0);
   if ($121) {
    $184 = $120;$x$268 = 0;
    while(1) {
     $182 = Math_imul($x$268, $$125)|0;
     $183 = (($184) + ($182))|0;
     $185 = HEAP32[$3>>2]|0;
     $186 = HEAP32[$4>>2]|0;
     $187 = ($185>>>0)<($186>>>0);
     if ($187) {
      $188 = (($185) + 1|0);
      HEAP32[$3>>2] = $188;
      $189 = HEAP8[$185>>0]|0;
      $190 = $189&255;
      $c$6$be = $190;
     } else {
      $191 = (___shgetc($f)|0);
      $c$6$be = $191;
     }
     $$sum18 = (($c$6$be) + 1)|0;
     $192 = (3312 + ($$sum18)|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = $193&255;
     $195 = ($194>>>0)<($$125>>>0);
     $196 = ($183>>>0)<(119304647);
     $$23 = $196 & $195;
     if ($$23) {
      $184 = $194;$x$268 = $183;
     } else {
      $$lcssa119 = $183;$$lcssa120 = $193;$c$6$be$lcssa = $c$6$be;
      break;
     }
    }
    $198 = $$lcssa120;$287 = $$lcssa119;$288 = 0;$c$6$lcssa = $c$6$be$lcssa;
   } else {
    $198 = $119;$287 = 0;$288 = 0;$c$6$lcssa = $c$126;
   }
   $197 = $198&255;
   $199 = ($197>>>0)<($$125>>>0);
   if ($199) {
    $200 = (___udivdi3(-1,-1,($$125|0),0)|0);
    $201 = tempRet0;
    $202 = $288;$204 = $287;$212 = $198;$c$755 = $c$6$lcssa;
    while(1) {
     $203 = ($202>>>0)>($201>>>0);
     $205 = ($204>>>0)>($200>>>0);
     $206 = ($202|0)==($201|0);
     $207 = $206 & $205;
     $208 = $203 | $207;
     if ($208) {
      $$124 = $$125;$285 = $204;$286 = $202;$c$8 = $c$755;
      label = 72;
      break L69;
     }
     $209 = (___muldi3(($204|0),($202|0),($$125|0),0)|0);
     $210 = tempRet0;
     $211 = $212&255;
     $213 = $211 ^ -1;
     $214 = ($210>>>0)>(4294967295);
     $215 = ($209>>>0)>($213>>>0);
     $216 = ($210|0)==(-1);
     $217 = $216 & $215;
     $218 = $214 | $217;
     if ($218) {
      $$124 = $$125;$285 = $204;$286 = $202;$c$8 = $c$755;
      label = 72;
      break L69;
     }
     $219 = (_i64Add(($211|0),0,($209|0),($210|0))|0);
     $220 = tempRet0;
     $221 = HEAP32[$3>>2]|0;
     $222 = HEAP32[$4>>2]|0;
     $223 = ($221>>>0)<($222>>>0);
     if ($223) {
      $224 = (($221) + 1|0);
      HEAP32[$3>>2] = $224;
      $225 = HEAP8[$221>>0]|0;
      $226 = $225&255;
      $c$7$be = $226;
     } else {
      $227 = (___shgetc($f)|0);
      $c$7$be = $227;
     }
     $$sum19 = (($c$7$be) + 1)|0;
     $228 = (3312 + ($$sum19)|0);
     $229 = HEAP8[$228>>0]|0;
     $230 = $229&255;
     $231 = ($230>>>0)<($$125>>>0);
     if ($231) {
      $202 = $220;$204 = $219;$212 = $229;$c$755 = $c$7$be;
     } else {
      $$124 = $$125;$285 = $219;$286 = $220;$c$8 = $c$7$be;
      label = 72;
      break;
     }
    }
   } else {
    $$124 = $$125;$285 = $287;$286 = $288;$c$8 = $c$6$lcssa;
    label = 72;
   }
  }
 } while(0);
 if ((label|0) == 72) {
  $$sum16 = (($c$8) + 1)|0;
  $232 = (3312 + ($$sum16)|0);
  $233 = HEAP8[$232>>0]|0;
  $234 = $233&255;
  $235 = ($234>>>0)<($$124>>>0);
  if ($235) {
   while(1) {
    $236 = HEAP32[$3>>2]|0;
    $237 = HEAP32[$4>>2]|0;
    $238 = ($236>>>0)<($237>>>0);
    if ($238) {
     $239 = (($236) + 1|0);
     HEAP32[$3>>2] = $239;
     $240 = HEAP8[$236>>0]|0;
     $241 = $240&255;
     $c$9$be = $241;
    } else {
     $242 = (___shgetc($f)|0);
     $c$9$be = $242;
    }
    $$sum17 = (($c$9$be) + 1)|0;
    $243 = (3312 + ($$sum17)|0);
    $244 = HEAP8[$243>>0]|0;
    $245 = $244&255;
    $246 = ($245>>>0)<($$124>>>0);
    if (!($246)) {
     break;
    }
   }
   $247 = (___errno_location()|0);
   HEAP32[$247>>2] = 34;
   $252 = $1;$254 = $0;
  } else {
   $252 = $286;$254 = $285;
  }
 }
 $248 = HEAP32[$4>>2]|0;
 $249 = ($248|0)==(0|0);
 if (!($249)) {
  $250 = HEAP32[$3>>2]|0;
  $251 = (($250) + -1|0);
  HEAP32[$3>>2] = $251;
 }
 $253 = ($252>>>0)<($1>>>0);
 $255 = ($254>>>0)<($0>>>0);
 $256 = ($252|0)==($1|0);
 $257 = $256 & $255;
 $258 = $253 | $257;
 if (!($258)) {
  $259 = $0 & 1;
  $260 = ($259|0)!=(0);
  $261 = (0)!=(0);
  $262 = $260 | $261;
  $263 = ($neg$0|0)!=(0);
  $or$cond12 = $262 | $263;
  if (!($or$cond12)) {
   $264 = (___errno_location()|0);
   HEAP32[$264>>2] = 34;
   $265 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $266 = tempRet0;
   $279 = $266;$280 = $265;
   tempRet0 = $279;
   return ($280|0);
  }
  $267 = ($252>>>0)>($1>>>0);
  $268 = ($254>>>0)>($0>>>0);
  $269 = ($252|0)==($1|0);
  $270 = $269 & $268;
  $271 = $267 | $270;
  if ($271) {
   $272 = (___errno_location()|0);
   HEAP32[$272>>2] = 34;
   $279 = $1;$280 = $0;
   tempRet0 = $279;
   return ($280|0);
  }
 }
 $273 = ($neg$0|0)<(0);
 $274 = $273 << 31 >> 31;
 $275 = $254 ^ $neg$0;
 $276 = $252 ^ $274;
 $277 = (_i64Subtract(($275|0),($276|0),($neg$0|0),($274|0))|0);
 $278 = tempRet0;
 $279 = $278;$280 = $277;
 tempRet0 = $279;
 return ($280|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$0$i27 = 0.0, $$012$i = 0, $$013$i = 0, $$01335$i = 0, $$01336$i = 0, $$07$i = 0, $$0711$i = 0, $$0712$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$14$i = 0, $$2$i = 0, $$21$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3131$i = 0, $$in = 0, $$k$0$i = 0;
 var $$lcssa = 0, $$lcssa207 = 0, $$lcssa207$lcssa = 0, $$lcssa208 = 0, $$lcssa208$lcssa = 0, $$lcssa221 = 0, $$lcssa222 = 0, $$lcssa232 = 0, $$lcssa59$i = 0, $$lnz$0$i = 0, $$neg41$i = 0, $$old$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i18 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us102$i = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0.0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0.0;
 var $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0.0, $417 = 0.0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0.0, $458 = 0.0;
 var $459 = 0.0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0.0, $472 = 0, $473 = 0.0, $474 = 0.0, $475 = 0, $476 = 0.0;
 var $477 = 0, $478 = 0.0, $479 = 0.0, $48 = 0.0, $480 = 0, $481 = 0, $482 = 0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0.0, $497 = 0.0, $498 = 0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0.0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0.0, $663 = 0, $664 = 0.0, $665 = 0.0, $666 = 0, $667 = 0, $668 = 0, $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0.0, $673 = 0, $674 = 0;
 var $675 = 0.0, $676 = 0, $677 = 0.0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0.0, $685 = 0, $686 = 0, $687 = 0, $688 = 0.0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0.0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0.0, $701 = 0, $702 = 0, $703 = 0.0, $704 = 0.0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa186$i = 0, $a$0110$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph47$i = 0, $a$3$i = 0, $a$3$i$lcssa199 = 0, $a$3$i$ph = 0, $a$3$i200 = 0, $a$3$ph$i = 0, $a$487$i = 0;
 var $a$5$i = 0, $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i24 = 0.0, $bits$0$ph = 0, $brmerge = 0, $brmerge136 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$186 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$4 = 0, $c$4$1 = 0, $c$6 = 0, $carry$0112$i = 0;
 var $carry1$0$us$i = 0, $carry1$0$us98$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us$i$lcssa = 0, $carry1$1$us103$i = 0, $carry1$1$us103$i$lcssa = 0, $carry3$090$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$033$i = 0, $denormal$034$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us93$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0;
 var $e2$1$i197 = 0, $e2$1$ph$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond175$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa193 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa230 = 0, $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3127$i = 0, $gotdig$3127$i$lcssa = 0;
 var $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1128$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$085 = 0, $i$1 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0130$i = 0, $j$0130$i$lcssa = 0, $j$076$i = 0;
 var $j$077$i = 0, $j$078$i = 0, $j$2$i = 0, $j$3119$i = 0, $k$0$lcssa$i = 0, $k$0129$i = 0, $k$0129$i$lcssa = 0, $k$072$i = 0, $k$073$i = 0, $k$074$i = 0, $k$2$i = 0, $k$3$i = 0, $k$4111$i = 0, $k$5$in$us$i = 0, $k$5$in$us97$i = 0, $k$5$us$i = 0, $k$5$us99$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us105$i = 0, $k$688$i = 0;
 var $lnz$0$lcssa$i = 0, $lnz$0126$i = 0, $lnz$0126$i$lcssa = 0, $lnz$066$i = 0, $lnz$067$i = 0, $lnz$068$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i17 = 0, $or$cond11$i = 0, $or$cond11123$i = 0, $or$cond16$i = 0, $or$cond18$i = 0, $or$cond19$i = 0, $or$cond191$i = 0, $or$cond192$i = 0, $or$cond20$us$i = 0;
 var $or$cond20$us104$i = 0, $or$cond22$i = 0, $or$cond23$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond9$i = 0, $or$cond9$i26 = 0, $or$cond9$not = 0, $rp$0$lcssa187$i = 0, $rp$0109$i = 0, $rp$1$i19 = 0, $rp$1$i19$lcssa = 0, $rp$2$ph45$i = 0, $rp$3$i$ph = 0, $rp$3$ph43$i = 0, $rp$486$i = 0, $rp$5$i = 0;
 var $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$325$i = 0, $x$4$lcssa$i = 0, $x$420$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i25 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$321$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph46$i = 0, $z$1$us$i = 0, $z$1$us94$i = 0, $z$2$us$i = 0, $z$2$us96$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us$i$lcssa = 0, $z$3$us106$i = 0;
 var $z$3$us106$i$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $x$i = sp;
 if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $$lcssa232 = $9;
   break;
  }
 }
 $12 = ($$lcssa232|0)==(45);
 do {
  if ((($$lcssa232|0) == 43) | (($$lcssa232|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $$lcssa232;$sign$0 = 1;
  }
 } while(0);
 $c$186 = $c$0;$i$085 = 0;
 while(1) {
  $23 = $c$186 | 32;
  $24 = (3592 + ($i$085)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$186;$i$0$lcssa = $i$085;
   break;
  }
  $28 = ($i$085>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$186;
   }
  } while(0);
  $36 = (($i$085) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$186 = $c$2;$i$085 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)>(3);
   $39 = ($pok|0)!=(0);
   $or$cond5 = $39 & $38;
   if ($or$cond5) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $51 = ($i$0$lcssa|0)==(0);
   do {
    if ($51) {
     $52 = $c$1$lcssa | 32;
     $53 = ($52|0)==(110);
     if ($53) {
      $54 = HEAP32[$0>>2]|0;
      $55 = HEAP32[$1>>2]|0;
      $56 = ($54>>>0)<($55>>>0);
      if ($56) {
       $57 = (($54) + 1|0);
       HEAP32[$0>>2] = $57;
       $58 = HEAP8[$54>>0]|0;
       $59 = $58&255;
       $c$4 = $59;
      } else {
       $60 = (___shgetc($f)|0);
       $c$4 = $60;
      }
      $61 = $c$4 | 32;
      $62 = ($61|0)==(97);
      if (!($62)) {
       break;
      }
      $710 = HEAP32[$0>>2]|0;
      $711 = HEAP32[$1>>2]|0;
      $712 = ($710>>>0)<($711>>>0);
      if ($712) {
       $714 = (($710) + 1|0);
       HEAP32[$0>>2] = $714;
       $715 = HEAP8[$710>>0]|0;
       $716 = $715&255;
       $c$4$1 = $716;
      } else {
       $713 = (___shgetc($f)|0);
       $c$4$1 = $713;
      }
      $717 = $c$4$1 | 32;
      $718 = ($717|0)==(110);
      if (!($718)) {
       break;
      }
      $63 = HEAP32[$0>>2]|0;
      $64 = HEAP32[$1>>2]|0;
      $65 = ($63>>>0)<($64>>>0);
      if ($65) {
       $66 = (($63) + 1|0);
       HEAP32[$0>>2] = $66;
       $67 = HEAP8[$63>>0]|0;
       $68 = $67&255;
       $70 = $68;
      } else {
       $69 = (___shgetc($f)|0);
       $70 = $69;
      }
      $71 = ($70|0)==(40);
      if ($71) {
       $i$4 = 1;
      } else {
       $72 = HEAP32[$1>>2]|0;
       $73 = ($72|0)==(0|0);
       if ($73) {
        $$0 = nan;
        STACKTOP = sp;return (+$$0);
       }
       $74 = HEAP32[$0>>2]|0;
       $75 = (($74) + -1|0);
       HEAP32[$0>>2] = $75;
       $$0 = nan;
       STACKTOP = sp;return (+$$0);
      }
      while(1) {
       $76 = HEAP32[$0>>2]|0;
       $77 = HEAP32[$1>>2]|0;
       $78 = ($76>>>0)<($77>>>0);
       if ($78) {
        $79 = (($76) + 1|0);
        HEAP32[$0>>2] = $79;
        $80 = HEAP8[$76>>0]|0;
        $81 = $80&255;
        $84 = $81;
       } else {
        $82 = (___shgetc($f)|0);
        $84 = $82;
       }
       $83 = (($84) + -48)|0;
       $85 = ($83>>>0)<(10);
       $86 = (($84) + -65)|0;
       $87 = ($86>>>0)<(26);
       $or$cond = $85 | $87;
       if (!($or$cond)) {
        $88 = (($84) + -97)|0;
        $89 = ($88>>>0)<(26);
        $90 = ($84|0)==(95);
        $or$cond7 = $90 | $89;
        if (!($or$cond7)) {
         $$lcssa = $84;$i$4$lcssa = $i$4;
         break;
        }
       }
       $102 = (($i$4) + 1)|0;
       $i$4 = $102;
      }
      $91 = ($$lcssa|0)==(41);
      if ($91) {
       $$0 = nan;
       STACKTOP = sp;return (+$$0);
      }
      $92 = HEAP32[$1>>2]|0;
      $93 = ($92|0)==(0|0);
      if (!($93)) {
       $94 = HEAP32[$0>>2]|0;
       $95 = (($94) + -1|0);
       HEAP32[$0>>2] = $95;
      }
      if (!($39)) {
       $97 = (___errno_location()|0);
       HEAP32[$97>>2] = 22;
       ___shlim($f,0);
       $$0 = 0.0;
       STACKTOP = sp;return (+$$0);
      }
      $96 = ($i$4$lcssa|0)==(0);
      $brmerge136 = $96 | $93;
      if ($brmerge136) {
       $$0 = nan;
       STACKTOP = sp;return (+$$0);
      } else {
       $$in = $i$4$lcssa;
      }
      while(1) {
       $98 = (($$in) + -1)|0;
       $99 = HEAP32[$0>>2]|0;
       $100 = (($99) + -1|0);
       HEAP32[$0>>2] = $100;
       $101 = ($98|0)==(0);
       if ($101) {
        $$0 = nan;
        break;
       } else {
        $$in = $98;
       }
      }
      STACKTOP = sp;return (+$$0);
     }
     $108 = ($c$1$lcssa|0)==(48);
     do {
      if ($108) {
       $109 = HEAP32[$0>>2]|0;
       $110 = HEAP32[$1>>2]|0;
       $111 = ($109>>>0)<($110>>>0);
       if ($111) {
        $112 = (($109) + 1|0);
        HEAP32[$0>>2] = $112;
        $113 = HEAP8[$109>>0]|0;
        $114 = $113&255;
        $117 = $114;
       } else {
        $115 = (___shgetc($f)|0);
        $117 = $115;
       }
       $116 = $117 | 32;
       $118 = ($116|0)==(120);
       if (!($118)) {
        $320 = HEAP32[$1>>2]|0;
        $321 = ($320|0)==(0|0);
        if ($321) {
         $c$6 = 48;
         break;
        }
        $322 = HEAP32[$0>>2]|0;
        $323 = (($322) + -1|0);
        HEAP32[$0>>2] = $323;
        $c$6 = 48;
        break;
       }
       $119 = HEAP32[$0>>2]|0;
       $120 = HEAP32[$1>>2]|0;
       $121 = ($119>>>0)<($120>>>0);
       if ($121) {
        $122 = (($119) + 1|0);
        HEAP32[$0>>2] = $122;
        $123 = HEAP8[$119>>0]|0;
        $124 = $123&255;
        $c$0$i = $124;$gotdig$0$i = 0;
       } else {
        $125 = (___shgetc($f)|0);
        $c$0$i = $125;$gotdig$0$i = 0;
       }
       while(1) {
        if ((($c$0$i|0) == 46)) {
         $gotdig$0$i$lcssa193 = $gotdig$0$i;
         label = 68;
         break;
        } else if (!((($c$0$i|0) == 48))) {
         $163 = 0;$165 = 0;$719 = 0;$720 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
         break;
        }
        $126 = HEAP32[$0>>2]|0;
        $127 = HEAP32[$1>>2]|0;
        $128 = ($126>>>0)<($127>>>0);
        if ($128) {
         $129 = (($126) + 1|0);
         HEAP32[$0>>2] = $129;
         $130 = HEAP8[$126>>0]|0;
         $131 = $130&255;
         $c$0$i = $131;$gotdig$0$i = 1;
         continue;
        } else {
         $132 = (___shgetc($f)|0);
         $c$0$i = $132;$gotdig$0$i = 1;
         continue;
        }
       }
       if ((label|0) == 68) {
        $133 = HEAP32[$0>>2]|0;
        $134 = HEAP32[$1>>2]|0;
        $135 = ($133>>>0)<($134>>>0);
        if ($135) {
         $136 = (($133) + 1|0);
         HEAP32[$0>>2] = $136;
         $137 = HEAP8[$133>>0]|0;
         $138 = $137&255;
         $c$1$ph$i = $138;
        } else {
         $139 = (___shgetc($f)|0);
         $c$1$ph$i = $139;
        }
        $140 = ($c$1$ph$i|0)==(48);
        if ($140) {
         $148 = 0;$149 = 0;
         while(1) {
          $141 = HEAP32[$0>>2]|0;
          $142 = HEAP32[$1>>2]|0;
          $143 = ($141>>>0)<($142>>>0);
          if ($143) {
           $144 = (($141) + 1|0);
           HEAP32[$0>>2] = $144;
           $145 = HEAP8[$141>>0]|0;
           $146 = $145&255;
           $152 = $146;
          } else {
           $147 = (___shgetc($f)|0);
           $152 = $147;
          }
          $150 = (_i64Add(($148|0),($149|0),-1,-1)|0);
          $151 = tempRet0;
          $153 = ($152|0)==(48);
          if ($153) {
           $148 = $150;$149 = $151;
          } else {
           $163 = 0;$165 = 0;$719 = $150;$720 = $151;$c$2$i = $152;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
           break;
          }
         }
        } else {
         $163 = 0;$165 = 0;$719 = 0;$720 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i$lcssa193;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        }
       }
       L115: while(1) {
        $154 = (($c$2$i) + -48)|0;
        $155 = ($154>>>0)<(10);
        do {
         if ($155) {
          $d$0$i = $154;
          label = 81;
         } else {
          $156 = $c$2$i | 32;
          $157 = (($156) + -97)|0;
          $158 = ($157>>>0)<(6);
          $159 = ($c$2$i|0)==(46);
          $or$cond6$i = $159 | $158;
          if (!($or$cond6$i)) {
           $207 = $719;$208 = $165;$210 = $720;$211 = $163;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break L115;
          }
          if ($159) {
           $160 = ($gotrad$0$i|0)==(0);
           if ($160) {
            $721 = $165;$722 = $163;$723 = $165;$724 = $163;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
            break;
           } else {
            $207 = $719;$208 = $165;$210 = $720;$211 = $163;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
            break L115;
           }
          } else {
           $161 = ($c$2$i|0)>(57);
           $162 = (($156) + -87)|0;
           $$$i = $161 ? $162 : $154;
           $d$0$i = $$$i;
           label = 81;
           break;
          }
         }
        } while(0);
        if ((label|0) == 81) {
         label = 0;
         $164 = ($163|0)<(0);
         $166 = ($165>>>0)<(8);
         $167 = ($163|0)==(0);
         $168 = $167 & $166;
         $169 = $164 | $168;
         do {
          if ($169) {
           $170 = $x$0$i << 4;
           $171 = (($d$0$i) + ($170))|0;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $171;$y$1$i = $y$0$i;
          } else {
           $172 = ($163|0)<(0);
           $173 = ($165>>>0)<(14);
           $174 = ($163|0)==(0);
           $175 = $174 & $173;
           $176 = $172 | $175;
           if ($176) {
            $177 = (+($d$0$i|0));
            $178 = $scale$0$i * 0.0625;
            $179 = $178 * $177;
            $180 = $y$0$i + $179;
            $gottail$1$i = $gottail$0$i;$scale$1$i = $178;$x$1$i = $x$0$i;$y$1$i = $180;
            break;
           }
           $181 = ($d$0$i|0)==(0);
           $182 = ($gottail$0$i|0)!=(0);
           $or$cond$i = $182 | $181;
           if ($or$cond$i) {
            $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
           } else {
            $183 = $scale$0$i * 0.5;
            $184 = $y$0$i + $183;
            $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $184;
           }
          }
         } while(0);
         $185 = (_i64Add(($165|0),($163|0),1,0)|0);
         $186 = tempRet0;
         $721 = $719;$722 = $720;$723 = $185;$724 = $186;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
        }
        $187 = HEAP32[$0>>2]|0;
        $188 = HEAP32[$1>>2]|0;
        $189 = ($187>>>0)<($188>>>0);
        if ($189) {
         $190 = (($187) + 1|0);
         HEAP32[$0>>2] = $190;
         $191 = HEAP8[$187>>0]|0;
         $192 = $191&255;
         $163 = $724;$165 = $723;$719 = $721;$720 = $722;$c$2$i = $192;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
         continue;
        } else {
         $193 = (___shgetc($f)|0);
         $163 = $724;$165 = $723;$719 = $721;$720 = $722;$c$2$i = $193;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
         continue;
        }
       }
       $194 = ($gotdig$2$i$lcssa|0)==(0);
       if ($194) {
        $195 = HEAP32[$1>>2]|0;
        $196 = ($195|0)==(0|0);
        if (!($196)) {
         $197 = HEAP32[$0>>2]|0;
         $198 = (($197) + -1|0);
         HEAP32[$0>>2] = $198;
        }
        $199 = ($pok|0)==(0);
        if ($199) {
         ___shlim($f,0);
        } else {
         if (!($196)) {
          $200 = HEAP32[$0>>2]|0;
          $201 = (($200) + -1|0);
          HEAP32[$0>>2] = $201;
          $202 = ($gotrad$0$i$lcssa|0)==(0);
          if (!($202)) {
           $203 = (($200) + -2|0);
           HEAP32[$0>>2] = $203;
          }
         }
        }
        $204 = (+($sign$0|0));
        $205 = $204 * 0.0;
        $$0 = $205;
        STACKTOP = sp;return (+$$0);
       }
       $206 = ($gotrad$0$i$lcssa|0)==(0);
       $209 = $206 ? $208 : $207;
       $212 = $206 ? $211 : $210;
       $213 = ($211|0)<(0);
       $214 = ($208>>>0)<(8);
       $215 = ($211|0)==(0);
       $216 = $215 & $214;
       $217 = $213 | $216;
       if ($217) {
        $219 = $208;$220 = $211;$x$325$i = $x$0$i$lcssa;
        while(1) {
         $218 = $x$325$i << 4;
         $221 = (_i64Add(($219|0),($220|0),1,0)|0);
         $222 = tempRet0;
         $223 = ($222|0)<(0);
         $224 = ($221>>>0)<(8);
         $225 = ($222|0)==(0);
         $226 = $225 & $224;
         $227 = $223 | $226;
         if ($227) {
          $219 = $221;$220 = $222;$x$325$i = $218;
         } else {
          $x$3$lcssa$i = $218;
          break;
         }
        }
       } else {
        $x$3$lcssa$i = $x$0$i$lcssa;
       }
       $228 = $c$2$lcssa$i | 32;
       $229 = ($228|0)==(112);
       do {
        if ($229) {
         $230 = (_scanexp($f,$pok)|0);
         $231 = tempRet0;
         $232 = ($230|0)==(0);
         $233 = ($231|0)==(-2147483648);
         $234 = $232 & $233;
         if ($234) {
          $235 = ($pok|0)==(0);
          if ($235) {
           ___shlim($f,0);
           $$0 = 0.0;
           STACKTOP = sp;return (+$$0);
          } else {
           $236 = HEAP32[$1>>2]|0;
           $237 = ($236|0)==(0|0);
           if ($237) {
            $248 = 0;$249 = 0;
            break;
           }
           $238 = HEAP32[$0>>2]|0;
           $239 = (($238) + -1|0);
           HEAP32[$0>>2] = $239;
           $248 = 0;$249 = 0;
           break;
          }
         } else {
          $248 = $230;$249 = $231;
         }
        } else {
         $240 = HEAP32[$1>>2]|0;
         $241 = ($240|0)==(0|0);
         if ($241) {
          $248 = 0;$249 = 0;
         } else {
          $242 = HEAP32[$0>>2]|0;
          $243 = (($242) + -1|0);
          HEAP32[$0>>2] = $243;
          $248 = 0;$249 = 0;
         }
        }
       } while(0);
       $244 = (_bitshift64Shl(($209|0),($212|0),2)|0);
       $245 = tempRet0;
       $246 = (_i64Add(($244|0),($245|0),-32,-1)|0);
       $247 = tempRet0;
       $250 = (_i64Add(($246|0),($247|0),($248|0),($249|0))|0);
       $251 = tempRet0;
       $252 = ($x$3$lcssa$i|0)==(0);
       if ($252) {
        $253 = (+($sign$0|0));
        $254 = $253 * 0.0;
        $$0 = $254;
        STACKTOP = sp;return (+$$0);
       }
       $255 = (0 - ($emin$0$ph))|0;
       $256 = ($251|0)>(0);
       $257 = ($250>>>0)>($255>>>0);
       $258 = ($251|0)==(0);
       $259 = $258 & $257;
       $260 = $256 | $259;
       if ($260) {
        $261 = (___errno_location()|0);
        HEAP32[$261>>2] = 34;
        $262 = (+($sign$0|0));
        $263 = $262 * 1.7976931348623157E+308;
        $264 = $263 * 1.7976931348623157E+308;
        $$0 = $264;
        STACKTOP = sp;return (+$$0);
       }
       $265 = (($emin$0$ph) + -106)|0;
       $266 = ($265|0)<(0);
       $267 = $266 << 31 >> 31;
       $268 = ($251|0)<($267|0);
       $269 = ($250>>>0)<($265>>>0);
       $270 = ($251|0)==($267|0);
       $271 = $270 & $269;
       $272 = $268 | $271;
       if ($272) {
        $274 = (___errno_location()|0);
        HEAP32[$274>>2] = 34;
        $275 = (+($sign$0|0));
        $276 = $275 * 2.2250738585072014E-308;
        $277 = $276 * 2.2250738585072014E-308;
        $$0 = $277;
        STACKTOP = sp;return (+$$0);
       }
       $273 = ($x$3$lcssa$i|0)>(-1);
       if ($273) {
        $282 = $250;$283 = $251;$x$420$i = $x$3$lcssa$i;$y$321$i = $y$0$i$lcssa;
        while(1) {
         $278 = !($y$321$i >= 0.5);
         $279 = $x$420$i << 1;
         if ($278) {
          $$pn$i = $y$321$i;$x$5$i = $279;
         } else {
          $280 = $279 | 1;
          $281 = $y$321$i + -1.0;
          $$pn$i = $281;$x$5$i = $280;
         }
         $y$4$i = $y$321$i + $$pn$i;
         $284 = (_i64Add(($282|0),($283|0),-1,-1)|0);
         $285 = tempRet0;
         $286 = ($x$5$i|0)>(-1);
         if ($286) {
          $282 = $284;$283 = $285;$x$420$i = $x$5$i;$y$321$i = $y$4$i;
         } else {
          $291 = $284;$292 = $285;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
          break;
         }
        }
       } else {
        $291 = $250;$292 = $251;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
       }
       $287 = ($emin$0$ph|0)<(0);
       $288 = $287 << 31 >> 31;
       $289 = (_i64Subtract(32,0,($emin$0$ph|0),($288|0))|0);
       $290 = tempRet0;
       $293 = (_i64Add(($291|0),($292|0),($289|0),($290|0))|0);
       $294 = tempRet0;
       $295 = (0)>($294|0);
       $296 = ($bits$0$ph>>>0)>($293>>>0);
       $297 = (0)==($294|0);
       $298 = $297 & $296;
       $299 = $295 | $298;
       if ($299) {
        $300 = ($293|0)<(0);
        if ($300) {
         $$0711$i = 0;
         label = 124;
        } else {
         $$07$i = $293;
         label = 122;
        }
       } else {
        $$07$i = $bits$0$ph;
        label = 122;
       }
       do {
        if ((label|0) == 122) {
         $301 = ($$07$i|0)<(53);
         if ($301) {
          $$0711$i = $$07$i;
          label = 124;
          break;
         }
         $$pre$i = (+($sign$0|0));
         $$0712$i = $$07$i;$$pre$phi$iZ2D = $$pre$i;$bias$0$i = 0.0;
        }
       } while(0);
       if ((label|0) == 124) {
        $302 = (84 - ($$0711$i))|0;
        $303 = (+_scalbn(1.0,$302));
        $304 = (+($sign$0|0));
        $305 = (+_copysignl($303,$304));
        $$0712$i = $$0711$i;$$pre$phi$iZ2D = $304;$bias$0$i = $305;
       }
       $306 = ($$0712$i|0)<(32);
       $307 = $y$3$lcssa$i != 0.0;
       $or$cond4$i = $307 & $306;
       $308 = $x$4$lcssa$i & 1;
       $309 = ($308|0)==(0);
       $or$cond9$i = $309 & $or$cond4$i;
       $310 = $or$cond9$i&1;
       $x$6$i = (($310) + ($x$4$lcssa$i))|0;
       $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
       $311 = (+($x$6$i>>>0));
       $312 = $$pre$phi$iZ2D * $311;
       $313 = $bias$0$i + $312;
       $314 = $$pre$phi$iZ2D * $y$5$i;
       $315 = $314 + $313;
       $316 = $315 - $bias$0$i;
       $317 = $316 != 0.0;
       if (!($317)) {
        $318 = (___errno_location()|0);
        HEAP32[$318>>2] = 34;
       }
       $319 = (+_scalbnl($316,$291));
       $$0 = $319;
       STACKTOP = sp;return (+$$0);
      } else {
       $c$6 = $c$1$lcssa;
      }
     } while(0);
     $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
     $324 = (0 - ($sum$i))|0;
     $$012$i = $c$6;$gotdig$0$i12 = 0;
     while(1) {
      if ((($$012$i|0) == 46)) {
       $gotdig$0$i12$lcssa230 = $gotdig$0$i12;
       label = 135;
       break;
      } else if (!((($$012$i|0) == 48))) {
       $$2$i = $$012$i;$725 = 0;$726 = 0;$gotdig$2$i13 = $gotdig$0$i12;$gotrad$0$i14 = 0;
       break;
      }
      $325 = HEAP32[$0>>2]|0;
      $326 = HEAP32[$1>>2]|0;
      $327 = ($325>>>0)<($326>>>0);
      if ($327) {
       $328 = (($325) + 1|0);
       HEAP32[$0>>2] = $328;
       $329 = HEAP8[$325>>0]|0;
       $330 = $329&255;
       $$012$i = $330;$gotdig$0$i12 = 1;
       continue;
      } else {
       $331 = (___shgetc($f)|0);
       $$012$i = $331;$gotdig$0$i12 = 1;
       continue;
      }
     }
     if ((label|0) == 135) {
      $332 = HEAP32[$0>>2]|0;
      $333 = HEAP32[$1>>2]|0;
      $334 = ($332>>>0)<($333>>>0);
      if ($334) {
       $335 = (($332) + 1|0);
       HEAP32[$0>>2] = $335;
       $336 = HEAP8[$332>>0]|0;
       $337 = $336&255;
       $$1$ph$i = $337;
      } else {
       $338 = (___shgetc($f)|0);
       $$1$ph$i = $338;
      }
      $339 = ($$1$ph$i|0)==(48);
      if ($339) {
       $340 = 0;$341 = 0;
       while(1) {
        $342 = (_i64Add(($340|0),($341|0),-1,-1)|0);
        $343 = tempRet0;
        $344 = HEAP32[$0>>2]|0;
        $345 = HEAP32[$1>>2]|0;
        $346 = ($344>>>0)<($345>>>0);
        if ($346) {
         $347 = (($344) + 1|0);
         HEAP32[$0>>2] = $347;
         $348 = HEAP8[$344>>0]|0;
         $349 = $348&255;
         $$1$be$i = $349;
        } else {
         $350 = (___shgetc($f)|0);
         $$1$be$i = $350;
        }
        $351 = ($$1$be$i|0)==(48);
        if ($351) {
         $340 = $342;$341 = $343;
        } else {
         $$2$i = $$1$be$i;$725 = $342;$726 = $343;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
         break;
        }
       }
      } else {
       $$2$i = $$1$ph$i;$725 = 0;$726 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa230;$gotrad$0$i14 = 1;
      }
     }
     HEAP32[$x$i>>2] = 0;
     $352 = (($$2$i) + -48)|0;
     $353 = ($352>>>0)<(10);
     $354 = ($$2$i|0)==(46);
     $or$cond11123$i = $354 | $353;
     L217: do {
      if ($or$cond11123$i) {
       $355 = (($x$i) + 496|0);
       $$3131$i = $$2$i;$358 = 0;$359 = 0;$727 = $354;$728 = $352;$729 = $725;$730 = $726;$gotdig$3127$i = $gotdig$2$i13;$gotrad$1128$i = $gotrad$0$i14;$j$0130$i = 0;$k$0129$i = 0;$lnz$0126$i = 0;
       L219: while(1) {
        do {
         if ($727) {
          $cond$i = ($gotrad$1128$i|0)==(0);
          if ($cond$i) {
           $731 = $358;$732 = $359;$733 = $358;$734 = $359;$gotdig$4$i = $gotdig$3127$i;$gotrad$2$i = 1;$j$2$i = $j$0130$i;$k$2$i = $k$0129$i;$lnz$2$i = $lnz$0126$i;
          } else {
           $735 = $729;$736 = $730;$737 = $358;$738 = $359;$gotdig$3127$i$lcssa = $gotdig$3127$i;$j$0130$i$lcssa = $j$0130$i;$k$0129$i$lcssa = $k$0129$i;$lnz$0126$i$lcssa = $lnz$0126$i;
           break L219;
          }
         } else {
          $357 = ($k$0129$i|0)<(125);
          $360 = (_i64Add(($358|0),($359|0),1,0)|0);
          $361 = tempRet0;
          $362 = ($$3131$i|0)!=(48);
          if (!($357)) {
           if (!($362)) {
            $731 = $729;$732 = $730;$733 = $360;$734 = $361;$gotdig$4$i = $gotdig$3127$i;$gotrad$2$i = $gotrad$1128$i;$j$2$i = $j$0130$i;$k$2$i = $k$0129$i;$lnz$2$i = $lnz$0126$i;
            break;
           }
           $372 = HEAP32[$355>>2]|0;
           $373 = $372 | 1;
           HEAP32[$355>>2] = $373;
           $731 = $729;$732 = $730;$733 = $360;$734 = $361;$gotdig$4$i = $gotdig$3127$i;$gotrad$2$i = $gotrad$1128$i;$j$2$i = $j$0130$i;$k$2$i = $k$0129$i;$lnz$2$i = $lnz$0126$i;
           break;
          }
          $$lnz$0$i = $362 ? $360 : $lnz$0126$i;
          $363 = ($j$0130$i|0)==(0);
          $364 = (($x$i) + ($k$0129$i<<2)|0);
          if ($363) {
           $storemerge$i = $728;
          } else {
           $365 = HEAP32[$364>>2]|0;
           $366 = ($365*10)|0;
           $367 = (($$3131$i) + -48)|0;
           $368 = (($367) + ($366))|0;
           $storemerge$i = $368;
          }
          HEAP32[$364>>2] = $storemerge$i;
          $369 = (($j$0130$i) + 1)|0;
          $370 = ($369|0)==(9);
          $371 = $370&1;
          $$k$0$i = (($371) + ($k$0129$i))|0;
          $$14$i = $370 ? 0 : $369;
          $731 = $729;$732 = $730;$733 = $360;$734 = $361;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1128$i;$j$2$i = $$14$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
         }
        } while(0);
        $374 = HEAP32[$0>>2]|0;
        $375 = HEAP32[$1>>2]|0;
        $376 = ($374>>>0)<($375>>>0);
        if ($376) {
         $377 = (($374) + 1|0);
         HEAP32[$0>>2] = $377;
         $378 = HEAP8[$374>>0]|0;
         $379 = $378&255;
         $$3$be$i = $379;
        } else {
         $380 = (___shgetc($f)|0);
         $$3$be$i = $380;
        }
        $381 = (($$3$be$i) + -48)|0;
        $382 = ($381>>>0)<(10);
        $383 = ($$3$be$i|0)==(46);
        $or$cond11$i = $383 | $382;
        if ($or$cond11$i) {
         $$3131$i = $$3$be$i;$358 = $733;$359 = $734;$727 = $383;$728 = $381;$729 = $731;$730 = $732;$gotdig$3127$i = $gotdig$4$i;$gotrad$1128$i = $gotrad$2$i;$j$0130$i = $j$2$i;$k$0129$i = $k$2$i;$lnz$0126$i = $lnz$2$i;
        } else {
         $$3$lcssa$i = $$3$be$i;$385 = $731;$386 = $733;$388 = $732;$389 = $734;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
         label = 158;
         break L217;
        }
       }
       $356 = ($gotdig$3127$i$lcssa|0)!=(0);
       $739 = $737;$740 = $738;$741 = $735;$742 = $736;$743 = $356;$j$078$i = $j$0130$i$lcssa;$k$074$i = $k$0129$i$lcssa;$lnz$068$i = $lnz$0126$i$lcssa;
       label = 166;
      } else {
       $$3$lcssa$i = $$2$i;$385 = $725;$386 = 0;$388 = $726;$389 = 0;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
       label = 158;
      }
     } while(0);
     do {
      if ((label|0) == 158) {
       $384 = ($gotrad$1$lcssa$i|0)==(0);
       $387 = $384 ? $386 : $385;
       $390 = $384 ? $389 : $388;
       $391 = ($gotdig$3$lcssa$i|0)!=(0);
       $392 = $$3$lcssa$i | 32;
       $393 = ($392|0)==(101);
       $or$cond16$i = $393 & $391;
       if (!($or$cond16$i)) {
        $408 = ($$3$lcssa$i|0)>(-1);
        if ($408) {
         $739 = $386;$740 = $389;$741 = $387;$742 = $390;$743 = $391;$j$078$i = $j$0$lcssa$i;$k$074$i = $k$0$lcssa$i;$lnz$068$i = $lnz$0$lcssa$i;
         label = 166;
         break;
        } else {
         $744 = $386;$745 = $389;$746 = $391;$747 = $387;$748 = $390;$j$077$i = $j$0$lcssa$i;$k$073$i = $k$0$lcssa$i;$lnz$067$i = $lnz$0$lcssa$i;
         label = 168;
         break;
        }
       }
       $394 = (_scanexp($f,$pok)|0);
       $395 = tempRet0;
       $396 = ($394|0)==(0);
       $397 = ($395|0)==(-2147483648);
       $398 = $396 & $397;
       if ($398) {
        $399 = ($pok|0)==(0);
        if ($399) {
         ___shlim($f,0);
         $$0$i27 = 0.0;
         break;
        }
        $400 = HEAP32[$1>>2]|0;
        $401 = ($400|0)==(0|0);
        if ($401) {
         $404 = 0;$405 = 0;
        } else {
         $402 = HEAP32[$0>>2]|0;
         $403 = (($402) + -1|0);
         HEAP32[$0>>2] = $403;
         $404 = 0;$405 = 0;
        }
       } else {
        $404 = $394;$405 = $395;
       }
       $406 = (_i64Add(($404|0),($405|0),($387|0),($390|0))|0);
       $407 = tempRet0;
       $418 = $406;$420 = $386;$421 = $407;$423 = $389;$j$076$i = $j$0$lcssa$i;$k$072$i = $k$0$lcssa$i;$lnz$066$i = $lnz$0$lcssa$i;
       label = 170;
      }
     } while(0);
     if ((label|0) == 166) {
      $409 = HEAP32[$1>>2]|0;
      $410 = ($409|0)==(0|0);
      if ($410) {
       $744 = $739;$745 = $740;$746 = $743;$747 = $741;$748 = $742;$j$077$i = $j$078$i;$k$073$i = $k$074$i;$lnz$067$i = $lnz$068$i;
       label = 168;
      } else {
       $411 = HEAP32[$0>>2]|0;
       $412 = (($411) + -1|0);
       HEAP32[$0>>2] = $412;
       if ($743) {
        $418 = $741;$420 = $739;$421 = $742;$423 = $740;$j$076$i = $j$078$i;$k$072$i = $k$074$i;$lnz$066$i = $lnz$068$i;
        label = 170;
       } else {
        label = 169;
       }
      }
     }
     if ((label|0) == 168) {
      if ($746) {
       $418 = $747;$420 = $744;$421 = $748;$423 = $745;$j$076$i = $j$077$i;$k$072$i = $k$073$i;$lnz$066$i = $lnz$067$i;
       label = 170;
      } else {
       label = 169;
      }
     }
     do {
      if ((label|0) == 169) {
       $413 = (___errno_location()|0);
       HEAP32[$413>>2] = 22;
       ___shlim($f,0);
       $$0$i27 = 0.0;
      }
      else if ((label|0) == 170) {
       $414 = HEAP32[$x$i>>2]|0;
       $415 = ($414|0)==(0);
       if ($415) {
        $416 = (+($sign$0|0));
        $417 = $416 * 0.0;
        $$0$i27 = $417;
        break;
       }
       $419 = ($418|0)==($420|0);
       $422 = ($421|0)==($423|0);
       $424 = $419 & $422;
       $425 = ($423|0)<(0);
       $426 = ($420>>>0)<(10);
       $427 = ($423|0)==(0);
       $428 = $427 & $426;
       $429 = $425 | $428;
       $or$cond$i17 = $429 & $424;
       if ($or$cond$i17) {
        $430 = ($bits$0$ph>>>0)>(30);
        $431 = $414 >>> $bits$0$ph;
        $432 = ($431|0)==(0);
        $or$cond18$i = $430 | $432;
        if ($or$cond18$i) {
         $433 = (+($sign$0|0));
         $434 = (+($414>>>0));
         $435 = $433 * $434;
         $$0$i27 = $435;
         break;
        }
       }
       $436 = (($emin$0$ph|0) / -2)&-1;
       $437 = ($436|0)<(0);
       $438 = $437 << 31 >> 31;
       $439 = ($421|0)>($438|0);
       $440 = ($418>>>0)>($436>>>0);
       $441 = ($421|0)==($438|0);
       $442 = $441 & $440;
       $443 = $439 | $442;
       if ($443) {
        $444 = (___errno_location()|0);
        HEAP32[$444>>2] = 34;
        $445 = (+($sign$0|0));
        $446 = $445 * 1.7976931348623157E+308;
        $447 = $446 * 1.7976931348623157E+308;
        $$0$i27 = $447;
        break;
       }
       $448 = (($emin$0$ph) + -106)|0;
       $449 = ($448|0)<(0);
       $450 = $449 << 31 >> 31;
       $451 = ($421|0)<($450|0);
       $452 = ($418>>>0)<($448>>>0);
       $453 = ($421|0)==($450|0);
       $454 = $453 & $452;
       $455 = $451 | $454;
       if ($455) {
        $456 = (___errno_location()|0);
        HEAP32[$456>>2] = 34;
        $457 = (+($sign$0|0));
        $458 = $457 * 2.2250738585072014E-308;
        $459 = $458 * 2.2250738585072014E-308;
        $$0$i27 = $459;
        break;
       }
       $460 = ($j$076$i|0)==(0);
       if ($460) {
        $k$3$i = $k$072$i;
       } else {
        $461 = ($j$076$i|0)<(9);
        if ($461) {
         $462 = (($x$i) + ($k$072$i<<2)|0);
         $$promoted$i = HEAP32[$462>>2]|0;
         $464 = $$promoted$i;$j$3119$i = $j$076$i;
         while(1) {
          $463 = ($464*10)|0;
          $465 = (($j$3119$i) + 1)|0;
          $exitcond175$i = ($j$3119$i|0)==(8);
          if ($exitcond175$i) {
           $$lcssa222 = $463;
           break;
          } else {
           $464 = $463;$j$3119$i = $465;
          }
         }
         HEAP32[$462>>2] = $$lcssa222;
        }
        $466 = (($k$072$i) + 1)|0;
        $k$3$i = $466;
       }
       $467 = ($lnz$066$i|0)<(9);
       if ($467) {
        $468 = ($lnz$066$i|0)<=($418|0);
        $469 = ($418|0)<(18);
        $or$cond3$i = $468 & $469;
        if ($or$cond3$i) {
         $470 = ($418|0)==(9);
         if ($470) {
          $471 = (+($sign$0|0));
          $472 = HEAP32[$x$i>>2]|0;
          $473 = (+($472>>>0));
          $474 = $471 * $473;
          $$0$i27 = $474;
          break;
         }
         $475 = ($418|0)<(9);
         if ($475) {
          $476 = (+($sign$0|0));
          $477 = HEAP32[$x$i>>2]|0;
          $478 = (+($477>>>0));
          $479 = $476 * $478;
          $480 = (8 - ($418))|0;
          $481 = (3608 + ($480<<2)|0);
          $482 = HEAP32[$481>>2]|0;
          $483 = (+($482|0));
          $484 = $479 / $483;
          $$0$i27 = $484;
          break;
         }
         $$neg41$i = (($bits$0$ph) + 27)|0;
         $485 = Math_imul($418, -3)|0;
         $486 = (($$neg41$i) + ($485))|0;
         $487 = ($486|0)>(30);
         $$pre$i18 = HEAP32[$x$i>>2]|0;
         $488 = $$pre$i18 >>> $486;
         $489 = ($488|0)==(0);
         $or$cond191$i = $487 | $489;
         if ($or$cond191$i) {
          $490 = (+($sign$0|0));
          $491 = (+($$pre$i18>>>0));
          $492 = $490 * $491;
          $493 = (($418) + -10)|0;
          $494 = (3608 + ($493<<2)|0);
          $495 = HEAP32[$494>>2]|0;
          $496 = (+($495|0));
          $497 = $492 * $496;
          $$0$i27 = $497;
          break;
         }
        }
       }
       $498 = (($418|0) % 9)&-1;
       $499 = ($498|0)==(0);
       if ($499) {
        $a$2$ph47$i = 0;$e2$0$ph$i = 0;$rp$2$ph45$i = $418;$z$1$ph46$i = $k$3$i;
       } else {
        $500 = ($418|0)>(-1);
        $501 = (($498) + 9)|0;
        $502 = $500 ? $498 : $501;
        $503 = (8 - ($502))|0;
        $504 = (3608 + ($503<<2)|0);
        $505 = HEAP32[$504>>2]|0;
        $506 = ($k$3$i|0)==(0);
        if ($506) {
         $a$0$lcssa186$i = 0;$rp$0$lcssa187$i = $418;$z$0$i = 0;
        } else {
         $507 = (1000000000 / ($505|0))&-1;
         $a$0110$i = 0;$carry$0112$i = 0;$k$4111$i = 0;$rp$0109$i = $418;
         while(1) {
          $508 = (($x$i) + ($k$4111$i<<2)|0);
          $509 = HEAP32[$508>>2]|0;
          $510 = (($509>>>0) % ($505>>>0))&-1;
          $511 = (($509>>>0) / ($505>>>0))&-1;
          $512 = (($511) + ($carry$0112$i))|0;
          HEAP32[$508>>2] = $512;
          $513 = Math_imul($510, $507)|0;
          $514 = ($k$4111$i|0)==($a$0110$i|0);
          $515 = ($512|0)==(0);
          $or$cond19$i = $514 & $515;
          $516 = (($k$4111$i) + 1)|0;
          if ($or$cond19$i) {
           $517 = $516 & 127;
           $518 = (($rp$0109$i) + -9)|0;
           $a$1$i = $517;$rp$1$i19 = $518;
          } else {
           $a$1$i = $a$0110$i;$rp$1$i19 = $rp$0109$i;
          }
          $519 = ($516|0)==($k$3$i|0);
          if ($519) {
           $$lcssa221 = $513;$a$1$i$lcssa = $a$1$i;$rp$1$i19$lcssa = $rp$1$i19;
           break;
          } else {
           $a$0110$i = $a$1$i;$carry$0112$i = $513;$k$4111$i = $516;$rp$0109$i = $rp$1$i19;
          }
         }
         $520 = ($$lcssa221|0)==(0);
         if ($520) {
          $a$0$lcssa186$i = $a$1$i$lcssa;$rp$0$lcssa187$i = $rp$1$i19$lcssa;$z$0$i = $k$3$i;
         } else {
          $521 = (($k$3$i) + 1)|0;
          $522 = (($x$i) + ($k$3$i<<2)|0);
          HEAP32[$522>>2] = $$lcssa221;
          $a$0$lcssa186$i = $a$1$i$lcssa;$rp$0$lcssa187$i = $rp$1$i19$lcssa;$z$0$i = $521;
         }
        }
        $523 = (9 - ($502))|0;
        $524 = (($523) + ($rp$0$lcssa187$i))|0;
        $a$2$ph47$i = $a$0$lcssa186$i;$e2$0$ph$i = 0;$rp$2$ph45$i = $524;$z$1$ph46$i = $z$0$i;
       }
       L302: while(1) {
        $525 = ($rp$2$ph45$i|0)<(18);
        $526 = (($x$i) + ($a$2$ph47$i<<2)|0);
        if ($525) {
         $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph46$i;
         while(1) {
          $528 = (($z$1$us$i) + 127)|0;
          $carry1$0$us$i = 0;$k$5$in$us$i = $528;$z$2$us$i = $z$1$us$i;
          while(1) {
           $k$5$us$i = $k$5$in$us$i & 127;
           $529 = (($x$i) + ($k$5$us$i<<2)|0);
           $530 = HEAP32[$529>>2]|0;
           $531 = (_bitshift64Shl(($530|0),0,29)|0);
           $532 = tempRet0;
           $533 = (_i64Add(($531|0),($532|0),($carry1$0$us$i|0),0)|0);
           $534 = tempRet0;
           $535 = ($534>>>0)>(0);
           $536 = ($533>>>0)>(1000000000);
           $537 = ($534|0)==(0);
           $538 = $537 & $536;
           $539 = $535 | $538;
           if ($539) {
            $540 = (___udivdi3(($533|0),($534|0),1000000000,0)|0);
            $541 = tempRet0;
            $542 = (___uremdi3(($533|0),($534|0),1000000000,0)|0);
            $543 = tempRet0;
            $$sink$off0$us$i = $542;$carry1$1$us$i = $540;
           } else {
            $$sink$off0$us$i = $533;$carry1$1$us$i = 0;
           }
           HEAP32[$529>>2] = $$sink$off0$us$i;
           $544 = (($z$2$us$i) + 127)|0;
           $545 = $544 & 127;
           $546 = ($k$5$us$i|0)!=($545|0);
           $547 = ($k$5$us$i|0)==($a$2$ph47$i|0);
           $or$cond20$us$i = $546 | $547;
           if ($or$cond20$us$i) {
            $z$3$us$i = $z$2$us$i;
           } else {
            $548 = ($$sink$off0$us$i|0)==(0);
            $k$5$z$2$us$i = $548 ? $k$5$us$i : $z$2$us$i;
            $z$3$us$i = $k$5$z$2$us$i;
           }
           $549 = (($k$5$us$i) + -1)|0;
           if ($547) {
            $carry1$1$us$i$lcssa = $carry1$1$us$i;$z$3$us$i$lcssa = $z$3$us$i;
            break;
           } else {
            $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $549;$z$2$us$i = $z$3$us$i;
           }
          }
          $550 = (($e2$0$us$i) + -29)|0;
          $551 = ($carry1$1$us$i$lcssa|0)==(0);
          if ($551) {
           $e2$0$us$i = $550;$z$1$us$i = $z$3$us$i$lcssa;
          } else {
           $$lcssa59$i = $550;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i$lcssa;$z$3$lcssa$lcssa$i = $z$3$us$i$lcssa;
           break;
          }
         }
        } else {
         $527 = ($rp$2$ph45$i|0)==(18);
         if ($527) {
          $e2$0$us93$i = $e2$0$ph$i;$z$1$us94$i = $z$1$ph46$i;
         } else {
          $a$3$ph$i = $a$2$ph47$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph43$i = $rp$2$ph45$i;$z$5$ph$i = $z$1$ph46$i;
          break;
         }
         while(1) {
          $552 = HEAP32[$526>>2]|0;
          $553 = ($552>>>0)<(9007199);
          if (!($553)) {
           $a$3$ph$i = $a$2$ph47$i;$e2$1$ph$i = $e2$0$us93$i;$rp$3$ph43$i = 18;$z$5$ph$i = $z$1$us94$i;
           break L302;
          }
          $554 = (($z$1$us94$i) + 127)|0;
          $carry1$0$us98$i = 0;$k$5$in$us97$i = $554;$z$2$us96$i = $z$1$us94$i;
          while(1) {
           $k$5$us99$i = $k$5$in$us97$i & 127;
           $555 = (($x$i) + ($k$5$us99$i<<2)|0);
           $556 = HEAP32[$555>>2]|0;
           $557 = (_bitshift64Shl(($556|0),0,29)|0);
           $558 = tempRet0;
           $559 = (_i64Add(($557|0),($558|0),($carry1$0$us98$i|0),0)|0);
           $560 = tempRet0;
           $561 = ($560>>>0)>(0);
           $562 = ($559>>>0)>(1000000000);
           $563 = ($560|0)==(0);
           $564 = $563 & $562;
           $565 = $561 | $564;
           if ($565) {
            $566 = (___udivdi3(($559|0),($560|0),1000000000,0)|0);
            $567 = tempRet0;
            $568 = (___uremdi3(($559|0),($560|0),1000000000,0)|0);
            $569 = tempRet0;
            $$sink$off0$us102$i = $568;$carry1$1$us103$i = $566;
           } else {
            $$sink$off0$us102$i = $559;$carry1$1$us103$i = 0;
           }
           HEAP32[$555>>2] = $$sink$off0$us102$i;
           $570 = (($z$2$us96$i) + 127)|0;
           $571 = $570 & 127;
           $572 = ($k$5$us99$i|0)!=($571|0);
           $573 = ($k$5$us99$i|0)==($a$2$ph47$i|0);
           $or$cond20$us104$i = $572 | $573;
           if ($or$cond20$us104$i) {
            $z$3$us106$i = $z$2$us96$i;
           } else {
            $574 = ($$sink$off0$us102$i|0)==(0);
            $k$5$z$2$us105$i = $574 ? $k$5$us99$i : $z$2$us96$i;
            $z$3$us106$i = $k$5$z$2$us105$i;
           }
           $575 = (($k$5$us99$i) + -1)|0;
           if ($573) {
            $carry1$1$us103$i$lcssa = $carry1$1$us103$i;$z$3$us106$i$lcssa = $z$3$us106$i;
            break;
           } else {
            $carry1$0$us98$i = $carry1$1$us103$i;$k$5$in$us97$i = $575;$z$2$us96$i = $z$3$us106$i;
           }
          }
          $576 = (($e2$0$us93$i) + -29)|0;
          $577 = ($carry1$1$us103$i$lcssa|0)==(0);
          if ($577) {
           $e2$0$us93$i = $576;$z$1$us94$i = $z$3$us106$i$lcssa;
          } else {
           $$lcssa59$i = $576;$carry1$1$lcssa$lcssa$i = $carry1$1$us103$i$lcssa;$z$3$lcssa$lcssa$i = $z$3$us106$i$lcssa;
           break;
          }
         }
        }
        $578 = (($rp$2$ph45$i) + 9)|0;
        $579 = (($a$2$ph47$i) + 127)|0;
        $580 = $579 & 127;
        $581 = ($580|0)==($z$3$lcssa$lcssa$i|0);
        if ($581) {
         $582 = (($z$3$lcssa$lcssa$i) + 127)|0;
         $583 = $582 & 127;
         $584 = (($x$i) + ($583<<2)|0);
         $585 = HEAP32[$584>>2]|0;
         $586 = (($z$3$lcssa$lcssa$i) + 126)|0;
         $587 = $586 & 127;
         $588 = (($x$i) + ($587<<2)|0);
         $589 = HEAP32[$588>>2]|0;
         $590 = $589 | $585;
         HEAP32[$588>>2] = $590;
         $z$4$i = $583;
        } else {
         $z$4$i = $z$3$lcssa$lcssa$i;
        }
        $591 = (($x$i) + ($580<<2)|0);
        HEAP32[$591>>2] = $carry1$1$lcssa$lcssa$i;
        $a$2$ph47$i = $580;$e2$0$ph$i = $$lcssa59$i;$rp$2$ph45$i = $578;$z$1$ph46$i = $z$4$i;
       }
       L333: while(1) {
        $622 = (($z$5$ph$i) + 1)|0;
        $619 = $622 & 127;
        $623 = (($z$5$ph$i) + 127)|0;
        $624 = $623 & 127;
        $625 = (($x$i) + ($624<<2)|0);
        $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph43$i;
        while(1) {
         $$old$i = ($rp$3$i$ph|0)==(18);
         $626 = ($rp$3$i$ph|0)>(27);
         $$21$i = $626 ? 9 : 1;
         $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
         while(1) {
          $592 = $a$3$i & 127;
          $593 = ($592|0)==($z$5$ph$i|0);
          do {
           if ($593) {
            label = 226;
           } else {
            $594 = (($x$i) + ($592<<2)|0);
            $595 = HEAP32[$594>>2]|0;
            $596 = ($595>>>0)<(9007199);
            if ($596) {
             label = 226;
             break;
            }
            $597 = ($595>>>0)>(9007199);
            if ($597) {
             break;
            }
            $598 = (($a$3$i) + 1)|0;
            $599 = $598 & 127;
            $600 = ($599|0)==($z$5$ph$i|0);
            if ($600) {
             label = 226;
             break;
            }
            $706 = (($x$i) + ($599<<2)|0);
            $707 = HEAP32[$706>>2]|0;
            $708 = ($707>>>0)<(254740991);
            if ($708) {
             label = 226;
             break;
            }
            $709 = ($707>>>0)<(254740992);
            $or$cond192$i = $$old$i & $709;
            if ($or$cond192$i) {
             $632 = $592;$a$3$i200 = $a$3$i;$e2$1$i197 = $e2$1$i;$z$7$i = $z$5$ph$i;
             break L333;
            }
           }
          } while(0);
          if ((label|0) == 226) {
           label = 0;
           if ($$old$i) {
            label = 227;
            break L333;
           }
          }
          $601 = (($$21$i) + ($e2$1$i))|0;
          $602 = ($a$3$i|0)==($z$5$ph$i|0);
          if ($602) {
           $a$3$i = $z$5$ph$i;$e2$1$i = $601;
          } else {
           $$lcssa207 = $601;$a$3$i$lcssa199 = $a$3$i;
           break;
          }
         }
         $603 = 1 << $$21$i;
         $604 = (($603) + -1)|0;
         $605 = 1000000000 >>> $$21$i;
         $a$487$i = $a$3$i$lcssa199;$carry3$090$i = 0;$k$688$i = $a$3$i$lcssa199;$rp$486$i = $rp$3$i$ph;
         while(1) {
          $606 = (($x$i) + ($k$688$i<<2)|0);
          $607 = HEAP32[$606>>2]|0;
          $608 = $607 & $604;
          $609 = $607 >>> $$21$i;
          $610 = (($609) + ($carry3$090$i))|0;
          HEAP32[$606>>2] = $610;
          $611 = Math_imul($608, $605)|0;
          $612 = ($k$688$i|0)==($a$487$i|0);
          $613 = ($610|0)==(0);
          $or$cond22$i = $612 & $613;
          $614 = (($k$688$i) + 1)|0;
          $615 = $614 & 127;
          $616 = (($rp$486$i) + -9)|0;
          $rp$5$i = $or$cond22$i ? $616 : $rp$486$i;
          $a$5$i = $or$cond22$i ? $615 : $a$487$i;
          $617 = ($615|0)==($z$5$ph$i|0);
          if ($617) {
           $$lcssa208 = $611;$a$5$i$lcssa = $a$5$i;$rp$5$i$lcssa = $rp$5$i;
           break;
          } else {
           $a$487$i = $a$5$i;$carry3$090$i = $611;$k$688$i = $615;$rp$486$i = $rp$5$i;
          }
         }
         $618 = ($$lcssa208|0)==(0);
         if ($618) {
          $a$3$i$ph = $a$5$i$lcssa;$e2$1$i$ph = $$lcssa207;$rp$3$i$ph = $rp$5$i$lcssa;
          continue;
         }
         $620 = ($619|0)==($a$5$i$lcssa|0);
         if (!($620)) {
          $$lcssa207$lcssa = $$lcssa207;$$lcssa208$lcssa = $$lcssa208;$a$5$i$lcssa$lcssa = $a$5$i$lcssa;$rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
          break;
         }
         $627 = HEAP32[$625>>2]|0;
         $628 = $627 | 1;
         HEAP32[$625>>2] = $628;
         $a$3$i$ph = $a$5$i$lcssa;$e2$1$i$ph = $$lcssa207;$rp$3$i$ph = $rp$5$i$lcssa;
        }
        $621 = (($x$i) + ($z$5$ph$i<<2)|0);
        HEAP32[$621>>2] = $$lcssa208$lcssa;
        $a$3$ph$i = $a$5$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa207$lcssa;$rp$3$ph43$i = $rp$5$i$lcssa$lcssa;$z$5$ph$i = $619;
       }
       if ((label|0) == 227) {
        if ($593) {
         $629 = (($619) + -1)|0;
         $630 = (($x$i) + ($629<<2)|0);
         HEAP32[$630>>2] = 0;
         $632 = $z$5$ph$i;$a$3$i200 = $a$3$i;$e2$1$i197 = $e2$1$i;$z$7$i = $619;
        } else {
         $632 = $592;$a$3$i200 = $a$3$i;$e2$1$i197 = $e2$1$i;$z$7$i = $z$5$ph$i;
        }
       }
       $631 = (($x$i) + ($632<<2)|0);
       $633 = HEAP32[$631>>2]|0;
       $634 = (+($633>>>0));
       $635 = (($a$3$i200) + 1)|0;
       $636 = $635 & 127;
       $637 = ($636|0)==($z$7$i|0);
       if ($637) {
        $696 = (($z$7$i) + 1)|0;
        $697 = $696 & 127;
        $698 = (($697) + -1)|0;
        $699 = (($x$i) + ($698<<2)|0);
        HEAP32[$699>>2] = 0;
        $z$7$1$i = $697;
       } else {
        $z$7$1$i = $z$7$i;
       }
       $700 = $634 * 1.0E+9;
       $701 = (($x$i) + ($636<<2)|0);
       $702 = HEAP32[$701>>2]|0;
       $703 = (+($702>>>0));
       $704 = $700 + $703;
       $661 = (+($sign$0|0));
       $643 = $661 * $704;
       $681 = (($e2$1$i197) + 53)|0;
       $638 = (($681) - ($emin$0$ph))|0;
       $705 = ($638|0)<($bits$0$ph|0);
       if ($705) {
        $639 = ($638|0)<(0);
        if ($639) {
         $$01335$i = 0;$denormal$034$i = 1;
         label = 241;
        } else {
         $$013$i = $638;$denormal$0$i = 1;
         label = 240;
        }
       } else {
        $$013$i = $bits$0$ph;$denormal$0$i = 0;
        label = 240;
       }
       if ((label|0) == 240) {
        $640 = ($$013$i|0)<(53);
        if ($640) {
         $$01335$i = $$013$i;$denormal$034$i = $denormal$0$i;
         label = 241;
        } else {
         $$01336$i = $$013$i;$bias$0$i24 = 0.0;$denormal$033$i = $denormal$0$i;$frac$0$i = 0.0;$y$1$i23 = $643;
        }
       }
       if ((label|0) == 241) {
        $641 = (105 - ($$01335$i))|0;
        $642 = (+_scalbn(1.0,$641));
        $644 = (+_copysignl($642,$643));
        $645 = (53 - ($$01335$i))|0;
        $646 = (+_scalbn(1.0,$645));
        $647 = (+_fmodl($643,$646));
        $648 = $643 - $647;
        $649 = $644 + $648;
        $$01336$i = $$01335$i;$bias$0$i24 = $644;$denormal$033$i = $denormal$034$i;$frac$0$i = $647;$y$1$i23 = $649;
       }
       $650 = (($a$3$i200) + 2)|0;
       $651 = $650 & 127;
       $652 = ($651|0)==($z$7$1$i|0);
       do {
        if ($652) {
         $frac$2$i = $frac$0$i;
        } else {
         $653 = (($x$i) + ($651<<2)|0);
         $654 = HEAP32[$653>>2]|0;
         $655 = ($654>>>0)<(500000000);
         do {
          if ($655) {
           $656 = ($654|0)==(0);
           if ($656) {
            $657 = (($a$3$i200) + 3)|0;
            $658 = $657 & 127;
            $659 = ($658|0)==($z$7$1$i|0);
            if ($659) {
             $frac$1$i = $frac$0$i;
             break;
            }
           }
           $660 = $661 * 0.25;
           $662 = $660 + $frac$0$i;
           $frac$1$i = $662;
          } else {
           $663 = ($654>>>0)>(500000000);
           if ($663) {
            $664 = $661 * 0.75;
            $665 = $664 + $frac$0$i;
            $frac$1$i = $665;
            break;
           }
           $666 = (($a$3$i200) + 3)|0;
           $667 = $666 & 127;
           $668 = ($667|0)==($z$7$1$i|0);
           if ($668) {
            $669 = $661 * 0.5;
            $670 = $669 + $frac$0$i;
            $frac$1$i = $670;
            break;
           } else {
            $671 = $661 * 0.75;
            $672 = $671 + $frac$0$i;
            $frac$1$i = $672;
            break;
           }
          }
         } while(0);
         $673 = (53 - ($$01336$i))|0;
         $674 = ($673|0)>(1);
         if (!($674)) {
          $frac$2$i = $frac$1$i;
          break;
         }
         $675 = (+_fmodl($frac$1$i,1.0));
         $676 = $675 != 0.0;
         if ($676) {
          $frac$2$i = $frac$1$i;
          break;
         }
         $677 = $frac$1$i + 1.0;
         $frac$2$i = $677;
        }
       } while(0);
       $678 = $y$1$i23 + $frac$2$i;
       $679 = $678 - $bias$0$i24;
       $680 = $681 & 2147483647;
       $682 = (-2 - ($sum$i))|0;
       $683 = ($680|0)>($682|0);
       do {
        if ($683) {
         $684 = (+Math_abs((+$679)));
         $685 = !($684 >= 9007199254740992.0);
         if ($685) {
          $denormal$2$i = $denormal$033$i;$e2$2$i = $e2$1$i197;$y$2$i25 = $679;
         } else {
          $686 = ($denormal$033$i|0)!=(0);
          $687 = ($$01336$i|0)==($638|0);
          $or$cond23$i = $687 & $686;
          $denormal$1$i = $or$cond23$i ? 0 : $denormal$033$i;
          $688 = $679 * 0.5;
          $689 = (($e2$1$i197) + 1)|0;
          $denormal$2$i = $denormal$1$i;$e2$2$i = $689;$y$2$i25 = $688;
         }
         $690 = (($e2$2$i) + 50)|0;
         $691 = ($690|0)>($324|0);
         if (!($691)) {
          $692 = ($denormal$2$i|0)!=(0);
          $693 = $frac$2$i != 0.0;
          $or$cond9$i26 = $693 & $692;
          if (!($or$cond9$i26)) {
           $e2$3$i = $e2$2$i;$y$3$i = $y$2$i25;
           break;
          }
         }
         $694 = (___errno_location()|0);
         HEAP32[$694>>2] = 34;
         $e2$3$i = $e2$2$i;$y$3$i = $y$2$i25;
        } else {
         $e2$3$i = $e2$1$i197;$y$3$i = $679;
        }
       } while(0);
       $695 = (+_scalbnl($y$3$i,$e2$3$i));
       $$0$i27 = $695;
      }
     } while(0);
     $$0 = $$0$i27;
     STACKTOP = sp;return (+$$0);
    }
   } while(0);
   $103 = HEAP32[$1>>2]|0;
   $104 = ($103|0)==(0|0);
   if (!($104)) {
    $105 = HEAP32[$0>>2]|0;
    $106 = (($105) + -1|0);
    HEAP32[$0>>2] = $106;
   }
   $107 = (___errno_location()|0);
   HEAP32[$107>>2] = 22;
   ___shlim($f,0);
   $$0 = 0.0;
   STACKTOP = sp;return (+$$0);
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond9$not = $notrhs | $notlhs;
  $brmerge = $or$cond9$not | $42;
  if (!($brmerge)) {
   $i$1 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$1) + -1)|0;
    $$old8 = ($47>>>0)>(3);
    if ($$old8) {
     $i$1 = $47;
    } else {
     break;
    }
   }
  }
 }
 $48 = (+($sign$0|0));
 $49 = $48 * inf;
 $50 = $49;
 $$0 = $50;
 STACKTOP = sp;return (+$$0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if (!($or$cond)) {
  $$sink = $2;
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $$sink;
  return;
 }
 $11 = (($4) + ($lim)|0);
 $$sink = $11;
 $12 = (($f) + 100|0);
 HEAP32[$12>>2] = $$sink;
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32>>0] = $36;
   $$0 = $6;
   return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 return ($$0|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $ex$0$lcssa = 0;
 var $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 if (!($15)) {
  $16 = $3 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($2>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  $22 = ($6|0)==(2047);
  $or$cond = $21 | $22;
  if (!($or$cond)) {
   $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
   $26 = tempRet0;
   $27 = ($26>>>0)>($12>>>0);
   $28 = ($25>>>0)>($11>>>0);
   $29 = ($26|0)==($12|0);
   $30 = $29 & $28;
   $31 = $27 | $30;
   if (!($31)) {
    $32 = ($25|0)==($11|0);
    $33 = ($26|0)==($12|0);
    $34 = $32 & $33;
    if (!($34)) {
     $$0 = $x;
     return (+$$0);
    }
    $35 = $x * 0.0;
    $$0 = $35;
    return (+$$0);
   }
   $36 = ($6|0)==(0);
   if ($36) {
    $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
    $38 = tempRet0;
    $39 = ($38|0)>(-1);
    $40 = ($37>>>0)>(4294967295);
    $41 = ($38|0)==(-1);
    $42 = $41 & $40;
    $43 = $39 | $42;
    if ($43) {
     $45 = $37;$46 = $38;$ex$026 = 0;
     while(1) {
      $44 = (($ex$026) + -1)|0;
      $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
      $48 = tempRet0;
      $49 = ($48|0)>(-1);
      $50 = ($47>>>0)>(4294967295);
      $51 = ($48|0)==(-1);
      $52 = $51 & $50;
      $53 = $49 | $52;
      if ($53) {
       $45 = $47;$46 = $48;$ex$026 = $44;
      } else {
       $ex$0$lcssa = $44;
       break;
      }
     }
    } else {
     $ex$0$lcssa = 0;
    }
    $54 = (1 - ($ex$0$lcssa))|0;
    $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
    $56 = tempRet0;
    $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
   } else {
    $57 = $1 & 1048575;
    $58 = $57 | 1048576;
    $83 = $0;$84 = $58;$ex$1 = $6;
   }
   $59 = ($9|0)==(0);
   if ($59) {
    $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
    $61 = tempRet0;
    $62 = ($61|0)>(-1);
    $63 = ($60>>>0)>(4294967295);
    $64 = ($61|0)==(-1);
    $65 = $64 & $63;
    $66 = $62 | $65;
    if ($66) {
     $68 = $60;$69 = $61;$ey$020 = 0;
     while(1) {
      $67 = (($ey$020) + -1)|0;
      $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
      $71 = tempRet0;
      $72 = ($71|0)>(-1);
      $73 = ($70>>>0)>(4294967295);
      $74 = ($71|0)==(-1);
      $75 = $74 & $73;
      $76 = $72 | $75;
      if ($76) {
       $68 = $70;$69 = $71;$ey$020 = $67;
      } else {
       $ey$0$lcssa = $67;
       break;
      }
     }
    } else {
     $ey$0$lcssa = 0;
    }
    $77 = (1 - ($ey$0$lcssa))|0;
    $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
    $79 = tempRet0;
    $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
   } else {
    $80 = $3 & 1048575;
    $81 = $80 | 1048576;
    $85 = $2;$86 = $81;$ey$1$ph = $9;
   }
   $82 = ($ex$1|0)>($ey$1$ph|0);
   $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
   $88 = tempRet0;
   $89 = ($88|0)>(-1);
   $90 = ($87>>>0)>(4294967295);
   $91 = ($88|0)==(-1);
   $92 = $91 & $90;
   $93 = $89 | $92;
   L27: do {
    if ($82) {
     $152 = $93;$153 = $87;$154 = $88;$94 = $83;$96 = $84;$ex$212 = $ex$1;
     while(1) {
      if ($152) {
       $95 = ($94|0)==($85|0);
       $97 = ($96|0)==($86|0);
       $98 = $95 & $97;
       if ($98) {
        break;
       } else {
        $100 = $153;$101 = $154;
       }
      } else {
       $100 = $94;$101 = $96;
      }
      $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
      $103 = tempRet0;
      $104 = (($ex$212) + -1)|0;
      $105 = ($104|0)>($ey$1$ph|0);
      $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
      $107 = tempRet0;
      $108 = ($107|0)>(-1);
      $109 = ($106>>>0)>(4294967295);
      $110 = ($107|0)==(-1);
      $111 = $110 & $109;
      $112 = $108 | $111;
      if ($105) {
       $152 = $112;$153 = $106;$154 = $107;$94 = $102;$96 = $103;$ex$212 = $104;
      } else {
       $$lcssa7 = $112;$113 = $102;$115 = $103;$155 = $106;$156 = $107;$ex$2$lcssa = $104;
       break L27;
      }
     }
     $99 = $x * 0.0;
     $$0 = $99;
     return (+$$0);
    } else {
     $$lcssa7 = $93;$113 = $83;$115 = $84;$155 = $87;$156 = $88;$ex$2$lcssa = $ex$1;
    }
   } while(0);
   if ($$lcssa7) {
    $114 = ($113|0)==($85|0);
    $116 = ($115|0)==($86|0);
    $117 = $114 & $116;
    if ($117) {
     $125 = $x * 0.0;
     $$0 = $125;
     return (+$$0);
    } else {
     $118 = $156;$120 = $155;
    }
   } else {
    $118 = $115;$120 = $113;
   }
   $119 = ($118>>>0)<(1048576);
   $121 = ($120>>>0)<(0);
   $122 = ($118|0)==(1048576);
   $123 = $122 & $121;
   $124 = $119 | $123;
   if ($124) {
    $126 = $120;$127 = $118;$ex$39 = $ex$2$lcssa;
    while(1) {
     $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
     $129 = tempRet0;
     $130 = (($ex$39) + -1)|0;
     $131 = ($129>>>0)<(1048576);
     $132 = ($128>>>0)<(0);
     $133 = ($129|0)==(1048576);
     $134 = $133 & $132;
     $135 = $131 | $134;
     if ($135) {
      $126 = $128;$127 = $129;$ex$39 = $130;
     } else {
      $137 = $128;$138 = $129;$ex$3$lcssa = $130;
      break;
     }
    }
   } else {
    $137 = $120;$138 = $118;$ex$3$lcssa = $ex$2$lcssa;
   }
   $136 = ($ex$3$lcssa|0)>(0);
   if ($136) {
    $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
    $140 = tempRet0;
    $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
    $142 = tempRet0;
    $143 = $139 | $141;
    $144 = $140 | $142;
    $149 = $144;$151 = $143;
   } else {
    $145 = (1 - ($ex$3$lcssa))|0;
    $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
    $147 = tempRet0;
    $149 = $147;$151 = $146;
   }
   $148 = $149 | $10;
   HEAP32[tempDoublePtr>>2] = $151;HEAP32[tempDoublePtr+4>>2] = $148;$150 = +HEAPF64[tempDoublePtr>>3];
   $$0 = $150;
   return (+$$0);
  }
 }
 $23 = $x * $y;
 $24 = $23 / $23;
 $$0 = $24;
 return (+$$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  return (+$$0);
 }
 return +(0.0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 31]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 31]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa8 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $7 = $$pre;
    break;
   } else {
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   $7 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $8 = $7;
 $9 = $6;
 $10 = (($8) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 31]($f,$s,$l)|0);
  $$0 = $14;
  return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     $i$0$lcssa8 = $i$0;
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 31]($f,$s,$i$0$lcssa8)|0);
   $26 = ($25>>>0)<($i$0$lcssa8>>>0);
   if ($26) {
    $$0 = $i$0$lcssa8;
    return ($$0|0);
   } else {
    $27 = (($s) + ($i$0$lcssa8)|0);
    $28 = (($l) - ($i$0$lcssa8))|0;
    $$pre6 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa8;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 31]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=4208+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _atof($s) {
 $s = $s|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtod($s,0));
 return (+$0);
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i = sp;
 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i,0);
 $4 = (+___floatscan($f$i,1,1));
 $5 = (($f$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _strtold_l($s,$p,$loc) {
 $s = $s|0;
 $p = $p|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i$i = sp;
 dest=$f$i$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i$i,0);
 $4 = (+___floatscan($f$i$i,2,1));
 $5 = (($f$i$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _strtoull($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $$sink$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 $3 = (($s) + 2147483647|0);
 $$sink$i = $2 ? (-1) : $3;
 $4 = (($f$i) + 8|0);
 HEAP32[$4>>2] = $$sink$i;
 $5 = (($f$i) + 76|0);
 HEAP32[$5>>2] = -1;
 ___shlim($f$i,0);
 $6 = (___intscan($f$i,$base,1,-1,-1)|0);
 $7 = tempRet0;
 $8 = ($p|0)==(0|0);
 if ($8) {
  tempRet0 = $7;
  STACKTOP = sp;return ($6|0);
 }
 $9 = (($f$i) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$4>>2]|0;
 $13 = $11;
 $14 = $12;
 $15 = (($13) + ($10))|0;
 $16 = (($15) - ($14))|0;
 $17 = (($s) + ($16)|0);
 HEAP32[$p>>2] = $17;
 tempRet0 = $7;
 STACKTOP = sp;return ($6|0);
}
function _strtoll($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $$sink$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 $3 = (($s) + 2147483647|0);
 $$sink$i = $2 ? (-1) : $3;
 $4 = (($f$i) + 8|0);
 HEAP32[$4>>2] = $$sink$i;
 $5 = (($f$i) + 76|0);
 HEAP32[$5>>2] = -1;
 ___shlim($f$i,0);
 $6 = (___intscan($f$i,$base,1,0,-2147483648)|0);
 $7 = tempRet0;
 $8 = ($p|0)==(0|0);
 if ($8) {
  tempRet0 = $7;
  STACKTOP = sp;return ($6|0);
 }
 $9 = (($f$i) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$4>>2]|0;
 $13 = $11;
 $14 = $12;
 $15 = (($13) + ($10))|0;
 $16 = (($15) - ($14))|0;
 $17 = (($s) + ($16)|0);
 HEAP32[$p>>2] = $17;
 tempRet0 = $7;
 STACKTOP = sp;return ($6|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = (($s$020) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = (($w$011) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = (($s$15) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((2816 + 16|0))>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[((3288 + 8|0))>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[((2816 + 24|0))>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[((2816 + 12|0))>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[((2816 + 24|0))>>2] = $36;
  HEAP32[((2816 + 12|0))>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[((2816 + 20|0))>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[((2816 + 8|0))>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((2816 + 8|0))>>2] = $storemerge21;
  HEAP32[((2816 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = ((2816 + ($77<<2)|0) + 40|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = (($74) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[2816>>2]|0;
    $88 = $87 & $86;
    HEAP32[2816>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = (($76) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = (($76) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = (($74) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = (($R$0) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = (($R$0) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = (($101) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = (($98) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((2816 + ($124<<2)|0) + 304|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[((2816 + 4|0))>>2]|0;
      $131 = $130 & $129;
      HEAP32[((2816 + 4|0))>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[((2816 + 16|0))>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = (($96) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = (($96) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[((2816 + 16|0))>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = (($R$1) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = (($R$1) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = (($143) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[((2816 + 16|0))>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = (($R$1) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = (($149) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi51Z2D = 0, $$pre$phi53Z2D = 0, $$pre$phiZ2D = 0, $$pre50 = 0, $$pre52 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0;
 var $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6$pre = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$045 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$044 = 0, $T$044$lcssa = 0, $cond = 0;
 var $cond40 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((2816 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((2816 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((2816 + 8|0))>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum14 = (4 - ($5))|0;
    $105 = (($p) + ($$sum14)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum24 = (8 - ($5))|0;
    $17 = (($p) + ($$sum24)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum25 = (12 - ($5))|0;
    $19 = (($p) + ($$sum25)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((2816 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[2816>>2]|0;
     $32 = $31 & $30;
     HEAP32[2816>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre52 = (($20) + 8|0);
     $$pre$phi53Z2D = $$pre52;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi53Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi53Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum16 = (24 - ($5))|0;
   $39 = (($p) + ($$sum16)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum17 = (12 - ($5))|0;
   $41 = (($p) + ($$sum17)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum18 = (16 - ($5))|0;
     $$sum19 = (($$sum18) + 4)|0;
     $53 = (($p) + ($$sum19)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum18)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = (8 - ($5))|0;
     $44 = (($p) + ($$sum23)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum20 = (28 - ($5))|0;
    $67 = (($p) + ($$sum20)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((2816 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((2816 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((2816 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((2816 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((2816 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum21 = (16 - ($5))|0;
    $86 = (($p) + ($$sum21)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = (($R$1) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = (($87) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum22 = (($$sum21) + 4)|0;
    $92 = (($p) + ($$sum22)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[((2816 + 16|0))>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = (($R$1) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = (($93) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[((2816 + 16|0))>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[((2816 + 24|0))>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[((2816 + 12|0))>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[((2816 + 12|0))>>2] = $115;
   HEAP32[((2816 + 24|0))>>2] = $$0;
   $116 = $115 | 1;
   $117 = (($$0) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[((2816 + 20|0))>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[((2816 + 20|0))>>2] = 0;
   HEAP32[((2816 + 8|0))>>2] = 0;
   return;
  }
  $120 = HEAP32[((2816 + 20|0))>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[((2816 + 8|0))>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[((2816 + 8|0))>>2] = $123;
   HEAP32[((2816 + 20|0))>>2] = $$0;
   $124 = $123 | 1;
   $125 = (($$0) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum12 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum12)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum13 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum13)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = ((2816 + ($135<<2)|0) + 40|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = (($132) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[2816>>2]|0;
     $146 = $145 & $144;
     HEAP32[2816>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre50 = (($134) + 8|0);
     $$pre$phi51Z2D = $$pre50;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = (($134) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi51Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = (($132) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi51Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = (($R7$0) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = (($R7$0) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum11)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = (($159) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = (($156) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum8 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum8)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = ((2816 + ($182<<2)|0) + 304|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond40 = ($R7$1|0)==(0|0);
      if ($cond40) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[((2816 + 4|0))>>2]|0;
       $189 = $188 & $187;
       HEAP32[((2816 + 4|0))>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[((2816 + 16|0))>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = (($154) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = (($154) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[((2816 + 16|0))>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = (($R7$1) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum9 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum9)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = (($R7$1) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = (($201) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum10 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum10)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[((2816 + 16|0))>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = (($R7$1) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = (($207) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = (($$0) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[((2816 + 20|0))>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[((2816 + 8|0))>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = (($$0) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = ((2816 + ($224<<2)|0) + 40|0);
  $226 = HEAP32[2816>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[2816>>2] = $230;
   $$sum6$pre = (($224) + 2)|0;
   $$pre = ((2816 + ($$sum6$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $225;
  } else {
   $$sum7 = (($224) + 2)|0;
   $231 = ((2816 + ($$sum7<<2)|0) + 40|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[((2816 + 16|0))>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = (($F16$0) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = (($$0) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = (($$0) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = ((2816 + ($I19$0<<2)|0) + 304|0);
 $264 = (($$0) + 28|0);
 HEAP32[$264>>2] = $I19$0;
 $265 = (($$0) + 16|0);
 $266 = (($$0) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[((2816 + 4|0))>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[((2816 + 4|0))>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = (($$0) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = (($$0) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = (($$0) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($I19$0|0)==(31);
 if ($276) {
  $284 = 0;
 } else {
  $277 = $I19$0 >>> 1;
  $278 = (25 - ($277))|0;
  $284 = $278;
 }
 $279 = (($275) + 4|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = $280 & -8;
 $282 = ($281|0)==($$1|0);
 L194: do {
  if ($282) {
   $T$0$lcssa = $275;
  } else {
   $283 = $$1 << $284;
   $K20$045 = $283;$T$044 = $275;
   while(1) {
    $291 = $K20$045 >>> 31;
    $292 = ((($T$044) + ($291<<2)|0) + 16|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$044$lcssa = $T$044;
     break;
    }
    $285 = $K20$045 << 1;
    $286 = (($287) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L194;
    } else {
     $K20$045 = $285;$T$044 = $287;
    }
   }
   $294 = HEAP32[((2816 + 16|0))>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = (($$0) + 24|0);
   HEAP32[$296>>2] = $T$044$lcssa;
   $297 = (($$0) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = (($$0) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = (($T$0$lcssa) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[((2816 + 16|0))>>2]|0;
 $302 = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = ($300>>>0)>=($301>>>0);
 $or$cond = $302 & $303;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $304 = (($300) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = (($$0) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = (($$0) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = (($$0) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$ = 0, $$lcssa18 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$111 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $or$cond5 = 0, $x$012 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 if ((($9|0) == 43) | (($9|0) == 45)) {
  $11 = $10&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = (($12) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $22 & $21;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
 } else {
  $c$0 = $9;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $96 = -2147483648;$97 = 0;
   tempRet0 = $96;
   return ($97|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $96 = -2147483648;$97 = 0;
  tempRet0 = $96;
  return ($97|0);
 } else {
  $c$111 = $c$0;$x$012 = 0;
 }
 while(1) {
  $33 = ($x$012*10)|0;
  $34 = (($c$111) + -48)|0;
  $35 = (($34) + ($33))|0;
  $36 = HEAP32[$0>>2]|0;
  $37 = HEAP32[$2>>2]|0;
  $38 = ($36>>>0)<($37>>>0);
  if ($38) {
   $39 = (($36) + 1|0);
   HEAP32[$0>>2] = $39;
   $40 = HEAP8[$36>>0]|0;
   $41 = $40&255;
   $c$1$be = $41;
  } else {
   $42 = (___shgetc($f)|0);
   $c$1$be = $42;
  }
  $43 = (($c$1$be) + -48)|0;
  $44 = ($43>>>0)<(10);
  $45 = ($35|0)<(214748364);
  $$ = $44 & $45;
  if ($$) {
   $c$111 = $c$1$be;$x$012 = $35;
  } else {
   $$lcssa18 = $35;$c$1$be$lcssa = $c$1$be;
   break;
  }
 }
 $46 = ($$lcssa18|0)<(0);
 $47 = $46 << 31 >> 31;
 $48 = (($c$1$be$lcssa) + -48)|0;
 $49 = ($48>>>0)<(10);
 if ($49) {
  $52 = $$lcssa18;$53 = $47;$c$27 = $c$1$be$lcssa;
  while(1) {
   $54 = (___muldi3(($52|0),($53|0),10,0)|0);
   $55 = tempRet0;
   $56 = ($c$27|0)<(0);
   $57 = $56 << 31 >> 31;
   $58 = (_i64Add(($c$27|0),($57|0),-48,-1)|0);
   $59 = tempRet0;
   $60 = (_i64Add(($58|0),($59|0),($54|0),($55|0))|0);
   $61 = tempRet0;
   $62 = HEAP32[$0>>2]|0;
   $63 = HEAP32[$2>>2]|0;
   $64 = ($62>>>0)<($63>>>0);
   if ($64) {
    $65 = (($62) + 1|0);
    HEAP32[$0>>2] = $65;
    $66 = HEAP8[$62>>0]|0;
    $67 = $66&255;
    $c$2$be = $67;
   } else {
    $68 = (___shgetc($f)|0);
    $c$2$be = $68;
   }
   $69 = (($c$2$be) + -48)|0;
   $70 = ($69>>>0)<(10);
   $71 = ($61|0)<(21474836);
   $72 = ($60>>>0)<(2061584302);
   $73 = ($61|0)==(21474836);
   $74 = $73 & $72;
   $75 = $71 | $74;
   $or$cond5 = $70 & $75;
   if ($or$cond5) {
    $52 = $60;$53 = $61;$c$27 = $c$2$be;
   } else {
    $90 = $60;$91 = $61;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $90 = $$lcssa18;$91 = $47;$c$2$lcssa = $c$1$be$lcssa;
 }
 $50 = (($c$2$lcssa) + -48)|0;
 $51 = ($50>>>0)<(10);
 if ($51) {
  while(1) {
   $76 = HEAP32[$0>>2]|0;
   $77 = HEAP32[$2>>2]|0;
   $78 = ($76>>>0)<($77>>>0);
   if ($78) {
    $79 = (($76) + 1|0);
    HEAP32[$0>>2] = $79;
    $80 = HEAP8[$76>>0]|0;
    $81 = $80&255;
    $c$3$be = $81;
   } else {
    $82 = (___shgetc($f)|0);
    $c$3$be = $82;
   }
   $83 = (($c$3$be) + -48)|0;
   $84 = ($83>>>0)<(10);
   if (!($84)) {
    break;
   }
  }
 }
 $85 = HEAP32[$2>>2]|0;
 $86 = ($85|0)==(0|0);
 if (!($86)) {
  $87 = HEAP32[$0>>2]|0;
  $88 = (($87) + -1|0);
  HEAP32[$0>>2] = $88;
 }
 $89 = ($neg$0|0)!=(0);
 $92 = (_i64Subtract(0,0,($90|0),($91|0))|0);
 $93 = tempRet0;
 $94 = $89 ? $92 : $90;
 $95 = $89 ? $93 : $91;
 $96 = $95;$97 = $94;
 tempRet0 = $96;
 return ($97|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i105$i = 0, $$0$lcssa$i112$i = 0, $$0$lcssa$i136$i = 0, $$0$lcssa$i151$i = 0, $$0$lcssa$i47 = 0, $$0$lcssa$i47$i = 0, $$0$lcssa$i52 = 0, $$0$lcssa$i54 = 0, $$0$lcssa$i54$i = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i62 = 0, $$0$lcssa$i64$i = 0;
 var $$0$lcssa$i69 = 0, $$0$lcssa$i71$i = 0, $$0$lcssa$i76 = 0, $$0$lcssa$i77$i = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i86 = 0, $$0$lcssa$i92$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i103$i = 0, $$01$i110$i = 0, $$01$i134$i = 0, $$01$i149$i = 0, $$01$i45 = 0, $$01$i45$i = 0, $$01$i52$i = 0, $$01$i60 = 0, $$01$i62$i = 0, $$01$i67 = 0, $$01$i69$i = 0;
 var $$01$i74 = 0, $$01$i75$i = 0, $$01$i82$i = 0, $$01$i84 = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i93$i = 0, $$012$i = 0, $$013$i = 0.0, $$019$i = 0, $$03$i49 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i87$i = 0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i120$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i118$i = 0;
 var $$12$i127$i = 0, $$12$i142$i = 0, $$12$i142$i$lcssa = 0, $$12$i95$i = 0, $$120$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$21 = 0, $$216$$29$i = 0, $$216$$31$i = 0, $$216$i = 0, $$25 = 0, $$26 = 0, $$26$i = 0, $$26$us$i = 0, $$27$i = 0, $$28$i = 0.0, $$29$i = 0, $$3$i = 0.0;
 var $$31$i = 0, $$317$i = 0, $$39$i = 0, $$4$i = 0.0, $$418$lcssa$i = 0, $$418193$i = 0, $$5205$i = 0, $$93 = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us309$i = 0, $$a$3$us310$i = 0, $$a$3311$i = 0, $$a$3312$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa107 = 0, $$lcssa283$i = 0, $$lcssa345 = 0, $$lcssa346 = 0;
 var $$lcssa350 = 0, $$lcssa352 = 0, $$lcssa353 = 0, $$lcssa354 = 0, $$lcssa355 = 0, $$lcssa356 = 0, $$lcssa358 = 0, $$lcssa359 = 0, $$lcssa365 = 0, $$lcssa369 = 0, $$lcssa371 = 0, $$lcssa374 = 0, $$lcssa375 = 0, $$lcssa378 = 0.0, $$lcssa379 = 0, $$lcssa382 = 0, $$lcssa386 = 0, $$mask$i = 0, $$mask$i39 = 0, $$mask1$i = 0;
 var $$mask1$i38 = 0, $$neg159$i = 0, $$neg160$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr154$i = 0, $$pre = 0, $$pre$i = 0, $$pre269 = 0, $$pre308$i = 0, $$sum$i = 0, $$sum21$i = 0, $$sum22$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0.0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0.0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1175$phi = 0, $1176 = 0, $1176$phi = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $140$phi = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0.0, $433 = 0, $434 = 0.0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0.0, $473 = 0.0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0.0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0.0, $544 = 0.0, $545 = 0.0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0.0, $559 = 0.0, $56 = 0, $560 = 0.0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0.0, $574 = 0.0, $575 = 0.0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0.0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0.0, $638 = 0.0, $639 = 0.0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $655$phi = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0;
 var $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0;
 var $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0;
 var $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0.0, $777 = 0.0, $778 = 0, $779 = 0.0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0;
 var $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0;
 var $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0;
 var $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0;
 var $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0;
 var $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0;
 var $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0;
 var $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0;
 var $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0;
 var $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0;
 var $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $955$phi = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
 var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
 var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0;
 var $a$1 = 0, $a$1$lcssa$i = 0, $a$1261$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3248$i = 0, $a$3248$us$i = 0, $a$5$lcssa$i = 0, $a$5223$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $a$8$ph294$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0;
 var $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0;
 var $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0;
 var $buf = 0, $buf$i = 0, $carry$0254$i = 0, $carry3$0242$i = 0, $carry3$0242$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0253$i = 0, $d$0255$i = 0, $d$1241$i = 0, $d$1241$us$i = 0, $d$2$lcssa$i = 0, $d$2222$i = 0, $d$3$i = 0, $d$4199$i = 0, $d$5192$i = 0, $d$6204$i = 0, $e$0237$i = 0;
 var $e$1$i = 0, $e$2218$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1209$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded101 = 0, $expanded102 = 0, $expanded103 = 0, $expanded105 = 0, $expanded106 = 0, $expanded108 = 0, $expanded109 = 0;
 var $expanded110 = 0, $expanded112 = 0, $expanded113 = 0, $expanded115 = 0, $expanded116 = 0, $expanded117 = 0, $expanded119 = 0, $expanded120 = 0, $expanded122 = 0, $expanded123 = 0, $expanded124 = 0, $expanded126 = 0, $expanded127 = 0, $expanded129 = 0, $expanded130 = 0, $expanded131 = 0, $expanded133 = 0, $expanded134 = 0, $expanded136 = 0, $expanded137 = 0;
 var $expanded138 = 0, $expanded140 = 0, $expanded141 = 0, $expanded143 = 0, $expanded144 = 0, $expanded145 = 0, $expanded147 = 0, $expanded148 = 0, $expanded150 = 0, $expanded151 = 0, $expanded152 = 0, $expanded154 = 0, $expanded155 = 0, $expanded157 = 0, $expanded158 = 0, $expanded159 = 0, $expanded161 = 0, $expanded162 = 0, $expanded164 = 0, $expanded165 = 0;
 var $expanded166 = 0, $expanded168 = 0, $expanded169 = 0, $expanded171 = 0, $expanded172 = 0, $expanded173 = 0, $expanded175 = 0, $expanded176 = 0, $expanded178 = 0, $expanded179 = 0, $expanded180 = 0, $expanded182 = 0, $expanded183 = 0, $expanded185 = 0, $expanded186 = 0, $expanded187 = 0, $expanded189 = 0, $expanded190 = 0, $expanded192 = 0, $expanded193 = 0;
 var $expanded194 = 0, $expanded196 = 0, $expanded197 = 0, $expanded199 = 0, $expanded200 = 0, $expanded201 = 0, $expanded203 = 0, $expanded204 = 0, $expanded206 = 0, $expanded207 = 0, $expanded208 = 0, $expanded210 = 0, $expanded211 = 0, $expanded213 = 0, $expanded214 = 0, $expanded215 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded68 = 0;
 var $expanded70 = 0, $expanded71 = 0, $expanded73 = 0, $expanded74 = 0, $expanded75 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded82 = 0, $expanded84 = 0, $expanded85 = 0, $expanded87 = 0, $expanded88 = 0, $expanded89 = 0, $expanded91 = 0, $expanded92 = 0, $expanded94 = 0, $expanded95 = 0, $expanded96 = 0;
 var $expanded98 = 0, $expanded99 = 0, $fl$0111 = 0, $fl$0171 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa272 = 0, $i$0176 = 0, $i$0236$i = 0, $i$03$i = 0, $i$03$i31 = 0, $i$1$lcssa$i = 0, $i$1187 = 0, $i$1230$i = 0, $i$2163 = 0, $i$2163$lcssa = 0;
 var $i$2217$i = 0, $i$3161 = 0, $i$3213$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i33 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i29 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i32 = 0, $isdigittmp1$i = 0, $isdigittmp1$i28 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i30 = 0, $isdigittmp9 = 0;
 var $j$0$i = 0, $j$0229$i = 0, $j$0231$i = 0, $j$1214$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1175 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0;
 var $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i101$i = 0, $or$cond$i108$i = 0, $or$cond$i43$i = 0, $or$cond$i50$i = 0, $or$cond$i58 = 0, $or$cond$i60$i = 0, $or$cond$i65 = 0, $or$cond$i67$i = 0, $or$cond$i72 = 0, $or$cond$i80 = 0, $or$cond$i80$i = 0, $or$cond$i82 = 0, $or$cond10$i = 0, $or$cond10191$i = 0, $or$cond12$i = 0, $or$cond15 = 0, $or$cond19 = 0, $or$cond23 = 0;
 var $or$cond274 = 0, $or$cond35$i = 0, $or$cond37$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$4271 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0;
 var $prefix$2 = 0, $r$0$a$8$i = 0, $re$1187$i = 0, $round$0186$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s1$0$i = 0, $s7$0196$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0188$i = 0, $s9$0$i = 0, $s9$1200$i = 0, $s9$2$i = 0;
 var $sext = 0, $sext94 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa351 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8109 = 0, $storemerge8170 = 0, $t$0 = 0, $t$1 = 0, $uglygep$i = 0, $uglygep296$i = 0, $uglygep300$i = 0, $uglygep300301$i = 0, $umax$i = 0, $umax297$i = 0, $umax297298299$i = 0, $w$$i = 0;
 var $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$25$i = 0, $w$38$i = 0, $wc = 0, $ws$0177 = 0, $ws$1188 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i117$i = 0, $y$03$i126$i = 0, $y$03$i141$i = 0, $y$03$i94$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0164 = 0, $z$1$lcssa$i = 0, $z$1260$i = 0, $z$2 = 0;
 var $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3247$i = 0, $z$3247$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0;
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 836|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 824|0;
 $pad$i = sp + 568|0;
 $buf = sp + 528|0;
 $wc = sp;
 $mb = sp + 520|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = $wc;
 $7 = (($ebuf0$i) + 12|0);
 $8 = (($ebuf0$i) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = (($big$i) + 288|0);
 $14 = (($buf$i) + 9|0);
 $15 = $14;
 $16 = (($buf$i) + 8|0);
 $1175 = 0;$1176 = 0;$23 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$23>>0]|0;
  $24 = ($22<<24>>24)==(0);
  if ($24) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 355;
   break;
  } else {
   $1177 = $22;$26 = $23;
  }
  while(1) {
   if ((($1177<<24>>24) == 37)) {
    $28 = $26;$z$0164 = $26;
    label = 9;
    break;
   } else if ((($1177<<24>>24) == 0)) {
    $$lcssa107 = $26;$z$0$lcssa = $26;
    break;
   }
   $25 = (($26) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $1177 = $$pre;$26 = $25;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $27 = (($28) + 1|0);
     $29 = HEAP8[$27>>0]|0;
     $30 = ($29<<24>>24)==(37);
     if (!($30)) {
      $$lcssa107 = $28;$z$0$lcssa = $z$0164;
      break L12;
     }
     $31 = (($z$0164) + 1|0);
     $32 = (($28) + 2|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = ($33<<24>>24)==(37);
     if ($34) {
      $28 = $32;$z$0164 = $31;
      label = 9;
     } else {
      $$lcssa107 = $32;$z$0$lcssa = $31;
      break;
     }
    }
   }
  } while(0);
  $35 = $z$0$lcssa;
  $36 = $23;
  $37 = (($35) - ($36))|0;
  if ($1) {
   (___fwritex($23,$37,$f)|0);
  }
  $38 = ($z$0$lcssa|0)==($23|0);
  if (!($38)) {
   $l10n$0$phi = $l10n$0;$1176$phi = $1176;$1175$phi = $1175;$23 = $$lcssa107;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$0$phi;$1176 = $1176$phi;$1175 = $1175$phi;
   continue;
  }
  $39 = (($$lcssa107) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = (($$lcssa107) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = (($$lcssa107) + 3|0);
   $$93 = $44 ? $45 : $39;
   $$l10n$0 = $44 ? 1 : $l10n$0;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$pre269 = HEAP8[$$93>>0]|0;
   $47 = $$pre269;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$93;
  } else {
   $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  $48 = $46 & -32;
  $49 = ($48|0)==(32);
  L24: do {
   if ($49) {
    $51 = $46;$56 = $47;$fl$0171 = 0;$storemerge8170 = $storemerge;
    while(1) {
     $50 = (($51) + -32)|0;
     $52 = 1 << $50;
     $53 = $52 & 75913;
     $54 = ($53|0)==(0);
     if ($54) {
      $65 = $56;$fl$0111 = $fl$0171;$storemerge8109 = $storemerge8170;
      break L24;
     }
     $55 = $56 << 24 >> 24;
     $57 = (($55) + -32)|0;
     $58 = 1 << $57;
     $59 = $58 | $fl$0171;
     $60 = (($storemerge8170) + 1|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61 << 24 >> 24;
     $63 = $62 & -32;
     $64 = ($63|0)==(32);
     if ($64) {
      $51 = $62;$56 = $61;$fl$0171 = $59;$storemerge8170 = $60;
     } else {
      $65 = $61;$fl$0111 = $59;$storemerge8109 = $60;
      break;
     }
    }
   } else {
    $65 = $47;$fl$0111 = 0;$storemerge8109 = $storemerge;
   }
  } while(0);
  $66 = ($65<<24>>24)==(42);
  do {
   if ($66) {
    $67 = (($storemerge8109) + 1|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68 << 24 >> 24;
    $isdigittmp11 = (($69) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $70 = (($storemerge8109) + 2|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(36);
     if ($72) {
      $73 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$73>>2] = 10;
      $74 = HEAP8[$67>>0]|0;
      $75 = $74 << 24 >> 24;
      $76 = (($75) + -48)|0;
      $77 = (($nl_arg) + ($76<<3)|0);
      $78 = $77;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = (($78) + 4)|0;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = (($storemerge8109) + 3|0);
      $l10n$2 = 1;$storemerge13 = $84;$w$0 = $80;
     } else {
      label = 23;
     }
    } else {
     label = 23;
    }
    if ((label|0) == 23) {
     label = 0;
     $85 = ($l10n$1|0)==(0);
     if (!($85)) {
      $$0 = -1;
      label = 374;
      break L1;
     }
     if (!($1)) {
      $105 = $67;$fl$1 = $fl$0111;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $86 = $arglist_current;
     $87 = (0 + 4|0);
     $expanded64 = $87;
     $expanded = (($expanded64) - 1)|0;
     $88 = (($86) + ($expanded))|0;
     $89 = (0 + 4|0);
     $expanded68 = $89;
     $expanded67 = (($expanded68) - 1)|0;
     $expanded66 = $expanded67 ^ -1;
     $90 = $88 & $expanded66;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next = (($91) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $67;$w$0 = $92;
    }
    $93 = ($w$0|0)<(0);
    if ($93) {
     $94 = $fl$0111 | 8192;
     $95 = (0 - ($w$0))|0;
     $105 = $storemerge13;$fl$1 = $94;$l10n$3 = $l10n$2;$w$1 = $95;
    } else {
     $105 = $storemerge13;$fl$1 = $fl$0111;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $96 = $65 << 24 >> 24;
    $isdigittmp1$i = (($96) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $100 = $storemerge8109;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $97 = ($i$03$i*10)|0;
      $98 = (($97) + ($isdigittmp4$i))|0;
      $99 = (($100) + 1|0);
      $101 = HEAP8[$99>>0]|0;
      $102 = $101 << 24 >> 24;
      $isdigittmp$i = (($102) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $100 = $99;$i$03$i = $98;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa345 = $98;$$lcssa346 = $99;
       break;
      }
     }
     $103 = ($$lcssa345|0)<(0);
     if ($103) {
      $$0 = -1;
      label = 374;
      break L1;
     } else {
      $105 = $$lcssa346;$fl$1 = $fl$0111;$l10n$3 = $l10n$1;$w$1 = $$lcssa345;
     }
    } else {
     $105 = $storemerge8109;$fl$1 = $fl$0111;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $104 = HEAP8[$105>>0]|0;
  $106 = ($104<<24>>24)==(46);
  L45: do {
   if ($106) {
    $107 = (($105) + 1|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = ($108<<24>>24)==(42);
    if (!($109)) {
     $136 = $108 << 24 >> 24;
     $isdigittmp1$i28 = (($136) + -48)|0;
     $isdigit2$i29 = ($isdigittmp1$i28>>>0)<(10);
     if ($isdigit2$i29) {
      $1179 = $107;$140 = $105;$i$03$i31 = 0;$isdigittmp4$i30 = $isdigittmp1$i28;
     } else {
      $1178 = $107;$p$0 = 0;
      break;
     }
     while(1) {
      $137 = ($i$03$i31*10)|0;
      $138 = (($137) + ($isdigittmp4$i30))|0;
      $139 = (($140) + 2|0);
      $141 = HEAP8[$139>>0]|0;
      $142 = $141 << 24 >> 24;
      $isdigittmp$i32 = (($142) + -48)|0;
      $isdigit$i33 = ($isdigittmp$i32>>>0)<(10);
      if ($isdigit$i33) {
       $140$phi = $1179;$1179 = $139;$i$03$i31 = $138;$isdigittmp4$i30 = $isdigittmp$i32;$140 = $140$phi;
      } else {
       $1178 = $139;$p$0 = $138;
       break L45;
      }
     }
    }
    $110 = (($105) + 2|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111 << 24 >> 24;
    $isdigittmp9 = (($112) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $113 = (($105) + 3|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = ($114<<24>>24)==(36);
     if ($115) {
      $116 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$116>>2] = 10;
      $117 = HEAP8[$110>>0]|0;
      $118 = $117 << 24 >> 24;
      $119 = (($118) + -48)|0;
      $120 = (($nl_arg) + ($119<<3)|0);
      $121 = $120;
      $122 = $121;
      $123 = HEAP32[$122>>2]|0;
      $124 = (($121) + 4)|0;
      $125 = $124;
      $126 = HEAP32[$125>>2]|0;
      $127 = (($105) + 4|0);
      $1178 = $127;$p$0 = $123;
      break;
     }
    }
    $128 = ($l10n$3|0)==(0);
    if (!($128)) {
     $$0 = -1;
     label = 374;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $129 = $arglist_current2;
     $130 = (0 + 4|0);
     $expanded71 = $130;
     $expanded70 = (($expanded71) - 1)|0;
     $131 = (($129) + ($expanded70))|0;
     $132 = (0 + 4|0);
     $expanded75 = $132;
     $expanded74 = (($expanded75) - 1)|0;
     $expanded73 = $expanded74 ^ -1;
     $133 = $131 & $expanded73;
     $134 = $133;
     $135 = HEAP32[$134>>2]|0;
     $arglist_next3 = (($134) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $1178 = $110;$p$0 = $135;
    } else {
     $1178 = $110;$p$0 = 0;
    }
   } else {
    $1178 = $105;$p$0 = -1;
   }
  } while(0);
  $144 = $1178;$st$0 = 0;
  while(1) {
   $143 = HEAP8[$144>>0]|0;
   $145 = $143 << 24 >> 24;
   $146 = (($145) + -65)|0;
   $147 = ($146>>>0)>(57);
   if ($147) {
    $$0 = -1;
    label = 374;
    break L1;
   }
   $148 = (($144) + 1|0);
   $149 = ((3640 + (($st$0*58)|0)|0) + ($146)|0);
   $150 = HEAP8[$149>>0]|0;
   $151 = $150&255;
   $152 = (($151) + -1)|0;
   $153 = ($152>>>0)<(8);
   if ($153) {
    $144 = $148;$st$0 = $151;
   } else {
    $$lcssa350 = $144;$$lcssa352 = $148;$$lcssa353 = $150;$$lcssa354 = $151;$st$0$lcssa351 = $st$0;
    break;
   }
  }
  $154 = ($$lcssa353<<24>>24)==(0);
  if ($154) {
   $$0 = -1;
   label = 374;
   break;
  }
  $155 = ($$lcssa353<<24>>24)==(19);
  $156 = ($argpos$0|0)>(-1);
  L64: do {
   if ($155) {
    if ($156) {
     $$0 = -1;
     label = 374;
     break L1;
    } else {
     $1180 = $1175;$1181 = $1176;
     label = 62;
    }
   } else {
    if ($156) {
     $157 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$157>>2] = $$lcssa354;
     $158 = (($nl_arg) + ($argpos$0<<3)|0);
     $159 = $158;
     $160 = $159;
     $161 = HEAP32[$160>>2]|0;
     $162 = (($159) + 4)|0;
     $163 = $162;
     $164 = HEAP32[$163>>2]|0;
     $1180 = $164;$1181 = $161;
     label = 62;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 374;
     break L1;
    }
    $165 = ($$lcssa353&255)>(20);
    if ($165) {
     $1182 = $$lcssa352;$267 = $1176;$294 = $1175;
    } else {
     do {
      switch ($$lcssa354|0) {
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $221 = $arglist_current23;
       $222 = (0 + 4|0);
       $expanded120 = $222;
       $expanded119 = (($expanded120) - 1)|0;
       $223 = (($221) + ($expanded119))|0;
       $224 = (0 + 4|0);
       $expanded124 = $224;
       $expanded123 = (($expanded124) - 1)|0;
       $expanded122 = $expanded123 ^ -1;
       $225 = $223 & $expanded122;
       $226 = $225;
       $227 = HEAP32[$226>>2]|0;
       $arglist_next24 = (($226) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $228 = $227&255;
       $229 = $228 << 24 >> 24;
       $230 = ($229|0)<(0);
       $231 = $230 << 31 >> 31;
       $sext = $227 << 24;
       $232 = $sext >> 24;
       $1182 = $$lcssa352;$267 = $232;$294 = $231;
       break L64;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $190 = $arglist_current14;
       $191 = (0 + 8|0);
       $expanded99 = $191;
       $expanded98 = (($expanded99) - 1)|0;
       $192 = (($190) + ($expanded98))|0;
       $193 = (0 + 8|0);
       $expanded103 = $193;
       $expanded102 = (($expanded103) - 1)|0;
       $expanded101 = $expanded102 ^ -1;
       $194 = $192 & $expanded101;
       $195 = $194;
       $196 = $195;
       $197 = $196;
       $198 = HEAP32[$197>>2]|0;
       $199 = (($196) + 4)|0;
       $200 = $199;
       $201 = HEAP32[$200>>2]|0;
       $arglist_next15 = (($195) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $1182 = $$lcssa352;$267 = $198;$294 = $201;
       break L64;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $214 = $arglist_current20;
       $215 = (0 + 4|0);
       $expanded113 = $215;
       $expanded112 = (($expanded113) - 1)|0;
       $216 = (($214) + ($expanded112))|0;
       $217 = (0 + 4|0);
       $expanded117 = $217;
       $expanded116 = (($expanded117) - 1)|0;
       $expanded115 = $expanded116 ^ -1;
       $218 = $216 & $expanded115;
       $219 = $218;
       $220 = HEAP32[$219>>2]|0;
       $arglist_next21 = (($219) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i38 = $220 & 65535;
       $1182 = $$lcssa352;$267 = $$mask1$i38;$294 = 0;
       break L64;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $202 = $arglist_current17;
       $203 = (0 + 4|0);
       $expanded106 = $203;
       $expanded105 = (($expanded106) - 1)|0;
       $204 = (($202) + ($expanded105))|0;
       $205 = (0 + 4|0);
       $expanded110 = $205;
       $expanded109 = (($expanded110) - 1)|0;
       $expanded108 = $expanded109 ^ -1;
       $206 = $204 & $expanded108;
       $207 = $206;
       $208 = HEAP32[$207>>2]|0;
       $arglist_next18 = (($207) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $209 = $208&65535;
       $210 = $209 << 16 >> 16;
       $211 = ($210|0)<(0);
       $212 = $211 << 31 >> 31;
       $sext94 = $208 << 16;
       $213 = $sext94 >> 16;
       $1182 = $$lcssa352;$267 = $213;$294 = $212;
       break L64;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $233 = $arglist_current26;
       $234 = (0 + 4|0);
       $expanded127 = $234;
       $expanded126 = (($expanded127) - 1)|0;
       $235 = (($233) + ($expanded126))|0;
       $236 = (0 + 4|0);
       $expanded131 = $236;
       $expanded130 = (($expanded131) - 1)|0;
       $expanded129 = $expanded130 ^ -1;
       $237 = $235 & $expanded129;
       $238 = $237;
       $239 = HEAP32[$238>>2]|0;
       $arglist_next27 = (($238) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i39 = $239 & 255;
       $1182 = $$lcssa352;$267 = $$mask$i39;$294 = 0;
       break L64;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       $240 = $arglist_current29;
       $241 = (0 + 8|0);
       $expanded134 = $241;
       $expanded133 = (($expanded134) - 1)|0;
       $242 = (($240) + ($expanded133))|0;
       $243 = (0 + 8|0);
       $expanded138 = $243;
       $expanded137 = (($expanded138) - 1)|0;
       $expanded136 = $expanded137 ^ -1;
       $244 = $242 & $expanded136;
       $245 = $244;
       $246 = +HEAPF64[$245>>3];
       $arglist_next30 = (($245) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $246;$247 = HEAP32[tempDoublePtr>>2]|0;
       $248 = HEAP32[tempDoublePtr+4>>2]|0;
       $1182 = $$lcssa352;$267 = $247;$294 = $248;
       break L64;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       $249 = $arglist_current32;
       $250 = (0 + 8|0);
       $expanded141 = $250;
       $expanded140 = (($expanded141) - 1)|0;
       $251 = (($249) + ($expanded140))|0;
       $252 = (0 + 8|0);
       $expanded145 = $252;
       $expanded144 = (($expanded145) - 1)|0;
       $expanded143 = $expanded144 ^ -1;
       $253 = $251 & $expanded143;
       $254 = $253;
       $255 = +HEAPF64[$254>>3];
       $arglist_next33 = (($254) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $255;$256 = HEAP32[tempDoublePtr>>2]|0;
       $257 = HEAP32[tempDoublePtr+4>>2]|0;
       $1182 = $$lcssa352;$267 = $256;$294 = $257;
       break L64;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $166 = $arglist_current5;
       $167 = (0 + 4|0);
       $expanded78 = $167;
       $expanded77 = (($expanded78) - 1)|0;
       $168 = (($166) + ($expanded77))|0;
       $169 = (0 + 4|0);
       $expanded82 = $169;
       $expanded81 = (($expanded82) - 1)|0;
       $expanded80 = $expanded81 ^ -1;
       $170 = $168 & $expanded80;
       $171 = $170;
       $172 = HEAP32[$171>>2]|0;
       $arglist_next6 = (($171) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $173 = $172;
       $1182 = $$lcssa352;$267 = $173;$294 = $1175;
       break L64;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $174 = $arglist_current8;
       $175 = (0 + 4|0);
       $expanded85 = $175;
       $expanded84 = (($expanded85) - 1)|0;
       $176 = (($174) + ($expanded84))|0;
       $177 = (0 + 4|0);
       $expanded89 = $177;
       $expanded88 = (($expanded89) - 1)|0;
       $expanded87 = $expanded88 ^ -1;
       $178 = $176 & $expanded87;
       $179 = $178;
       $180 = HEAP32[$179>>2]|0;
       $arglist_next9 = (($179) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $181 = ($180|0)<(0);
       $182 = $181 << 31 >> 31;
       $1182 = $$lcssa352;$267 = $180;$294 = $182;
       break L64;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $183 = $arglist_current11;
       $184 = (0 + 4|0);
       $expanded92 = $184;
       $expanded91 = (($expanded92) - 1)|0;
       $185 = (($183) + ($expanded91))|0;
       $186 = (0 + 4|0);
       $expanded96 = $186;
       $expanded95 = (($expanded96) - 1)|0;
       $expanded94 = $expanded95 ^ -1;
       $187 = $185 & $expanded94;
       $188 = $187;
       $189 = HEAP32[$188>>2]|0;
       $arglist_next12 = (($188) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $1182 = $$lcssa352;$267 = $189;$294 = 0;
       break L64;
       break;
      }
      default: {
       $1182 = $$lcssa352;$267 = $1176;$294 = $1175;
       break L64;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 62) {
   label = 0;
   if ($1) {
    $1182 = $$lcssa352;$267 = $1181;$294 = $1180;
   } else {
    $1175 = $1180;$1176 = $1181;$23 = $$lcssa352;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $258 = HEAP8[$$lcssa350>>0]|0;
  $259 = $258 << 24 >> 24;
  $260 = ($st$0$lcssa351|0)!=(0);
  $261 = $259 & 15;
  $262 = ($261|0)==(3);
  $or$cond15 = $260 & $262;
  $263 = $259 & -33;
  $t$0 = $or$cond15 ? $263 : $259;
  $264 = $fl$1 & 8192;
  $265 = ($264|0)==(0);
  $266 = $fl$1 & -65537;
  $fl$1$ = $265 ? $fl$1 : $266;
  L86: do {
   switch ($t$0|0) {
   case 99:  {
    $381 = $267&255;
    HEAP8[$4>>0] = $381;
    $1183 = $294;$1184 = $267;$a$2 = $4;$fl$6 = $266;$p$5 = 1;$pl$2 = 0;$prefix$2 = 4104;$z$2 = $2;
    break;
   }
   case 109:  {
    $382 = (___errno_location()|0);
    $383 = HEAP32[$382>>2]|0;
    $384 = (_strerror(($383|0))|0);
    $a$1 = $384;
    label = 94;
    break;
   }
   case 115:  {
    $385 = $267;
    $386 = ($267|0)==(0);
    $$21 = $386 ? 4120 : $385;
    $a$1 = $$21;
    label = 94;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 73;
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    HEAP32[tempDoublePtr>>2] = $267;HEAP32[tempDoublePtr+4>>2] = $294;$432 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $433 = ($294|0)<(0);
    if ($433) {
     $434 = -$432;
     $$013$i = $434;$pl$0$i = 1;$prefix$0$i = 4128;
    } else {
     $435 = $fl$1$ & 2048;
     $436 = ($435|0)==(0);
     if ($436) {
      $437 = $fl$1$ & 1;
      $438 = ($437|0)==(0);
      $$$i = $438 ? ((4128 + 1|0)) : ((4128 + 6|0));
      $$013$i = $432;$pl$0$i = $437;$prefix$0$i = $$$i;
     } else {
      $$013$i = $432;$pl$0$i = 1;$prefix$0$i = ((4128 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$013$i;$439 = HEAP32[tempDoublePtr>>2]|0;
    $440 = HEAP32[tempDoublePtr+4>>2]|0;
    $441 = $440 & 2146435072;
    $442 = ($441>>>0)<(2146435072);
    $443 = (0)<(0);
    $444 = ($441|0)==(2146435072);
    $445 = $444 & $443;
    $446 = $442 | $445;
    do {
     if ($446) {
      $472 = (+_frexpl($$013$i,$e2$i));
      $473 = $472 * 2.0;
      $474 = $473 != 0.0;
      if ($474) {
       $475 = HEAP32[$e2$i>>2]|0;
       $476 = (($475) + -1)|0;
       HEAP32[$e2$i>>2] = $476;
      }
      $477 = $t$0 | 32;
      $478 = ($477|0)==(97);
      if ($478) {
       $479 = $t$0 & 32;
       $480 = ($479|0)==(0);
       $481 = (($prefix$0$i) + 9|0);
       $prefix$0$$i = $480 ? $prefix$0$i : $481;
       $482 = $pl$0$i | 2;
       $483 = ($p$0>>>0)>(11);
       do {
        if ($483) {
         $$1$i = $473;
        } else {
         $484 = (12 - ($p$0))|0;
         $re$1187$i = $484;$round$0186$i = 8.0;
         while(1) {
          $485 = (($re$1187$i) + -1)|0;
          $486 = $round$0186$i * 16.0;
          $487 = ($485|0)==(0);
          if ($487) {
           $$lcssa378 = $486;
           break;
          } else {
           $re$1187$i = $485;$round$0186$i = $486;
          }
         }
         $488 = HEAP8[$prefix$0$$i>>0]|0;
         $489 = ($488<<24>>24)==(45);
         if ($489) {
          $490 = -$473;
          $491 = $490 - $$lcssa378;
          $492 = $$lcssa378 + $491;
          $493 = -$492;
          $$1$i = $493;
          break;
         } else {
          $494 = $473 + $$lcssa378;
          $495 = $494 - $$lcssa378;
          $$1$i = $495;
          break;
         }
        }
       } while(0);
       $496 = HEAP32[$e2$i>>2]|0;
       $497 = ($496|0)<(0);
       $498 = (0 - ($496))|0;
       $499 = $497 ? $498 : $496;
       $500 = ($499|0)<(0);
       if ($500) {
        $501 = ($499|0)<(0);
        $502 = $501 << 31 >> 31;
        $$05$i$i = $7;$503 = $499;$504 = $502;
        while(1) {
         $505 = (___uremdi3(($503|0),($504|0),10,0)|0);
         $506 = tempRet0;
         $507 = $505 | 48;
         $508 = $507&255;
         $509 = (($$05$i$i) + -1|0);
         HEAP8[$509>>0] = $508;
         $510 = (___udivdi3(($503|0),($504|0),10,0)|0);
         $511 = tempRet0;
         $512 = ($504>>>0)>(9);
         $513 = ($503>>>0)>(4294967295);
         $514 = ($504|0)==(9);
         $515 = $514 & $513;
         $516 = $512 | $515;
         if ($516) {
          $$05$i$i = $509;$503 = $510;$504 = $511;
         } else {
          $$lcssa379 = $509;$1191 = $510;$1192 = $511;
          break;
         }
        }
        $$0$lcssa$i56$i = $$lcssa379;$$01$lcssa$off0$i$i = $1191;
       } else {
        $$0$lcssa$i56$i = $7;$$01$lcssa$off0$i$i = $499;
       }
       $517 = ($$01$lcssa$off0$i$i|0)==(0);
       if ($517) {
        $$1$lcssa$i$i = $$0$lcssa$i56$i;
       } else {
        $$12$i$i = $$0$lcssa$i56$i;$y$03$i$i = $$01$lcssa$off0$i$i;
        while(1) {
         $518 = (($y$03$i$i>>>0) % 10)&-1;
         $519 = $518 | 48;
         $520 = $519&255;
         $521 = (($$12$i$i) + -1|0);
         HEAP8[$521>>0] = $520;
         $522 = (($y$03$i$i>>>0) / 10)&-1;
         $523 = ($y$03$i$i>>>0)<(10);
         if ($523) {
          $$1$lcssa$i$i = $521;
          break;
         } else {
          $$12$i$i = $521;$y$03$i$i = $522;
         }
        }
       }
       $524 = ($$1$lcssa$i$i|0)==($7|0);
       if ($524) {
        HEAP8[$8>>0] = 48;
        $estr$0$i = $8;
       } else {
        $estr$0$i = $$1$lcssa$i$i;
       }
       $525 = HEAP32[$e2$i>>2]|0;
       $526 = $525 >> 31;
       $527 = $526 & 2;
       $528 = (($527) + 43)|0;
       $529 = $528&255;
       $530 = (($estr$0$i) + -1|0);
       HEAP8[$530>>0] = $529;
       $531 = (($t$0) + 15)|0;
       $532 = $531&255;
       $533 = (($estr$0$i) + -2|0);
       HEAP8[$533>>0] = $532;
       $534 = $fl$1$ & 8;
       $535 = ($534|0)==(0);
       if ($535) {
        $notrhs$i = ($p$0|0)<(1);
        if ($notrhs$i) {
         $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
         while(1) {
          $536 = (~~(($$2$us$us$i)));
          $537 = (4184 + ($536)|0);
          $538 = HEAP8[$537>>0]|0;
          $539 = $538&255;
          $540 = $539 | $479;
          $541 = $540&255;
          $542 = (($s$0$us$us$i) + 1|0);
          HEAP8[$s$0$us$us$i>>0] = $541;
          $543 = (+($536|0));
          $544 = $$2$us$us$i - $543;
          $545 = $544 * 16.0;
          $546 = $542;
          $547 = (($546) - ($0))|0;
          $548 = ($547|0)!=(1);
          $notlhs$us$us$i = $545 == 0.0;
          $or$cond$i80 = $548 | $notlhs$us$us$i;
          if ($or$cond$i80) {
           $s$1$us$us$i = $542;
          } else {
           $549 = (($s$0$us$us$i) + 2|0);
           HEAP8[$542>>0] = 46;
           $s$1$us$us$i = $549;
          }
          $550 = $545 != 0.0;
          if ($550) {
           $$2$us$us$i = $545;$s$0$us$us$i = $s$1$us$us$i;
          } else {
           $s$1$lcssa$i = $s$1$us$us$i;
           break;
          }
         }
        } else {
         $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
         while(1) {
          $551 = (~~(($$2$us$i)));
          $552 = (4184 + ($551)|0);
          $553 = HEAP8[$552>>0]|0;
          $554 = $553&255;
          $555 = $554 | $479;
          $556 = $555&255;
          $557 = (($s$0$us$i) + 1|0);
          HEAP8[$s$0$us$i>>0] = $556;
          $558 = (+($551|0));
          $559 = $$2$us$i - $558;
          $560 = $559 * 16.0;
          $561 = $557;
          $562 = (($561) - ($0))|0;
          $563 = ($562|0)==(1);
          if ($563) {
           $564 = (($s$0$us$i) + 2|0);
           HEAP8[$557>>0] = 46;
           $s$1$us$i = $564;
          } else {
           $s$1$us$i = $557;
          }
          $565 = $560 != 0.0;
          if ($565) {
           $$2$us$i = $560;$s$0$us$i = $s$1$us$i;
          } else {
           $s$1$lcssa$i = $s$1$us$i;
           break;
          }
         }
        }
       } else {
        $$2$i = $$1$i;$s$0$i = $buf$i;
        while(1) {
         $566 = (~~(($$2$i)));
         $567 = (4184 + ($566)|0);
         $568 = HEAP8[$567>>0]|0;
         $569 = $568&255;
         $570 = $569 | $479;
         $571 = $570&255;
         $572 = (($s$0$i) + 1|0);
         HEAP8[$s$0$i>>0] = $571;
         $573 = (+($566|0));
         $574 = $$2$i - $573;
         $575 = $574 * 16.0;
         $576 = $572;
         $577 = (($576) - ($0))|0;
         $578 = ($577|0)==(1);
         if ($578) {
          $579 = (($s$0$i) + 2|0);
          HEAP8[$572>>0] = 46;
          $s$1$i = $579;
         } else {
          $s$1$i = $572;
         }
         $580 = $575 != 0.0;
         if ($580) {
          $$2$i = $575;$s$0$i = $s$1$i;
         } else {
          $s$1$lcssa$i = $s$1$i;
          break;
         }
        }
       }
       $581 = ($p$0|0)!=(0);
       $$pre308$i = $s$1$lcssa$i;
       $582 = (($11) + ($$pre308$i))|0;
       $583 = ($582|0)<($p$0|0);
       $or$cond274 = $581 & $583;
       $584 = $533;
       if ($or$cond274) {
        $585 = (($12) + ($p$0))|0;
        $586 = (($585) - ($584))|0;
        $l$0$i = $586;
       } else {
        $587 = (($10) - ($584))|0;
        $588 = (($587) + ($$pre308$i))|0;
        $l$0$i = $588;
       }
       $589 = (($l$0$i) + ($482))|0;
       $590 = $fl$1$ & 73728;
       $591 = ($590|0)==(0);
       $592 = ($w$1|0)>($589|0);
       $or$cond$i60$i = $591 & $592;
       if ($or$cond$i60$i) {
        $593 = (($w$1) - ($589))|0;
        $594 = ($593>>>0)>(256);
        $595 = $594 ? 256 : $593;
        _memset(($pad$i|0),32,($595|0))|0;
        $596 = ($593>>>0)>(255);
        if ($596) {
         $$01$i62$i = $593;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $597 = (($$01$i62$i) + -256)|0;
          $598 = ($597>>>0)>(255);
          if ($598) {
           $$01$i62$i = $597;
          } else {
           break;
          }
         }
         $599 = $593 & 255;
         $$0$lcssa$i64$i = $599;
        } else {
         $$0$lcssa$i64$i = $593;
        }
        (___fwritex($pad$i,$$0$lcssa$i64$i,$f)|0);
       }
       (___fwritex($prefix$0$$i,$482,$f)|0);
       $600 = ($590|0)==(65536);
       $or$cond$i67$i = $600 & $592;
       if ($or$cond$i67$i) {
        $601 = (($w$1) - ($589))|0;
        $602 = ($601>>>0)>(256);
        $603 = $602 ? 256 : $601;
        _memset(($pad$i|0),48,($603|0))|0;
        $604 = ($601>>>0)>(255);
        if ($604) {
         $$01$i69$i = $601;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $605 = (($$01$i69$i) + -256)|0;
          $606 = ($605>>>0)>(255);
          if ($606) {
           $$01$i69$i = $605;
          } else {
           break;
          }
         }
         $607 = $601 & 255;
         $$0$lcssa$i71$i = $607;
        } else {
         $$0$lcssa$i71$i = $601;
        }
        (___fwritex($pad$i,$$0$lcssa$i71$i,$f)|0);
       }
       $608 = (($$pre308$i) - ($0))|0;
       (___fwritex($buf$i,$608,$f)|0);
       $609 = $533;
       $610 = (($9) - ($609))|0;
       $611 = (($l$0$i) - ($610))|0;
       $612 = (($611) - ($608))|0;
       $613 = ($612|0)>(0);
       if ($613) {
        $614 = ($612>>>0)>(256);
        $615 = $614 ? 256 : $612;
        _memset(($pad$i|0),48,($615|0))|0;
        $616 = ($612>>>0)>(255);
        if ($616) {
         $$01$i75$i = $612;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $617 = (($$01$i75$i) + -256)|0;
          $618 = ($617>>>0)>(255);
          if ($618) {
           $$01$i75$i = $617;
          } else {
           break;
          }
         }
         $619 = $612 & 255;
         $$0$lcssa$i77$i = $619;
        } else {
         $$0$lcssa$i77$i = $612;
        }
        (___fwritex($pad$i,$$0$lcssa$i77$i,$f)|0);
       }
       (___fwritex($533,$610,$f)|0);
       $620 = ($590|0)==(8192);
       $or$cond$i80$i = $620 & $592;
       if ($or$cond$i80$i) {
        $621 = (($w$1) - ($589))|0;
        $622 = ($621>>>0)>(256);
        $623 = $622 ? 256 : $621;
        _memset(($pad$i|0),32,($623|0))|0;
        $624 = ($621>>>0)>(255);
        if ($624) {
         $$01$i82$i = $621;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $625 = (($$01$i82$i) + -256)|0;
          $626 = ($625>>>0)>(255);
          if ($626) {
           $$01$i82$i = $625;
          } else {
           break;
          }
         }
         $627 = $621 & 255;
         $$0$lcssa$i84$i = $627;
        } else {
         $$0$lcssa$i84$i = $621;
        }
        (___fwritex($pad$i,$$0$lcssa$i84$i,$f)|0);
       }
       $w$25$i = $592 ? $w$1 : $589;
       $$0$i = $w$25$i;
       break;
      }
      $628 = ($p$0|0)<(0);
      $$p$i = $628 ? 6 : $p$0;
      if ($474) {
       $629 = $473 * 268435456.0;
       $630 = HEAP32[$e2$i>>2]|0;
       $631 = (($630) + -28)|0;
       HEAP32[$e2$i>>2] = $631;
       $$3$i = $629;$632 = $631;
      } else {
       $$pre$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $473;$632 = $$pre$i;
      }
      $633 = ($632|0)<(0);
      $$39$i = $633 ? $big$i : $13;
      $634 = $$39$i;
      $$4$i = $$3$i;$z$0$i = $$39$i;
      while(1) {
       $635 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $635;
       $636 = (($z$0$i) + 4|0);
       $637 = (+($635>>>0));
       $638 = $$4$i - $637;
       $639 = $638 * 1.0E+9;
       $640 = $639 != 0.0;
       if ($640) {
        $$4$i = $639;$z$0$i = $636;
       } else {
        $$lcssa355 = $636;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $641 = ($$pr$i|0)>(0);
      if ($641) {
       $642 = $$pr$i;$a$1261$i = $$39$i;$z$1260$i = $$lcssa355;
       while(1) {
        $643 = ($642|0)>(29);
        $644 = $643 ? 29 : $642;
        $d$0253$i = (($z$1260$i) + -4|0);
        $645 = ($d$0253$i>>>0)<($a$1261$i>>>0);
        do {
         if ($645) {
          $a$2$ph$i = $a$1261$i;
         } else {
          $655 = $z$1260$i;$carry$0254$i = 0;$d$0255$i = $d$0253$i;
          while(1) {
           $646 = HEAP32[$d$0255$i>>2]|0;
           $647 = (_bitshift64Shl(($646|0),0,($644|0))|0);
           $648 = tempRet0;
           $649 = (_i64Add(($647|0),($648|0),($carry$0254$i|0),0)|0);
           $650 = tempRet0;
           $651 = (___uremdi3(($649|0),($650|0),1000000000,0)|0);
           $652 = tempRet0;
           HEAP32[$d$0255$i>>2] = $651;
           $653 = (___udivdi3(($649|0),($650|0),1000000000,0)|0);
           $654 = tempRet0;
           $d$0$i = (($655) + -8|0);
           $656 = ($d$0$i>>>0)<($a$1261$i>>>0);
           if ($656) {
            $$lcssa356 = $653;
            break;
           } else {
            $655$phi = $d$0255$i;$carry$0254$i = $653;$d$0255$i = $d$0$i;$655 = $655$phi;
           }
          }
          $657 = ($$lcssa356|0)==(0);
          if ($657) {
           $a$2$ph$i = $a$1261$i;
           break;
          }
          $658 = (($a$1261$i) + -4|0);
          HEAP32[$658>>2] = $$lcssa356;
          $a$2$ph$i = $658;
         }
        } while(0);
        $z$2$i = $z$1260$i;
        while(1) {
         $659 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($659)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $660 = (($z$2$i) + -4|0);
         $661 = HEAP32[$660>>2]|0;
         $662 = ($661|0)==(0);
         if ($662) {
          $z$2$i = $660;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $663 = HEAP32[$e2$i>>2]|0;
        $664 = (($663) - ($644))|0;
        HEAP32[$e2$i>>2] = $664;
        $665 = ($664|0)>(0);
        if ($665) {
         $642 = $664;$a$1261$i = $a$2$ph$i;$z$1260$i = $z$2$i$lcssa;
        } else {
         $$pr154$i = $664;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr154$i = $$pr$i;$a$1$lcssa$i = $$39$i;$z$1$lcssa$i = $$lcssa355;
      }
      $666 = ($$pr154$i|0)<(0);
      L203: do {
       if ($666) {
        $667 = (($$p$i) + 25)|0;
        $668 = (($667|0) / 9)&-1;
        $669 = (($668) + 1)|0;
        $670 = ($477|0)==(102);
        if ($670) {
         $671 = (($$39$i) + ($669<<2)|0);
         $672 = $$pr154$i;$a$3248$us$i = $a$1$lcssa$i;$z$3247$us$i = $z$1$lcssa$i;
         while(1) {
          $673 = ($672|0)<(-9);
          $674 = (0 - ($672))|0;
          $$26$us$i = $673 ? 9 : $674;
          $675 = ($a$3248$us$i>>>0)<($z$3247$us$i>>>0);
          do {
           if ($675) {
            $700 = 1 << $$26$us$i;
            $693 = (($700) + -1)|0;
            $697 = 1000000000 >>> $$26$us$i;
            $carry3$0242$us$i = 0;$d$1241$us$i = $a$3248$us$i;
            while(1) {
             $691 = HEAP32[$d$1241$us$i>>2]|0;
             $692 = $691 & $693;
             $694 = $691 >>> $$26$us$i;
             $695 = (($694) + ($carry3$0242$us$i))|0;
             HEAP32[$d$1241$us$i>>2] = $695;
             $696 = Math_imul($692, $697)|0;
             $698 = (($d$1241$us$i) + 4|0);
             $699 = ($698>>>0)<($z$3247$us$i>>>0);
             if ($699) {
              $carry3$0242$us$i = $696;$d$1241$us$i = $698;
             } else {
              $$lcssa359 = $696;
              break;
             }
            }
            $679 = HEAP32[$a$3248$us$i>>2]|0;
            $680 = ($679|0)==(0);
            $681 = (($a$3248$us$i) + 4|0);
            $$a$3$us$i = $680 ? $681 : $a$3248$us$i;
            $682 = ($$lcssa359|0)==(0);
            if ($682) {
             $$a$3$us310$i = $$a$3$us$i;$z$4$us$i = $z$3247$us$i;
             break;
            }
            $683 = (($z$3247$us$i) + 4|0);
            HEAP32[$z$3247$us$i>>2] = $$lcssa359;
            $$a$3$us310$i = $$a$3$us$i;$z$4$us$i = $683;
           } else {
            $676 = HEAP32[$a$3248$us$i>>2]|0;
            $677 = ($676|0)==(0);
            $678 = (($a$3248$us$i) + 4|0);
            $$a$3$us309$i = $677 ? $678 : $a$3248$us$i;
            $$a$3$us310$i = $$a$3$us309$i;$z$4$us$i = $z$3247$us$i;
           }
          } while(0);
          $684 = $z$4$us$i;
          $685 = (($684) - ($634))|0;
          $686 = $685 >> 2;
          $687 = ($686|0)>($669|0);
          $$z$4$us$i = $687 ? $671 : $z$4$us$i;
          $688 = HEAP32[$e2$i>>2]|0;
          $689 = (($688) + ($$26$us$i))|0;
          HEAP32[$e2$i>>2] = $689;
          $690 = ($689|0)<(0);
          if ($690) {
           $672 = $689;$a$3248$us$i = $$a$3$us310$i;$z$3247$us$i = $$z$4$us$i;
          } else {
           $a$3$lcssa$i = $$a$3$us310$i;$z$3$lcssa$i = $$z$4$us$i;
           break L203;
          }
         }
        } else {
         $701 = $$pr154$i;$a$3248$i = $a$1$lcssa$i;$z$3247$i = $z$1$lcssa$i;
        }
        while(1) {
         $702 = ($701|0)<(-9);
         $703 = (0 - ($701))|0;
         $$26$i = $702 ? 9 : $703;
         $704 = ($a$3248$i>>>0)<($z$3247$i>>>0);
         do {
          if ($704) {
           $708 = 1 << $$26$i;
           $709 = (($708) + -1)|0;
           $710 = 1000000000 >>> $$26$i;
           $carry3$0242$i = 0;$d$1241$i = $a$3248$i;
           while(1) {
            $711 = HEAP32[$d$1241$i>>2]|0;
            $712 = $711 & $709;
            $713 = $711 >>> $$26$i;
            $714 = (($713) + ($carry3$0242$i))|0;
            HEAP32[$d$1241$i>>2] = $714;
            $715 = Math_imul($712, $710)|0;
            $716 = (($d$1241$i) + 4|0);
            $717 = ($716>>>0)<($z$3247$i>>>0);
            if ($717) {
             $carry3$0242$i = $715;$d$1241$i = $716;
            } else {
             $$lcssa358 = $715;
             break;
            }
           }
           $718 = HEAP32[$a$3248$i>>2]|0;
           $719 = ($718|0)==(0);
           $720 = (($a$3248$i) + 4|0);
           $$a$3$i = $719 ? $720 : $a$3248$i;
           $721 = ($$lcssa358|0)==(0);
           if ($721) {
            $$a$3312$i = $$a$3$i;$z$4$i = $z$3247$i;
            break;
           }
           $722 = (($z$3247$i) + 4|0);
           HEAP32[$z$3247$i>>2] = $$lcssa358;
           $$a$3312$i = $$a$3$i;$z$4$i = $722;
          } else {
           $705 = HEAP32[$a$3248$i>>2]|0;
           $706 = ($705|0)==(0);
           $707 = (($a$3248$i) + 4|0);
           $$a$3311$i = $706 ? $707 : $a$3248$i;
           $$a$3312$i = $$a$3311$i;$z$4$i = $z$3247$i;
          }
         } while(0);
         $723 = $z$4$i;
         $724 = $$a$3312$i;
         $725 = (($723) - ($724))|0;
         $726 = $725 >> 2;
         $727 = ($726|0)>($669|0);
         if ($727) {
          $728 = (($$a$3312$i) + ($669<<2)|0);
          $z$5$i = $728;
         } else {
          $z$5$i = $z$4$i;
         }
         $729 = HEAP32[$e2$i>>2]|0;
         $730 = (($729) + ($$26$i))|0;
         HEAP32[$e2$i>>2] = $730;
         $731 = ($730|0)<(0);
         if ($731) {
          $701 = $730;$a$3248$i = $$a$3312$i;$z$3247$i = $z$5$i;
         } else {
          $a$3$lcssa$i = $$a$3312$i;$z$3$lcssa$i = $z$5$i;
          break;
         }
        }
       } else {
        $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
       }
      } while(0);
      $732 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($732) {
        $733 = $a$3$lcssa$i;
        $734 = (($634) - ($733))|0;
        $735 = $734 >> 2;
        $736 = ($735*9)|0;
        $737 = HEAP32[$a$3$lcssa$i>>2]|0;
        $738 = ($737>>>0)<(10);
        if ($738) {
         $e$1$i = $736;
         break;
        } else {
         $e$0237$i = $736;$i$0236$i = 10;
        }
        while(1) {
         $739 = ($i$0236$i*10)|0;
         $740 = (($e$0237$i) + 1)|0;
         $741 = ($737>>>0)<($739>>>0);
         if ($741) {
          $e$1$i = $740;
          break;
         } else {
          $e$0237$i = $740;$i$0236$i = $739;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $742 = ($477|0)!=(102);
      $743 = $742 ? $e$1$i : 0;
      $744 = (($$p$i) - ($743))|0;
      $745 = ($477|0)==(103);
      $746 = ($$p$i|0)!=(0);
      $$27$i = $746 & $745;
      $$neg159$i = $$27$i << 31 >> 31;
      $747 = (($744) + ($$neg159$i))|0;
      $748 = $z$3$lcssa$i;
      $749 = (($748) - ($634))|0;
      $750 = $749 >> 2;
      $751 = ($750*9)|0;
      $752 = (($751) + -9)|0;
      $753 = ($747|0)<($752|0);
      if ($753) {
       $754 = (($747) + 9216)|0;
       $755 = (($754|0) / 9)&-1;
       $$sum$i = (($755) + -1023)|0;
       $756 = (($$39$i) + ($$sum$i<<2)|0);
       $757 = (($754|0) % 9)&-1;
       $j$0229$i = (($757) + 1)|0;
       $758 = ($j$0229$i|0)<(9);
       if ($758) {
        $i$1230$i = 10;$j$0231$i = $j$0229$i;
        while(1) {
         $759 = ($i$1230$i*10)|0;
         $j$0$i = (($j$0231$i) + 1)|0;
         $exitcond$i = ($j$0231$i|0)==(8);
         if ($exitcond$i) {
          $i$1$lcssa$i = $759;
          break;
         } else {
          $i$1230$i = $759;$j$0231$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $760 = HEAP32[$756>>2]|0;
       $761 = (($760>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $762 = ($761|0)==(0);
       if ($762) {
        $$sum21$i = (($755) + -1022)|0;
        $763 = (($$39$i) + ($$sum21$i<<2)|0);
        $764 = ($763|0)==($z$3$lcssa$i|0);
        if ($764) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $756;$e$3$i = $e$1$i;
        } else {
         label = 231;
        }
       } else {
        label = 231;
       }
       do {
        if ((label|0) == 231) {
         label = 0;
         $765 = (($760>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $766 = $765 & 1;
         $767 = ($766|0)==(0);
         $$28$i = $767 ? 9007199254740992.0 : 9007199254740994.0;
         $768 = (($i$1$lcssa$i|0) / 2)&-1;
         $769 = ($761>>>0)<($768>>>0);
         do {
          if ($769) {
           $small$0$i = 0.5;
          } else {
           $770 = ($761|0)==($768|0);
           if ($770) {
            $$sum22$i = (($755) + -1022)|0;
            $771 = (($$39$i) + ($$sum22$i<<2)|0);
            $772 = ($771|0)==($z$3$lcssa$i|0);
            if ($772) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $773 = ($pl$0$i|0)==(0);
         do {
          if ($773) {
           $round6$1$i = $$28$i;$small$1$i = $small$0$i;
          } else {
           $774 = HEAP8[$prefix$0$i>>0]|0;
           $775 = ($774<<24>>24)==(45);
           if (!($775)) {
            $round6$1$i = $$28$i;$small$1$i = $small$0$i;
            break;
           }
           $776 = -$$28$i;
           $777 = -$small$0$i;
           $round6$1$i = $776;$small$1$i = $777;
          }
         } while(0);
         $778 = (($760) - ($761))|0;
         HEAP32[$756>>2] = $778;
         $779 = $round6$1$i + $small$1$i;
         $780 = $779 != $round6$1$i;
         if (!($780)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $756;$e$3$i = $e$1$i;
          break;
         }
         $781 = (($778) + ($i$1$lcssa$i))|0;
         HEAP32[$756>>2] = $781;
         $782 = ($781>>>0)>(999999999);
         if ($782) {
          $a$5223$i = $a$3$lcssa$i;$d$2222$i = $756;
          while(1) {
           $783 = (($d$2222$i) + -4|0);
           HEAP32[$d$2222$i>>2] = 0;
           $784 = ($783>>>0)<($a$5223$i>>>0);
           if ($784) {
            $785 = (($a$5223$i) + -4|0);
            HEAP32[$785>>2] = 0;
            $a$6$i = $785;
           } else {
            $a$6$i = $a$5223$i;
           }
           $786 = HEAP32[$783>>2]|0;
           $787 = (($786) + 1)|0;
           HEAP32[$783>>2] = $787;
           $788 = ($787>>>0)>(999999999);
           if ($788) {
            $a$5223$i = $a$6$i;$d$2222$i = $783;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $783;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $756;
         }
         $789 = $a$5$lcssa$i;
         $790 = (($634) - ($789))|0;
         $791 = $790 >> 2;
         $792 = ($791*9)|0;
         $793 = HEAP32[$a$5$lcssa$i>>2]|0;
         $794 = ($793>>>0)<(10);
         if ($794) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $792;
          break;
         } else {
          $e$2218$i = $792;$i$2217$i = 10;
         }
         while(1) {
          $795 = ($i$2217$i*10)|0;
          $796 = (($e$2218$i) + 1)|0;
          $797 = ($793>>>0)<($795>>>0);
          if ($797) {
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $796;
           break;
          } else {
           $e$2218$i = $796;$i$2217$i = $795;
          }
         }
        }
       } while(0);
       $798 = (($d$3$i) + 4|0);
       $799 = ($z$3$lcssa$i>>>0)>($798>>>0);
       $$z$3$i = $799 ? $798 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $a$8$ph294$i = $a$8$ph$i;
      $800 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $801 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($801)) {
        $$lcssa283$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $802 = (($z$6$i) + -4|0);
       $803 = HEAP32[$802>>2]|0;
       $804 = ($803|0)==(0);
       if ($804) {
        $z$6$i = $802;
       } else {
        $$lcssa283$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($745) {
        $805 = ($$p$i|0)==(0);
        $806 = $805&1;
        $$$p$i = (($806) + ($$p$i))|0;
        $807 = ($$$p$i|0)>($e$4$ph$i|0);
        $808 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $807 & $808;
        if ($or$cond6$i) {
         $809 = (($t$0) + -1)|0;
         $$neg160$i = (($$$p$i) + -1)|0;
         $810 = (($$neg160$i) - ($e$4$ph$i))|0;
         $$019$i = $809;$$216$i = $810;
        } else {
         $811 = (($t$0) + -2)|0;
         $812 = (($$$p$i) + -1)|0;
         $$019$i = $811;$$216$i = $812;
        }
        $813 = $fl$1$ & 8;
        $814 = ($813|0)==(0);
        if (!($814)) {
         $$120$i = $$019$i;$$317$i = $$216$i;
         break;
        }
        do {
         if ($$lcssa283$i) {
          $815 = (($z$6$i$lcssa) + -4|0);
          $816 = HEAP32[$815>>2]|0;
          $817 = ($816|0)==(0);
          if ($817) {
           $j$2$i = 9;
           break;
          }
          $818 = (($816>>>0) % 10)&-1;
          $819 = ($818|0)==(0);
          if ($819) {
           $i$3213$i = 10;$j$1214$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $820 = ($i$3213$i*10)|0;
           $821 = (($j$1214$i) + 1)|0;
           $822 = (($816>>>0) % ($820>>>0))&-1;
           $823 = ($822|0)==(0);
           if ($823) {
            $i$3213$i = $820;$j$1214$i = $821;
           } else {
            $j$2$i = $821;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $824 = $$019$i | 32;
        $825 = ($824|0)==(102);
        $826 = $z$6$i$lcssa;
        $827 = (($826) - ($634))|0;
        $828 = $827 >> 2;
        $829 = ($828*9)|0;
        $830 = (($829) + -9)|0;
        if ($825) {
         $831 = (($830) - ($j$2$i))|0;
         $832 = ($831|0)<(0);
         $$29$i = $832 ? 0 : $831;
         $833 = ($$216$i|0)<($$29$i|0);
         $$216$$29$i = $833 ? $$216$i : $$29$i;
         $$120$i = $$019$i;$$317$i = $$216$$29$i;
         break;
        } else {
         $834 = (($830) + ($e$4$ph$i))|0;
         $835 = (($834) - ($j$2$i))|0;
         $836 = ($835|0)<(0);
         $$31$i = $836 ? 0 : $835;
         $837 = ($$216$i|0)<($$31$i|0);
         $$216$$31$i = $837 ? $$216$i : $$31$i;
         $$120$i = $$019$i;$$317$i = $$216$$31$i;
         break;
        }
       } else {
        $$120$i = $t$0;$$317$i = $$p$i;
       }
      } while(0);
      $838 = ($$317$i|0)!=(0);
      if ($838) {
       $842 = 1;
      } else {
       $839 = $fl$1$ & 8;
       $840 = ($839|0)!=(0);
       $842 = $840;
      }
      $841 = $842&1;
      $843 = $$120$i | 32;
      $844 = ($843|0)==(102);
      if ($844) {
       $845 = ($e$4$ph$i|0)>(0);
       $846 = $845 ? $e$4$ph$i : 0;
       $$pn$i = $846;$estr$2$i = 0;
      } else {
       $847 = ($e$4$ph$i|0)<(0);
       $848 = $847 ? $800 : $e$4$ph$i;
       $849 = ($848|0)<(0);
       if ($849) {
        $850 = ($848|0)<(0);
        $851 = $850 << 31 >> 31;
        $$05$i87$i = $7;$852 = $848;$853 = $851;
        while(1) {
         $854 = (___uremdi3(($852|0),($853|0),10,0)|0);
         $855 = tempRet0;
         $856 = $854 | 48;
         $857 = $856&255;
         $858 = (($$05$i87$i) + -1|0);
         HEAP8[$858>>0] = $857;
         $859 = (___udivdi3(($852|0),($853|0),10,0)|0);
         $860 = tempRet0;
         $861 = ($853>>>0)>(9);
         $862 = ($852>>>0)>(4294967295);
         $863 = ($853|0)==(9);
         $864 = $863 & $862;
         $865 = $861 | $864;
         if ($865) {
          $$05$i87$i = $858;$852 = $859;$853 = $860;
         } else {
          $$lcssa365 = $858;$1193 = $859;$1194 = $860;
          break;
         }
        }
        $$0$lcssa$i92$i = $$lcssa365;$$01$lcssa$off0$i93$i = $1193;
       } else {
        $$0$lcssa$i92$i = $7;$$01$lcssa$off0$i93$i = $848;
       }
       $866 = ($$01$lcssa$off0$i93$i|0)==(0);
       if ($866) {
        $estr$1$ph$i = $$0$lcssa$i92$i;
       } else {
        $$12$i95$i = $$0$lcssa$i92$i;$y$03$i94$i = $$01$lcssa$off0$i93$i;
        while(1) {
         $867 = (($y$03$i94$i>>>0) % 10)&-1;
         $868 = $867 | 48;
         $869 = $868&255;
         $870 = (($$12$i95$i) + -1|0);
         HEAP8[$870>>0] = $869;
         $871 = (($y$03$i94$i>>>0) / 10)&-1;
         $872 = ($y$03$i94$i>>>0)<(10);
         if ($872) {
          $estr$1$ph$i = $870;
          break;
         } else {
          $$12$i95$i = $870;$y$03$i94$i = $871;
         }
        }
       }
       $873 = $estr$1$ph$i;
       $874 = (($9) - ($873))|0;
       $875 = ($874|0)<(2);
       if ($875) {
        $estr$1209$i = $estr$1$ph$i;
        while(1) {
         $876 = (($estr$1209$i) + -1|0);
         HEAP8[$876>>0] = 48;
         $877 = $876;
         $878 = (($9) - ($877))|0;
         $879 = ($878|0)<(2);
         if ($879) {
          $estr$1209$i = $876;
         } else {
          $estr$1$lcssa$i = $876;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $estr$1$ph$i;
       }
       $880 = $e$4$ph$i >> 31;
       $881 = $880 & 2;
       $882 = (($881) + 43)|0;
       $883 = $882&255;
       $884 = (($estr$1$lcssa$i) + -1|0);
       HEAP8[$884>>0] = $883;
       $885 = $$120$i&255;
       $886 = (($estr$1$lcssa$i) + -2|0);
       HEAP8[$886>>0] = $885;
       $887 = $886;
       $888 = (($9) - ($887))|0;
       $$pn$i = $888;$estr$2$i = $886;
      }
      $889 = (($pl$0$i) + 1)|0;
      $890 = (($889) + ($$317$i))|0;
      $l$1$i = (($890) + ($841))|0;
      $891 = (($l$1$i) + ($$pn$i))|0;
      $892 = $fl$1$ & 73728;
      $893 = ($892|0)==(0);
      $894 = ($w$1|0)>($891|0);
      $or$cond$i101$i = $893 & $894;
      if ($or$cond$i101$i) {
       $895 = (($w$1) - ($891))|0;
       $896 = ($895>>>0)>(256);
       $897 = $896 ? 256 : $895;
       _memset(($pad$i|0),32,($897|0))|0;
       $898 = ($895>>>0)>(255);
       if ($898) {
        $$01$i103$i = $895;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $899 = (($$01$i103$i) + -256)|0;
         $900 = ($899>>>0)>(255);
         if ($900) {
          $$01$i103$i = $899;
         } else {
          break;
         }
        }
        $901 = $895 & 255;
        $$0$lcssa$i105$i = $901;
       } else {
        $$0$lcssa$i105$i = $895;
       }
       (___fwritex($pad$i,$$0$lcssa$i105$i,$f)|0);
      }
      (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      $902 = ($892|0)==(65536);
      $or$cond$i108$i = $902 & $894;
      if ($or$cond$i108$i) {
       $903 = (($w$1) - ($891))|0;
       $904 = ($903>>>0)>(256);
       $905 = $904 ? 256 : $903;
       _memset(($pad$i|0),48,($905|0))|0;
       $906 = ($903>>>0)>(255);
       if ($906) {
        $$01$i110$i = $903;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $907 = (($$01$i110$i) + -256)|0;
         $908 = ($907>>>0)>(255);
         if ($908) {
          $$01$i110$i = $907;
         } else {
          break;
         }
        }
        $909 = $903 & 255;
        $$0$lcssa$i112$i = $909;
       } else {
        $$0$lcssa$i112$i = $903;
       }
       (___fwritex($pad$i,$$0$lcssa$i112$i,$f)|0);
      }
      if ($844) {
       $910 = ($a$8$ph$i>>>0)>($$39$i>>>0);
       $r$0$a$8$i = $910 ? $$39$i : $a$8$ph$i;
       $911 = $634 ^ -1;
       $912 = $a$8$ph294$i ^ -1;
       $913 = ($911>>>0)>($912>>>0);
       $umax$i = $913 ? $911 : $912;
       $914 = (3 - ($umax$i))|0;
       $uglygep$i = (($$39$i) + 1|0);
       $uglygep296$i = $uglygep$i;
       $915 = ($914>>>0)>($uglygep296$i>>>0);
       $umax297$i = $915 ? $914 : $uglygep296$i;
       $umax297298299$i = $umax297$i;
       $uglygep300$i = (($umax297298299$i) + ($umax$i)|0);
       $uglygep300301$i = $uglygep300$i;
       $916 = $umax$i ^ -1;
       $d$4199$i = $r$0$a$8$i;
       while(1) {
        $917 = HEAP32[$d$4199$i>>2]|0;
        $918 = ($917|0)==(0);
        if ($918) {
         $$1$lcssa$i120$i = $14;
        } else {
         $$12$i118$i = $14;$y$03$i117$i = $917;
         while(1) {
          $919 = (($y$03$i117$i>>>0) % 10)&-1;
          $920 = $919 | 48;
          $921 = $920&255;
          $922 = (($$12$i118$i) + -1|0);
          HEAP8[$922>>0] = $921;
          $923 = (($y$03$i117$i>>>0) / 10)&-1;
          $924 = ($y$03$i117$i>>>0)<(10);
          if ($924) {
           $$1$lcssa$i120$i = $922;
           break;
          } else {
           $$12$i118$i = $922;$y$03$i117$i = $923;
          }
         }
        }
        $925 = ($d$4199$i|0)==($r$0$a$8$i|0);
        do {
         if ($925) {
          $929 = ($$1$lcssa$i120$i|0)==($14|0);
          if (!($929)) {
           $s7$1$i = $$1$lcssa$i120$i;
           break;
          }
          HEAP8[$16>>0] = 48;
          $s7$1$i = $16;
         } else {
          $926 = ($$1$lcssa$i120$i>>>0)>($buf$i>>>0);
          if ($926) {
           $s7$0196$i = $$1$lcssa$i120$i;
          } else {
           $s7$1$i = $$1$lcssa$i120$i;
           break;
          }
          while(1) {
           $927 = (($s7$0196$i) + -1|0);
           HEAP8[$927>>0] = 48;
           $928 = ($927>>>0)>($buf$i>>>0);
           if ($928) {
            $s7$0196$i = $927;
           } else {
            $s7$1$i = $927;
            break;
           }
          }
         }
        } while(0);
        $930 = $s7$1$i;
        $931 = (($15) - ($930))|0;
        (___fwritex($s7$1$i,$931,$f)|0);
        $932 = (($d$4199$i) + 4|0);
        $933 = ($932>>>0)>($$39$i>>>0);
        if ($933) {
         $$lcssa374 = $932;
         break;
        } else {
         $d$4199$i = $932;
        }
       }
       $934 = $uglygep300301$i & -4;
       $935 = (($934) + ($916))|0;
       $936 = $935;
       $$not$i = $838 ^ 1;
       $937 = $fl$1$ & 8;
       $938 = ($937|0)==(0);
       $or$cond35$i = $938 & $$not$i;
       if (!($or$cond35$i)) {
        (___fwritex(4200,1,$f)|0);
       }
       $939 = ($$lcssa374>>>0)<($z$6$i$lcssa>>>0);
       $940 = ($$317$i|0)>(0);
       $or$cond10191$i = $940 & $939;
       if ($or$cond10191$i) {
        $$418193$i = $$317$i;$955 = $936;$d$5192$i = $$lcssa374;
        while(1) {
         $941 = HEAP32[$d$5192$i>>2]|0;
         $942 = ($941|0)==(0);
         if ($942) {
          $s8$0188$i = $14;
          label = 300;
         } else {
          $$12$i127$i = $14;$y$03$i126$i = $941;
          while(1) {
           $943 = (($y$03$i126$i>>>0) % 10)&-1;
           $944 = $943 | 48;
           $945 = $944&255;
           $946 = (($$12$i127$i) + -1|0);
           HEAP8[$946>>0] = $945;
           $947 = (($y$03$i126$i>>>0) / 10)&-1;
           $948 = ($y$03$i126$i>>>0)<(10);
           if ($948) {
            $$lcssa375 = $946;
            break;
           } else {
            $$12$i127$i = $946;$y$03$i126$i = $947;
           }
          }
          $949 = ($$lcssa375>>>0)>($buf$i>>>0);
          if ($949) {
           $s8$0188$i = $$lcssa375;
           label = 300;
          } else {
           $s8$0$lcssa$i = $$lcssa375;
          }
         }
         if ((label|0) == 300) {
          while(1) {
           label = 0;
           $950 = (($s8$0188$i) + -1|0);
           HEAP8[$950>>0] = 48;
           $951 = ($950>>>0)>($buf$i>>>0);
           if ($951) {
            $s8$0188$i = $950;
            label = 300;
           } else {
            $s8$0$lcssa$i = $950;
            break;
           }
          }
         }
         $952 = ($$418193$i|0)>(9);
         $953 = $952 ? 9 : $$418193$i;
         (___fwritex($s8$0$lcssa$i,$953,$f)|0);
         $954 = (($955) + 8|0);
         $956 = (($$418193$i) + -9)|0;
         $957 = ($954>>>0)<($z$6$i$lcssa>>>0);
         $or$cond10$i = $952 & $957;
         if ($or$cond10$i) {
          $955$phi = $d$5192$i;$$418193$i = $956;$d$5192$i = $954;$955 = $955$phi;
         } else {
          $$418$lcssa$i = $956;
          break;
         }
        }
       } else {
        $$418$lcssa$i = $$317$i;
       }
       $958 = ($$418$lcssa$i|0)>(0);
       if ($958) {
        $959 = ($$418$lcssa$i>>>0)>(256);
        $960 = $959 ? 256 : $$418$lcssa$i;
        _memset(($pad$i|0),48,($960|0))|0;
        $961 = ($$418$lcssa$i>>>0)>(255);
        if ($961) {
         $$01$i134$i = $$418$lcssa$i;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $962 = (($$01$i134$i) + -256)|0;
          $963 = ($962>>>0)>(255);
          if ($963) {
           $$01$i134$i = $962;
          } else {
           break;
          }
         }
         $964 = $$418$lcssa$i & 255;
         $$0$lcssa$i136$i = $964;
        } else {
         $$0$lcssa$i136$i = $$418$lcssa$i;
        }
        (___fwritex($pad$i,$$0$lcssa$i136$i,$f)|0);
       }
      } else {
       $965 = (($a$8$ph$i) + 4|0);
       $z$6$$i = $$lcssa283$i ? $z$6$i$lcssa : $965;
       $966 = ($$317$i|0)>(-1);
       do {
        if ($966) {
         $967 = $fl$1$ & 8;
         $968 = ($967|0)==(0);
         $$5205$i = $$317$i;$d$6204$i = $a$8$ph$i;
         while(1) {
          $969 = HEAP32[$d$6204$i>>2]|0;
          $970 = ($969|0)==(0);
          if ($970) {
           label = 314;
          } else {
           $$12$i142$i = $14;$y$03$i141$i = $969;
           while(1) {
            $971 = (($y$03$i141$i>>>0) % 10)&-1;
            $972 = $971 | 48;
            $973 = $972&255;
            $974 = (($$12$i142$i) + -1|0);
            HEAP8[$974>>0] = $973;
            $975 = (($y$03$i141$i>>>0) / 10)&-1;
            $976 = ($y$03$i141$i>>>0)<(10);
            if ($976) {
             $$12$i142$i$lcssa = $$12$i142$i;$$lcssa369 = $974;
             break;
            } else {
             $$12$i142$i = $974;$y$03$i141$i = $975;
            }
           }
           $977 = ($$lcssa369|0)==($14|0);
           if ($977) {
            label = 314;
           } else {
            $1195 = $$12$i142$i$lcssa;$s9$0$i = $$lcssa369;
           }
          }
          if ((label|0) == 314) {
           label = 0;
           HEAP8[$16>>0] = 48;
           $1195 = $14;$s9$0$i = $16;
          }
          $978 = ($d$6204$i|0)==($a$8$ph$i|0);
          do {
           if ($978) {
            (___fwritex($s9$0$i,1,$f)|0);
            $982 = ($$5205$i|0)<(1);
            $or$cond37$i = $968 & $982;
            if ($or$cond37$i) {
             $s9$2$i = $1195;
             break;
            }
            (___fwritex(4200,1,$f)|0);
            $s9$2$i = $1195;
           } else {
            $979 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($979) {
             $s9$1200$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $980 = (($s9$1200$i) + -1|0);
             HEAP8[$980>>0] = 48;
             $981 = ($980>>>0)>($buf$i>>>0);
             if ($981) {
              $s9$1200$i = $980;
             } else {
              $s9$2$i = $980;
              break;
             }
            }
           }
          } while(0);
          $983 = $s9$2$i;
          $984 = (($15) - ($983))|0;
          $985 = ($$5205$i|0)>($984|0);
          $$$5$i = $985 ? $984 : $$5205$i;
          (___fwritex($s9$2$i,$$$5$i,$f)|0);
          $986 = (($$5205$i) - ($984))|0;
          $987 = (($d$6204$i) + 4|0);
          $988 = ($987>>>0)<($z$6$$i>>>0);
          $989 = ($986|0)>(-1);
          $or$cond12$i = $988 & $989;
          if ($or$cond12$i) {
           $$5205$i = $986;$d$6204$i = $987;
          } else {
           $$lcssa371 = $986;
           break;
          }
         }
         $990 = ($$lcssa371|0)>(0);
         if (!($990)) {
          break;
         }
         $991 = ($$lcssa371>>>0)>(256);
         $992 = $991 ? 256 : $$lcssa371;
         _memset(($pad$i|0),48,($992|0))|0;
         $993 = ($$lcssa371>>>0)>(255);
         if ($993) {
          $$01$i149$i = $$lcssa371;
          while(1) {
           (___fwritex($pad$i,256,$f)|0);
           $994 = (($$01$i149$i) + -256)|0;
           $995 = ($994>>>0)>(255);
           if ($995) {
            $$01$i149$i = $994;
           } else {
            break;
           }
          }
          $996 = $$lcssa371 & 255;
          $$0$lcssa$i151$i = $996;
         } else {
          $$0$lcssa$i151$i = $$lcssa371;
         }
         (___fwritex($pad$i,$$0$lcssa$i151$i,$f)|0);
        } else {
        }
       } while(0);
       $997 = $estr$2$i;
       $998 = (($9) - ($997))|0;
       (___fwritex($estr$2$i,$998,$f)|0);
      }
      $999 = ($892|0)==(8192);
      $or$cond$i$i = $999 & $894;
      if ($or$cond$i$i) {
       $1000 = (($w$1) - ($891))|0;
       $1001 = ($1000>>>0)>(256);
       $1002 = $1001 ? 256 : $1000;
       _memset(($pad$i|0),32,($1002|0))|0;
       $1003 = ($1000>>>0)>(255);
       if ($1003) {
        $$01$i$i = $1000;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $1004 = (($$01$i$i) + -256)|0;
         $1005 = ($1004>>>0)>(255);
         if ($1005) {
          $$01$i$i = $1004;
         } else {
          break;
         }
        }
        $1006 = $1000 & 255;
        $$0$lcssa$i$i = $1006;
       } else {
        $$0$lcssa$i$i = $1000;
       }
       (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
      }
      $w$38$i = $894 ? $w$1 : $891;
      $$0$i = $w$38$i;
     } else {
      $447 = $t$0 & 32;
      $448 = ($447|0)!=(0);
      $449 = $448 ? 4152 : 4160;
      $450 = ($$013$i != $$013$i) | (0.0 != 0.0);
      if ($450) {
       $451 = $448 ? 4168 : 4176;
       $pl$1$i = 0;$s1$0$i = $451;
      } else {
       $pl$1$i = $pl$0$i;$s1$0$i = $449;
      }
      $452 = (($pl$1$i) + 3)|0;
      $453 = $fl$1$ & 8192;
      $454 = ($453|0)==(0);
      $455 = ($w$1|0)>($452|0);
      $or$cond$i43$i = $454 & $455;
      if ($or$cond$i43$i) {
       $456 = (($w$1) - ($452))|0;
       $457 = ($456>>>0)>(256);
       $458 = $457 ? 256 : $456;
       _memset(($pad$i|0),32,($458|0))|0;
       $459 = ($456>>>0)>(255);
       if ($459) {
        $$01$i45$i = $456;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $460 = (($$01$i45$i) + -256)|0;
         $461 = ($460>>>0)>(255);
         if ($461) {
          $$01$i45$i = $460;
         } else {
          break;
         }
        }
        $462 = $456 & 255;
        $$0$lcssa$i47$i = $462;
       } else {
        $$0$lcssa$i47$i = $456;
       }
       (___fwritex($pad$i,$$0$lcssa$i47$i,$f)|0);
      }
      (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
      (___fwritex($s1$0$i,3,$f)|0);
      $463 = $fl$1$ & 73728;
      $464 = ($463|0)==(8192);
      $or$cond$i50$i = $464 & $455;
      if ($or$cond$i50$i) {
       $465 = (($w$1) - ($452))|0;
       $466 = ($465>>>0)>(256);
       $467 = $466 ? 256 : $465;
       _memset(($pad$i|0),32,($467|0))|0;
       $468 = ($465>>>0)>(255);
       if ($468) {
        $$01$i52$i = $465;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $469 = (($$01$i52$i) + -256)|0;
         $470 = ($469>>>0)>(255);
         if ($470) {
          $$01$i52$i = $469;
         } else {
          break;
         }
        }
        $471 = $465 & 255;
        $$0$lcssa$i54$i = $471;
       } else {
        $$0$lcssa$i54$i = $465;
       }
       (___fwritex($pad$i,$$0$lcssa$i54$i,$f)|0);
      }
      $w$$i = $455 ? $w$1 : $452;
      $$0$i = $w$$i;
     }
    } while(0);
    $1175 = $294;$1176 = $267;$23 = $1182;$cnt$0 = $cnt$1;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 112:  {
    $289 = ($p$0>>>0)>(8);
    $290 = $289 ? $p$0 : 8;
    $291 = $fl$1$ | 8;
    $fl$3 = $291;$p$1 = $290;$t$1 = 120;
    label = 73;
    break;
   }
   case 67:  {
    HEAP32[$wc>>2] = $267;
    HEAP32[$5>>2] = 0;
    $1187 = $wc;$1188 = $6;$p$4271 = -1;
    label = 99;
    break;
   }
   case 83:  {
    $393 = $267;
    $394 = ($p$0|0)==(0);
    if ($394) {
     $1189 = $267;$1190 = $393;$i$0$lcssa272 = 0;
     label = 104;
    } else {
     $1187 = $393;$1188 = $267;$p$4271 = $p$0;
     label = 99;
    }
    break;
   }
   case 111:  {
    $315 = ($267|0)==(0);
    $316 = ($294|0)==(0);
    $317 = $315 & $316;
    if ($317) {
     $$0$lcssa$i52 = $2;
    } else {
     $$03$i49 = $2;$319 = $267;$323 = $294;
     while(1) {
      $318 = $319 & 7;
      $320 = $318 | 48;
      $321 = $320&255;
      $322 = (($$03$i49) + -1|0);
      HEAP8[$322>>0] = $321;
      $324 = (_bitshift64Lshr(($319|0),($323|0),3)|0);
      $325 = tempRet0;
      $326 = ($324|0)==(0);
      $327 = ($325|0)==(0);
      $328 = $326 & $327;
      if ($328) {
       $$0$lcssa$i52 = $322;
       break;
      } else {
       $$03$i49 = $322;$319 = $324;$323 = $325;
      }
     }
    }
    $329 = $fl$1$ & 8;
    $330 = ($329|0)==(0);
    $or$cond19 = $330 | $317;
    $$25 = $or$cond19 ? 4104 : ((4104 + 5|0));
    $331 = $or$cond19&1;
    $$26 = $331 ^ 1;
    $369 = $267;$371 = $294;$a$0 = $$0$lcssa$i52;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$26;$prefix$1 = $$25;
    label = 89;
    break;
   }
   case 110:  {
    switch ($st$0$lcssa351|0) {
    case 0:  {
     $268 = $267;
     HEAP32[$268>>2] = $cnt$1;
     $1175 = $294;$1176 = $267;$23 = $1182;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $269 = $267;
     HEAP32[$269>>2] = $cnt$1;
     $1175 = $294;$1176 = $267;$23 = $1182;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $270 = ($cnt$1|0)<(0);
     $271 = $270 << 31 >> 31;
     $272 = $267;
     $273 = $272;
     $274 = $273;
     HEAP32[$274>>2] = $cnt$1;
     $275 = (($273) + 4)|0;
     $276 = $275;
     HEAP32[$276>>2] = $271;
     $1175 = $294;$1176 = $267;$23 = $1182;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $277 = $cnt$1&65535;
     $278 = $267;
     HEAP16[$278>>1] = $277;
     $1175 = $294;$1176 = $267;$23 = $1182;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $279 = $cnt$1&255;
     $280 = $267;
     HEAP8[$280>>0] = $279;
     $1175 = $294;$1176 = $267;$23 = $1182;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $281 = $267;
     HEAP32[$281>>2] = $cnt$1;
     $1175 = $294;$1176 = $267;$23 = $1182;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $282 = ($cnt$1|0)<(0);
     $283 = $282 << 31 >> 31;
     $284 = $267;
     $285 = $284;
     $286 = $285;
     HEAP32[$286>>2] = $cnt$1;
     $287 = (($285) + 4)|0;
     $288 = $287;
     HEAP32[$288>>2] = $283;
     $1175 = $294;$1176 = $267;$23 = $1182;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1175 = $294;$1176 = $267;$23 = $1182;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 105: case 100:  {
    $332 = ($294|0)<(0);
    if ($332) {
     $333 = (_i64Subtract(0,0,($267|0),($294|0))|0);
     $334 = tempRet0;
     $339 = $334;$341 = $333;$pl$0 = 1;$prefix$0 = 4104;
     label = 84;
     break L86;
    }
    $335 = $fl$1$ & 2048;
    $336 = ($335|0)==(0);
    if ($336) {
     $337 = $fl$1$ & 1;
     $338 = ($337|0)==(0);
     $$ = $338 ? 4104 : ((4104 + 2|0));
     $339 = $294;$341 = $267;$pl$0 = $337;$prefix$0 = $$;
     label = 84;
    } else {
     $339 = $294;$341 = $267;$pl$0 = 1;$prefix$0 = ((4104 + 1|0));
     label = 84;
    }
    break;
   }
   case 117:  {
    $339 = $294;$341 = $267;$pl$0 = 0;$prefix$0 = 4104;
    label = 84;
    break;
   }
   default: {
    $1183 = $294;$1184 = $267;$a$2 = $23;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 4104;$z$2 = $2;
   }
   }
  } while(0);
  do {
   if ((label|0) == 73) {
    label = 0;
    $292 = $t$1 & 32;
    $293 = ($267|0)==(0);
    $295 = ($294|0)==(0);
    $296 = $293 & $295;
    if ($296) {
     $369 = $267;$371 = $294;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 4104;
     label = 89;
    } else {
     $$012$i = $2;$298 = $267;$305 = $294;
     while(1) {
      $297 = $298 & 15;
      $299 = (4184 + ($297)|0);
      $300 = HEAP8[$299>>0]|0;
      $301 = $300&255;
      $302 = $301 | $292;
      $303 = $302&255;
      $304 = (($$012$i) + -1|0);
      HEAP8[$304>>0] = $303;
      $306 = (_bitshift64Lshr(($298|0),($305|0),4)|0);
      $307 = tempRet0;
      $308 = ($306|0)==(0);
      $309 = ($307|0)==(0);
      $310 = $308 & $309;
      if ($310) {
       $$lcssa386 = $304;
       break;
      } else {
       $$012$i = $304;$298 = $306;$305 = $307;
      }
     }
     $311 = $fl$3 & 8;
     $312 = ($311|0)==(0);
     if ($312) {
      $369 = $267;$371 = $294;$a$0 = $$lcssa386;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 4104;
      label = 89;
     } else {
      $313 = $t$1 >> 4;
      $314 = (4104 + ($313)|0);
      $369 = $267;$371 = $294;$a$0 = $$lcssa386;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $314;
      label = 89;
     }
    }
   }
   else if ((label|0) == 84) {
    label = 0;
    $340 = ($339>>>0)>(0);
    $342 = ($341>>>0)>(4294967295);
    $343 = ($339|0)==(0);
    $344 = $343 & $342;
    $345 = $340 | $344;
    if ($345) {
     $$05$i = $2;$346 = $341;$347 = $339;
     while(1) {
      $348 = (___uremdi3(($346|0),($347|0),10,0)|0);
      $349 = tempRet0;
      $350 = $348 | 48;
      $351 = $350&255;
      $352 = (($$05$i) + -1|0);
      HEAP8[$352>>0] = $351;
      $353 = (___udivdi3(($346|0),($347|0),10,0)|0);
      $354 = tempRet0;
      $355 = ($347>>>0)>(9);
      $356 = ($346>>>0)>(4294967295);
      $357 = ($347|0)==(9);
      $358 = $357 & $356;
      $359 = $355 | $358;
      if ($359) {
       $$05$i = $352;$346 = $353;$347 = $354;
      } else {
       $$lcssa382 = $352;$1185 = $353;$1186 = $354;
       break;
      }
     }
     $$0$lcssa$i54 = $$lcssa382;$$01$lcssa$off0$i = $1185;
    } else {
     $$0$lcssa$i54 = $2;$$01$lcssa$off0$i = $341;
    }
    $360 = ($$01$lcssa$off0$i|0)==(0);
    if ($360) {
     $369 = $341;$371 = $339;$a$0 = $$0$lcssa$i54;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 89;
    } else {
     $$12$i = $$0$lcssa$i54;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $361 = (($y$03$i>>>0) % 10)&-1;
      $362 = $361 | 48;
      $363 = $362&255;
      $364 = (($$12$i) + -1|0);
      HEAP8[$364>>0] = $363;
      $365 = (($y$03$i>>>0) / 10)&-1;
      $366 = ($y$03$i>>>0)<(10);
      if ($366) {
       $369 = $341;$371 = $339;$a$0 = $364;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 89;
       break;
      } else {
       $$12$i = $364;$y$03$i = $365;
      }
     }
    }
   }
   else if ((label|0) == 94) {
    label = 0;
    $387 = (_memchr($a$1,0,$p$0)|0);
    $388 = ($387|0)==(0|0);
    if ($388) {
     $389 = (($a$1) + ($p$0)|0);
     $1183 = $294;$1184 = $267;$a$2 = $a$1;$fl$6 = $266;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 4104;$z$2 = $389;
     break;
    } else {
     $390 = $387;
     $391 = $a$1;
     $392 = (($390) - ($391))|0;
     $1183 = $294;$1184 = $267;$a$2 = $a$1;$fl$6 = $266;$p$5 = $392;$pl$2 = 0;$prefix$2 = 4104;$z$2 = $387;
     break;
    }
   }
   else if ((label|0) == 99) {
    label = 0;
    $i$0176 = 0;$l$1175 = 0;$ws$0177 = $1187;
    while(1) {
     $395 = HEAP32[$ws$0177>>2]|0;
     $396 = ($395|0)==(0);
     if ($396) {
      $i$0$lcssa = $i$0176;$l$2 = $l$1175;
      break;
     }
     $397 = (_wctomb($mb,$395)|0);
     $398 = ($397|0)<(0);
     $399 = (($p$4271) - ($i$0176))|0;
     $400 = ($397>>>0)>($399>>>0);
     $or$cond23 = $398 | $400;
     if ($or$cond23) {
      $i$0$lcssa = $i$0176;$l$2 = $397;
      break;
     }
     $401 = (($ws$0177) + 4|0);
     $402 = (($397) + ($i$0176))|0;
     $403 = ($p$4271>>>0)>($402>>>0);
     if ($403) {
      $i$0176 = $402;$l$1175 = $397;$ws$0177 = $401;
     } else {
      $i$0$lcssa = $402;$l$2 = $397;
      break;
     }
    }
    $404 = ($l$2|0)<(0);
    if ($404) {
     $$0 = -1;
     label = 374;
     break L1;
    } else {
     $1189 = $1188;$1190 = $1187;$i$0$lcssa272 = $i$0$lcssa;
     label = 104;
    }
   }
  } while(0);
  if ((label|0) == 89) {
   label = 0;
   $367 = ($p$2|0)>(-1);
   $368 = $fl$4 & -65537;
   $$fl$4 = $367 ? $368 : $fl$4;
   $370 = ($369|0)!=(0);
   $372 = ($371|0)!=(0);
   $373 = $370 | $372;
   $374 = ($p$2|0)!=(0);
   $or$cond = $373 | $374;
   if ($or$cond) {
    $375 = $a$0;
    $376 = (($3) - ($375))|0;
    $377 = $373&1;
    $378 = $377 ^ 1;
    $379 = (($378) + ($376))|0;
    $380 = ($p$2|0)>($379|0);
    $p$2$ = $380 ? $p$2 : $379;
    $1183 = $371;$1184 = $369;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $1183 = $371;$1184 = $369;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 104) {
   label = 0;
   $405 = $fl$1$ & 73728;
   $406 = ($405|0)==(0);
   $407 = ($w$1|0)>($i$0$lcssa272|0);
   $or$cond$i65 = $406 & $407;
   if ($or$cond$i65) {
    $408 = (($w$1) - ($i$0$lcssa272))|0;
    $409 = ($408>>>0)>(256);
    $410 = $409 ? 256 : $408;
    _memset(($pad$i|0),32,($410|0))|0;
    $411 = ($408>>>0)>(255);
    if ($411) {
     $$01$i67 = $408;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $412 = (($$01$i67) + -256)|0;
      $413 = ($412>>>0)>(255);
      if ($413) {
       $$01$i67 = $412;
      } else {
       break;
      }
     }
     $414 = $408 & 255;
     $$0$lcssa$i69 = $414;
    } else {
     $$0$lcssa$i69 = $408;
    }
    (___fwritex($pad$i,$$0$lcssa$i69,$f)|0);
   }
   $415 = ($i$0$lcssa272|0)==(0);
   L481: do {
    if (!($415)) {
     $i$1187 = 0;$ws$1188 = $1190;
     while(1) {
      $416 = HEAP32[$ws$1188>>2]|0;
      $417 = ($416|0)==(0);
      if ($417) {
       break L481;
      }
      $418 = (_wctomb($mb,$416)|0);
      $419 = (($418) + ($i$1187))|0;
      $420 = ($419|0)>($i$0$lcssa272|0);
      if ($420) {
       break L481;
      }
      $421 = (($ws$1188) + 4|0);
      (___fwritex($mb,$418,$f)|0);
      $422 = ($419>>>0)<($i$0$lcssa272>>>0);
      if ($422) {
       $i$1187 = $419;$ws$1188 = $421;
      } else {
       break;
      }
     }
    }
   } while(0);
   $423 = ($405|0)==(8192);
   $or$cond$i72 = $423 & $407;
   if ($or$cond$i72) {
    $424 = (($w$1) - ($i$0$lcssa272))|0;
    $425 = ($424>>>0)>(256);
    $426 = $425 ? 256 : $424;
    _memset(($pad$i|0),32,($426|0))|0;
    $427 = ($424>>>0)>(255);
    if ($427) {
     $$01$i74 = $424;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $428 = (($$01$i74) + -256)|0;
      $429 = ($428>>>0)>(255);
      if ($429) {
       $$01$i74 = $428;
      } else {
       break;
      }
     }
     $430 = $424 & 255;
     $$0$lcssa$i76 = $430;
    } else {
     $$0$lcssa$i76 = $424;
    }
    (___fwritex($pad$i,$$0$lcssa$i76,$f)|0);
   }
   $431 = $407 ? $w$1 : $i$0$lcssa272;
   $1175 = $294;$1176 = $1189;$23 = $1182;$cnt$0 = $cnt$1;$l$0 = $431;$l10n$0 = $l10n$3;
   continue;
  }
  $1007 = $z$2;
  $1008 = $a$2;
  $1009 = (($1007) - ($1008))|0;
  $1010 = ($p$5|0)<($1009|0);
  $$p$5 = $1010 ? $1009 : $p$5;
  $1011 = (($pl$2) + ($$p$5))|0;
  $1012 = ($w$1|0)<($1011|0);
  $w$2 = $1012 ? $1011 : $w$1;
  $1013 = $fl$6 & 73728;
  $1014 = ($1013|0)==(0);
  $1015 = ($w$2|0)>($1011|0);
  $or$cond$i82 = $1014 & $1015;
  if ($or$cond$i82) {
   $1016 = (($w$2) - ($1011))|0;
   $1017 = ($1016>>>0)>(256);
   $1018 = $1017 ? 256 : $1016;
   _memset(($pad$i|0),32,($1018|0))|0;
   $1019 = ($1016>>>0)>(255);
   if ($1019) {
    $$01$i84 = $1016;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1020 = (($$01$i84) + -256)|0;
     $1021 = ($1020>>>0)>(255);
     if ($1021) {
      $$01$i84 = $1020;
     } else {
      break;
     }
    }
    $1022 = $1016 & 255;
    $$0$lcssa$i86 = $1022;
   } else {
    $$0$lcssa$i86 = $1016;
   }
   (___fwritex($pad$i,$$0$lcssa$i86,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $1023 = ($1013|0)==(65536);
  $or$cond$i58 = $1023 & $1015;
  if ($or$cond$i58) {
   $1024 = (($w$2) - ($1011))|0;
   $1025 = ($1024>>>0)>(256);
   $1026 = $1025 ? 256 : $1024;
   _memset(($pad$i|0),48,($1026|0))|0;
   $1027 = ($1024>>>0)>(255);
   if ($1027) {
    $$01$i60 = $1024;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1028 = (($$01$i60) + -256)|0;
     $1029 = ($1028>>>0)>(255);
     if ($1029) {
      $$01$i60 = $1028;
     } else {
      break;
     }
    }
    $1030 = $1024 & 255;
    $$0$lcssa$i62 = $1030;
   } else {
    $$0$lcssa$i62 = $1024;
   }
   (___fwritex($pad$i,$$0$lcssa$i62,$f)|0);
  }
  $1031 = ($$p$5|0)>($1009|0);
  if ($1031) {
   $1032 = (($$p$5) - ($1009))|0;
   $1033 = ($1032>>>0)>(256);
   $1034 = $1033 ? 256 : $1032;
   _memset(($pad$i|0),48,($1034|0))|0;
   $1035 = ($1032>>>0)>(255);
   if ($1035) {
    $$01$i45 = $1032;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1036 = (($$01$i45) + -256)|0;
     $1037 = ($1036>>>0)>(255);
     if ($1037) {
      $$01$i45 = $1036;
     } else {
      break;
     }
    }
    $1038 = $1032 & 255;
    $$0$lcssa$i47 = $1038;
   } else {
    $$0$lcssa$i47 = $1032;
   }
   (___fwritex($pad$i,$$0$lcssa$i47,$f)|0);
  }
  (___fwritex($a$2,$1009,$f)|0);
  $1039 = ($1013|0)==(8192);
  $or$cond$i = $1039 & $1015;
  if ($or$cond$i) {
   $1040 = (($w$2) - ($1011))|0;
   $1041 = ($1040>>>0)>(256);
   $1042 = $1041 ? 256 : $1040;
   _memset(($pad$i|0),32,($1042|0))|0;
   $1043 = ($1040>>>0)>(255);
   if ($1043) {
    $$01$i = $1040;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1044 = (($$01$i) + -256)|0;
     $1045 = ($1044>>>0)>(255);
     if ($1045) {
      $$01$i = $1044;
     } else {
      break;
     }
    }
    $1046 = $1040 & 255;
    $$0$lcssa$i = $1046;
   } else {
    $$0$lcssa$i = $1040;
   }
   (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  }
  $1175 = $1183;$1176 = $1184;$23 = $1182;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 355) {
  $1047 = ($f|0)==(0|0);
  if (!($1047)) {
   $$0 = $cnt$1$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
  $1048 = ($l10n$0$lcssa|0)==(0);
  if ($1048) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$2163 = 1;
  }
  while(1) {
   $1049 = (($nl_type) + ($i$2163<<2)|0);
   $1050 = HEAP32[$1049>>2]|0;
   $1051 = ($1050|0)==(0);
   if ($1051) {
    $i$2163$lcssa = $i$2163;
    break;
   }
   $1053 = (($nl_arg) + ($i$2163<<3)|0);
   $1054 = ($1050>>>0)>(20);
   L538: do {
    if (!($1054)) {
     do {
      switch ($1050|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $1055 = $arglist_current35;
       $1056 = (0 + 4|0);
       $expanded148 = $1056;
       $expanded147 = (($expanded148) - 1)|0;
       $1057 = (($1055) + ($expanded147))|0;
       $1058 = (0 + 4|0);
       $expanded152 = $1058;
       $expanded151 = (($expanded152) - 1)|0;
       $expanded150 = $expanded151 ^ -1;
       $1059 = $1057 & $expanded150;
       $1060 = $1059;
       $1061 = HEAP32[$1060>>2]|0;
       $arglist_next36 = (($1060) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$1053>>2] = $1061;
       break L538;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $1062 = $arglist_current38;
       $1063 = (0 + 4|0);
       $expanded155 = $1063;
       $expanded154 = (($expanded155) - 1)|0;
       $1064 = (($1062) + ($expanded154))|0;
       $1065 = (0 + 4|0);
       $expanded159 = $1065;
       $expanded158 = (($expanded159) - 1)|0;
       $expanded157 = $expanded158 ^ -1;
       $1066 = $1064 & $expanded157;
       $1067 = $1066;
       $1068 = HEAP32[$1067>>2]|0;
       $arglist_next39 = (($1067) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $1069 = ($1068|0)<(0);
       $1070 = $1069 << 31 >> 31;
       $1071 = $1053;
       $1072 = $1071;
       HEAP32[$1072>>2] = $1068;
       $1073 = (($1071) + 4)|0;
       $1074 = $1073;
       HEAP32[$1074>>2] = $1070;
       break L538;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $1075 = $arglist_current41;
       $1076 = (0 + 4|0);
       $expanded162 = $1076;
       $expanded161 = (($expanded162) - 1)|0;
       $1077 = (($1075) + ($expanded161))|0;
       $1078 = (0 + 4|0);
       $expanded166 = $1078;
       $expanded165 = (($expanded166) - 1)|0;
       $expanded164 = $expanded165 ^ -1;
       $1079 = $1077 & $expanded164;
       $1080 = $1079;
       $1081 = HEAP32[$1080>>2]|0;
       $arglist_next42 = (($1080) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $1082 = $1053;
       $1083 = $1082;
       HEAP32[$1083>>2] = $1081;
       $1084 = (($1082) + 4)|0;
       $1085 = $1084;
       HEAP32[$1085>>2] = 0;
       break L538;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $1086 = $arglist_current44;
       $1087 = (0 + 8|0);
       $expanded169 = $1087;
       $expanded168 = (($expanded169) - 1)|0;
       $1088 = (($1086) + ($expanded168))|0;
       $1089 = (0 + 8|0);
       $expanded173 = $1089;
       $expanded172 = (($expanded173) - 1)|0;
       $expanded171 = $expanded172 ^ -1;
       $1090 = $1088 & $expanded171;
       $1091 = $1090;
       $1092 = $1091;
       $1093 = $1092;
       $1094 = HEAP32[$1093>>2]|0;
       $1095 = (($1092) + 4)|0;
       $1096 = $1095;
       $1097 = HEAP32[$1096>>2]|0;
       $arglist_next45 = (($1091) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1098 = $1053;
       $1099 = $1098;
       HEAP32[$1099>>2] = $1094;
       $1100 = (($1098) + 4)|0;
       $1101 = $1100;
       HEAP32[$1101>>2] = $1097;
       break L538;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1102 = $arglist_current47;
       $1103 = (0 + 4|0);
       $expanded176 = $1103;
       $expanded175 = (($expanded176) - 1)|0;
       $1104 = (($1102) + ($expanded175))|0;
       $1105 = (0 + 4|0);
       $expanded180 = $1105;
       $expanded179 = (($expanded180) - 1)|0;
       $expanded178 = $expanded179 ^ -1;
       $1106 = $1104 & $expanded178;
       $1107 = $1106;
       $1108 = HEAP32[$1107>>2]|0;
       $arglist_next48 = (($1107) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1109 = $1108&65535;
       $1110 = $1109 << 16 >> 16;
       $1111 = ($1110|0)<(0);
       $1112 = $1111 << 31 >> 31;
       $1113 = $1053;
       $1114 = $1113;
       HEAP32[$1114>>2] = $1110;
       $1115 = (($1113) + 4)|0;
       $1116 = $1115;
       HEAP32[$1116>>2] = $1112;
       break L538;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1117 = $arglist_current50;
       $1118 = (0 + 4|0);
       $expanded183 = $1118;
       $expanded182 = (($expanded183) - 1)|0;
       $1119 = (($1117) + ($expanded182))|0;
       $1120 = (0 + 4|0);
       $expanded187 = $1120;
       $expanded186 = (($expanded187) - 1)|0;
       $expanded185 = $expanded186 ^ -1;
       $1121 = $1119 & $expanded185;
       $1122 = $1121;
       $1123 = HEAP32[$1122>>2]|0;
       $arglist_next51 = (($1122) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1123 & 65535;
       $1124 = $1053;
       $1125 = $1124;
       HEAP32[$1125>>2] = $$mask1$i;
       $1126 = (($1124) + 4)|0;
       $1127 = $1126;
       HEAP32[$1127>>2] = 0;
       break L538;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1128 = $arglist_current53;
       $1129 = (0 + 4|0);
       $expanded190 = $1129;
       $expanded189 = (($expanded190) - 1)|0;
       $1130 = (($1128) + ($expanded189))|0;
       $1131 = (0 + 4|0);
       $expanded194 = $1131;
       $expanded193 = (($expanded194) - 1)|0;
       $expanded192 = $expanded193 ^ -1;
       $1132 = $1130 & $expanded192;
       $1133 = $1132;
       $1134 = HEAP32[$1133>>2]|0;
       $arglist_next54 = (($1133) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1135 = $1134&255;
       $1136 = $1135 << 24 >> 24;
       $1137 = ($1136|0)<(0);
       $1138 = $1137 << 31 >> 31;
       $1139 = $1053;
       $1140 = $1139;
       HEAP32[$1140>>2] = $1136;
       $1141 = (($1139) + 4)|0;
       $1142 = $1141;
       HEAP32[$1142>>2] = $1138;
       break L538;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1143 = $arglist_current56;
       $1144 = (0 + 4|0);
       $expanded197 = $1144;
       $expanded196 = (($expanded197) - 1)|0;
       $1145 = (($1143) + ($expanded196))|0;
       $1146 = (0 + 4|0);
       $expanded201 = $1146;
       $expanded200 = (($expanded201) - 1)|0;
       $expanded199 = $expanded200 ^ -1;
       $1147 = $1145 & $expanded199;
       $1148 = $1147;
       $1149 = HEAP32[$1148>>2]|0;
       $arglist_next57 = (($1148) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1149 & 255;
       $1150 = $1053;
       $1151 = $1150;
       HEAP32[$1151>>2] = $$mask$i;
       $1152 = (($1150) + 4)|0;
       $1153 = $1152;
       HEAP32[$1153>>2] = 0;
       break L538;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       $1154 = $arglist_current59;
       $1155 = (0 + 8|0);
       $expanded204 = $1155;
       $expanded203 = (($expanded204) - 1)|0;
       $1156 = (($1154) + ($expanded203))|0;
       $1157 = (0 + 8|0);
       $expanded208 = $1157;
       $expanded207 = (($expanded208) - 1)|0;
       $expanded206 = $expanded207 ^ -1;
       $1158 = $1156 & $expanded206;
       $1159 = $1158;
       $1160 = +HEAPF64[$1159>>3];
       $arglist_next60 = (($1159) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$1053>>3] = $1160;
       break L538;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       $1161 = $arglist_current62;
       $1162 = (0 + 8|0);
       $expanded211 = $1162;
       $expanded210 = (($expanded211) - 1)|0;
       $1163 = (($1161) + ($expanded210))|0;
       $1164 = (0 + 8|0);
       $expanded215 = $1164;
       $expanded214 = (($expanded215) - 1)|0;
       $expanded213 = $expanded214 ^ -1;
       $1165 = $1163 & $expanded213;
       $1166 = $1165;
       $1167 = +HEAPF64[$1166>>3];
       $arglist_next63 = (($1166) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$1053>>3] = $1167;
       break L538;
       break;
      }
      default: {
       break L538;
      }
      }
     } while(0);
    }
   } while(0);
   $1168 = (($i$2163) + 1)|0;
   $1169 = ($1168|0)<(10);
   if ($1169) {
    $i$2163 = $1168;
   } else {
    $$0 = 1;
    label = 374;
    break;
   }
  }
  if ((label|0) == 374) {
   STACKTOP = sp;return ($$0|0);
  }
  $1052 = ($i$2163$lcssa|0)<(10);
  if ($1052) {
   $i$3161 = $i$2163$lcssa;
  } else {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1172 = (($nl_type) + ($i$3161<<2)|0);
   $1173 = HEAP32[$1172>>2]|0;
   $1174 = ($1173|0)==(0);
   $1170 = (($i$3161) + 1)|0;
   if (!($1174)) {
    $$0 = -1;
    label = 374;
    break;
   }
   $1171 = ($1170|0)<(10);
   if ($1171) {
    $i$3161 = $1170;
   } else {
    $$0 = 1;
    label = 374;
    break;
   }
  }
  if ((label|0) == 374) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 374) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((2272 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP8[$msg>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($msg) + 1|0);
  $7 = $6;
 } else {
  $4 = (($msg) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 __ZNSt3__118__libcpp_refstringC2EPKc($0,$7);
 return;
}
function __ZNSt13runtime_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((2272 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__118__libcpp_refstringC2EPKc($0,$msg);
 return;
}
function __ZNSt3__118__libcpp_refstringC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($msg|0))|0);
 $1 = (($0) + 13)|0;
 $2 = (__Znwj($1)|0);
 HEAP32[$2>>2] = $0;
 $3 = (($2) + 4|0);
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = (($2) + 12|0);
 $6 = (($0) + 1)|0;
 _memcpy(($5|0),($msg|0),($6|0))|0;
 HEAP32[$this>>2] = $5;
 return;
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((4320|0),(4352|0),1164,(6520|0));
 // unreachable;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  ;HEAP32[$this+0>>2]=HEAP32[$__str+0>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
 } else {
  $3 = (($__str) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($__str) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$4,$6);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__n>>>0)<(11);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__n;
  $__p$0 = $7;
 }
 _memset(($__p$0|0),($__c|0),($__n|0))|0;
 $11 = (($__p$0) + ($__n)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==($__str|0);
 if (!($0)) {
  $1 = HEAP8[$__str>>0]|0;
  $2 = $1 & 1;
  $3 = ($2<<24>>24)==(0);
  if ($3) {
   $8 = (($__str) + 1|0);
   $9 = $1&255;
   $10 = $9 >>> 1;
   $11 = $8;$12 = $10;
  } else {
   $4 = (($__str) + 8|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($__str) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $11 = $5;$12 = $7;
  }
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$11,$12)|0);
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $6 = 10;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $6 = $phitmp$i;$9 = $5;
 }
 $7 = ($6>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 do {
  if ($7) {
   if ($10) {
    $24 = $9&255;
    $25 = $24 >>> 1;
    $27 = $25;
   } else {
    $22 = (($this) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $27 = $23;
   }
   $26 = (($__n) - ($6))|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$6,$26,$27,0,$27,$__n,$__s);
  } else {
   if ($10) {
    $13 = (($this) + 1|0);
    $14 = $13;
   } else {
    $11 = (($this) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $14 = $12;
   }
   _memmove(($14|0),($__s|0),($__n|0))|0;
   $15 = (($14) + ($__n)|0);
   HEAP8[$15>>0] = 0;
   $16 = HEAP8[$this>>0]|0;
   $17 = $16 & 1;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $20 = $__n << 1;
    $21 = $20&255;
    HEAP8[$this>>0] = $21;
    break;
   } else {
    $19 = (($this) + 4|0);
    HEAP32[$19>>2] = $__n;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $7 = $6;
 } else {
  $3 = (($this) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $7 = $4;
 }
 $8 = ($7>>>0)<($__n>>>0);
 do {
  if ($8) {
   $9 = (($__n) - ($7))|0;
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$9,$__c)|0);
  } else {
   if ($2) {
    $14 = ((($this) + ($__n)|0) + 1|0);
    HEAP8[$14>>0] = 0;
    $15 = $__n << 1;
    $16 = $15&255;
    HEAP8[$this>>0] = $16;
    break;
   } else {
    $10 = (($this) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($11) + ($__n)|0);
    HEAP8[$12>>0] = 0;
    $13 = (($this) + 4|0);
    HEAP32[$13>>2] = $__n;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)==(0);
 if (!($0)) {
  $1 = HEAP8[$this>>0]|0;
  $2 = $1 & 1;
  $3 = ($2<<24>>24)==(0);
  if ($3) {
   $16 = 10;$8 = $1;
  } else {
   $4 = HEAP32[$this>>2]|0;
   $5 = $4 & -2;
   $phitmp$i = (($5) + -1)|0;
   $6 = $4&255;
   $16 = $phitmp$i;$8 = $6;
  }
  $7 = $8 & 1;
  $9 = ($7<<24>>24)==(0);
  if ($9) {
   $12 = $8&255;
   $13 = $12 >>> 1;
   $15 = $13;
  } else {
   $10 = (($this) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $15 = $11;
  }
  $14 = (($16) - ($15))|0;
  $17 = ($14>>>0)<($__n>>>0);
  if ($17) {
   $18 = (($__n) - ($16))|0;
   $19 = (($18) + ($15))|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$16,$19,$15,$15,0,0);
   $$pre = HEAP8[$this>>0]|0;
   $21 = $$pre;
  } else {
   $21 = $8;
  }
  $20 = $21 & 1;
  $22 = ($20<<24>>24)==(0);
  if ($22) {
   $25 = (($this) + 1|0);
   $27 = $25;
  } else {
   $23 = (($this) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $27 = $24;
  }
  $26 = (($27) + ($15)|0);
  _memset(($26|0),($__c|0),($__n|0))|0;
  $28 = (($15) + ($__n))|0;
  $29 = HEAP8[$this>>0]|0;
  $30 = $29 & 1;
  $31 = ($30<<24>>24)==(0);
  if ($31) {
   $33 = $28 << 1;
   $34 = $33&255;
   HEAP8[$this>>0] = $34;
  } else {
   $32 = (($this) + 4|0);
   HEAP32[$32>>2] = $28;
  }
  $35 = (($27) + ($28)|0);
  HEAP8[$35>>0] = 0;
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$0 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0, $phitmp$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $14 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $15 = ($14>>>0)>($__res_arg>>>0);
 $16 = $15 ? $14 : $__res_arg;
 $17 = ($16>>>0)<(11);
 if ($17) {
  $20 = 10;
 } else {
  $18 = (($16) + 16)|0;
  $19 = $18 & -16;
  $phitmp$i3 = (($19) + -1)|0;
  $20 = $phitmp$i3;
 }
 $21 = ($20|0)==($22|0);
 do {
  if (!($21)) {
   $23 = ($20|0)==(10);
   do {
    if ($23) {
     $24 = (($this) + 1|0);
     $25 = (($this) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $__new_data$0 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
    } else {
     $27 = (($20) + 1)|0;
     $28 = (__Znwj($27)|0);
     $29 = $8 & 1;
     $30 = ($29<<24>>24)==(0);
     if ($30) {
      $33 = (($this) + 1|0);
      $__new_data$0 = $28;$__now_long$0$off0 = 1;$__p$0 = $33;$__was_long$0$off0 = 0;
      break;
     } else {
      $31 = (($this) + 8|0);
      $32 = HEAP32[$31>>2]|0;
      $__new_data$0 = $28;$__now_long$0$off0 = 1;$__p$0 = $32;$__was_long$0$off0 = 1;
      break;
     }
    }
   } while(0);
   $34 = $8 & 1;
   $35 = ($34<<24>>24)==(0);
   if ($35) {
    $38 = $8&255;
    $39 = $38 >>> 1;
    $41 = $39;
   } else {
    $36 = (($this) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $41 = $37;
   }
   $40 = (($41) + 1)|0;
   _memcpy(($__new_data$0|0),($__p$0|0),($40|0))|0;
   if ($__was_long$0$off0) {
    __ZdlPv($__p$0);
   }
   if ($__now_long$0$off0) {
    $42 = (($20) + 1)|0;
    $43 = $42 | 1;
    HEAP32[$this>>2] = $43;
    $44 = (($this) + 4|0);
    HEAP32[$44>>2] = $14;
    $45 = (($this) + 8|0);
    HEAP32[$45>>2] = $__new_data$0;
    break;
   } else {
    $46 = $14 << 1;
    $47 = $46&255;
    HEAP8[$this>>0] = $47;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 10;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 1|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
 }
 $__p$0 = (($$pn) + ($__sz$0)|0);
 HEAP8[$__p$0>>0] = $__c;
 $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
 HEAP8[$22>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (__Znwj($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = ($__n_add|0)==(0);
 if (!($20)) {
  $21 = (($17) + ($__n_copy)|0);
  _memcpy(($21|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $22 = (($__old_sz) - ($__n_del))|0;
 $23 = ($22|0)==($__n_copy|0);
 if (!($23)) {
  $24 = (($22) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $25 = (($17) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $26 = (($19) + ($$sum1)|0);
  _memcpy(($25|0),($26|0),($24|0))|0;
 }
 $27 = ($__old_cap|0)==(10);
 if (!($27)) {
  __ZdlPv($19);
 }
 $28 = (($this) + 8|0);
 HEAP32[$28>>2] = $17;
 $29 = $16 | 1;
 HEAP32[$this>>2] = $29;
 $30 = (($22) + ($__n_add))|0;
 $31 = (($this) + 4|0);
 HEAP32[$31>>2] = $30;
 $32 = (($17) + ($30)|0);
 HEAP8[$32>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-17 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (__Znwj($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = (($__old_sz) - ($__n_del))|0;
 $21 = ($20|0)==($__n_copy|0);
 if (!($21)) {
  $22 = (($20) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $23 = (($17) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $24 = (($19) + ($$sum1)|0);
  _memcpy(($23|0),($24|0),($22|0))|0;
 }
 $25 = ($__old_cap|0)==(10);
 if (!($25)) {
  __ZdlPv($19);
 }
 $26 = (($this) + 8|0);
 HEAP32[$26>>2] = $17;
 $27 = $16 | 1;
 HEAP32[$this>>2] = $27;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(2);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = (($this) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = (($this) + 4|0);
  HEAP32[$11>>2] = $__sz;
  $__p$0 = $8;
 }
 (_wmemcpy($__p$0,$__s,$__sz)|0);
 $12 = (($__p$0) + ($__sz<<2)|0);
 HEAP32[$12>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__n>>>0)<(2);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = (($this) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = (($this) + 4|0);
  HEAP32[$11>>2] = $__n;
  $__p$0 = $8;
 }
 (_wmemset($__p$0,$__c,$__n)|0);
 $12 = (($__p$0) + ($__n<<2)|0);
 HEAP32[$12>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $6 = 1;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $6 = $phitmp$i;$9 = $5;
 }
 $7 = ($6>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 do {
  if ($7) {
   if ($10) {
    $24 = $9&255;
    $25 = $24 >>> 1;
    $27 = $25;
   } else {
    $22 = (($this) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $27 = $23;
   }
   $26 = (($__n) - ($6))|0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$6,$26,$27,0,$27,$__n,$__s);
  } else {
   if ($10) {
    $13 = (($this) + 4|0);
    $14 = $13;
   } else {
    $11 = (($this) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $14 = $12;
   }
   (_wmemmove($14,$__s,$__n)|0);
   $15 = (($14) + ($__n<<2)|0);
   HEAP32[$15>>2] = 0;
   $16 = HEAP8[$this>>0]|0;
   $17 = $16 & 1;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $20 = $__n << 1;
    $21 = $20&255;
    HEAP8[$this>>0] = $21;
    break;
   } else {
    $19 = (($this) + 4|0);
    HEAP32[$19>>2] = $__n;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$0 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0, $phitmp$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 1;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $14 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $15 = ($14>>>0)>($__res_arg>>>0);
 $16 = $15 ? $14 : $__res_arg;
 $17 = ($16>>>0)<(2);
 if ($17) {
  $20 = 1;
 } else {
  $18 = (($16) + 4)|0;
  $19 = $18 & -4;
  $phitmp$i3 = (($19) + -1)|0;
  $20 = $phitmp$i3;
 }
 $21 = ($20|0)==($22|0);
 do {
  if (!($21)) {
   $23 = ($20|0)==(1);
   do {
    if ($23) {
     $24 = (($this) + 4|0);
     $25 = (($this) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $__new_data$0 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
    } else {
     $27 = $20 << 2;
     $28 = (($27) + 4)|0;
     $29 = (__Znwj($28)|0);
     $30 = $8 & 1;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $34 = (($this) + 4|0);
      $__new_data$0 = $29;$__now_long$0$off0 = 1;$__p$0 = $34;$__was_long$0$off0 = 0;
      break;
     } else {
      $32 = (($this) + 8|0);
      $33 = HEAP32[$32>>2]|0;
      $__new_data$0 = $29;$__now_long$0$off0 = 1;$__p$0 = $33;$__was_long$0$off0 = 1;
      break;
     }
    }
   } while(0);
   $35 = $8 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $39 = $8&255;
    $40 = $39 >>> 1;
    $42 = $40;
   } else {
    $37 = (($this) + 4|0);
    $38 = HEAP32[$37>>2]|0;
    $42 = $38;
   }
   $41 = (($42) + 1)|0;
   (_wmemcpy($__new_data$0,$__p$0,$41)|0);
   if ($__was_long$0$off0) {
    __ZdlPv($__p$0);
   }
   if ($__now_long$0$off0) {
    $43 = (($20) + 1)|0;
    $44 = $43 | 1;
    HEAP32[$this>>2] = $44;
    $45 = (($this) + 4|0);
    HEAP32[$45>>2] = $14;
    $46 = (($this) + 8|0);
    HEAP32[$46>>2] = $__new_data$0;
    break;
   } else {
    $47 = $14 << 1;
    $48 = $47&255;
    HEAP8[$this>>0] = $48;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 1;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 4|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
 }
 $__p$0 = (($$pn) + ($__sz$0<<2)|0);
 HEAP32[$__p$0>>2] = $__c;
 $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
 HEAP32[$22>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741806 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 4|0);
  $20 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  if ($13) {
   $17 = 2;
  } else {
   $14 = (($12) + 4)|0;
   $15 = $14 & -4;
   $17 = $15;
  }
 } else {
  $17 = 1073741807;
 }
 $16 = $17 << 2;
 $18 = (__Znwj($16)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  (_wmemcpy($18,$20,$__n_copy)|0);
 }
 $21 = ($__n_add|0)==(0);
 if (!($21)) {
  $22 = (($18) + ($__n_copy<<2)|0);
  (_wmemcpy($22,$__p_new_stuff,$__n_add)|0);
 }
 $23 = (($__old_sz) - ($__n_del))|0;
 $24 = ($23|0)==($__n_copy|0);
 if (!($24)) {
  $25 = (($23) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $26 = (($18) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $27 = (($20) + ($$sum1<<2)|0);
  (_wmemcpy($26,$27,$25)|0);
 }
 $28 = ($__old_cap|0)==(1);
 if (!($28)) {
  __ZdlPv($20);
 }
 $29 = (($this) + 8|0);
 HEAP32[$29>>2] = $18;
 $30 = $17 | 1;
 HEAP32[$this>>2] = $30;
 $31 = (($23) + ($__n_add))|0;
 $32 = (($this) + 4|0);
 HEAP32[$32>>2] = $31;
 $33 = (($18) + ($31<<2)|0);
 HEAP32[$33>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741807 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 4|0);
  $20 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  if ($13) {
   $17 = 2;
  } else {
   $14 = (($12) + 4)|0;
   $15 = $14 & -4;
   $17 = $15;
  }
 } else {
  $17 = 1073741807;
 }
 $16 = $17 << 2;
 $18 = (__Znwj($16)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  (_wmemcpy($18,$20,$__n_copy)|0);
 }
 $21 = (($__old_sz) - ($__n_del))|0;
 $22 = ($21|0)==($__n_copy|0);
 if (!($22)) {
  $23 = (($21) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $24 = (($18) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $25 = (($20) + ($$sum1<<2)|0);
  (_wmemcpy($24,$25,$23)|0);
 }
 $26 = ($__old_cap|0)==(1);
 if (!($26)) {
  __ZdlPv($20);
 }
 $27 = (($this) + 8|0);
 HEAP32[$27>>2] = $18;
 $28 = $17 | 1;
 HEAP32[$this>>2] = $28;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p$0 = 0, $__p$0$ph = 0, $scevgep2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $5 = $2 << 1;
  $6 = $5&255;
  HEAP8[$this>>0] = $6;
  $7 = (($this) + 1|0);
  $__p$0$ph = $7;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  $11 = (($this) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = $9 | 1;
  HEAP32[$this>>2] = $12;
  $13 = (($this) + 4|0);
  HEAP32[$13>>2] = $2;
  $__p$0$ph = $10;
 }
 $14 = $__last;
 $15 = (($14) - ($0))|0;
 $$0 = $__first;$__p$0 = $__p$0$ph;
 while(1) {
  $16 = ($$0|0)==($__last|0);
  if ($16) {
   break;
  }
  $17 = HEAP8[$$0>>0]|0;
  HEAP8[$__p$0>>0] = $17;
  $18 = (($$0) + 1|0);
  $19 = (($__p$0) + 1|0);
  $$0 = $18;$__p$0 = $19;
 }
 $scevgep2 = (($__p$0$ph) + ($15)|0);
 HEAP8[$scevgep2>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, $__p$0$ph = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $5 = ($3>>>0)<(2);
 if ($5) {
  $6 = $2 >>> 1;
  $7 = $6&255;
  HEAP8[$this>>0] = $7;
  $8 = (($this) + 4|0);
  $__p$0$ph = $8;
 } else {
  $9 = (($3) + 4)|0;
  $10 = $9 & -4;
  $11 = $10 << 2;
  $12 = (__Znwj($11)|0);
  $13 = (($this) + 8|0);
  HEAP32[$13>>2] = $12;
  $14 = $10 | 1;
  HEAP32[$this>>2] = $14;
  $15 = (($this) + 4|0);
  HEAP32[$15>>2] = $3;
  $__p$0$ph = $12;
 }
 $16 = $__last;
 $17 = (($16) - ($0))|0;
 $18 = $17 >>> 2;
 $$0 = $__first;$__p$0 = $__p$0$ph;
 while(1) {
  $19 = ($$0|0)==($__last|0);
  if ($19) {
   break;
  }
  $20 = HEAP32[$$0>>2]|0;
  HEAP32[$__p$0>>2] = $20;
  $21 = (($$0) + 4|0);
  $22 = (($__p$0) + 4|0);
  $$0 = $21;$__p$0 = $22;
 }
 $scevgep = (($__p$0$ph) + ($18<<2)|0);
 HEAP32[$scevgep>>2] = 0;
 return;
}
function __ZNSt3__18ios_base5clearEj($this,$state) {
 $this = $this|0;
 $state = $state|0;
 var $$state = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 $3 = $2&1;
 $$state = $3 | $state;
 $4 = (($this) + 16|0);
 HEAP32[$4>>2] = $$state;
 return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 return;
}
function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4504 + 8|0));
 __ZNSt3__18ios_base16__call_callbacksENS0_5eventE($this,0);
 $0 = (($this) + 28|0);
 __ZNSt3__16localeD2Ev($0);
 $1 = (($this) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 $3 = (($this) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 $5 = (($this) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = (($this) + 60|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 return;
}
function __ZNSt3__18ios_base16__call_callbacksENS0_5eventE($this,$ev) {
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 32|0);
 $3 = (($this) + 36|0);
 $i$0 = $1;
 while(1) {
  $4 = ($i$0|0)==(0);
  if ($4) {
   break;
  }
  $5 = (($i$0) + -1)|0;
  $6 = HEAP32[$2>>2]|0;
  $7 = (($6) + ($5<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$3>>2]|0;
  $10 = (($9) + ($5<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viii[$8 & 3]($ev,$this,$11);
  $i$0 = $5;
 }
 return;
}
function __ZNKSt3__18ios_base6getlocEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 28|0);
 __ZNSt3__16localeC2ERKS0_($agg$result,$0);
 return;
}
function __ZNSt3__18ios_base4initEPv($this,$sb) {
 $this = $this|0;
 $sb = $sb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $not$ = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 HEAP32[$0>>2] = $sb;
 $not$ = ($sb|0)==(0|0);
 $1 = $not$&1;
 $2 = (($this) + 16|0);
 HEAP32[$2>>2] = $1;
 $3 = (($this) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = (($this) + 4|0);
 HEAP32[$4>>2] = 4098;
 $5 = (($this) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = (($this) + 8|0);
 HEAP32[$6>>2] = 6;
 $7 = (($this) + 32|0);
 $8 = (($this) + 28|0);
 dest=$7+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__16localeC2Ev($8);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4440 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4440 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4440 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($0);
 $1 = (($this) + 8|0);
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($this|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0 = 0, $__i$0$lcssa = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = (($this) + 16|0);
 $$0 = $__s;$__i$0 = 0;
 while(1) {
  $2 = ($__i$0|0)<($__n|0);
  if (!($2)) {
   $__i$0$lcssa = $__i$0;
   break;
  }
  $3 = HEAP32[$0>>2]|0;
  $4 = HEAP32[$1>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = (($3) + 1|0);
   HEAP32[$0>>2] = $6;
   $7 = HEAP8[$3>>0]|0;
   $storemerge = $7;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$10 & 63]($this)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $__i$0$lcssa = $__i$0;
    break;
   }
   $13 = $11&255;
   $storemerge = $13;
  }
  HEAP8[$$0>>0] = $storemerge;
  $14 = (($__i$0) + 1)|0;
  $15 = (($$0) + 1|0);
  $$0 = $15;$__i$0 = $14;
 }
 return ($__i$0$lcssa|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 63]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
 } else {
  $5 = (($this) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 1|0);
  HEAP32[$5>>2] = $7;
  $8 = HEAP8[$6>>0]|0;
  $9 = $8&255;
  $$0 = $9;
 }
 return ($$0|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0 = 0, $__i$0$lcssa = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 $1 = (($this) + 28|0);
 $$0 = $__s;$__i$0 = 0;
 while(1) {
  $2 = ($__i$0|0)<($__n|0);
  if (!($2)) {
   $__i$0$lcssa = $__i$0;
   break;
  }
  $3 = HEAP32[$0>>2]|0;
  $4 = HEAP32[$1>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = HEAP8[$$0>>0]|0;
   $7 = (($3) + 1|0);
   HEAP32[$0>>2] = $7;
   HEAP8[$3>>0] = $6;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP8[$$0>>0]|0;
   $12 = $11&255;
   $13 = (FUNCTION_TABLE_iii[$10 & 15]($this,$12)|0);
   $14 = ($13|0)==(-1);
   if ($14) {
    $__i$0$lcssa = $__i$0;
    break;
   }
  }
  $15 = (($$0) + 1|0);
  $16 = (($__i$0) + 1)|0;
  $$0 = $15;$__i$0 = $16;
 }
 return ($__i$0$lcssa|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($3);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s,$this);
  $6 = HEAP8[$__s>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if (!($7)) {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + -12|0);
   $10 = HEAP32[$9>>2]|0;
   $$sum1 = (($10) + 24)|0;
   $11 = (($this) + ($$sum1)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + 24|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (FUNCTION_TABLE_ii[$15 & 63]($12)|0);
   $17 = ($16|0)==(-1);
   if ($17) {
    $18 = HEAP32[$this>>2]|0;
    $19 = (($18) + -12|0);
    $20 = HEAP32[$19>>2]|0;
    $$sum2 = (($20) + 16)|0;
    $21 = (($this) + ($$sum2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $22 | 1;
    HEAP32[$21>>2] = $23;
   }
  }
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 }
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($3);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $__os;
 $1 = HEAP32[$__os>>2]|0;
 $2 = (($1) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 16)|0;
 $4 = (($__os) + ($$sum)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$sum1 = (($3) + 72)|0;
  $7 = (($__os) + ($$sum1)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($8)|0);
  }
  HEAP8[$this>>0] = 1;
 }
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $$sum1 = (($4) + 16)|0;
  $8 = (($1) + ($$sum1)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  if ($10) {
   $$sum2 = (($4) + 4)|0;
   $11 = (($1) + ($$sum2)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $12 & 8192;
   $14 = ($13|0)==(0);
   if (!($14)) {
    $15 = (__ZSt18uncaught_exceptionv()|0);
    if (!($15)) {
     $16 = HEAP32[$0>>2]|0;
     $17 = HEAP32[$16>>2]|0;
     $18 = (($17) + -12|0);
     $19 = HEAP32[$18>>2]|0;
     $$sum3 = (($19) + 24)|0;
     $20 = (($16) + ($$sum3)|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = HEAP32[$21>>2]|0;
     $23 = (($22) + 24|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_ii[$24 & 63]($21)|0);
     $26 = ($25|0)==(-1);
     if ($26) {
      $27 = HEAP32[$0>>2]|0;
      $28 = HEAP32[$27>>2]|0;
      $29 = (($28) + -12|0);
      $30 = HEAP32[$29>>2]|0;
      $$sum4 = (($30) + 16)|0;
      $31 = (($27) + ($$sum4)|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = $32 | 1;
      HEAP32[$31>>2] = $33;
     }
    }
   }
  }
 }
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$byval_copy = 0, $$sum = 0, $$sum$i = 0, $$sum3 = 0, $$sum4 = 0, $$sum6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $__s = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s,$this);
 $3 = HEAP8[$__s>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if (!($4)) {
  $5 = HEAP32[$this>>2]|0;
  $6 = (($5) + -12|0);
  $7 = HEAP32[$6>>2]|0;
  $$sum = (($7) + 28)|0;
  $8 = (($this) + ($$sum)|0);
  __ZNSt3__16localeC2ERKS0_($1,$8);
  $9 = (__ZNKSt3__16locale9use_facetERNS0_2idE($1,5232)|0);
  __ZNSt3__16localeD2Ev($1);
  $10 = HEAP32[$this>>2]|0;
  $11 = (($10) + -12|0);
  $12 = HEAP32[$11>>2]|0;
  $$sum$i = (($12) + 24)|0;
  $13 = (($this) + ($$sum$i)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($this) + ($12)|0);
  $$sum3 = (($12) + 76)|0;
  $16 = (($this) + ($$sum3)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(-1);
  if ($18) {
   $$sum6 = (($12) + 28)|0;
   $19 = (($this) + ($$sum6)|0);
   __ZNSt3__16localeC2ERKS0_($$byval_copy,$19);
   $20 = (__ZNKSt3__16locale9use_facetERNS0_2idE($$byval_copy,6704)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + 28|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (FUNCTION_TABLE_iii[$23 & 15]($20,32)|0);
   __ZNSt3__16localeD2Ev($$byval_copy);
   $25 = $24 << 24 >> 24;
   HEAP32[$16>>2] = $25;
   $27 = $25;
  } else {
   $27 = $17;
  }
  $26 = $27&255;
  $28 = HEAP32[$9>>2]|0;
  $29 = (($28) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  HEAP32[$0>>2] = $14;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$30 & 15]($2,$9,$$byval_copy,$15,$26,$__n);
  $31 = HEAP32[$2>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $33 = HEAP32[$this>>2]|0;
   $34 = (($33) + -12|0);
   $35 = HEAP32[$34>>2]|0;
   $$sum4 = (($35) + 16)|0;
   $36 = (($this) + ($$sum4)|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $37 | 5;
   HEAP32[$36>>2] = $38;
  }
 }
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + -8|0);
 $1 = (($0) + 12|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}
function __ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 12)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 return;
}
function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + -8|0);
 __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($0);
 return;
}
function __ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($3);
 return;
}
function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 | 1;
 HEAP32[$0>>2] = $2;
 return;
}
function __ZNSt3__17collateIcED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$02$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$01 = $__lo2;$$02 = $__lo1;
 while(1) {
  $0 = ($$01|0)==($__hi2|0);
  if ($0) {
   $$02$lcssa = $$02;
   label = 7;
   break;
  }
  $1 = ($$02|0)==($__hi1|0);
  if ($1) {
   $$0 = -1;
   break;
  }
  $2 = HEAP8[$$02>>0]|0;
  $3 = HEAP8[$$01>>0]|0;
  $4 = ($2<<24>>24)<($3<<24>>24);
  if ($4) {
   $$0 = -1;
   break;
  }
  $5 = ($3<<24>>24)<($2<<24>>24);
  if ($5) {
   $$0 = 1;
   break;
  }
  $6 = (($$02) + 1|0);
  $7 = (($$01) + 1|0);
  $$01 = $7;$$02 = $6;
 }
 if ((label|0) == 7) {
  $8 = ($$02$lcssa|0)!=($__hi1|0);
  $9 = $8&1;
  $$0 = $9;
 }
 return ($$0|0);
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 return;
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0 = 0, $__h$0$lcssa = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__h$0 = 0;$__p$0 = $__lo;
 while(1) {
  $0 = ($__p$0|0)==($__hi|0);
  if ($0) {
   $__h$0$lcssa = $__h$0;
   break;
  }
  $1 = $__h$0 << 4;
  $2 = HEAP8[$__p$0>>0]|0;
  $3 = $2 << 24 >> 24;
  $4 = (($3) + ($1))|0;
  $5 = $4 & -268435456;
  $6 = $5 >>> 24;
  $7 = $6 | $5;
  $8 = $7 ^ $4;
  $9 = (($__p$0) + 1|0);
  $__h$0 = $8;$__p$0 = $9;
 }
 return ($__h$0$lcssa|0);
}
function __ZNSt3__17collateIwED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$02$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$01 = $__lo2;$$02 = $__lo1;
 while(1) {
  $0 = ($$01|0)==($__hi2|0);
  if ($0) {
   $$02$lcssa = $$02;
   label = 7;
   break;
  }
  $1 = ($$02|0)==($__hi1|0);
  if ($1) {
   $$0 = -1;
   break;
  }
  $2 = HEAP32[$$02>>2]|0;
  $3 = HEAP32[$$01>>2]|0;
  $4 = ($2|0)<($3|0);
  if ($4) {
   $$0 = -1;
   break;
  }
  $5 = ($3|0)<($2|0);
  if ($5) {
   $$0 = 1;
   break;
  }
  $6 = (($$02) + 4|0);
  $7 = (($$01) + 4|0);
  $$01 = $7;$$02 = $6;
 }
 if ((label|0) == 7) {
  $8 = ($$02$lcssa|0)!=($__hi1|0);
  $9 = $8&1;
  $$0 = $9;
 }
 return ($$0|0);
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 return;
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__h$0 = 0, $__h$0$lcssa = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__h$0 = 0;$__p$0 = $__lo;
 while(1) {
  $0 = ($__p$0|0)==($__hi|0);
  if ($0) {
   $__h$0$lcssa = $__h$0;
   break;
  }
  $1 = $__h$0 << 4;
  $2 = HEAP32[$__p$0>>2]|0;
  $3 = (($2) + ($1))|0;
  $4 = $3 & -268435456;
  $5 = $4 >>> 24;
  $6 = $5 | $4;
  $7 = $6 ^ $3;
  $8 = (($__p$0) + 4|0);
  $__h$0 = $7;$__p$0 = $8;
 }
 return ($__h$0$lcssa|0);
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $$byval_copy2 = sp + 60|0;
 $$byval_copy = sp + 56|0;
 $__lv = sp + 52|0;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $4 = sp + 32|0;
 $__names = sp + 8|0;
 $5 = sp;
 $6 = (($__iob) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$__lv>>2] = -1;
  $10 = HEAP32[$this>>2]|0;
  $11 = (($10) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$__b>>2]|0;
  HEAP32[$1>>2] = $13;
  $14 = HEAP32[$__e>>2]|0;
  HEAP32[$2>>2] = $14;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$2+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$12 & 63]($0,$this,$$byval_copy,$$byval_copy2,$__iob,$__err,$__lv);
  $15 = HEAP32[$0>>2]|0;
  HEAP32[$__b>>2] = $15;
  $16 = HEAP32[$__lv>>2]|0;
  if ((($16|0) == 0)) {
   HEAP8[$__v>>0] = 0;
  } else if ((($16|0) == 1)) {
   HEAP8[$__v>>0] = 1;
  } else {
   HEAP8[$__v>>0] = 1;
   HEAP32[$__err>>2] = 4;
  }
  HEAP32[$agg$result>>2] = $15;
 } else {
  __ZNKSt3__18ios_base6getlocEv($3,$__iob);
  $17 = (__ZNKSt3__16locale9use_facetERNS0_2idE($3,6704)|0);
  $18 = HEAP32[$3>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($18)|0);
  __ZNKSt3__18ios_base6getlocEv($4,$__iob);
  $19 = (__ZNKSt3__16locale9use_facetERNS0_2idE($4,6848)|0);
  $20 = HEAP32[$4>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
  $21 = HEAP32[$19>>2]|0;
  $22 = (($21) + 24|0);
  $23 = HEAP32[$22>>2]|0;
  FUNCTION_TABLE_vii[$23 & 63]($__names,$19);
  $24 = (($__names) + 12|0);
  $25 = HEAP32[$19>>2]|0;
  $26 = (($25) + 28|0);
  $27 = HEAP32[$26>>2]|0;
  FUNCTION_TABLE_vii[$27 & 63]($24,$19);
  $28 = HEAP32[$__e>>2]|0;
  HEAP32[$5>>2] = $28;
  $29 = (($__names) + 24|0);
  ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
  $30 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy2,$__names,$29,$17,$__err,1)|0);
  $31 = ($30|0)==($__names|0);
  $32 = $31&1;
  HEAP8[$__v>>0] = $32;
  $33 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $33;
  $34 = (($__names) + 12|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($34);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__names);
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre21 = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__i$0$i$i1 = 0;
 var $exitcond$i$i = 0, $exitcond$i$i2 = 0, $phitmp$i = 0, $phitmp$i14 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $vararg_buffer = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 196|0;
 $0 = sp + 192|0;
 $__buf = sp + 180|0;
 $__a_end = sp + 176|0;
 $__g = sp + 16|0;
 $__g_end = sp + 8|0;
 $__dc = sp + 4|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__grouping) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,6704)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 (FUNCTION_TABLE_iiiii[$6 & 7]($3,5056,((5056 + 26|0)),$__atoms)|0);
 $7 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
 $__i$0$i$i1 = 0;
 while(1) {
  $exitcond$i$i2 = ($__i$0$i$i1|0)==(3);
  if ($exitcond$i$i2) {
   break;
  }
  $8 = (($__buf) + ($__i$0$i$i1<<2)|0);
  HEAP32[$8>>2] = 0;
  $9 = (($__i$0$i$i1) + 1)|0;
  $__i$0$i$i1 = $9;
 }
 $10 = HEAP8[$__buf>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = 10;
 } else {
  $13 = HEAP32[$__buf>>2]|0;
  $14 = $13 & -2;
  $phitmp$i = (($14) + -1)|0;
  $15 = $phitmp$i;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$15,0);
 $16 = HEAP8[$__buf>>0]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  $21 = (($__buf) + 1|0);
  $$pre23 = (($__buf) + 8|0);
  $$pre$phi22Z2D = $21;$$pre$phi24Z2D = $$pre23;$22 = $21;
 } else {
  $19 = (($__buf) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $$pre21 = (($__buf) + 1|0);
  $$pre$phi22Z2D = $$pre21;$$pre$phi24Z2D = $19;$22 = $20;
 }
 HEAP32[$__a_end>>2] = $22;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $23 = (($__buf) + 4|0);
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i5 = $$pre;$__a$0 = $22;
 L16: while(1) {
  $24 = ($$pre$i$i$i5|0)==(0|0);
  if ($24) {
   $35 = 0;
  } else {
   $25 = (($$pre$i$i$i5) + 12|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($$pre$i$i$i5) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($26|0)==($28|0);
   if ($29) {
    $30 = HEAP32[$$pre$i$i$i5>>2]|0;
    $31 = (($30) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (FUNCTION_TABLE_ii[$32 & 63]($$pre$i$i$i5)|0);
    $34 = ($33|0)==(-1);
    if ($34) {
     HEAP32[$__b>>2] = 0;
     $35 = 0;
    } else {
     $35 = $$pre$i$i$i5;
    }
   } else {
    $35 = $$pre$i$i$i5;
   }
  }
  $36 = ($35|0)==(0|0);
  $37 = HEAP32[$__e>>2]|0;
  $38 = ($37|0)==(0|0);
  do {
   if ($38) {
    label = 22;
   } else {
    $39 = (($37) + 12|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($37) + 16|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($40|0)==($42|0);
    if (!($43)) {
     if ($36) {
      $138 = $37;
      break;
     } else {
      $$lcssa = $35;$$pre$i2$i$i = $37;$__a$2 = $__a$0;
      break L16;
     }
    }
    $44 = HEAP32[$37>>2]|0;
    $45 = (($44) + 36|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (FUNCTION_TABLE_ii[$46 & 63]($37)|0);
    $48 = ($47|0)==(-1);
    if ($48) {
     HEAP32[$__e>>2] = 0;
     label = 22;
     break;
    } else {
     if ($36) {
      $138 = $37;
      break;
     } else {
      $$lcssa = $35;$$pre$i2$i$i = $37;$__a$2 = $__a$0;
      break L16;
     }
    }
   }
  } while(0);
  if ((label|0) == 22) {
   label = 0;
   if ($36) {
    $$lcssa = $35;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $138 = 0;
   }
  }
  $49 = HEAP32[$__a_end>>2]|0;
  $50 = HEAP8[$__buf>>0]|0;
  $51 = $50 & 1;
  $52 = ($51<<24>>24)==(0);
  if ($52) {
   $54 = $50&255;
   $55 = $54 >>> 1;
   $57 = $55;
  } else {
   $53 = HEAP32[$23>>2]|0;
   $57 = $53;
  }
  $56 = (($__a$0) + ($57)|0);
  $58 = ($49|0)==($56|0);
  if ($58) {
   if ($52) {
    $60 = $50&255;
    $61 = $60 >>> 1;
    $62 = $50&255;
    $63 = $62 >>> 1;
    $65 = $63;$78 = $61;
   } else {
    $59 = HEAP32[$23>>2]|0;
    $65 = $59;$78 = $59;
   }
   $64 = $65 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$64,0);
   $66 = HEAP8[$__buf>>0]|0;
   $67 = $66 & 1;
   $68 = ($67<<24>>24)==(0);
   if ($68) {
    $71 = 10;
   } else {
    $69 = HEAP32[$__buf>>2]|0;
    $70 = $69 & -2;
    $phitmp$i14 = (($70) + -1)|0;
    $71 = $phitmp$i14;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$71,0);
   $72 = HEAP8[$__buf>>0]|0;
   $73 = $72 & 1;
   $74 = ($73<<24>>24)==(0);
   if ($74) {
    $77 = $$pre$phi22Z2D;
   } else {
    $75 = HEAP32[$$pre$phi24Z2D>>2]|0;
    $77 = $75;
   }
   $76 = (($77) + ($78)|0);
   HEAP32[$__a_end>>2] = $76;
   $__a$1 = $77;
  } else {
   $__a$1 = $__a$0;
  }
  $79 = (($35) + 12|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (($35) + 16|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($80|0)==($82|0);
  if ($83) {
   $84 = HEAP32[$35>>2]|0;
   $85 = (($84) + 36|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (FUNCTION_TABLE_ii[$86 & 63]($35)|0);
   $$0$i$i = $87;
  } else {
   $88 = HEAP8[$80>>0]|0;
   $89 = $88&255;
   $$0$i$i = $89;
  }
  $90 = $$0$i$i&255;
  $91 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($90,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
  $92 = ($91|0)==(0);
  if (!($92)) {
   $$lcssa = $35;$$pre$i2$i$i = $138;$__a$2 = $__a$1;
   break;
  }
  $93 = HEAP32[$79>>2]|0;
  $94 = HEAP32[$81>>2]|0;
  $95 = ($93|0)==($94|0);
  if ($95) {
   $96 = HEAP32[$35>>2]|0;
   $97 = (($96) + 40|0);
   $98 = HEAP32[$97>>2]|0;
   (FUNCTION_TABLE_ii[$98 & 63]($35)|0);
   $$pre$i$i$i5 = $35;$__a$0 = $__a$1;
   continue;
  } else {
   $99 = (($93) + 1|0);
   HEAP32[$79>>2] = $99;
   $$pre$i$i$i5 = $35;$__a$0 = $__a$1;
   continue;
  }
 }
 $100 = HEAP32[$__a_end>>2]|0;
 $101 = $100;
 $102 = $__a$2;
 $103 = (($101) - ($102))|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$103,0);
 $104 = HEAP8[$__buf>>0]|0;
 $105 = $104 & 1;
 $106 = ($105<<24>>24)==(0);
 if ($106) {
  $109 = $$pre$phi22Z2D;
 } else {
  $107 = HEAP32[$$pre$phi24Z2D>>2]|0;
  $109 = $107;
 }
 $108 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $110 = (__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($109,$108,5096,$vararg_buffer)|0);
 $111 = ($110|0)==(1);
 if (!($111)) {
  HEAP32[$__err>>2] = 4;
 }
 $112 = ($$lcssa|0)==(0|0);
 if ($112) {
  $123 = 0;
 } else {
  $113 = (($$lcssa) + 12|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($$lcssa) + 16|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ($114|0)==($116|0);
  if ($117) {
   $118 = HEAP32[$$lcssa>>2]|0;
   $119 = (($118) + 36|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (FUNCTION_TABLE_ii[$120 & 63]($$lcssa)|0);
   $122 = ($121|0)==(-1);
   if ($122) {
    HEAP32[$__b>>2] = 0;
    $123 = 0;
   } else {
    $123 = $$lcssa;
   }
  } else {
   $123 = $$lcssa;
  }
 }
 $124 = ($123|0)==(0|0);
 $125 = ($$pre$i2$i$i|0)==(0|0);
 do {
  if ($125) {
   label = 56;
  } else {
   $126 = (($$pre$i2$i$i) + 12|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($$pre$i2$i$i) + 16|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if ($130) {
    $131 = HEAP32[$$pre$i2$i$i>>2]|0;
    $132 = (($131) + 36|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (FUNCTION_TABLE_ii[$133 & 63]($$pre$i2$i$i)|0);
    $135 = ($134|0)==(-1);
    if ($135) {
     HEAP32[$__e>>2] = 0;
     label = 56;
     break;
    }
   }
   if (!($124)) {
    label = 57;
   }
  }
 } while(0);
 if ((label|0) == 56) {
  if ($124) {
   label = 57;
  }
 }
 if ((label|0) == 57) {
  $136 = HEAP32[$__err>>2]|0;
  $137 = $136 | 2;
  HEAP32[$__err>>2] = $137;
 }
 HEAP32[$agg$result>>2] = $123;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 24|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==($__ct<<24>>24);
   if (!($4)) {
    $5 = (($__atoms) + 25|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==($__ct<<24>>24);
    if (!($7)) {
     label = 5;
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
  } else {
   label = 5;
  }
 } while(0);
 do {
  if ((label|0) == 5) {
   $10 = HEAP8[$__grouping>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    $15 = $10&255;
    $16 = $15 >>> 1;
    $17 = $16;
   } else {
    $13 = (($__grouping) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $17 = $14;
   }
   $18 = ($17|0)!=(0);
   $19 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
   $or$cond = $19 & $18;
   if ($or$cond) {
    $20 = HEAP32[$__g_end>>2]|0;
    $21 = $20;
    $22 = $__g;
    $23 = (($21) - ($22))|0;
    $24 = ($23|0)<(160);
    if (!($24)) {
     $$0 = 0;
     break;
    }
    $25 = HEAP32[$__dc>>2]|0;
    $26 = (($20) + 4|0);
    HEAP32[$__g_end>>2] = $26;
    HEAP32[$20>>2] = $25;
    HEAP32[$__dc>>2] = 0;
    $$0 = 0;
    break;
   }
   $27 = (($__atoms) + 26|0);
   $$0$i = $__atoms;
   while(1) {
    $28 = ($$0$i|0)==($27|0);
    if ($28) {
     $$0$lcssa$i = $27;
     break;
    }
    $29 = HEAP8[$$0$i>>0]|0;
    $30 = ($29<<24>>24)==($__ct<<24>>24);
    if ($30) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $31 = (($$0$i) + 1|0);
    $$0$i = $31;
   }
   $32 = $$0$lcssa$i;
   $33 = $__atoms;
   $34 = (($32) - ($33))|0;
   $35 = ($34|0)>(23);
   if ($35) {
    $$0 = -1;
   } else {
    if ((($__base|0) == 10) | (($__base|0) == 8)) {
     $36 = ($34|0)<($__base|0);
     if (!($36)) {
      $$0 = -1;
      break;
     }
    } else if ((($__base|0) == 16)) {
     $37 = ($34|0)<(22);
     if (!($37)) {
      if ($1) {
       $$0 = -1;
       break;
      }
      $38 = $0;
      $39 = $__a;
      $40 = (($38) - ($39))|0;
      $41 = ($40|0)<(3);
      if (!($41)) {
       $$0 = -1;
       break;
      }
      $42 = (($0) + -1|0);
      $43 = HEAP8[$42>>0]|0;
      $44 = ($43<<24>>24)==(48);
      if (!($44)) {
       $$0 = -1;
       break;
      }
      HEAP32[$__dc>>2] = 0;
      $45 = (5056 + ($34)|0);
      $46 = HEAP8[$45>>0]|0;
      $47 = (($0) + 1|0);
      HEAP32[$__a_end>>2] = $47;
      HEAP8[$0>>0] = $46;
      $$0 = 0;
      break;
     }
    }
    $48 = (5056 + ($34)|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = (($0) + 1|0);
    HEAP32[$__a_end>>2] = $50;
    HEAP8[$0>>0] = $49;
    $51 = HEAP32[$__dc>>2]|0;
    $52 = (($51) + 1)|0;
    HEAP32[$__dc>>2] = $52;
    $$0 = 0;
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__16__clocEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6600>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((6600|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = (_newlocale(2147483647,(6608|0),(0|0))|0);
   HEAP32[6592>>2] = $4;
   ___cxa_guard_release((6600|0));
  }
 }
 $5 = HEAP32[6592>>2]|0;
 return ($5|0);
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $$byval_copy2 = sp + 60|0;
 $$byval_copy = sp + 56|0;
 $__lv = sp + 52|0;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $4 = sp + 32|0;
 $__names = sp + 8|0;
 $5 = sp;
 $6 = (($__iob) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$__lv>>2] = -1;
  $10 = HEAP32[$this>>2]|0;
  $11 = (($10) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$__b>>2]|0;
  HEAP32[$1>>2] = $13;
  $14 = HEAP32[$__e>>2]|0;
  HEAP32[$2>>2] = $14;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$2+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$12 & 63]($0,$this,$$byval_copy,$$byval_copy2,$__iob,$__err,$__lv);
  $15 = HEAP32[$0>>2]|0;
  HEAP32[$__b>>2] = $15;
  $16 = HEAP32[$__lv>>2]|0;
  if ((($16|0) == 1)) {
   HEAP8[$__v>>0] = 1;
  } else if ((($16|0) == 0)) {
   HEAP8[$__v>>0] = 0;
  } else {
   HEAP8[$__v>>0] = 1;
   HEAP32[$__err>>2] = 4;
  }
  HEAP32[$agg$result>>2] = $15;
 } else {
  __ZNKSt3__18ios_base6getlocEv($3,$__iob);
  $17 = (__ZNKSt3__16locale9use_facetERNS0_2idE($3,6696)|0);
  $18 = HEAP32[$3>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($18)|0);
  __ZNKSt3__18ios_base6getlocEv($4,$__iob);
  $19 = (__ZNKSt3__16locale9use_facetERNS0_2idE($4,6856)|0);
  $20 = HEAP32[$4>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
  $21 = HEAP32[$19>>2]|0;
  $22 = (($21) + 24|0);
  $23 = HEAP32[$22>>2]|0;
  FUNCTION_TABLE_vii[$23 & 63]($__names,$19);
  $24 = (($__names) + 12|0);
  $25 = HEAP32[$19>>2]|0;
  $26 = (($25) + 28|0);
  $27 = HEAP32[$26>>2]|0;
  FUNCTION_TABLE_vii[$27 & 63]($24,$19);
  $28 = HEAP32[$__e>>2]|0;
  HEAP32[$5>>2] = $28;
  $29 = (($__names) + 24|0);
  ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
  $30 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy2,$__names,$29,$17,$__err,1)|0);
  $31 = ($30|0)==($__names|0);
  $32 = $31&1;
  HEAP8[$__v>>0] = $32;
  $33 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $33;
  $34 = (($__names) + 12|0);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($34);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__names);
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $$pre$phi25Z2D = 0, $$pre$phi27Z2D = 0, $$pre24 = 0, $$pre26 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0;
 var $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__i$0$i$i1 = 0, $exitcond$i$i = 0, $exitcond$i$i2 = 0, $phitmp$i = 0, $phitmp$i18 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $vararg_buffer = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 196|0;
 $0 = sp + 192|0;
 $__buf = sp + 180|0;
 $__a_end = sp + 176|0;
 $__g = sp + 16|0;
 $__g_end = sp + 8|0;
 $__dc = sp + 4|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__grouping) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,6696)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 (FUNCTION_TABLE_iiiii[$6 & 7]($3,5056,((5056 + 26|0)),$__atoms)|0);
 $7 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
 $__i$0$i$i1 = 0;
 while(1) {
  $exitcond$i$i2 = ($__i$0$i$i1|0)==(3);
  if ($exitcond$i$i2) {
   break;
  }
  $8 = (($__buf) + ($__i$0$i$i1<<2)|0);
  HEAP32[$8>>2] = 0;
  $9 = (($__i$0$i$i1) + 1)|0;
  $__i$0$i$i1 = $9;
 }
 $10 = HEAP8[$__buf>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = 10;
 } else {
  $13 = HEAP32[$__buf>>2]|0;
  $14 = $13 & -2;
  $phitmp$i = (($14) + -1)|0;
  $15 = $phitmp$i;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$15,0);
 $16 = HEAP8[$__buf>>0]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  $21 = (($__buf) + 1|0);
  $$pre26 = (($__buf) + 8|0);
  $$pre$phi25Z2D = $21;$$pre$phi27Z2D = $$pre26;$22 = $21;
 } else {
  $19 = (($__buf) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $$pre24 = (($__buf) + 1|0);
  $$pre$phi25Z2D = $$pre24;$$pre$phi27Z2D = $19;$22 = $20;
 }
 HEAP32[$__a_end>>2] = $22;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $23 = (($__buf) + 4|0);
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i6 = $$pre;$__a$0 = $22;
 L16: while(1) {
  $24 = ($$pre$i$i$i6|0)==(0|0);
  if ($24) {
   $138 = 1;$80 = 0;
  } else {
   $25 = (($$pre$i$i$i6) + 12|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($$pre$i$i$i6) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($26|0)==($28|0);
   if ($29) {
    $30 = HEAP32[$$pre$i$i$i6>>2]|0;
    $31 = (($30) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (FUNCTION_TABLE_ii[$32 & 63]($$pre$i$i$i6)|0);
    $$0$i$i$i$i4 = $33;
   } else {
    $34 = HEAP32[$26>>2]|0;
    $$0$i$i$i$i4 = $34;
   }
   $35 = ($$0$i$i$i$i4|0)==(-1);
   if ($35) {
    HEAP32[$__b>>2] = 0;
    $138 = 1;$80 = 0;
   } else {
    $138 = 0;$80 = $$pre$i$i$i6;
   }
  }
  $36 = HEAP32[$__e>>2]|0;
  $37 = ($36|0)==(0|0);
  do {
   if ($37) {
    label = 25;
   } else {
    $38 = (($36) + 12|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (($36) + 16|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ($39|0)==($41|0);
    if ($42) {
     $43 = HEAP32[$36>>2]|0;
     $44 = (($43) + 36|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = (FUNCTION_TABLE_ii[$45 & 63]($36)|0);
     $$0$i$i1$i$i10 = $46;
    } else {
     $47 = HEAP32[$39>>2]|0;
     $$0$i$i1$i$i10 = $47;
    }
    $48 = ($$0$i$i1$i$i10|0)==(-1);
    if ($48) {
     HEAP32[$__e>>2] = 0;
     label = 25;
     break;
    } else {
     if ($138) {
      $139 = $36;
      break;
     } else {
      $$lcssa = $80;$$pre$i3$i$i = $36;$__a$2 = $__a$0;
      break L16;
     }
    }
   }
  } while(0);
  if ((label|0) == 25) {
   label = 0;
   if ($138) {
    $$lcssa = $80;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $139 = 0;
   }
  }
  $49 = HEAP32[$__a_end>>2]|0;
  $50 = HEAP8[$__buf>>0]|0;
  $51 = $50 & 1;
  $52 = ($51<<24>>24)==(0);
  if ($52) {
   $54 = $50&255;
   $55 = $54 >>> 1;
   $57 = $55;
  } else {
   $53 = HEAP32[$23>>2]|0;
   $57 = $53;
  }
  $56 = (($__a$0) + ($57)|0);
  $58 = ($49|0)==($56|0);
  if ($58) {
   if ($52) {
    $60 = $50&255;
    $61 = $60 >>> 1;
    $62 = $50&255;
    $63 = $62 >>> 1;
    $65 = $63;$78 = $61;
   } else {
    $59 = HEAP32[$23>>2]|0;
    $65 = $59;$78 = $59;
   }
   $64 = $65 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$64,0);
   $66 = HEAP8[$__buf>>0]|0;
   $67 = $66 & 1;
   $68 = ($67<<24>>24)==(0);
   if ($68) {
    $71 = 10;
   } else {
    $69 = HEAP32[$__buf>>2]|0;
    $70 = $69 & -2;
    $phitmp$i18 = (($70) + -1)|0;
    $71 = $phitmp$i18;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$71,0);
   $72 = HEAP8[$__buf>>0]|0;
   $73 = $72 & 1;
   $74 = ($73<<24>>24)==(0);
   if ($74) {
    $77 = $$pre$phi25Z2D;
   } else {
    $75 = HEAP32[$$pre$phi27Z2D>>2]|0;
    $77 = $75;
   }
   $76 = (($77) + ($78)|0);
   HEAP32[$__a_end>>2] = $76;
   $__a$1 = $77;
  } else {
   $__a$1 = $__a$0;
  }
  $79 = (($80) + 12|0);
  $81 = HEAP32[$79>>2]|0;
  $82 = (($80) + 16|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($81|0)==($83|0);
  if ($84) {
   $85 = HEAP32[$80>>2]|0;
   $86 = (($85) + 36|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (FUNCTION_TABLE_ii[$87 & 63]($80)|0);
   $$0$i$i = $88;
  } else {
   $89 = HEAP32[$81>>2]|0;
   $$0$i$i = $89;
  }
  $90 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
  $91 = ($90|0)==(0);
  if (!($91)) {
   $$lcssa = $80;$$pre$i3$i$i = $139;$__a$2 = $__a$1;
   break;
  }
  $92 = HEAP32[$79>>2]|0;
  $93 = HEAP32[$82>>2]|0;
  $94 = ($92|0)==($93|0);
  if ($94) {
   $95 = HEAP32[$80>>2]|0;
   $96 = (($95) + 40|0);
   $97 = HEAP32[$96>>2]|0;
   (FUNCTION_TABLE_ii[$97 & 63]($80)|0);
   $$pre$i$i$i6 = $80;$__a$0 = $__a$1;
   continue;
  } else {
   $98 = (($92) + 4|0);
   HEAP32[$79>>2] = $98;
   $$pre$i$i$i6 = $80;$__a$0 = $__a$1;
   continue;
  }
 }
 $99 = HEAP32[$__a_end>>2]|0;
 $100 = $99;
 $101 = $__a$2;
 $102 = (($100) - ($101))|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$102,0);
 $103 = HEAP8[$__buf>>0]|0;
 $104 = $103 & 1;
 $105 = ($104<<24>>24)==(0);
 if ($105) {
  $108 = $$pre$phi25Z2D;
 } else {
  $106 = HEAP32[$$pre$phi27Z2D>>2]|0;
  $108 = $106;
 }
 $107 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $109 = (__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($108,$107,5096,$vararg_buffer)|0);
 $110 = ($109|0)==(1);
 if (!($110)) {
  HEAP32[$__err>>2] = 4;
 }
 $111 = ($$lcssa|0)==(0|0);
 if ($111) {
  $137 = 0;$140 = 1;
 } else {
  $112 = (($$lcssa) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($$lcssa) + 16|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($113|0)==($115|0);
  if ($116) {
   $117 = HEAP32[$$lcssa>>2]|0;
   $118 = (($117) + 36|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (FUNCTION_TABLE_ii[$119 & 63]($$lcssa)|0);
   $$0$i$i$i$i = $120;
  } else {
   $121 = HEAP32[$113>>2]|0;
   $$0$i$i$i$i = $121;
  }
  $122 = ($$0$i$i$i$i|0)==(-1);
  if ($122) {
   HEAP32[$__b>>2] = 0;
   $137 = 0;$140 = 1;
  } else {
   $137 = $$lcssa;$140 = 0;
  }
 }
 $123 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($123) {
   label = 62;
  } else {
   $124 = (($$pre$i3$i$i) + 12|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (($$pre$i3$i$i) + 16|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ($125|0)==($127|0);
   if ($128) {
    $129 = HEAP32[$$pre$i3$i$i>>2]|0;
    $130 = (($129) + 36|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (FUNCTION_TABLE_ii[$131 & 63]($$pre$i3$i$i)|0);
    $$0$i$i1$i$i = $132;
   } else {
    $133 = HEAP32[$125>>2]|0;
    $$0$i$i1$i$i = $133;
   }
   $134 = ($$0$i$i1$i$i|0)==(-1);
   if ($134) {
    HEAP32[$__e>>2] = 0;
    label = 62;
    break;
   } else {
    if ($140) {
     break;
    } else {
     label = 64;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 62) {
  if ($140) {
   label = 64;
  }
 }
 if ((label|0) == 64) {
  $135 = HEAP32[$__err>>2]|0;
  $136 = $135 | 2;
  HEAP32[$__err>>2] = $136;
 }
 HEAP32[$agg$result>>2] = $137;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 96|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==($__ct|0);
   if (!($4)) {
    $5 = (($__atoms) + 100|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==($__ct|0);
    if (!($7)) {
     label = 5;
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
  } else {
   label = 5;
  }
 } while(0);
 do {
  if ((label|0) == 5) {
   $10 = HEAP8[$__grouping>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    $15 = $10&255;
    $16 = $15 >>> 1;
    $17 = $16;
   } else {
    $13 = (($__grouping) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $17 = $14;
   }
   $18 = ($17|0)!=(0);
   $19 = ($__ct|0)==($__thousands_sep|0);
   $or$cond = $19 & $18;
   if ($or$cond) {
    $20 = HEAP32[$__g_end>>2]|0;
    $21 = $20;
    $22 = $__g;
    $23 = (($21) - ($22))|0;
    $24 = ($23|0)<(160);
    if (!($24)) {
     $$0 = 0;
     break;
    }
    $25 = HEAP32[$__dc>>2]|0;
    $26 = (($20) + 4|0);
    HEAP32[$__g_end>>2] = $26;
    HEAP32[$20>>2] = $25;
    HEAP32[$__dc>>2] = 0;
    $$0 = 0;
    break;
   }
   $27 = (($__atoms) + 104|0);
   $$0$i = $__atoms;
   while(1) {
    $28 = ($$0$i|0)==($27|0);
    if ($28) {
     $$0$lcssa$i = $27;
     break;
    }
    $29 = HEAP32[$$0$i>>2]|0;
    $30 = ($29|0)==($__ct|0);
    if ($30) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $31 = (($$0$i) + 4|0);
    $$0$i = $31;
   }
   $32 = $$0$lcssa$i;
   $33 = $__atoms;
   $34 = (($32) - ($33))|0;
   $35 = $34 >> 2;
   $36 = ($34|0)>(92);
   if ($36) {
    $$0 = -1;
   } else {
    if ((($__base|0) == 16)) {
     $38 = ($34|0)<(88);
     if (!($38)) {
      if ($1) {
       $$0 = -1;
       break;
      }
      $39 = $0;
      $40 = $__a;
      $41 = (($39) - ($40))|0;
      $42 = ($41|0)<(3);
      if (!($42)) {
       $$0 = -1;
       break;
      }
      $43 = (($0) + -1|0);
      $44 = HEAP8[$43>>0]|0;
      $45 = ($44<<24>>24)==(48);
      if (!($45)) {
       $$0 = -1;
       break;
      }
      HEAP32[$__dc>>2] = 0;
      $46 = (5056 + ($35)|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = (($0) + 1|0);
      HEAP32[$__a_end>>2] = $48;
      HEAP8[$0>>0] = $47;
      $$0 = 0;
      break;
     }
    } else if ((($__base|0) == 10) | (($__base|0) == 8)) {
     $37 = ($35|0)<($__base|0);
     if (!($37)) {
      $$0 = -1;
      break;
     }
    }
    $49 = (5056 + ($35)|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = (($0) + 1|0);
    HEAP32[$__a_end>>2] = $51;
    HEAP8[$0>>0] = $50;
    $52 = HEAP32[$__dc>>2]|0;
    $53 = (($52) + 1)|0;
    HEAP32[$__dc>>2] = $53;
    $$0 = 0;
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6704)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 (FUNCTION_TABLE_iiiii[$3 & 7]($0,5056,((5056 + 26|0)),$__atoms)|0);
 $4 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6848)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 63]($4)|0);
 HEAP8[$__thousands_sep>>0] = $8;
 $9 = HEAP32[$4>>2]|0;
 $10 = (($9) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 FUNCTION_TABLE_vii[$11 & 63]($agg$result,$4);
 $12 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6704)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 (FUNCTION_TABLE_iiiii[$3 & 7]($0,5056,((5056 + 32|0)),$__atoms)|0);
 $4 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6848)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 63]($4)|0);
 HEAP8[$__decimal_point>>0] = $8;
 $9 = HEAP32[$4>>2]|0;
 $10 = (($9) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 63]($4)|0);
 HEAP8[$__thousands_sep>>0] = $12;
 $13 = HEAP32[$4>>2]|0;
 $14 = (($13) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 FUNCTION_TABLE_vii[$15 & 63]($agg$result,$4);
 $16 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct<<24>>24)==($__decimal_point<<24>>24);
 do {
  if ($0) {
   $1 = HEAP8[$__in_units>>0]|0;
   $2 = ($1<<24>>24)==(0);
   if ($2) {
    $$0 = -1;
   } else {
    HEAP8[$__in_units>>0] = 0;
    $3 = HEAP32[$__a_end>>2]|0;
    $4 = (($3) + 1|0);
    HEAP32[$__a_end>>2] = $4;
    HEAP8[$3>>0] = 46;
    $5 = HEAP8[$__grouping>>0]|0;
    $6 = $5 & 1;
    $7 = ($6<<24>>24)==(0);
    if ($7) {
     $10 = $5&255;
     $11 = $10 >>> 1;
     $12 = $11;
    } else {
     $8 = (($__grouping) + 4|0);
     $9 = HEAP32[$8>>2]|0;
     $12 = $9;
    }
    $13 = ($12|0)==(0);
    if ($13) {
     $$0 = 0;
    } else {
     $14 = HEAP32[$__g_end>>2]|0;
     $15 = $14;
     $16 = $__g;
     $17 = (($15) - ($16))|0;
     $18 = ($17|0)<(160);
     if ($18) {
      $19 = HEAP32[$__dc>>2]|0;
      $20 = (($14) + 4|0);
      HEAP32[$__g_end>>2] = $20;
      HEAP32[$14>>2] = $19;
      $$0 = 0;
     } else {
      $$0 = 0;
     }
    }
   }
  } else {
   $21 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
   if ($21) {
    $22 = HEAP8[$__grouping>>0]|0;
    $23 = $22 & 1;
    $24 = ($23<<24>>24)==(0);
    if ($24) {
     $27 = $22&255;
     $28 = $27 >>> 1;
     $29 = $28;
    } else {
     $25 = (($__grouping) + 4|0);
     $26 = HEAP32[$25>>2]|0;
     $29 = $26;
    }
    $30 = ($29|0)==(0);
    if (!($30)) {
     $31 = HEAP8[$__in_units>>0]|0;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $$0 = -1;
      break;
     }
     $33 = HEAP32[$__g_end>>2]|0;
     $34 = $33;
     $35 = $__g;
     $36 = (($34) - ($35))|0;
     $37 = ($36|0)<(160);
     if (!($37)) {
      $$0 = 0;
      break;
     }
     $38 = HEAP32[$__dc>>2]|0;
     $39 = (($33) + 4|0);
     HEAP32[$__g_end>>2] = $39;
     HEAP32[$33>>2] = $38;
     HEAP32[$__dc>>2] = 0;
     $$0 = 0;
     break;
    }
   }
   $40 = (($__atoms) + 32|0);
   $$0$i = $__atoms;
   while(1) {
    $41 = ($$0$i|0)==($40|0);
    if ($41) {
     $$0$lcssa$i = $40;
     break;
    }
    $42 = HEAP8[$$0$i>>0]|0;
    $43 = ($42<<24>>24)==($__ct<<24>>24);
    if ($43) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $44 = (($$0$i) + 1|0);
    $$0$i = $44;
   }
   $45 = $$0$lcssa$i;
   $46 = $__atoms;
   $47 = (($45) - ($46))|0;
   $48 = ($47|0)>(31);
   if ($48) {
    $$0 = -1;
   } else {
    $49 = (5056 + ($47)|0);
    $50 = HEAP8[$49>>0]|0;
    if ((($47|0) == 23) | (($47|0) == 22)) {
     HEAP8[$__exp>>0] = 80;
     $62 = HEAP32[$__a_end>>2]|0;
     $63 = (($62) + 1|0);
     HEAP32[$__a_end>>2] = $63;
     HEAP8[$62>>0] = $50;
     $$0 = 0;
     break;
    } else if ((($47|0) == 24) | (($47|0) == 25)) {
     $51 = HEAP32[$__a_end>>2]|0;
     $52 = ($51|0)==($__a|0);
     if (!($52)) {
      $53 = (($51) + -1|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = $54&255;
      $56 = $55 & 95;
      $57 = HEAP8[$__exp>>0]|0;
      $58 = $57&255;
      $59 = $58 & 127;
      $60 = ($56|0)==($59|0);
      if (!($60)) {
       $$0 = -1;
       break;
      }
     }
     $61 = (($51) + 1|0);
     HEAP32[$__a_end>>2] = $61;
     HEAP8[$51>>0] = $50;
     $$0 = 0;
     break;
    } else {
     $64 = $50&255;
     $65 = $64 & 95;
     $66 = HEAP8[$__exp>>0]|0;
     $67 = $66 << 24 >> 24;
     $68 = ($65|0)==($67|0);
     if ($68) {
      $69 = $65 | 128;
      $70 = $69&255;
      HEAP8[$__exp>>0] = $70;
      $71 = HEAP8[$__in_units>>0]|0;
      $72 = ($71<<24>>24)==(0);
      if (!($72)) {
       HEAP8[$__in_units>>0] = 0;
       $73 = HEAP8[$__grouping>>0]|0;
       $74 = $73 & 1;
       $75 = ($74<<24>>24)==(0);
       if ($75) {
        $78 = $73&255;
        $79 = $78 >>> 1;
        $80 = $79;
       } else {
        $76 = (($__grouping) + 4|0);
        $77 = HEAP32[$76>>2]|0;
        $80 = $77;
       }
       $81 = ($80|0)==(0);
       if (!($81)) {
        $82 = HEAP32[$__g_end>>2]|0;
        $83 = $82;
        $84 = $__g;
        $85 = (($83) - ($84))|0;
        $86 = ($85|0)<(160);
        if ($86) {
         $87 = HEAP32[$__dc>>2]|0;
         $88 = (($82) + 4|0);
         HEAP32[$__g_end>>2] = $88;
         HEAP32[$82>>2] = $87;
        }
       }
      }
     }
     $89 = HEAP32[$__a_end>>2]|0;
     $90 = (($89) + 1|0);
     HEAP32[$__a_end>>2] = $90;
     HEAP8[$89>>0] = $50;
     $91 = ($47|0)>(21);
     if ($91) {
      $$0 = 0;
      break;
     }
     $92 = HEAP32[$__dc>>2]|0;
     $93 = (($92) + 1)|0;
     HEAP32[$__dc>>2] = $93;
     $$0 = 0;
     break;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6696)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 (FUNCTION_TABLE_iiiii[$3 & 7]($0,5056,((5056 + 26|0)),$__atoms)|0);
 $4 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6856)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 63]($4)|0);
 HEAP32[$__thousands_sep>>2] = $8;
 $9 = HEAP32[$4>>2]|0;
 $10 = (($9) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 FUNCTION_TABLE_vii[$11 & 63]($agg$result,$4);
 $12 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6696)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 (FUNCTION_TABLE_iiiii[$3 & 7]($0,5056,((5056 + 32|0)),$__atoms)|0);
 $4 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6856)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 63]($4)|0);
 HEAP32[$__decimal_point>>2] = $8;
 $9 = HEAP32[$4>>2]|0;
 $10 = (($9) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 63]($4)|0);
 HEAP32[$__thousands_sep>>2] = $12;
 $13 = HEAP32[$4>>2]|0;
 $14 = (($13) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 FUNCTION_TABLE_vii[$15 & 63]($agg$result,$4);
 $16 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($16)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct|0)==($__decimal_point|0);
 do {
  if ($0) {
   $1 = HEAP8[$__in_units>>0]|0;
   $2 = ($1<<24>>24)==(0);
   if ($2) {
    $$0 = -1;
   } else {
    HEAP8[$__in_units>>0] = 0;
    $3 = HEAP32[$__a_end>>2]|0;
    $4 = (($3) + 1|0);
    HEAP32[$__a_end>>2] = $4;
    HEAP8[$3>>0] = 46;
    $5 = HEAP8[$__grouping>>0]|0;
    $6 = $5 & 1;
    $7 = ($6<<24>>24)==(0);
    if ($7) {
     $10 = $5&255;
     $11 = $10 >>> 1;
     $12 = $11;
    } else {
     $8 = (($__grouping) + 4|0);
     $9 = HEAP32[$8>>2]|0;
     $12 = $9;
    }
    $13 = ($12|0)==(0);
    if ($13) {
     $$0 = 0;
    } else {
     $14 = HEAP32[$__g_end>>2]|0;
     $15 = $14;
     $16 = $__g;
     $17 = (($15) - ($16))|0;
     $18 = ($17|0)<(160);
     if ($18) {
      $19 = HEAP32[$__dc>>2]|0;
      $20 = (($14) + 4|0);
      HEAP32[$__g_end>>2] = $20;
      HEAP32[$14>>2] = $19;
      $$0 = 0;
     } else {
      $$0 = 0;
     }
    }
   }
  } else {
   $21 = ($__ct|0)==($__thousands_sep|0);
   if ($21) {
    $22 = HEAP8[$__grouping>>0]|0;
    $23 = $22 & 1;
    $24 = ($23<<24>>24)==(0);
    if ($24) {
     $27 = $22&255;
     $28 = $27 >>> 1;
     $29 = $28;
    } else {
     $25 = (($__grouping) + 4|0);
     $26 = HEAP32[$25>>2]|0;
     $29 = $26;
    }
    $30 = ($29|0)==(0);
    if (!($30)) {
     $31 = HEAP8[$__in_units>>0]|0;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $$0 = -1;
      break;
     }
     $33 = HEAP32[$__g_end>>2]|0;
     $34 = $33;
     $35 = $__g;
     $36 = (($34) - ($35))|0;
     $37 = ($36|0)<(160);
     if (!($37)) {
      $$0 = 0;
      break;
     }
     $38 = HEAP32[$__dc>>2]|0;
     $39 = (($33) + 4|0);
     HEAP32[$__g_end>>2] = $39;
     HEAP32[$33>>2] = $38;
     HEAP32[$__dc>>2] = 0;
     $$0 = 0;
     break;
    }
   }
   $40 = (($__atoms) + 128|0);
   $$0$i = $__atoms;
   while(1) {
    $41 = ($$0$i|0)==($40|0);
    if ($41) {
     $$0$lcssa$i = $40;
     break;
    }
    $42 = HEAP32[$$0$i>>2]|0;
    $43 = ($42|0)==($__ct|0);
    if ($43) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $44 = (($$0$i) + 4|0);
    $$0$i = $44;
   }
   $45 = $$0$lcssa$i;
   $46 = $__atoms;
   $47 = (($45) - ($46))|0;
   $48 = $47 >> 2;
   $49 = ($47|0)>(124);
   if ($49) {
    $$0 = -1;
   } else {
    $50 = (5056 + ($48)|0);
    $51 = HEAP8[$50>>0]|0;
    if ((($48|0) == 23) | (($48|0) == 22)) {
     HEAP8[$__exp>>0] = 80;
    } else if ((($48|0) == 24) | (($48|0) == 25)) {
     $52 = HEAP32[$__a_end>>2]|0;
     $53 = ($52|0)==($__a|0);
     if (!($53)) {
      $54 = (($52) + -1|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55&255;
      $57 = $56 & 95;
      $58 = HEAP8[$__exp>>0]|0;
      $59 = $58&255;
      $60 = $59 & 127;
      $61 = ($57|0)==($60|0);
      if (!($61)) {
       $$0 = -1;
       break;
      }
     }
     $62 = (($52) + 1|0);
     HEAP32[$__a_end>>2] = $62;
     HEAP8[$52>>0] = $51;
     $$0 = 0;
     break;
    } else {
     $63 = $51&255;
     $64 = $63 & 95;
     $65 = HEAP8[$__exp>>0]|0;
     $66 = $65 << 24 >> 24;
     $67 = ($64|0)==($66|0);
     if ($67) {
      $68 = $64 | 128;
      $69 = $68&255;
      HEAP8[$__exp>>0] = $69;
      $70 = HEAP8[$__in_units>>0]|0;
      $71 = ($70<<24>>24)==(0);
      if (!($71)) {
       HEAP8[$__in_units>>0] = 0;
       $72 = HEAP8[$__grouping>>0]|0;
       $73 = $72 & 1;
       $74 = ($73<<24>>24)==(0);
       if ($74) {
        $77 = $72&255;
        $78 = $77 >>> 1;
        $79 = $78;
       } else {
        $75 = (($__grouping) + 4|0);
        $76 = HEAP32[$75>>2]|0;
        $79 = $76;
       }
       $80 = ($79|0)==(0);
       if (!($80)) {
        $81 = HEAP32[$__g_end>>2]|0;
        $82 = $81;
        $83 = $__g;
        $84 = (($82) - ($83))|0;
        $85 = ($84|0)<(160);
        if ($85) {
         $86 = HEAP32[$__dc>>2]|0;
         $87 = (($81) + 4|0);
         HEAP32[$__g_end>>2] = $87;
         HEAP32[$81>>2] = $86;
        }
       }
      }
     }
    }
    $88 = HEAP32[$__a_end>>2]|0;
    $89 = (($88) + 1|0);
    HEAP32[$__a_end>>2] = $89;
    HEAP8[$88>>0] = $51;
    $90 = ($47|0)>(84);
    if ($90) {
     $$0 = 0;
    } else {
     $91 = HEAP32[$__dc>>2]|0;
     $92 = (($91) + 1)|0;
     HEAP32[$__dc>>2] = $92;
     $$0 = 0;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi3Z2D = 0, $$pre$phi5Z2D = 0, $$pre2 = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__nm = sp;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$this>>2]|0;
  $7 = (($6) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$__s>>2]|0;
  HEAP32[$0>>2] = $9;
  $10 = $__v&1;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$8 & 15]($agg$result,$this,$$byval_copy,$__iob,$__fl,$10);
 } else {
  __ZNKSt3__18ios_base6getlocEv($1,$__iob);
  $11 = (__ZNKSt3__16locale9use_facetERNS0_2idE($1,6848)|0);
  $12 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
  $13 = HEAP32[$11>>2]|0;
  if ($__v) {
   $14 = (($13) + 24|0);
   $15 = HEAP32[$14>>2]|0;
   FUNCTION_TABLE_vii[$15 & 63]($__nm,$11);
  } else {
   $16 = (($13) + 28|0);
   $17 = HEAP32[$16>>2]|0;
   FUNCTION_TABLE_vii[$17 & 63]($__nm,$11);
  }
  $18 = HEAP8[$__nm>>0]|0;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   $23 = (($__nm) + 1|0);
   $$pre4 = (($__nm) + 8|0);
   $$ph = $23;$$pre$phi3Z2D = $23;$$pre$phi5Z2D = $$pre4;
  } else {
   $21 = (($__nm) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $$pre2 = (($__nm) + 1|0);
   $$ph = $22;$$pre$phi3Z2D = $$pre2;$$pre$phi5Z2D = $21;
  }
  $24 = (($__nm) + 4|0);
  $26 = $18;$35 = $$ph;
  while(1) {
   $25 = $26 & 1;
   $27 = ($25<<24>>24)==(0);
   if ($27) {
    $30 = $26&255;
    $31 = $30 >>> 1;
    $33 = $$pre$phi3Z2D;$34 = $31;
   } else {
    $28 = HEAP32[$$pre$phi5Z2D>>2]|0;
    $29 = HEAP32[$24>>2]|0;
    $33 = $28;$34 = $29;
   }
   $32 = (($33) + ($34)|0);
   $36 = ($35|0)==($32|0);
   if ($36) {
    break;
   }
   $37 = HEAP8[$35>>0]|0;
   $38 = HEAP32[$__s>>2]|0;
   $39 = ($38|0)==(0|0);
   do {
    if (!($39)) {
     $40 = (($38) + 24|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = (($38) + 28|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($41|0)==($43|0);
     if (!($44)) {
      $45 = (($41) + 1|0);
      HEAP32[$40>>2] = $45;
      HEAP8[$41>>0] = $37;
      break;
     }
     $46 = HEAP32[$38>>2]|0;
     $47 = (($46) + 52|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = $37&255;
     $50 = (FUNCTION_TABLE_iii[$48 & 15]($38,$49)|0);
     $51 = ($50|0)==(-1);
     if ($51) {
      HEAP32[$__s>>2] = 0;
     }
    }
   } while(0);
   $52 = (($35) + 1|0);
   $$pre = HEAP8[$__nm>>0]|0;
   $26 = $$pre;$35 = $52;
  }
  $53 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$result>>2] = $53;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nm);
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $$byval_copy = sp;
 $__fmt = sp + 56|0;
 $__nar = sp + 44|0;
 $__o = sp + 20|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[5336+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[5336+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[5336+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[5336+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[5336+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[5336+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,5240,1,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$$byval_copy>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$$byval_copy)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar,$8,$7,$__o,$__op,$__oe,$0);
 $9 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
 $10 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $10;
 $11 = HEAP32[$__op>>2]|0;
 $12 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$11,$12,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmtp,$__len,$__signd,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__signd = $__signd|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$1$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = (($__fmtp) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 if ($4) {
  $$01 = $__len;$$1 = $$0;
 } else {
  $5 = (($$0) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$01 = $__len;$$1 = $5;
 }
 while(1) {
  $6 = HEAP8[$$01>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $$1$lcssa = $$1;
   break;
  }
  $8 = (($$01) + 1|0);
  $9 = (($$1) + 1|0);
  HEAP8[$$1>>0] = $6;
  $$01 = $8;$$1 = $9;
 }
 $10 = $__flags & 74;
 do {
  if ((($10|0) == 8)) {
   $11 = $__flags & 16384;
   $12 = ($11|0)==(0);
   if ($12) {
    HEAP8[$$1$lcssa>>0] = 120;
    break;
   } else {
    HEAP8[$$1$lcssa>>0] = 88;
    break;
   }
  } else if ((($10|0) == 64)) {
   HEAP8[$$1$lcssa>>0] = 111;
  } else {
   if ($__signd) {
    HEAP8[$$1$lcssa>>0] = 100;
    break;
   } else {
    HEAP8[$$1$lcssa>>0] = 117;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nb,$__ne,$__iob) {
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__iob = $__iob|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 176;
 do {
  if ((($2|0) == 16)) {
   $3 = HEAP8[$__nb>>0]|0;
   if ((($3<<24>>24) == 43) | (($3<<24>>24) == 45)) {
    $4 = (($__nb) + 1|0);
    $$0 = $4;
    break;
   }
   $5 = $__ne;
   $6 = $__nb;
   $7 = (($5) - ($6))|0;
   $8 = ($7|0)>(1);
   $9 = ($3<<24>>24)==(48);
   $or$cond = $8 & $9;
   if ($or$cond) {
    $10 = (($__nb) + 1|0);
    $11 = HEAP8[$10>>0]|0;
    if ((($11<<24>>24) == 88) | (($11<<24>>24) == 120)) {
     $12 = (($__nb) + 2|0);
     $$0 = $12;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else if ((($2|0) == 32)) {
   $$0 = $__ne;
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $$0 = $__nb;
 }
 return ($$0|0);
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$0$i$i = 0, $$0$i$i2 = 0, $$01$i$i = 0, $$01$i$i1 = 0, $$6 = 0, $$__dg$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$0 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6704)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6848)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 63]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = $5&255;
  $11 = $10 >>> 1;
  $12 = $11;
 } else {
  $8 = (($__grouping) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 }
 $13 = ($12|0)==(0);
 L5: do {
  if ($13) {
   $14 = HEAP32[$0>>2]|0;
   $15 = (($14) + 32|0);
   $16 = HEAP32[$15>>2]|0;
   (FUNCTION_TABLE_iiiii[$16 & 7]($0,$__nb,$__ne,$__ob)|0);
   $17 = $__ne;
   $18 = $__nb;
   $19 = (($17) - ($18))|0;
   $20 = (($__ob) + ($19)|0);
   HEAP32[$__oe>>2] = $20;
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $21 = HEAP8[$__nb>>0]|0;
   if ((($21<<24>>24) == 43) | (($21<<24>>24) == 45)) {
    $22 = (($__nb) + 1|0);
    $23 = HEAP32[$0>>2]|0;
    $24 = (($23) + 28|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (FUNCTION_TABLE_iii[$25 & 15]($0,$21)|0);
    $27 = HEAP32[$__oe>>2]|0;
    $28 = (($27) + 1|0);
    HEAP32[$__oe>>2] = $28;
    HEAP8[$27>>0] = $26;
    $__nf$0 = $22;
   } else {
    $__nf$0 = $__nb;
   }
   $29 = $__ne;
   $30 = $__nf$0;
   $31 = (($29) - ($30))|0;
   $32 = ($31|0)>(1);
   if ($32) {
    $33 = HEAP8[$__nf$0>>0]|0;
    $34 = ($33<<24>>24)==(48);
    if ($34) {
     $35 = (($__nf$0) + 1|0);
     $36 = HEAP8[$35>>0]|0;
     if ((($36<<24>>24) == 88) | (($36<<24>>24) == 120)) {
      $37 = HEAP32[$0>>2]|0;
      $38 = (($37) + 28|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = (FUNCTION_TABLE_iii[$39 & 15]($0,48)|0);
      $41 = HEAP32[$__oe>>2]|0;
      $42 = (($41) + 1|0);
      HEAP32[$__oe>>2] = $42;
      HEAP8[$41>>0] = $40;
      $43 = (($__nf$0) + 2|0);
      $44 = HEAP8[$35>>0]|0;
      $45 = HEAP32[$0>>2]|0;
      $46 = (($45) + 28|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = (FUNCTION_TABLE_iii[$47 & 15]($0,$44)|0);
      $49 = HEAP32[$__oe>>2]|0;
      $50 = (($49) + 1|0);
      HEAP32[$__oe>>2] = $50;
      HEAP8[$49>>0] = $48;
      $__nf$1 = $43;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
   $51 = ($__nf$1|0)==($__ne|0);
   L16: do {
    if (!($51)) {
     $$0$i$i2 = $__ne;$$01$i$i1 = $__nf$1;
     while(1) {
      $52 = (($$0$i$i2) + -1|0);
      $53 = ($$01$i$i1>>>0)<($52>>>0);
      if (!($53)) {
       break L16;
      }
      $54 = HEAP8[$$01$i$i1>>0]|0;
      $55 = HEAP8[$52>>0]|0;
      HEAP8[$$01$i$i1>>0] = $55;
      HEAP8[$52>>0] = $54;
      $56 = (($$01$i$i1) + 1|0);
      $$0$i$i2 = $52;$$01$i$i1 = $56;
     }
    }
   } while(0);
   $57 = HEAP32[$1>>2]|0;
   $58 = (($57) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (FUNCTION_TABLE_ii[$59 & 63]($1)|0);
   $61 = (($__grouping) + 1|0);
   $62 = (($__grouping) + 4|0);
   $63 = (($__grouping) + 8|0);
   $__dc$0 = 0;$__dg$0 = 0;$__p$0 = $__nf$1;
   while(1) {
    $64 = ($__p$0>>>0)<($__ne>>>0);
    if (!($64)) {
     break;
    }
    $65 = HEAP8[$__grouping>>0]|0;
    $66 = $65 & 1;
    $67 = ($66<<24>>24)==(0);
    $68 = HEAP32[$63>>2]|0;
    $$ = $67 ? $61 : $68;
    $69 = (($$) + ($__dg$0)|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = ($70<<24>>24)==(0);
    if ($71) {
     $__dc$1 = $__dc$0;$__dg$1 = $__dg$0;
    } else {
     $72 = HEAP32[$63>>2]|0;
     $$6 = $67 ? $61 : $72;
     $73 = (($$6) + ($__dg$0)|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74 << 24 >> 24;
     $76 = ($__dc$0|0)==($75|0);
     if ($76) {
      $77 = HEAP32[$__oe>>2]|0;
      $78 = (($77) + 1|0);
      HEAP32[$__oe>>2] = $78;
      HEAP8[$77>>0] = $60;
      $79 = HEAP8[$__grouping>>0]|0;
      $80 = $79 & 1;
      $81 = ($80<<24>>24)==(0);
      if ($81) {
       $83 = $79&255;
       $84 = $83 >>> 1;
       $86 = $84;
      } else {
       $82 = HEAP32[$62>>2]|0;
       $86 = $82;
      }
      $85 = (($86) + -1)|0;
      $87 = ($__dg$0>>>0)<($85>>>0);
      $88 = $87&1;
      $$__dg$0 = (($88) + ($__dg$0))|0;
      $__dc$1 = 0;$__dg$1 = $$__dg$0;
     } else {
      $__dc$1 = $__dc$0;$__dg$1 = $__dg$0;
     }
    }
    $89 = HEAP8[$__p$0>>0]|0;
    $90 = HEAP32[$0>>2]|0;
    $91 = (($90) + 28|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (FUNCTION_TABLE_iii[$92 & 15]($0,$89)|0);
    $94 = HEAP32[$__oe>>2]|0;
    $95 = (($94) + 1|0);
    HEAP32[$__oe>>2] = $95;
    HEAP8[$94>>0] = $93;
    $96 = (($__dc$1) + 1)|0;
    $97 = (($__p$0) + 1|0);
    $__dc$0 = $96;$__dg$0 = $__dg$1;$__p$0 = $97;
   }
   $98 = $__nf$1;
   $99 = $__nb;
   $100 = (($98) - ($99))|0;
   $101 = (($__ob) + ($100)|0);
   $102 = HEAP32[$__oe>>2]|0;
   $103 = ($101|0)==($102|0);
   if (!($103)) {
    $$0$i$i = $102;$$01$i$i = $101;
    while(1) {
     $104 = (($$0$i$i) + -1|0);
     $105 = ($$01$i$i>>>0)<($104>>>0);
     if (!($105)) {
      break L5;
     }
     $106 = HEAP8[$$01$i$i>>0]|0;
     $107 = HEAP8[$104>>0]|0;
     HEAP8[$$01$i$i>>0] = $107;
     HEAP8[$104>>0] = $106;
     $108 = (($$01$i$i) + 1|0);
     $$0$i$i = $104;$$01$i$i = $108;
    }
   }
  }
 } while(0);
 $109 = ($__np|0)==($__ne|0);
 if ($109) {
  $110 = HEAP32[$__oe>>2]|0;
  $storemerge = $110;
 } else {
  $111 = $__np;
  $112 = $__nb;
  $113 = (($111) - ($112))|0;
  $114 = (($__ob) + ($113)|0);
  $storemerge = $114;
 }
 HEAP32[$__op>>2] = $storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $$byval_copy = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 74|0;
 $__o = sp + 32|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,5248,1,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $$byval_copy;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$11,$__fmt,$$byval_copy)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar,$18,$17,$__o,$__op,$__oe,$2);
 $19 = HEAP32[$2>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
 $20 = HEAP32[$__s>>2]|0;
 HEAP32[$3>>2] = $20;
 $21 = HEAP32[$__op>>2]|0;
 $22 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$21,$22,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $$byval_copy = sp;
 $__fmt = sp + 56|0;
 $__nar = sp + 44|0;
 $__o = sp + 20|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[5336+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[5336+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[5336+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[5336+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[5336+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[5336+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,5240,0,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$$byval_copy>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$$byval_copy)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar,$8,$7,$__o,$__op,$__oe,$0);
 $9 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
 $10 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $10;
 $11 = HEAP32[$__op>>2]|0;
 $12 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$11,$12,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $$byval_copy = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 75|0;
 $__o = sp + 32|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,5248,0,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $$byval_copy;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$11,$__fmt,$$byval_copy)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar,$18,$17,$__o,$__op,$__oe,$2);
 $19 = HEAP32[$2>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
 $20 = HEAP32[$__s>>2]|0;
 HEAP32[$3>>2] = $20;
 $21 = HEAP32[$__op>>2]|0;
 $22 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$21,$22,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$byval_copy = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0;
 var $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $$byval_copy = sp + 68|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 130|0;
 $__nb = sp + 64|0;
 $__o = sp + 72|0;
 $__op = sp + 60|0;
 $__oe = sp + 56|0;
 $0 = sp + 52|0;
 $1 = sp + 48|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($__fmt) + 1|0);
 $7 = (($__iob) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,5256,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = (($__iob) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = (($vararg_buffer) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 if ($15) {
  $16 = (__ZNSt3__16__clocEv()|0);
  $17 = (($__iob) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  HEAP32[$vararg_buffer5>>2] = $18;
  $vararg_ptr8 = (($vararg_buffer5) + 8|0);
  HEAPF64[$vararg_ptr8>>3] = $__v;
  $19 = (__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$16,$__fmt,$vararg_buffer5)|0);
  $20 = HEAP32[$__nb>>2]|0;
  $21 = ($20|0)==(0|0);
  if ($21) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $23 = $20;$35 = $20;$__nc$1 = $19;
  }
 } else {
  $$pre3 = HEAP32[$__nb>>2]|0;
  $23 = $$pre3;$35 = 0;$__nc$1 = $__nc$0;
 }
 $22 = (($23) + ($__nc$1)|0);
 $24 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($23,$22,$__iob)|0);
 $25 = ($23|0)==($__nar|0);
 if ($25) {
  $29 = $__nar;$34 = 0;$__ob$0 = $__o;
 } else {
  $26 = $__nc$1 << 1;
  $27 = (_malloc($26)|0);
  $28 = ($27|0)==(0|0);
  if ($28) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $29 = $23;$34 = $27;$__ob$0 = $27;
  }
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($29,$24,$22,$__ob$0,$__op,$__oe,$0);
 $30 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($30)|0);
 $31 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $31;
 $32 = HEAP32[$__op>>2]|0;
 $33 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__ob$0,$32,$33,$__iob,$__fl);
 _free($34);
 _free($35);
 STACKTOP = sp;return;
}
function __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmtp,$__len,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$2$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $specify_precision$0$off0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = (($__fmtp) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 1024;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1 = $$0;
 } else {
  $5 = (($$0) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1 = $5;
 }
 $6 = $__flags & 260;
 $7 = $__flags >>> 14;
 $8 = ($6|0)==(260);
 if ($8) {
  $$2$ph = $$1;$specify_precision$0$off0$ph = 0;
 } else {
  $9 = (($$1) + 1|0);
  HEAP8[$$1>>0] = 46;
  $10 = (($$1) + 2|0);
  HEAP8[$9>>0] = 42;
  $$2$ph = $10;$specify_precision$0$off0$ph = 1;
 }
 $$01 = $__len;$$2 = $$2$ph;
 while(1) {
  $11 = HEAP8[$$01>>0]|0;
  $12 = ($11<<24>>24)==(0);
  if ($12) {
   $$2$lcssa = $$2;
   break;
  }
  $13 = (($$01) + 1|0);
  $14 = (($$2) + 1|0);
  HEAP8[$$2>>0] = $11;
  $$01 = $13;$$2 = $14;
 }
 do {
  if ((($6|0) == 4)) {
   $15 = $7 & 1;
   $16 = ($15|0)==(0);
   if ($16) {
    HEAP8[$$2$lcssa>>0] = 102;
    break;
   } else {
    HEAP8[$$2$lcssa>>0] = 70;
    break;
   }
  } else if ((($6|0) == 256)) {
   $17 = $7 & 1;
   $18 = ($17|0)==(0);
   if ($18) {
    HEAP8[$$2$lcssa>>0] = 101;
    break;
   } else {
    HEAP8[$$2$lcssa>>0] = 69;
    break;
   }
  } else {
   $19 = $7 & 1;
   $20 = ($19|0)!=(0);
   if ($8) {
    if ($20) {
     HEAP8[$$2$lcssa>>0] = 65;
     break;
    } else {
     HEAP8[$$2$lcssa>>0] = 97;
     break;
    }
   } else {
    if ($20) {
     HEAP8[$$2$lcssa>>0] = 71;
     break;
    } else {
     HEAP8[$$2$lcssa>>0] = 103;
     break;
    }
   }
  }
 } while(0);
 return ($specify_precision$0$off0$ph|0);
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$0$i$i = 0, $$0$i$i3 = 0, $$01$i$i = 0, $$01$i$i2 = 0, $$10 = 0, $$__dg$0 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$2 = 0, $__nf$2$lcssa14 = 0, $__nf$3 = 0, $__ns$0 = 0, $__ns$1 = 0, $__ns$2 = 0, $__p$0 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6704)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6848)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 63]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 if ((($5<<24>>24) == 43) | (($5<<24>>24) == 45)) {
  $6 = (($__nb) + 1|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = (($7) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iii[$9 & 15]($0,$5)|0);
  $11 = HEAP32[$__oe>>2]|0;
  $12 = (($11) + 1|0);
  HEAP32[$__oe>>2] = $12;
  HEAP8[$11>>0] = $10;
  $__nf$0 = $6;
 } else {
  $__nf$0 = $__nb;
 }
 $13 = $__ne;
 $14 = $__nf$0;
 $15 = (($13) - ($14))|0;
 $16 = ($15|0)>(1);
 L4: do {
  if ($16) {
   $17 = HEAP8[$__nf$0>>0]|0;
   $18 = ($17<<24>>24)==(48);
   if ($18) {
    $19 = (($__nf$0) + 1|0);
    $20 = HEAP8[$19>>0]|0;
    if ((($20<<24>>24) == 88) | (($20<<24>>24) == 120)) {
     $21 = HEAP32[$0>>2]|0;
     $22 = (($21) + 28|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = (FUNCTION_TABLE_iii[$23 & 15]($0,48)|0);
     $25 = HEAP32[$__oe>>2]|0;
     $26 = (($25) + 1|0);
     HEAP32[$__oe>>2] = $26;
     HEAP8[$25>>0] = $24;
     $27 = (($__nf$0) + 2|0);
     $28 = HEAP8[$19>>0]|0;
     $29 = HEAP32[$0>>2]|0;
     $30 = (($29) + 28|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = (FUNCTION_TABLE_iii[$31 & 15]($0,$28)|0);
     $33 = HEAP32[$__oe>>2]|0;
     $34 = (($33) + 1|0);
     HEAP32[$__oe>>2] = $34;
     HEAP8[$33>>0] = $32;
     $__ns$0 = $27;
     while(1) {
      $35 = ($__ns$0>>>0)<($__ne>>>0);
      if (!($35)) {
       $__nf$1 = $27;$__ns$2 = $__ns$0;
       break L4;
      }
      $36 = HEAP8[$__ns$0>>0]|0;
      $37 = $36 << 24 >> 24;
      $38 = (__ZNSt3__16__clocEv()|0);
      $39 = (_isxdigit_l($37,$38)|0);
      $40 = ($39|0)==(0);
      if ($40) {
       $__nf$1 = $27;$__ns$2 = $__ns$0;
       break L4;
      }
      $41 = (($__ns$0) + 1|0);
      $__ns$0 = $41;
     }
    } else {
     $__ns$1 = $__nf$0;
     label = 10;
    }
   } else {
    $__ns$1 = $__nf$0;
    label = 10;
   }
  } else {
   $__ns$1 = $__nf$0;
   label = 10;
  }
 } while(0);
 L12: do {
  if ((label|0) == 10) {
   while(1) {
    label = 0;
    $42 = ($__ns$1>>>0)<($__ne>>>0);
    if (!($42)) {
     $__nf$1 = $__nf$0;$__ns$2 = $__ns$1;
     break L12;
    }
    $43 = HEAP8[$__ns$1>>0]|0;
    $44 = $43 << 24 >> 24;
    $45 = (__ZNSt3__16__clocEv()|0);
    $46 = (_isdigit_l($44,$45)|0);
    $47 = ($46|0)==(0);
    if ($47) {
     $__nf$1 = $__nf$0;$__ns$2 = $__ns$1;
     break L12;
    }
    $48 = (($__ns$1) + 1|0);
    $__ns$1 = $48;
    label = 10;
   }
  }
 } while(0);
 $49 = HEAP8[$__grouping>>0]|0;
 $50 = $49 & 1;
 $51 = ($50<<24>>24)==(0);
 if ($51) {
  $54 = $49&255;
  $55 = $54 >>> 1;
  $56 = $55;
 } else {
  $52 = (($__grouping) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $56 = $53;
 }
 $57 = ($56|0)==(0);
 L22: do {
  if ($57) {
   $58 = HEAP32[$__oe>>2]|0;
   $59 = HEAP32[$0>>2]|0;
   $60 = (($59) + 32|0);
   $61 = HEAP32[$60>>2]|0;
   (FUNCTION_TABLE_iiiii[$61 & 7]($0,$__nf$1,$__ns$2,$58)|0);
   $62 = $__ns$2;
   $63 = $__nf$1;
   $64 = (($62) - ($63))|0;
   $65 = HEAP32[$__oe>>2]|0;
   $66 = (($65) + ($64)|0);
   HEAP32[$__oe>>2] = $66;
   $$pre$phiZ2D = $0;
  } else {
   $67 = ($__nf$1|0)==($__ns$2|0);
   L24: do {
    if (!($67)) {
     $$0$i$i = $__ns$2;$$01$i$i = $__nf$1;
     while(1) {
      $68 = (($$0$i$i) + -1|0);
      $69 = ($$01$i$i>>>0)<($68>>>0);
      if (!($69)) {
       break L24;
      }
      $70 = HEAP8[$$01$i$i>>0]|0;
      $71 = HEAP8[$68>>0]|0;
      HEAP8[$$01$i$i>>0] = $71;
      HEAP8[$68>>0] = $70;
      $72 = (($$01$i$i) + 1|0);
      $$0$i$i = $68;$$01$i$i = $72;
     }
    }
   } while(0);
   $73 = HEAP32[$1>>2]|0;
   $74 = (($73) + 16|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (FUNCTION_TABLE_ii[$75 & 63]($1)|0);
   $77 = (($__grouping) + 1|0);
   $78 = (($__grouping) + 4|0);
   $79 = (($__grouping) + 8|0);
   $__dc$0 = 0;$__dg$0 = 0;$__p$0 = $__nf$1;
   while(1) {
    $80 = ($__p$0>>>0)<($__ns$2>>>0);
    if (!($80)) {
     break;
    }
    $81 = HEAP8[$__grouping>>0]|0;
    $82 = $81 & 1;
    $83 = ($82<<24>>24)==(0);
    $84 = HEAP32[$79>>2]|0;
    $$ = $83 ? $77 : $84;
    $85 = (($$) + ($__dg$0)|0);
    $86 = HEAP8[$85>>0]|0;
    $87 = ($86<<24>>24)>(0);
    if ($87) {
     $88 = HEAP32[$79>>2]|0;
     $$10 = $83 ? $77 : $88;
     $89 = (($$10) + ($__dg$0)|0);
     $90 = HEAP8[$89>>0]|0;
     $91 = $90 << 24 >> 24;
     $92 = ($__dc$0|0)==($91|0);
     if ($92) {
      $93 = HEAP32[$__oe>>2]|0;
      $94 = (($93) + 1|0);
      HEAP32[$__oe>>2] = $94;
      HEAP8[$93>>0] = $76;
      $95 = HEAP8[$__grouping>>0]|0;
      $96 = $95 & 1;
      $97 = ($96<<24>>24)==(0);
      if ($97) {
       $99 = $95&255;
       $100 = $99 >>> 1;
       $102 = $100;
      } else {
       $98 = HEAP32[$78>>2]|0;
       $102 = $98;
      }
      $101 = (($102) + -1)|0;
      $103 = ($__dg$0>>>0)<($101>>>0);
      $104 = $103&1;
      $$__dg$0 = (($104) + ($__dg$0))|0;
      $__dc$1 = 0;$__dg$1 = $$__dg$0;
     } else {
      $__dc$1 = $__dc$0;$__dg$1 = $__dg$0;
     }
    } else {
     $__dc$1 = $__dc$0;$__dg$1 = $__dg$0;
    }
    $105 = HEAP8[$__p$0>>0]|0;
    $106 = HEAP32[$0>>2]|0;
    $107 = (($106) + 28|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (FUNCTION_TABLE_iii[$108 & 15]($0,$105)|0);
    $110 = HEAP32[$__oe>>2]|0;
    $111 = (($110) + 1|0);
    HEAP32[$__oe>>2] = $111;
    HEAP8[$110>>0] = $109;
    $112 = (($__dc$1) + 1)|0;
    $113 = (($__p$0) + 1|0);
    $__dc$0 = $112;$__dg$0 = $__dg$1;$__p$0 = $113;
   }
   $114 = $__nf$1;
   $115 = $__nb;
   $116 = (($114) - ($115))|0;
   $117 = (($__ob) + ($116)|0);
   $118 = HEAP32[$__oe>>2]|0;
   $119 = ($117|0)==($118|0);
   if ($119) {
    $$pre$phiZ2D = $0;
   } else {
    $$0$i$i3 = $118;$$01$i$i2 = $117;
    while(1) {
     $120 = (($$0$i$i3) + -1|0);
     $121 = ($$01$i$i2>>>0)<($120>>>0);
     if (!($121)) {
      $$pre$phiZ2D = $0;
      break L22;
     }
     $122 = HEAP8[$$01$i$i2>>0]|0;
     $123 = HEAP8[$120>>0]|0;
     HEAP8[$$01$i$i2>>0] = $123;
     HEAP8[$120>>0] = $122;
     $124 = (($$01$i$i2) + 1|0);
     $$0$i$i3 = $120;$$01$i$i2 = $124;
    }
   }
  }
 } while(0);
 $__nf$2 = $__ns$2;
 while(1) {
  $125 = ($__nf$2>>>0)<($__ne>>>0);
  if (!($125)) {
   $__nf$3 = $__nf$2;
   break;
  }
  $126 = HEAP8[$__nf$2>>0]|0;
  $127 = ($126<<24>>24)==(46);
  if ($127) {
   $__nf$2$lcssa14 = $__nf$2;
   label = 36;
   break;
  }
  $135 = HEAP32[$$pre$phiZ2D>>2]|0;
  $136 = (($135) + 28|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = (FUNCTION_TABLE_iii[$137 & 15]($0,$126)|0);
  $139 = HEAP32[$__oe>>2]|0;
  $140 = (($139) + 1|0);
  HEAP32[$__oe>>2] = $140;
  HEAP8[$139>>0] = $138;
  $141 = (($__nf$2) + 1|0);
  $__nf$2 = $141;
 }
 if ((label|0) == 36) {
  $128 = HEAP32[$1>>2]|0;
  $129 = (($128) + 12|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (FUNCTION_TABLE_ii[$130 & 63]($1)|0);
  $132 = HEAP32[$__oe>>2]|0;
  $133 = (($132) + 1|0);
  HEAP32[$__oe>>2] = $133;
  HEAP8[$132>>0] = $131;
  $134 = (($__nf$2$lcssa14) + 1|0);
  $__nf$3 = $134;
 }
 $142 = HEAP32[$__oe>>2]|0;
 $143 = HEAP32[$0>>2]|0;
 $144 = (($143) + 32|0);
 $145 = HEAP32[$144>>2]|0;
 (FUNCTION_TABLE_iiiii[$145 & 7]($0,$__nf$3,$__ne,$142)|0);
 $146 = $__nf$3;
 $147 = (($13) - ($146))|0;
 $148 = HEAP32[$__oe>>2]|0;
 $149 = (($148) + ($147)|0);
 HEAP32[$__oe>>2] = $149;
 $150 = ($__np|0)==($__ne|0);
 if ($150) {
  $storemerge = $149;
 } else {
  $151 = $__np;
  $152 = $__nb;
  $153 = (($151) - ($152))|0;
  $154 = (($__ob) + ($153)|0);
  $storemerge = $154;
 }
 HEAP32[$__op>>2] = $storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$byval_copy = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $$byval_copy = sp + 76|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 138|0;
 $__nb = sp + 72|0;
 $__o = sp + 80|0;
 $__op = sp + 68|0;
 $__oe = sp + 64|0;
 $0 = sp + 60|0;
 $1 = sp + 56|0;
 $2 = $__fmt;
 $3 = $2;
 HEAP32[$3>>2] = 37;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($__fmt) + 1|0);
 $7 = (($__iob) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($6,5264,$8)|0);
 HEAP32[$__nb>>2] = $__nar;
 $10 = (__ZNSt3__16__clocEv()|0);
 if ($9) {
  $11 = (($__iob) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = (($vararg_buffer) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $13 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $13;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$10,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $14;
 }
 $15 = ($__nc$0|0)>(29);
 if ($15) {
  $16 = (__ZNSt3__16__clocEv()|0);
  if ($9) {
   $17 = (($__iob) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $18;
   $vararg_ptr8 = (($vararg_buffer5) + 8|0);
   HEAPF64[$vararg_ptr8>>3] = $__v;
   $19 = (__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$16,$__fmt,$vararg_buffer5)|0);
   $__nc$1 = $19;
  } else {
   HEAPF64[$vararg_buffer9>>3] = $__v;
   $20 = (__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$16,$__fmt,$vararg_buffer9)|0);
   $__nc$1 = $20;
  }
  $21 = HEAP32[$__nb>>2]|0;
  $22 = ($21|0)==(0|0);
  if ($22) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $24 = $21;$36 = $21;$__nc$2 = $__nc$1;
  }
 } else {
  $$pre3 = HEAP32[$__nb>>2]|0;
  $24 = $$pre3;$36 = 0;$__nc$2 = $__nc$0;
 }
 $23 = (($24) + ($__nc$2)|0);
 $25 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($24,$23,$__iob)|0);
 $26 = ($24|0)==($__nar|0);
 if ($26) {
  $30 = $__nar;$35 = 0;$__ob$0 = $__o;
 } else {
  $27 = $__nc$2 << 1;
  $28 = (_malloc($27)|0);
  $29 = ($28|0)==(0|0);
  if ($29) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $30 = $24;$35 = $28;$__ob$0 = $28;
  }
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($30,$25,$23,$__ob$0,$__op,$__oe,$0);
 $31 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($31)|0);
 $32 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $32;
 $33 = HEAP32[$__op>>2]|0;
 $34 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__ob$0,$33,$34,$__iob,$__fl);
 _free($35);
 _free($36);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__op$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $$byval_copy = sp;
 $__fmt = sp + 72|0;
 $__nar = sp + 52|0;
 $__o = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[5344+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[5344+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[5344+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[5344+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[5344+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[5344+5>>0]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$$byval_copy>>2] = $__v;
 $3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$2,$__fmt,$$byval_copy)|0);
 $4 = (($__nar) + ($3)|0);
 $5 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$4,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $6 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,6704)|0);
 $7 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
 $8 = HEAP32[$6>>2]|0;
 $9 = (($8) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 (FUNCTION_TABLE_iiiii[$10 & 7]($6,$__nar,$4,$__o)|0);
 $11 = (($__o) + ($3)|0);
 $12 = ($5|0)==($4|0);
 if ($12) {
  $__op$0 = $11;
 } else {
  $13 = $__nar;
  $14 = $5;
  $15 = (($14) - ($13))|0;
  $16 = (($__o) + ($15)|0);
  $__op$0 = $16;
 }
 $17 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $17;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$11,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi3Z2D = 0, $$pre$phiZ2D = 0, $$pre1 = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__nm = sp;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$this>>2]|0;
  $7 = (($6) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$__s>>2]|0;
  HEAP32[$0>>2] = $9;
  $10 = $__v&1;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$8 & 15]($agg$result,$this,$$byval_copy,$__iob,$__fl,$10);
 } else {
  __ZNKSt3__18ios_base6getlocEv($1,$__iob);
  $11 = (__ZNKSt3__16locale9use_facetERNS0_2idE($1,6856)|0);
  $12 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
  $13 = HEAP32[$11>>2]|0;
  if ($__v) {
   $14 = (($13) + 24|0);
   $15 = HEAP32[$14>>2]|0;
   FUNCTION_TABLE_vii[$15 & 63]($__nm,$11);
  } else {
   $16 = (($13) + 28|0);
   $17 = HEAP32[$16>>2]|0;
   FUNCTION_TABLE_vii[$17 & 63]($__nm,$11);
  }
  $18 = HEAP8[$__nm>>0]|0;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   $23 = (($__nm) + 4|0);
   $$pre2 = (($__nm) + 8|0);
   $$ph = $23;$$pre$phi3Z2D = $$pre2;$$pre$phiZ2D = $23;
  } else {
   $21 = (($__nm) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $$pre1 = (($__nm) + 4|0);
   $$ph = $22;$$pre$phi3Z2D = $21;$$pre$phiZ2D = $$pre1;
  }
  $25 = $18;$34 = $$ph;
  while(1) {
   $24 = $25 & 1;
   $26 = ($24<<24>>24)==(0);
   if ($26) {
    $29 = $25&255;
    $30 = $29 >>> 1;
    $32 = $$pre$phiZ2D;$33 = $30;
   } else {
    $27 = HEAP32[$$pre$phi3Z2D>>2]|0;
    $28 = HEAP32[$$pre$phiZ2D>>2]|0;
    $32 = $27;$33 = $28;
   }
   $31 = (($32) + ($33<<2)|0);
   $35 = ($34|0)==($31|0);
   if ($35) {
    break;
   }
   $36 = HEAP32[$34>>2]|0;
   $37 = HEAP32[$__s>>2]|0;
   $38 = ($37|0)==(0|0);
   if (!($38)) {
    $39 = (($37) + 24|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($37) + 28|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($40|0)==($42|0);
    if ($43) {
     $44 = HEAP32[$37>>2]|0;
     $45 = (($44) + 52|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = (FUNCTION_TABLE_iii[$46 & 15]($37,$36)|0);
     $$0$i$i = $47;
    } else {
     $48 = (($40) + 4|0);
     HEAP32[$39>>2] = $48;
     HEAP32[$40>>2] = $36;
     $$0$i$i = $36;
    }
    $49 = ($$0$i$i|0)==(-1);
    if ($49) {
     HEAP32[$__s>>2] = 0;
    }
   }
   $50 = (($34) + 4|0);
   $$pre = HEAP8[$__nm>>0]|0;
   $25 = $$pre;$34 = $50;
  }
  $51 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$result>>2] = $51;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nm);
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $$byval_copy = sp;
 $__fmt = sp + 116|0;
 $__nar = sp + 104|0;
 $__o = sp + 20|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[5336+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[5336+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[5336+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[5336+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[5336+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[5336+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,5240,1,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$$byval_copy>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$$byval_copy)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar,$8,$7,$__o,$__op,$__oe,$0);
 $9 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
 $10 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $10;
 $11 = HEAP32[$__op>>2]|0;
 $12 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$11,$12,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$0$i$i = 0, $$0$i$i2 = 0, $$01$i$i = 0, $$01$i$i1 = 0, $$5 = 0, $$__dg$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$0 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6696)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6856)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 63]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = $5&255;
  $11 = $10 >>> 1;
  $12 = $11;
 } else {
  $8 = (($__grouping) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 }
 $13 = ($12|0)==(0);
 L5: do {
  if ($13) {
   $14 = HEAP32[$0>>2]|0;
   $15 = (($14) + 48|0);
   $16 = HEAP32[$15>>2]|0;
   (FUNCTION_TABLE_iiiii[$16 & 7]($0,$__nb,$__ne,$__ob)|0);
   $17 = $__ne;
   $18 = $__nb;
   $19 = (($17) - ($18))|0;
   $20 = (($__ob) + ($19<<2)|0);
   HEAP32[$__oe>>2] = $20;
   $114 = $20;
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $21 = HEAP8[$__nb>>0]|0;
   if ((($21<<24>>24) == 43) | (($21<<24>>24) == 45)) {
    $22 = (($__nb) + 1|0);
    $23 = HEAP32[$0>>2]|0;
    $24 = (($23) + 44|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (FUNCTION_TABLE_iii[$25 & 15]($0,$21)|0);
    $27 = HEAP32[$__oe>>2]|0;
    $28 = (($27) + 4|0);
    HEAP32[$__oe>>2] = $28;
    HEAP32[$27>>2] = $26;
    $__nf$0 = $22;
   } else {
    $__nf$0 = $__nb;
   }
   $29 = $__ne;
   $30 = $__nf$0;
   $31 = (($29) - ($30))|0;
   $32 = ($31|0)>(1);
   if ($32) {
    $33 = HEAP8[$__nf$0>>0]|0;
    $34 = ($33<<24>>24)==(48);
    if ($34) {
     $35 = (($__nf$0) + 1|0);
     $36 = HEAP8[$35>>0]|0;
     if ((($36<<24>>24) == 88) | (($36<<24>>24) == 120)) {
      $37 = HEAP32[$0>>2]|0;
      $38 = (($37) + 44|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = (FUNCTION_TABLE_iii[$39 & 15]($0,48)|0);
      $41 = HEAP32[$__oe>>2]|0;
      $42 = (($41) + 4|0);
      HEAP32[$__oe>>2] = $42;
      HEAP32[$41>>2] = $40;
      $43 = (($__nf$0) + 2|0);
      $44 = HEAP8[$35>>0]|0;
      $45 = HEAP32[$0>>2]|0;
      $46 = (($45) + 44|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = (FUNCTION_TABLE_iii[$47 & 15]($0,$44)|0);
      $49 = HEAP32[$__oe>>2]|0;
      $50 = (($49) + 4|0);
      HEAP32[$__oe>>2] = $50;
      HEAP32[$49>>2] = $48;
      $__nf$1 = $43;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
   $51 = ($__nf$1|0)==($__ne|0);
   L16: do {
    if (!($51)) {
     $$0$i$i2 = $__ne;$$01$i$i1 = $__nf$1;
     while(1) {
      $52 = (($$0$i$i2) + -1|0);
      $53 = ($$01$i$i1>>>0)<($52>>>0);
      if (!($53)) {
       break L16;
      }
      $54 = HEAP8[$$01$i$i1>>0]|0;
      $55 = HEAP8[$52>>0]|0;
      HEAP8[$$01$i$i1>>0] = $55;
      HEAP8[$52>>0] = $54;
      $56 = (($$01$i$i1) + 1|0);
      $$0$i$i2 = $52;$$01$i$i1 = $56;
     }
    }
   } while(0);
   $57 = HEAP32[$1>>2]|0;
   $58 = (($57) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (FUNCTION_TABLE_ii[$59 & 63]($1)|0);
   $61 = (($__grouping) + 1|0);
   $62 = (($__grouping) + 4|0);
   $63 = (($__grouping) + 8|0);
   $__dc$0 = 0;$__dg$0 = 0;$__p$0 = $__nf$1;
   while(1) {
    $64 = ($__p$0>>>0)<($__ne>>>0);
    if (!($64)) {
     break;
    }
    $65 = HEAP8[$__grouping>>0]|0;
    $66 = $65 & 1;
    $67 = ($66<<24>>24)==(0);
    $68 = HEAP32[$63>>2]|0;
    $$ = $67 ? $61 : $68;
    $69 = (($$) + ($__dg$0)|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = ($70<<24>>24)==(0);
    if ($71) {
     $__dc$1 = $__dc$0;$__dg$1 = $__dg$0;
    } else {
     $72 = HEAP32[$63>>2]|0;
     $$5 = $67 ? $61 : $72;
     $73 = (($$5) + ($__dg$0)|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74 << 24 >> 24;
     $76 = ($__dc$0|0)==($75|0);
     if ($76) {
      $77 = HEAP32[$__oe>>2]|0;
      $78 = (($77) + 4|0);
      HEAP32[$__oe>>2] = $78;
      HEAP32[$77>>2] = $60;
      $79 = HEAP8[$__grouping>>0]|0;
      $80 = $79 & 1;
      $81 = ($80<<24>>24)==(0);
      if ($81) {
       $83 = $79&255;
       $84 = $83 >>> 1;
       $86 = $84;
      } else {
       $82 = HEAP32[$62>>2]|0;
       $86 = $82;
      }
      $85 = (($86) + -1)|0;
      $87 = ($__dg$0>>>0)<($85>>>0);
      $88 = $87&1;
      $$__dg$0 = (($88) + ($__dg$0))|0;
      $__dc$1 = 0;$__dg$1 = $$__dg$0;
     } else {
      $__dc$1 = $__dc$0;$__dg$1 = $__dg$0;
     }
    }
    $89 = HEAP8[$__p$0>>0]|0;
    $90 = HEAP32[$0>>2]|0;
    $91 = (($90) + 44|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (FUNCTION_TABLE_iii[$92 & 15]($0,$89)|0);
    $94 = HEAP32[$__oe>>2]|0;
    $95 = (($94) + 4|0);
    HEAP32[$__oe>>2] = $95;
    HEAP32[$94>>2] = $93;
    $96 = (($__dc$1) + 1)|0;
    $97 = (($__p$0) + 1|0);
    $__dc$0 = $96;$__dg$0 = $__dg$1;$__p$0 = $97;
   }
   $98 = $__nf$1;
   $99 = $__nb;
   $100 = (($98) - ($99))|0;
   $101 = (($__ob) + ($100<<2)|0);
   $102 = HEAP32[$__oe>>2]|0;
   $103 = ($101|0)==($102|0);
   if ($103) {
    $114 = $101;
   } else {
    $$0$i$i = $102;$$01$i$i = $101;
    while(1) {
     $104 = (($$0$i$i) + -4|0);
     $105 = ($$01$i$i>>>0)<($104>>>0);
     if (!($105)) {
      $114 = $102;
      break L5;
     }
     $106 = HEAP32[$$01$i$i>>2]|0;
     $107 = HEAP32[$104>>2]|0;
     HEAP32[$$01$i$i>>2] = $107;
     HEAP32[$104>>2] = $106;
     $108 = (($$01$i$i) + 4|0);
     $$0$i$i = $104;$$01$i$i = $108;
    }
   }
  }
 } while(0);
 $109 = ($__np|0)==($__ne|0);
 if ($109) {
  $storemerge = $114;
 } else {
  $110 = $__np;
  $111 = $__nb;
  $112 = (($110) - ($111))|0;
  $113 = (($__ob) + ($112<<2)|0);
  $storemerge = $113;
 }
 HEAP32[$__op>>2] = $storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $$byval_copy = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 196|0;
 $__o = sp + 32|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,5248,1,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $$byval_copy;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$11,$__fmt,$$byval_copy)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar,$18,$17,$__o,$__op,$__oe,$2);
 $19 = HEAP32[$2>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
 $20 = HEAP32[$__s>>2]|0;
 HEAP32[$3>>2] = $20;
 $21 = HEAP32[$__op>>2]|0;
 $22 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$21,$22,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $$byval_copy = sp;
 $__fmt = sp + 116|0;
 $__nar = sp + 104|0;
 $__o = sp + 20|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[5336+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[5336+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[5336+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[5336+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[5336+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[5336+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,5240,0,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$$byval_copy>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$$byval_copy)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar,$8,$7,$__o,$__op,$__oe,$0);
 $9 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
 $10 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $10;
 $11 = HEAP32[$__op>>2]|0;
 $12 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$11,$12,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $$byval_copy = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 204|0;
 $__o = sp + 32|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,5248,0,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $$byval_copy;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$11,$__fmt,$$byval_copy)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar,$18,$17,$__o,$__op,$__oe,$2);
 $19 = HEAP32[$2>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($19)|0);
 $20 = HEAP32[$__s>>2]|0;
 HEAP32[$3>>2] = $20;
 $21 = HEAP32[$__op>>2]|0;
 $22 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$21,$22,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$byval_copy = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0;
 $$byval_copy = sp + 300|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 304|0;
 $__nb = sp + 296|0;
 $__o = sp + 68|0;
 $__op = sp + 64|0;
 $__oe = sp + 60|0;
 $0 = sp + 56|0;
 $1 = sp + 52|0;
 $2 = sp + 48|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,5256,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = (($vararg_buffer) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 if ($16) {
  $17 = (__ZNSt3__16__clocEv()|0);
  $18 = (($__iob) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  HEAP32[$vararg_buffer5>>2] = $19;
  $vararg_ptr8 = (($vararg_buffer5) + 8|0);
  HEAPF64[$vararg_ptr8>>3] = $__v;
  $20 = (__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$17,$__fmt,$vararg_buffer5)|0);
  $21 = HEAP32[$__nb>>2]|0;
  $22 = ($21|0)==(0|0);
  if ($22) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $24 = $21;$38 = $21;$__nc$1 = $20;
  }
 } else {
  $$pre1 = HEAP32[$__nb>>2]|0;
  $24 = $$pre1;$38 = 0;$__nc$1 = $__nc$0;
 }
 $23 = (($24) + ($__nc$1)|0);
 $25 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($24,$23,$__iob)|0);
 $26 = ($24|0)==($__nar|0);
 if ($26) {
  $30 = $__nar;$36 = 0;$__ob$0 = $__o;
 } else {
  $27 = $__nc$1 << 3;
  $28 = (_malloc($27)|0);
  $29 = ($28|0)==(0|0);
  if ($29) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $30 = $24;$36 = $28;$__ob$0 = $28;
  }
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($30,$25,$23,$__ob$0,$__op,$__oe,$0);
 $31 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($31)|0);
 $32 = HEAP32[$__s>>2]|0;
 HEAP32[$2>>2] = $32;
 $33 = HEAP32[$__op>>2]|0;
 $34 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($1,$$byval_copy,$__ob$0,$33,$34,$__iob,$__fl);
 $35 = HEAP32[$1>>2]|0;
 HEAP32[$__s>>2] = $35;
 HEAP32[$agg$result>>2] = $35;
 $37 = ($36|0)==(0|0);
 if (!($37)) {
  _free($36);
 }
 _free($38);
 STACKTOP = sp;return;
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$0$i$i = 0, $$0$i$i3 = 0, $$01$i$i = 0, $$01$i$i2 = 0, $$9 = 0, $$__dg$0 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$0 = 0, $__dc$1 = 0, $__dg$0 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$2 = 0, $__nf$2$lcssa15 = 0, $__nf$3 = 0, $__ns$0 = 0, $__ns$1 = 0, $__ns$2 = 0, $__p$0 = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6696)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6856)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 63]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 if ((($5<<24>>24) == 43) | (($5<<24>>24) == 45)) {
  $6 = (($__nb) + 1|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = (($7) + 44|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iii[$9 & 15]($0,$5)|0);
  $11 = HEAP32[$__oe>>2]|0;
  $12 = (($11) + 4|0);
  HEAP32[$__oe>>2] = $12;
  HEAP32[$11>>2] = $10;
  $__nf$0 = $6;
 } else {
  $__nf$0 = $__nb;
 }
 $13 = $__ne;
 $14 = $__nf$0;
 $15 = (($13) - ($14))|0;
 $16 = ($15|0)>(1);
 L4: do {
  if ($16) {
   $17 = HEAP8[$__nf$0>>0]|0;
   $18 = ($17<<24>>24)==(48);
   if ($18) {
    $19 = (($__nf$0) + 1|0);
    $20 = HEAP8[$19>>0]|0;
    if ((($20<<24>>24) == 88) | (($20<<24>>24) == 120)) {
     $21 = HEAP32[$0>>2]|0;
     $22 = (($21) + 44|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = (FUNCTION_TABLE_iii[$23 & 15]($0,48)|0);
     $25 = HEAP32[$__oe>>2]|0;
     $26 = (($25) + 4|0);
     HEAP32[$__oe>>2] = $26;
     HEAP32[$25>>2] = $24;
     $27 = (($__nf$0) + 2|0);
     $28 = HEAP8[$19>>0]|0;
     $29 = HEAP32[$0>>2]|0;
     $30 = (($29) + 44|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = (FUNCTION_TABLE_iii[$31 & 15]($0,$28)|0);
     $33 = HEAP32[$__oe>>2]|0;
     $34 = (($33) + 4|0);
     HEAP32[$__oe>>2] = $34;
     HEAP32[$33>>2] = $32;
     $__ns$0 = $27;
     while(1) {
      $35 = ($__ns$0>>>0)<($__ne>>>0);
      if (!($35)) {
       $__nf$1 = $27;$__ns$2 = $__ns$0;
       break L4;
      }
      $36 = HEAP8[$__ns$0>>0]|0;
      $37 = $36 << 24 >> 24;
      $38 = (__ZNSt3__16__clocEv()|0);
      $39 = (_isxdigit_l($37,$38)|0);
      $40 = ($39|0)==(0);
      if ($40) {
       $__nf$1 = $27;$__ns$2 = $__ns$0;
       break L4;
      }
      $41 = (($__ns$0) + 1|0);
      $__ns$0 = $41;
     }
    } else {
     $__ns$1 = $__nf$0;
     label = 10;
    }
   } else {
    $__ns$1 = $__nf$0;
    label = 10;
   }
  } else {
   $__ns$1 = $__nf$0;
   label = 10;
  }
 } while(0);
 L12: do {
  if ((label|0) == 10) {
   while(1) {
    label = 0;
    $42 = ($__ns$1>>>0)<($__ne>>>0);
    if (!($42)) {
     $__nf$1 = $__nf$0;$__ns$2 = $__ns$1;
     break L12;
    }
    $43 = HEAP8[$__ns$1>>0]|0;
    $44 = $43 << 24 >> 24;
    $45 = (__ZNSt3__16__clocEv()|0);
    $46 = (_isdigit_l($44,$45)|0);
    $47 = ($46|0)==(0);
    if ($47) {
     $__nf$1 = $__nf$0;$__ns$2 = $__ns$1;
     break L12;
    }
    $48 = (($__ns$1) + 1|0);
    $__ns$1 = $48;
    label = 10;
   }
  }
 } while(0);
 $49 = HEAP8[$__grouping>>0]|0;
 $50 = $49 & 1;
 $51 = ($50<<24>>24)==(0);
 if ($51) {
  $54 = $49&255;
  $55 = $54 >>> 1;
  $56 = $55;
 } else {
  $52 = (($__grouping) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $56 = $53;
 }
 $57 = ($56|0)==(0);
 L22: do {
  if ($57) {
   $58 = HEAP32[$__oe>>2]|0;
   $59 = HEAP32[$0>>2]|0;
   $60 = (($59) + 48|0);
   $61 = HEAP32[$60>>2]|0;
   (FUNCTION_TABLE_iiiii[$61 & 7]($0,$__nf$1,$__ns$2,$58)|0);
   $62 = $__ns$2;
   $63 = $__nf$1;
   $64 = (($62) - ($63))|0;
   $65 = HEAP32[$__oe>>2]|0;
   $66 = (($65) + ($64<<2)|0);
   HEAP32[$__oe>>2] = $66;
   $$pre$phiZ2D = $0;$155 = $66;
  } else {
   $67 = ($__nf$1|0)==($__ns$2|0);
   L24: do {
    if (!($67)) {
     $$0$i$i = $__ns$2;$$01$i$i = $__nf$1;
     while(1) {
      $68 = (($$0$i$i) + -1|0);
      $69 = ($$01$i$i>>>0)<($68>>>0);
      if (!($69)) {
       break L24;
      }
      $70 = HEAP8[$$01$i$i>>0]|0;
      $71 = HEAP8[$68>>0]|0;
      HEAP8[$$01$i$i>>0] = $71;
      HEAP8[$68>>0] = $70;
      $72 = (($$01$i$i) + 1|0);
      $$0$i$i = $68;$$01$i$i = $72;
     }
    }
   } while(0);
   $73 = HEAP32[$1>>2]|0;
   $74 = (($73) + 16|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (FUNCTION_TABLE_ii[$75 & 63]($1)|0);
   $77 = (($__grouping) + 1|0);
   $78 = (($__grouping) + 4|0);
   $79 = (($__grouping) + 8|0);
   $__dc$0 = 0;$__dg$0 = 0;$__p$0 = $__nf$1;
   while(1) {
    $80 = ($__p$0>>>0)<($__ns$2>>>0);
    if (!($80)) {
     break;
    }
    $81 = HEAP8[$__grouping>>0]|0;
    $82 = $81 & 1;
    $83 = ($82<<24>>24)==(0);
    $84 = HEAP32[$79>>2]|0;
    $$ = $83 ? $77 : $84;
    $85 = (($$) + ($__dg$0)|0);
    $86 = HEAP8[$85>>0]|0;
    $87 = ($86<<24>>24)>(0);
    if ($87) {
     $88 = HEAP32[$79>>2]|0;
     $$9 = $83 ? $77 : $88;
     $89 = (($$9) + ($__dg$0)|0);
     $90 = HEAP8[$89>>0]|0;
     $91 = $90 << 24 >> 24;
     $92 = ($__dc$0|0)==($91|0);
     if ($92) {
      $93 = HEAP32[$__oe>>2]|0;
      $94 = (($93) + 4|0);
      HEAP32[$__oe>>2] = $94;
      HEAP32[$93>>2] = $76;
      $95 = HEAP8[$__grouping>>0]|0;
      $96 = $95 & 1;
      $97 = ($96<<24>>24)==(0);
      if ($97) {
       $99 = $95&255;
       $100 = $99 >>> 1;
       $102 = $100;
      } else {
       $98 = HEAP32[$78>>2]|0;
       $102 = $98;
      }
      $101 = (($102) + -1)|0;
      $103 = ($__dg$0>>>0)<($101>>>0);
      $104 = $103&1;
      $$__dg$0 = (($104) + ($__dg$0))|0;
      $__dc$1 = 0;$__dg$1 = $$__dg$0;
     } else {
      $__dc$1 = $__dc$0;$__dg$1 = $__dg$0;
     }
    } else {
     $__dc$1 = $__dc$0;$__dg$1 = $__dg$0;
    }
    $105 = HEAP8[$__p$0>>0]|0;
    $106 = HEAP32[$0>>2]|0;
    $107 = (($106) + 44|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (FUNCTION_TABLE_iii[$108 & 15]($0,$105)|0);
    $110 = HEAP32[$__oe>>2]|0;
    $111 = (($110) + 4|0);
    HEAP32[$__oe>>2] = $111;
    HEAP32[$110>>2] = $109;
    $112 = (($__dc$1) + 1)|0;
    $113 = (($__p$0) + 1|0);
    $__dc$0 = $112;$__dg$0 = $__dg$1;$__p$0 = $113;
   }
   $114 = $__nf$1;
   $115 = $__nb;
   $116 = (($114) - ($115))|0;
   $117 = (($__ob) + ($116<<2)|0);
   $118 = HEAP32[$__oe>>2]|0;
   $119 = ($117|0)==($118|0);
   if ($119) {
    $$pre$phiZ2D = $0;$155 = $117;
   } else {
    $$0$i$i3 = $118;$$01$i$i2 = $117;
    while(1) {
     $120 = (($$0$i$i3) + -4|0);
     $121 = ($$01$i$i2>>>0)<($120>>>0);
     if (!($121)) {
      $$pre$phiZ2D = $0;$155 = $118;
      break L22;
     }
     $122 = HEAP32[$$01$i$i2>>2]|0;
     $123 = HEAP32[$120>>2]|0;
     HEAP32[$$01$i$i2>>2] = $123;
     HEAP32[$120>>2] = $122;
     $124 = (($$01$i$i2) + 4|0);
     $$0$i$i3 = $120;$$01$i$i2 = $124;
    }
   }
  }
 } while(0);
 $156 = $155;$__nf$2 = $__ns$2;
 while(1) {
  $125 = ($__nf$2>>>0)<($__ne>>>0);
  if (!($125)) {
   $145 = $156;$__nf$3 = $__nf$2;
   break;
  }
  $126 = HEAP8[$__nf$2>>0]|0;
  $127 = ($126<<24>>24)==(46);
  if ($127) {
   $__nf$2$lcssa15 = $__nf$2;
   label = 36;
   break;
  }
  $135 = HEAP32[$$pre$phiZ2D>>2]|0;
  $136 = (($135) + 44|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = (FUNCTION_TABLE_iii[$137 & 15]($0,$126)|0);
  $139 = HEAP32[$__oe>>2]|0;
  $140 = (($139) + 4|0);
  HEAP32[$__oe>>2] = $140;
  HEAP32[$139>>2] = $138;
  $141 = (($__nf$2) + 1|0);
  $156 = $140;$__nf$2 = $141;
 }
 if ((label|0) == 36) {
  $128 = HEAP32[$1>>2]|0;
  $129 = (($128) + 12|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (FUNCTION_TABLE_ii[$130 & 63]($1)|0);
  $132 = HEAP32[$__oe>>2]|0;
  $133 = (($132) + 4|0);
  HEAP32[$__oe>>2] = $133;
  HEAP32[$132>>2] = $131;
  $134 = (($__nf$2$lcssa15) + 1|0);
  $145 = $133;$__nf$3 = $134;
 }
 $142 = HEAP32[$0>>2]|0;
 $143 = (($142) + 48|0);
 $144 = HEAP32[$143>>2]|0;
 (FUNCTION_TABLE_iiiii[$144 & 7]($0,$__nf$3,$__ne,$145)|0);
 $146 = $__nf$3;
 $147 = (($13) - ($146))|0;
 $148 = HEAP32[$__oe>>2]|0;
 $149 = (($148) + ($147<<2)|0);
 HEAP32[$__oe>>2] = $149;
 $150 = ($__np|0)==($__ne|0);
 if ($150) {
  $storemerge = $149;
 } else {
  $151 = $__np;
  $152 = $__nb;
  $153 = (($151) - ($152))|0;
  $154 = (($__ob) + ($153<<2)|0);
  $storemerge = $154;
 }
 HEAP32[$__op>>2] = $storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$byval_copy = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $$byval_copy = sp + 308|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 312|0;
 $__nb = sp + 304|0;
 $__o = sp + 76|0;
 $__op = sp + 72|0;
 $__oe = sp + 68|0;
 $0 = sp + 64|0;
 $1 = sp + 60|0;
 $2 = sp + 56|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,5264,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = (($vararg_buffer) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $__v;
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $__v;
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 if ($16) {
  $17 = (__ZNSt3__16__clocEv()|0);
  if ($10) {
   $18 = (($__iob) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $19;
   $vararg_ptr8 = (($vararg_buffer5) + 8|0);
   HEAPF64[$vararg_ptr8>>3] = $__v;
   $20 = (__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$17,$__fmt,$vararg_buffer5)|0);
   $__nc$1 = $20;
  } else {
   HEAPF64[$vararg_buffer9>>3] = $__v;
   $21 = (__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$17,$__fmt,$vararg_buffer9)|0);
   $__nc$1 = $21;
  }
  $22 = HEAP32[$__nb>>2]|0;
  $23 = ($22|0)==(0|0);
  if ($23) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $25 = $22;$39 = $22;$__nc$2 = $__nc$1;
  }
 } else {
  $$pre1 = HEAP32[$__nb>>2]|0;
  $25 = $$pre1;$39 = 0;$__nc$2 = $__nc$0;
 }
 $24 = (($25) + ($__nc$2)|0);
 $26 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($25,$24,$__iob)|0);
 $27 = ($25|0)==($__nar|0);
 if ($27) {
  $31 = $__nar;$37 = 0;$__ob$0 = $__o;
 } else {
  $28 = $__nc$2 << 3;
  $29 = (_malloc($28)|0);
  $30 = ($29|0)==(0|0);
  if ($30) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $31 = $25;$37 = $29;$__ob$0 = $29;
  }
 }
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($31,$26,$24,$__ob$0,$__op,$__oe,$0);
 $32 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($32)|0);
 $33 = HEAP32[$__s>>2]|0;
 HEAP32[$2>>2] = $33;
 $34 = HEAP32[$__op>>2]|0;
 $35 = HEAP32[$__oe>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($1,$$byval_copy,$__ob$0,$34,$35,$__iob,$__fl);
 $36 = HEAP32[$1>>2]|0;
 HEAP32[$__s>>2] = $36;
 HEAP32[$agg$result>>2] = $36;
 $38 = ($37|0)==(0|0);
 if (!($38)) {
  _free($37);
 }
 _free($39);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__op$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $$byval_copy = sp;
 $__fmt = sp + 180|0;
 $__nar = sp + 160|0;
 $__o = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[5344+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[5344+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[5344+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[5344+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[5344+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[5344+5>>0]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$$byval_copy>>2] = $__v;
 $3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$2,$__fmt,$$byval_copy)|0);
 $4 = (($__nar) + ($3)|0);
 $5 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$4,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $6 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,6696)|0);
 $7 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
 $8 = HEAP32[$6>>2]|0;
 $9 = (($8) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 (FUNCTION_TABLE_iiiii[$10 & 7]($6,$__nar,$4,$__o)|0);
 $11 = (($__o) + ($3<<2)|0);
 $12 = ($5|0)==($4|0);
 if ($12) {
  $__op$0 = $11;
 } else {
  $13 = $__nar;
  $14 = $5;
  $15 = (($14) - ($13))|0;
  $16 = (($__o) + ($15<<2)|0);
  $__op$0 = $16;
 }
 $17 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $17;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$11,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i25 = 0, $$0$ph = 0, $$0$ph$be = 0, $$0$pn = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$lcssa64 = 0, $$lcssa65 = 0, $$lcssa65$lcssa = 0, $$lcssa65$lcssa74 = 0, $$lcssa66 = 0, $$lcssa67 = 0, $$lcssa68 = 0, $$lcssa69 = 0, $$lcssa71 = 0, $$lcssa72 = 0, $$lcssa73 = 0;
 var $$pre = 0, $$pre$i$i$i16 = 0, $$pre$i$i$i7 = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i2038 = 0, $$pre$i2$i$i2039 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $isascii1$i = 0, $isascii1$i23 = 0, $isascii1$i4 = 0, $or$cond = 0;
 var $sext = 0, $tmp$i$i22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp + 20|0;
 $$byval_copy = sp + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $4 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,6704)|0);
 $5 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
 HEAP32[$__err>>2] = 0;
 $6 = (($4) + 8|0);
 $$0$ph = $__fmtb;$$pre = 0;
 L1: while(1) {
  $7 = ($$0$ph|0)!=($__fmte|0);
  $8 = $$pre;
  while(1) {
   $9 = ($8|0)==(0);
   $or$cond = $7 & $9;
   $10 = HEAP32[$__b>>2]|0;
   if (!($or$cond)) {
    $$pre$i$i$i7 = $10;
    break L1;
   }
   $11 = ($10|0)==(0|0);
   if ($11) {
    $22 = 0;
   } else {
    $12 = (($10) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (($10) + 16|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($13|0)==($15|0);
    if ($16) {
     $17 = HEAP32[$10>>2]|0;
     $18 = (($17) + 36|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = (FUNCTION_TABLE_ii[$19 & 63]($10)|0);
     $21 = ($20|0)==(-1);
     if ($21) {
      HEAP32[$__b>>2] = 0;
      $22 = 0;
     } else {
      $22 = $10;
     }
    } else {
     $22 = $10;
    }
   }
   $23 = ($22|0)==(0|0);
   $24 = HEAP32[$__e>>2]|0;
   $25 = ($24|0)==(0|0);
   do {
    if ($25) {
     label = 13;
    } else {
     $26 = (($24) + 12|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (($24) + 16|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ($27|0)==($29|0);
     if ($30) {
      $31 = HEAP32[$24>>2]|0;
      $32 = (($31) + 36|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (FUNCTION_TABLE_ii[$33 & 63]($24)|0);
      $35 = ($34|0)==(-1);
      if ($35) {
       HEAP32[$__e>>2] = 0;
       label = 13;
       break;
      }
     }
     if ($23) {
      $185 = $24;
     } else {
      $$lcssa64 = $22;
      label = 14;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 13) {
    label = 0;
    if ($23) {
     $$lcssa64 = $22;
     label = 14;
     break L1;
    } else {
     $185 = 0;
    }
   }
   $36 = HEAP8[$$0$ph>>0]|0;
   $37 = HEAP32[$4>>2]|0;
   $38 = (($37) + 36|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (FUNCTION_TABLE_iiii[$39 & 31]($4,$36,0)|0);
   $41 = ($40<<24>>24)==(37);
   if ($41) {
    $$lcssa65 = $22;$$lcssa68 = $185;
    label = 16;
    break;
   }
   $63 = HEAP8[$$0$ph>>0]|0;
   $isascii1$i = ($63<<24>>24)>(-1);
   if ($isascii1$i) {
    $64 = $63 << 24 >> 24;
    $65 = HEAP32[$6>>2]|0;
    $66 = (($65) + ($64<<1)|0);
    $67 = HEAP16[$66>>1]|0;
    $68 = $67 & 8192;
    $69 = ($68<<16>>16)==(0);
    if (!($69)) {
     $$lcssa66 = $22;$$lcssa69 = $185;$$lcssa71 = $65;
     label = 26;
     break;
    }
   }
   $128 = (($22) + 12|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (($22) + 16|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = ($129|0)==($131|0);
   if ($132) {
    $133 = HEAP32[$22>>2]|0;
    $134 = (($133) + 36|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (FUNCTION_TABLE_ii[$135 & 63]($22)|0);
    $$0$i$i25 = $136;
   } else {
    $137 = HEAP8[$129>>0]|0;
    $138 = $137&255;
    $$0$i$i25 = $138;
   }
   $139 = $$0$i$i25&255;
   $140 = HEAP32[$4>>2]|0;
   $141 = (($140) + 12|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = (FUNCTION_TABLE_iii[$142 & 15]($4,$139)|0);
   $144 = HEAP8[$$0$ph>>0]|0;
   $145 = HEAP32[$4>>2]|0;
   $146 = (($145) + 12|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = (FUNCTION_TABLE_iii[$147 & 15]($4,$144)|0);
   $149 = ($143<<24>>24)==($148<<24>>24);
   if ($149) {
    $$lcssa67 = $22;$$lcssa72 = $128;$$lcssa73 = $130;
    label = 54;
    break;
   }
   HEAP32[$__err>>2] = 4;
   $8 = 4;
  }
  L29: do {
   if ((label|0) == 16) {
    label = 0;
    $42 = (($$0$ph) + 1|0);
    $43 = ($42|0)==($__fmte|0);
    if ($43) {
     $$lcssa65$lcssa = $$lcssa65;
     label = 17;
     break L1;
    }
    $44 = HEAP8[$42>>0]|0;
    $45 = HEAP32[$4>>2]|0;
    $46 = (($45) + 36|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (FUNCTION_TABLE_iiii[$47 & 31]($4,$44,0)|0);
    if ((($48<<24>>24) == 48) | (($48<<24>>24) == 69)) {
     $49 = (($$0$ph) + 2|0);
     $50 = ($49|0)==($__fmte|0);
     if ($50) {
      $$lcssa65$lcssa74 = $$lcssa65;
      label = 20;
      break L1;
     }
     $51 = HEAP8[$49>>0]|0;
     $52 = HEAP32[$4>>2]|0;
     $53 = (($52) + 36|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (FUNCTION_TABLE_iiii[$54 & 31]($4,$51,0)|0);
     $59 = $$lcssa65;$62 = $42;$__cmd$0 = $55;$__opt$0 = $48;
    } else {
     $59 = $$lcssa65;$62 = $$0$ph;$__cmd$0 = $48;$__opt$0 = 0;
    }
    $56 = HEAP32[$this>>2]|0;
    $57 = (($56) + 36|0);
    $58 = HEAP32[$57>>2]|0;
    HEAP32[$2>>2] = $59;
    HEAP32[$3>>2] = $$lcssa68;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
    FUNCTION_TABLE_viiiiiiiii[$58 & 3]($1,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
    $60 = HEAP32[$1>>2]|0;
    HEAP32[$__b>>2] = $60;
    $61 = (($62) + 2|0);
    $$0$ph$be = $61;
   }
   else if ((label|0) == 26) {
    label = 0;
    $$0$pn = $$0$ph;
    while(1) {
     $$2 = (($$0$pn) + 1|0);
     $70 = ($$2|0)==($__fmte|0);
     if ($70) {
      $$2$lcssa = $__fmte;
      break;
     }
     $71 = HEAP8[$$2>>0]|0;
     $isascii1$i4 = ($71<<24>>24)>(-1);
     if (!($isascii1$i4)) {
      $$2$lcssa = $$2;
      break;
     }
     $72 = $71 << 24 >> 24;
     $73 = (($$lcssa71) + ($72<<1)|0);
     $74 = HEAP16[$73>>1]|0;
     $75 = $74 & 8192;
     $76 = ($75<<16>>16)==(0);
     if ($76) {
      $$2$lcssa = $$2;
      break;
     } else {
      $$0$pn = $$2;
     }
    }
    $$pre$i$i$i16 = $$lcssa66;$$pre$i2$i$i20 = $$lcssa69;$90 = $$lcssa69;
    while(1) {
     $77 = ($$pre$i$i$i16|0)==(0|0);
     if ($77) {
      $88 = 0;
     } else {
      $78 = (($$pre$i$i$i16) + 12|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = (($$pre$i$i$i16) + 16|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = ($79|0)==($81|0);
      if ($82) {
       $83 = HEAP32[$$pre$i$i$i16>>2]|0;
       $84 = (($83) + 36|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = (FUNCTION_TABLE_ii[$85 & 63]($$pre$i$i$i16)|0);
       $87 = ($86|0)==(-1);
       if ($87) {
        HEAP32[$__b>>2] = 0;
        $88 = 0;
       } else {
        $88 = $$pre$i$i$i16;
       }
      } else {
       $88 = $$pre$i$i$i16;
      }
     }
     $89 = ($88|0)==(0|0);
     $91 = ($90|0)==(0|0);
     do {
      if ($91) {
       $$pre$i2$i$i2039 = $$pre$i2$i$i20;
       label = 40;
      } else {
       $92 = (($90) + 12|0);
       $93 = HEAP32[$92>>2]|0;
       $94 = (($90) + 16|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = ($93|0)==($95|0);
       if (!($96)) {
        if ($89) {
         $$pre$i2$i$i2038 = $$pre$i2$i$i20;$186 = $90;
         break;
        } else {
         $$0$ph$be = $$2$lcssa;
         break L29;
        }
       }
       $97 = HEAP32[$90>>2]|0;
       $98 = (($97) + 36|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = (FUNCTION_TABLE_ii[$99 & 63]($90)|0);
       $101 = ($100|0)==(-1);
       if ($101) {
        HEAP32[$__e>>2] = 0;
        $$pre$i2$i$i2039 = 0;
        label = 40;
        break;
       } else {
        $102 = ($$pre$i2$i$i20|0)==(0|0);
        $tmp$i$i22 = $89 ^ $102;
        if ($tmp$i$i22) {
         $$pre$i2$i$i2038 = $$pre$i2$i$i20;$186 = $$pre$i2$i$i20;
         break;
        } else {
         $$0$ph$be = $$2$lcssa;
         break L29;
        }
       }
      }
     } while(0);
     if ((label|0) == 40) {
      label = 0;
      if ($89) {
       $$0$ph$be = $$2$lcssa;
       break L29;
      } else {
       $$pre$i2$i$i2038 = $$pre$i2$i$i2039;$186 = 0;
      }
     }
     $103 = (($88) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = (($88) + 16|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($104|0)==($106|0);
     if ($107) {
      $108 = HEAP32[$88>>2]|0;
      $109 = (($108) + 36|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = (FUNCTION_TABLE_ii[$110 & 63]($88)|0);
      $$0$i$i = $111;
     } else {
      $112 = HEAP8[$104>>0]|0;
      $113 = $112&255;
      $$0$i$i = $113;
     }
     $114 = $$0$i$i&255;
     $isascii1$i23 = ($114<<24>>24)>(-1);
     if (!($isascii1$i23)) {
      $$0$ph$be = $$2$lcssa;
      break L29;
     }
     $sext = $$0$i$i << 24;
     $115 = $sext >> 24;
     $116 = HEAP32[$6>>2]|0;
     $117 = (($116) + ($115<<1)|0);
     $118 = HEAP16[$117>>1]|0;
     $119 = $118 & 8192;
     $120 = ($119<<16>>16)==(0);
     if ($120) {
      $$0$ph$be = $$2$lcssa;
      break L29;
     }
     $121 = HEAP32[$103>>2]|0;
     $122 = HEAP32[$105>>2]|0;
     $123 = ($121|0)==($122|0);
     if ($123) {
      $124 = HEAP32[$88>>2]|0;
      $125 = (($124) + 40|0);
      $126 = HEAP32[$125>>2]|0;
      (FUNCTION_TABLE_ii[$126 & 63]($88)|0);
      $$pre$i$i$i16 = $88;$$pre$i2$i$i20 = $$pre$i2$i$i2038;$90 = $186;
      continue;
     } else {
      $127 = (($121) + 1|0);
      HEAP32[$103>>2] = $127;
      $$pre$i$i$i16 = $88;$$pre$i2$i$i20 = $$pre$i2$i$i2038;$90 = $186;
      continue;
     }
    }
   }
   else if ((label|0) == 54) {
    label = 0;
    $150 = HEAP32[$$lcssa72>>2]|0;
    $151 = HEAP32[$$lcssa73>>2]|0;
    $152 = ($150|0)==($151|0);
    if ($152) {
     $153 = HEAP32[$$lcssa67>>2]|0;
     $154 = (($153) + 40|0);
     $155 = HEAP32[$154>>2]|0;
     (FUNCTION_TABLE_ii[$155 & 63]($$lcssa67)|0);
    } else {
     $156 = (($150) + 1|0);
     HEAP32[$$lcssa72>>2] = $156;
    }
    $157 = (($$0$ph) + 1|0);
    $$0$ph$be = $157;
   }
  } while(0);
  $$pre$pre = HEAP32[$__err>>2]|0;
  $$0$ph = $$0$ph$be;$$pre = $$pre$pre;
 }
 if ((label|0) == 14) {
  HEAP32[$__err>>2] = 4;
  $$pre$i$i$i7 = $$lcssa64;
 }
 else if ((label|0) == 17) {
  HEAP32[$__err>>2] = 4;
  $$pre$i$i$i7 = $$lcssa65$lcssa;
 }
 else if ((label|0) == 20) {
  HEAP32[$__err>>2] = 4;
  $$pre$i$i$i7 = $$lcssa65$lcssa74;
 }
 $158 = ($$pre$i$i$i7|0)==(0|0);
 if ($158) {
  $169 = 0;
 } else {
  $159 = (($$pre$i$i$i7) + 12|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = (($$pre$i$i$i7) + 16|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = ($160|0)==($162|0);
  if ($163) {
   $164 = HEAP32[$$pre$i$i$i7>>2]|0;
   $165 = (($164) + 36|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = (FUNCTION_TABLE_ii[$166 & 63]($$pre$i$i$i7)|0);
   $168 = ($167|0)==(-1);
   if ($168) {
    HEAP32[$__b>>2] = 0;
    $169 = 0;
   } else {
    $169 = $$pre$i$i$i7;
   }
  } else {
   $169 = $$pre$i$i$i7;
  }
 }
 $170 = ($169|0)==(0|0);
 $171 = HEAP32[$__e>>2]|0;
 $172 = ($171|0)==(0|0);
 do {
  if ($172) {
   label = 68;
  } else {
   $173 = (($171) + 12|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = (($171) + 16|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = ($174|0)==($176|0);
   if ($177) {
    $178 = HEAP32[$171>>2]|0;
    $179 = (($178) + 36|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = (FUNCTION_TABLE_ii[$180 & 63]($171)|0);
    $182 = ($181|0)==(-1);
    if ($182) {
     HEAP32[$__e>>2] = 0;
     label = 68;
     break;
    }
   }
   if (!($170)) {
    label = 69;
   }
  }
 } while(0);
 if ((label|0) == 68) {
  if ($170) {
   label = 69;
  }
 }
 if ((label|0) == 69) {
  $183 = HEAP32[$__err>>2]|0;
  $184 = $183 | 2;
  HEAP32[$__err>>2] = $184;
 }
 HEAP32[$agg$result>>2] = $169;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,5448,((5448 + 8|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 63]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $16 = (($6) + 1|0);
  $17 = (($6) + 1|0);
  $18 = $9&255;
  $19 = $18 >>> 1;
  $21 = $17;$22 = $19;$23 = $16;
 } else {
  $12 = (($6) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($6) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $21 = $13;$22 = $15;$23 = $13;
 }
 $20 = (($21) + ($22)|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$23,$20);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $2 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,6704)|0);
 $3 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
 $4 = (($__tm) + 24|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $5;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$4,$__b,$$byval_copy,$__err,$2);
 $6 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 63]($1)|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = (($4) + 168|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $7 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$4,$6,$__ct,$__err,0)|0);
 $8 = $7;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(168);
 if ($11) {
  $12 = (($10|0) / 12)&-1;
  $13 = (($12|0) % 7)&-1;
  HEAP32[$__w>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $2 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,6704)|0);
 $3 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
 $4 = (($__tm) + 16|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $5;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$4,$__b,$$byval_copy,$__err,$2);
 $6 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 63]($1)|0);
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = (($5) + 288|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$7,$__ct,$__err,0)|0);
 $9 = $8;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)<(288);
 if ($12) {
  $13 = (($11|0) / 12)&-1;
  $14 = (($13|0) % 12)&-1;
  HEAP32[$__m>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $2 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,6704)|0);
 $3 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
 $4 = (($__tm) + 20|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $5;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$4,$__b,$$byval_copy,$__err,$2);
 $6 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ($2|0)<(69);
  if ($6) {
   $7 = (($2) + 2000)|0;
   $__t$0 = $7;
  } else {
   $$off = (($2) + -69)|0;
   $8 = ($$off>>>0)<(31);
   $9 = (($2) + 1900)|0;
   $$ = $8 ? $9 : $2;
   $__t$0 = $$;
  }
  $10 = (($__t$0) + -1900)|0;
  HEAP32[$__y>>2] = $10;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$byval_copy26 = 0, $$byval_copy30 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $$byval_copy30 = sp + 160|0;
 $$byval_copy26 = sp + 156|0;
 $1 = sp + 152|0;
 $2 = sp + 148|0;
 $3 = sp + 144|0;
 $4 = sp + 140|0;
 $5 = sp + 136|0;
 $6 = sp + 132|0;
 $7 = sp + 128|0;
 $8 = sp + 124|0;
 $9 = sp + 120|0;
 $10 = sp + 116|0;
 $11 = sp + 112|0;
 $12 = sp + 108|0;
 $13 = sp + 104|0;
 $14 = sp + 100|0;
 $15 = sp + 96|0;
 $16 = sp + 92|0;
 $17 = sp + 88|0;
 $18 = sp + 84|0;
 $19 = sp + 80|0;
 $20 = sp + 76|0;
 $21 = sp + 72|0;
 $22 = sp + 68|0;
 $23 = sp + 64|0;
 $24 = sp + 60|0;
 $25 = sp + 56|0;
 $26 = sp + 52|0;
 $27 = sp + 48|0;
 $28 = sp + 44|0;
 $29 = sp + 40|0;
 $30 = sp + 36|0;
 $31 = sp + 32|0;
 $32 = sp + 28|0;
 $33 = sp + 24|0;
 $34 = sp + 20|0;
 $35 = sp + 16|0;
 $36 = sp + 12|0;
 $37 = sp + 8|0;
 $38 = sp + 4|0;
 $39 = sp;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $40 = (__ZNKSt3__16locale9use_facetERNS0_2idE($1,6704)|0);
 $41 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($41)|0);
 $42 = $__fmt << 24 >> 24;
 do {
  switch ($42|0) {
  case 73:  {
   $80 = (($__tm) + 8|0);
   $81 = HEAP32[$__e>>2]|0;
   HEAP32[$15>>2] = $81;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$15+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$80,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 82:  {
   $94 = HEAP32[$__b>>2]|0;
   HEAP32[$25>>2] = $94;
   $95 = HEAP32[$__e>>2]|0;
   HEAP32[$26>>2] = $95;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$25+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$26+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($24,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,5488,((5488 + 5|0)));
   $96 = HEAP32[$24>>2]|0;
   HEAP32[$__b>>2] = $96;
   label = 32;
   break;
  }
  case 77:  {
   $86 = (($__tm) + 4|0);
   $87 = HEAP32[$__e>>2]|0;
   HEAP32[$18>>2] = $87;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$18+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$86,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 109:  {
   $84 = (($__tm) + 16|0);
   $85 = HEAP32[$__e>>2]|0;
   HEAP32[$17>>2] = $85;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$17+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$84,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 104: case 66: case 98:  {
   $45 = (($__tm) + 16|0);
   $46 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $46;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$3+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$45,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 65: case 97:  {
   $43 = (($__tm) + 24|0);
   $44 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $44;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$2+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$43,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 106:  {
   $82 = (($__tm) + 28|0);
   $83 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $83;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$16+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$82,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 114:  {
   $91 = HEAP32[$__b>>2]|0;
   HEAP32[$22>>2] = $91;
   $92 = HEAP32[$__e>>2]|0;
   HEAP32[$23>>2] = $92;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$22+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$23+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($21,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,5472,((5472 + 11|0)));
   $93 = HEAP32[$21>>2]|0;
   HEAP32[$__b>>2] = $93;
   label = 32;
   break;
  }
  case 68:  {
   $72 = HEAP32[$__b>>2]|0;
   HEAP32[$9>>2] = $72;
   $73 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $73;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$9+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$10+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($8,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,5456,((5456 + 8|0)));
   $74 = HEAP32[$8>>2]|0;
   HEAP32[$__b>>2] = $74;
   label = 32;
   break;
  }
  case 37:  {
   $135 = HEAP32[$__e>>2]|0;
   HEAP32[$39>>2] = $135;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$39+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 119:  {
   $101 = (($__tm) + 24|0);
   $102 = HEAP32[$__e>>2]|0;
   HEAP32[$31>>2] = $102;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$31+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$101,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 84:  {
   $98 = HEAP32[$__b>>2]|0;
   HEAP32[$29>>2] = $98;
   $99 = HEAP32[$__e>>2]|0;
   HEAP32[$30>>2] = $99;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$29+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$30+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($28,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,5496,((5496 + 8|0)));
   $100 = HEAP32[$28>>2]|0;
   HEAP32[$__b>>2] = $100;
   label = 32;
   break;
  }
  case 112:  {
   $89 = (($__tm) + 8|0);
   $90 = HEAP32[$__e>>2]|0;
   HEAP32[$20>>2] = $90;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$20+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$89,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 116: case 110:  {
   $88 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $88;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$19+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 88:  {
   $108 = (($this) + 8|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = (($109) + 24|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (FUNCTION_TABLE_ii[$111 & 63]($108)|0);
   $113 = HEAP32[$__b>>2]|0;
   HEAP32[$35>>2] = $113;
   $114 = HEAP32[$__e>>2]|0;
   HEAP32[$36>>2] = $114;
   $115 = HEAP8[$112>>0]|0;
   $116 = $115 & 1;
   $117 = ($116<<24>>24)==(0);
   if ($117) {
    $122 = (($112) + 1|0);
    $123 = (($112) + 1|0);
    $124 = $115&255;
    $125 = $124 >>> 1;
    $127 = $123;$128 = $125;$129 = $122;
   } else {
    $118 = (($112) + 8|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = (($112) + 4|0);
    $121 = HEAP32[$120>>2]|0;
    $127 = $119;$128 = $121;$129 = $119;
   }
   $126 = (($127) + ($128)|0);
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$35+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$36+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($34,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,$129,$126);
   $130 = HEAP32[$34>>2]|0;
   HEAP32[$__b>>2] = $130;
   label = 32;
   break;
  }
  case 99:  {
   $47 = (($this) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (FUNCTION_TABLE_ii[$50 & 63]($47)|0);
   $52 = HEAP32[$__b>>2]|0;
   HEAP32[$5>>2] = $52;
   $53 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $53;
   $54 = HEAP8[$51>>0]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $61 = (($51) + 1|0);
    $62 = (($51) + 1|0);
    $63 = $54&255;
    $64 = $63 >>> 1;
    $66 = $62;$67 = $64;$68 = $61;
   } else {
    $57 = (($51) + 8|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (($51) + 4|0);
    $60 = HEAP32[$59>>2]|0;
    $66 = $58;$67 = $60;$68 = $58;
   }
   $65 = (($66) + ($67)|0);
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$5+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$6+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($4,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,$68,$65);
   $69 = HEAP32[$4>>2]|0;
   HEAP32[$__b>>2] = $69;
   label = 32;
   break;
  }
  case 83:  {
   $97 = HEAP32[$__e>>2]|0;
   HEAP32[$27>>2] = $97;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$27+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__tm,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 101: case 100:  {
   $70 = (($__tm) + 12|0);
   $71 = HEAP32[$__e>>2]|0;
   HEAP32[$7>>2] = $71;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$7+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$70,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 89:  {
   $133 = (($__tm) + 20|0);
   $134 = HEAP32[$__e>>2]|0;
   HEAP32[$38>>2] = $134;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$38+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$133,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 121:  {
   $131 = (($__tm) + 20|0);
   $132 = HEAP32[$__e>>2]|0;
   HEAP32[$37>>2] = $132;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$37+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$131,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 120:  {
   $103 = HEAP32[$this>>2]|0;
   $104 = (($103) + 20|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = HEAP32[$__b>>2]|0;
   HEAP32[$32>>2] = $106;
   $107 = HEAP32[$__e>>2]|0;
   HEAP32[$33>>2] = $107;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$32+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$33+0>>2]|0;
   FUNCTION_TABLE_viiiiiii[$105 & 63]($agg$result,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm);
   break;
  }
  case 70:  {
   $75 = HEAP32[$__b>>2]|0;
   HEAP32[$12>>2] = $75;
   $76 = HEAP32[$__e>>2]|0;
   HEAP32[$13>>2] = $76;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$12+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$13+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($11,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,5464,((5464 + 8|0)));
   $77 = HEAP32[$11>>2]|0;
   HEAP32[$__b>>2] = $77;
   label = 32;
   break;
  }
  case 72:  {
   $78 = (($__tm) + 8|0);
   $79 = HEAP32[$__e>>2]|0;
   HEAP32[$14>>2] = $79;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$14+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$78,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  default: {
   $136 = HEAP32[$__err>>2]|0;
   $137 = $136 | 4;
   HEAP32[$__err>>2] = $137;
   label = 32;
  }
  }
 } while(0);
 if ((label|0) == 32) {
  $138 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $138;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(31);
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__d>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(24);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__h>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(12);
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__h>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,3)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(366);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__d>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(13);
 $or$cond = $6 & $5;
 if ($or$cond) {
  $7 = (($2) + -1)|0;
  HEAP32[$__m>>2] = $7;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(60);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__m>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $isascii1$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__ct) + 8|0);
 L1: while(1) {
  $1 = HEAP32[$__b>>2]|0;
  $2 = ($1|0)==(0|0);
  do {
   if ($2) {
    $13 = 0;
   } else {
    $3 = (($1) + 12|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (($1) + 16|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($4|0)==($6|0);
    if ($7) {
     $8 = HEAP32[$1>>2]|0;
     $9 = (($8) + 36|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (FUNCTION_TABLE_ii[$10 & 63]($1)|0);
     $12 = ($11|0)==(-1);
     if ($12) {
      HEAP32[$__b>>2] = 0;
      $13 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $13 = $$pre$i$i$i;
      break;
     }
    } else {
     $13 = $1;
    }
   }
  } while(0);
  $14 = ($13|0)==(0|0);
  $15 = HEAP32[$__e>>2]|0;
  $16 = ($15|0)==(0|0);
  do {
   if ($16) {
    label = 12;
   } else {
    $17 = (($15) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($15) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($18|0)==($20|0);
    if (!($21)) {
     if ($14) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
    $22 = HEAP32[$15>>2]|0;
    $23 = (($22) + 36|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (FUNCTION_TABLE_ii[$24 & 63]($15)|0);
    $26 = ($25|0)==(-1);
    if ($26) {
     HEAP32[$__e>>2] = 0;
     label = 12;
     break;
    } else {
     if ($14) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   if ($14) {
    $$pre$i2$i$i6 = 0;
    break;
   } else {
    $83 = 0;
   }
  }
  $27 = HEAP32[$__b>>2]|0;
  $28 = (($27) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($29|0)==($31|0);
  if ($32) {
   $33 = HEAP32[$27>>2]|0;
   $34 = (($33) + 36|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (FUNCTION_TABLE_ii[$35 & 63]($27)|0);
   $$0$i$i = $36;
  } else {
   $37 = HEAP8[$29>>0]|0;
   $38 = $37&255;
   $$0$i$i = $38;
  }
  $39 = $$0$i$i&255;
  $isascii1$i = ($39<<24>>24)>(-1);
  if (!($isascii1$i)) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $sext = $$0$i$i << 24;
  $40 = $sext >> 24;
  $41 = HEAP32[$0>>2]|0;
  $42 = (($41) + ($40<<1)|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 & 8192;
  $45 = ($44<<16>>16)==(0);
  if ($45) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $46 = HEAP32[$__b>>2]|0;
  $47 = (($46) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($46) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($48|0)==($50|0);
  if ($51) {
   $52 = HEAP32[$46>>2]|0;
   $53 = (($52) + 40|0);
   $54 = HEAP32[$53>>2]|0;
   (FUNCTION_TABLE_ii[$54 & 63]($46)|0);
   continue;
  } else {
   $55 = (($48) + 1|0);
   HEAP32[$47>>2] = $55;
   continue;
  }
 }
 $56 = HEAP32[$__b>>2]|0;
 $57 = ($56|0)==(0|0);
 do {
  if ($57) {
   $68 = 0;
  } else {
   $58 = (($56) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($56) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$56>>2]|0;
    $64 = (($63) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 63]($56)|0);
    $67 = ($66|0)==(-1);
    if ($67) {
     HEAP32[$__b>>2] = 0;
     $68 = 0;
     break;
    } else {
     $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
     $68 = $$pre$i$i$i2;
     break;
    }
   } else {
    $68 = $56;
   }
  }
 } while(0);
 $69 = ($68|0)==(0|0);
 $70 = ($$pre$i2$i$i6|0)==(0|0);
 do {
  if ($70) {
   label = 32;
  } else {
   $71 = (($$pre$i2$i$i6) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($$pre$i2$i$i6) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($72|0)==($74|0);
   if ($75) {
    $76 = HEAP32[$$pre$i2$i$i6>>2]|0;
    $77 = (($76) + 36|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (FUNCTION_TABLE_ii[$78 & 63]($$pre$i2$i$i6)|0);
    $80 = ($79|0)==(-1);
    if ($80) {
     HEAP32[$__e>>2] = 0;
     label = 32;
     break;
    }
   }
   if (!($69)) {
    label = 33;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  if ($69) {
   label = 33;
  }
 }
 if ((label|0) == 33) {
  $81 = HEAP32[$__err>>2]|0;
  $82 = $81 | 2;
  HEAP32[$__err>>2] = $82;
 }
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 63]($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $23 = $12;
 } else {
  $9 = (($5) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $23 = $10;
 }
 $13 = (($5) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $19 = $14&255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = (($5) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $22 = $18;
 }
 $21 = (0 - ($22))|0;
 $24 = ($23|0)==($21|0);
 do {
  if ($24) {
   $25 = HEAP32[$__err>>2]|0;
   $26 = $25 | 4;
   HEAP32[$__err>>2] = $26;
  } else {
   $27 = HEAP32[$__e>>2]|0;
   HEAP32[$0>>2] = $27;
   $28 = (($5) + 24|0);
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
   $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$28,$__ct,$__err,0)|0);
   $30 = ($29|0)==($5|0);
   $31 = HEAP32[$__h>>2]|0;
   $32 = ($31|0)==(12);
   $or$cond = $30 & $32;
   if ($or$cond) {
    HEAP32[$__h>>2] = 0;
    break;
   }
   $33 = $29;
   $34 = $5;
   $35 = (($33) - ($34))|0;
   $36 = ($35|0)==(12);
   $37 = ($31|0)<(12);
   $or$cond3 = $37 & $36;
   if ($or$cond3) {
    $38 = (($31) + 12)|0;
    HEAP32[$__h>>2] = $38;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(61);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__s>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,1)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(7);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__w>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (($2) + -1900)|0;
  HEAP32[$__y>>2] = $6;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i611 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $12 = 0;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 63]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $12 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $12 = $$pre$i$i$i;
     break;
    }
   } else {
    $12 = $0;
   }
  }
 } while(0);
 $13 = ($12|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = (($14) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($14) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = (($21) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 63]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($13) {
    $$pre$i2$i$i611 = $14;
    label = 13;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($13) {
   label = 12;
  } else {
   $$pre$i2$i$i611 = 0;
   label = 13;
  }
 }
 L16: do {
  if ((label|0) == 12) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
  }
  else if ((label|0) == 13) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = (($28) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($28) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = (($34) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 63]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP8[$30>>0]|0;
    $39 = $38&255;
    $$0$i$i = $39;
   }
   $40 = $$0$i$i&255;
   $41 = HEAP32[$__ct>>2]|0;
   $42 = (($41) + 36|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (FUNCTION_TABLE_iiii[$43 & 31]($__ct,$40,0)|0);
   $45 = ($44<<24>>24)==(37);
   if (!($45)) {
    $46 = HEAP32[$__err>>2]|0;
    $47 = $46 | 4;
    HEAP32[$__err>>2] = $47;
    break;
   }
   $48 = HEAP32[$__b>>2]|0;
   $49 = (($48) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($48) + 16|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($50|0)==($52|0);
   if ($53) {
    $55 = HEAP32[$48>>2]|0;
    $56 = (($55) + 40|0);
    $57 = HEAP32[$56>>2]|0;
    (FUNCTION_TABLE_ii[$57 & 63]($48)|0);
    $$pre = HEAP32[$__b>>2]|0;
    $58 = ($$pre|0)==(0|0);
    if ($58) {
     $70 = 0;
    } else {
     $60 = $$pre;
     label = 21;
    }
   } else {
    $54 = (($50) + 1|0);
    HEAP32[$49>>2] = $54;
    $60 = $48;
    label = 21;
   }
   do {
    if ((label|0) == 21) {
     $59 = (($60) + 12|0);
     $61 = HEAP32[$59>>2]|0;
     $62 = (($60) + 16|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = ($61|0)==($63|0);
     if ($64) {
      $65 = HEAP32[$60>>2]|0;
      $66 = (($65) + 36|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = (FUNCTION_TABLE_ii[$67 & 63]($60)|0);
      $69 = ($68|0)==(-1);
      if ($69) {
       HEAP32[$__b>>2] = 0;
       $70 = 0;
       break;
      } else {
       $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
       $70 = $$pre$i$i$i2;
       break;
      }
     } else {
      $70 = $60;
     }
    }
   } while(0);
   $71 = ($70|0)==(0|0);
   $72 = ($$pre$i2$i$i611|0)==(0|0);
   do {
    if ($72) {
     label = 30;
    } else {
     $73 = (($$pre$i2$i$i611) + 12|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = (($$pre$i2$i$i611) + 16|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($74|0)==($76|0);
     if ($77) {
      $78 = HEAP32[$$pre$i2$i$i611>>2]|0;
      $79 = (($78) + 36|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = (FUNCTION_TABLE_ii[$80 & 63]($$pre$i2$i$i611)|0);
      $82 = ($81|0)==(-1);
      if ($82) {
       HEAP32[$__e>>2] = 0;
       label = 30;
       break;
      }
     }
     if ($71) {
      break L16;
     }
    }
   } while(0);
   if ((label|0) == 30) {
    if (!($71)) {
     break;
    }
   }
   $83 = HEAP32[$__err>>2]|0;
   $84 = $83 | 2;
   HEAP32[$__err>>2] = $84;
  }
 } while(0);
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$0$i$i1$i$i25 = 0, $$0$i$i16 = 0, $$0$ph = 0, $$0$ph$be = 0, $$0$pn = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$lcssa68 = 0, $$lcssa69 = 0, $$lcssa69$lcssa = 0, $$lcssa69$lcssa77 = 0, $$lcssa70 = 0;
 var $$lcssa71 = 0, $$lcssa72 = 0, $$lcssa73 = 0, $$lcssa75 = 0, $$lcssa76 = 0, $$pre = 0, $$pre$i$i$i21 = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i12 = 0, $$pre$i3$i$i1243 = 0, $$pre$i3$i$i1244 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $or$cond = 0, $phitmp$i4$i$i13 = 0, $tmp$i$i15 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp + 20|0;
 $$byval_copy = sp + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $4 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,6696)|0);
 $5 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
 HEAP32[$__err>>2] = 0;
 $$0$ph = $__fmtb;$$pre = 0;
 L1: while(1) {
  $6 = ($$0$ph|0)!=($__fmte|0);
  $7 = $$pre;
  while(1) {
   $8 = ($7|0)==(0);
   $or$cond = $6 & $8;
   $9 = HEAP32[$__b>>2]|0;
   if (!($or$cond)) {
    $$pre$i$i$i21 = $9;
    break L1;
   }
   $10 = ($9|0)==(0|0);
   if ($10) {
    $122 = 0;$178 = 1;
   } else {
    $11 = (($9) + 12|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (($9) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($12|0)==($14|0);
    if ($15) {
     $16 = HEAP32[$9>>2]|0;
     $17 = (($16) + 36|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (FUNCTION_TABLE_ii[$18 & 63]($9)|0);
     $$0$i$i$i$i = $19;
    } else {
     $20 = HEAP32[$12>>2]|0;
     $$0$i$i$i$i = $20;
    }
    $21 = ($$0$i$i$i$i|0)==(-1);
    if ($21) {
     HEAP32[$__b>>2] = 0;
     $122 = 0;$178 = 1;
    } else {
     $122 = $9;$178 = 0;
    }
   }
   $22 = HEAP32[$__e>>2]|0;
   $23 = ($22|0)==(0|0);
   do {
    if ($23) {
     label = 16;
    } else {
     $24 = (($22) + 12|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = (($22) + 16|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ($25|0)==($27|0);
     if ($28) {
      $29 = HEAP32[$22>>2]|0;
      $30 = (($29) + 36|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (FUNCTION_TABLE_ii[$31 & 63]($22)|0);
      $$0$i$i1$i$i = $32;
     } else {
      $33 = HEAP32[$25>>2]|0;
      $$0$i$i1$i$i = $33;
     }
     $34 = ($$0$i$i1$i$i|0)==(-1);
     if ($34) {
      HEAP32[$__e>>2] = 0;
      label = 16;
      break;
     } else {
      if ($178) {
       $179 = $22;
       break;
      } else {
       $$lcssa68 = $122;
       label = 18;
       break L1;
      }
     }
    }
   } while(0);
   if ((label|0) == 16) {
    label = 0;
    if ($178) {
     $$lcssa68 = $122;
     label = 18;
     break L1;
    } else {
     $179 = 0;
    }
   }
   $35 = HEAP32[$$0$ph>>2]|0;
   $36 = HEAP32[$4>>2]|0;
   $37 = (($36) + 52|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (FUNCTION_TABLE_iiii[$38 & 31]($4,$35,0)|0);
   $40 = ($39<<24>>24)==(37);
   if ($40) {
    $$lcssa69 = $122;$$lcssa72 = $179;
    label = 20;
    break;
   }
   $62 = HEAP32[$$0$ph>>2]|0;
   $63 = HEAP32[$4>>2]|0;
   $64 = (($63) + 12|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (FUNCTION_TABLE_iiii[$65 & 31]($4,8192,$62)|0);
   if ($66) {
    $$lcssa70 = $122;$$lcssa73 = $179;
    label = 29;
    break;
   }
   $121 = (($122) + 12|0);
   $123 = HEAP32[$121>>2]|0;
   $124 = (($122) + 16|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ($123|0)==($125|0);
   if ($126) {
    $127 = HEAP32[$122>>2]|0;
    $128 = (($127) + 36|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (FUNCTION_TABLE_ii[$129 & 63]($122)|0);
    $$0$i$i16 = $130;
   } else {
    $131 = HEAP32[$123>>2]|0;
    $$0$i$i16 = $131;
   }
   $132 = HEAP32[$4>>2]|0;
   $133 = (($132) + 28|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = (FUNCTION_TABLE_iii[$134 & 15]($4,$$0$i$i16)|0);
   $136 = HEAP32[$$0$ph>>2]|0;
   $137 = HEAP32[$4>>2]|0;
   $138 = (($137) + 28|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = (FUNCTION_TABLE_iii[$139 & 15]($4,$136)|0);
   $141 = ($135|0)==($140|0);
   if ($141) {
    $$lcssa71 = $122;$$lcssa75 = $121;$$lcssa76 = $124;
    label = 58;
    break;
   }
   HEAP32[$__err>>2] = 4;
   $7 = 4;
  }
  L33: do {
   if ((label|0) == 20) {
    label = 0;
    $41 = (($$0$ph) + 4|0);
    $42 = ($41|0)==($__fmte|0);
    if ($42) {
     $$lcssa69$lcssa = $$lcssa69;
     label = 21;
     break L1;
    }
    $43 = HEAP32[$41>>2]|0;
    $44 = HEAP32[$4>>2]|0;
    $45 = (($44) + 52|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (FUNCTION_TABLE_iiii[$46 & 31]($4,$43,0)|0);
    if ((($47<<24>>24) == 48) | (($47<<24>>24) == 69)) {
     $48 = (($$0$ph) + 8|0);
     $49 = ($48|0)==($__fmte|0);
     if ($49) {
      $$lcssa69$lcssa77 = $$lcssa69;
      label = 24;
      break L1;
     }
     $50 = HEAP32[$48>>2]|0;
     $51 = HEAP32[$4>>2]|0;
     $52 = (($51) + 52|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = (FUNCTION_TABLE_iiii[$53 & 31]($4,$50,0)|0);
     $58 = $$lcssa69;$61 = $41;$__cmd$0 = $54;$__opt$0 = $47;
    } else {
     $58 = $$lcssa69;$61 = $$0$ph;$__cmd$0 = $47;$__opt$0 = 0;
    }
    $55 = HEAP32[$this>>2]|0;
    $56 = (($55) + 36|0);
    $57 = HEAP32[$56>>2]|0;
    HEAP32[$2>>2] = $58;
    HEAP32[$3>>2] = $$lcssa72;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
    FUNCTION_TABLE_viiiiiiiii[$57 & 3]($1,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
    $59 = HEAP32[$1>>2]|0;
    HEAP32[$__b>>2] = $59;
    $60 = (($61) + 8|0);
    $$0$ph$be = $60;
   }
   else if ((label|0) == 29) {
    label = 0;
    $$0$pn = $$0$ph;
    while(1) {
     $$2 = (($$0$pn) + 4|0);
     $67 = ($$2|0)==($__fmte|0);
     if ($67) {
      $$2$lcssa = $__fmte;
      break;
     }
     $68 = HEAP32[$$2>>2]|0;
     $69 = HEAP32[$4>>2]|0;
     $70 = (($69) + 12|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = (FUNCTION_TABLE_iiii[$71 & 31]($4,8192,$68)|0);
     if ($72) {
      $$0$pn = $$2;
     } else {
      $$2$lcssa = $$2;
      break;
     }
    }
    $$pre$i$i$i6 = $$lcssa70;$$pre$i3$i$i12 = $$lcssa73;$85 = $$lcssa73;
    while(1) {
     $73 = ($$pre$i$i$i6|0)==(0|0);
     if ($73) {
      $100 = 0;$98 = 1;
     } else {
      $74 = (($$pre$i$i$i6) + 12|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = (($$pre$i$i$i6) + 16|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = ($75|0)==($77|0);
      if ($78) {
       $79 = HEAP32[$$pre$i$i$i6>>2]|0;
       $80 = (($79) + 36|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = (FUNCTION_TABLE_ii[$81 & 63]($$pre$i$i$i6)|0);
       $$0$i$i$i$i4 = $82;
      } else {
       $83 = HEAP32[$75>>2]|0;
       $$0$i$i$i$i4 = $83;
      }
      $84 = ($$0$i$i$i$i4|0)==(-1);
      if ($84) {
       HEAP32[$__b>>2] = 0;
       $100 = 0;$98 = 1;
      } else {
       $100 = $$pre$i$i$i6;$98 = 0;
      }
     }
     $86 = ($85|0)==(0|0);
     do {
      if ($86) {
       $$pre$i3$i$i1244 = $$pre$i3$i$i12;
       label = 45;
      } else {
       $87 = (($85) + 12|0);
       $88 = HEAP32[$87>>2]|0;
       $89 = (($85) + 16|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = ($88|0)==($90|0);
       if ($91) {
        $92 = HEAP32[$85>>2]|0;
        $93 = (($92) + 36|0);
        $94 = HEAP32[$93>>2]|0;
        $95 = (FUNCTION_TABLE_ii[$94 & 63]($85)|0);
        $$0$i$i1$i$i10 = $95;
       } else {
        $96 = HEAP32[$88>>2]|0;
        $$0$i$i1$i$i10 = $96;
       }
       $97 = ($$0$i$i1$i$i10|0)==(-1);
       if ($97) {
        HEAP32[$__e>>2] = 0;
        $$pre$i3$i$i1244 = 0;
        label = 45;
        break;
       } else {
        $phitmp$i4$i$i13 = ($$pre$i3$i$i12|0)==(0|0);
        $tmp$i$i15 = $98 ^ $phitmp$i4$i$i13;
        if ($tmp$i$i15) {
         $$pre$i3$i$i1243 = $$pre$i3$i$i12;$180 = $$pre$i3$i$i12;
         break;
        } else {
         $$0$ph$be = $$2$lcssa;
         break L33;
        }
       }
      }
     } while(0);
     if ((label|0) == 45) {
      label = 0;
      if ($98) {
       $$0$ph$be = $$2$lcssa;
       break L33;
      } else {
       $$pre$i3$i$i1243 = $$pre$i3$i$i1244;$180 = 0;
      }
     }
     $99 = (($100) + 12|0);
     $101 = HEAP32[$99>>2]|0;
     $102 = (($100) + 16|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($101|0)==($103|0);
     if ($104) {
      $105 = HEAP32[$100>>2]|0;
      $106 = (($105) + 36|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = (FUNCTION_TABLE_ii[$107 & 63]($100)|0);
      $$0$i$i = $108;
     } else {
      $109 = HEAP32[$101>>2]|0;
      $$0$i$i = $109;
     }
     $110 = HEAP32[$4>>2]|0;
     $111 = (($110) + 12|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = (FUNCTION_TABLE_iiii[$112 & 31]($4,8192,$$0$i$i)|0);
     if (!($113)) {
      $$0$ph$be = $$2$lcssa;
      break L33;
     }
     $114 = HEAP32[$99>>2]|0;
     $115 = HEAP32[$102>>2]|0;
     $116 = ($114|0)==($115|0);
     if ($116) {
      $117 = HEAP32[$100>>2]|0;
      $118 = (($117) + 40|0);
      $119 = HEAP32[$118>>2]|0;
      (FUNCTION_TABLE_ii[$119 & 63]($100)|0);
      $$pre$i$i$i6 = $100;$$pre$i3$i$i12 = $$pre$i3$i$i1243;$85 = $180;
      continue;
     } else {
      $120 = (($114) + 4|0);
      HEAP32[$99>>2] = $120;
      $$pre$i$i$i6 = $100;$$pre$i3$i$i12 = $$pre$i3$i$i1243;$85 = $180;
      continue;
     }
    }
   }
   else if ((label|0) == 58) {
    label = 0;
    $142 = HEAP32[$$lcssa75>>2]|0;
    $143 = HEAP32[$$lcssa76>>2]|0;
    $144 = ($142|0)==($143|0);
    if ($144) {
     $145 = HEAP32[$$lcssa71>>2]|0;
     $146 = (($145) + 40|0);
     $147 = HEAP32[$146>>2]|0;
     (FUNCTION_TABLE_ii[$147 & 63]($$lcssa71)|0);
    } else {
     $148 = (($142) + 4|0);
     HEAP32[$$lcssa75>>2] = $148;
    }
    $149 = (($$0$ph) + 4|0);
    $$0$ph$be = $149;
   }
  } while(0);
  $$pre$pre = HEAP32[$__err>>2]|0;
  $$0$ph = $$0$ph$be;$$pre = $$pre$pre;
 }
 if ((label|0) == 18) {
  HEAP32[$__err>>2] = 4;
  $$pre$i$i$i21 = $$lcssa68;
 }
 else if ((label|0) == 21) {
  HEAP32[$__err>>2] = 4;
  $$pre$i$i$i21 = $$lcssa69$lcssa;
 }
 else if ((label|0) == 24) {
  HEAP32[$__err>>2] = 4;
  $$pre$i$i$i21 = $$lcssa69$lcssa77;
 }
 $150 = ($$pre$i$i$i21|0)==(0|0);
 if ($150) {
  $177 = 0;$181 = 1;
 } else {
  $151 = (($$pre$i$i$i21) + 12|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = (($$pre$i$i$i21) + 16|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = ($152|0)==($154|0);
  if ($155) {
   $156 = HEAP32[$$pre$i$i$i21>>2]|0;
   $157 = (($156) + 36|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = (FUNCTION_TABLE_ii[$158 & 63]($$pre$i$i$i21)|0);
   $$0$i$i$i$i19 = $159;
  } else {
   $160 = HEAP32[$152>>2]|0;
   $$0$i$i$i$i19 = $160;
  }
  $161 = ($$0$i$i$i$i19|0)==(-1);
  if ($161) {
   HEAP32[$__b>>2] = 0;
   $177 = 0;$181 = 1;
  } else {
   $177 = $$pre$i$i$i21;$181 = 0;
  }
 }
 $162 = HEAP32[$__e>>2]|0;
 $163 = ($162|0)==(0|0);
 do {
  if ($163) {
   label = 75;
  } else {
   $164 = (($162) + 12|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = (($162) + 16|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = ($165|0)==($167|0);
   if ($168) {
    $169 = HEAP32[$162>>2]|0;
    $170 = (($169) + 36|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = (FUNCTION_TABLE_ii[$171 & 63]($162)|0);
    $$0$i$i1$i$i25 = $172;
   } else {
    $173 = HEAP32[$165>>2]|0;
    $$0$i$i1$i$i25 = $173;
   }
   $174 = ($$0$i$i1$i$i25|0)==(-1);
   if ($174) {
    HEAP32[$__e>>2] = 0;
    label = 75;
    break;
   } else {
    if ($181) {
     break;
    } else {
     label = 77;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 75) {
  if ($181) {
   label = 77;
  }
 }
 if ((label|0) == 77) {
  $175 = HEAP32[$__err>>2]|0;
  $176 = $175 | 2;
  HEAP32[$__err>>2] = $176;
 }
 HEAP32[$agg$result>>2] = $177;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,5600,((5600 + 32|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 63]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $16 = (($6) + 4|0);
  $17 = (($6) + 4|0);
  $18 = $9&255;
  $19 = $18 >>> 1;
  $21 = $17;$22 = $19;$23 = $16;
 } else {
  $12 = (($6) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($6) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $21 = $13;$22 = $15;$23 = $13;
 }
 $20 = (($21) + ($22<<2)|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$23,$20);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $2 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,6696)|0);
 $3 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
 $4 = (($__tm) + 24|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $5;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$4,$__b,$$byval_copy,$__err,$2);
 $6 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 63]($1)|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = (($4) + 168|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $7 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$4,$6,$__ct,$__err,0)|0);
 $8 = $7;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(168);
 if ($11) {
  $12 = (($10|0) / 12)&-1;
  $13 = (($12|0) % 7)&-1;
  HEAP32[$__w>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $2 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,6696)|0);
 $3 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
 $4 = (($__tm) + 16|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $5;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$4,$__b,$$byval_copy,$__err,$2);
 $6 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 63]($1)|0);
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = (($5) + 288|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$7,$__ct,$__err,0)|0);
 $9 = $8;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)<(288);
 if ($12) {
  $13 = (($11|0) / 12)&-1;
  $14 = (($13|0) % 12)&-1;
  HEAP32[$__m>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 $2 = (__ZNKSt3__16locale9use_facetERNS0_2idE($0,6696)|0);
 $3 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
 $4 = (($__tm) + 20|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $5;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$4,$__b,$$byval_copy,$__err,$2);
 $6 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ($2|0)<(69);
  if ($6) {
   $7 = (($2) + 2000)|0;
   $__t$0 = $7;
  } else {
   $$off = (($2) + -69)|0;
   $8 = ($$off>>>0)<(31);
   $9 = (($2) + 1900)|0;
   $$ = $8 ? $9 : $2;
   $__t$0 = $$;
  }
  $10 = (($__t$0) + -1900)|0;
  HEAP32[$__y>>2] = $10;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$byval_copy26 = 0, $$byval_copy30 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $$byval_copy30 = sp + 160|0;
 $$byval_copy26 = sp + 156|0;
 $1 = sp + 152|0;
 $2 = sp + 148|0;
 $3 = sp + 144|0;
 $4 = sp + 140|0;
 $5 = sp + 136|0;
 $6 = sp + 132|0;
 $7 = sp + 128|0;
 $8 = sp + 124|0;
 $9 = sp + 120|0;
 $10 = sp + 116|0;
 $11 = sp + 112|0;
 $12 = sp + 108|0;
 $13 = sp + 104|0;
 $14 = sp + 100|0;
 $15 = sp + 96|0;
 $16 = sp + 92|0;
 $17 = sp + 88|0;
 $18 = sp + 84|0;
 $19 = sp + 80|0;
 $20 = sp + 76|0;
 $21 = sp + 72|0;
 $22 = sp + 68|0;
 $23 = sp + 64|0;
 $24 = sp + 60|0;
 $25 = sp + 56|0;
 $26 = sp + 52|0;
 $27 = sp + 48|0;
 $28 = sp + 44|0;
 $29 = sp + 40|0;
 $30 = sp + 36|0;
 $31 = sp + 32|0;
 $32 = sp + 28|0;
 $33 = sp + 24|0;
 $34 = sp + 20|0;
 $35 = sp + 16|0;
 $36 = sp + 12|0;
 $37 = sp + 8|0;
 $38 = sp + 4|0;
 $39 = sp;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $40 = (__ZNKSt3__16locale9use_facetERNS0_2idE($1,6696)|0);
 $41 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($41)|0);
 $42 = $__fmt << 24 >> 24;
 do {
  switch ($42|0) {
  case 72:  {
   $78 = (($__tm) + 8|0);
   $79 = HEAP32[$__e>>2]|0;
   HEAP32[$14>>2] = $79;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$14+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$78,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 112:  {
   $89 = (($__tm) + 8|0);
   $90 = HEAP32[$__e>>2]|0;
   HEAP32[$20>>2] = $90;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$20+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$89,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 109:  {
   $84 = (($__tm) + 16|0);
   $85 = HEAP32[$__e>>2]|0;
   HEAP32[$17>>2] = $85;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$17+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$84,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 99:  {
   $47 = (($this) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (FUNCTION_TABLE_ii[$50 & 63]($47)|0);
   $52 = HEAP32[$__b>>2]|0;
   HEAP32[$5>>2] = $52;
   $53 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $53;
   $54 = HEAP8[$51>>0]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $61 = (($51) + 4|0);
    $62 = (($51) + 4|0);
    $63 = $54&255;
    $64 = $63 >>> 1;
    $66 = $62;$67 = $64;$68 = $61;
   } else {
    $57 = (($51) + 8|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (($51) + 4|0);
    $60 = HEAP32[$59>>2]|0;
    $66 = $58;$67 = $60;$68 = $58;
   }
   $65 = (($66) + ($67<<2)|0);
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$5+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$6+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($4,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,$68,$65);
   $69 = HEAP32[$4>>2]|0;
   HEAP32[$__b>>2] = $69;
   label = 32;
   break;
  }
  case 121:  {
   $131 = (($__tm) + 20|0);
   $132 = HEAP32[$__e>>2]|0;
   HEAP32[$37>>2] = $132;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$37+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$131,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 120:  {
   $103 = HEAP32[$this>>2]|0;
   $104 = (($103) + 20|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = HEAP32[$__b>>2]|0;
   HEAP32[$32>>2] = $106;
   $107 = HEAP32[$__e>>2]|0;
   HEAP32[$33>>2] = $107;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$32+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$33+0>>2]|0;
   FUNCTION_TABLE_viiiiiii[$105 & 63]($agg$result,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm);
   break;
  }
  case 84:  {
   $98 = HEAP32[$__b>>2]|0;
   HEAP32[$29>>2] = $98;
   $99 = HEAP32[$__e>>2]|0;
   HEAP32[$30>>2] = $99;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$29+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$30+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($28,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,5768,((5768 + 32|0)));
   $100 = HEAP32[$28>>2]|0;
   HEAP32[$__b>>2] = $100;
   label = 32;
   break;
  }
  case 83:  {
   $97 = HEAP32[$__e>>2]|0;
   HEAP32[$27>>2] = $97;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$27+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__tm,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 37:  {
   $135 = HEAP32[$__e>>2]|0;
   HEAP32[$39>>2] = $135;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$39+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 65: case 97:  {
   $43 = (($__tm) + 24|0);
   $44 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $44;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$2+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$43,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 119:  {
   $101 = (($__tm) + 24|0);
   $102 = HEAP32[$__e>>2]|0;
   HEAP32[$31>>2] = $102;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$31+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$101,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 77:  {
   $86 = (($__tm) + 4|0);
   $87 = HEAP32[$__e>>2]|0;
   HEAP32[$18>>2] = $87;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$18+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$86,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 116: case 110:  {
   $88 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $88;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$19+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 88:  {
   $108 = (($this) + 8|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = (($109) + 24|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (FUNCTION_TABLE_ii[$111 & 63]($108)|0);
   $113 = HEAP32[$__b>>2]|0;
   HEAP32[$35>>2] = $113;
   $114 = HEAP32[$__e>>2]|0;
   HEAP32[$36>>2] = $114;
   $115 = HEAP8[$112>>0]|0;
   $116 = $115 & 1;
   $117 = ($116<<24>>24)==(0);
   if ($117) {
    $122 = (($112) + 4|0);
    $123 = (($112) + 4|0);
    $124 = $115&255;
    $125 = $124 >>> 1;
    $127 = $123;$128 = $125;$129 = $122;
   } else {
    $118 = (($112) + 8|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = (($112) + 4|0);
    $121 = HEAP32[$120>>2]|0;
    $127 = $119;$128 = $121;$129 = $119;
   }
   $126 = (($127) + ($128<<2)|0);
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$35+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$36+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($34,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,$129,$126);
   $130 = HEAP32[$34>>2]|0;
   HEAP32[$__b>>2] = $130;
   label = 32;
   break;
  }
  case 101: case 100:  {
   $70 = (($__tm) + 12|0);
   $71 = HEAP32[$__e>>2]|0;
   HEAP32[$7>>2] = $71;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$7+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$70,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 106:  {
   $82 = (($__tm) + 28|0);
   $83 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $83;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$16+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$82,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 114:  {
   $91 = HEAP32[$__b>>2]|0;
   HEAP32[$22>>2] = $91;
   $92 = HEAP32[$__e>>2]|0;
   HEAP32[$23>>2] = $92;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$22+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$23+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($21,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,5696,((5696 + 44|0)));
   $93 = HEAP32[$21>>2]|0;
   HEAP32[$__b>>2] = $93;
   label = 32;
   break;
  }
  case 89:  {
   $133 = (($__tm) + 20|0);
   $134 = HEAP32[$__e>>2]|0;
   HEAP32[$38>>2] = $134;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$38+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$133,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 68:  {
   $72 = HEAP32[$__b>>2]|0;
   HEAP32[$9>>2] = $72;
   $73 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $73;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$9+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$10+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($8,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,5632,((5632 + 32|0)));
   $74 = HEAP32[$8>>2]|0;
   HEAP32[$__b>>2] = $74;
   label = 32;
   break;
  }
  case 73:  {
   $80 = (($__tm) + 8|0);
   $81 = HEAP32[$__e>>2]|0;
   HEAP32[$15>>2] = $81;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$15+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$80,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 70:  {
   $75 = HEAP32[$__b>>2]|0;
   HEAP32[$12>>2] = $75;
   $76 = HEAP32[$__e>>2]|0;
   HEAP32[$13>>2] = $76;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$12+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$13+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($11,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,5664,((5664 + 32|0)));
   $77 = HEAP32[$11>>2]|0;
   HEAP32[$__b>>2] = $77;
   label = 32;
   break;
  }
  case 104: case 66: case 98:  {
   $45 = (($__tm) + 16|0);
   $46 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $46;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$3+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$45,$__b,$$byval_copy30,$__err,$40);
   label = 32;
   break;
  }
  case 82:  {
   $94 = HEAP32[$__b>>2]|0;
   HEAP32[$25>>2] = $94;
   $95 = HEAP32[$__e>>2]|0;
   HEAP32[$26>>2] = $95;
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$25+0>>2]|0;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$26+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($24,$this,$$byval_copy26,$$byval_copy30,$__iob,$__err,$__tm,5744,((5744 + 20|0)));
   $96 = HEAP32[$24>>2]|0;
   HEAP32[$__b>>2] = $96;
   label = 32;
   break;
  }
  default: {
   $136 = HEAP32[$__err>>2]|0;
   $137 = $136 | 4;
   HEAP32[$__err>>2] = $137;
   label = 32;
  }
  }
 } while(0);
 if ((label|0) == 32) {
  $138 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $138;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(31);
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__d>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(24);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__h>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $$off = (($2) + -1)|0;
 $6 = ($$off>>>0)<(12);
 $7 = $6 & $5;
 if ($7) {
  HEAP32[$__h>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,3)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(366);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__d>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(13);
 $or$cond = $6 & $5;
 if ($or$cond) {
  $7 = (($2) + -1)|0;
  HEAP32[$__m>>2] = $7;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(60);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__m>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $0 = HEAP32[$__b>>2]|0;
  $1 = ($0|0)==(0|0);
  do {
   if ($1) {
    $78 = 1;
   } else {
    $2 = (($0) + 12|0);
    $3 = HEAP32[$2>>2]|0;
    $4 = (($0) + 16|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($3|0)==($5|0);
    if ($6) {
     $7 = HEAP32[$0>>2]|0;
     $8 = (($7) + 36|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = (FUNCTION_TABLE_ii[$9 & 63]($0)|0);
     $$0$i$i$i$i = $10;
    } else {
     $11 = HEAP32[$3>>2]|0;
     $$0$i$i$i$i = $11;
    }
    $12 = ($$0$i$i$i$i|0)==(-1);
    if ($12) {
     HEAP32[$__b>>2] = 0;
     $78 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $78 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $13 = HEAP32[$__e>>2]|0;
  $14 = ($13|0)==(0|0);
  do {
   if ($14) {
    label = 15;
   } else {
    $15 = (($13) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($13) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($16|0)==($18|0);
    if ($19) {
     $20 = HEAP32[$13>>2]|0;
     $21 = (($20) + 36|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (FUNCTION_TABLE_ii[$22 & 63]($13)|0);
     $$0$i$i1$i$i = $23;
    } else {
     $24 = HEAP32[$16>>2]|0;
     $$0$i$i1$i$i = $24;
    }
    $25 = ($$0$i$i1$i$i|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 15;
     break;
    } else {
     if ($78) {
      $79 = $13;
      break;
     } else {
      $$pre$i3$i$i9 = $13;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($78) {
    $$pre$i3$i$i9 = 0;
    break;
   } else {
    $79 = 0;
   }
  }
  $26 = HEAP32[$__b>>2]|0;
  $27 = (($26) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($28|0)==($30|0);
  if ($31) {
   $32 = HEAP32[$26>>2]|0;
   $33 = (($32) + 36|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (FUNCTION_TABLE_ii[$34 & 63]($26)|0);
   $$0$i$i = $35;
  } else {
   $36 = HEAP32[$28>>2]|0;
   $$0$i$i = $36;
  }
  $37 = HEAP32[$__ct>>2]|0;
  $38 = (($37) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (FUNCTION_TABLE_iiii[$39 & 31]($__ct,8192,$$0$i$i)|0);
  if (!($40)) {
   $$pre$i3$i$i9 = $79;
   break;
  }
  $41 = HEAP32[$__b>>2]|0;
  $42 = (($41) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($43|0)==($45|0);
  if ($46) {
   $47 = HEAP32[$41>>2]|0;
   $48 = (($47) + 40|0);
   $49 = HEAP32[$48>>2]|0;
   (FUNCTION_TABLE_ii[$49 & 63]($41)|0);
   continue;
  } else {
   $50 = (($43) + 4|0);
   HEAP32[$42>>2] = $50;
   continue;
  }
 }
 $51 = HEAP32[$__b>>2]|0;
 $52 = ($51|0)==(0|0);
 do {
  if ($52) {
   $80 = 1;
  } else {
   $53 = (($51) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($51) + 16|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($54|0)==($56|0);
   if ($57) {
    $58 = HEAP32[$51>>2]|0;
    $59 = (($58) + 36|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (FUNCTION_TABLE_ii[$60 & 63]($51)|0);
    $$0$i$i$i$i1 = $61;
   } else {
    $62 = HEAP32[$54>>2]|0;
    $$0$i$i$i$i1 = $62;
   }
   $63 = ($$0$i$i$i$i1|0)==(-1);
   if ($63) {
    HEAP32[$__b>>2] = 0;
    $80 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
    $80 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 $64 = ($$pre$i3$i$i9|0)==(0|0);
 do {
  if ($64) {
   label = 37;
  } else {
   $65 = (($$pre$i3$i$i9) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($$pre$i3$i$i9) + 16|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($66|0)==($68|0);
   if ($69) {
    $70 = HEAP32[$$pre$i3$i$i9>>2]|0;
    $71 = (($70) + 36|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (FUNCTION_TABLE_ii[$72 & 63]($$pre$i3$i$i9)|0);
    $$0$i$i1$i$i7 = $73;
   } else {
    $74 = HEAP32[$66>>2]|0;
    $$0$i$i1$i$i7 = $74;
   }
   $75 = ($$0$i$i1$i$i7|0)==(-1);
   if ($75) {
    HEAP32[$__e>>2] = 0;
    label = 37;
    break;
   } else {
    if ($80) {
     break;
    } else {
     label = 39;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 37) {
  if ($80) {
   label = 39;
  }
 }
 if ((label|0) == 39) {
  $76 = HEAP32[$__err>>2]|0;
  $77 = $76 | 2;
  HEAP32[$__err>>2] = $77;
 }
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 63]($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $23 = $12;
 } else {
  $9 = (($5) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $23 = $10;
 }
 $13 = (($5) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $19 = $14&255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = (($5) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $22 = $18;
 }
 $21 = (0 - ($22))|0;
 $24 = ($23|0)==($21|0);
 do {
  if ($24) {
   $25 = HEAP32[$__err>>2]|0;
   $26 = $25 | 4;
   HEAP32[$__err>>2] = $26;
  } else {
   $27 = HEAP32[$__e>>2]|0;
   HEAP32[$0>>2] = $27;
   $28 = (($5) + 24|0);
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
   $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$28,$__ct,$__err,0)|0);
   $30 = ($29|0)==($5|0);
   $31 = HEAP32[$__h>>2]|0;
   $32 = ($31|0)==(12);
   $or$cond = $30 & $32;
   if ($or$cond) {
    HEAP32[$__h>>2] = 0;
    break;
   }
   $33 = $29;
   $34 = $5;
   $35 = (($33) - ($34))|0;
   $36 = ($35|0)==(12);
   $37 = ($31|0)<(12);
   $or$cond3 = $37 & $36;
   if ($or$cond3) {
    $38 = (($31) + 12)|0;
    HEAP32[$__h>>2] = $38;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(61);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__s>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,1)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(7);
 $or$cond = $6 & $5;
 if ($or$cond) {
  HEAP32[$__w>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (($2) + -1900)|0;
  HEAP32[$__y>>2] = $6;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i915 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $83 = 1;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 63]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $83 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $83 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = (($13) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($13) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 63]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($83) {
     $$pre$i3$i$i915 = $13;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($83) {
   label = 16;
  } else {
   $$pre$i3$i$i915 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
  }
  else if ((label|0) == 17) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = (($28) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($28) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = (($34) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 63]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP32[$30>>2]|0;
    $$0$i$i = $38;
   }
   $39 = HEAP32[$__ct>>2]|0;
   $40 = (($39) + 52|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (FUNCTION_TABLE_iiii[$41 & 31]($__ct,$$0$i$i,0)|0);
   $43 = ($42<<24>>24)==(37);
   if (!($43)) {
    $44 = HEAP32[$__err>>2]|0;
    $45 = $44 | 4;
    HEAP32[$__err>>2] = $45;
    break;
   }
   $46 = HEAP32[$__b>>2]|0;
   $47 = (($46) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($46) + 16|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($48|0)==($50|0);
   if ($51) {
    $53 = HEAP32[$46>>2]|0;
    $54 = (($53) + 40|0);
    $55 = HEAP32[$54>>2]|0;
    (FUNCTION_TABLE_ii[$55 & 63]($46)|0);
    $$pre = HEAP32[$__b>>2]|0;
    $56 = ($$pre|0)==(0|0);
    if ($56) {
     $84 = 1;
    } else {
     $58 = $$pre;
     label = 25;
    }
   } else {
    $52 = (($48) + 4|0);
    HEAP32[$47>>2] = $52;
    $58 = $46;
    label = 25;
   }
   do {
    if ((label|0) == 25) {
     $57 = (($58) + 12|0);
     $59 = HEAP32[$57>>2]|0;
     $60 = (($58) + 16|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($59|0)==($61|0);
     if ($62) {
      $63 = HEAP32[$58>>2]|0;
      $64 = (($63) + 36|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = (FUNCTION_TABLE_ii[$65 & 63]($58)|0);
      $$0$i$i$i$i1 = $66;
     } else {
      $67 = HEAP32[$59>>2]|0;
      $$0$i$i$i$i1 = $67;
     }
     $68 = ($$0$i$i$i$i1|0)==(-1);
     if ($68) {
      HEAP32[$__b>>2] = 0;
      $84 = 1;
      break;
     } else {
      $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
      $84 = $phitmp$i$i$i4;
      break;
     }
    }
   } while(0);
   $69 = ($$pre$i3$i$i915|0)==(0|0);
   do {
    if ($69) {
     label = 37;
    } else {
     $70 = (($$pre$i3$i$i915) + 12|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = (($$pre$i3$i$i915) + 16|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($71|0)==($73|0);
     if ($74) {
      $75 = HEAP32[$$pre$i3$i$i915>>2]|0;
      $76 = (($75) + 36|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (FUNCTION_TABLE_ii[$77 & 63]($$pre$i3$i$i915)|0);
      $$0$i$i1$i$i7 = $78;
     } else {
      $79 = HEAP32[$71>>2]|0;
      $$0$i$i1$i$i7 = $79;
     }
     $80 = ($$0$i$i1$i$i7|0)==(-1);
     if ($80) {
      HEAP32[$__e>>2] = 0;
      label = 37;
      break;
     } else {
      if ($84) {
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 37) {
    if (!($84)) {
     break;
    }
   }
   $81 = HEAP32[$__err>>2]|0;
   $82 = $81 | 2;
   HEAP32[$__err>>2] = $82;
  }
 } while(0);
 return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 return;
}
function __ZNSt3__110__time_putD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (__ZNSt3__16__clocEv()|0);
 $2 = ($0|0)==($1|0);
 if (!($2)) {
  $3 = HEAP32[$this>>2]|0;
  _freelocale(($3|0));
 }
 return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$0$i$i = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $__nar = sp + 4|0;
 $__ne = sp;
 $2 = (($__nar) + 100|0);
 HEAP32[$__ne>>2] = $2;
 $3 = (($this) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $$0$i$i = $__nar;$8 = $5;
 while(1) {
  $6 = ($$0$i$i|0)==($4|0);
  if ($6) {
   $$lcssa = $8;
   break;
  }
  $7 = HEAP8[$$0$i$i>>0]|0;
  $9 = ($8|0)==(0|0);
  do {
   if ($9) {
    $23 = 0;
   } else {
    $10 = (($8) + 24|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($8) + 28|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($11|0)==($13|0);
    if ($14) {
     $16 = HEAP32[$8>>2]|0;
     $17 = (($16) + 52|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = $7&255;
     $20 = (FUNCTION_TABLE_iii[$18 & 15]($8,$19)|0);
     $21 = ($20|0)==(-1);
     $$$i = $21 ? 0 : $8;
     $23 = $$$i;
     break;
    } else {
     $15 = (($11) + 1|0);
     HEAP32[$10>>2] = $15;
     HEAP8[$11>>0] = $7;
     $23 = $8;
     break;
    }
   }
  } while(0);
  $22 = (($$0$i$i) + 1|0);
  $$0$i$i = $22;$8 = $23;
 }
 HEAP32[$agg$result>>2] = $$lcssa;
 STACKTOP = sp;return;
}
function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nb,$__ne,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fmt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $fmt = sp;
 HEAP8[$fmt>>0] = 37;
 $0 = (($fmt) + 1|0);
 HEAP8[$0>>0] = $__fmt;
 $1 = (($fmt) + 2|0);
 HEAP8[$1>>0] = $__mod;
 $2 = (($fmt) + 3|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__mod<<24>>24)==(0);
 if (!($3)) {
  HEAP8[$0>>0] = $__mod;
  HEAP8[$1>>0] = $__fmt;
 }
 $4 = HEAP32[$__ne>>2]|0;
 $5 = $4;
 $6 = $__nb;
 $7 = (($5) - ($6))|0;
 $8 = HEAP32[$this>>2]|0;
 $9 = (_strftime_l(($__nb|0),($7|0),($fmt|0),($__tm|0),($8|0))|0);
 $10 = (($__nb) + ($9)|0);
 HEAP32[$__ne>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0;
 $__nar = sp + 8|0;
 $__ne = sp;
 $2 = (($__nar) + 400|0);
 HEAP32[$__ne>>2] = $2;
 $3 = (($this) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $$0$i$i = $__nar;$8 = $5;
 while(1) {
  $6 = ($$0$i$i|0)==($4|0);
  if ($6) {
   $$lcssa = $8;
   break;
  }
  $7 = HEAP32[$$0$i$i>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $22 = 0;
  } else {
   $10 = (($8) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($8) + 28|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($11|0)==($13|0);
   if ($14) {
    $15 = HEAP32[$8>>2]|0;
    $16 = (($15) + 52|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (FUNCTION_TABLE_iii[$17 & 15]($8,$7)|0);
    $$0$i$i$i$i = $18;
   } else {
    $19 = (($11) + 4|0);
    HEAP32[$10>>2] = $19;
    HEAP32[$11>>2] = $7;
    $$0$i$i$i$i = $7;
   }
   $20 = ($$0$i$i$i$i|0)==(-1);
   $$$i = $20 ? 0 : $8;
   $22 = $$$i;
  }
  $21 = (($$0$i$i) + 4|0);
  $$0$i$i = $21;$8 = $22;
 }
 HEAP32[$agg$result>>2] = $$lcssa;
 STACKTOP = sp;return;
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__wb = $__wb|0;
 $__we = $__we|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__nb = 0, $__ne = 0, $mb = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $__nar = sp + 16|0;
 $__ne = sp + 12|0;
 $mb = sp;
 $__nb = sp + 8|0;
 $0 = (($__nar) + 100|0);
 HEAP32[$__ne>>2] = $0;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $1 = $mb;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 HEAP32[$__nb>>2] = $__nar;
 $5 = HEAP32[$__we>>2]|0;
 $6 = $5;
 $7 = $__wb;
 $8 = (($6) - ($7))|0;
 $9 = $8 >> 2;
 $10 = HEAP32[$this>>2]|0;
 $11 = (_uselocale(($10|0))|0);
 $12 = (_mbsrtowcs($__wb,$__nb,$9,$mb)|0);
 $13 = ($11|0)==(0|0);
 if (!($13)) {
  (_uselocale(($11|0))|0);
 }
 $14 = (($__wb) + ($12<<2)|0);
 HEAP32[$__we>>2] = $14;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb0EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__110moneypunctIwLb1EED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$lcssa$i = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $__atoms = 0, $__loc = 0, $__nc$0 = 0;
 var $__nc$1 = 0, $__nc$2 = 0, $__nc$2$lcssa = 0, $__neg = 0, $__w$0 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 136|0;
 $__wb = sp + 16|0;
 $__wn = sp + 12|0;
 $__loc = sp + 8|0;
 $__neg = sp + 134|0;
 $0 = sp + 4|0;
 $__atoms = sp + 124|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 107;
 $2 = (($__wbuf) + 100|0);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6704)|0);
 HEAP8[$__neg>>0] = 0;
 $4 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $4;
 $5 = (($__iob) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $7 = (__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$$byval_copy,$__intl,$__loc,$6,$__err,$__neg,$3,$__wb,$__wn,$2)|0);
 if ($7) {
  $8 = HEAP32[$3>>2]|0;
  $9 = (($8) + 32|0);
  $10 = HEAP32[$9>>2]|0;
  (FUNCTION_TABLE_iiiii[$10 & 7]($3,6160,((6160 + 10|0)),$__atoms)|0);
  $11 = HEAP32[$__wn>>2]|0;
  $12 = HEAP32[$__wb>>2]|0;
  $13 = $11;
  $14 = $12;
  $15 = (($13) - ($14))|0;
  $16 = ($15|0)>(98);
  if ($16) {
   $17 = (($15) + 2)|0;
   $18 = (_malloc($17)|0);
   $19 = ($18|0)==(0|0);
   if ($19) {
    __ZSt17__throw_bad_allocv();
    // unreachable;
   } else {
    $38 = $18;$__nc$0 = $18;
   }
  } else {
   $38 = 0;$__nc$0 = $$byval_copy;
  }
  $20 = HEAP8[$__neg>>0]|0;
  $21 = ($20<<24>>24)==(0);
  if ($21) {
   $__nc$1 = $__nc$0;
  } else {
   $22 = (($__nc$0) + 1|0);
   HEAP8[$__nc$0>>0] = 45;
   $__nc$1 = $22;
  }
  $23 = (($__atoms) + 10|0);
  $24 = $__atoms;
  $26 = $11;$__nc$2 = $__nc$1;$__w$0 = $12;
  while(1) {
   $25 = ($__w$0>>>0)<($26>>>0);
   if (!($25)) {
    $__nc$2$lcssa = $__nc$2;
    break;
   }
   $27 = HEAP8[$__w$0>>0]|0;
   $$0$i = $__atoms;
   while(1) {
    $28 = ($$0$i|0)==($23|0);
    if ($28) {
     $$0$lcssa$i = $23;
     break;
    }
    $29 = HEAP8[$$0$i>>0]|0;
    $30 = ($29<<24>>24)==($27<<24>>24);
    if ($30) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $31 = (($$0$i) + 1|0);
    $$0$i = $31;
   }
   $32 = $$0$lcssa$i;
   $33 = (($32) - ($24))|0;
   $34 = (6160 + ($33)|0);
   $35 = HEAP8[$34>>0]|0;
   HEAP8[$__nc$2>>0] = $35;
   $36 = (($__w$0) + 1|0);
   $37 = (($__nc$2) + 1|0);
   $$pre = HEAP32[$__wn>>2]|0;
   $26 = $$pre;$__nc$2 = $37;$__w$0 = $36;
  }
  HEAP8[$__nc$2$lcssa>>0] = 0;
  HEAP32[$vararg_buffer>>2] = $__v;
  (_sscanf($$byval_copy,6176,$vararg_buffer)|0);
  _free($38);
 }
 $39 = HEAP32[$__b>>2]|0;
 $40 = ($39|0)==(0|0);
 do {
  if ($40) {
   $51 = 0;
  } else {
   $41 = (($39) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($39) + 16|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($42|0)==($44|0);
   if ($45) {
    $46 = HEAP32[$39>>2]|0;
    $47 = (($46) + 36|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (FUNCTION_TABLE_ii[$48 & 63]($39)|0);
    $50 = ($49|0)==(-1);
    if ($50) {
     HEAP32[$__b>>2] = 0;
     $51 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $51 = $$pre$i$i$i;
     break;
    }
   } else {
    $51 = $39;
   }
  }
 } while(0);
 $52 = ($51|0)==(0|0);
 $53 = HEAP32[$__e>>2]|0;
 $54 = ($53|0)==(0|0);
 do {
  if ($54) {
   label = 25;
  } else {
   $55 = (($53) + 12|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($53) + 16|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($56|0)==($58|0);
   if ($59) {
    $60 = HEAP32[$53>>2]|0;
    $61 = (($60) + 36|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = (FUNCTION_TABLE_ii[$62 & 63]($53)|0);
    $64 = ($63|0)==(-1);
    if ($64) {
     HEAP32[$__e>>2] = 0;
     label = 25;
     break;
    }
   }
   if (!($52)) {
    label = 26;
   }
  }
 } while(0);
 if ((label|0) == 25) {
  if ($52) {
   label = 26;
  }
 }
 if ((label|0) == 26) {
  $65 = HEAP32[$__err>>2]|0;
  $66 = $65 | 2;
  HEAP32[$__err>>2] = $66;
 }
 $67 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $67;
 $68 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($68)|0);
 $69 = HEAP32[$__wb>>2]|0;
 HEAP32[$__wb>>2] = 0;
 $70 = ($69|0)==(0|0);
 if (!($70)) {
  $71 = HEAP32[$1>>2]|0;
  FUNCTION_TABLE_vi[$71 & 127]($69);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i102 = 0, $$0$i$i104 = 0, $$0$i$i119 = 0, $$0$i$i27 = 0, $$0$i$i37 = 0, $$0$i$i39 = 0, $$0$i$i49 = 0, $$0$i$i54 = 0, $$0$i$i58 = 0, $$0$i$i74 = 0, $$0$i$i86 = 0, $$0$i$i94 = 0, $$208 = 0, $$209 = 0, $$210 = 0, $$211 = 0, $$212 = 0;
 var $$lcssa = 0, $$lcssa228 = 0, $$lcssa229 = 0, $$lcssa230 = 0, $$mask = 0, $$mask200 = 0, $$mask201 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i108 = 0, $$pre$i$i$i123 = 0, $$pre$i$i$i30 = 0, $$pre$i$i$i41 = 0, $$pre$i$i$i62 = 0, $$pre$i$i$i78 = 0, $$pre$i2$i$i112 = 0, $$pre$i2$i$i127 = 0, $$pre$i2$i$i127192 = 0, $$pre$i2$i$i127193 = 0, $$pre$i2$i$i45 = 0;
 var $$pre$i2$i$i45184 = 0, $$pre$i2$i$i45186 = 0, $$pre$i2$i$i66 = 0, $$pre$i2$i$i66196$ph = 0, $$pre$i2$i$i66196205 = 0, $$pre$i2$i$i82 = 0, $$pre187 = 0, $$pre188 = 0, $$pre189 = 0, $$pre190 = 0, $$pre191 = 0, $$pre195 = 0, $$pre198 = 0, $$pre199 = 0, $$sum = 0, $$sum202 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__i$0$i$i = 0, $__i$0$i$i14 = 0, $__i$0$i$i17 = 0, $__i$0$i$i20 = 0, $__i$0$i$i23 = 0, $__ng$0 = 0, $__ng$0$lcssa = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0;
 var $__nsn$__trailing_sign$011 = 0, $__p$0 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$010 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0 = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0, $exitcond$i$i = 0, $exitcond$i$i15 = 0, $exitcond$i$i18 = 0, $exitcond$i$i21 = 0, $exitcond$i$i24 = 0, $isascii1$i = 0;
 var $isascii1$i100 = 0, $isascii1$i139 = 0, $isascii1$i51 = 0, $isascii1$i56 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond7 = 0, $or$cond9 = 0, $sext = 0, $sext164 = 0, $sext165 = 0, $sext166 = 0, $switch = 0, $tmp$i$i114 = 0, $tmp$i$i129 = 0, $tmp$i$i47 = 0, $tmp$i$i68 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $0 = sp + 488|0;
 $__gbuf = sp + 88|0;
 $__gb = sp + 80|0;
 $__gn = sp + 72|0;
 $__ge = sp + 68|0;
 $__pat = sp + 496|0;
 $__dp = sp + 493|0;
 $__ts = sp + 492|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__psn = sp + 32|0;
 $__nsn = sp + 20|0;
 $__spaces = sp + 8|0;
 $__fd = sp + 4|0;
 $__et = sp;
 HEAP32[$0>>2] = $__we;
 HEAP32[$__gb>>2] = $__gbuf;
 $1 = (($__gb) + 4|0);
 HEAP32[$1>>2] = 107;
 HEAP32[$__gn>>2] = $__gbuf;
 $2 = (($__gbuf) + 400|0);
 HEAP32[$__ge>>2] = $2;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($__grp) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 $__i$0$i$i14 = 0;
 while(1) {
  $exitcond$i$i15 = ($__i$0$i$i14|0)==(3);
  if ($exitcond$i$i15) {
   break;
  }
  $5 = (($__sym) + ($__i$0$i$i14<<2)|0);
  HEAP32[$5>>2] = 0;
  $6 = (($__i$0$i$i14) + 1)|0;
  $__i$0$i$i14 = $6;
 }
 $__i$0$i$i17 = 0;
 while(1) {
  $exitcond$i$i18 = ($__i$0$i$i17|0)==(3);
  if ($exitcond$i$i18) {
   break;
  }
  $7 = (($__psn) + ($__i$0$i$i17<<2)|0);
  HEAP32[$7>>2] = 0;
  $8 = (($__i$0$i$i17) + 1)|0;
  $__i$0$i$i17 = $8;
 }
 $__i$0$i$i20 = 0;
 while(1) {
  $exitcond$i$i21 = ($__i$0$i$i20|0)==(3);
  if ($exitcond$i$i21) {
   break;
  }
  $9 = (($__nsn) + ($__i$0$i$i20<<2)|0);
  HEAP32[$9>>2] = 0;
  $10 = (($__i$0$i$i20) + 1)|0;
  $__i$0$i$i20 = $10;
 }
 $__i$0$i$i23 = 0;
 while(1) {
  $exitcond$i$i24 = ($__i$0$i$i23|0)==(3);
  if ($exitcond$i$i24) {
   break;
  }
  $11 = (($__spaces) + ($__i$0$i$i23<<2)|0);
  HEAP32[$11>>2] = 0;
  $12 = (($__i$0$i$i23) + 1)|0;
  $__i$0$i$i23 = $12;
 }
 __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd);
 $13 = HEAP32[$__wb>>2]|0;
 HEAP32[$__wn>>2] = $13;
 $14 = (($__ct) + 8|0);
 $15 = (($__nsn) + 4|0);
 $16 = (($__nsn) + 8|0);
 $17 = (($__psn) + 4|0);
 $18 = (($__psn) + 8|0);
 $19 = $__flags & 512;
 $20 = ($19|0)!=(0);
 $21 = (($__sym) + 1|0);
 $22 = (($__sym) + 8|0);
 $23 = (($__sym) + 4|0);
 $24 = (($__spaces) + 1|0);
 $25 = (($__spaces) + 8|0);
 $26 = (($__spaces) + 4|0);
 $27 = (($__pat) + 3|0);
 $28 = (($__grp) + 4|0);
 $771 = $__gbuf;$__p$0 = 0;$__trailing_sign$0 = 0;
 L21: while(1) {
  $29 = ($__p$0>>>0)<(4);
  if (!($29)) {
   $$lcssa230 = $771;$__trailing_sign$0$lcssa = $__trailing_sign$0;
   label = 275;
   break;
  }
  $30 = HEAP32[$__b>>2]|0;
  $31 = ($30|0)==(0|0);
  do {
   if ($31) {
    $42 = 0;
   } else {
    $32 = (($30) + 12|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($30) + 16|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($33|0)==($35|0);
    if ($36) {
     $37 = HEAP32[$30>>2]|0;
     $38 = (($37) + 36|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (FUNCTION_TABLE_ii[$39 & 63]($30)|0);
     $41 = ($40|0)==(-1);
     if ($41) {
      HEAP32[$__b>>2] = 0;
      $42 = 0;
      break;
     } else {
      $$pre$i$i$i30 = HEAP32[$__b>>2]|0;
      $42 = $$pre$i$i$i30;
      break;
     }
    } else {
     $42 = $30;
    }
   }
  } while(0);
  $43 = ($42|0)==(0|0);
  $44 = HEAP32[$__e>>2]|0;
  $45 = ($44|0)==(0|0);
  do {
   if ($45) {
    label = 28;
   } else {
    $46 = (($44) + 12|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (($44) + 16|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($47|0)==($49|0);
    if (!($50)) {
     if ($43) {
      $772 = $44;
      break;
     } else {
      $$lcssa230 = $771;$__trailing_sign$0$lcssa = $__trailing_sign$0;
      label = 275;
      break L21;
     }
    }
    $51 = HEAP32[$44>>2]|0;
    $52 = (($51) + 36|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (FUNCTION_TABLE_ii[$53 & 63]($44)|0);
    $55 = ($54|0)==(-1);
    if ($55) {
     HEAP32[$__e>>2] = 0;
     label = 28;
     break;
    } else {
     if ($43) {
      $772 = $44;
      break;
     } else {
      $$lcssa230 = $771;$__trailing_sign$0$lcssa = $__trailing_sign$0;
      label = 275;
      break L21;
     }
    }
   }
  } while(0);
  if ((label|0) == 28) {
   label = 0;
   if ($43) {
    $$lcssa230 = $771;$__trailing_sign$0$lcssa = $__trailing_sign$0;
    label = 275;
    break;
   } else {
    $772 = 0;
   }
  }
  $56 = (($__pat) + ($__p$0)|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57 << 24 >> 24;
  L42: do {
   switch ($58|0) {
   case 0:  {
    $95 = ($__p$0|0)==(3);
    if ($95) {
     $773 = $771;$__trailing_sign$1 = $__trailing_sign$0;
    } else {
     $$pre$i2$i$i45 = $772;$110 = $772;
     label = 44;
    }
    break;
   }
   case 1:  {
    $cond = ($__p$0|0)==(3);
    if ($cond) {
     $773 = $771;$__trailing_sign$1 = $__trailing_sign$0;
    } else {
     $60 = HEAP32[$__b>>2]|0;
     $61 = (($60) + 12|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (($60) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($62|0)==($64|0);
     if ($65) {
      $66 = HEAP32[$60>>2]|0;
      $67 = (($66) + 36|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = (FUNCTION_TABLE_ii[$68 & 63]($60)|0);
      $$0$i$i37 = $69;
     } else {
      $70 = HEAP8[$62>>0]|0;
      $71 = $70&255;
      $$0$i$i37 = $71;
     }
     $72 = $$0$i$i37&255;
     $isascii1$i = ($72<<24>>24)>(-1);
     if (!($isascii1$i)) {
      label = 42;
      break L21;
     }
     $sext166 = $$0$i$i37 << 24;
     $73 = $sext166 >> 24;
     $74 = HEAP32[$14>>2]|0;
     $75 = (($74) + ($73<<1)|0);
     $76 = HEAP16[$75>>1]|0;
     $77 = $76 & 8192;
     $78 = ($77<<16>>16)==(0);
     if ($78) {
      label = 42;
      break L21;
     }
     $79 = HEAP32[$__b>>2]|0;
     $80 = (($79) + 12|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (($79) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($81|0)==($83|0);
     if ($84) {
      $85 = HEAP32[$79>>2]|0;
      $86 = (($85) + 40|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = (FUNCTION_TABLE_ii[$87 & 63]($79)|0);
      $$0$i$i39 = $88;
     } else {
      $89 = (($81) + 1|0);
      HEAP32[$80>>2] = $89;
      $90 = HEAP8[$81>>0]|0;
      $91 = $90&255;
      $$0$i$i39 = $91;
     }
     $92 = $$0$i$i39&255;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces,$92);
     $$pre$i2$i$i45 = $772;$110 = $772;
     label = 44;
    }
    break;
   }
   case 4:  {
    $59 = HEAP8[$__ts>>0]|0;
    $$pre$i2$i$i112 = $772;$481 = $772;$530 = $771;$__ng$0 = 0;
    L57: while(1) {
     $467 = HEAP32[$__b>>2]|0;
     $468 = ($467|0)==(0|0);
     do {
      if ($468) {
       $479 = 0;
      } else {
       $469 = (($467) + 12|0);
       $470 = HEAP32[$469>>2]|0;
       $471 = (($467) + 16|0);
       $472 = HEAP32[$471>>2]|0;
       $473 = ($470|0)==($472|0);
       if ($473) {
        $474 = HEAP32[$467>>2]|0;
        $475 = (($474) + 36|0);
        $476 = HEAP32[$475>>2]|0;
        $477 = (FUNCTION_TABLE_ii[$476 & 63]($467)|0);
        $478 = ($477|0)==(-1);
        if ($478) {
         HEAP32[$__b>>2] = 0;
         $479 = 0;
         break;
        } else {
         $$pre$i$i$i108 = HEAP32[$__b>>2]|0;
         $479 = $$pre$i$i$i108;
         break;
        }
       } else {
        $479 = $467;
       }
      }
     } while(0);
     $480 = ($479|0)==(0|0);
     $482 = ($481|0)==(0|0);
     do {
      if ($482) {
       $778 = $$pre$i2$i$i112;
       label = 201;
      } else {
       $483 = (($481) + 12|0);
       $484 = HEAP32[$483>>2]|0;
       $485 = (($481) + 16|0);
       $486 = HEAP32[$485>>2]|0;
       $487 = ($484|0)==($486|0);
       if (!($487)) {
        if ($480) {
         $779 = $$pre$i2$i$i112;$780 = $481;
         break;
        } else {
         $$lcssa = $530;$$pre$i2$i$i82 = $$pre$i2$i$i112;$__ng$0$lcssa = $__ng$0;
         break L57;
        }
       }
       $488 = HEAP32[$481>>2]|0;
       $489 = (($488) + 36|0);
       $490 = HEAP32[$489>>2]|0;
       $491 = (FUNCTION_TABLE_ii[$490 & 63]($481)|0);
       $492 = ($491|0)==(-1);
       if ($492) {
        HEAP32[$__e>>2] = 0;
        $778 = 0;
        label = 201;
        break;
       } else {
        $493 = ($$pre$i2$i$i112|0)==(0|0);
        $tmp$i$i114 = $480 ^ $493;
        if ($tmp$i$i114) {
         $779 = $$pre$i2$i$i112;$780 = $$pre$i2$i$i112;
         break;
        } else {
         $$lcssa = $530;$$pre$i2$i$i82 = $$pre$i2$i$i112;$__ng$0$lcssa = $__ng$0;
         break L57;
        }
       }
      }
     } while(0);
     if ((label|0) == 201) {
      label = 0;
      if ($480) {
       $$lcssa = $530;$$pre$i2$i$i82 = $778;$__ng$0$lcssa = $__ng$0;
       break;
      } else {
       $779 = $778;$780 = 0;
      }
     }
     $494 = HEAP32[$__b>>2]|0;
     $495 = (($494) + 12|0);
     $496 = HEAP32[$495>>2]|0;
     $497 = (($494) + 16|0);
     $498 = HEAP32[$497>>2]|0;
     $499 = ($496|0)==($498|0);
     if ($499) {
      $500 = HEAP32[$494>>2]|0;
      $501 = (($500) + 36|0);
      $502 = HEAP32[$501>>2]|0;
      $503 = (FUNCTION_TABLE_ii[$502 & 63]($494)|0);
      $$0$i$i102 = $503;
     } else {
      $504 = HEAP8[$496>>0]|0;
      $505 = $504&255;
      $$0$i$i102 = $505;
     }
     $506 = $$0$i$i102&255;
     $isascii1$i100 = ($506<<24>>24)>(-1);
     if ($isascii1$i100) {
      $sext164 = $$0$i$i102 << 24;
      $507 = $sext164 >> 24;
      $508 = HEAP32[$14>>2]|0;
      $509 = (($508) + ($507<<1)|0);
      $510 = HEAP16[$509>>1]|0;
      $511 = $510 & 2048;
      $512 = ($511<<16>>16)==(0);
      if ($512) {
       label = 211;
      } else {
       $513 = HEAP32[$__wn>>2]|0;
       $514 = HEAP32[$0>>2]|0;
       $515 = ($513|0)==($514|0);
       if ($515) {
        __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$0);
        $$pre198 = HEAP32[$__wn>>2]|0;
        $517 = $$pre198;
       } else {
        $517 = $513;
       }
       $516 = (($517) + 1|0);
       HEAP32[$__wn>>2] = $516;
       HEAP8[$517>>0] = $506;
       $518 = (($__ng$0) + 1)|0;
       $781 = $530;$__ng$1 = $518;
      }
     } else {
      label = 211;
     }
     if ((label|0) == 211) {
      label = 0;
      $519 = HEAP8[$__grp>>0]|0;
      $520 = $519 & 1;
      $521 = ($520<<24>>24)==(0);
      if ($521) {
       $523 = $519&255;
       $524 = $523 >>> 1;
       $525 = $524;
      } else {
       $522 = HEAP32[$28>>2]|0;
       $525 = $522;
      }
      $526 = ($525|0)!=(0);
      $527 = ($__ng$0|0)!=(0);
      $or$cond7 = $527 & $526;
      $528 = ($506<<24>>24)==($59<<24>>24);
      $or$cond13 = $or$cond7 & $528;
      if (!($or$cond13)) {
       $$lcssa = $530;$$pre$i2$i$i82 = $779;$__ng$0$lcssa = $__ng$0;
       break;
      }
      $529 = HEAP32[$__ge>>2]|0;
      $531 = ($530|0)==($529|0);
      if ($531) {
       __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb,$__gn,$__ge);
       $$pre199 = HEAP32[$__gn>>2]|0;
       $533 = $$pre199;
      } else {
       $533 = $530;
      }
      $532 = (($533) + 4|0);
      HEAP32[$__gn>>2] = $532;
      HEAP32[$533>>2] = $__ng$0;
      $781 = $532;$__ng$1 = 0;
     }
     $534 = HEAP32[$__b>>2]|0;
     $535 = (($534) + 12|0);
     $536 = HEAP32[$535>>2]|0;
     $537 = (($534) + 16|0);
     $538 = HEAP32[$537>>2]|0;
     $539 = ($536|0)==($538|0);
     if ($539) {
      $540 = HEAP32[$534>>2]|0;
      $541 = (($540) + 40|0);
      $542 = HEAP32[$541>>2]|0;
      (FUNCTION_TABLE_ii[$542 & 63]($534)|0);
      $$pre$i2$i$i112 = $779;$481 = $780;$530 = $781;$__ng$0 = $__ng$1;
      continue;
     } else {
      $543 = (($536) + 1|0);
      HEAP32[$535>>2] = $543;
      $$pre$i2$i$i112 = $779;$481 = $780;$530 = $781;$__ng$0 = $__ng$1;
      continue;
     }
    }
    $544 = HEAP32[$__gb>>2]|0;
    $545 = ($544|0)!=($$lcssa|0);
    $546 = ($__ng$0$lcssa|0)!=(0);
    $or$cond9 = $546 & $545;
    if ($or$cond9) {
     $547 = HEAP32[$__ge>>2]|0;
     $548 = ($$lcssa|0)==($547|0);
     if ($548) {
      __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb,$__gn,$__ge);
      $$pre195 = HEAP32[$__gn>>2]|0;
      $550 = $$pre195;
     } else {
      $550 = $$lcssa;
     }
     $549 = (($550) + 4|0);
     HEAP32[$__gn>>2] = $549;
     HEAP32[$550>>2] = $__ng$0$lcssa;
     $782 = $549;
    } else {
     $782 = $$lcssa;
    }
    $551 = HEAP32[$__fd>>2]|0;
    $552 = ($551|0)>(0);
    L108: do {
     if ($552) {
      $553 = HEAP32[$__b>>2]|0;
      $554 = ($553|0)==(0|0);
      do {
       if ($554) {
        $565 = 0;
       } else {
        $555 = (($553) + 12|0);
        $556 = HEAP32[$555>>2]|0;
        $557 = (($553) + 16|0);
        $558 = HEAP32[$557>>2]|0;
        $559 = ($556|0)==($558|0);
        if ($559) {
         $560 = HEAP32[$553>>2]|0;
         $561 = (($560) + 36|0);
         $562 = HEAP32[$561>>2]|0;
         $563 = (FUNCTION_TABLE_ii[$562 & 63]($553)|0);
         $564 = ($563|0)==(-1);
         if ($564) {
          HEAP32[$__b>>2] = 0;
          $565 = 0;
          break;
         } else {
          $$pre$i$i$i78 = HEAP32[$__b>>2]|0;
          $565 = $$pre$i$i$i78;
          break;
         }
        } else {
         $565 = $553;
        }
       }
      } while(0);
      $566 = ($565|0)==(0|0);
      $567 = ($$pre$i2$i$i82|0)==(0|0);
      do {
       if ($567) {
        label = 236;
       } else {
        $568 = (($$pre$i2$i$i82) + 12|0);
        $569 = HEAP32[$568>>2]|0;
        $570 = (($$pre$i2$i$i82) + 16|0);
        $571 = HEAP32[$570>>2]|0;
        $572 = ($569|0)==($571|0);
        if ($572) {
         $573 = HEAP32[$$pre$i2$i$i82>>2]|0;
         $574 = (($573) + 36|0);
         $575 = HEAP32[$574>>2]|0;
         $576 = (FUNCTION_TABLE_ii[$575 & 63]($$pre$i2$i$i82)|0);
         $577 = ($576|0)==(-1);
         if ($577) {
          HEAP32[$__e>>2] = 0;
          label = 236;
          break;
         }
        }
        if ($566) {
         $783 = $$pre$i2$i$i82;
        } else {
         label = 241;
         break L21;
        }
       }
      } while(0);
      if ((label|0) == 236) {
       label = 0;
       if ($566) {
        label = 241;
        break L21;
       } else {
        $783 = 0;
       }
      }
      $578 = HEAP32[$__b>>2]|0;
      $579 = (($578) + 12|0);
      $580 = HEAP32[$579>>2]|0;
      $581 = (($578) + 16|0);
      $582 = HEAP32[$581>>2]|0;
      $583 = ($580|0)==($582|0);
      if ($583) {
       $584 = HEAP32[$578>>2]|0;
       $585 = (($584) + 36|0);
       $586 = HEAP32[$585>>2]|0;
       $587 = (FUNCTION_TABLE_ii[$586 & 63]($578)|0);
       $$0$i$i74 = $587;
      } else {
       $588 = HEAP8[$580>>0]|0;
       $589 = $588&255;
       $$0$i$i74 = $589;
      }
      $590 = $$0$i$i74&255;
      $591 = HEAP8[$__dp>>0]|0;
      $592 = ($590<<24>>24)==($591<<24>>24);
      if (!($592)) {
       label = 241;
       break L21;
      }
      $595 = HEAP32[$__b>>2]|0;
      $596 = (($595) + 12|0);
      $597 = HEAP32[$596>>2]|0;
      $598 = (($595) + 16|0);
      $599 = HEAP32[$598>>2]|0;
      $600 = ($597|0)==($599|0);
      if ($600) {
       $601 = HEAP32[$595>>2]|0;
       $602 = (($601) + 40|0);
       $603 = HEAP32[$602>>2]|0;
       (FUNCTION_TABLE_ii[$603 & 63]($595)|0);
       $$pre$i2$i$i66 = $783;$605 = $551;$621 = $783;
      } else {
       $604 = (($597) + 1|0);
       HEAP32[$596>>2] = $604;
       $$pre$i2$i$i66 = $783;$605 = $551;$621 = $783;
      }
      while(1) {
       $606 = ($605|0)>(0);
       if (!($606)) {
        break L108;
       }
       $607 = HEAP32[$__b>>2]|0;
       $608 = ($607|0)==(0|0);
       do {
        if ($608) {
         $619 = 0;
        } else {
         $609 = (($607) + 12|0);
         $610 = HEAP32[$609>>2]|0;
         $611 = (($607) + 16|0);
         $612 = HEAP32[$611>>2]|0;
         $613 = ($610|0)==($612|0);
         if ($613) {
          $614 = HEAP32[$607>>2]|0;
          $615 = (($614) + 36|0);
          $616 = HEAP32[$615>>2]|0;
          $617 = (FUNCTION_TABLE_ii[$616 & 63]($607)|0);
          $618 = ($617|0)==(-1);
          if ($618) {
           HEAP32[$__b>>2] = 0;
           $619 = 0;
           break;
          } else {
           $$pre$i$i$i62 = HEAP32[$__b>>2]|0;
           $619 = $$pre$i$i$i62;
           break;
          }
         } else {
          $619 = $607;
         }
        }
       } while(0);
       $620 = ($619|0)==(0|0);
       $622 = ($621|0)==(0|0);
       do {
        if ($622) {
         $$pre$i2$i$i66196$ph = $$pre$i2$i$i66;
         label = 256;
        } else {
         $623 = (($621) + 12|0);
         $624 = HEAP32[$623>>2]|0;
         $625 = (($621) + 16|0);
         $626 = HEAP32[$625>>2]|0;
         $627 = ($624|0)==($626|0);
         if (!($627)) {
          if ($620) {
           $$pre$i2$i$i66196205 = $$pre$i2$i$i66;$784 = $621;
           break;
          } else {
           label = 263;
           break L21;
          }
         }
         $628 = HEAP32[$621>>2]|0;
         $629 = (($628) + 36|0);
         $630 = HEAP32[$629>>2]|0;
         $631 = (FUNCTION_TABLE_ii[$630 & 63]($621)|0);
         $632 = ($631|0)==(-1);
         if ($632) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i66196$ph = 0;
          label = 256;
          break;
         } else {
          $633 = ($$pre$i2$i$i66|0)==(0|0);
          $tmp$i$i68 = $620 ^ $633;
          if ($tmp$i$i68) {
           $$pre$i2$i$i66196205 = $$pre$i2$i$i66;$784 = $$pre$i2$i$i66;
           break;
          } else {
           label = 263;
           break L21;
          }
         }
        }
       } while(0);
       if ((label|0) == 256) {
        label = 0;
        if ($620) {
         label = 263;
         break L21;
        } else {
         $$pre$i2$i$i66196205 = $$pre$i2$i$i66196$ph;$784 = 0;
        }
       }
       $634 = HEAP32[$__b>>2]|0;
       $635 = (($634) + 12|0);
       $636 = HEAP32[$635>>2]|0;
       $637 = (($634) + 16|0);
       $638 = HEAP32[$637>>2]|0;
       $639 = ($636|0)==($638|0);
       if ($639) {
        $640 = HEAP32[$634>>2]|0;
        $641 = (($640) + 36|0);
        $642 = HEAP32[$641>>2]|0;
        $643 = (FUNCTION_TABLE_ii[$642 & 63]($634)|0);
        $$0$i$i58 = $643;
       } else {
        $644 = HEAP8[$636>>0]|0;
        $645 = $644&255;
        $$0$i$i58 = $645;
       }
       $646 = $$0$i$i58&255;
       $isascii1$i56 = ($646<<24>>24)>(-1);
       if (!($isascii1$i56)) {
        label = 263;
        break L21;
       }
       $sext = $$0$i$i58 << 24;
       $647 = $sext >> 24;
       $648 = HEAP32[$14>>2]|0;
       $649 = (($648) + ($647<<1)|0);
       $650 = HEAP16[$649>>1]|0;
       $651 = $650 & 2048;
       $652 = ($651<<16>>16)==(0);
       if ($652) {
        label = 263;
        break L21;
       }
       $655 = HEAP32[$__wn>>2]|0;
       $656 = HEAP32[$0>>2]|0;
       $657 = ($655|0)==($656|0);
       if ($657) {
        __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$0);
       }
       $658 = HEAP32[$__b>>2]|0;
       $659 = (($658) + 12|0);
       $660 = HEAP32[$659>>2]|0;
       $661 = (($658) + 16|0);
       $662 = HEAP32[$661>>2]|0;
       $663 = ($660|0)==($662|0);
       if ($663) {
        $664 = HEAP32[$658>>2]|0;
        $665 = (($664) + 36|0);
        $666 = HEAP32[$665>>2]|0;
        $667 = (FUNCTION_TABLE_ii[$666 & 63]($658)|0);
        $$0$i$i27 = $667;
       } else {
        $668 = HEAP8[$660>>0]|0;
        $669 = $668&255;
        $$0$i$i27 = $669;
       }
       $670 = $$0$i$i27&255;
       $671 = HEAP32[$__wn>>2]|0;
       $672 = (($671) + 1|0);
       HEAP32[$__wn>>2] = $672;
       HEAP8[$671>>0] = $670;
       $673 = (($605) + -1)|0;
       HEAP32[$__fd>>2] = $673;
       $674 = HEAP32[$__b>>2]|0;
       $675 = (($674) + 12|0);
       $676 = HEAP32[$675>>2]|0;
       $677 = (($674) + 16|0);
       $678 = HEAP32[$677>>2]|0;
       $679 = ($676|0)==($678|0);
       if ($679) {
        $680 = HEAP32[$674>>2]|0;
        $681 = (($680) + 40|0);
        $682 = HEAP32[$681>>2]|0;
        (FUNCTION_TABLE_ii[$682 & 63]($674)|0);
        $$pre$i2$i$i66 = $$pre$i2$i$i66196205;$605 = $673;$621 = $784;
        continue;
       } else {
        $683 = (($676) + 1|0);
        HEAP32[$675>>2] = $683;
        $$pre$i2$i$i66 = $$pre$i2$i$i66196205;$605 = $673;$621 = $784;
        continue;
       }
      }
     }
    } while(0);
    $684 = HEAP32[$__wn>>2]|0;
    $685 = HEAP32[$__wb>>2]|0;
    $686 = ($684|0)==($685|0);
    if ($686) {
     label = 273;
     break L21;
    } else {
     $773 = $782;$__trailing_sign$1 = $__trailing_sign$0;
    }
    break;
   }
   case 3:  {
    $156 = HEAP16[$__psn>>1]|0;
    $157 = $156&255;
    $158 = $157 & 1;
    $159 = ($158<<24>>24)==(0);
    $160 = ($156&65535) >>> 8;
    $161 = $160&255;
    if ($159) {
     $$mask201 = $156 & 254;
     $163 = $$mask201&65535;
     $164 = $163 >>> 1;
     $173 = $164;
    } else {
     $162 = HEAP32[$17>>2]|0;
     $173 = $162;
    }
    $165 = HEAP8[$__nsn>>0]|0;
    $166 = $165 & 1;
    $167 = ($166<<24>>24)==(0);
    if ($167) {
     $169 = $165&255;
     $170 = $169 >>> 1;
     $172 = $170;
    } else {
     $168 = HEAP32[$15>>2]|0;
     $172 = $168;
    }
    $171 = (0 - ($172))|0;
    $174 = ($173|0)==($171|0);
    if ($174) {
     $773 = $771;$__trailing_sign$1 = $__trailing_sign$0;
    } else {
     if ($159) {
      $$mask200 = $156 & 254;
      $176 = $$mask200&65535;
      $177 = $176 >>> 1;
      $178 = $177;
     } else {
      $175 = HEAP32[$17>>2]|0;
      $178 = $175;
     }
     $179 = ($178|0)==(0);
     if (!($179)) {
      if ($167) {
       $181 = $165&255;
       $182 = $181 >>> 1;
       $183 = $182;
      } else {
       $180 = HEAP32[$15>>2]|0;
       $183 = $180;
      }
      $184 = ($183|0)==(0);
      if (!($184)) {
       $255 = HEAP32[$__b>>2]|0;
       $256 = (($255) + 12|0);
       $257 = HEAP32[$256>>2]|0;
       $258 = (($255) + 16|0);
       $259 = HEAP32[$258>>2]|0;
       $260 = ($257|0)==($259|0);
       if ($260) {
        $261 = HEAP32[$255>>2]|0;
        $262 = (($261) + 36|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = (FUNCTION_TABLE_ii[$263 & 63]($255)|0);
        $$pre188 = HEAP16[$__psn>>1]|0;
        $265 = $$pre188&255;
        $266 = ($$pre188&65535) >>> 8;
        $267 = $266&255;
        $$0$i$i94 = $264;$272 = $265;$775 = $267;
       } else {
        $268 = HEAP8[$257>>0]|0;
        $269 = $268&255;
        $$0$i$i94 = $269;$272 = $157;$775 = $161;
       }
       $270 = $$0$i$i94&255;
       $271 = $272 & 1;
       $273 = ($271<<24>>24)==(0);
       if ($273) {
        $276 = $775;
       } else {
        $274 = HEAP32[$18>>2]|0;
        $$pre189 = HEAP8[$274>>0]|0;
        $276 = $$pre189;
       }
       $275 = ($270<<24>>24)==($276<<24>>24);
       $277 = HEAP32[$__b>>2]|0;
       $278 = (($277) + 12|0);
       $279 = HEAP32[$278>>2]|0;
       $280 = (($277) + 16|0);
       $281 = HEAP32[$280>>2]|0;
       $282 = ($279|0)==($281|0);
       if ($275) {
        if ($282) {
         $283 = HEAP32[$277>>2]|0;
         $284 = (($283) + 40|0);
         $285 = HEAP32[$284>>2]|0;
         (FUNCTION_TABLE_ii[$285 & 63]($277)|0);
        } else {
         $286 = (($279) + 1|0);
         HEAP32[$278>>2] = $286;
        }
        $287 = HEAP8[$__psn>>0]|0;
        $288 = $287 & 1;
        $289 = ($288<<24>>24)==(0);
        if ($289) {
         $291 = $287&255;
         $292 = $291 >>> 1;
         $293 = $292;
        } else {
         $290 = HEAP32[$17>>2]|0;
         $293 = $290;
        }
        $294 = ($293>>>0)>(1);
        $__psn$__trailing_sign$010 = $294 ? $__psn : $__trailing_sign$0;
        $773 = $771;$__trailing_sign$1 = $__psn$__trailing_sign$010;
        break L42;
       }
       if ($282) {
        $295 = HEAP32[$277>>2]|0;
        $296 = (($295) + 36|0);
        $297 = HEAP32[$296>>2]|0;
        $298 = (FUNCTION_TABLE_ii[$297 & 63]($277)|0);
        $$0$i$i104 = $298;
       } else {
        $299 = HEAP8[$279>>0]|0;
        $300 = $299&255;
        $$0$i$i104 = $300;
       }
       $301 = $$0$i$i104&255;
       $302 = HEAP16[$__nsn>>1]|0;
       $303 = $302 & 1;
       $304 = ($303<<16>>16)==(0);
       if ($304) {
        $306 = ($302&65535) >>> 8;
        $307 = $306&255;
        $309 = $307;
       } else {
        $305 = HEAP32[$16>>2]|0;
        $$pre190 = HEAP8[$305>>0]|0;
        $309 = $$pre190;
       }
       $308 = ($301<<24>>24)==($309<<24>>24);
       if (!($308)) {
        label = 137;
        break L21;
       }
       $310 = HEAP32[$__b>>2]|0;
       $311 = (($310) + 12|0);
       $312 = HEAP32[$311>>2]|0;
       $313 = (($310) + 16|0);
       $314 = HEAP32[$313>>2]|0;
       $315 = ($312|0)==($314|0);
       if ($315) {
        $316 = HEAP32[$310>>2]|0;
        $317 = (($316) + 40|0);
        $318 = HEAP32[$317>>2]|0;
        (FUNCTION_TABLE_ii[$318 & 63]($310)|0);
       } else {
        $319 = (($312) + 1|0);
        HEAP32[$311>>2] = $319;
       }
       HEAP8[$__neg>>0] = 1;
       $320 = HEAP8[$__nsn>>0]|0;
       $321 = $320 & 1;
       $322 = ($321<<24>>24)==(0);
       if ($322) {
        $324 = $320&255;
        $325 = $324 >>> 1;
        $326 = $325;
       } else {
        $323 = HEAP32[$15>>2]|0;
        $326 = $323;
       }
       $327 = ($326>>>0)>(1);
       $__nsn$__trailing_sign$011 = $327 ? $__nsn : $__trailing_sign$0;
       $773 = $771;$__trailing_sign$1 = $__nsn$__trailing_sign$011;
       break L42;
      }
     }
     if ($159) {
      $$mask = $156 & 254;
      $186 = $$mask&65535;
      $187 = $186 >>> 1;
      $188 = $187;
     } else {
      $185 = HEAP32[$17>>2]|0;
      $188 = $185;
     }
     $189 = ($188|0)==(0);
     $190 = HEAP32[$__b>>2]|0;
     $191 = (($190) + 12|0);
     $192 = HEAP32[$191>>2]|0;
     $193 = (($190) + 16|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = ($192|0)==($194|0);
     if ($195) {
      $196 = HEAP32[$190>>2]|0;
      $197 = (($196) + 36|0);
      $198 = HEAP32[$197>>2]|0;
      $199 = (FUNCTION_TABLE_ii[$198 & 63]($190)|0);
      $$0$i$i86 = $199;
     } else {
      $200 = HEAP8[$192>>0]|0;
      $201 = $200&255;
      $$0$i$i86 = $201;
     }
     $202 = $$0$i$i86&255;
     if ($189) {
      $229 = HEAP16[$__nsn>>1]|0;
      $230 = $229 & 1;
      $231 = ($230<<16>>16)==(0);
      if ($231) {
       $233 = ($229&65535) >>> 8;
       $234 = $233&255;
       $236 = $234;
      } else {
       $232 = HEAP32[$16>>2]|0;
       $$pre = HEAP8[$232>>0]|0;
       $236 = $$pre;
      }
      $235 = ($202<<24>>24)==($236<<24>>24);
      if (!($235)) {
       $773 = $771;$__trailing_sign$1 = $__trailing_sign$0;
       break L42;
      }
      $237 = HEAP32[$__b>>2]|0;
      $238 = (($237) + 12|0);
      $239 = HEAP32[$238>>2]|0;
      $240 = (($237) + 16|0);
      $241 = HEAP32[$240>>2]|0;
      $242 = ($239|0)==($241|0);
      if ($242) {
       $243 = HEAP32[$237>>2]|0;
       $244 = (($243) + 40|0);
       $245 = HEAP32[$244>>2]|0;
       (FUNCTION_TABLE_ii[$245 & 63]($237)|0);
      } else {
       $246 = (($239) + 1|0);
       HEAP32[$238>>2] = $246;
      }
      HEAP8[$__neg>>0] = 1;
      $247 = HEAP8[$__nsn>>0]|0;
      $248 = $247 & 1;
      $249 = ($248<<24>>24)==(0);
      if ($249) {
       $251 = $247&255;
       $252 = $251 >>> 1;
       $253 = $252;
      } else {
       $250 = HEAP32[$15>>2]|0;
       $253 = $250;
      }
      $254 = ($253>>>0)>(1);
      $__nsn$__trailing_sign$0 = $254 ? $__nsn : $__trailing_sign$0;
      $773 = $771;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
      break L42;
     }
     $203 = HEAP16[$__psn>>1]|0;
     $204 = $203 & 1;
     $205 = ($204<<16>>16)==(0);
     if ($205) {
      $207 = ($203&65535) >>> 8;
      $208 = $207&255;
      $210 = $208;
     } else {
      $206 = HEAP32[$18>>2]|0;
      $$pre187 = HEAP8[$206>>0]|0;
      $210 = $$pre187;
     }
     $209 = ($202<<24>>24)==($210<<24>>24);
     if (!($209)) {
      HEAP8[$__neg>>0] = 1;
      $773 = $771;$__trailing_sign$1 = $__trailing_sign$0;
      break L42;
     }
     $211 = HEAP32[$__b>>2]|0;
     $212 = (($211) + 12|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = (($211) + 16|0);
     $215 = HEAP32[$214>>2]|0;
     $216 = ($213|0)==($215|0);
     if ($216) {
      $217 = HEAP32[$211>>2]|0;
      $218 = (($217) + 40|0);
      $219 = HEAP32[$218>>2]|0;
      (FUNCTION_TABLE_ii[$219 & 63]($211)|0);
     } else {
      $220 = (($213) + 1|0);
      HEAP32[$212>>2] = $220;
     }
     $221 = HEAP8[$__psn>>0]|0;
     $222 = $221 & 1;
     $223 = ($222<<24>>24)==(0);
     if ($223) {
      $225 = $221&255;
      $226 = $225 >>> 1;
      $227 = $226;
     } else {
      $224 = HEAP32[$17>>2]|0;
      $227 = $224;
     }
     $228 = ($227>>>0)>(1);
     $__psn$__trailing_sign$0 = $228 ? $__psn : $__trailing_sign$0;
     $773 = $771;$__trailing_sign$1 = $__psn$__trailing_sign$0;
    }
    break;
   }
   case 2:  {
    $330 = ($__trailing_sign$0|0)!=(0|0);
    $331 = ($__p$0>>>0)<(2);
    $or$cond = $331 | $330;
    if (!($or$cond)) {
     $332 = ($__p$0|0)==(2);
     if ($332) {
      $333 = HEAP8[$27>>0]|0;
      $334 = ($333<<24>>24)!=(0);
      $335 = $334;
     } else {
      $335 = 0;
     }
     $brmerge = $20 | $335;
     if (!($brmerge)) {
      $773 = $771;$__trailing_sign$1 = 0;
      break L42;
     }
    }
    $336 = HEAP8[$__sym>>0]|0;
    $337 = $336 & 1;
    $338 = ($337<<24>>24)==(0);
    $339 = HEAP32[$22>>2]|0;
    $$ = $338 ? $21 : $339;
    $340 = ($__p$0|0)==(0);
    L275: do {
     if ($340) {
      $$pre$i2$i$i127 = $772;$390 = $336;$399 = $$;$415 = $772;
     } else {
      $341 = (($__p$0) + -1)|0;
      $342 = (($__pat) + ($341)|0);
      $343 = HEAP8[$342>>0]|0;
      $switch = ($343&255)<(2);
      if ($switch) {
       $344 = $336&255;
       $345 = $344 >>> 1;
       $346 = HEAP32[$14>>2]|0;
       $347 = HEAP32[$22>>2]|0;
       $348 = HEAP32[$23>>2]|0;
       $350 = $$;
       while(1) {
        $$208 = $338 ? $21 : $347;
        $$209 = $338 ? $345 : $348;
        $349 = (($$208) + ($$209)|0);
        $351 = ($350|0)==($349|0);
        if ($351) {
         $$lcssa228 = $350;
         break;
        }
        $352 = HEAP8[$350>>0]|0;
        $isascii1$i139 = ($352<<24>>24)>(-1);
        if (!($isascii1$i139)) {
         $$lcssa228 = $350;
         break;
        }
        $353 = $352 << 24 >> 24;
        $354 = (($346) + ($353<<1)|0);
        $355 = HEAP16[$354>>1]|0;
        $356 = $355 & 8192;
        $357 = ($356<<16>>16)==(0);
        if ($357) {
         $$lcssa228 = $350;
         break;
        }
        $358 = (($350) + 1|0);
        $350 = $358;
       }
       $$210 = $338 ? $21 : $347;
       $359 = $$lcssa228;
       $360 = $$210;
       $361 = (($359) - ($360))|0;
       $362 = HEAP8[$__spaces>>0]|0;
       $363 = $362 & 1;
       $364 = ($363<<24>>24)==(0);
       if ($364) {
        $366 = $362&255;
        $367 = $366 >>> 1;
        $369 = $367;
       } else {
        $365 = HEAP32[$26>>2]|0;
        $369 = $365;
       }
       $368 = ($361>>>0)>($369>>>0);
       L288: do {
        if (!($368)) {
         if ($364) {
          $373 = $362&255;
          $374 = $373 >>> 1;
          $$sum202 = (($374) - ($361))|0;
          $375 = ((($__spaces) + ($$sum202)|0) + 1|0);
          $376 = $362&255;
          $377 = $376 >>> 1;
          $379 = $24;$380 = $377;$776 = $375;
         } else {
          $370 = HEAP32[$25>>2]|0;
          $371 = HEAP32[$26>>2]|0;
          $$sum = (($371) - ($361))|0;
          $372 = (($370) + ($$sum)|0);
          $379 = $370;$380 = $371;$776 = $372;
         }
         $378 = (($379) + ($380)|0);
         $$211 = $338 ? $21 : $347;
         $381 = $776;$385 = $$211;
         while(1) {
          $382 = ($381|0)==($378|0);
          if ($382) {
           $$pre$i2$i$i127 = $772;$390 = $336;$399 = $$lcssa228;$415 = $772;
           break L275;
          }
          $383 = HEAP8[$381>>0]|0;
          $384 = HEAP8[$385>>0]|0;
          $386 = ($383<<24>>24)==($384<<24>>24);
          if (!($386)) {
           break L288;
          }
          $387 = (($381) + 1|0);
          $388 = (($385) + 1|0);
          $381 = $387;$385 = $388;
         }
        }
       } while(0);
       $$212 = $338 ? $21 : $347;
       $$pre$i2$i$i127 = $772;$390 = $336;$399 = $$212;$415 = $772;
      } else {
       $$pre$i2$i$i127 = $772;$390 = $336;$399 = $$;$415 = $772;
      }
     }
    } while(0);
    L299: while(1) {
     $389 = $390 & 1;
     $391 = ($389<<24>>24)==(0);
     if ($391) {
      $394 = $390&255;
      $395 = $394 >>> 1;
      $397 = $21;$398 = $395;
     } else {
      $392 = HEAP32[$22>>2]|0;
      $393 = HEAP32[$23>>2]|0;
      $397 = $392;$398 = $393;
     }
     $396 = (($397) + ($398)|0);
     $400 = ($399|0)==($396|0);
     if ($400) {
      $$lcssa229 = $399;
      break;
     }
     $401 = HEAP32[$__b>>2]|0;
     $402 = ($401|0)==(0|0);
     do {
      if ($402) {
       $413 = 0;
      } else {
       $403 = (($401) + 12|0);
       $404 = HEAP32[$403>>2]|0;
       $405 = (($401) + 16|0);
       $406 = HEAP32[$405>>2]|0;
       $407 = ($404|0)==($406|0);
       if ($407) {
        $408 = HEAP32[$401>>2]|0;
        $409 = (($408) + 36|0);
        $410 = HEAP32[$409>>2]|0;
        $411 = (FUNCTION_TABLE_ii[$410 & 63]($401)|0);
        $412 = ($411|0)==(-1);
        if ($412) {
         HEAP32[$__b>>2] = 0;
         $413 = 0;
         break;
        } else {
         $$pre$i$i$i123 = HEAP32[$__b>>2]|0;
         $413 = $$pre$i$i$i123;
         break;
        }
       } else {
        $413 = $401;
       }
      }
     } while(0);
     $414 = ($413|0)==(0|0);
     $416 = ($415|0)==(0|0);
     do {
      if ($416) {
       $$pre$i2$i$i127193 = $$pre$i2$i$i127;
       label = 175;
      } else {
       $417 = (($415) + 12|0);
       $418 = HEAP32[$417>>2]|0;
       $419 = (($415) + 16|0);
       $420 = HEAP32[$419>>2]|0;
       $421 = ($418|0)==($420|0);
       if (!($421)) {
        if ($414) {
         $$pre$i2$i$i127192 = $$pre$i2$i$i127;$777 = $415;
         break;
        } else {
         $$lcssa229 = $399;
         break L299;
        }
       }
       $422 = HEAP32[$415>>2]|0;
       $423 = (($422) + 36|0);
       $424 = HEAP32[$423>>2]|0;
       $425 = (FUNCTION_TABLE_ii[$424 & 63]($415)|0);
       $426 = ($425|0)==(-1);
       if ($426) {
        HEAP32[$__e>>2] = 0;
        $$pre$i2$i$i127193 = 0;
        label = 175;
        break;
       } else {
        $427 = ($$pre$i2$i$i127|0)==(0|0);
        $tmp$i$i129 = $414 ^ $427;
        if ($tmp$i$i129) {
         $$pre$i2$i$i127192 = $$pre$i2$i$i127;$777 = $$pre$i2$i$i127;
         break;
        } else {
         $$lcssa229 = $399;
         break L299;
        }
       }
      }
     } while(0);
     if ((label|0) == 175) {
      label = 0;
      if ($414) {
       $$lcssa229 = $399;
       break;
      } else {
       $$pre$i2$i$i127192 = $$pre$i2$i$i127193;$777 = 0;
      }
     }
     $428 = HEAP32[$__b>>2]|0;
     $429 = (($428) + 12|0);
     $430 = HEAP32[$429>>2]|0;
     $431 = (($428) + 16|0);
     $432 = HEAP32[$431>>2]|0;
     $433 = ($430|0)==($432|0);
     if ($433) {
      $434 = HEAP32[$428>>2]|0;
      $435 = (($434) + 36|0);
      $436 = HEAP32[$435>>2]|0;
      $437 = (FUNCTION_TABLE_ii[$436 & 63]($428)|0);
      $$0$i$i119 = $437;
     } else {
      $438 = HEAP8[$430>>0]|0;
      $439 = $438&255;
      $$0$i$i119 = $439;
     }
     $440 = $$0$i$i119&255;
     $441 = HEAP8[$399>>0]|0;
     $442 = ($440<<24>>24)==($441<<24>>24);
     if (!($442)) {
      $$lcssa229 = $399;
      break;
     }
     $443 = HEAP32[$__b>>2]|0;
     $444 = (($443) + 12|0);
     $445 = HEAP32[$444>>2]|0;
     $446 = (($443) + 16|0);
     $447 = HEAP32[$446>>2]|0;
     $448 = ($445|0)==($447|0);
     if ($448) {
      $449 = HEAP32[$443>>2]|0;
      $450 = (($449) + 40|0);
      $451 = HEAP32[$450>>2]|0;
      (FUNCTION_TABLE_ii[$451 & 63]($443)|0);
     } else {
      $452 = (($445) + 1|0);
      HEAP32[$444>>2] = $452;
     }
     $453 = (($399) + 1|0);
     $$pre191 = HEAP8[$__sym>>0]|0;
     $$pre$i2$i$i127 = $$pre$i2$i$i127192;$390 = $$pre191;$399 = $453;$415 = $777;
    }
    if ($20) {
     $454 = HEAP8[$__sym>>0]|0;
     $455 = $454 & 1;
     $456 = ($455<<24>>24)==(0);
     if ($456) {
      $459 = $454&255;
      $460 = $459 >>> 1;
      $462 = $21;$463 = $460;
     } else {
      $457 = HEAP32[$22>>2]|0;
      $458 = HEAP32[$23>>2]|0;
      $462 = $457;$463 = $458;
     }
     $461 = (($462) + ($463)|0);
     $464 = ($$lcssa229|0)==($461|0);
     if ($464) {
      $773 = $771;$__trailing_sign$1 = $__trailing_sign$0;
     } else {
      label = 190;
      break L21;
     }
    } else {
     $773 = $771;$__trailing_sign$1 = $__trailing_sign$0;
    }
    break;
   }
   default: {
    $773 = $771;$__trailing_sign$1 = $__trailing_sign$0;
   }
   }
  } while(0);
  L339: do {
   if ((label|0) == 44) {
    while(1) {
     label = 0;
     $96 = HEAP32[$__b>>2]|0;
     $97 = ($96|0)==(0|0);
     do {
      if ($97) {
       $108 = 0;
      } else {
       $98 = (($96) + 12|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = (($96) + 16|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = ($99|0)==($101|0);
       if ($102) {
        $103 = HEAP32[$96>>2]|0;
        $104 = (($103) + 36|0);
        $105 = HEAP32[$104>>2]|0;
        $106 = (FUNCTION_TABLE_ii[$105 & 63]($96)|0);
        $107 = ($106|0)==(-1);
        if ($107) {
         HEAP32[$__b>>2] = 0;
         $108 = 0;
         break;
        } else {
         $$pre$i$i$i41 = HEAP32[$__b>>2]|0;
         $108 = $$pre$i$i$i41;
         break;
        }
       } else {
        $108 = $96;
       }
      }
     } while(0);
     $109 = ($108|0)==(0|0);
     $111 = ($110|0)==(0|0);
     do {
      if ($111) {
       $$pre$i2$i$i45184 = $$pre$i2$i$i45;
       label = 54;
      } else {
       $112 = (($110) + 12|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = (($110) + 16|0);
       $115 = HEAP32[$114>>2]|0;
       $116 = ($113|0)==($115|0);
       if (!($116)) {
        if ($109) {
         $$pre$i2$i$i45186 = $$pre$i2$i$i45;$774 = $110;
         break;
        } else {
         $773 = $771;$__trailing_sign$1 = $__trailing_sign$0;
         break L339;
        }
       }
       $117 = HEAP32[$110>>2]|0;
       $118 = (($117) + 36|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = (FUNCTION_TABLE_ii[$119 & 63]($110)|0);
       $121 = ($120|0)==(-1);
       if ($121) {
        HEAP32[$__e>>2] = 0;
        $$pre$i2$i$i45184 = 0;
        label = 54;
        break;
       } else {
        $122 = ($$pre$i2$i$i45|0)==(0|0);
        $tmp$i$i47 = $109 ^ $122;
        if ($tmp$i$i47) {
         $$pre$i2$i$i45186 = $$pre$i2$i$i45;$774 = $$pre$i2$i$i45;
         break;
        } else {
         $773 = $771;$__trailing_sign$1 = $__trailing_sign$0;
         break L339;
        }
       }
      }
     } while(0);
     if ((label|0) == 54) {
      label = 0;
      if ($109) {
       $773 = $771;$__trailing_sign$1 = $__trailing_sign$0;
       break L339;
      } else {
       $$pre$i2$i$i45186 = $$pre$i2$i$i45184;$774 = 0;
      }
     }
     $123 = HEAP32[$__b>>2]|0;
     $124 = (($123) + 12|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = (($123) + 16|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = ($125|0)==($127|0);
     if ($128) {
      $129 = HEAP32[$123>>2]|0;
      $130 = (($129) + 36|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = (FUNCTION_TABLE_ii[$131 & 63]($123)|0);
      $$0$i$i49 = $132;
     } else {
      $133 = HEAP8[$125>>0]|0;
      $134 = $133&255;
      $$0$i$i49 = $134;
     }
     $135 = $$0$i$i49&255;
     $isascii1$i51 = ($135<<24>>24)>(-1);
     if (!($isascii1$i51)) {
      $773 = $771;$__trailing_sign$1 = $__trailing_sign$0;
      break L339;
     }
     $sext165 = $$0$i$i49 << 24;
     $136 = $sext165 >> 24;
     $137 = HEAP32[$14>>2]|0;
     $138 = (($137) + ($136<<1)|0);
     $139 = HEAP16[$138>>1]|0;
     $140 = $139 & 8192;
     $141 = ($140<<16>>16)==(0);
     if ($141) {
      $773 = $771;$__trailing_sign$1 = $__trailing_sign$0;
      break L339;
     }
     $142 = HEAP32[$__b>>2]|0;
     $143 = (($142) + 12|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = (($142) + 16|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($144|0)==($146|0);
     if ($147) {
      $148 = HEAP32[$142>>2]|0;
      $149 = (($148) + 40|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = (FUNCTION_TABLE_ii[$150 & 63]($142)|0);
      $$0$i$i54 = $151;
     } else {
      $152 = (($144) + 1|0);
      HEAP32[$143>>2] = $152;
      $153 = HEAP8[$144>>0]|0;
      $154 = $153&255;
      $$0$i$i54 = $154;
     }
     $155 = $$0$i$i54&255;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces,$155);
     $$pre$i2$i$i45 = $$pre$i2$i$i45186;$110 = $774;
     label = 44;
    }
   }
  } while(0);
  $689 = (($__p$0) + 1)|0;
  $771 = $773;$__p$0 = $689;$__trailing_sign$0 = $__trailing_sign$1;
 }
 L371: do {
  if ((label|0) == 42) {
   $93 = HEAP32[$__err>>2]|0;
   $94 = $93 | 4;
   HEAP32[$__err>>2] = $94;
   $$0 = 0;
  }
  else if ((label|0) == 137) {
   $328 = HEAP32[$__err>>2]|0;
   $329 = $328 | 4;
   HEAP32[$__err>>2] = $329;
   $$0 = 0;
  }
  else if ((label|0) == 190) {
   $465 = HEAP32[$__err>>2]|0;
   $466 = $465 | 4;
   HEAP32[$__err>>2] = $466;
   $$0 = 0;
  }
  else if ((label|0) == 241) {
   $593 = HEAP32[$__err>>2]|0;
   $594 = $593 | 4;
   HEAP32[$__err>>2] = $594;
   $$0 = 0;
  }
  else if ((label|0) == 263) {
   $653 = HEAP32[$__err>>2]|0;
   $654 = $653 | 4;
   HEAP32[$__err>>2] = $654;
   $$0 = 0;
  }
  else if ((label|0) == 273) {
   $687 = HEAP32[$__err>>2]|0;
   $688 = $687 | 4;
   HEAP32[$__err>>2] = $688;
   $$0 = 0;
  }
  else if ((label|0) == 275) {
   $690 = ($__trailing_sign$0$lcssa|0)==(0|0);
   L375: do {
    if (!($690)) {
     $691 = (($__trailing_sign$0$lcssa) + 1|0);
     $692 = (($__trailing_sign$0$lcssa) + 8|0);
     $693 = (($__trailing_sign$0$lcssa) + 4|0);
     $__i$0 = 1;
     L377: while(1) {
      $694 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
      $695 = $694 & 1;
      $696 = ($695<<24>>24)==(0);
      if ($696) {
       $698 = $694&255;
       $699 = $698 >>> 1;
       $701 = $699;
      } else {
       $697 = HEAP32[$693>>2]|0;
       $701 = $697;
      }
      $700 = ($__i$0>>>0)<($701>>>0);
      if (!($700)) {
       break L375;
      }
      $702 = HEAP32[$__b>>2]|0;
      $703 = ($702|0)==(0|0);
      do {
       if ($703) {
        $714 = 0;
       } else {
        $704 = (($702) + 12|0);
        $705 = HEAP32[$704>>2]|0;
        $706 = (($702) + 16|0);
        $707 = HEAP32[$706>>2]|0;
        $708 = ($705|0)==($707|0);
        if ($708) {
         $709 = HEAP32[$702>>2]|0;
         $710 = (($709) + 36|0);
         $711 = HEAP32[$710>>2]|0;
         $712 = (FUNCTION_TABLE_ii[$711 & 63]($702)|0);
         $713 = ($712|0)==(-1);
         if ($713) {
          HEAP32[$__b>>2] = 0;
          $714 = 0;
          break;
         } else {
          $$pre$i$i$i = HEAP32[$__b>>2]|0;
          $714 = $$pre$i$i$i;
          break;
         }
        } else {
         $714 = $702;
        }
       }
      } while(0);
      $715 = ($714|0)==(0|0);
      $716 = HEAP32[$__e>>2]|0;
      $717 = ($716|0)==(0|0);
      do {
       if ($717) {
        label = 291;
       } else {
        $718 = (($716) + 12|0);
        $719 = HEAP32[$718>>2]|0;
        $720 = (($716) + 16|0);
        $721 = HEAP32[$720>>2]|0;
        $722 = ($719|0)==($721|0);
        if ($722) {
         $723 = HEAP32[$716>>2]|0;
         $724 = (($723) + 36|0);
         $725 = HEAP32[$724>>2]|0;
         $726 = (FUNCTION_TABLE_ii[$725 & 63]($716)|0);
         $727 = ($726|0)==(-1);
         if ($727) {
          HEAP32[$__e>>2] = 0;
          label = 291;
          break;
         }
        }
        if (!($715)) {
         break L377;
        }
       }
      } while(0);
      if ((label|0) == 291) {
       label = 0;
       if ($715) {
        break;
       }
      }
      $728 = HEAP32[$__b>>2]|0;
      $729 = (($728) + 12|0);
      $730 = HEAP32[$729>>2]|0;
      $731 = (($728) + 16|0);
      $732 = HEAP32[$731>>2]|0;
      $733 = ($730|0)==($732|0);
      if ($733) {
       $734 = HEAP32[$728>>2]|0;
       $735 = (($734) + 36|0);
       $736 = HEAP32[$735>>2]|0;
       $737 = (FUNCTION_TABLE_ii[$736 & 63]($728)|0);
       $$0$i$i = $737;
      } else {
       $738 = HEAP8[$730>>0]|0;
       $739 = $738&255;
       $$0$i$i = $739;
      }
      $740 = $$0$i$i&255;
      $741 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
      $742 = $741 & 1;
      $743 = ($742<<24>>24)==(0);
      if ($743) {
       $746 = $691;
      } else {
       $744 = HEAP32[$692>>2]|0;
       $746 = $744;
      }
      $745 = (($746) + ($__i$0)|0);
      $747 = HEAP8[$745>>0]|0;
      $748 = ($740<<24>>24)==($747<<24>>24);
      if (!($748)) {
       break;
      }
      $751 = (($__i$0) + 1)|0;
      $752 = HEAP32[$__b>>2]|0;
      $753 = (($752) + 12|0);
      $754 = HEAP32[$753>>2]|0;
      $755 = (($752) + 16|0);
      $756 = HEAP32[$755>>2]|0;
      $757 = ($754|0)==($756|0);
      if ($757) {
       $758 = HEAP32[$752>>2]|0;
       $759 = (($758) + 40|0);
       $760 = HEAP32[$759>>2]|0;
       (FUNCTION_TABLE_ii[$760 & 63]($752)|0);
       $__i$0 = $751;
       continue;
      } else {
       $761 = (($754) + 1|0);
       HEAP32[$753>>2] = $761;
       $__i$0 = $751;
       continue;
      }
     }
     $749 = HEAP32[$__err>>2]|0;
     $750 = $749 | 4;
     HEAP32[$__err>>2] = $750;
     $$0 = 0;
     break L371;
    }
   } while(0);
   $762 = HEAP32[$__gb>>2]|0;
   $763 = ($762|0)==($$lcssa230|0);
   if ($763) {
    $$0 = 1;
   } else {
    HEAP32[$__et>>2] = 0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$762,$$lcssa230,$__et);
    $764 = HEAP32[$__et>>2]|0;
    $765 = ($764|0)==(0);
    if ($765) {
     $$0 = 1;
    } else {
     $766 = HEAP32[$__err>>2]|0;
     $767 = $766 | 4;
     HEAP32[$__err>>2] = $767;
     $$0 = 0;
    }
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $768 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $769 = ($768|0)==(0|0);
 if (!($769)) {
  $770 = HEAP32[$1>>2]|0;
  FUNCTION_TABLE_vi[$770 & 127]($768);
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, $__neg = 0, $__w$0 = 0, $__w$0$lcssa = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $$byval_copy = sp + 24|0;
 $__wbuf = sp + 32|0;
 $__wb = sp + 16|0;
 $__wn = sp + 8|0;
 $__loc = sp + 4|0;
 $__neg = sp + 28|0;
 $0 = sp;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 107;
 $2 = (($__wbuf) + 100|0);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6704)|0);
 HEAP8[$__neg>>0] = 0;
 $4 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $4;
 $5 = (($__iob) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $7 = (__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$$byval_copy,$__intl,$__loc,$6,$__err,$__neg,$3,$__wb,$__wn,$2)|0);
 if ($7) {
  $8 = HEAP8[$__v>>0]|0;
  $9 = $8 & 1;
  $10 = ($9<<24>>24)==(0);
  if ($10) {
   $14 = (($__v) + 1|0);
   HEAP8[$14>>0] = 0;
   HEAP8[$__v>>0] = 0;
  } else {
   $11 = (($__v) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   HEAP8[$12>>0] = 0;
   $13 = (($__v) + 4|0);
   HEAP32[$13>>2] = 0;
  }
  $15 = HEAP8[$__neg>>0]|0;
  $16 = ($15<<24>>24)==(0);
  if (!($16)) {
   $17 = HEAP32[$3>>2]|0;
   $18 = (($17) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (FUNCTION_TABLE_iii[$19 & 15]($3,45)|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__v,$20);
  }
  $21 = HEAP32[$3>>2]|0;
  $22 = (($21) + 28|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (FUNCTION_TABLE_iii[$23 & 15]($3,48)|0);
  $25 = HEAP32[$__wb>>2]|0;
  $26 = HEAP32[$__wn>>2]|0;
  $27 = (($26) + -1|0);
  $__w$0 = $25;
  while(1) {
   $28 = ($__w$0>>>0)<($27>>>0);
   if (!($28)) {
    $__w$0$lcssa = $__w$0;
    break;
   }
   $29 = HEAP8[$__w$0>>0]|0;
   $30 = ($29<<24>>24)==($24<<24>>24);
   if (!($30)) {
    $__w$0$lcssa = $__w$0;
    break;
   }
   $31 = (($__w$0) + 1|0);
   $__w$0 = $31;
  }
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v,$__w$0$lcssa,$26)|0);
 }
 $32 = HEAP32[$__b>>2]|0;
 $33 = ($32|0)==(0|0);
 do {
  if ($33) {
   $44 = 0;
  } else {
   $34 = (($32) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($32) + 16|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($35|0)==($37|0);
   if ($38) {
    $39 = HEAP32[$32>>2]|0;
    $40 = (($39) + 36|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (FUNCTION_TABLE_ii[$41 & 63]($32)|0);
    $43 = ($42|0)==(-1);
    if ($43) {
     HEAP32[$__b>>2] = 0;
     $44 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $44 = $$pre$i$i$i;
     break;
    }
   } else {
    $44 = $32;
   }
  }
 } while(0);
 $45 = ($44|0)==(0|0);
 $46 = ($4|0)==(0|0);
 do {
  if ($46) {
   label = 22;
  } else {
   $47 = (($4) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($4) + 16|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($48|0)==($50|0);
   if ($51) {
    $52 = HEAP32[$4>>2]|0;
    $53 = (($52) + 36|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (FUNCTION_TABLE_ii[$54 & 63]($4)|0);
    $56 = ($55|0)==(-1);
    if ($56) {
     HEAP32[$__e>>2] = 0;
     label = 22;
     break;
    }
   }
   if (!($45)) {
    label = 23;
   }
  }
 } while(0);
 if ((label|0) == 22) {
  if ($45) {
   label = 23;
  }
 }
 if ((label|0) == 23) {
  $57 = HEAP32[$__err>>2]|0;
  $58 = $57 | 2;
  HEAP32[$__err>>2] = $58;
 }
 $59 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $59;
 $60 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($60)|0);
 $61 = HEAP32[$__wb>>2]|0;
 HEAP32[$__wb>>2] = 0;
 $62 = ($61|0)==(0|0);
 if (!($62)) {
  $63 = HEAP32[$1>>2]|0;
  FUNCTION_TABLE_vi[$63 & 127]($61);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__i$0$i$i$i = 0, $__i$0$i$i$i11 = 0, $__i$0$i$i$i15 = 0, $__i$0$i$i$i19 = 0, $__i$0$i$i$i23 = 0, $__i$0$i$i$i27 = 0, $__i$0$i$i$i3 = 0, $__i$0$i$i$i7 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i12 = 0, $exitcond$i$i$i16 = 0, $exitcond$i$i$i20 = 0, $exitcond$i$i$i24 = 0, $exitcond$i$i$i28 = 0, $exitcond$i$i$i4 = 0, $exitcond$i$i$i8 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $0 = sp + 100|0;
 $1 = sp + 88|0;
 $2 = sp + 76|0;
 $3 = sp + 64|0;
 $4 = sp + 52|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 if ($__intl) {
  $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,5984)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vii[$13 & 63]($0,$10);
  $14 = HEAP32[$0>>2]|0;
  HEAP8[$__pat>>0]=$14&255;HEAP8[$__pat+1>>0]=($14>>8)&255;HEAP8[$__pat+2>>0]=($14>>16)&255;HEAP8[$__pat+3>>0]=$14>>24;
  $15 = HEAP32[$10>>2]|0;
  $16 = (($15) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vii[$17 & 63]($1,$10);
  $18 = HEAP8[$__nsn>>0]|0;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   $24 = (($__nsn) + 1|0);
   HEAP8[$24>>0] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $21 = (($__nsn) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP8[$22>>0] = 0;
   $23 = (($__nsn) + 4|0);
   HEAP32[$23>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn,0);
  ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
  $__i$0$i$i$i = 0;
  while(1) {
   $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
   if ($exitcond$i$i$i) {
    break;
   }
   $25 = (($1) + ($__i$0$i$i$i<<2)|0);
   HEAP32[$25>>2] = 0;
   $26 = (($__i$0$i$i$i) + 1)|0;
   $__i$0$i$i$i = $26;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
  $27 = HEAP32[$10>>2]|0;
  $28 = (($27) + 28|0);
  $29 = HEAP32[$28>>2]|0;
  FUNCTION_TABLE_vii[$29 & 63]($2,$10);
  $30 = HEAP8[$__psn>>0]|0;
  $31 = $30 & 1;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $36 = (($__psn) + 1|0);
   HEAP8[$36>>0] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $33 = (($__psn) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   HEAP8[$34>>0] = 0;
   $35 = (($__psn) + 4|0);
   HEAP32[$35>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn,0);
  ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
  $__i$0$i$i$i3 = 0;
  while(1) {
   $exitcond$i$i$i4 = ($__i$0$i$i$i3|0)==(3);
   if ($exitcond$i$i$i4) {
    break;
   }
   $37 = (($2) + ($__i$0$i$i$i3<<2)|0);
   HEAP32[$37>>2] = 0;
   $38 = (($__i$0$i$i$i3) + 1)|0;
   $__i$0$i$i$i3 = $38;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
  $39 = HEAP32[$10>>2]|0;
  $40 = (($39) + 12|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (FUNCTION_TABLE_ii[$41 & 63]($10)|0);
  HEAP8[$__dp>>0] = $42;
  $43 = HEAP32[$10>>2]|0;
  $44 = (($43) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (FUNCTION_TABLE_ii[$45 & 63]($10)|0);
  HEAP8[$__ts>>0] = $46;
  $47 = HEAP32[$10>>2]|0;
  $48 = (($47) + 20|0);
  $49 = HEAP32[$48>>2]|0;
  FUNCTION_TABLE_vii[$49 & 63]($3,$10);
  $50 = HEAP8[$__grp>>0]|0;
  $51 = $50 & 1;
  $52 = ($51<<24>>24)==(0);
  if ($52) {
   $56 = (($__grp) + 1|0);
   HEAP8[$56>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $53 = (($__grp) + 8|0);
   $54 = HEAP32[$53>>2]|0;
   HEAP8[$54>>0] = 0;
   $55 = (($__grp) + 4|0);
   HEAP32[$55>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0);
  ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
  $__i$0$i$i$i7 = 0;
  while(1) {
   $exitcond$i$i$i8 = ($__i$0$i$i$i7|0)==(3);
   if ($exitcond$i$i$i8) {
    break;
   }
   $57 = (($3) + ($__i$0$i$i$i7<<2)|0);
   HEAP32[$57>>2] = 0;
   $58 = (($__i$0$i$i$i7) + 1)|0;
   $__i$0$i$i$i7 = $58;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
  $59 = HEAP32[$10>>2]|0;
  $60 = (($59) + 24|0);
  $61 = HEAP32[$60>>2]|0;
  FUNCTION_TABLE_vii[$61 & 63]($4,$10);
  $62 = HEAP8[$__sym>>0]|0;
  $63 = $62 & 1;
  $64 = ($63<<24>>24)==(0);
  if ($64) {
   $68 = (($__sym) + 1|0);
   HEAP8[$68>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $65 = (($__sym) + 8|0);
   $66 = HEAP32[$65>>2]|0;
   HEAP8[$66>>0] = 0;
   $67 = (($__sym) + 4|0);
   HEAP32[$67>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0);
  ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
  $__i$0$i$i$i11 = 0;
  while(1) {
   $exitcond$i$i$i12 = ($__i$0$i$i$i11|0)==(3);
   if ($exitcond$i$i$i12) {
    break;
   }
   $69 = (($4) + ($__i$0$i$i$i11<<2)|0);
   HEAP32[$69>>2] = 0;
   $70 = (($__i$0$i$i$i11) + 1)|0;
   $__i$0$i$i$i11 = $70;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
  $71 = HEAP32[$10>>2]|0;
  $72 = (($71) + 36|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (FUNCTION_TABLE_ii[$73 & 63]($10)|0);
  $storemerge = $74;
 } else {
  $75 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,5920)|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + 44|0);
  $78 = HEAP32[$77>>2]|0;
  FUNCTION_TABLE_vii[$78 & 63]($5,$75);
  $79 = HEAP32[$5>>2]|0;
  HEAP8[$__pat>>0]=$79&255;HEAP8[$__pat+1>>0]=($79>>8)&255;HEAP8[$__pat+2>>0]=($79>>16)&255;HEAP8[$__pat+3>>0]=$79>>24;
  $80 = HEAP32[$75>>2]|0;
  $81 = (($80) + 32|0);
  $82 = HEAP32[$81>>2]|0;
  FUNCTION_TABLE_vii[$82 & 63]($6,$75);
  $83 = HEAP8[$__nsn>>0]|0;
  $84 = $83 & 1;
  $85 = ($84<<24>>24)==(0);
  if ($85) {
   $89 = (($__nsn) + 1|0);
   HEAP8[$89>>0] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $86 = (($__nsn) + 8|0);
   $87 = HEAP32[$86>>2]|0;
   HEAP8[$87>>0] = 0;
   $88 = (($__nsn) + 4|0);
   HEAP32[$88>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn,0);
  ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
  $__i$0$i$i$i15 = 0;
  while(1) {
   $exitcond$i$i$i16 = ($__i$0$i$i$i15|0)==(3);
   if ($exitcond$i$i$i16) {
    break;
   }
   $90 = (($6) + ($__i$0$i$i$i15<<2)|0);
   HEAP32[$90>>2] = 0;
   $91 = (($__i$0$i$i$i15) + 1)|0;
   $__i$0$i$i$i15 = $91;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
  $92 = HEAP32[$75>>2]|0;
  $93 = (($92) + 28|0);
  $94 = HEAP32[$93>>2]|0;
  FUNCTION_TABLE_vii[$94 & 63]($7,$75);
  $95 = HEAP8[$__psn>>0]|0;
  $96 = $95 & 1;
  $97 = ($96<<24>>24)==(0);
  if ($97) {
   $101 = (($__psn) + 1|0);
   HEAP8[$101>>0] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $98 = (($__psn) + 8|0);
   $99 = HEAP32[$98>>2]|0;
   HEAP8[$99>>0] = 0;
   $100 = (($__psn) + 4|0);
   HEAP32[$100>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn,0);
  ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
  $__i$0$i$i$i19 = 0;
  while(1) {
   $exitcond$i$i$i20 = ($__i$0$i$i$i19|0)==(3);
   if ($exitcond$i$i$i20) {
    break;
   }
   $102 = (($7) + ($__i$0$i$i$i19<<2)|0);
   HEAP32[$102>>2] = 0;
   $103 = (($__i$0$i$i$i19) + 1)|0;
   $__i$0$i$i$i19 = $103;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
  $104 = HEAP32[$75>>2]|0;
  $105 = (($104) + 12|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (FUNCTION_TABLE_ii[$106 & 63]($75)|0);
  HEAP8[$__dp>>0] = $107;
  $108 = HEAP32[$75>>2]|0;
  $109 = (($108) + 16|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (FUNCTION_TABLE_ii[$110 & 63]($75)|0);
  HEAP8[$__ts>>0] = $111;
  $112 = HEAP32[$75>>2]|0;
  $113 = (($112) + 20|0);
  $114 = HEAP32[$113>>2]|0;
  FUNCTION_TABLE_vii[$114 & 63]($8,$75);
  $115 = HEAP8[$__grp>>0]|0;
  $116 = $115 & 1;
  $117 = ($116<<24>>24)==(0);
  if ($117) {
   $121 = (($__grp) + 1|0);
   HEAP8[$121>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $118 = (($__grp) + 8|0);
   $119 = HEAP32[$118>>2]|0;
   HEAP8[$119>>0] = 0;
   $120 = (($__grp) + 4|0);
   HEAP32[$120>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0);
  ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
  $__i$0$i$i$i23 = 0;
  while(1) {
   $exitcond$i$i$i24 = ($__i$0$i$i$i23|0)==(3);
   if ($exitcond$i$i$i24) {
    break;
   }
   $122 = (($8) + ($__i$0$i$i$i23<<2)|0);
   HEAP32[$122>>2] = 0;
   $123 = (($__i$0$i$i$i23) + 1)|0;
   $__i$0$i$i$i23 = $123;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
  $124 = HEAP32[$75>>2]|0;
  $125 = (($124) + 24|0);
  $126 = HEAP32[$125>>2]|0;
  FUNCTION_TABLE_vii[$126 & 63]($9,$75);
  $127 = HEAP8[$__sym>>0]|0;
  $128 = $127 & 1;
  $129 = ($128<<24>>24)==(0);
  if ($129) {
   $133 = (($__sym) + 1|0);
   HEAP8[$133>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $130 = (($__sym) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   HEAP8[$131>>0] = 0;
   $132 = (($__sym) + 4|0);
   HEAP32[$132>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0);
  ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
  $__i$0$i$i$i27 = 0;
  while(1) {
   $exitcond$i$i$i28 = ($__i$0$i$i$i27|0)==(3);
   if ($exitcond$i$i$i28) {
    break;
   }
   $134 = (($9) + ($__i$0$i$i$i27<<2)|0);
   HEAP32[$134>>2] = 0;
   $135 = (($__i$0$i$i$i27) + 1)|0;
   $__i$0$i$i$i27 = $135;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
  $136 = HEAP32[$75>>2]|0;
  $137 = (($136) + 36|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (FUNCTION_TABLE_ii[$138 & 63]($75)|0);
  $storemerge = $139;
 }
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err) {
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__err = $__err|0;
 var $$0$i$i = 0, $$01$i$i = 0, $$__ig$0 = 0, $$not = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ig$0 = 0, $__r$0 = 0, $or$cond2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__grouping>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $7 = $6;
 } else {
  $3 = (($__grouping) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $7 = $4;
 }
 $8 = ($7|0)==(0);
 do {
  if (!($8)) {
   $9 = ($__g|0)==($__g_end|0);
   if ($9) {
    $16 = $0;
   } else {
    $$0$i$i = $__g_end;$$01$i$i = $__g;
    while(1) {
     $10 = (($$0$i$i) + -4|0);
     $11 = ($$01$i$i>>>0)<($10>>>0);
     if (!($11)) {
      break;
     }
     $12 = HEAP32[$$01$i$i>>2]|0;
     $13 = HEAP32[$10>>2]|0;
     HEAP32[$$01$i$i>>2] = $13;
     HEAP32[$10>>2] = $12;
     $14 = (($$01$i$i) + 4|0);
     $$0$i$i = $10;$$01$i$i = $14;
    }
    $$pre = HEAP8[$__grouping>>0]|0;
    $16 = $$pre;
   }
   $15 = $16 & 1;
   $17 = ($15<<24>>24)==(0);
   if ($17) {
    $22 = (($__grouping) + 1|0);
    $23 = $16&255;
    $24 = $23 >>> 1;
    $26 = $22;$27 = $24;
   } else {
    $18 = (($__grouping) + 8|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($__grouping) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $26 = $19;$27 = $21;
   }
   $25 = (($26) + ($27)|0);
   $28 = (($__g_end) + -4|0);
   $29 = $25;
   $__ig$0 = $26;$__r$0 = $__g;
   while(1) {
    $30 = ($__r$0>>>0)<($28>>>0);
    $31 = HEAP8[$__ig$0>>0]|0;
    $$not = ($31<<24>>24)<(1);
    $32 = ($31<<24>>24)==(127);
    $or$cond2 = $$not | $32;
    if (!($30)) {
     break;
    }
    if (!($or$cond2)) {
     $33 = $31 << 24 >> 24;
     $34 = HEAP32[$__r$0>>2]|0;
     $35 = ($33|0)==($34|0);
     if (!($35)) {
      label = 16;
      break;
     }
    }
    $36 = $__ig$0;
    $37 = (($29) - ($36))|0;
    $38 = ($37|0)>(1);
    $39 = (($__ig$0) + 1|0);
    $$__ig$0 = $38 ? $39 : $__ig$0;
    $40 = (($__r$0) + 4|0);
    $__ig$0 = $$__ig$0;$__r$0 = $40;
   }
   if ((label|0) == 16) {
    HEAP32[$__err>>2] = 4;
    break;
   }
   if (!($or$cond2)) {
    $41 = $31 << 24 >> 24;
    $42 = HEAP32[$28>>2]|0;
    $43 = (($42) + -1)|0;
    $44 = ($43>>>0)<($41>>>0);
    if (!($44)) {
     HEAP32[$__err>>2] = 4;
    }
   }
  }
 } while(0);
 return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $8 = 0, $9 = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__nc$2$lcssa = 0, $__neg = 0, $__w$0 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0;
 $$byval_copy = sp + 424|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 24|0;
 $__wb = sp + 16|0;
 $__wn = sp + 12|0;
 $__loc = sp + 8|0;
 $__neg = sp + 564|0;
 $0 = sp + 4|0;
 $__nbuf = sp + 464|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 107;
 $2 = (($__wbuf) + 400|0);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6696)|0);
 HEAP8[$__neg>>0] = 0;
 $4 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $4;
 $5 = (($__iob) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $7 = (__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$$byval_copy,$__intl,$__loc,$6,$__err,$__neg,$3,$__wb,$__wn,$2)|0);
 if ($7) {
  $8 = HEAP32[$3>>2]|0;
  $9 = (($8) + 48|0);
  $10 = HEAP32[$9>>2]|0;
  (FUNCTION_TABLE_iiiii[$10 & 7]($3,6224,((6224 + 10|0)),$$byval_copy)|0);
  $11 = HEAP32[$__wn>>2]|0;
  $12 = HEAP32[$__wb>>2]|0;
  $13 = $11;
  $14 = $12;
  $15 = (($13) - ($14))|0;
  $16 = ($15|0)>(392);
  if ($16) {
   $17 = $15 >> 2;
   $18 = (($17) + 2)|0;
   $19 = (_malloc($18)|0);
   $20 = ($19|0)==(0|0);
   if ($20) {
    __ZSt17__throw_bad_allocv();
    // unreachable;
   } else {
    $40 = $19;$__nc$0 = $19;
   }
  } else {
   $40 = 0;$__nc$0 = $__nbuf;
  }
  $21 = HEAP8[$__neg>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   $__nc$1 = $__nc$0;
  } else {
   $23 = (($__nc$0) + 1|0);
   HEAP8[$__nc$0>>0] = 45;
   $__nc$1 = $23;
  }
  $24 = (($$byval_copy) + 40|0);
  $25 = $$byval_copy;
  $27 = $11;$__nc$2 = $__nc$1;$__w$0 = $12;
  while(1) {
   $26 = ($__w$0>>>0)<($27>>>0);
   if (!($26)) {
    $__nc$2$lcssa = $__nc$2;
    break;
   }
   $28 = HEAP32[$__w$0>>2]|0;
   $$0$i = $$byval_copy;
   while(1) {
    $29 = ($$0$i|0)==($24|0);
    if ($29) {
     $$0$lcssa$i = $24;
     break;
    }
    $30 = HEAP32[$$0$i>>2]|0;
    $31 = ($30|0)==($28|0);
    if ($31) {
     $$0$lcssa$i = $$0$i;
     break;
    }
    $32 = (($$0$i) + 4|0);
    $$0$i = $32;
   }
   $33 = $$0$lcssa$i;
   $34 = (($33) - ($25))|0;
   $35 = $34 >> 2;
   $36 = (6224 + ($35)|0);
   $37 = HEAP8[$36>>0]|0;
   HEAP8[$__nc$2>>0] = $37;
   $38 = (($__w$0) + 4|0);
   $39 = (($__nc$2) + 1|0);
   $$pre = HEAP32[$__wn>>2]|0;
   $27 = $$pre;$__nc$2 = $39;$__w$0 = $38;
  }
  HEAP8[$__nc$2$lcssa>>0] = 0;
  HEAP32[$vararg_buffer>>2] = $__v;
  (_sscanf($__nbuf,6176,$vararg_buffer)|0);
  _free($40);
 }
 $41 = HEAP32[$__b>>2]|0;
 $42 = ($41|0)==(0|0);
 do {
  if ($42) {
   $74 = 1;
  } else {
   $43 = (($41) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($41) + 16|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($44|0)==($46|0);
   if ($47) {
    $48 = HEAP32[$41>>2]|0;
    $49 = (($48) + 36|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (FUNCTION_TABLE_ii[$50 & 63]($41)|0);
    $$0$i$i$i$i = $51;
   } else {
    $52 = HEAP32[$44>>2]|0;
    $$0$i$i$i$i = $52;
   }
   $53 = ($$0$i$i$i$i|0)==(-1);
   if ($53) {
    HEAP32[$__b>>2] = 0;
    $74 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $74 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $54 = HEAP32[$__e>>2]|0;
 $55 = ($54|0)==(0|0);
 do {
  if ($55) {
   label = 28;
  } else {
   $56 = (($54) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($54) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($57|0)==($59|0);
   if ($60) {
    $61 = HEAP32[$54>>2]|0;
    $62 = (($61) + 36|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (FUNCTION_TABLE_ii[$63 & 63]($54)|0);
    $$0$i$i1$i$i = $64;
   } else {
    $65 = HEAP32[$57>>2]|0;
    $$0$i$i1$i$i = $65;
   }
   $66 = ($$0$i$i1$i$i|0)==(-1);
   if ($66) {
    HEAP32[$__e>>2] = 0;
    label = 28;
    break;
   } else {
    if ($74) {
     break;
    } else {
     label = 30;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 28) {
  if ($74) {
   label = 30;
  }
 }
 if ((label|0) == 30) {
  $67 = HEAP32[$__err>>2]|0;
  $68 = $67 | 2;
  HEAP32[$__err>>2] = $68;
 }
 $69 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $69;
 $70 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($70)|0);
 $71 = HEAP32[$__wb>>2]|0;
 HEAP32[$__wb>>2] = 0;
 $72 = ($71|0)==(0|0);
 if (!($72)) {
  $73 = HEAP32[$1>>2]|0;
  FUNCTION_TABLE_vi[$73 & 127]($71);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i117 = 0, $$0$i$i$i$i135 = 0, $$0$i$i$i$i28 = 0, $$0$i$i$i$i43 = 0, $$0$i$i$i$i67 = 0, $$0$i$i$i$i89 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i123 = 0, $$0$i$i1$i$i141 = 0, $$0$i$i1$i$i34 = 0, $$0$i$i1$i$i49 = 0, $$0$i$i1$i$i73 = 0, $$0$i$i1$i$i95 = 0, $$0$i$i104 = 0, $$0$i$i110 = 0, $$0$i$i115 = 0;
 var $$0$i$i132 = 0, $$0$i$i26 = 0, $$0$i$i40 = 0, $$0$i$i42 = 0, $$0$i$i56 = 0, $$0$i$i59 = 0, $$0$i$i64 = 0, $$0$i$i81 = 0, $$0$i$i86 = 0, $$210 = 0, $$211 = 0, $$212 = 0, $$213 = 0, $$214 = 0, $$215 = 0, $$216 = 0, $$lcssa = 0, $$lcssa240 = 0, $$lcssa241 = 0, $$lcssa242 = 0;
 var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i119 = 0, $$pre$i$i$i137 = 0, $$pre$i$i$i30 = 0, $$pre$i$i$i45 = 0, $$pre$i$i$i69 = 0, $$pre$i$i$i91 = 0, $$pre$i3$i$i125 = 0, $$pre$i3$i$i143 = 0, $$pre$i3$i$i143195 = 0, $$pre$i3$i$i143196 = 0, $$pre$i3$i$i51 = 0, $$pre$i3$i$i51191 = 0, $$pre$i3$i$i51193 = 0, $$pre$i3$i$i75 = 0, $$pre$i3$i$i75201$ph = 0, $$pre$i3$i$i75201208 = 0, $$pre$i3$i$i97 = 0, $$pre194 = 0;
 var $$pre198 = 0, $$pre199 = 0, $$pre200 = 0, $$pre203 = 0, $$pre204 = 0, $$sum = 0, $$sum205 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0;
 var $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__i$0$i$i = 0, $__i$0$i$i14 = 0, $__i$0$i$i16 = 0, $__i$0$i$i19 = 0, $__i$0$i$i22 = 0, $__ng$0 = 0, $__ng$0$lcssa = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$011 = 0, $__p$0 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$010 = 0;
 var $__spaces = 0, $__sym = 0, $__trailing_sign$0 = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0, $exitcond$i$i = 0, $exitcond$i$i15 = 0, $exitcond$i$i17 = 0, $exitcond$i$i20 = 0, $exitcond$i$i23 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond7 = 0, $or$cond9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i120 = 0, $phitmp$i$i$i138 = 0;
 var $phitmp$i$i$i31 = 0, $phitmp$i$i$i46 = 0, $phitmp$i$i$i70 = 0, $phitmp$i$i$i92 = 0, $phitmp$i4$i$i126 = 0, $phitmp$i4$i$i144 = 0, $phitmp$i4$i$i52 = 0, $phitmp$i4$i$i76 = 0, $switch = 0, $tmp$i$i128 = 0, $tmp$i$i146 = 0, $tmp$i$i54 = 0, $tmp$i$i78 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $0 = sp + 496|0;
 $__gbuf = sp + 96|0;
 $__gb = sp + 88|0;
 $__gn = sp + 80|0;
 $__ge = sp + 76|0;
 $__pat = sp + 500|0;
 $__dp = sp + 72|0;
 $__ts = sp + 68|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__psn = sp + 32|0;
 $__nsn = sp + 20|0;
 $__spaces = sp + 8|0;
 $__fd = sp + 4|0;
 $__et = sp;
 HEAP32[$0>>2] = $__we;
 HEAP32[$__gb>>2] = $__gbuf;
 $1 = (($__gb) + 4|0);
 HEAP32[$1>>2] = 107;
 HEAP32[$__gn>>2] = $__gbuf;
 $2 = (($__gbuf) + 400|0);
 HEAP32[$__ge>>2] = $2;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($__grp) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 $__i$0$i$i14 = 0;
 while(1) {
  $exitcond$i$i15 = ($__i$0$i$i14|0)==(3);
  if ($exitcond$i$i15) {
   break;
  }
  $5 = (($__sym) + ($__i$0$i$i14<<2)|0);
  HEAP32[$5>>2] = 0;
  $6 = (($__i$0$i$i14) + 1)|0;
  $__i$0$i$i14 = $6;
 }
 $__i$0$i$i16 = 0;
 while(1) {
  $exitcond$i$i17 = ($__i$0$i$i16|0)==(3);
  if ($exitcond$i$i17) {
   break;
  }
  $7 = (($__psn) + ($__i$0$i$i16<<2)|0);
  HEAP32[$7>>2] = 0;
  $8 = (($__i$0$i$i16) + 1)|0;
  $__i$0$i$i16 = $8;
 }
 $__i$0$i$i19 = 0;
 while(1) {
  $exitcond$i$i20 = ($__i$0$i$i19|0)==(3);
  if ($exitcond$i$i20) {
   break;
  }
  $9 = (($__nsn) + ($__i$0$i$i19<<2)|0);
  HEAP32[$9>>2] = 0;
  $10 = (($__i$0$i$i19) + 1)|0;
  $__i$0$i$i19 = $10;
 }
 $__i$0$i$i22 = 0;
 while(1) {
  $exitcond$i$i23 = ($__i$0$i$i22|0)==(3);
  if ($exitcond$i$i23) {
   break;
  }
  $11 = (($__spaces) + ($__i$0$i$i22<<2)|0);
  HEAP32[$11>>2] = 0;
  $12 = (($__i$0$i$i22) + 1)|0;
  $__i$0$i$i22 = $12;
 }
 __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd);
 $13 = HEAP32[$__wb>>2]|0;
 HEAP32[$__wn>>2] = $13;
 $14 = (($__nsn) + 4|0);
 $15 = (($__nsn) + 8|0);
 $16 = (($__psn) + 4|0);
 $17 = (($__psn) + 8|0);
 $18 = $__flags & 512;
 $19 = ($18|0)!=(0);
 $20 = (($__sym) + 4|0);
 $21 = (($__sym) + 8|0);
 $22 = (($__spaces) + 4|0);
 $23 = (($__spaces) + 8|0);
 $24 = (($__pat) + 3|0);
 $25 = (($__grp) + 4|0);
 $732 = $__gbuf;$__p$0 = 0;$__trailing_sign$0 = 0;
 L21: while(1) {
  $26 = ($__p$0>>>0)<(4);
  if (!($26)) {
   $$lcssa242 = $732;$__trailing_sign$0$lcssa = $__trailing_sign$0;
   label = 281;
   break;
  }
  $27 = HEAP32[$__b>>2]|0;
  $28 = ($27|0)==(0|0);
  do {
   if ($28) {
    $733 = 1;
   } else {
    $29 = (($27) + 12|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($27) + 16|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($30|0)==($32|0);
    if ($33) {
     $34 = HEAP32[$27>>2]|0;
     $35 = (($34) + 36|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = (FUNCTION_TABLE_ii[$36 & 63]($27)|0);
     $$0$i$i$i$i28 = $37;
    } else {
     $38 = HEAP32[$30>>2]|0;
     $$0$i$i$i$i28 = $38;
    }
    $39 = ($$0$i$i$i$i28|0)==(-1);
    if ($39) {
     HEAP32[$__b>>2] = 0;
     $733 = 1;
     break;
    } else {
     $$pre$i$i$i30 = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i31 = ($$pre$i$i$i30|0)==(0|0);
     $733 = $phitmp$i$i$i31;
     break;
    }
   }
  } while(0);
  $40 = HEAP32[$__e>>2]|0;
  $41 = ($40|0)==(0|0);
  do {
   if ($41) {
    label = 31;
   } else {
    $42 = (($40) + 12|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($40) + 16|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($43|0)==($45|0);
    if ($46) {
     $47 = HEAP32[$40>>2]|0;
     $48 = (($47) + 36|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = (FUNCTION_TABLE_ii[$49 & 63]($40)|0);
     $$0$i$i1$i$i34 = $50;
    } else {
     $51 = HEAP32[$43>>2]|0;
     $$0$i$i1$i$i34 = $51;
    }
    $52 = ($$0$i$i1$i$i34|0)==(-1);
    if ($52) {
     HEAP32[$__e>>2] = 0;
     label = 31;
     break;
    } else {
     if ($733) {
      $734 = $40;
      break;
     } else {
      $$lcssa242 = $732;$__trailing_sign$0$lcssa = $__trailing_sign$0;
      label = 281;
      break L21;
     }
    }
   }
  } while(0);
  if ((label|0) == 31) {
   label = 0;
   if ($733) {
    $$lcssa242 = $732;$__trailing_sign$0$lcssa = $__trailing_sign$0;
    label = 281;
    break;
   } else {
    $734 = 0;
   }
  }
  $53 = (($__pat) + ($__p$0)|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 << 24 >> 24;
  L46: do {
   switch ($55|0) {
   case 4:  {
    $56 = HEAP32[$__ts>>2]|0;
    $$pre$i3$i$i125 = $734;$456 = $734;$502 = $732;$__ng$0 = 0;
    L48: while(1) {
     $443 = HEAP32[$__b>>2]|0;
     $444 = ($443|0)==(0|0);
     do {
      if ($444) {
       $469 = 1;
      } else {
       $445 = (($443) + 12|0);
       $446 = HEAP32[$445>>2]|0;
       $447 = (($443) + 16|0);
       $448 = HEAP32[$447>>2]|0;
       $449 = ($446|0)==($448|0);
       if ($449) {
        $450 = HEAP32[$443>>2]|0;
        $451 = (($450) + 36|0);
        $452 = HEAP32[$451>>2]|0;
        $453 = (FUNCTION_TABLE_ii[$452 & 63]($443)|0);
        $$0$i$i$i$i117 = $453;
       } else {
        $454 = HEAP32[$446>>2]|0;
        $$0$i$i$i$i117 = $454;
       }
       $455 = ($$0$i$i$i$i117|0)==(-1);
       if ($455) {
        HEAP32[$__b>>2] = 0;
        $469 = 1;
        break;
       } else {
        $$pre$i$i$i119 = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i120 = ($$pre$i$i$i119|0)==(0|0);
        $469 = $phitmp$i$i$i120;
        break;
       }
      }
     } while(0);
     $457 = ($456|0)==(0|0);
     do {
      if ($457) {
       $739 = $$pre$i3$i$i125;
       label = 202;
      } else {
       $458 = (($456) + 12|0);
       $459 = HEAP32[$458>>2]|0;
       $460 = (($456) + 16|0);
       $461 = HEAP32[$460>>2]|0;
       $462 = ($459|0)==($461|0);
       if ($462) {
        $463 = HEAP32[$456>>2]|0;
        $464 = (($463) + 36|0);
        $465 = HEAP32[$464>>2]|0;
        $466 = (FUNCTION_TABLE_ii[$465 & 63]($456)|0);
        $$0$i$i1$i$i123 = $466;
       } else {
        $467 = HEAP32[$459>>2]|0;
        $$0$i$i1$i$i123 = $467;
       }
       $468 = ($$0$i$i1$i$i123|0)==(-1);
       if ($468) {
        HEAP32[$__e>>2] = 0;
        $739 = 0;
        label = 202;
        break;
       } else {
        $phitmp$i4$i$i126 = ($$pre$i3$i$i125|0)==(0|0);
        $tmp$i$i128 = $469 ^ $phitmp$i4$i$i126;
        if ($tmp$i$i128) {
         $740 = $$pre$i3$i$i125;$741 = $$pre$i3$i$i125;
         break;
        } else {
         $$lcssa = $502;$$pre$i3$i$i97 = $$pre$i3$i$i125;$__ng$0$lcssa = $__ng$0;
         break L48;
        }
       }
      }
     } while(0);
     if ((label|0) == 202) {
      label = 0;
      if ($469) {
       $$lcssa = $502;$$pre$i3$i$i97 = $739;$__ng$0$lcssa = $__ng$0;
       break;
      } else {
       $740 = $739;$741 = 0;
      }
     }
     $470 = HEAP32[$__b>>2]|0;
     $471 = (($470) + 12|0);
     $472 = HEAP32[$471>>2]|0;
     $473 = (($470) + 16|0);
     $474 = HEAP32[$473>>2]|0;
     $475 = ($472|0)==($474|0);
     if ($475) {
      $476 = HEAP32[$470>>2]|0;
      $477 = (($476) + 36|0);
      $478 = HEAP32[$477>>2]|0;
      $479 = (FUNCTION_TABLE_ii[$478 & 63]($470)|0);
      $$0$i$i115 = $479;
     } else {
      $480 = HEAP32[$472>>2]|0;
      $$0$i$i115 = $480;
     }
     $481 = HEAP32[$__ct>>2]|0;
     $482 = (($481) + 12|0);
     $483 = HEAP32[$482>>2]|0;
     $484 = (FUNCTION_TABLE_iiii[$483 & 31]($__ct,2048,$$0$i$i115)|0);
     if ($484) {
      $485 = HEAP32[$__wn>>2]|0;
      $486 = HEAP32[$0>>2]|0;
      $487 = ($485|0)==($486|0);
      if ($487) {
       __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$0);
       $$pre203 = HEAP32[$__wn>>2]|0;
       $489 = $$pre203;
      } else {
       $489 = $485;
      }
      $488 = (($489) + 4|0);
      HEAP32[$__wn>>2] = $488;
      HEAP32[$489>>2] = $$0$i$i115;
      $490 = (($__ng$0) + 1)|0;
      $742 = $502;$__ng$1 = $490;
     } else {
      $491 = HEAP8[$__grp>>0]|0;
      $492 = $491 & 1;
      $493 = ($492<<24>>24)==(0);
      if ($493) {
       $495 = $491&255;
       $496 = $495 >>> 1;
       $497 = $496;
      } else {
       $494 = HEAP32[$25>>2]|0;
       $497 = $494;
      }
      $498 = ($497|0)!=(0);
      $499 = ($__ng$0|0)!=(0);
      $or$cond7 = $499 & $498;
      $500 = ($$0$i$i115|0)==($56|0);
      $or$cond13 = $or$cond7 & $500;
      if (!($or$cond13)) {
       $$lcssa = $502;$$pre$i3$i$i97 = $740;$__ng$0$lcssa = $__ng$0;
       break;
      }
      $501 = HEAP32[$__ge>>2]|0;
      $503 = ($502|0)==($501|0);
      if ($503) {
       __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb,$__gn,$__ge);
       $$pre204 = HEAP32[$__gn>>2]|0;
       $505 = $$pre204;
      } else {
       $505 = $502;
      }
      $504 = (($505) + 4|0);
      HEAP32[$__gn>>2] = $504;
      HEAP32[$505>>2] = $__ng$0;
      $742 = $504;$__ng$1 = 0;
     }
     $506 = HEAP32[$__b>>2]|0;
     $507 = (($506) + 12|0);
     $508 = HEAP32[$507>>2]|0;
     $509 = (($506) + 16|0);
     $510 = HEAP32[$509>>2]|0;
     $511 = ($508|0)==($510|0);
     if ($511) {
      $512 = HEAP32[$506>>2]|0;
      $513 = (($512) + 40|0);
      $514 = HEAP32[$513>>2]|0;
      (FUNCTION_TABLE_ii[$514 & 63]($506)|0);
      $$pre$i3$i$i125 = $740;$456 = $741;$502 = $742;$__ng$0 = $__ng$1;
      continue;
     } else {
      $515 = (($508) + 4|0);
      HEAP32[$507>>2] = $515;
      $$pre$i3$i$i125 = $740;$456 = $741;$502 = $742;$__ng$0 = $__ng$1;
      continue;
     }
    }
    $516 = HEAP32[$__gb>>2]|0;
    $517 = ($516|0)!=($$lcssa|0);
    $518 = ($__ng$0$lcssa|0)!=(0);
    $or$cond9 = $518 & $517;
    if ($or$cond9) {
     $519 = HEAP32[$__ge>>2]|0;
     $520 = ($$lcssa|0)==($519|0);
     if ($520) {
      __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb,$__gn,$__ge);
      $$pre200 = HEAP32[$__gn>>2]|0;
      $522 = $$pre200;
     } else {
      $522 = $$lcssa;
     }
     $521 = (($522) + 4|0);
     HEAP32[$__gn>>2] = $521;
     HEAP32[$522>>2] = $__ng$0$lcssa;
     $743 = $521;
    } else {
     $743 = $$lcssa;
    }
    $523 = HEAP32[$__fd>>2]|0;
    $524 = ($523|0)>(0);
    L101: do {
     if ($524) {
      $525 = HEAP32[$__b>>2]|0;
      $526 = ($525|0)==(0|0);
      do {
       if ($526) {
        $744 = 1;
       } else {
        $527 = (($525) + 12|0);
        $528 = HEAP32[$527>>2]|0;
        $529 = (($525) + 16|0);
        $530 = HEAP32[$529>>2]|0;
        $531 = ($528|0)==($530|0);
        if ($531) {
         $532 = HEAP32[$525>>2]|0;
         $533 = (($532) + 36|0);
         $534 = HEAP32[$533>>2]|0;
         $535 = (FUNCTION_TABLE_ii[$534 & 63]($525)|0);
         $$0$i$i$i$i89 = $535;
        } else {
         $536 = HEAP32[$528>>2]|0;
         $$0$i$i$i$i89 = $536;
        }
        $537 = ($$0$i$i$i$i89|0)==(-1);
        if ($537) {
         HEAP32[$__b>>2] = 0;
         $744 = 1;
         break;
        } else {
         $$pre$i$i$i91 = HEAP32[$__b>>2]|0;
         $phitmp$i$i$i92 = ($$pre$i$i$i91|0)==(0|0);
         $744 = $phitmp$i$i$i92;
         break;
        }
       }
      } while(0);
      $538 = ($$pre$i3$i$i97|0)==(0|0);
      do {
       if ($538) {
        label = 239;
       } else {
        $539 = (($$pre$i3$i$i97) + 12|0);
        $540 = HEAP32[$539>>2]|0;
        $541 = (($$pre$i3$i$i97) + 16|0);
        $542 = HEAP32[$541>>2]|0;
        $543 = ($540|0)==($542|0);
        if ($543) {
         $544 = HEAP32[$$pre$i3$i$i97>>2]|0;
         $545 = (($544) + 36|0);
         $546 = HEAP32[$545>>2]|0;
         $547 = (FUNCTION_TABLE_ii[$546 & 63]($$pre$i3$i$i97)|0);
         $$0$i$i1$i$i95 = $547;
        } else {
         $548 = HEAP32[$540>>2]|0;
         $$0$i$i1$i$i95 = $548;
        }
        $549 = ($$0$i$i1$i$i95|0)==(-1);
        if ($549) {
         HEAP32[$__e>>2] = 0;
         label = 239;
         break;
        } else {
         if ($744) {
          $745 = $$pre$i3$i$i97;
          break;
         } else {
          label = 245;
          break L21;
         }
        }
       }
      } while(0);
      if ((label|0) == 239) {
       label = 0;
       if ($744) {
        label = 245;
        break L21;
       } else {
        $745 = 0;
       }
      }
      $550 = HEAP32[$__b>>2]|0;
      $551 = (($550) + 12|0);
      $552 = HEAP32[$551>>2]|0;
      $553 = (($550) + 16|0);
      $554 = HEAP32[$553>>2]|0;
      $555 = ($552|0)==($554|0);
      if ($555) {
       $556 = HEAP32[$550>>2]|0;
       $557 = (($556) + 36|0);
       $558 = HEAP32[$557>>2]|0;
       $559 = (FUNCTION_TABLE_ii[$558 & 63]($550)|0);
       $$0$i$i86 = $559;
      } else {
       $560 = HEAP32[$552>>2]|0;
       $$0$i$i86 = $560;
      }
      $561 = HEAP32[$__dp>>2]|0;
      $562 = ($$0$i$i86|0)==($561|0);
      if (!($562)) {
       label = 245;
       break L21;
      }
      $565 = HEAP32[$__b>>2]|0;
      $566 = (($565) + 12|0);
      $567 = HEAP32[$566>>2]|0;
      $568 = (($565) + 16|0);
      $569 = HEAP32[$568>>2]|0;
      $570 = ($567|0)==($569|0);
      if ($570) {
       $571 = HEAP32[$565>>2]|0;
       $572 = (($571) + 40|0);
       $573 = HEAP32[$572>>2]|0;
       (FUNCTION_TABLE_ii[$573 & 63]($565)|0);
       $$pre$i3$i$i75 = $745;$575 = $523;$590 = $745;
      } else {
       $574 = (($567) + 4|0);
       HEAP32[$566>>2] = $574;
       $$pre$i3$i$i75 = $745;$575 = $523;$590 = $745;
      }
      while(1) {
       $576 = ($575|0)>(0);
       if (!($576)) {
        break L101;
       }
       $577 = HEAP32[$__b>>2]|0;
       $578 = ($577|0)==(0|0);
       do {
        if ($578) {
         $603 = 1;
        } else {
         $579 = (($577) + 12|0);
         $580 = HEAP32[$579>>2]|0;
         $581 = (($577) + 16|0);
         $582 = HEAP32[$581>>2]|0;
         $583 = ($580|0)==($582|0);
         if ($583) {
          $584 = HEAP32[$577>>2]|0;
          $585 = (($584) + 36|0);
          $586 = HEAP32[$585>>2]|0;
          $587 = (FUNCTION_TABLE_ii[$586 & 63]($577)|0);
          $$0$i$i$i$i67 = $587;
         } else {
          $588 = HEAP32[$580>>2]|0;
          $$0$i$i$i$i67 = $588;
         }
         $589 = ($$0$i$i$i$i67|0)==(-1);
         if ($589) {
          HEAP32[$__b>>2] = 0;
          $603 = 1;
          break;
         } else {
          $$pre$i$i$i69 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i70 = ($$pre$i$i$i69|0)==(0|0);
          $603 = $phitmp$i$i$i70;
          break;
         }
        }
       } while(0);
       $591 = ($590|0)==(0|0);
       do {
        if ($591) {
         $$pre$i3$i$i75201$ph = $$pre$i3$i$i75;
         label = 263;
        } else {
         $592 = (($590) + 12|0);
         $593 = HEAP32[$592>>2]|0;
         $594 = (($590) + 16|0);
         $595 = HEAP32[$594>>2]|0;
         $596 = ($593|0)==($595|0);
         if ($596) {
          $597 = HEAP32[$590>>2]|0;
          $598 = (($597) + 36|0);
          $599 = HEAP32[$598>>2]|0;
          $600 = (FUNCTION_TABLE_ii[$599 & 63]($590)|0);
          $$0$i$i1$i$i73 = $600;
         } else {
          $601 = HEAP32[$593>>2]|0;
          $$0$i$i1$i$i73 = $601;
         }
         $602 = ($$0$i$i1$i$i73|0)==(-1);
         if ($602) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i75201$ph = 0;
          label = 263;
          break;
         } else {
          $phitmp$i4$i$i76 = ($$pre$i3$i$i75|0)==(0|0);
          $tmp$i$i78 = $603 ^ $phitmp$i4$i$i76;
          if ($tmp$i$i78) {
           $$pre$i3$i$i75201208 = $$pre$i3$i$i75;$746 = $$pre$i3$i$i75;
           break;
          } else {
           label = 269;
           break L21;
          }
         }
        }
       } while(0);
       if ((label|0) == 263) {
        label = 0;
        if ($603) {
         label = 269;
         break L21;
        } else {
         $$pre$i3$i$i75201208 = $$pre$i3$i$i75201$ph;$746 = 0;
        }
       }
       $604 = HEAP32[$__b>>2]|0;
       $605 = (($604) + 12|0);
       $606 = HEAP32[$605>>2]|0;
       $607 = (($604) + 16|0);
       $608 = HEAP32[$607>>2]|0;
       $609 = ($606|0)==($608|0);
       if ($609) {
        $610 = HEAP32[$604>>2]|0;
        $611 = (($610) + 36|0);
        $612 = HEAP32[$611>>2]|0;
        $613 = (FUNCTION_TABLE_ii[$612 & 63]($604)|0);
        $$0$i$i64 = $613;
       } else {
        $614 = HEAP32[$606>>2]|0;
        $$0$i$i64 = $614;
       }
       $615 = HEAP32[$__ct>>2]|0;
       $616 = (($615) + 12|0);
       $617 = HEAP32[$616>>2]|0;
       $618 = (FUNCTION_TABLE_iiii[$617 & 31]($__ct,2048,$$0$i$i64)|0);
       if (!($618)) {
        label = 269;
        break L21;
       }
       $621 = HEAP32[$__wn>>2]|0;
       $622 = HEAP32[$0>>2]|0;
       $623 = ($621|0)==($622|0);
       if ($623) {
        __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$0);
       }
       $624 = HEAP32[$__b>>2]|0;
       $625 = (($624) + 12|0);
       $626 = HEAP32[$625>>2]|0;
       $627 = (($624) + 16|0);
       $628 = HEAP32[$627>>2]|0;
       $629 = ($626|0)==($628|0);
       if ($629) {
        $630 = HEAP32[$624>>2]|0;
        $631 = (($630) + 36|0);
        $632 = HEAP32[$631>>2]|0;
        $633 = (FUNCTION_TABLE_ii[$632 & 63]($624)|0);
        $$0$i$i26 = $633;
       } else {
        $634 = HEAP32[$626>>2]|0;
        $$0$i$i26 = $634;
       }
       $635 = HEAP32[$__wn>>2]|0;
       $636 = (($635) + 4|0);
       HEAP32[$__wn>>2] = $636;
       HEAP32[$635>>2] = $$0$i$i26;
       $637 = (($575) + -1)|0;
       HEAP32[$__fd>>2] = $637;
       $638 = HEAP32[$__b>>2]|0;
       $639 = (($638) + 12|0);
       $640 = HEAP32[$639>>2]|0;
       $641 = (($638) + 16|0);
       $642 = HEAP32[$641>>2]|0;
       $643 = ($640|0)==($642|0);
       if ($643) {
        $644 = HEAP32[$638>>2]|0;
        $645 = (($644) + 40|0);
        $646 = HEAP32[$645>>2]|0;
        (FUNCTION_TABLE_ii[$646 & 63]($638)|0);
        $$pre$i3$i$i75 = $$pre$i3$i$i75201208;$575 = $637;$590 = $746;
        continue;
       } else {
        $647 = (($640) + 4|0);
        HEAP32[$639>>2] = $647;
        $$pre$i3$i$i75 = $$pre$i3$i$i75201208;$575 = $637;$590 = $746;
        continue;
       }
      }
     }
    } while(0);
    $648 = HEAP32[$__wn>>2]|0;
    $649 = HEAP32[$__wb>>2]|0;
    $650 = ($648|0)==($649|0);
    if ($650) {
     label = 279;
     break L21;
    } else {
     $735 = $743;$__trailing_sign$1 = $__trailing_sign$0;
    }
    break;
   }
   case 0:  {
    $86 = ($__p$0|0)==(3);
    if ($86) {
     $735 = $732;$__trailing_sign$1 = $__trailing_sign$0;
    } else {
     $$pre$i3$i$i51 = $734;$100 = $734;
     label = 46;
    }
    break;
   }
   case 1:  {
    $cond = ($__p$0|0)==(3);
    if ($cond) {
     $735 = $732;$__trailing_sign$1 = $__trailing_sign$0;
    } else {
     $57 = HEAP32[$__b>>2]|0;
     $58 = (($57) + 12|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = (($57) + 16|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($59|0)==($61|0);
     if ($62) {
      $63 = HEAP32[$57>>2]|0;
      $64 = (($63) + 36|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = (FUNCTION_TABLE_ii[$65 & 63]($57)|0);
      $$0$i$i40 = $66;
     } else {
      $67 = HEAP32[$59>>2]|0;
      $$0$i$i40 = $67;
     }
     $68 = HEAP32[$__ct>>2]|0;
     $69 = (($68) + 12|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = (FUNCTION_TABLE_iiii[$70 & 31]($__ct,8192,$$0$i$i40)|0);
     if (!($71)) {
      label = 44;
      break L21;
     }
     $72 = HEAP32[$__b>>2]|0;
     $73 = (($72) + 12|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = (($72) + 16|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($74|0)==($76|0);
     if ($77) {
      $78 = HEAP32[$72>>2]|0;
      $79 = (($78) + 40|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = (FUNCTION_TABLE_ii[$80 & 63]($72)|0);
      $$0$i$i42 = $81;
     } else {
      $82 = (($74) + 4|0);
      HEAP32[$73>>2] = $82;
      $83 = HEAP32[$74>>2]|0;
      $$0$i$i42 = $83;
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces,$$0$i$i42);
     $$pre$i3$i$i51 = $734;$100 = $734;
     label = 46;
    }
    break;
   }
   case 3:  {
    $141 = HEAP8[$__psn>>0]|0;
    $142 = $141 & 1;
    $143 = ($142<<24>>24)==(0);
    if ($143) {
     $145 = $141&255;
     $146 = $145 >>> 1;
     $155 = $146;
    } else {
     $144 = HEAP32[$16>>2]|0;
     $155 = $144;
    }
    $147 = HEAP8[$__nsn>>0]|0;
    $148 = $147 & 1;
    $149 = ($148<<24>>24)==(0);
    if ($149) {
     $151 = $147&255;
     $152 = $151 >>> 1;
     $154 = $152;
    } else {
     $150 = HEAP32[$14>>2]|0;
     $154 = $150;
    }
    $153 = (0 - ($154))|0;
    $156 = ($155|0)==($153|0);
    if ($156) {
     $735 = $732;$__trailing_sign$1 = $__trailing_sign$0;
    } else {
     if ($143) {
      $158 = $141&255;
      $159 = $158 >>> 1;
      $160 = $159;
     } else {
      $157 = HEAP32[$16>>2]|0;
      $160 = $157;
     }
     $161 = ($160|0)==(0);
     if (!($161)) {
      if ($149) {
       $163 = $147&255;
       $164 = $163 >>> 1;
       $165 = $164;
      } else {
       $162 = HEAP32[$14>>2]|0;
       $165 = $162;
      }
      $166 = ($165|0)==(0);
      if (!($166)) {
       $231 = HEAP32[$__b>>2]|0;
       $232 = (($231) + 12|0);
       $233 = HEAP32[$232>>2]|0;
       $234 = (($231) + 16|0);
       $235 = HEAP32[$234>>2]|0;
       $236 = ($233|0)==($235|0);
       if ($236) {
        $237 = HEAP32[$231>>2]|0;
        $238 = (($237) + 36|0);
        $239 = HEAP32[$238>>2]|0;
        $240 = (FUNCTION_TABLE_ii[$239 & 63]($231)|0);
        $$pre = HEAP8[$__psn>>0]|0;
        $$0$i$i104 = $240;$243 = $$pre;
       } else {
        $241 = HEAP32[$233>>2]|0;
        $$0$i$i104 = $241;$243 = $141;
       }
       $242 = $243 & 1;
       $244 = ($242<<24>>24)==(0);
       $245 = HEAP32[$17>>2]|0;
       $$211 = $244 ? $16 : $245;
       $246 = HEAP32[$$211>>2]|0;
       $247 = ($$0$i$i104|0)==($246|0);
       $248 = HEAP32[$__b>>2]|0;
       $249 = (($248) + 12|0);
       $250 = HEAP32[$249>>2]|0;
       $251 = (($248) + 16|0);
       $252 = HEAP32[$251>>2]|0;
       $253 = ($250|0)==($252|0);
       if ($247) {
        if ($253) {
         $254 = HEAP32[$248>>2]|0;
         $255 = (($254) + 40|0);
         $256 = HEAP32[$255>>2]|0;
         (FUNCTION_TABLE_ii[$256 & 63]($248)|0);
        } else {
         $257 = (($250) + 4|0);
         HEAP32[$249>>2] = $257;
        }
        $258 = HEAP8[$__psn>>0]|0;
        $259 = $258 & 1;
        $260 = ($259<<24>>24)==(0);
        if ($260) {
         $262 = $258&255;
         $263 = $262 >>> 1;
         $264 = $263;
        } else {
         $261 = HEAP32[$16>>2]|0;
         $264 = $261;
        }
        $265 = ($264>>>0)>(1);
        $__psn$__trailing_sign$010 = $265 ? $__psn : $__trailing_sign$0;
        $735 = $732;$__trailing_sign$1 = $__psn$__trailing_sign$010;
        break L46;
       }
       if ($253) {
        $266 = HEAP32[$248>>2]|0;
        $267 = (($266) + 36|0);
        $268 = HEAP32[$267>>2]|0;
        $269 = (FUNCTION_TABLE_ii[$268 & 63]($248)|0);
        $$0$i$i110 = $269;
       } else {
        $270 = HEAP32[$250>>2]|0;
        $$0$i$i110 = $270;
       }
       $271 = HEAP8[$__nsn>>0]|0;
       $272 = $271 & 1;
       $273 = ($272<<24>>24)==(0);
       $274 = HEAP32[$15>>2]|0;
       $$212 = $273 ? $14 : $274;
       $275 = HEAP32[$$212>>2]|0;
       $276 = ($$0$i$i110|0)==($275|0);
       if (!($276)) {
        label = 130;
        break L21;
       }
       $277 = HEAP32[$__b>>2]|0;
       $278 = (($277) + 12|0);
       $279 = HEAP32[$278>>2]|0;
       $280 = (($277) + 16|0);
       $281 = HEAP32[$280>>2]|0;
       $282 = ($279|0)==($281|0);
       if ($282) {
        $283 = HEAP32[$277>>2]|0;
        $284 = (($283) + 40|0);
        $285 = HEAP32[$284>>2]|0;
        (FUNCTION_TABLE_ii[$285 & 63]($277)|0);
       } else {
        $286 = (($279) + 4|0);
        HEAP32[$278>>2] = $286;
       }
       HEAP8[$__neg>>0] = 1;
       $287 = HEAP8[$__nsn>>0]|0;
       $288 = $287 & 1;
       $289 = ($288<<24>>24)==(0);
       if ($289) {
        $291 = $287&255;
        $292 = $291 >>> 1;
        $293 = $292;
       } else {
        $290 = HEAP32[$14>>2]|0;
        $293 = $290;
       }
       $294 = ($293>>>0)>(1);
       $__nsn$__trailing_sign$011 = $294 ? $__nsn : $__trailing_sign$0;
       $735 = $732;$__trailing_sign$1 = $__nsn$__trailing_sign$011;
       break L46;
      }
     }
     if ($143) {
      $168 = $141&255;
      $169 = $168 >>> 1;
      $170 = $169;
     } else {
      $167 = HEAP32[$16>>2]|0;
      $170 = $167;
     }
     $171 = ($170|0)==(0);
     $172 = HEAP32[$__b>>2]|0;
     $173 = (($172) + 12|0);
     $174 = HEAP32[$173>>2]|0;
     $175 = (($172) + 16|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = ($174|0)==($176|0);
     if ($177) {
      $178 = HEAP32[$172>>2]|0;
      $179 = (($178) + 36|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = (FUNCTION_TABLE_ii[$180 & 63]($172)|0);
      $$0$i$i81 = $181;
     } else {
      $182 = HEAP32[$174>>2]|0;
      $$0$i$i81 = $182;
     }
     if ($171) {
      $207 = HEAP8[$__nsn>>0]|0;
      $208 = $207 & 1;
      $209 = ($208<<24>>24)==(0);
      $210 = HEAP32[$15>>2]|0;
      $$210 = $209 ? $14 : $210;
      $211 = HEAP32[$$210>>2]|0;
      $212 = ($$0$i$i81|0)==($211|0);
      if (!($212)) {
       $735 = $732;$__trailing_sign$1 = $__trailing_sign$0;
       break L46;
      }
      $213 = HEAP32[$__b>>2]|0;
      $214 = (($213) + 12|0);
      $215 = HEAP32[$214>>2]|0;
      $216 = (($213) + 16|0);
      $217 = HEAP32[$216>>2]|0;
      $218 = ($215|0)==($217|0);
      if ($218) {
       $219 = HEAP32[$213>>2]|0;
       $220 = (($219) + 40|0);
       $221 = HEAP32[$220>>2]|0;
       (FUNCTION_TABLE_ii[$221 & 63]($213)|0);
      } else {
       $222 = (($215) + 4|0);
       HEAP32[$214>>2] = $222;
      }
      HEAP8[$__neg>>0] = 1;
      $223 = HEAP8[$__nsn>>0]|0;
      $224 = $223 & 1;
      $225 = ($224<<24>>24)==(0);
      if ($225) {
       $227 = $223&255;
       $228 = $227 >>> 1;
       $229 = $228;
      } else {
       $226 = HEAP32[$14>>2]|0;
       $229 = $226;
      }
      $230 = ($229>>>0)>(1);
      $__nsn$__trailing_sign$0 = $230 ? $__nsn : $__trailing_sign$0;
      $735 = $732;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
      break L46;
     }
     $183 = HEAP8[$__psn>>0]|0;
     $184 = $183 & 1;
     $185 = ($184<<24>>24)==(0);
     $186 = HEAP32[$17>>2]|0;
     $$ = $185 ? $16 : $186;
     $187 = HEAP32[$$>>2]|0;
     $188 = ($$0$i$i81|0)==($187|0);
     if (!($188)) {
      HEAP8[$__neg>>0] = 1;
      $735 = $732;$__trailing_sign$1 = $__trailing_sign$0;
      break L46;
     }
     $189 = HEAP32[$__b>>2]|0;
     $190 = (($189) + 12|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (($189) + 16|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($191|0)==($193|0);
     if ($194) {
      $195 = HEAP32[$189>>2]|0;
      $196 = (($195) + 40|0);
      $197 = HEAP32[$196>>2]|0;
      (FUNCTION_TABLE_ii[$197 & 63]($189)|0);
     } else {
      $198 = (($191) + 4|0);
      HEAP32[$190>>2] = $198;
     }
     $199 = HEAP8[$__psn>>0]|0;
     $200 = $199 & 1;
     $201 = ($200<<24>>24)==(0);
     if ($201) {
      $203 = $199&255;
      $204 = $203 >>> 1;
      $205 = $204;
     } else {
      $202 = HEAP32[$16>>2]|0;
      $205 = $202;
     }
     $206 = ($205>>>0)>(1);
     $__psn$__trailing_sign$0 = $206 ? $__psn : $__trailing_sign$0;
     $735 = $732;$__trailing_sign$1 = $__psn$__trailing_sign$0;
    }
    break;
   }
   case 2:  {
    $297 = ($__trailing_sign$0|0)!=(0|0);
    $298 = ($__p$0>>>0)<(2);
    $or$cond = $298 | $297;
    if (!($or$cond)) {
     $299 = ($__p$0|0)==(2);
     if ($299) {
      $300 = HEAP8[$24>>0]|0;
      $301 = ($300<<24>>24)!=(0);
      $302 = $301;
     } else {
      $302 = 0;
     }
     $brmerge = $19 | $302;
     if (!($brmerge)) {
      $735 = $732;$__trailing_sign$1 = 0;
      break L46;
     }
    }
    $303 = HEAP8[$__sym>>0]|0;
    $304 = $303 & 1;
    $305 = ($304<<24>>24)==(0);
    $306 = HEAP32[$21>>2]|0;
    $$213 = $305 ? $20 : $306;
    $307 = ($__p$0|0)==(0);
    L274: do {
     if ($307) {
      $$pre$i3$i$i143 = $734;$368 = $303;$377 = $$213;$392 = $734;
     } else {
      $308 = (($__p$0) + -1)|0;
      $309 = (($__pat) + ($308)|0);
      $310 = HEAP8[$309>>0]|0;
      $switch = ($310&255)<(2);
      if ($switch) {
       $312 = $303;$321 = $$213;
       while(1) {
        $311 = $312 & 1;
        $313 = ($311<<24>>24)==(0);
        if ($313) {
         $316 = $312&255;
         $317 = $316 >>> 1;
         $319 = $20;$320 = $317;
        } else {
         $314 = HEAP32[$21>>2]|0;
         $315 = HEAP32[$20>>2]|0;
         $319 = $314;$320 = $315;
        }
        $318 = (($319) + ($320<<2)|0);
        $322 = ($321|0)==($318|0);
        if ($322) {
         $330 = $312;$333 = $321;
         break;
        }
        $323 = HEAP32[$321>>2]|0;
        $324 = HEAP32[$__ct>>2]|0;
        $325 = (($324) + 12|0);
        $326 = HEAP32[$325>>2]|0;
        $327 = (FUNCTION_TABLE_iiii[$326 & 31]($__ct,8192,$323)|0);
        if (!($327)) {
         $$lcssa240 = $321;
         label = 142;
         break;
        }
        $328 = (($321) + 4|0);
        $$pre198 = HEAP8[$__sym>>0]|0;
        $312 = $$pre198;$321 = $328;
       }
       if ((label|0) == 142) {
        label = 0;
        $$pre199 = HEAP8[$__sym>>0]|0;
        $330 = $$pre199;$333 = $$lcssa240;
       }
       $329 = $330 & 1;
       $331 = ($329<<24>>24)==(0);
       $332 = HEAP32[$21>>2]|0;
       $$214 = $331 ? $20 : $332;
       $334 = $333;
       $335 = $$214;
       $336 = (($334) - ($335))|0;
       $337 = $336 >> 2;
       $338 = HEAP8[$__spaces>>0]|0;
       $339 = $338 & 1;
       $340 = ($339<<24>>24)==(0);
       if ($340) {
        $342 = $338&255;
        $343 = $342 >>> 1;
        $345 = $343;
       } else {
        $341 = HEAP32[$22>>2]|0;
        $345 = $341;
       }
       $344 = ($337>>>0)>($345>>>0);
       L291: do {
        if (!($344)) {
         if ($340) {
          $349 = $338&255;
          $350 = $349 >>> 1;
          $$sum205 = (($350) - ($337))|0;
          $351 = (($22) + ($$sum205<<2)|0);
          $352 = $338&255;
          $353 = $352 >>> 1;
          $355 = $22;$356 = $353;$737 = $351;
         } else {
          $346 = HEAP32[$23>>2]|0;
          $347 = HEAP32[$22>>2]|0;
          $$sum = (($347) - ($337))|0;
          $348 = (($346) + ($$sum<<2)|0);
          $355 = $346;$356 = $347;$737 = $348;
         }
         $354 = (($355) + ($356<<2)|0);
         $357 = HEAP32[$21>>2]|0;
         $$215 = $331 ? $20 : $357;
         $358 = $737;$362 = $$215;
         while(1) {
          $359 = ($358|0)==($354|0);
          if ($359) {
           $$pre$i3$i$i143 = $734;$368 = $330;$377 = $333;$392 = $734;
           break L274;
          }
          $360 = HEAP32[$358>>2]|0;
          $361 = HEAP32[$362>>2]|0;
          $363 = ($360|0)==($361|0);
          if (!($363)) {
           break L291;
          }
          $364 = (($358) + 4|0);
          $365 = (($362) + 4|0);
          $358 = $364;$362 = $365;
         }
        }
       } while(0);
       $366 = HEAP32[$21>>2]|0;
       $$216 = $331 ? $20 : $366;
       $$pre$i3$i$i143 = $734;$368 = $330;$377 = $$216;$392 = $734;
      } else {
       $$pre$i3$i$i143 = $734;$368 = $303;$377 = $$213;$392 = $734;
      }
     }
    } while(0);
    L302: while(1) {
     $367 = $368 & 1;
     $369 = ($367<<24>>24)==(0);
     if ($369) {
      $372 = $368&255;
      $373 = $372 >>> 1;
      $375 = $20;$376 = $373;
     } else {
      $370 = HEAP32[$21>>2]|0;
      $371 = HEAP32[$20>>2]|0;
      $375 = $370;$376 = $371;
     }
     $374 = (($375) + ($376<<2)|0);
     $378 = ($377|0)==($374|0);
     if ($378) {
      $$lcssa241 = $377;
      break;
     }
     $379 = HEAP32[$__b>>2]|0;
     $380 = ($379|0)==(0|0);
     do {
      if ($380) {
       $405 = 1;
      } else {
       $381 = (($379) + 12|0);
       $382 = HEAP32[$381>>2]|0;
       $383 = (($379) + 16|0);
       $384 = HEAP32[$383>>2]|0;
       $385 = ($382|0)==($384|0);
       if ($385) {
        $386 = HEAP32[$379>>2]|0;
        $387 = (($386) + 36|0);
        $388 = HEAP32[$387>>2]|0;
        $389 = (FUNCTION_TABLE_ii[$388 & 63]($379)|0);
        $$0$i$i$i$i135 = $389;
       } else {
        $390 = HEAP32[$382>>2]|0;
        $$0$i$i$i$i135 = $390;
       }
       $391 = ($$0$i$i$i$i135|0)==(-1);
       if ($391) {
        HEAP32[$__b>>2] = 0;
        $405 = 1;
        break;
       } else {
        $$pre$i$i$i137 = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i138 = ($$pre$i$i$i137|0)==(0|0);
        $405 = $phitmp$i$i$i138;
        break;
       }
      }
     } while(0);
     $393 = ($392|0)==(0|0);
     do {
      if ($393) {
       $$pre$i3$i$i143196 = $$pre$i3$i$i143;
       label = 173;
      } else {
       $394 = (($392) + 12|0);
       $395 = HEAP32[$394>>2]|0;
       $396 = (($392) + 16|0);
       $397 = HEAP32[$396>>2]|0;
       $398 = ($395|0)==($397|0);
       if ($398) {
        $399 = HEAP32[$392>>2]|0;
        $400 = (($399) + 36|0);
        $401 = HEAP32[$400>>2]|0;
        $402 = (FUNCTION_TABLE_ii[$401 & 63]($392)|0);
        $$0$i$i1$i$i141 = $402;
       } else {
        $403 = HEAP32[$395>>2]|0;
        $$0$i$i1$i$i141 = $403;
       }
       $404 = ($$0$i$i1$i$i141|0)==(-1);
       if ($404) {
        HEAP32[$__e>>2] = 0;
        $$pre$i3$i$i143196 = 0;
        label = 173;
        break;
       } else {
        $phitmp$i4$i$i144 = ($$pre$i3$i$i143|0)==(0|0);
        $tmp$i$i146 = $405 ^ $phitmp$i4$i$i144;
        if ($tmp$i$i146) {
         $$pre$i3$i$i143195 = $$pre$i3$i$i143;$738 = $$pre$i3$i$i143;
         break;
        } else {
         $$lcssa241 = $377;
         break L302;
        }
       }
      }
     } while(0);
     if ((label|0) == 173) {
      label = 0;
      if ($405) {
       $$lcssa241 = $377;
       break;
      } else {
       $$pre$i3$i$i143195 = $$pre$i3$i$i143196;$738 = 0;
      }
     }
     $406 = HEAP32[$__b>>2]|0;
     $407 = (($406) + 12|0);
     $408 = HEAP32[$407>>2]|0;
     $409 = (($406) + 16|0);
     $410 = HEAP32[$409>>2]|0;
     $411 = ($408|0)==($410|0);
     if ($411) {
      $412 = HEAP32[$406>>2]|0;
      $413 = (($412) + 36|0);
      $414 = HEAP32[$413>>2]|0;
      $415 = (FUNCTION_TABLE_ii[$414 & 63]($406)|0);
      $$0$i$i132 = $415;
     } else {
      $416 = HEAP32[$408>>2]|0;
      $$0$i$i132 = $416;
     }
     $417 = HEAP32[$377>>2]|0;
     $418 = ($$0$i$i132|0)==($417|0);
     if (!($418)) {
      $$lcssa241 = $377;
      break;
     }
     $419 = HEAP32[$__b>>2]|0;
     $420 = (($419) + 12|0);
     $421 = HEAP32[$420>>2]|0;
     $422 = (($419) + 16|0);
     $423 = HEAP32[$422>>2]|0;
     $424 = ($421|0)==($423|0);
     if ($424) {
      $425 = HEAP32[$419>>2]|0;
      $426 = (($425) + 40|0);
      $427 = HEAP32[$426>>2]|0;
      (FUNCTION_TABLE_ii[$427 & 63]($419)|0);
     } else {
      $428 = (($421) + 4|0);
      HEAP32[$420>>2] = $428;
     }
     $429 = (($377) + 4|0);
     $$pre194 = HEAP8[$__sym>>0]|0;
     $$pre$i3$i$i143 = $$pre$i3$i$i143195;$368 = $$pre194;$377 = $429;$392 = $738;
    }
    if ($19) {
     $430 = HEAP8[$__sym>>0]|0;
     $431 = $430 & 1;
     $432 = ($431<<24>>24)==(0);
     if ($432) {
      $435 = $430&255;
      $436 = $435 >>> 1;
      $438 = $20;$439 = $436;
     } else {
      $433 = HEAP32[$21>>2]|0;
      $434 = HEAP32[$20>>2]|0;
      $438 = $433;$439 = $434;
     }
     $437 = (($438) + ($439<<2)|0);
     $440 = ($$lcssa241|0)==($437|0);
     if ($440) {
      $735 = $732;$__trailing_sign$1 = $__trailing_sign$0;
     } else {
      label = 188;
      break L21;
     }
    } else {
     $735 = $732;$__trailing_sign$1 = $__trailing_sign$0;
    }
    break;
   }
   default: {
    $735 = $732;$__trailing_sign$1 = $__trailing_sign$0;
   }
   }
  } while(0);
  L346: do {
   if ((label|0) == 46) {
    while(1) {
     label = 0;
     $87 = HEAP32[$__b>>2]|0;
     $88 = ($87|0)==(0|0);
     do {
      if ($88) {
       $113 = 1;
      } else {
       $89 = (($87) + 12|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = (($87) + 16|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = ($90|0)==($92|0);
       if ($93) {
        $94 = HEAP32[$87>>2]|0;
        $95 = (($94) + 36|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = (FUNCTION_TABLE_ii[$96 & 63]($87)|0);
        $$0$i$i$i$i43 = $97;
       } else {
        $98 = HEAP32[$90>>2]|0;
        $$0$i$i$i$i43 = $98;
       }
       $99 = ($$0$i$i$i$i43|0)==(-1);
       if ($99) {
        HEAP32[$__b>>2] = 0;
        $113 = 1;
        break;
       } else {
        $$pre$i$i$i45 = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i46 = ($$pre$i$i$i45|0)==(0|0);
        $113 = $phitmp$i$i$i46;
        break;
       }
      }
     } while(0);
     $101 = ($100|0)==(0|0);
     do {
      if ($101) {
       $$pre$i3$i$i51191 = $$pre$i3$i$i51;
       label = 59;
      } else {
       $102 = (($100) + 12|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = (($100) + 16|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = ($103|0)==($105|0);
       if ($106) {
        $107 = HEAP32[$100>>2]|0;
        $108 = (($107) + 36|0);
        $109 = HEAP32[$108>>2]|0;
        $110 = (FUNCTION_TABLE_ii[$109 & 63]($100)|0);
        $$0$i$i1$i$i49 = $110;
       } else {
        $111 = HEAP32[$103>>2]|0;
        $$0$i$i1$i$i49 = $111;
       }
       $112 = ($$0$i$i1$i$i49|0)==(-1);
       if ($112) {
        HEAP32[$__e>>2] = 0;
        $$pre$i3$i$i51191 = 0;
        label = 59;
        break;
       } else {
        $phitmp$i4$i$i52 = ($$pre$i3$i$i51|0)==(0|0);
        $tmp$i$i54 = $113 ^ $phitmp$i4$i$i52;
        if ($tmp$i$i54) {
         $$pre$i3$i$i51193 = $$pre$i3$i$i51;$736 = $$pre$i3$i$i51;
         break;
        } else {
         $735 = $732;$__trailing_sign$1 = $__trailing_sign$0;
         break L346;
        }
       }
      }
     } while(0);
     if ((label|0) == 59) {
      label = 0;
      if ($113) {
       $735 = $732;$__trailing_sign$1 = $__trailing_sign$0;
       break L346;
      } else {
       $$pre$i3$i$i51193 = $$pre$i3$i$i51191;$736 = 0;
      }
     }
     $114 = HEAP32[$__b>>2]|0;
     $115 = (($114) + 12|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = (($114) + 16|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = ($116|0)==($118|0);
     if ($119) {
      $120 = HEAP32[$114>>2]|0;
      $121 = (($120) + 36|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = (FUNCTION_TABLE_ii[$122 & 63]($114)|0);
      $$0$i$i56 = $123;
     } else {
      $124 = HEAP32[$116>>2]|0;
      $$0$i$i56 = $124;
     }
     $125 = HEAP32[$__ct>>2]|0;
     $126 = (($125) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (FUNCTION_TABLE_iiii[$127 & 31]($__ct,8192,$$0$i$i56)|0);
     if (!($128)) {
      $735 = $732;$__trailing_sign$1 = $__trailing_sign$0;
      break L346;
     }
     $129 = HEAP32[$__b>>2]|0;
     $130 = (($129) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($129) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$129>>2]|0;
      $136 = (($135) + 40|0);
      $137 = HEAP32[$136>>2]|0;
      $138 = (FUNCTION_TABLE_ii[$137 & 63]($129)|0);
      $$0$i$i59 = $138;
     } else {
      $139 = (($131) + 4|0);
      HEAP32[$130>>2] = $139;
      $140 = HEAP32[$131>>2]|0;
      $$0$i$i59 = $140;
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces,$$0$i$i59);
     $$pre$i3$i$i51 = $$pre$i3$i$i51193;$100 = $736;
     label = 46;
    }
   }
  } while(0);
  $653 = (($__p$0) + 1)|0;
  $732 = $735;$__p$0 = $653;$__trailing_sign$0 = $__trailing_sign$1;
 }
 L381: do {
  if ((label|0) == 44) {
   $84 = HEAP32[$__err>>2]|0;
   $85 = $84 | 4;
   HEAP32[$__err>>2] = $85;
   $$0 = 0;
  }
  else if ((label|0) == 130) {
   $295 = HEAP32[$__err>>2]|0;
   $296 = $295 | 4;
   HEAP32[$__err>>2] = $296;
   $$0 = 0;
  }
  else if ((label|0) == 188) {
   $441 = HEAP32[$__err>>2]|0;
   $442 = $441 | 4;
   HEAP32[$__err>>2] = $442;
   $$0 = 0;
  }
  else if ((label|0) == 245) {
   $563 = HEAP32[$__err>>2]|0;
   $564 = $563 | 4;
   HEAP32[$__err>>2] = $564;
   $$0 = 0;
  }
  else if ((label|0) == 269) {
   $619 = HEAP32[$__err>>2]|0;
   $620 = $619 | 4;
   HEAP32[$__err>>2] = $620;
   $$0 = 0;
  }
  else if ((label|0) == 279) {
   $651 = HEAP32[$__err>>2]|0;
   $652 = $651 | 4;
   HEAP32[$__err>>2] = $652;
   $$0 = 0;
  }
  else if ((label|0) == 281) {
   $654 = ($__trailing_sign$0$lcssa|0)==(0|0);
   L385: do {
    if (!($654)) {
     $655 = (($__trailing_sign$0$lcssa) + 4|0);
     $656 = (($__trailing_sign$0$lcssa) + 8|0);
     $__i$0 = 1;
     L387: while(1) {
      $657 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
      $658 = $657 & 1;
      $659 = ($658<<24>>24)==(0);
      if ($659) {
       $661 = $657&255;
       $662 = $661 >>> 1;
       $664 = $662;
      } else {
       $660 = HEAP32[$655>>2]|0;
       $664 = $660;
      }
      $663 = ($__i$0>>>0)<($664>>>0);
      if (!($663)) {
       break L385;
      }
      $665 = HEAP32[$__b>>2]|0;
      $666 = ($665|0)==(0|0);
      do {
       if ($666) {
        $747 = 1;
       } else {
        $667 = (($665) + 12|0);
        $668 = HEAP32[$667>>2]|0;
        $669 = (($665) + 16|0);
        $670 = HEAP32[$669>>2]|0;
        $671 = ($668|0)==($670|0);
        if ($671) {
         $672 = HEAP32[$665>>2]|0;
         $673 = (($672) + 36|0);
         $674 = HEAP32[$673>>2]|0;
         $675 = (FUNCTION_TABLE_ii[$674 & 63]($665)|0);
         $$0$i$i$i$i = $675;
        } else {
         $676 = HEAP32[$668>>2]|0;
         $$0$i$i$i$i = $676;
        }
        $677 = ($$0$i$i$i$i|0)==(-1);
        if ($677) {
         HEAP32[$__b>>2] = 0;
         $747 = 1;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
         $747 = $phitmp$i$i$i;
         break;
        }
       }
      } while(0);
      $678 = HEAP32[$__e>>2]|0;
      $679 = ($678|0)==(0|0);
      do {
       if ($679) {
        label = 300;
       } else {
        $680 = (($678) + 12|0);
        $681 = HEAP32[$680>>2]|0;
        $682 = (($678) + 16|0);
        $683 = HEAP32[$682>>2]|0;
        $684 = ($681|0)==($683|0);
        if ($684) {
         $685 = HEAP32[$678>>2]|0;
         $686 = (($685) + 36|0);
         $687 = HEAP32[$686>>2]|0;
         $688 = (FUNCTION_TABLE_ii[$687 & 63]($678)|0);
         $$0$i$i1$i$i = $688;
        } else {
         $689 = HEAP32[$681>>2]|0;
         $$0$i$i1$i$i = $689;
        }
        $690 = ($$0$i$i1$i$i|0)==(-1);
        if ($690) {
         HEAP32[$__e>>2] = 0;
         label = 300;
         break;
        } else {
         if ($747) {
          break;
         } else {
          break L387;
         }
        }
       }
      } while(0);
      if ((label|0) == 300) {
       label = 0;
       if ($747) {
        break;
       }
      }
      $691 = HEAP32[$__b>>2]|0;
      $692 = (($691) + 12|0);
      $693 = HEAP32[$692>>2]|0;
      $694 = (($691) + 16|0);
      $695 = HEAP32[$694>>2]|0;
      $696 = ($693|0)==($695|0);
      if ($696) {
       $697 = HEAP32[$691>>2]|0;
       $698 = (($697) + 36|0);
       $699 = HEAP32[$698>>2]|0;
       $700 = (FUNCTION_TABLE_ii[$699 & 63]($691)|0);
       $$0$i$i = $700;
      } else {
       $701 = HEAP32[$693>>2]|0;
       $$0$i$i = $701;
      }
      $702 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
      $703 = $702 & 1;
      $704 = ($703<<24>>24)==(0);
      if ($704) {
       $707 = $655;
      } else {
       $705 = HEAP32[$656>>2]|0;
       $707 = $705;
      }
      $706 = (($707) + ($__i$0<<2)|0);
      $708 = HEAP32[$706>>2]|0;
      $709 = ($$0$i$i|0)==($708|0);
      if (!($709)) {
       break;
      }
      $712 = (($__i$0) + 1)|0;
      $713 = HEAP32[$__b>>2]|0;
      $714 = (($713) + 12|0);
      $715 = HEAP32[$714>>2]|0;
      $716 = (($713) + 16|0);
      $717 = HEAP32[$716>>2]|0;
      $718 = ($715|0)==($717|0);
      if ($718) {
       $719 = HEAP32[$713>>2]|0;
       $720 = (($719) + 40|0);
       $721 = HEAP32[$720>>2]|0;
       (FUNCTION_TABLE_ii[$721 & 63]($713)|0);
       $__i$0 = $712;
       continue;
      } else {
       $722 = (($715) + 4|0);
       HEAP32[$714>>2] = $722;
       $__i$0 = $712;
       continue;
      }
     }
     $710 = HEAP32[$__err>>2]|0;
     $711 = $710 | 4;
     HEAP32[$__err>>2] = $711;
     $$0 = 0;
     break L381;
    }
   } while(0);
   $723 = HEAP32[$__gb>>2]|0;
   $724 = ($723|0)==($$lcssa242|0);
   if ($724) {
    $$0 = 1;
   } else {
    HEAP32[$__et>>2] = 0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$723,$$lcssa242,$__et);
    $725 = HEAP32[$__et>>2]|0;
    $726 = ($725|0)==(0);
    if ($726) {
     $$0 = 1;
    } else {
     $727 = HEAP32[$__err>>2]|0;
     $728 = $727 | 4;
     HEAP32[$__err>>2] = $728;
     $$0 = 0;
    }
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $729 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $730 = ($729|0)==(0|0);
 if (!($730)) {
  $731 = HEAP32[$1>>2]|0;
  FUNCTION_TABLE_vi[$731 & 127]($729);
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$byval_copy = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, $__neg = 0, $__w$0 = 0, $__w$0$lcssa = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0;
 $$byval_copy = sp + 424|0;
 $__wbuf = sp + 24|0;
 $__wb = sp + 16|0;
 $__wn = sp + 8|0;
 $__loc = sp + 4|0;
 $__neg = sp + 428|0;
 $0 = sp;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 107;
 $2 = (($__wbuf) + 400|0);
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6696)|0);
 HEAP8[$__neg>>0] = 0;
 $4 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $4;
 $5 = (($__iob) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $7 = (__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$$byval_copy,$__intl,$__loc,$6,$__err,$__neg,$3,$__wb,$__wn,$2)|0);
 if ($7) {
  $8 = HEAP8[$__v>>0]|0;
  $9 = $8 & 1;
  $10 = ($9<<24>>24)==(0);
  if ($10) {
   HEAP8[$__v>>0] = 0;
  } else {
   $11 = (($__v) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   HEAP32[$12>>2] = 0;
  }
  $13 = (($__v) + 4|0);
  HEAP32[$13>>2] = 0;
  $14 = HEAP8[$__neg>>0]|0;
  $15 = ($14<<24>>24)==(0);
  if (!($15)) {
   $16 = HEAP32[$3>>2]|0;
   $17 = (($16) + 44|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (FUNCTION_TABLE_iii[$18 & 15]($3,45)|0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__v,$19);
  }
  $20 = HEAP32[$3>>2]|0;
  $21 = (($20) + 44|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (FUNCTION_TABLE_iii[$22 & 15]($3,48)|0);
  $24 = HEAP32[$__wb>>2]|0;
  $25 = HEAP32[$__wn>>2]|0;
  $26 = (($25) + -4|0);
  $__w$0 = $24;
  while(1) {
   $27 = ($__w$0>>>0)<($26>>>0);
   if (!($27)) {
    $__w$0$lcssa = $__w$0;
    break;
   }
   $28 = HEAP32[$__w$0>>2]|0;
   $29 = ($28|0)==($23|0);
   if (!($29)) {
    $__w$0$lcssa = $__w$0;
    break;
   }
   $30 = (($__w$0) + 4|0);
   $__w$0 = $30;
  }
  (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v,$__w$0$lcssa,$25)|0);
 }
 $31 = HEAP32[$__b>>2]|0;
 $32 = ($31|0)==(0|0);
 do {
  if ($32) {
   $63 = 1;
  } else {
   $33 = (($31) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($31) + 16|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($34|0)==($36|0);
   if ($37) {
    $38 = HEAP32[$31>>2]|0;
    $39 = (($38) + 36|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (FUNCTION_TABLE_ii[$40 & 63]($31)|0);
    $$0$i$i$i$i = $41;
   } else {
    $42 = HEAP32[$34>>2]|0;
    $$0$i$i$i$i = $42;
   }
   $43 = ($$0$i$i$i$i|0)==(-1);
   if ($43) {
    HEAP32[$__b>>2] = 0;
    $63 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $63 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $44 = ($4|0)==(0|0);
 do {
  if ($44) {
   label = 25;
  } else {
   $45 = (($4) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($4) + 16|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($46|0)==($48|0);
   if ($49) {
    $50 = HEAP32[$4>>2]|0;
    $51 = (($50) + 36|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (FUNCTION_TABLE_ii[$52 & 63]($4)|0);
    $$0$i$i1$i$i = $53;
   } else {
    $54 = HEAP32[$46>>2]|0;
    $$0$i$i1$i$i = $54;
   }
   $55 = ($$0$i$i1$i$i|0)==(-1);
   if ($55) {
    HEAP32[$__e>>2] = 0;
    label = 25;
    break;
   } else {
    if ($63) {
     break;
    } else {
     label = 27;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 25) {
  if ($63) {
   label = 27;
  }
 }
 if ((label|0) == 27) {
  $56 = HEAP32[$__err>>2]|0;
  $57 = $56 | 2;
  HEAP32[$__err>>2] = $57;
 }
 $58 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $58;
 $59 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($59)|0);
 $60 = HEAP32[$__wb>>2]|0;
 HEAP32[$__wb>>2] = 0;
 $61 = ($60|0)==(0|0);
 if (!($61)) {
  $62 = HEAP32[$1>>2]|0;
  FUNCTION_TABLE_vi[$62 & 127]($60);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i13 = 0, $__i$0$i$i$i17 = 0, $__i$0$i$i$i21 = 0, $__i$0$i$i$i25 = 0, $__i$0$i$i$i3 = 0;
 var $__i$0$i$i$i6 = 0, $__i$0$i$i$i9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i10 = 0, $exitcond$i$i$i14 = 0, $exitcond$i$i$i18 = 0, $exitcond$i$i$i22 = 0, $exitcond$i$i$i26 = 0, $exitcond$i$i$i4 = 0, $exitcond$i$i$i7 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $0 = sp + 100|0;
 $1 = sp + 88|0;
 $2 = sp + 76|0;
 $3 = sp + 64|0;
 $4 = sp + 52|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 if ($__intl) {
  $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6112)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vii[$13 & 63]($0,$10);
  $14 = HEAP32[$0>>2]|0;
  HEAP8[$__pat>>0]=$14&255;HEAP8[$__pat+1>>0]=($14>>8)&255;HEAP8[$__pat+2>>0]=($14>>16)&255;HEAP8[$__pat+3>>0]=$14>>24;
  $15 = HEAP32[$10>>2]|0;
  $16 = (($15) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vii[$17 & 63]($1,$10);
  $18 = HEAP8[$__nsn>>0]|0;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   HEAP8[$__nsn>>0] = 0;
  } else {
   $21 = (($__nsn) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP32[$22>>2] = 0;
  }
  $23 = (($__nsn) + 4|0);
  HEAP32[$23>>2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn,0);
  ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
  $__i$0$i$i$i = 0;
  while(1) {
   $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
   if ($exitcond$i$i$i) {
    break;
   }
   $24 = (($1) + ($__i$0$i$i$i<<2)|0);
   HEAP32[$24>>2] = 0;
   $25 = (($__i$0$i$i$i) + 1)|0;
   $__i$0$i$i$i = $25;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
  $26 = HEAP32[$10>>2]|0;
  $27 = (($26) + 28|0);
  $28 = HEAP32[$27>>2]|0;
  FUNCTION_TABLE_vii[$28 & 63]($2,$10);
  $29 = HEAP8[$__psn>>0]|0;
  $30 = $29 & 1;
  $31 = ($30<<24>>24)==(0);
  if ($31) {
   HEAP8[$__psn>>0] = 0;
  } else {
   $32 = (($__psn) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   HEAP32[$33>>2] = 0;
  }
  $34 = (($__psn) + 4|0);
  HEAP32[$34>>2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn,0);
  ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
  $__i$0$i$i$i3 = 0;
  while(1) {
   $exitcond$i$i$i4 = ($__i$0$i$i$i3|0)==(3);
   if ($exitcond$i$i$i4) {
    break;
   }
   $35 = (($2) + ($__i$0$i$i$i3<<2)|0);
   HEAP32[$35>>2] = 0;
   $36 = (($__i$0$i$i$i3) + 1)|0;
   $__i$0$i$i$i3 = $36;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($2);
  $37 = HEAP32[$10>>2]|0;
  $38 = (($37) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (FUNCTION_TABLE_ii[$39 & 63]($10)|0);
  HEAP32[$__dp>>2] = $40;
  $41 = HEAP32[$10>>2]|0;
  $42 = (($41) + 16|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (FUNCTION_TABLE_ii[$43 & 63]($10)|0);
  HEAP32[$__ts>>2] = $44;
  $45 = HEAP32[$10>>2]|0;
  $46 = (($45) + 20|0);
  $47 = HEAP32[$46>>2]|0;
  FUNCTION_TABLE_vii[$47 & 63]($3,$10);
  $48 = HEAP8[$__grp>>0]|0;
  $49 = $48 & 1;
  $50 = ($49<<24>>24)==(0);
  if ($50) {
   $54 = (($__grp) + 1|0);
   HEAP8[$54>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $51 = (($__grp) + 8|0);
   $52 = HEAP32[$51>>2]|0;
   HEAP8[$52>>0] = 0;
   $53 = (($__grp) + 4|0);
   HEAP32[$53>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0);
  ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
  $__i$0$i$i$i6 = 0;
  while(1) {
   $exitcond$i$i$i7 = ($__i$0$i$i$i6|0)==(3);
   if ($exitcond$i$i$i7) {
    break;
   }
   $55 = (($3) + ($__i$0$i$i$i6<<2)|0);
   HEAP32[$55>>2] = 0;
   $56 = (($__i$0$i$i$i6) + 1)|0;
   $__i$0$i$i$i6 = $56;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
  $57 = HEAP32[$10>>2]|0;
  $58 = (($57) + 24|0);
  $59 = HEAP32[$58>>2]|0;
  FUNCTION_TABLE_vii[$59 & 63]($4,$10);
  $60 = HEAP8[$__sym>>0]|0;
  $61 = $60 & 1;
  $62 = ($61<<24>>24)==(0);
  if ($62) {
   HEAP8[$__sym>>0] = 0;
  } else {
   $63 = (($__sym) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   HEAP32[$64>>2] = 0;
  }
  $65 = (($__sym) + 4|0);
  HEAP32[$65>>2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0);
  ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
  $__i$0$i$i$i9 = 0;
  while(1) {
   $exitcond$i$i$i10 = ($__i$0$i$i$i9|0)==(3);
   if ($exitcond$i$i$i10) {
    break;
   }
   $66 = (($4) + ($__i$0$i$i$i9<<2)|0);
   HEAP32[$66>>2] = 0;
   $67 = (($__i$0$i$i$i9) + 1)|0;
   $__i$0$i$i$i9 = $67;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($4);
  $68 = HEAP32[$10>>2]|0;
  $69 = (($68) + 36|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (FUNCTION_TABLE_ii[$70 & 63]($10)|0);
  $storemerge = $71;
 } else {
  $72 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6048)|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) + 44|0);
  $75 = HEAP32[$74>>2]|0;
  FUNCTION_TABLE_vii[$75 & 63]($5,$72);
  $76 = HEAP32[$5>>2]|0;
  HEAP8[$__pat>>0]=$76&255;HEAP8[$__pat+1>>0]=($76>>8)&255;HEAP8[$__pat+2>>0]=($76>>16)&255;HEAP8[$__pat+3>>0]=$76>>24;
  $77 = HEAP32[$72>>2]|0;
  $78 = (($77) + 32|0);
  $79 = HEAP32[$78>>2]|0;
  FUNCTION_TABLE_vii[$79 & 63]($6,$72);
  $80 = HEAP8[$__nsn>>0]|0;
  $81 = $80 & 1;
  $82 = ($81<<24>>24)==(0);
  if ($82) {
   HEAP8[$__nsn>>0] = 0;
  } else {
   $83 = (($__nsn) + 8|0);
   $84 = HEAP32[$83>>2]|0;
   HEAP32[$84>>2] = 0;
  }
  $85 = (($__nsn) + 4|0);
  HEAP32[$85>>2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn,0);
  ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
  $__i$0$i$i$i13 = 0;
  while(1) {
   $exitcond$i$i$i14 = ($__i$0$i$i$i13|0)==(3);
   if ($exitcond$i$i$i14) {
    break;
   }
   $86 = (($6) + ($__i$0$i$i$i13<<2)|0);
   HEAP32[$86>>2] = 0;
   $87 = (($__i$0$i$i$i13) + 1)|0;
   $__i$0$i$i$i13 = $87;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6);
  $88 = HEAP32[$72>>2]|0;
  $89 = (($88) + 28|0);
  $90 = HEAP32[$89>>2]|0;
  FUNCTION_TABLE_vii[$90 & 63]($7,$72);
  $91 = HEAP8[$__psn>>0]|0;
  $92 = $91 & 1;
  $93 = ($92<<24>>24)==(0);
  if ($93) {
   HEAP8[$__psn>>0] = 0;
  } else {
   $94 = (($__psn) + 8|0);
   $95 = HEAP32[$94>>2]|0;
   HEAP32[$95>>2] = 0;
  }
  $96 = (($__psn) + 4|0);
  HEAP32[$96>>2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn,0);
  ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
  $__i$0$i$i$i17 = 0;
  while(1) {
   $exitcond$i$i$i18 = ($__i$0$i$i$i17|0)==(3);
   if ($exitcond$i$i$i18) {
    break;
   }
   $97 = (($7) + ($__i$0$i$i$i17<<2)|0);
   HEAP32[$97>>2] = 0;
   $98 = (($__i$0$i$i$i17) + 1)|0;
   $__i$0$i$i$i17 = $98;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7);
  $99 = HEAP32[$72>>2]|0;
  $100 = (($99) + 12|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (FUNCTION_TABLE_ii[$101 & 63]($72)|0);
  HEAP32[$__dp>>2] = $102;
  $103 = HEAP32[$72>>2]|0;
  $104 = (($103) + 16|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (FUNCTION_TABLE_ii[$105 & 63]($72)|0);
  HEAP32[$__ts>>2] = $106;
  $107 = HEAP32[$72>>2]|0;
  $108 = (($107) + 20|0);
  $109 = HEAP32[$108>>2]|0;
  FUNCTION_TABLE_vii[$109 & 63]($8,$72);
  $110 = HEAP8[$__grp>>0]|0;
  $111 = $110 & 1;
  $112 = ($111<<24>>24)==(0);
  if ($112) {
   $116 = (($__grp) + 1|0);
   HEAP8[$116>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $113 = (($__grp) + 8|0);
   $114 = HEAP32[$113>>2]|0;
   HEAP8[$114>>0] = 0;
   $115 = (($__grp) + 4|0);
   HEAP32[$115>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0);
  ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
  $__i$0$i$i$i21 = 0;
  while(1) {
   $exitcond$i$i$i22 = ($__i$0$i$i$i21|0)==(3);
   if ($exitcond$i$i$i22) {
    break;
   }
   $117 = (($8) + ($__i$0$i$i$i21<<2)|0);
   HEAP32[$117>>2] = 0;
   $118 = (($__i$0$i$i$i21) + 1)|0;
   $__i$0$i$i$i21 = $118;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
  $119 = HEAP32[$72>>2]|0;
  $120 = (($119) + 24|0);
  $121 = HEAP32[$120>>2]|0;
  FUNCTION_TABLE_vii[$121 & 63]($9,$72);
  $122 = HEAP8[$__sym>>0]|0;
  $123 = $122 & 1;
  $124 = ($123<<24>>24)==(0);
  if ($124) {
   HEAP8[$__sym>>0] = 0;
  } else {
   $125 = (($__sym) + 8|0);
   $126 = HEAP32[$125>>2]|0;
   HEAP32[$126>>2] = 0;
  }
  $127 = (($__sym) + 4|0);
  HEAP32[$127>>2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0);
  ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
  $__i$0$i$i$i25 = 0;
  while(1) {
   $exitcond$i$i$i26 = ($__i$0$i$i$i25|0)==(3);
   if ($exitcond$i$i$i26) {
    break;
   }
   $128 = (($9) + ($__i$0$i$i$i25<<2)|0);
   HEAP32[$128>>2] = 0;
   $129 = (($__i$0$i$i$i25) + 1)|0;
   $__i$0$i$i$i25 = $129;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($9);
  $130 = HEAP32[$72>>2]|0;
  $131 = (($130) + 36|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (FUNCTION_TABLE_ii[$132 & 63]($72)|0);
  $storemerge = $133;
 }
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$byval_copy = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__i$0$i$i = 0, $__i$0$i$i4 = 0, $__i$0$i$i7 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0;
 var $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $exitcond$i$i = 0, $exitcond$i$i5 = 0, $exitcond$i$i8 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0;
 $$byval_copy = sp + 8|0;
 $vararg_buffer1 = sp;
 $__buf = sp + 284|0;
 $__bb = sp + 72|0;
 $__digits = sp + 184|0;
 $__loc = sp + 68|0;
 $__pat = sp + 180|0;
 $__dp = sp + 177|0;
 $__ts = sp + 176|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__sn = sp + 32|0;
 $__fd = sp + 28|0;
 $__mbuf = sp + 76|0;
 $__mi = sp + 24|0;
 $__me = sp + 20|0;
 $0 = sp + 16|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[$$byval_copy>>3] = $__units;
 $1 = (_snprintf($__buf,100,6280,$$byval_copy)|0);
 $2 = ($1>>>0)>(99);
 if ($2) {
  $3 = (__ZNSt3__16__clocEv()|0);
  HEAPF64[$vararg_buffer1>>3] = $__units;
  $4 = (__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb,$3,6280,$vararg_buffer1)|0);
  $5 = HEAP32[$__bb>>2]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  }
  $7 = (_malloc($4)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $81 = $7;$82 = $5;$__db$0 = $7;$__n$0 = $4;
  }
 } else {
  $81 = 0;$82 = 0;$__db$0 = $__digits;$__n$0 = $1;
 }
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $9 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6704)|0);
 $10 = HEAP32[$__bb>>2]|0;
 $11 = (($10) + ($__n$0)|0);
 $12 = HEAP32[$9>>2]|0;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 (FUNCTION_TABLE_iiiii[$14 & 7]($9,$10,$11,$__db$0)|0);
 $15 = ($__n$0|0)==(0);
 if ($15) {
  $25 = 0;
 } else {
  $16 = HEAP32[$__bb>>2]|0;
  $17 = HEAP8[$16>>0]|0;
  $18 = ($17<<24>>24)==(45);
  $25 = $18;
 }
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $19 = (($__grp) + ($__i$0$i$i<<2)|0);
  HEAP32[$19>>2] = 0;
  $20 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $20;
 }
 $__i$0$i$i4 = 0;
 while(1) {
  $exitcond$i$i5 = ($__i$0$i$i4|0)==(3);
  if ($exitcond$i$i5) {
   break;
  }
  $21 = (($__sym) + ($__i$0$i$i4<<2)|0);
  HEAP32[$21>>2] = 0;
  $22 = (($__i$0$i$i4) + 1)|0;
  $__i$0$i$i4 = $22;
 }
 $__i$0$i$i7 = 0;
 while(1) {
  $exitcond$i$i8 = ($__i$0$i$i7|0)==(3);
  if ($exitcond$i$i8) {
   break;
  }
  $23 = (($__sn) + ($__i$0$i$i7<<2)|0);
  HEAP32[$23>>2] = 0;
  $24 = (($__i$0$i$i7) + 1)|0;
  $__i$0$i$i7 = $24;
 }
 __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$25,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd);
 $26 = HEAP32[$__fd>>2]|0;
 $27 = ($__n$0|0)>($26|0);
 if ($27) {
  $28 = (($__n$0) - ($26))|0;
  $29 = $28 << 1;
  $30 = HEAP8[$__sn>>0]|0;
  $31 = $30 & 1;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $35 = $30&255;
   $36 = $35 >>> 1;
   $46 = $36;
  } else {
   $33 = (($__sn) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   $46 = $34;
  }
  $37 = HEAP8[$__sym>>0]|0;
  $38 = $37 & 1;
  $39 = ($38<<24>>24)==(0);
  if ($39) {
   $42 = $37&255;
   $43 = $42 >>> 1;
   $48 = $43;
  } else {
   $40 = (($__sym) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $48 = $41;
  }
  $44 = $29 | 1;
  $45 = (($46) + ($44))|0;
  $47 = (($45) + ($48))|0;
  $$pn = $47;
 } else {
  $49 = HEAP8[$__sn>>0]|0;
  $50 = $49 & 1;
  $51 = ($50<<24>>24)==(0);
  if ($51) {
   $54 = $49&255;
   $55 = $54 >>> 1;
   $64 = $55;
  } else {
   $52 = (($__sn) + 4|0);
   $53 = HEAP32[$52>>2]|0;
   $64 = $53;
  }
  $56 = HEAP8[$__sym>>0]|0;
  $57 = $56 & 1;
  $58 = ($57<<24>>24)==(0);
  if ($58) {
   $61 = $56&255;
   $62 = $61 >>> 1;
   $66 = $62;
  } else {
   $59 = (($__sym) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $66 = $60;
  }
  $63 = (($64) + 2)|0;
  $65 = (($63) + ($66))|0;
  $$pn = $65;
 }
 $67 = (($$pn) + ($26))|0;
 $68 = ($67>>>0)>(100);
 if ($68) {
  $69 = (_malloc($67)|0);
  $70 = ($69|0)==(0|0);
  if ($70) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $79 = $69;$__mb$0 = $69;
  }
 } else {
  $79 = 0;$__mb$0 = $__mbuf;
 }
 $71 = (($__iob) + 4|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($__db$0) + ($__n$0)|0);
 $74 = HEAP8[$__dp>>0]|0;
 $75 = HEAP8[$__ts>>0]|0;
 __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb$0,$__mi,$__me,$72,$__db$0,$73,$9,$25,$__pat,$74,$75,$__grp,$__sym,$__sn,$26);
 $76 = HEAP32[$__s>>2]|0;
 HEAP32[$0>>2] = $76;
 $77 = HEAP32[$__mi>>2]|0;
 $78 = HEAP32[$__me>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__mb$0,$77,$78,$__iob,$__fl);
 _free($79);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $80 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($80)|0);
 _free($81);
 _free($82);
 STACKTOP = sp;return;
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i13 = 0, $__i$0$i$i$i17 = 0, $__i$0$i$i$i21 = 0, $__i$0$i$i$i25 = 0, $__i$0$i$i$i29 = 0, $__i$0$i$i$i5 = 0, $__i$0$i$i$i9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i10 = 0, $exitcond$i$i$i14 = 0, $exitcond$i$i$i18 = 0;
 var $exitcond$i$i$i22 = 0, $exitcond$i$i$i26 = 0, $exitcond$i$i$i30 = 0, $exitcond$i$i$i6 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $0 = sp + 108|0;
 $1 = sp + 96|0;
 $2 = sp + 92|0;
 $3 = sp + 80|0;
 $4 = sp + 68|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 40|0;
 $8 = sp + 36|0;
 $9 = sp + 24|0;
 $10 = sp + 12|0;
 $11 = sp;
 if ($__intl) {
  $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,5984)|0);
  $13 = HEAP32[$12>>2]|0;
  if ($__neg) {
   $14 = (($13) + 44|0);
   $15 = HEAP32[$14>>2]|0;
   FUNCTION_TABLE_vii[$15 & 63]($0,$12);
   $16 = HEAP32[$0>>2]|0;
   HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
   $17 = HEAP32[$12>>2]|0;
   $18 = (($17) + 32|0);
   $19 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_vii[$19 & 63]($1,$12);
   $20 = HEAP8[$__sn>>0]|0;
   $21 = $20 & 1;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    $26 = (($__sn) + 1|0);
    HEAP8[$26>>0] = 0;
    HEAP8[$__sn>>0] = 0;
   } else {
    $23 = (($__sn) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    HEAP8[$24>>0] = 0;
    $25 = (($__sn) + 4|0);
    HEAP32[$25>>2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0);
   ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
   $__i$0$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
    if ($exitcond$i$i$i) {
     break;
    }
    $27 = (($1) + ($__i$0$i$i$i<<2)|0);
    HEAP32[$27>>2] = 0;
    $28 = (($__i$0$i$i$i) + 1)|0;
    $__i$0$i$i$i = $28;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
  } else {
   $29 = (($13) + 40|0);
   $30 = HEAP32[$29>>2]|0;
   FUNCTION_TABLE_vii[$30 & 63]($2,$12);
   $31 = HEAP32[$2>>2]|0;
   HEAP8[$__pat>>0]=$31&255;HEAP8[$__pat+1>>0]=($31>>8)&255;HEAP8[$__pat+2>>0]=($31>>16)&255;HEAP8[$__pat+3>>0]=$31>>24;
   $32 = HEAP32[$12>>2]|0;
   $33 = (($32) + 28|0);
   $34 = HEAP32[$33>>2]|0;
   FUNCTION_TABLE_vii[$34 & 63]($3,$12);
   $35 = HEAP8[$__sn>>0]|0;
   $36 = $35 & 1;
   $37 = ($36<<24>>24)==(0);
   if ($37) {
    $41 = (($__sn) + 1|0);
    HEAP8[$41>>0] = 0;
    HEAP8[$__sn>>0] = 0;
   } else {
    $38 = (($__sn) + 8|0);
    $39 = HEAP32[$38>>2]|0;
    HEAP8[$39>>0] = 0;
    $40 = (($__sn) + 4|0);
    HEAP32[$40>>2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0);
   ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
   $__i$0$i$i$i5 = 0;
   while(1) {
    $exitcond$i$i$i6 = ($__i$0$i$i$i5|0)==(3);
    if ($exitcond$i$i$i6) {
     break;
    }
    $42 = (($3) + ($__i$0$i$i$i5<<2)|0);
    HEAP32[$42>>2] = 0;
    $43 = (($__i$0$i$i$i5) + 1)|0;
    $__i$0$i$i$i5 = $43;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
  }
  $44 = HEAP32[$12>>2]|0;
  $45 = (($44) + 12|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (FUNCTION_TABLE_ii[$46 & 63]($12)|0);
  HEAP8[$__dp>>0] = $47;
  $48 = HEAP32[$12>>2]|0;
  $49 = (($48) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (FUNCTION_TABLE_ii[$50 & 63]($12)|0);
  HEAP8[$__ts>>0] = $51;
  $52 = HEAP32[$12>>2]|0;
  $53 = (($52) + 20|0);
  $54 = HEAP32[$53>>2]|0;
  FUNCTION_TABLE_vii[$54 & 63]($4,$12);
  $55 = HEAP8[$__grp>>0]|0;
  $56 = $55 & 1;
  $57 = ($56<<24>>24)==(0);
  if ($57) {
   $61 = (($__grp) + 1|0);
   HEAP8[$61>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $58 = (($__grp) + 8|0);
   $59 = HEAP32[$58>>2]|0;
   HEAP8[$59>>0] = 0;
   $60 = (($__grp) + 4|0);
   HEAP32[$60>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0);
  ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  $__i$0$i$i$i9 = 0;
  while(1) {
   $exitcond$i$i$i10 = ($__i$0$i$i$i9|0)==(3);
   if ($exitcond$i$i$i10) {
    break;
   }
   $62 = (($4) + ($__i$0$i$i$i9<<2)|0);
   HEAP32[$62>>2] = 0;
   $63 = (($__i$0$i$i$i9) + 1)|0;
   $__i$0$i$i$i9 = $63;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
  $64 = HEAP32[$12>>2]|0;
  $65 = (($64) + 24|0);
  $66 = HEAP32[$65>>2]|0;
  FUNCTION_TABLE_vii[$66 & 63]($5,$12);
  $67 = HEAP8[$__sym>>0]|0;
  $68 = $67 & 1;
  $69 = ($68<<24>>24)==(0);
  if ($69) {
   $73 = (($__sym) + 1|0);
   HEAP8[$73>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $70 = (($__sym) + 8|0);
   $71 = HEAP32[$70>>2]|0;
   HEAP8[$71>>0] = 0;
   $72 = (($__sym) + 4|0);
   HEAP32[$72>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0);
  ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  $__i$0$i$i$i13 = 0;
  while(1) {
   $exitcond$i$i$i14 = ($__i$0$i$i$i13|0)==(3);
   if ($exitcond$i$i$i14) {
    break;
   }
   $74 = (($5) + ($__i$0$i$i$i13<<2)|0);
   HEAP32[$74>>2] = 0;
   $75 = (($__i$0$i$i$i13) + 1)|0;
   $__i$0$i$i$i13 = $75;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
  $76 = HEAP32[$12>>2]|0;
  $77 = (($76) + 36|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (FUNCTION_TABLE_ii[$78 & 63]($12)|0);
  $storemerge = $79;
 } else {
  $80 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,5920)|0);
  $81 = HEAP32[$80>>2]|0;
  if ($__neg) {
   $82 = (($81) + 44|0);
   $83 = HEAP32[$82>>2]|0;
   FUNCTION_TABLE_vii[$83 & 63]($6,$80);
   $84 = HEAP32[$6>>2]|0;
   HEAP8[$__pat>>0]=$84&255;HEAP8[$__pat+1>>0]=($84>>8)&255;HEAP8[$__pat+2>>0]=($84>>16)&255;HEAP8[$__pat+3>>0]=$84>>24;
   $85 = HEAP32[$80>>2]|0;
   $86 = (($85) + 32|0);
   $87 = HEAP32[$86>>2]|0;
   FUNCTION_TABLE_vii[$87 & 63]($7,$80);
   $88 = HEAP8[$__sn>>0]|0;
   $89 = $88 & 1;
   $90 = ($89<<24>>24)==(0);
   if ($90) {
    $94 = (($__sn) + 1|0);
    HEAP8[$94>>0] = 0;
    HEAP8[$__sn>>0] = 0;
   } else {
    $91 = (($__sn) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    HEAP8[$92>>0] = 0;
    $93 = (($__sn) + 4|0);
    HEAP32[$93>>2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0);
   ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
   $__i$0$i$i$i17 = 0;
   while(1) {
    $exitcond$i$i$i18 = ($__i$0$i$i$i17|0)==(3);
    if ($exitcond$i$i$i18) {
     break;
    }
    $95 = (($7) + ($__i$0$i$i$i17<<2)|0);
    HEAP32[$95>>2] = 0;
    $96 = (($__i$0$i$i$i17) + 1)|0;
    $__i$0$i$i$i17 = $96;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
  } else {
   $97 = (($81) + 40|0);
   $98 = HEAP32[$97>>2]|0;
   FUNCTION_TABLE_vii[$98 & 63]($8,$80);
   $99 = HEAP32[$8>>2]|0;
   HEAP8[$__pat>>0]=$99&255;HEAP8[$__pat+1>>0]=($99>>8)&255;HEAP8[$__pat+2>>0]=($99>>16)&255;HEAP8[$__pat+3>>0]=$99>>24;
   $100 = HEAP32[$80>>2]|0;
   $101 = (($100) + 28|0);
   $102 = HEAP32[$101>>2]|0;
   FUNCTION_TABLE_vii[$102 & 63]($9,$80);
   $103 = HEAP8[$__sn>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $109 = (($__sn) + 1|0);
    HEAP8[$109>>0] = 0;
    HEAP8[$__sn>>0] = 0;
   } else {
    $106 = (($__sn) + 8|0);
    $107 = HEAP32[$106>>2]|0;
    HEAP8[$107>>0] = 0;
    $108 = (($__sn) + 4|0);
    HEAP32[$108>>2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn,0);
   ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
   $__i$0$i$i$i21 = 0;
   while(1) {
    $exitcond$i$i$i22 = ($__i$0$i$i$i21|0)==(3);
    if ($exitcond$i$i$i22) {
     break;
    }
    $110 = (($9) + ($__i$0$i$i$i21<<2)|0);
    HEAP32[$110>>2] = 0;
    $111 = (($__i$0$i$i$i21) + 1)|0;
    $__i$0$i$i$i21 = $111;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
  }
  $112 = HEAP32[$80>>2]|0;
  $113 = (($112) + 12|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (FUNCTION_TABLE_ii[$114 & 63]($80)|0);
  HEAP8[$__dp>>0] = $115;
  $116 = HEAP32[$80>>2]|0;
  $117 = (($116) + 16|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (FUNCTION_TABLE_ii[$118 & 63]($80)|0);
  HEAP8[$__ts>>0] = $119;
  $120 = HEAP32[$80>>2]|0;
  $121 = (($120) + 20|0);
  $122 = HEAP32[$121>>2]|0;
  FUNCTION_TABLE_vii[$122 & 63]($10,$80);
  $123 = HEAP8[$__grp>>0]|0;
  $124 = $123 & 1;
  $125 = ($124<<24>>24)==(0);
  if ($125) {
   $129 = (($__grp) + 1|0);
   HEAP8[$129>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $126 = (($__grp) + 8|0);
   $127 = HEAP32[$126>>2]|0;
   HEAP8[$127>>0] = 0;
   $128 = (($__grp) + 4|0);
   HEAP32[$128>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0);
  ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  $__i$0$i$i$i25 = 0;
  while(1) {
   $exitcond$i$i$i26 = ($__i$0$i$i$i25|0)==(3);
   if ($exitcond$i$i$i26) {
    break;
   }
   $130 = (($10) + ($__i$0$i$i$i25<<2)|0);
   HEAP32[$130>>2] = 0;
   $131 = (($__i$0$i$i$i25) + 1)|0;
   $__i$0$i$i$i25 = $131;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  $132 = HEAP32[$80>>2]|0;
  $133 = (($132) + 24|0);
  $134 = HEAP32[$133>>2]|0;
  FUNCTION_TABLE_vii[$134 & 63]($11,$80);
  $135 = HEAP8[$__sym>>0]|0;
  $136 = $135 & 1;
  $137 = ($136<<24>>24)==(0);
  if ($137) {
   $141 = (($__sym) + 1|0);
   HEAP8[$141>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $138 = (($__sym) + 8|0);
   $139 = HEAP32[$138>>2]|0;
   HEAP8[$139>>0] = 0;
   $140 = (($__sym) + 4|0);
   HEAP32[$140>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym,0);
  ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  $__i$0$i$i$i29 = 0;
  while(1) {
   $exitcond$i$i$i30 = ($__i$0$i$i$i29|0)==(3);
   if ($exitcond$i$i$i30) {
    break;
   }
   $142 = (($11) + ($__i$0$i$i$i29<<2)|0);
   HEAP32[$142>>2] = 0;
   $143 = (($__i$0$i$i$i29) + 1)|0;
   $__i$0$i$i$i29 = $143;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $144 = HEAP32[$80>>2]|0;
  $145 = (($144) + 36|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = (FUNCTION_TABLE_ii[$146 & 63]($80)|0);
  $storemerge = $147;
 }
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$ = 0, $$$0 = 0, $$$029 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$lcssa = 0, $$0$i$i11 = 0, $$0$i$i11$lcssa = 0, $$0$i$i4 = 0, $$01$i$i = 0, $$2 = 0, $$35 = 0, $$36 = 0, $$37 = 0, $$lcssa39 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0 = 0, $__d$0$lcssa = 0, $__d$0$lcssa28 = 0, $__d$1 = 0, $__d$2 = 0, $__d$3 = 0, $__f$0 = 0, $__f$1 = 0, $__gl$0 = 0, $__gl$1 = 0, $__ig$0 = 0, $__ig$1 = 0, $__ng$0 = 0, $__ng$1 = 0;
 var $__p$0 = 0, $exitcond = 0, $isascii1$i = 0, $or$cond = 0, $or$cond3 = 0, $scevgep$sum = 0, $scevgep31 = 0, $smax = 0, $umax = 0, $umax30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 1|0);
 $1 = (($__sn) + 8|0);
 $2 = (($__sn) + 4|0);
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 $5 = (($__sym) + 1|0);
 $6 = (($__sym) + 8|0);
 $7 = (($__sym) + 4|0);
 $8 = (($__ct) + 8|0);
 $9 = ($__fd|0)>(0);
 $10 = (($__grp) + 1|0);
 $11 = (($__grp) + 8|0);
 $12 = (($__grp) + 4|0);
 $13 = (($__fd) + 1)|0;
 $14 = (-2 - ($__fd))|0;
 $15 = $__fd ^ -1;
 $16 = ($15|0)>(-1);
 $smax = $16 ? $15 : -1;
 $17 = (($14) - ($smax))|0;
 $$0 = $__db;$__p$0 = 0;
 while(1) {
  $exitcond = ($__p$0|0)==(4);
  if ($exitcond) {
   break;
  }
  $18 = (($__pat) + ($__p$0)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  L4: do {
   switch ($20|0) {
   case 3:  {
    $29 = HEAP8[$__sn>>0]|0;
    $30 = $29 & 1;
    $31 = ($30<<24>>24)==(0);
    if ($31) {
     $33 = $29&255;
     $34 = $33 >>> 1;
     $35 = $34;
    } else {
     $32 = HEAP32[$2>>2]|0;
     $35 = $32;
    }
    $36 = ($35|0)==(0);
    if ($36) {
     $$2 = $$0;
    } else {
     $37 = HEAP32[$1>>2]|0;
     $$ = $31 ? $0 : $37;
     $38 = HEAP8[$$>>0]|0;
     $39 = HEAP32[$__me>>2]|0;
     $40 = (($39) + 1|0);
     HEAP32[$__me>>2] = $40;
     HEAP8[$39>>0] = $38;
     $$2 = $$0;
    }
    break;
   }
   case 1:  {
    $22 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $22;
    $23 = HEAP32[$__ct>>2]|0;
    $24 = (($23) + 28|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (FUNCTION_TABLE_iii[$25 & 15]($__ct,32)|0);
    $27 = HEAP32[$__me>>2]|0;
    $28 = (($27) + 1|0);
    HEAP32[$__me>>2] = $28;
    HEAP8[$27>>0] = $26;
    $$2 = $$0;
    break;
   }
   case 4:  {
    $62 = HEAP32[$__me>>2]|0;
    $63 = (($$0) + 1|0);
    $$$0 = $__neg ? $63 : $$0;
    $$$029 = $$$0;
    $64 = HEAP32[$8>>2]|0;
    $__d$0 = $$$0;
    while(1) {
     $65 = ($__d$0>>>0)<($__de>>>0);
     if (!($65)) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     $66 = HEAP8[$__d$0>>0]|0;
     $isascii1$i = ($66<<24>>24)>(-1);
     if (!($isascii1$i)) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     $67 = $66 << 24 >> 24;
     $68 = (($64) + ($67<<1)|0);
     $69 = HEAP16[$68>>1]|0;
     $70 = $69 & 2048;
     $71 = ($70<<16>>16)==(0);
     if ($71) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     $72 = (($__d$0) + 1|0);
     $__d$0 = $72;
    }
    $__d$0$lcssa28 = $__d$0$lcssa;
    if ($9) {
     $73 = (-2 - ($__d$0$lcssa28))|0;
     $74 = $$$029 ^ -1;
     $75 = $__d$0$lcssa28 ^ -1;
     $76 = ($74>>>0)>($75>>>0);
     $umax = $76 ? $74 : $75;
     $77 = (($73) - ($umax))|0;
     $78 = ($17>>>0)>($77>>>0);
     $umax30 = $78 ? $17 : $77;
     $__d$1 = $__d$0$lcssa;$__f$0 = $__fd;
     while(1) {
      $79 = ($__d$1>>>0)>($$$0>>>0);
      $80 = ($__f$0|0)>(0);
      $or$cond = $79 & $80;
      if (!($or$cond)) {
       break;
      }
      $81 = (($__d$1) + -1|0);
      $82 = HEAP8[$81>>0]|0;
      $83 = HEAP32[$__me>>2]|0;
      $84 = (($83) + 1|0);
      HEAP32[$__me>>2] = $84;
      HEAP8[$83>>0] = $82;
      $85 = (($__f$0) + -1)|0;
      $__d$1 = $81;$__f$0 = $85;
     }
     $86 = (($13) + ($umax30))|0;
     $scevgep$sum = (($umax30) + 1)|0;
     $scevgep31 = (($__d$0$lcssa) + ($scevgep$sum)|0);
     if ($80) {
      $87 = HEAP32[$__ct>>2]|0;
      $88 = (($87) + 28|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = (FUNCTION_TABLE_iii[$89 & 15]($__ct,48)|0);
      $94 = $90;
     } else {
      $94 = 0;
     }
     $__f$1 = $86;
     while(1) {
      $91 = ($__f$1|0)>(0);
      $92 = HEAP32[$__me>>2]|0;
      $93 = (($92) + 1|0);
      HEAP32[$__me>>2] = $93;
      if (!($91)) {
       $$lcssa39 = $92;
       break;
      }
      HEAP8[$92>>0] = $94;
      $95 = (($__f$1) + -1)|0;
      $__f$1 = $95;
     }
     HEAP8[$$lcssa39>>0] = $__dp;
     $__d$2 = $scevgep31;
    } else {
     $__d$2 = $__d$0$lcssa;
    }
    $96 = ($__d$2|0)==($$$0|0);
    L33: do {
     if ($96) {
      $97 = HEAP32[$__ct>>2]|0;
      $98 = (($97) + 28|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = (FUNCTION_TABLE_iii[$99 & 15]($__ct,48)|0);
      $101 = HEAP32[$__me>>2]|0;
      $102 = (($101) + 1|0);
      HEAP32[$__me>>2] = $102;
      HEAP8[$101>>0] = $100;
     } else {
      $103 = HEAP8[$__grp>>0]|0;
      $104 = $103 & 1;
      $105 = ($104<<24>>24)==(0);
      if ($105) {
       $107 = $103&255;
       $108 = $107 >>> 1;
       $109 = $108;
      } else {
       $106 = HEAP32[$12>>2]|0;
       $109 = $106;
      }
      $110 = ($109|0)==(0);
      if ($110) {
       $__d$3 = $__d$2;$__gl$0 = -1;$__ig$0 = 0;$__ng$0 = 0;
      } else {
       $111 = HEAP32[$11>>2]|0;
       $$35 = $105 ? $10 : $111;
       $112 = HEAP8[$$35>>0]|0;
       $113 = $112 << 24 >> 24;
       $__d$3 = $__d$2;$__gl$0 = $113;$__ig$0 = 0;$__ng$0 = 0;
      }
      while(1) {
       $114 = ($__d$3|0)==($$$0|0);
       if ($114) {
        break L33;
       }
       $115 = ($__ng$0|0)==($__gl$0|0);
       if ($115) {
        $116 = HEAP32[$__me>>2]|0;
        $117 = (($116) + 1|0);
        HEAP32[$__me>>2] = $117;
        HEAP8[$116>>0] = $__ts;
        $118 = (($__ig$0) + 1)|0;
        $119 = HEAP8[$__grp>>0]|0;
        $120 = $119 & 1;
        $121 = ($120<<24>>24)==(0);
        if ($121) {
         $123 = $119&255;
         $124 = $123 >>> 1;
         $126 = $124;
        } else {
         $122 = HEAP32[$12>>2]|0;
         $126 = $122;
        }
        $125 = ($118>>>0)<($126>>>0);
        if ($125) {
         $127 = HEAP32[$11>>2]|0;
         $$36 = $121 ? $10 : $127;
         $128 = (($$36) + ($118)|0);
         $129 = HEAP8[$128>>0]|0;
         $130 = ($129<<24>>24)==(127);
         if ($130) {
          $__gl$1 = -1;$__ig$1 = $118;$__ng$1 = 0;
         } else {
          $131 = HEAP32[$11>>2]|0;
          $$37 = $121 ? $10 : $131;
          $132 = (($$37) + ($118)|0);
          $133 = HEAP8[$132>>0]|0;
          $134 = $133 << 24 >> 24;
          $__gl$1 = $134;$__ig$1 = $118;$__ng$1 = 0;
         }
        } else {
         $__gl$1 = $__ng$0;$__ig$1 = $118;$__ng$1 = 0;
        }
       } else {
        $__gl$1 = $__gl$0;$__ig$1 = $__ig$0;$__ng$1 = $__ng$0;
       }
       $135 = (($__d$3) + -1|0);
       $136 = HEAP8[$135>>0]|0;
       $137 = HEAP32[$__me>>2]|0;
       $138 = (($137) + 1|0);
       HEAP32[$__me>>2] = $138;
       HEAP8[$137>>0] = $136;
       $139 = (($__ng$1) + 1)|0;
       $__d$3 = $135;$__gl$0 = $__gl$1;$__ig$0 = $__ig$1;$__ng$0 = $139;
      }
     }
    } while(0);
    $140 = HEAP32[$__me>>2]|0;
    $141 = ($62|0)==($140|0);
    if ($141) {
     $$2 = $$$0;
    } else {
     $$0$i$i4 = $140;$$01$i$i = $62;
     while(1) {
      $142 = (($$0$i$i4) + -1|0);
      $143 = ($$01$i$i>>>0)<($142>>>0);
      if (!($143)) {
       $$2 = $$$0;
       break L4;
      }
      $144 = HEAP8[$$01$i$i>>0]|0;
      $145 = HEAP8[$142>>0]|0;
      HEAP8[$$01$i$i>>0] = $145;
      HEAP8[$142>>0] = $144;
      $146 = (($$01$i$i) + 1|0);
      $$0$i$i4 = $142;$$01$i$i = $146;
     }
    }
    break;
   }
   case 2:  {
    $41 = HEAP8[$__sym>>0]|0;
    $42 = $41 & 1;
    $43 = ($42<<24>>24)==(0);
    if ($43) {
     $45 = $41&255;
     $46 = $45 >>> 1;
     $47 = $46;
    } else {
     $44 = HEAP32[$7>>2]|0;
     $47 = $44;
    }
    $48 = ($47|0)==(0);
    $or$cond3 = $4 | $48;
    if ($or$cond3) {
     $$2 = $$0;
    } else {
     if ($43) {
      $51 = $41&255;
      $52 = $51 >>> 1;
      $54 = $5;$55 = $52;
     } else {
      $49 = HEAP32[$6>>2]|0;
      $50 = HEAP32[$7>>2]|0;
      $54 = $49;$55 = $50;
     }
     $53 = (($54) + ($55)|0);
     $56 = HEAP32[$__me>>2]|0;
     $$0$i$i11 = $56;$57 = $54;
     while(1) {
      $58 = ($57|0)==($53|0);
      if ($58) {
       $$0$i$i11$lcssa = $$0$i$i11;
       break;
      }
      $59 = HEAP8[$57>>0]|0;
      HEAP8[$$0$i$i11>>0] = $59;
      $60 = (($57) + 1|0);
      $61 = (($$0$i$i11) + 1|0);
      $$0$i$i11 = $61;$57 = $60;
     }
     HEAP32[$__me>>2] = $$0$i$i11$lcssa;
     $$2 = $$0;
    }
    break;
   }
   case 0:  {
    $21 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $21;
    $$2 = $$0;
    break;
   }
   default: {
    $$2 = $$0;
   }
   }
  } while(0);
  $147 = (($__p$0) + 1)|0;
  $$0 = $$2;$__p$0 = $147;
 }
 $148 = HEAP8[$__sn>>0]|0;
 $149 = $148 & 1;
 $150 = ($149<<24>>24)==(0);
 if ($150) {
  $152 = $148&255;
  $153 = $152 >>> 1;
  $154 = $153;
 } else {
  $151 = HEAP32[$2>>2]|0;
  $154 = $151;
 }
 $155 = ($154>>>0)>(1);
 if ($155) {
  if ($150) {
   $158 = $148&255;
   $159 = $158 >>> 1;
   $161 = $0;$162 = $159;
  } else {
   $156 = HEAP32[$1>>2]|0;
   $157 = HEAP32[$2>>2]|0;
   $161 = $156;$162 = $157;
  }
  $160 = (($161) + ($162)|0);
  $163 = HEAP32[$__me>>2]|0;
  $$0$i$i = $163;$$pn = $161;
  while(1) {
   $164 = (($$pn) + 1|0);
   $165 = ($164|0)==($160|0);
   if ($165) {
    $$0$i$i$lcssa = $$0$i$i;
    break;
   }
   $166 = HEAP8[$164>>0]|0;
   HEAP8[$$0$i$i>>0] = $166;
   $167 = (($$0$i$i) + 1|0);
   $$0$i$i = $167;$$pn = $164;
  }
  HEAP32[$__me>>2] = $$0$i$i$lcssa;
 }
 $168 = $__flags & 176;
 if ((($168|0) == 32)) {
  $169 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $169;
 } else if (!((($168|0) == 16))) {
  HEAP32[$__mi>>2] = $__mb;
 }
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$byval_copy = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__i$0$i$i = 0, $__i$0$i$i1 = 0, $__i$0$i$i4 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0;
 var $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $exitcond$i$i = 0, $exitcond$i$i2 = 0, $exitcond$i$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $$byval_copy = sp + 56|0;
 $__loc = sp + 52|0;
 $__pat = sp + 164|0;
 $__dp = sp + 161|0;
 $__ts = sp + 160|0;
 $__grp = sp + 40|0;
 $__sym = sp + 28|0;
 $__sn = sp + 16|0;
 $__fd = sp + 12|0;
 $__mbuf = sp + 60|0;
 $__mi = sp + 8|0;
 $__me = sp + 4|0;
 $0 = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6704)|0);
 $2 = HEAP8[$__digits>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = $2&255;
  $8 = $7 >>> 1;
  $9 = $8;
 } else {
  $5 = (($__digits) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $9 = $6;
 }
 $10 = ($9|0)==(0);
 if ($10) {
  $27 = 0;
 } else {
  if ($4) {
   $13 = (($__digits) + 1|0);
   $15 = $13;
  } else {
   $11 = (($__digits) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $15 = $12;
  }
  $14 = HEAP8[$15>>0]|0;
  $16 = HEAP32[$1>>2]|0;
  $17 = (($16) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (FUNCTION_TABLE_iii[$18 & 15]($1,45)|0);
  $20 = ($14<<24>>24)==($19<<24>>24);
  $27 = $20;
 }
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $21 = (($__grp) + ($__i$0$i$i<<2)|0);
  HEAP32[$21>>2] = 0;
  $22 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $22;
 }
 $__i$0$i$i1 = 0;
 while(1) {
  $exitcond$i$i2 = ($__i$0$i$i1|0)==(3);
  if ($exitcond$i$i2) {
   break;
  }
  $23 = (($__sym) + ($__i$0$i$i1<<2)|0);
  HEAP32[$23>>2] = 0;
  $24 = (($__i$0$i$i1) + 1)|0;
  $__i$0$i$i1 = $24;
 }
 $__i$0$i$i4 = 0;
 while(1) {
  $exitcond$i$i5 = ($__i$0$i$i4|0)==(3);
  if ($exitcond$i$i5) {
   break;
  }
  $25 = (($__sn) + ($__i$0$i$i4<<2)|0);
  HEAP32[$25>>2] = 0;
  $26 = (($__i$0$i$i4) + 1)|0;
  $__i$0$i$i4 = $26;
 }
 __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$27,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd);
 $28 = HEAP8[$__digits>>0]|0;
 $29 = $28 & 1;
 $30 = ($29<<24>>24)==(0);
 if ($30) {
  $33 = $28&255;
  $34 = $33 >>> 1;
  $36 = $34;
 } else {
  $31 = (($__digits) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $36 = $32;
 }
 $35 = HEAP32[$__fd>>2]|0;
 $37 = ($36|0)>($35|0);
 if ($37) {
  if ($30) {
   $40 = $28&255;
   $41 = $40 >>> 1;
   $43 = $41;
  } else {
   $38 = (($__digits) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $43 = $39;
  }
  $42 = (($43) - ($35))|0;
  $44 = $42 << 1;
  $45 = HEAP8[$__sn>>0]|0;
  $46 = $45 & 1;
  $47 = ($46<<24>>24)==(0);
  if ($47) {
   $50 = $45&255;
   $51 = $50 >>> 1;
   $61 = $51;
  } else {
   $48 = (($__sn) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   $61 = $49;
  }
  $52 = HEAP8[$__sym>>0]|0;
  $53 = $52 & 1;
  $54 = ($53<<24>>24)==(0);
  if ($54) {
   $57 = $52&255;
   $58 = $57 >>> 1;
   $63 = $58;
  } else {
   $55 = (($__sym) + 4|0);
   $56 = HEAP32[$55>>2]|0;
   $63 = $56;
  }
  $59 = $44 | 1;
  $60 = (($61) + ($59))|0;
  $62 = (($60) + ($63))|0;
  $$pn = $62;
 } else {
  $64 = HEAP8[$__sn>>0]|0;
  $65 = $64 & 1;
  $66 = ($65<<24>>24)==(0);
  if ($66) {
   $69 = $64&255;
   $70 = $69 >>> 1;
   $79 = $70;
  } else {
   $67 = (($__sn) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $79 = $68;
  }
  $71 = HEAP8[$__sym>>0]|0;
  $72 = $71 & 1;
  $73 = ($72<<24>>24)==(0);
  if ($73) {
   $76 = $71&255;
   $77 = $76 >>> 1;
   $81 = $77;
  } else {
   $74 = (($__sym) + 4|0);
   $75 = HEAP32[$74>>2]|0;
   $81 = $75;
  }
  $78 = (($79) + 2)|0;
  $80 = (($78) + ($81))|0;
  $$pn = $80;
 }
 $82 = (($$pn) + ($35))|0;
 $83 = ($82>>>0)>(100);
 if ($83) {
  $84 = (_malloc($82)|0);
  $85 = ($84|0)==(0|0);
  if ($85) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $105 = $84;$__mb$0 = $84;
  }
 } else {
  $105 = 0;$__mb$0 = $__mbuf;
 }
 $86 = (($__iob) + 4|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $28 & 1;
 $89 = ($88<<24>>24)==(0);
 if ($89) {
  $94 = (($__digits) + 1|0);
  $95 = $28&255;
  $96 = $95 >>> 1;
  $98 = $94;$99 = $96;
 } else {
  $90 = (($__digits) + 8|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($__digits) + 4|0);
  $93 = HEAP32[$92>>2]|0;
  $98 = $91;$99 = $93;
 }
 $97 = (($98) + ($99)|0);
 $100 = HEAP8[$__dp>>0]|0;
 $101 = HEAP8[$__ts>>0]|0;
 __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb$0,$__mi,$__me,$87,$98,$97,$1,$27,$__pat,$100,$101,$__grp,$__sym,$__sn,$35);
 $102 = HEAP32[$__s>>2]|0;
 HEAP32[$0>>2] = $102;
 $103 = HEAP32[$__mi>>2]|0;
 $104 = HEAP32[$__me>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__mb$0,$103,$104,$__iob,$__fl);
 _free($105);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $106 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($106)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$byval_copy = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__i$0$i$i = 0, $__i$0$i$i2 = 0, $__i$0$i$i4 = 0, $__loc = 0;
 var $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $exitcond$i$i = 0, $exitcond$i$i3 = 0, $exitcond$i$i5 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008|0;
 $$byval_copy = sp + 8|0;
 $vararg_buffer1 = sp;
 $__buf = sp + 896|0;
 $__bb = sp + 888|0;
 $__digits = sp + 488|0;
 $__loc = sp + 480|0;
 $__pat = sp + 892|0;
 $__dp = sp + 476|0;
 $__ts = sp + 472|0;
 $__grp = sp + 460|0;
 $__sym = sp + 448|0;
 $__sn = sp + 436|0;
 $__fd = sp + 432|0;
 $__mbuf = sp + 32|0;
 $__mi = sp + 24|0;
 $__me = sp + 20|0;
 $0 = sp + 16|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[$$byval_copy>>3] = $__units;
 $1 = (_snprintf($__buf,100,6280,$$byval_copy)|0);
 $2 = ($1>>>0)>(99);
 if ($2) {
  $3 = (__ZNSt3__16__clocEv()|0);
  HEAPF64[$vararg_buffer1>>3] = $__units;
  $4 = (__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb,$3,6280,$vararg_buffer1)|0);
  $5 = HEAP32[$__bb>>2]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  }
  $7 = $4 << 2;
  $8 = (_malloc($7)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $84 = $8;$86 = $5;$__db$0 = $8;$__n$0 = $4;
  }
 } else {
  $84 = 0;$86 = 0;$__db$0 = $__digits;$__n$0 = $1;
 }
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6696)|0);
 $11 = HEAP32[$__bb>>2]|0;
 $12 = (($11) + ($__n$0)|0);
 $13 = HEAP32[$10>>2]|0;
 $14 = (($13) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 (FUNCTION_TABLE_iiiii[$15 & 7]($10,$11,$12,$__db$0)|0);
 $16 = ($__n$0|0)==(0);
 if ($16) {
  $26 = 0;
 } else {
  $17 = HEAP32[$__bb>>2]|0;
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)==(45);
  $26 = $19;
 }
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $20 = (($__grp) + ($__i$0$i$i<<2)|0);
  HEAP32[$20>>2] = 0;
  $21 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $21;
 }
 $__i$0$i$i2 = 0;
 while(1) {
  $exitcond$i$i3 = ($__i$0$i$i2|0)==(3);
  if ($exitcond$i$i3) {
   break;
  }
  $22 = (($__sym) + ($__i$0$i$i2<<2)|0);
  HEAP32[$22>>2] = 0;
  $23 = (($__i$0$i$i2) + 1)|0;
  $__i$0$i$i2 = $23;
 }
 $__i$0$i$i4 = 0;
 while(1) {
  $exitcond$i$i5 = ($__i$0$i$i4|0)==(3);
  if ($exitcond$i$i5) {
   break;
  }
  $24 = (($__sn) + ($__i$0$i$i4<<2)|0);
  HEAP32[$24>>2] = 0;
  $25 = (($__i$0$i$i4) + 1)|0;
  $__i$0$i$i4 = $25;
 }
 __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$26,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd);
 $27 = HEAP32[$__fd>>2]|0;
 $28 = ($__n$0|0)>($27|0);
 if ($28) {
  $29 = (($__n$0) - ($27))|0;
  $30 = $29 << 1;
  $31 = HEAP8[$__sn>>0]|0;
  $32 = $31 & 1;
  $33 = ($32<<24>>24)==(0);
  if ($33) {
   $36 = $31&255;
   $37 = $36 >>> 1;
   $47 = $37;
  } else {
   $34 = (($__sn) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $47 = $35;
  }
  $38 = HEAP8[$__sym>>0]|0;
  $39 = $38 & 1;
  $40 = ($39<<24>>24)==(0);
  if ($40) {
   $43 = $38&255;
   $44 = $43 >>> 1;
   $49 = $44;
  } else {
   $41 = (($__sym) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $49 = $42;
  }
  $45 = $30 | 1;
  $46 = (($47) + ($45))|0;
  $48 = (($46) + ($49))|0;
  $$pn = $48;
 } else {
  $50 = HEAP8[$__sn>>0]|0;
  $51 = $50 & 1;
  $52 = ($51<<24>>24)==(0);
  if ($52) {
   $55 = $50&255;
   $56 = $55 >>> 1;
   $65 = $56;
  } else {
   $53 = (($__sn) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $65 = $54;
  }
  $57 = HEAP8[$__sym>>0]|0;
  $58 = $57 & 1;
  $59 = ($58<<24>>24)==(0);
  if ($59) {
   $62 = $57&255;
   $63 = $62 >>> 1;
   $67 = $63;
  } else {
   $60 = (($__sym) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $67 = $61;
  }
  $64 = (($65) + 2)|0;
  $66 = (($64) + ($67))|0;
  $$pn = $66;
 }
 $68 = (($$pn) + ($27))|0;
 $69 = ($68>>>0)>(100);
 if ($69) {
  $70 = $68 << 2;
  $71 = (_malloc($70)|0);
  $72 = ($71|0)==(0|0);
  if ($72) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $81 = $71;$__mb$0 = $71;
  }
 } else {
  $81 = 0;$__mb$0 = $__mbuf;
 }
 $73 = (($__iob) + 4|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($__db$0) + ($__n$0<<2)|0);
 $76 = HEAP32[$__dp>>2]|0;
 $77 = HEAP32[$__ts>>2]|0;
 __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb$0,$__mi,$__me,$74,$__db$0,$75,$10,$26,$__pat,$76,$77,$__grp,$__sym,$__sn,$27);
 $78 = HEAP32[$__s>>2]|0;
 HEAP32[$0>>2] = $78;
 $79 = HEAP32[$__mi>>2]|0;
 $80 = HEAP32[$__me>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__mb$0,$79,$80,$__iob,$__fl);
 $82 = ($81|0)==(0|0);
 if (!($82)) {
  _free($81);
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $83 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($83)|0);
 $85 = ($84|0)==(0|0);
 if (!($85)) {
  _free($84);
 }
 _free($86);
 STACKTOP = sp;return;
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i11 = 0, $__i$0$i$i$i15 = 0, $__i$0$i$i$i19 = 0, $__i$0$i$i$i23 = 0, $__i$0$i$i$i27 = 0, $__i$0$i$i$i5 = 0, $__i$0$i$i$i8 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i12 = 0, $exitcond$i$i$i16 = 0, $exitcond$i$i$i20 = 0, $exitcond$i$i$i24 = 0, $exitcond$i$i$i28 = 0, $exitcond$i$i$i6 = 0, $exitcond$i$i$i9 = 0, $storemerge = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $0 = sp + 108|0;
 $1 = sp + 96|0;
 $2 = sp + 92|0;
 $3 = sp + 80|0;
 $4 = sp + 68|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 40|0;
 $8 = sp + 36|0;
 $9 = sp + 24|0;
 $10 = sp + 12|0;
 $11 = sp;
 if ($__intl) {
  $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6112)|0);
  $13 = HEAP32[$12>>2]|0;
  if ($__neg) {
   $14 = (($13) + 44|0);
   $15 = HEAP32[$14>>2]|0;
   FUNCTION_TABLE_vii[$15 & 63]($0,$12);
   $16 = HEAP32[$0>>2]|0;
   HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
   $17 = HEAP32[$12>>2]|0;
   $18 = (($17) + 32|0);
   $19 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_vii[$19 & 63]($1,$12);
   $20 = HEAP8[$__sn>>0]|0;
   $21 = $20 & 1;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    HEAP8[$__sn>>0] = 0;
   } else {
    $23 = (($__sn) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    HEAP32[$24>>2] = 0;
   }
   $25 = (($__sn) + 4|0);
   HEAP32[$25>>2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0);
   ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
   $__i$0$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
    if ($exitcond$i$i$i) {
     break;
    }
    $26 = (($1) + ($__i$0$i$i$i<<2)|0);
    HEAP32[$26>>2] = 0;
    $27 = (($__i$0$i$i$i) + 1)|0;
    $__i$0$i$i$i = $27;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($1);
  } else {
   $28 = (($13) + 40|0);
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_vii[$29 & 63]($2,$12);
   $30 = HEAP32[$2>>2]|0;
   HEAP8[$__pat>>0]=$30&255;HEAP8[$__pat+1>>0]=($30>>8)&255;HEAP8[$__pat+2>>0]=($30>>16)&255;HEAP8[$__pat+3>>0]=$30>>24;
   $31 = HEAP32[$12>>2]|0;
   $32 = (($31) + 28|0);
   $33 = HEAP32[$32>>2]|0;
   FUNCTION_TABLE_vii[$33 & 63]($3,$12);
   $34 = HEAP8[$__sn>>0]|0;
   $35 = $34 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    HEAP8[$__sn>>0] = 0;
   } else {
    $37 = (($__sn) + 8|0);
    $38 = HEAP32[$37>>2]|0;
    HEAP32[$38>>2] = 0;
   }
   $39 = (($__sn) + 4|0);
   HEAP32[$39>>2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0);
   ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
   $__i$0$i$i$i5 = 0;
   while(1) {
    $exitcond$i$i$i6 = ($__i$0$i$i$i5|0)==(3);
    if ($exitcond$i$i$i6) {
     break;
    }
    $40 = (($3) + ($__i$0$i$i$i5<<2)|0);
    HEAP32[$40>>2] = 0;
    $41 = (($__i$0$i$i$i5) + 1)|0;
    $__i$0$i$i$i5 = $41;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($3);
  }
  $42 = HEAP32[$12>>2]|0;
  $43 = (($42) + 12|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (FUNCTION_TABLE_ii[$44 & 63]($12)|0);
  HEAP32[$__dp>>2] = $45;
  $46 = HEAP32[$12>>2]|0;
  $47 = (($46) + 16|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (FUNCTION_TABLE_ii[$48 & 63]($12)|0);
  HEAP32[$__ts>>2] = $49;
  $50 = HEAP32[$12>>2]|0;
  $51 = (($50) + 20|0);
  $52 = HEAP32[$51>>2]|0;
  FUNCTION_TABLE_vii[$52 & 63]($4,$12);
  $53 = HEAP8[$__grp>>0]|0;
  $54 = $53 & 1;
  $55 = ($54<<24>>24)==(0);
  if ($55) {
   $59 = (($__grp) + 1|0);
   HEAP8[$59>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $56 = (($__grp) + 8|0);
   $57 = HEAP32[$56>>2]|0;
   HEAP8[$57>>0] = 0;
   $58 = (($__grp) + 4|0);
   HEAP32[$58>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0);
  ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  $__i$0$i$i$i8 = 0;
  while(1) {
   $exitcond$i$i$i9 = ($__i$0$i$i$i8|0)==(3);
   if ($exitcond$i$i$i9) {
    break;
   }
   $60 = (($4) + ($__i$0$i$i$i8<<2)|0);
   HEAP32[$60>>2] = 0;
   $61 = (($__i$0$i$i$i8) + 1)|0;
   $__i$0$i$i$i8 = $61;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
  $62 = HEAP32[$12>>2]|0;
  $63 = (($62) + 24|0);
  $64 = HEAP32[$63>>2]|0;
  FUNCTION_TABLE_vii[$64 & 63]($5,$12);
  $65 = HEAP8[$__sym>>0]|0;
  $66 = $65 & 1;
  $67 = ($66<<24>>24)==(0);
  if ($67) {
   HEAP8[$__sym>>0] = 0;
  } else {
   $68 = (($__sym) + 8|0);
   $69 = HEAP32[$68>>2]|0;
   HEAP32[$69>>2] = 0;
  }
  $70 = (($__sym) + 4|0);
  HEAP32[$70>>2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0);
  ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  $__i$0$i$i$i11 = 0;
  while(1) {
   $exitcond$i$i$i12 = ($__i$0$i$i$i11|0)==(3);
   if ($exitcond$i$i$i12) {
    break;
   }
   $71 = (($5) + ($__i$0$i$i$i11<<2)|0);
   HEAP32[$71>>2] = 0;
   $72 = (($__i$0$i$i$i11) + 1)|0;
   $__i$0$i$i$i11 = $72;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($5);
  $73 = HEAP32[$12>>2]|0;
  $74 = (($73) + 36|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (FUNCTION_TABLE_ii[$75 & 63]($12)|0);
  $storemerge = $76;
 } else {
  $77 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6048)|0);
  $78 = HEAP32[$77>>2]|0;
  if ($__neg) {
   $79 = (($78) + 44|0);
   $80 = HEAP32[$79>>2]|0;
   FUNCTION_TABLE_vii[$80 & 63]($6,$77);
   $81 = HEAP32[$6>>2]|0;
   HEAP8[$__pat>>0]=$81&255;HEAP8[$__pat+1>>0]=($81>>8)&255;HEAP8[$__pat+2>>0]=($81>>16)&255;HEAP8[$__pat+3>>0]=$81>>24;
   $82 = HEAP32[$77>>2]|0;
   $83 = (($82) + 32|0);
   $84 = HEAP32[$83>>2]|0;
   FUNCTION_TABLE_vii[$84 & 63]($7,$77);
   $85 = HEAP8[$__sn>>0]|0;
   $86 = $85 & 1;
   $87 = ($86<<24>>24)==(0);
   if ($87) {
    HEAP8[$__sn>>0] = 0;
   } else {
    $88 = (($__sn) + 8|0);
    $89 = HEAP32[$88>>2]|0;
    HEAP32[$89>>2] = 0;
   }
   $90 = (($__sn) + 4|0);
   HEAP32[$90>>2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0);
   ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
   $__i$0$i$i$i15 = 0;
   while(1) {
    $exitcond$i$i$i16 = ($__i$0$i$i$i15|0)==(3);
    if ($exitcond$i$i$i16) {
     break;
    }
    $91 = (($7) + ($__i$0$i$i$i15<<2)|0);
    HEAP32[$91>>2] = 0;
    $92 = (($__i$0$i$i$i15) + 1)|0;
    $__i$0$i$i$i15 = $92;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($7);
  } else {
   $93 = (($78) + 40|0);
   $94 = HEAP32[$93>>2]|0;
   FUNCTION_TABLE_vii[$94 & 63]($8,$77);
   $95 = HEAP32[$8>>2]|0;
   HEAP8[$__pat>>0]=$95&255;HEAP8[$__pat+1>>0]=($95>>8)&255;HEAP8[$__pat+2>>0]=($95>>16)&255;HEAP8[$__pat+3>>0]=$95>>24;
   $96 = HEAP32[$77>>2]|0;
   $97 = (($96) + 28|0);
   $98 = HEAP32[$97>>2]|0;
   FUNCTION_TABLE_vii[$98 & 63]($9,$77);
   $99 = HEAP8[$__sn>>0]|0;
   $100 = $99 & 1;
   $101 = ($100<<24>>24)==(0);
   if ($101) {
    HEAP8[$__sn>>0] = 0;
   } else {
    $102 = (($__sn) + 8|0);
    $103 = HEAP32[$102>>2]|0;
    HEAP32[$103>>2] = 0;
   }
   $104 = (($__sn) + 4|0);
   HEAP32[$104>>2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn,0);
   ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
   $__i$0$i$i$i19 = 0;
   while(1) {
    $exitcond$i$i$i20 = ($__i$0$i$i$i19|0)==(3);
    if ($exitcond$i$i$i20) {
     break;
    }
    $105 = (($9) + ($__i$0$i$i$i19<<2)|0);
    HEAP32[$105>>2] = 0;
    $106 = (($__i$0$i$i$i19) + 1)|0;
    $__i$0$i$i$i19 = $106;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($9);
  }
  $107 = HEAP32[$77>>2]|0;
  $108 = (($107) + 12|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = (FUNCTION_TABLE_ii[$109 & 63]($77)|0);
  HEAP32[$__dp>>2] = $110;
  $111 = HEAP32[$77>>2]|0;
  $112 = (($111) + 16|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (FUNCTION_TABLE_ii[$113 & 63]($77)|0);
  HEAP32[$__ts>>2] = $114;
  $115 = HEAP32[$77>>2]|0;
  $116 = (($115) + 20|0);
  $117 = HEAP32[$116>>2]|0;
  FUNCTION_TABLE_vii[$117 & 63]($10,$77);
  $118 = HEAP8[$__grp>>0]|0;
  $119 = $118 & 1;
  $120 = ($119<<24>>24)==(0);
  if ($120) {
   $124 = (($__grp) + 1|0);
   HEAP8[$124>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $121 = (($__grp) + 8|0);
   $122 = HEAP32[$121>>2]|0;
   HEAP8[$122>>0] = 0;
   $123 = (($__grp) + 4|0);
   HEAP32[$123>>2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp,0);
  ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  $__i$0$i$i$i23 = 0;
  while(1) {
   $exitcond$i$i$i24 = ($__i$0$i$i$i23|0)==(3);
   if ($exitcond$i$i$i24) {
    break;
   }
   $125 = (($10) + ($__i$0$i$i$i23<<2)|0);
   HEAP32[$125>>2] = 0;
   $126 = (($__i$0$i$i$i23) + 1)|0;
   $__i$0$i$i$i23 = $126;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  $127 = HEAP32[$77>>2]|0;
  $128 = (($127) + 24|0);
  $129 = HEAP32[$128>>2]|0;
  FUNCTION_TABLE_vii[$129 & 63]($11,$77);
  $130 = HEAP8[$__sym>>0]|0;
  $131 = $130 & 1;
  $132 = ($131<<24>>24)==(0);
  if ($132) {
   HEAP8[$__sym>>0] = 0;
  } else {
   $133 = (($__sym) + 8|0);
   $134 = HEAP32[$133>>2]|0;
   HEAP32[$134>>2] = 0;
  }
  $135 = (($__sym) + 4|0);
  HEAP32[$135>>2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym,0);
  ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  $__i$0$i$i$i27 = 0;
  while(1) {
   $exitcond$i$i$i28 = ($__i$0$i$i$i27|0)==(3);
   if ($exitcond$i$i$i28) {
    break;
   }
   $136 = (($11) + ($__i$0$i$i$i27<<2)|0);
   HEAP32[$136>>2] = 0;
   $137 = (($__i$0$i$i$i27) + 1)|0;
   $__i$0$i$i$i27 = $137;
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  $138 = HEAP32[$77>>2]|0;
  $139 = (($138) + 36|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = (FUNCTION_TABLE_ii[$140 & 63]($77)|0);
  $storemerge = $141;
 }
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$ = 0, $$$0 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i4 = 0, $$0$i$i9 = 0, $$01$i$i = 0, $$2 = 0, $$30 = 0, $$31 = 0, $$32 = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $157$phi = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0 = 0, $__d$0$lcssa = 0, $__d$1 = 0, $__d$2 = 0;
 var $__d$3 = 0, $__f$0 = 0, $__f$1 = 0, $__gl$0 = 0, $__gl$1 = 0, $__ig$0 = 0, $__ig$1 = 0, $__me$promoted = 0, $__ng$0 = 0, $__ng$1 = 0, $__p$0 = 0, $exitcond = 0, $or$cond = 0, $or$cond3 = 0, $scevgep$i = 0, $scevgep$i10 = 0, $scevgep$sum = 0, $scevgep26 = 0, $scevgep27$sum = 0, $scevgep28 = 0;
 var $smax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 4|0);
 $1 = (($__sn) + 8|0);
 $2 = $__flags & 512;
 $3 = ($2|0)==(0);
 $4 = (($__sym) + 4|0);
 $5 = (($__sym) + 8|0);
 $6 = ($__fd|0)>(0);
 $7 = (($__grp) + 1|0);
 $8 = (($__grp) + 8|0);
 $9 = (($__grp) + 4|0);
 $$0 = $__db;$__p$0 = 0;
 while(1) {
  $exitcond = ($__p$0|0)==(4);
  if ($exitcond) {
   break;
  }
  $10 = (($__pat) + ($__p$0)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  L4: do {
   switch ($12|0) {
   case 4:  {
    $54 = HEAP32[$__me>>2]|0;
    $55 = (($$0) + 4|0);
    $$$0 = $__neg ? $55 : $$0;
    $__d$0 = $$$0;
    while(1) {
     $56 = ($__d$0>>>0)<($__de>>>0);
     if (!($56)) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     $57 = HEAP32[$__d$0>>2]|0;
     $58 = HEAP32[$__ct>>2]|0;
     $59 = (($58) + 12|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = (FUNCTION_TABLE_iiii[$60 & 31]($__ct,2048,$57)|0);
     if (!($61)) {
      $__d$0$lcssa = $__d$0;
      break;
     }
     $62 = (($__d$0) + 4|0);
     $__d$0 = $62;
    }
    if ($6) {
     $__d$1 = $__d$0$lcssa;$__f$0 = $__fd;
     while(1) {
      $63 = ($__d$1>>>0)>($$$0>>>0);
      $64 = ($__f$0|0)>(0);
      $or$cond = $63 & $64;
      if (!($or$cond)) {
       break;
      }
      $65 = (($__d$1) + -4|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = HEAP32[$__me>>2]|0;
      $68 = (($67) + 4|0);
      HEAP32[$__me>>2] = $68;
      HEAP32[$67>>2] = $66;
      $69 = (($__f$0) + -1)|0;
      $__d$1 = $65;$__f$0 = $69;
     }
     if ($64) {
      $70 = HEAP32[$__ct>>2]|0;
      $71 = (($70) + 44|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = (FUNCTION_TABLE_iii[$72 & 15]($__ct,48)|0);
      $80 = $73;
     } else {
      $80 = 0;
     }
     $__me$promoted = HEAP32[$__me>>2]|0;
     $74 = $__f$0 ^ -1;
     $75 = ($74|0)>(-1);
     $smax = $75 ? $74 : -1;
     $76 = (($__f$0) + ($smax))|0;
     $79 = $__me$promoted;$__f$1 = $__f$0;
     while(1) {
      $77 = ($__f$1|0)>(0);
      if (!($77)) {
       break;
      }
      $78 = (($79) + 4|0);
      HEAP32[$79>>2] = $80;
      $81 = (($__f$1) + -1)|0;
      $79 = $78;$__f$1 = $81;
     }
     $scevgep$sum = (($76) + 2)|0;
     $scevgep26 = (($__me$promoted) + ($scevgep$sum<<2)|0);
     $scevgep27$sum = (($76) + 1)|0;
     $scevgep28 = (($__me$promoted) + ($scevgep27$sum<<2)|0);
     HEAP32[$__me>>2] = $scevgep26;
     HEAP32[$scevgep28>>2] = $__dp;
     $__d$2 = $__d$1;
    } else {
     $__d$2 = $__d$0$lcssa;
    }
    $82 = ($__d$2|0)==($$$0|0);
    if ($82) {
     $83 = HEAP32[$__ct>>2]|0;
     $84 = (($83) + 44|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = (FUNCTION_TABLE_iii[$85 & 15]($__ct,48)|0);
     $87 = HEAP32[$__me>>2]|0;
     $88 = (($87) + 4|0);
     HEAP32[$__me>>2] = $88;
     HEAP32[$87>>2] = $86;
     $127 = $88;
    } else {
     $89 = HEAP8[$__grp>>0]|0;
     $90 = $89 & 1;
     $91 = ($90<<24>>24)==(0);
     if ($91) {
      $93 = $89&255;
      $94 = $93 >>> 1;
      $95 = $94;
     } else {
      $92 = HEAP32[$9>>2]|0;
      $95 = $92;
     }
     $96 = ($95|0)==(0);
     if ($96) {
      $__d$3 = $__d$2;$__gl$0 = -1;$__ig$0 = 0;$__ng$0 = 0;
     } else {
      $97 = HEAP32[$8>>2]|0;
      $$30 = $91 ? $7 : $97;
      $98 = HEAP8[$$30>>0]|0;
      $99 = $98 << 24 >> 24;
      $__d$3 = $__d$2;$__gl$0 = $99;$__ig$0 = 0;$__ng$0 = 0;
     }
     while(1) {
      $100 = ($__d$3|0)==($$$0|0);
      if ($100) {
       break;
      }
      $101 = ($__ng$0|0)==($__gl$0|0);
      $102 = HEAP32[$__me>>2]|0;
      if ($101) {
       $103 = (($102) + 4|0);
       HEAP32[$__me>>2] = $103;
       HEAP32[$102>>2] = $__ts;
       $104 = (($__ig$0) + 1)|0;
       $105 = HEAP8[$__grp>>0]|0;
       $106 = $105 & 1;
       $107 = ($106<<24>>24)==(0);
       if ($107) {
        $109 = $105&255;
        $110 = $109 >>> 1;
        $112 = $110;
       } else {
        $108 = HEAP32[$9>>2]|0;
        $112 = $108;
       }
       $111 = ($104>>>0)<($112>>>0);
       if ($111) {
        $113 = HEAP32[$8>>2]|0;
        $$31 = $107 ? $7 : $113;
        $114 = (($$31) + ($104)|0);
        $115 = HEAP8[$114>>0]|0;
        $116 = ($115<<24>>24)==(127);
        if ($116) {
         $124 = $103;$__gl$1 = -1;$__ig$1 = $104;$__ng$1 = 0;
        } else {
         $117 = HEAP32[$8>>2]|0;
         $$32 = $107 ? $7 : $117;
         $118 = (($$32) + ($104)|0);
         $119 = HEAP8[$118>>0]|0;
         $120 = $119 << 24 >> 24;
         $124 = $103;$__gl$1 = $120;$__ig$1 = $104;$__ng$1 = 0;
        }
       } else {
        $124 = $103;$__gl$1 = $__ng$0;$__ig$1 = $104;$__ng$1 = 0;
       }
      } else {
       $124 = $102;$__gl$1 = $__gl$0;$__ig$1 = $__ig$0;$__ng$1 = $__ng$0;
      }
      $121 = (($__d$3) + -4|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = (($124) + 4|0);
      HEAP32[$__me>>2] = $123;
      HEAP32[$124>>2] = $122;
      $125 = (($__ng$1) + 1)|0;
      $__d$3 = $121;$__gl$0 = $__gl$1;$__ig$0 = $__ig$1;$__ng$0 = $125;
     }
     $$pre = HEAP32[$__me>>2]|0;
     $127 = $$pre;
    }
    $126 = ($54|0)==($127|0);
    if ($126) {
     $$2 = $$$0;
    } else {
     $$0$i$i4 = $127;$$01$i$i = $54;
     while(1) {
      $128 = (($$0$i$i4) + -4|0);
      $129 = ($$01$i$i>>>0)<($128>>>0);
      if (!($129)) {
       $$2 = $$$0;
       break L4;
      }
      $130 = HEAP32[$$01$i$i>>2]|0;
      $131 = HEAP32[$128>>2]|0;
      HEAP32[$$01$i$i>>2] = $131;
      HEAP32[$128>>2] = $130;
      $132 = (($$01$i$i) + 4|0);
      $$0$i$i4 = $128;$$01$i$i = $132;
     }
    }
    break;
   }
   case 1:  {
    $14 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $14;
    $15 = HEAP32[$__ct>>2]|0;
    $16 = (($15) + 44|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (FUNCTION_TABLE_iii[$17 & 15]($__ct,32)|0);
    $19 = HEAP32[$__me>>2]|0;
    $20 = (($19) + 4|0);
    HEAP32[$__me>>2] = $20;
    HEAP32[$19>>2] = $18;
    $$2 = $$0;
    break;
   }
   case 0:  {
    $13 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $13;
    $$2 = $$0;
    break;
   }
   case 3:  {
    $21 = HEAP8[$__sn>>0]|0;
    $22 = $21 & 1;
    $23 = ($22<<24>>24)==(0);
    if ($23) {
     $25 = $21&255;
     $26 = $25 >>> 1;
     $27 = $26;
    } else {
     $24 = HEAP32[$0>>2]|0;
     $27 = $24;
    }
    $28 = ($27|0)==(0);
    if ($28) {
     $$2 = $$0;
    } else {
     $29 = HEAP32[$1>>2]|0;
     $$ = $23 ? $0 : $29;
     $30 = HEAP32[$$>>2]|0;
     $31 = HEAP32[$__me>>2]|0;
     $32 = (($31) + 4|0);
     HEAP32[$__me>>2] = $32;
     HEAP32[$31>>2] = $30;
     $$2 = $$0;
    }
    break;
   }
   case 2:  {
    $33 = HEAP8[$__sym>>0]|0;
    $34 = $33 & 1;
    $35 = ($34<<24>>24)==(0);
    if ($35) {
     $37 = $33&255;
     $38 = $37 >>> 1;
     $39 = $38;
    } else {
     $36 = HEAP32[$4>>2]|0;
     $39 = $36;
    }
    $40 = ($39|0)==(0);
    $or$cond3 = $3 | $40;
    if ($or$cond3) {
     $$2 = $$0;
    } else {
     if ($35) {
      $43 = $33&255;
      $44 = $43 >>> 1;
      $46 = $4;$47 = $44;
     } else {
      $41 = HEAP32[$5>>2]|0;
      $42 = HEAP32[$4>>2]|0;
      $46 = $41;$47 = $42;
     }
     $45 = (($46) + ($47<<2)|0);
     $48 = HEAP32[$__me>>2]|0;
     $$0$i$i9 = $48;$49 = $46;
     while(1) {
      $50 = ($49|0)==($45|0);
      if ($50) {
       break;
      }
      $51 = HEAP32[$49>>2]|0;
      HEAP32[$$0$i$i9>>2] = $51;
      $52 = (($49) + 4|0);
      $53 = (($$0$i$i9) + 4|0);
      $$0$i$i9 = $53;$49 = $52;
     }
     $scevgep$i10 = (($48) + ($47<<2)|0);
     HEAP32[$__me>>2] = $scevgep$i10;
     $$2 = $$0;
    }
    break;
   }
   default: {
    $$2 = $$0;
   }
   }
  } while(0);
  $133 = (($__p$0) + 1)|0;
  $$0 = $$2;$__p$0 = $133;
 }
 $134 = HEAP8[$__sn>>0]|0;
 $135 = $134 & 1;
 $136 = ($135<<24>>24)==(0);
 if ($136) {
  $138 = $134&255;
  $139 = $138 >>> 1;
  $140 = $139;
 } else {
  $137 = HEAP32[$0>>2]|0;
  $140 = $137;
 }
 $141 = ($140>>>0)>(1);
 if ($141) {
  if ($136) {
   $144 = $134&255;
   $145 = $144 >>> 1;
   $$pn = $0;$148 = $145;
  } else {
   $142 = HEAP32[$1>>2]|0;
   $143 = HEAP32[$0>>2]|0;
   $$pn = $142;$148 = $143;
  }
  $146 = (($$pn) + 4|0);
  $147 = (($$pn) + ($148<<2)|0);
  $149 = HEAP32[$__me>>2]|0;
  $150 = $146;
  $151 = $147;
  $152 = (($151) - ($150))|0;
  $$0$i$i = $149;$153 = $146;$157 = $$pn;
  while(1) {
   $154 = ($153|0)==($147|0);
   if ($154) {
    break;
   }
   $155 = HEAP32[$153>>2]|0;
   HEAP32[$$0$i$i>>2] = $155;
   $156 = (($157) + 8|0);
   $158 = (($$0$i$i) + 4|0);
   $157$phi = $153;$$0$i$i = $158;$153 = $156;$157 = $157$phi;
  }
  $159 = $152 >>> 2;
  $scevgep$i = (($149) + ($159<<2)|0);
  HEAP32[$__me>>2] = $scevgep$i;
 }
 $160 = $__flags & 176;
 if ((($160|0) == 32)) {
  $161 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $161;
 } else if (!((($160|0) == 16))) {
  HEAP32[$__mi>>2] = $__mb;
 }
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$byval_copy = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__i$0$i$i = 0, $__i$0$i$i1 = 0, $__i$0$i$i3 = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0;
 var $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $exitcond$i$i = 0, $exitcond$i$i2 = 0, $exitcond$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0;
 $$byval_copy = sp + 468|0;
 $__loc = sp + 464|0;
 $__pat = sp + 472|0;
 $__dp = sp + 460|0;
 $__ts = sp + 456|0;
 $__grp = sp + 444|0;
 $__sym = sp + 432|0;
 $__sn = sp + 420|0;
 $__fd = sp + 416|0;
 $__mbuf = sp + 16|0;
 $__mi = sp + 8|0;
 $__me = sp + 4|0;
 $0 = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6696)|0);
 $2 = HEAP8[$__digits>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = $2&255;
  $8 = $7 >>> 1;
  $9 = $8;
 } else {
  $5 = (($__digits) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $9 = $6;
 }
 $10 = ($9|0)==(0);
 if ($10) {
  $27 = 0;
 } else {
  if ($4) {
   $13 = (($__digits) + 4|0);
   $15 = $13;
  } else {
   $11 = (($__digits) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $15 = $12;
  }
  $14 = HEAP32[$15>>2]|0;
  $16 = HEAP32[$1>>2]|0;
  $17 = (($16) + 44|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (FUNCTION_TABLE_iii[$18 & 15]($1,45)|0);
  $20 = ($14|0)==($19|0);
  $27 = $20;
 }
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $21 = (($__grp) + ($__i$0$i$i<<2)|0);
  HEAP32[$21>>2] = 0;
  $22 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $22;
 }
 $__i$0$i$i1 = 0;
 while(1) {
  $exitcond$i$i2 = ($__i$0$i$i1|0)==(3);
  if ($exitcond$i$i2) {
   break;
  }
  $23 = (($__sym) + ($__i$0$i$i1<<2)|0);
  HEAP32[$23>>2] = 0;
  $24 = (($__i$0$i$i1) + 1)|0;
  $__i$0$i$i1 = $24;
 }
 $__i$0$i$i3 = 0;
 while(1) {
  $exitcond$i$i4 = ($__i$0$i$i3|0)==(3);
  if ($exitcond$i$i4) {
   break;
  }
  $25 = (($__sn) + ($__i$0$i$i3<<2)|0);
  HEAP32[$25>>2] = 0;
  $26 = (($__i$0$i$i3) + 1)|0;
  $__i$0$i$i3 = $26;
 }
 __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$27,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd);
 $28 = HEAP8[$__digits>>0]|0;
 $29 = $28 & 1;
 $30 = ($29<<24>>24)==(0);
 if ($30) {
  $33 = $28&255;
  $34 = $33 >>> 1;
  $36 = $34;
 } else {
  $31 = (($__digits) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $36 = $32;
 }
 $35 = HEAP32[$__fd>>2]|0;
 $37 = ($36|0)>($35|0);
 if ($37) {
  if ($30) {
   $40 = $28&255;
   $41 = $40 >>> 1;
   $43 = $41;
  } else {
   $38 = (($__digits) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $43 = $39;
  }
  $42 = (($43) - ($35))|0;
  $44 = $42 << 1;
  $45 = HEAP8[$__sn>>0]|0;
  $46 = $45 & 1;
  $47 = ($46<<24>>24)==(0);
  if ($47) {
   $50 = $45&255;
   $51 = $50 >>> 1;
   $61 = $51;
  } else {
   $48 = (($__sn) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   $61 = $49;
  }
  $52 = HEAP8[$__sym>>0]|0;
  $53 = $52 & 1;
  $54 = ($53<<24>>24)==(0);
  if ($54) {
   $57 = $52&255;
   $58 = $57 >>> 1;
   $63 = $58;
  } else {
   $55 = (($__sym) + 4|0);
   $56 = HEAP32[$55>>2]|0;
   $63 = $56;
  }
  $59 = $44 | 1;
  $60 = (($61) + ($59))|0;
  $62 = (($60) + ($63))|0;
  $$pn = $62;
 } else {
  $64 = HEAP8[$__sn>>0]|0;
  $65 = $64 & 1;
  $66 = ($65<<24>>24)==(0);
  if ($66) {
   $69 = $64&255;
   $70 = $69 >>> 1;
   $79 = $70;
  } else {
   $67 = (($__sn) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $79 = $68;
  }
  $71 = HEAP8[$__sym>>0]|0;
  $72 = $71 & 1;
  $73 = ($72<<24>>24)==(0);
  if ($73) {
   $76 = $71&255;
   $77 = $76 >>> 1;
   $81 = $77;
  } else {
   $74 = (($__sym) + 4|0);
   $75 = HEAP32[$74>>2]|0;
   $81 = $75;
  }
  $78 = (($79) + 2)|0;
  $80 = (($78) + ($81))|0;
  $$pn = $80;
 }
 $82 = (($$pn) + ($35))|0;
 $83 = ($82>>>0)>(100);
 if ($83) {
  $84 = $82 << 2;
  $85 = (_malloc($84)|0);
  $86 = ($85|0)==(0|0);
  if ($86) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $106 = $85;$__mb$0 = $85;
  }
 } else {
  $106 = 0;$__mb$0 = $__mbuf;
 }
 $87 = (($__iob) + 4|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = $28 & 1;
 $90 = ($89<<24>>24)==(0);
 if ($90) {
  $95 = (($__digits) + 4|0);
  $96 = $28&255;
  $97 = $96 >>> 1;
  $100 = $97;$99 = $95;
 } else {
  $91 = (($__digits) + 8|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (($__digits) + 4|0);
  $94 = HEAP32[$93>>2]|0;
  $100 = $94;$99 = $92;
 }
 $98 = (($99) + ($100<<2)|0);
 $101 = HEAP32[$__dp>>2]|0;
 $102 = HEAP32[$__ts>>2]|0;
 __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb$0,$__mi,$__me,$88,$99,$98,$1,$27,$__pat,$101,$102,$__grp,$__sym,$__sn,$35);
 $103 = HEAP32[$__s>>2]|0;
 HEAP32[$0>>2] = $103;
 $104 = HEAP32[$__mi>>2]|0;
 $105 = HEAP32[$__me>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__mb$0,$104,$105,$__iob,$__fl);
 $107 = ($106|0)==(0|0);
 if (!($107)) {
  _free($106);
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grp);
 $108 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($108)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIcED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 return ($$|0);
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$0$i = 0, $$0$i4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__i$0$i$i = 0, $__i$0$i$i1 = 0, $__ndflt = 0, $exitcond$i$i = 0, $exitcond$i$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__ndflt = sp;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($__ndflt) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__dflt>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $9 = (($__dflt) + 1|0);
  $10 = (($__dflt) + 1|0);
  $11 = $2&255;
  $12 = $11 >>> 1;
  $14 = $10;$15 = $12;$38 = $9;
 } else {
  $5 = (($__dflt) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($__dflt) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $14 = $6;$15 = $8;$38 = $6;
 }
 $13 = (($14) + ($15)|0);
 $$0$i4 = $38;
 while(1) {
  $16 = ($$0$i4>>>0)<($13>>>0);
  if (!($16)) {
   break;
  }
  $17 = HEAP8[$$0$i4>>0]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt,$17);
  $18 = (($$0$i4) + 1|0);
  $$0$i4 = $18;
 }
 $19 = ($__c|0)==(-1);
 $20 = $__c << 1;
 $21 = $20;
 $22 = $19 ? (-1) : $21;
 $23 = HEAP8[$__ndflt>>0]|0;
 $24 = $23 & 1;
 $25 = ($24<<24>>24)==(0);
 if ($25) {
  $28 = (($__ndflt) + 1|0);
  $29 = $28;
 } else {
  $26 = (($__ndflt) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $29 = $27;
 }
 $30 = (_catgets(($22|0),($__set|0),($__msgid|0),($29|0))|0);
 $__i$0$i$i1 = 0;
 while(1) {
  $exitcond$i$i2 = ($__i$0$i$i1|0)==(3);
  if ($exitcond$i$i2) {
   break;
  }
  $31 = (($agg$result) + ($__i$0$i$i1<<2)|0);
  HEAP32[$31>>2] = 0;
  $32 = (($__i$0$i$i1) + 1)|0;
  $__i$0$i$i1 = $32;
 }
 $33 = (_strlen(($30|0))|0);
 $34 = (($30) + ($33)|0);
 $$0$i = $30;
 while(1) {
  $35 = ($$0$i>>>0)<($34>>>0);
  if (!($35)) {
   break;
  }
  $36 = HEAP8[$$0$i>>0]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg$result,$36);
  $37 = (($$0$i) + 1|0);
  $$0$i = $37;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 return;
}
function __ZNSt3__18messagesIwED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 return ($$|0);
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$0$i = 0, $$0$i8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $__bn$i6 = 0, $__buf$i5 = 0, $__i$0$i$i = 0, $__i$0$i$i1 = 0, $__mb$i4 = 0, $__ndflt = 0, $__p$0$i = 0, $__p$0$i10 = 0, $__r$0$i = 0, $__r$0$i7 = 0, $__wn$i = 0;
 var $exitcond$i$i = 0, $exitcond$i$i2 = 0, $or$cond$i = 0, $or$cond$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $__mb$i4 = sp + 168|0;
 $__buf$i5 = sp + 40|0;
 $__bn$i6 = sp + 32|0;
 $__wn$i = sp + 28|0;
 $__ndflt = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($__ndflt) + ($__i$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $3;
 }
 $4 = (($0) + 4|0);
 HEAP32[$4>>2] = 0;
 HEAP32[$0>>2] = ((8328 + 8|0));
 $5 = HEAP8[$__dflt>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $12 = (($__dflt) + 4|0);
  $13 = (($__dflt) + 4|0);
  $14 = $5&255;
  $15 = $14 >>> 1;
  $17 = $13;$18 = $15;$66 = $12;
 } else {
  $8 = (($__dflt) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($__dflt) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $17 = $9;$18 = $11;$66 = $9;
 }
 $16 = (($17) + ($18<<2)|0);
 $19 = (($__buf$i5) + 32|0);
 $$0$i8 = $66;$__r$0$i7 = 0;
 while(1) {
  $20 = ($$0$i8>>>0)<($16>>>0);
  $21 = ($__r$0$i7|0)!=(2);
  $or$cond$i9 = $21 & $20;
  if (!($or$cond$i9)) {
   break;
  }
  HEAP32[$__wn$i>>2] = $$0$i8;
  $22 = HEAP32[$0>>2]|0;
  $23 = (($22) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (FUNCTION_TABLE_iiiiiiiii[$24 & 15]($0,$__mb$i4,$$0$i8,$16,$__wn$i,$__buf$i5,$19,$__bn$i6)|0);
  $__p$0$i10 = $__buf$i5;
  while(1) {
   $26 = HEAP32[$__bn$i6>>2]|0;
   $27 = ($__p$0$i10>>>0)<($26>>>0);
   if (!($27)) {
    break;
   }
   $28 = HEAP8[$__p$0$i10>>0]|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt,$28);
   $29 = (($__p$0$i10) + 1|0);
   $__p$0$i10 = $29;
  }
  $30 = HEAP32[$__wn$i>>2]|0;
  $$0$i8 = $30;$__r$0$i7 = $25;
 }
 $31 = ($__c|0)==(-1);
 $32 = $__c << 1;
 $33 = $32;
 $34 = $31 ? (-1) : $33;
 $35 = HEAP8[$__ndflt>>0]|0;
 $36 = $35 & 1;
 $37 = ($36<<24>>24)==(0);
 if ($37) {
  $40 = (($__ndflt) + 1|0);
  $41 = $40;
 } else {
  $38 = (($__ndflt) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $41 = $39;
 }
 $42 = (_catgets(($34|0),($__set|0),($__msgid|0),($41|0))|0);
 $__i$0$i$i1 = 0;
 while(1) {
  $exitcond$i$i2 = ($__i$0$i$i1|0)==(3);
  if ($exitcond$i$i2) {
   break;
  }
  $43 = (($agg$result) + ($__i$0$i$i1<<2)|0);
  HEAP32[$43>>2] = 0;
  $44 = (($__i$0$i$i1) + 1)|0;
  $__i$0$i$i1 = $44;
 }
 $45 = (($1) + 4|0);
 HEAP32[$45>>2] = 0;
 HEAP32[$1>>2] = ((8432 + 8|0));
 $46 = (_strlen(($42|0))|0);
 $47 = (($42) + ($46)|0);
 $48 = $47;
 $49 = (($__buf$i5) + 128|0);
 $$0$i = $42;$__r$0$i = 0;
 while(1) {
  $50 = ($$0$i>>>0)<($47>>>0);
  $51 = ($__r$0$i|0)!=(2);
  $or$cond$i = $51 & $50;
  if (!($or$cond$i)) {
   break;
  }
  HEAP32[$__wn$i>>2] = $$0$i;
  $52 = HEAP32[$1>>2]|0;
  $53 = (($52) + 16|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $$0$i;
  $56 = (($48) - ($55))|0;
  $57 = ($56|0)>(32);
  $58 = (($$0$i) + 32|0);
  $59 = $57 ? $58 : $47;
  $60 = (FUNCTION_TABLE_iiiiiiiii[$54 & 15]($1,$__mb$i4,$$0$i,$59,$__wn$i,$__buf$i5,$49,$__bn$i6)|0);
  $__p$0$i = $__buf$i5;
  while(1) {
   $61 = HEAP32[$__bn$i6>>2]|0;
   $62 = ($__p$0$i>>>0)<($61>>>0);
   if (!($62)) {
    break;
   }
   $63 = HEAP32[$__p$0$i>>2]|0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($agg$result,$63);
   $64 = (($__p$0$i) + 4|0);
   $__p$0$i = $64;
  }
  $65 = HEAP32[$__wn$i>>2]|0;
  $$0$i = $65;$__r$0$i = $60;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__ndflt);
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 return;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((6408|0),(6432|0),303,(6520|0));
 // unreachable;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((6544|0),(6432|0),314,(6568|0));
 // unreachable;
}
function __ZNSt3__16locale5__impC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((6616 + 8|0));
 $2 = (($this) + 8|0);
 __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($2,28);
 $3 = (($this) + 144|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($3,6608,1);
 $4 = HEAP32[$2>>2]|0;
 $5 = (($this) + 12|0);
 $$pre$i$i$i = HEAP32[$5>>2]|0;
 $6 = $$pre$i$i$i;
 while(1) {
  $7 = ($6|0)==($4|0);
  if ($7) {
   break;
  }
  $8 = (($6) + -4|0);
  HEAP32[$5>>2] = $8;
  $6 = $8;
 }
 HEAP32[((11488 + 4|0))>>2] = 0;
 HEAP32[11488>>2] = ((4904 + 8|0));
 __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_($this,11488);
 HEAP32[((11480 + 4|0))>>2] = 0;
 HEAP32[11480>>2] = ((4944 + 8|0));
 __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_($this,11480);
 __ZNSt3__15ctypeIcEC2EPKtbj(11464,0,0,1);
 __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_($this,11464);
 HEAP32[((11456 + 4|0))>>2] = 0;
 HEAP32[11456>>2] = ((7648 + 8|0));
 __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_($this,11456);
 HEAP32[((11448 + 4|0))>>2] = 0;
 HEAP32[11448>>2] = ((7864 + 8|0));
 __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this,11448);
 HEAP32[((11432 + 4|0))>>2] = 0;
 HEAP32[11432>>2] = ((6784 + 8|0));
 $9 = (__ZNSt3__16__clocEv()|0);
 HEAP32[((11432 + 8|0))>>2] = $9;
 __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this,11432);
 HEAP32[((11424 + 4|0))>>2] = 0;
 HEAP32[11424>>2] = ((8088 + 8|0));
 __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this,11424);
 HEAP32[((11416 + 4|0))>>2] = 0;
 HEAP32[11416>>2] = ((8208 + 8|0));
 __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this,11416);
 __ZNSt3__18numpunctIcEC2Ej(11392,1);
 __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_($this,11392);
 __ZNSt3__18numpunctIwEC2Ej(11360,1);
 __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_($this,11360);
 HEAP32[((11352 + 4|0))>>2] = 0;
 HEAP32[11352>>2] = ((4984 + 8|0));
 __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,11352);
 HEAP32[((11344 + 4|0))>>2] = 0;
 HEAP32[11344>>2] = ((5104 + 8|0));
 __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,11344);
 HEAP32[((11336 + 4|0))>>2] = 0;
 HEAP32[11336>>2] = ((5176 + 8|0));
 __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,11336);
 HEAP32[((11328 + 4|0))>>2] = 0;
 HEAP32[11328>>2] = ((5272 + 8|0));
 __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,11328);
 HEAP32[((11320 + 4|0))>>2] = 0;
 HEAP32[11320>>2] = ((5864 + 8|0));
 __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this,11320);
 HEAP32[((11312 + 4|0))>>2] = 0;
 HEAP32[11312>>2] = ((5928 + 8|0));
 __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this,11312);
 HEAP32[((11304 + 4|0))>>2] = 0;
 HEAP32[11304>>2] = ((5992 + 8|0));
 __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this,11304);
 HEAP32[((11296 + 4|0))>>2] = 0;
 HEAP32[11296>>2] = ((6056 + 8|0));
 __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this,11296);
 HEAP32[((11288 + 4|0))>>2] = 0;
 HEAP32[11288>>2] = ((6120 + 8|0));
 __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,11288);
 HEAP32[((11280 + 4|0))>>2] = 0;
 HEAP32[11280>>2] = ((6184 + 8|0));
 __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,11280);
 HEAP32[((11272 + 4|0))>>2] = 0;
 HEAP32[11272>>2] = ((6240 + 8|0));
 __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,11272);
 HEAP32[((11264 + 4|0))>>2] = 0;
 HEAP32[11264>>2] = ((6288 + 8|0));
 __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,11264);
 HEAP32[((11248 + 4|0))>>2] = 0;
 HEAP32[11248>>2] = ((5352 + 8|0));
 HEAP32[((11248 + 8|0))>>2] = ((5352 + 56|0));
 __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,11248);
 HEAP32[((11232 + 4|0))>>2] = 0;
 HEAP32[11232>>2] = ((5504 + 8|0));
 HEAP32[((11232 + 8|0))>>2] = ((5504 + 56|0));
 __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,11232);
 HEAP32[((11216 + 4|0))>>2] = 0;
 HEAP32[11216>>2] = ((7584 + 8|0));
 $10 = (__ZNSt3__16__clocEv()|0);
 HEAP32[((11216 + 8|0))>>2] = $10;
 HEAP32[11216>>2] = ((5800 + 8|0));
 __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,11216);
 HEAP32[((11200 + 4|0))>>2] = 0;
 HEAP32[11200>>2] = ((7584 + 8|0));
 $11 = (__ZNSt3__16__clocEv()|0);
 HEAP32[((11200 + 8|0))>>2] = $11;
 HEAP32[11200>>2] = ((5832 + 8|0));
 __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,11200);
 HEAP32[((11192 + 4|0))>>2] = 0;
 HEAP32[11192>>2] = ((6328 + 8|0));
 __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_($this,11192);
 HEAP32[((11184 + 4|0))>>2] = 0;
 HEAP32[11184>>2] = ((6368 + 8|0));
 __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_($this,11184);
 return;
}
function __ZNSt3__16locale7classicEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6656>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((6656|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   (__ZNSt3__16locale5__imp12make_classicEv()|0);
   HEAP32[6648>>2] = 6640;
   ___cxa_guard_release((6656|0));
  }
 }
 $4 = HEAP32[6648>>2]|0;
 return ($4|0);
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id) {
 $this = $this|0;
 $f = $f|0;
 $id = $id|0;
 var $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__shared_count12__add_sharedEv($f);
 $0 = (($this) + 8|0);
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($id>>>0);
 if ($8) {
  $11 = $3;
 } else {
  $9 = (($id) + 1)|0;
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($0,$9);
  $$pre = HEAP32[$0>>2]|0;
  $11 = $$pre;
 }
 $10 = (($11) + ($id<<2)|0);
 $12 = HEAP32[$10>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $15 = $11;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
  $$pre1 = HEAP32[$0>>2]|0;
  $15 = $$pre1;
 }
 $14 = (($15) + ($id<<2)|0);
 HEAP32[$14>>2] = $f;
 return;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6616 + 8|0));
 $0 = (($this) + 8|0);
 $1 = (($this) + 12|0);
 $i$0 = 0;
 while(1) {
  $2 = HEAP32[$1>>2]|0;
  $3 = HEAP32[$0>>2]|0;
  $4 = $2;
  $5 = $3;
  $6 = (($4) - ($5))|0;
  $7 = $6 >> 2;
  $8 = ($i$0>>>0)<($7>>>0);
  if (!($8)) {
   break;
  }
  $9 = (($3) + ($i$0<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   (__ZNSt3__114__shared_count16__release_sharedEv($10)|0);
  }
  $12 = (($i$0) + 1)|0;
  $i$0 = $12;
 }
 $13 = (($this) + 144|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0);
 return;
}
function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__16locale5__imp12make_classicEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impC2Ej(11024,1);
 HEAP32[6640>>2] = 11024;
 return (6640|0);
}
function __ZNSt3__16locale5__imp11make_globalEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale7classicEv()|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[6664>>2] = $1;
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 return (6664|0);
}
function __ZNSt3__16locale8__globalEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6680>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((6680|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   (__ZNSt3__16locale5__imp11make_globalEv()|0);
   HEAP32[6672>>2] = 6664;
   ___cxa_guard_release((6680|0));
  }
 }
 $4 = HEAP32[6672>>2]|0;
 return ($4|0);
}
function __ZNSt3__16localeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale8__globalEv()|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$this>>2] = $1;
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 return;
}
function __ZNSt3__16localeC2ERKS0_($this,$l) {
 $this = $this|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l>>2]|0;
 HEAP32[$this>>2] = $0;
 __ZNSt3__114__shared_count12__add_sharedEv($0);
 return;
}
function __ZNSt3__16localeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 return;
}
function __ZNSt3__16locale2id5__getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__p$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p$i = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(-1);
 if (!($1)) {
  HEAP32[$__p$i>>2] = $this;
  $2 = (($__p$i) + 4|0);
  HEAP32[$2>>2] = (108);
  $3 = (($__p$i) + 8|0);
  HEAP32[$3>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($this,$__p$i,109);
 }
 $4 = (($this) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (__ZNSt3__16locale2id5__getEv($x)|0);
 $2 = (($0) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 return ($5|0);
}
function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$this>>2]|0;
  $2 = (($1) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  FUNCTION_TABLE_vi[$3 & 127]($this);
 }
 return;
}
function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6688>>2]|0;HEAP32[6688>>2] = (($0+1)|0);
 $1 = (($0) + 1)|0;
 $2 = (($this) + 4|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c) {
 $this = $this|0;
 $m = $m|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if ($isascii) {
  $0 = (___ctype_b_loc()|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = (($1) + ($c<<1)|0);
  $3 = HEAP16[$2>>1]|0;
  $4 = $3 & $m;
  $5 = ($4<<16>>16)!=(0);
  $6 = $5;
 } else {
  $6 = 0;
 }
 return ($6|0);
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $vec = $vec|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $low3 = $low;
 $0 = $high;
 $1 = (($0) - ($low3))|0;
 $2 = $1 >>> 2;
 $$0 = $vec;$$01 = $low;
 while(1) {
  $3 = ($$01|0)==($high|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$$01>>2]|0;
  $isascii = ($4>>>0)<(128);
  if ($isascii) {
   $5 = (___ctype_b_loc()|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (($6) + ($4<<1)|0);
   $8 = HEAP16[$7>>1]|0;
   $9 = $8&65535;
   $11 = $9;
  } else {
   $11 = 0;
  }
  $10 = $11&65535;
  HEAP16[$$0>>1] = $10;
  $12 = (($$01) + 4|0);
  $13 = (($$0) + 2|0);
  $$0 = $13;$$01 = $12;
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0 = 0, $$0$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $low;
 while(1) {
  $0 = ($$0|0)==($high|0);
  if ($0) {
   $$0$lcssa = $high;
   break;
  }
  $1 = HEAP32[$$0>>2]|0;
  $isascii = ($1>>>0)<(128);
  if ($isascii) {
   $2 = (___ctype_b_loc()|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($3) + ($1<<1)|0);
   $5 = HEAP16[$4>>1]|0;
   $6 = $5 & $m;
   $7 = ($6<<16>>16)==(0);
   if (!($7)) {
    $$0$lcssa = $$0;
    break;
   }
  }
  $8 = (($$0) + 4|0);
  $$0 = $8;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0 = 0, $$0$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $low;
 while(1) {
  $0 = ($$0|0)==($high|0);
  if ($0) {
   $$0$lcssa = $high;
   break;
  }
  $1 = HEAP32[$$0>>2]|0;
  $isascii = ($1>>>0)<(128);
  if (!($isascii)) {
   $$0$lcssa = $$0;
   break;
  }
  $2 = (___ctype_b_loc()|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($1<<1)|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = $5 & $m;
  $7 = ($6<<16>>16)==(0);
  if ($7) {
   $$0$lcssa = $$0;
   break;
  }
  $8 = (($$0) + 4|0);
  $$0 = $8;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if ($isascii) {
  $0 = (___ctype_toupper_loc()|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = (($1) + ($c<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3;
 } else {
  $4 = $c;
 }
 return ($4|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low2 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low2 = $low;
 $0 = $high;
 $1 = (($0) - ($low2))|0;
 $2 = $1 >>> 2;
 $$0 = $low;
 while(1) {
  $3 = ($$0|0)==($high|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$$0>>2]|0;
  $isascii = ($4>>>0)<(128);
  if ($isascii) {
   $5 = (___ctype_toupper_loc()|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (($6) + ($4<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $8;
  } else {
   $9 = $4;
  }
  HEAP32[$$0>>2] = $9;
  $10 = (($$0) + 4|0);
  $$0 = $10;
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if ($isascii) {
  $0 = (___ctype_tolower_loc()|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = (($1) + ($c<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3;
 } else {
  $4 = $c;
 }
 return ($4|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low2 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low2 = $low;
 $0 = $high;
 $1 = (($0) - ($low2))|0;
 $2 = $1 >>> 2;
 $$0 = $low;
 while(1) {
  $3 = ($$0|0)==($high|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$$0>>2]|0;
  $isascii = ($4>>>0)<(128);
  if ($isascii) {
   $5 = (___ctype_tolower_loc()|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (($6) + ($4<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $8;
  } else {
   $9 = $4;
  }
  HEAP32[$$0>>2] = $9;
  $10 = (($$0) + 4|0);
  $$0 = $10;
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c << 24 >> 24;
 return ($0|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $dest;$$01 = $low;
 while(1) {
  $0 = ($$01|0)==($high|0);
  if ($0) {
   break;
  }
  $1 = HEAP8[$$01>>0]|0;
  $2 = $1 << 24 >> 24;
  HEAP32[$$0>>2] = $2;
  $3 = (($$01) + 1|0);
  $4 = (($$0) + 4|0);
  $$0 = $4;$$01 = $3;
 }
 return ($high|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $$0 = 0, $0 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 $0 = $c&255;
 $$0 = $isascii ? $0 : $dfault;
 return ($$0|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$0 = 0, $$01 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $low3 = $low;
 $0 = $high;
 $1 = (($0) - ($low3))|0;
 $2 = $1 >>> 2;
 $$0 = $dest;$$01 = $low;
 while(1) {
  $3 = ($$01|0)==($high|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$$01>>2]|0;
  $isascii = ($4>>>0)<(128);
  $5 = $4&255;
  $$dfault = $isascii ? $5 : $dfault;
  HEAP8[$$0>>0] = $$dfault;
  $6 = (($$01) + 4|0);
  $7 = (($$0) + 1|0);
  $$0 = $7;$$01 = $6;
 }
 $scevgep = (($low) + ($2<<2)|0);
 return ($scevgep|0);
}
function __ZNSt3__15ctypeIcEC2EPKtbj($this,$tab,$del,$refs) {
 $this = $this|0;
 $tab = $tab|0;
 $del = $del|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((6712 + 8|0));
 $2 = (($this) + 8|0);
 HEAP32[$2>>2] = $tab;
 $3 = (($this) + 12|0);
 $4 = $del&1;
 HEAP8[$3>>0] = $4;
 $5 = ($tab|0)==(0|0);
 if ($5) {
  $6 = (___ctype_b_loc()|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$2>>2] = $7;
 }
 return;
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6712 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($this) + 12|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   __ZdaPv($1);
  }
 }
 return;
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__15ctypeIcED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if ($isascii1) {
  $0 = $c&255;
  $1 = (___ctype_toupper_loc()|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (($2) + ($0<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4&255;
  $6 = $5;
 } else {
  $6 = $c;
 }
 return ($6|0);
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $low;
 while(1) {
  $0 = ($$0|0)==($high|0);
  if ($0) {
   break;
  }
  $1 = HEAP8[$$0>>0]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   $2 = $1 << 24 >> 24;
   $3 = (___ctype_toupper_loc()|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = (($4) + ($2<<2)|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = $6&255;
   $8 = $7;
  } else {
   $8 = $1;
  }
  HEAP8[$$0>>0] = $8;
  $9 = (($$0) + 1|0);
  $$0 = $9;
 }
 return ($high|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if ($isascii1) {
  $0 = $c << 24 >> 24;
  $1 = (___ctype_tolower_loc()|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (($2) + ($0<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4&255;
  $6 = $5;
 } else {
  $6 = $c;
 }
 return ($6|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $low;
 while(1) {
  $0 = ($$0|0)==($high|0);
  if ($0) {
   break;
  }
  $1 = HEAP8[$$0>>0]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   $2 = $1 << 24 >> 24;
   $3 = (___ctype_tolower_loc()|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = (($4) + ($2<<2)|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = $6&255;
   $8 = $7;
  } else {
   $8 = $1;
  }
  HEAP8[$$0>>0] = $8;
  $9 = (($$0) + 1|0);
  $$0 = $9;
 }
 return ($high|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($c|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $dest;$$01 = $low;
 while(1) {
  $0 = ($$01|0)==($high|0);
  if ($0) {
   break;
  }
  $1 = HEAP8[$$01>>0]|0;
  HEAP8[$$0>>0] = $1;
  $2 = (($$01) + 1|0);
  $3 = (($$0) + 1|0);
  $$0 = $3;$$01 = $2;
 }
 return ($high|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $c$dfault = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 $c$dfault = $isascii1 ? $c : $dfault;
 return ($c$dfault|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$0 = 0, $$01 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $dest;$$01 = $low;
 while(1) {
  $0 = ($$01|0)==($high|0);
  if ($0) {
   break;
  }
  $1 = HEAP8[$$01>>0]|0;
  $isascii2 = ($1<<24>>24)>(-1);
  $$dfault = $isascii2 ? $1 : $dfault;
  HEAP8[$$0>>0] = $$dfault;
  $2 = (($$01) + 1|0);
  $3 = (($$0) + 1|0);
  $$0 = $3;$$01 = $2;
 }
 return ($high|0);
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $end = $end|0;
 $mx = $mx|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $end;
 $2 = $frm;
 $3 = (($1) - ($2))|0;
 $4 = ($3>>>0)<($mx>>>0);
 $5 = $4 ? $3 : $mx;
 return ($5|0);
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$01 = 0, $$01$lcssa25 = 0, $$02 = 0, $$02$lcssa22 = 0, $$1 = 0, $$1$lcssa = 0, $$pre = 0, $$pre14 = 0, $$pre15 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $65$phi = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $fend$0 = 0;
 var $fend$0$lcssa = 0, $fend$1 = 0, $fend$2 = 0, $fend$2$lcssa = 0, $n$0 = 0, $not$ = 0, $or$cond = 0, $p$0 = 0, $save_state = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $save_state = sp;
 $tmp = sp + 8|0;
 $fend$0 = $frm;
 while(1) {
  $0 = ($fend$0|0)==($frm_end|0);
  if ($0) {
   $fend$0$lcssa = $frm_end;
   break;
  }
  $1 = HEAP32[$fend$0>>2]|0;
  $2 = ($1|0)==(0);
  if ($2) {
   $fend$0$lcssa = $fend$0;
   break;
  }
  $3 = (($fend$0) + 4|0);
  $fend$0 = $3;
 }
 HEAP32[$to_nxt>>2] = $to;
 HEAP32[$frm_nxt>>2] = $frm;
 $4 = $to_end;
 $5 = (($this) + 8|0);
 $$01 = $frm;$$02 = $to;$fend$1 = $fend$0$lcssa;
 while(1) {
  $6 = ($$01|0)==($frm_end|0);
  $7 = ($$02|0)==($to_end|0);
  $or$cond = $7 | $6;
  if ($or$cond) {
   $66 = $$01;
   label = 31;
   break;
  }
  $8 = $st;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + 4)|0;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = $save_state;
  $15 = $14;
  HEAP32[$15>>2] = $10;
  $16 = (($14) + 4)|0;
  $17 = $16;
  HEAP32[$17>>2] = $13;
  $18 = $fend$1;
  $19 = $$01;
  $20 = (($18) - ($19))|0;
  $21 = $20 >> 2;
  $22 = $$02;
  $23 = (($4) - ($22))|0;
  $24 = HEAP32[$5>>2]|0;
  $25 = (_uselocale(($24|0))|0);
  $26 = (_wcsnrtombs($$02,$frm_nxt,$21,$23,$st)|0);
  $27 = ($25|0)==(0|0);
  if (!($27)) {
   (_uselocale(($25|0))|0);
  }
  if ((($26|0) == 0)) {
   $$0 = 1;
   break;
  } else if ((($26|0) == -1)) {
   $$01$lcssa25 = $$01;$$02$lcssa22 = $$02;
   label = 10;
   break;
  }
  $40 = HEAP32[$to_nxt>>2]|0;
  $41 = (($40) + ($26)|0);
  HEAP32[$to_nxt>>2] = $41;
  $42 = ($41|0)==($to_end|0);
  if ($42) {
   label = 18;
   break;
  }
  $43 = ($fend$1|0)==($frm_end|0);
  if ($43) {
   $$pre14 = HEAP32[$frm_nxt>>2]|0;
   $$01 = $$pre14;$$02 = $41;$fend$1 = $frm_end;
   continue;
  }
  $44 = HEAP32[$5>>2]|0;
  $45 = (_uselocale(($44|0))|0);
  $46 = (_wcrtomb($tmp,0,$st)|0);
  $47 = ($45|0)==(0|0);
  if (!($47)) {
   (_uselocale(($45|0))|0);
  }
  $48 = ($46|0)==(-1);
  if ($48) {
   $$0 = 2;
   break;
  }
  $49 = HEAP32[$to_nxt>>2]|0;
  $50 = $49;
  $51 = (($4) - ($50))|0;
  $52 = ($46>>>0)>($51>>>0);
  if ($52) {
   $$0 = 1;
   break;
  } else {
   $n$0 = $46;$p$0 = $tmp;
  }
  while(1) {
   $53 = ($n$0|0)==(0);
   if ($53) {
    break;
   }
   $54 = (($p$0) + 1|0);
   $55 = HEAP8[$p$0>>0]|0;
   $56 = HEAP32[$to_nxt>>2]|0;
   $57 = (($56) + 1|0);
   HEAP32[$to_nxt>>2] = $57;
   HEAP8[$56>>0] = $55;
   $58 = (($n$0) + -1)|0;
   $n$0 = $58;$p$0 = $54;
  }
  $59 = HEAP32[$frm_nxt>>2]|0;
  $60 = (($59) + 4|0);
  HEAP32[$frm_nxt>>2] = $60;
  $65 = $59;$fend$2 = $60;
  while(1) {
   $61 = ($fend$2|0)==($frm_end|0);
   if ($61) {
    $fend$2$lcssa = $frm_end;
    break;
   }
   $62 = HEAP32[$fend$2>>2]|0;
   $63 = ($62|0)==(0);
   $64 = (($65) + 8|0);
   if ($63) {
    $fend$2$lcssa = $fend$2;
    break;
   } else {
    $65$phi = $fend$2;$fend$2 = $64;$65 = $65$phi;
   }
  }
  $$pre15 = HEAP32[$to_nxt>>2]|0;
  $$01 = $60;$$02 = $$pre15;$fend$1 = $fend$2$lcssa;
 }
 if ((label|0) == 10) {
  HEAP32[$to_nxt>>2] = $$02$lcssa22;
  $$1 = $$01$lcssa25;$33 = $$02$lcssa22;
  while(1) {
   $28 = HEAP32[$frm_nxt>>2]|0;
   $29 = ($$1|0)==($28|0);
   if ($29) {
    $$1$lcssa = $$1;
    break;
   }
   $30 = HEAP32[$$1>>2]|0;
   $31 = HEAP32[$5>>2]|0;
   $32 = (_uselocale(($31|0))|0);
   $34 = (_wcrtomb($33,$30,$save_state)|0);
   $35 = ($32|0)==(0|0);
   if (!($35)) {
    (_uselocale(($32|0))|0);
   }
   $36 = ($34|0)==(-1);
   if ($36) {
    $$1$lcssa = $$1;
    break;
   }
   $37 = HEAP32[$to_nxt>>2]|0;
   $38 = (($37) + ($34)|0);
   HEAP32[$to_nxt>>2] = $38;
   $39 = (($$1) + 4|0);
   $$1 = $39;$33 = $38;
  }
  HEAP32[$frm_nxt>>2] = $$1$lcssa;
  $$0 = 2;
 }
 else if ((label|0) == 18) {
  $$pre = HEAP32[$frm_nxt>>2]|0;
  $66 = $$pre;
  label = 31;
 }
 if ((label|0) == 31) {
  $not$ = ($66|0)!=($frm_end|0);
  $67 = $not$&1;
  $$0 = $67;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$01 = 0, $$01$lcssa39 = 0, $$02 = 0, $$02$lcssa36 = 0, $$1 = 0, $$1$lcssa = 0, $$1$lcssa34 = 0, $$1$lcssa35 = 0, $$2 = 0, $$lcssa = 0, $$pre = 0, $$pre22 = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $58$phi = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $fend$0 = 0, $fend$0$lcssa = 0, $fend$1 = 0, $fend$2 = 0;
 var $fend$2$lcssa = 0, $not$ = 0, $not$3 = 0, $or$cond = 0, $save_state = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $save_state = sp;
 $fend$0 = $frm;
 while(1) {
  $0 = ($fend$0|0)==($frm_end|0);
  if ($0) {
   $fend$0$lcssa = $frm_end;
   break;
  }
  $1 = HEAP8[$fend$0>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $fend$0$lcssa = $fend$0;
   break;
  }
  $3 = (($fend$0) + 1|0);
  $fend$0 = $3;
 }
 HEAP32[$to_nxt>>2] = $to;
 HEAP32[$frm_nxt>>2] = $frm;
 $4 = $to_end;
 $5 = (($this) + 8|0);
 $$01 = $frm;$$02 = $to;$fend$1 = $fend$0$lcssa;
 while(1) {
  $6 = ($$01|0)==($frm_end|0);
  $7 = ($$02|0)==($to_end|0);
  $or$cond = $7 | $6;
  if ($or$cond) {
   $59 = $$01;
   label = 31;
   break;
  }
  $8 = $st;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + 4)|0;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = $save_state;
  $15 = $14;
  HEAP32[$15>>2] = $10;
  $16 = (($14) + 4)|0;
  $17 = $16;
  HEAP32[$17>>2] = $13;
  $18 = $fend$1;
  $19 = $$01;
  $20 = (($18) - ($19))|0;
  $21 = $$02;
  $22 = (($4) - ($21))|0;
  $23 = $22 >> 2;
  $24 = HEAP32[$5>>2]|0;
  $25 = (_uselocale(($24|0))|0);
  $26 = (_mbsnrtowcs($$02,$frm_nxt,$20,$23,$st)|0);
  $27 = ($25|0)==(0|0);
  if (!($27)) {
   (_uselocale(($25|0))|0);
  }
  if ((($26|0) == 0)) {
   $$0 = 2;
   break;
  } else if ((($26|0) == -1)) {
   $$01$lcssa39 = $$01;$$02$lcssa36 = $$02;$$lcssa = $18;
   label = 10;
   break;
  }
  $41 = HEAP32[$to_nxt>>2]|0;
  $42 = (($41) + ($26<<2)|0);
  HEAP32[$to_nxt>>2] = $42;
  $43 = ($42|0)==($to_end|0);
  if ($43) {
   label = 22;
   break;
  }
  $44 = ($fend$1|0)==($frm_end|0);
  $$pre22 = HEAP32[$frm_nxt>>2]|0;
  if ($44) {
   $$01 = $$pre22;$$02 = $42;$fend$1 = $frm_end;
   continue;
  }
  $45 = HEAP32[$5>>2]|0;
  $46 = (_uselocale(($45|0))|0);
  $47 = (_mbrtowc($42,$$pre22,1,$st)|0);
  $48 = ($46|0)==(0|0);
  if (!($48)) {
   (_uselocale(($46|0))|0);
  }
  $49 = ($47|0)==(0);
  if (!($49)) {
   $$0 = 2;
   break;
  }
  $50 = HEAP32[$to_nxt>>2]|0;
  $51 = (($50) + 4|0);
  HEAP32[$to_nxt>>2] = $51;
  $52 = HEAP32[$frm_nxt>>2]|0;
  $53 = (($52) + 1|0);
  HEAP32[$frm_nxt>>2] = $53;
  $58 = $52;$fend$2 = $53;
  while(1) {
   $54 = ($fend$2|0)==($frm_end|0);
   if ($54) {
    $fend$2$lcssa = $frm_end;
    break;
   }
   $55 = HEAP8[$fend$2>>0]|0;
   $56 = ($55<<24>>24)==(0);
   $57 = (($58) + 2|0);
   if ($56) {
    $fend$2$lcssa = $fend$2;
    break;
   } else {
    $58$phi = $fend$2;$fend$2 = $57;$58 = $58$phi;
   }
  }
  $$pre23 = HEAP32[$to_nxt>>2]|0;
  $$01 = $53;$$02 = $$pre23;$fend$1 = $fend$2$lcssa;
 }
 do {
  if ((label|0) == 10) {
   $$1 = $$01$lcssa39;$storemerge = $$02$lcssa36;
   while(1) {
    HEAP32[$to_nxt>>2] = $storemerge;
    $28 = HEAP32[$frm_nxt>>2]|0;
    $29 = ($$1|0)==($28|0);
    if ($29) {
     $$1$lcssa = $$1;
     label = 20;
     break;
    }
    $30 = $$1;
    $31 = (($$lcssa) - ($30))|0;
    $32 = HEAP32[$5>>2]|0;
    $33 = (_uselocale(($32|0))|0);
    $34 = (_mbrtowc($storemerge,$$1,$31,$save_state)|0);
    $35 = ($33|0)==(0|0);
    if (!($35)) {
     (_uselocale(($33|0))|0);
    }
    if ((($34|0) == -2)) {
     $$1$lcssa35 = $$1;
     label = 17;
     break;
    } else if ((($34|0) == -1)) {
     $$1$lcssa34 = $$1;
     label = 16;
     break;
    } else if ((($34|0) == 0)) {
     $36 = (($$1) + 1|0);
     $$2 = $36;
    } else {
     $37 = (($$1) + ($34)|0);
     $$2 = $37;
    }
    $38 = HEAP32[$to_nxt>>2]|0;
    $39 = (($38) + 4|0);
    $$1 = $$2;$storemerge = $39;
   }
   if ((label|0) == 16) {
    HEAP32[$frm_nxt>>2] = $$1$lcssa34;
    $$0 = 2;
    break;
   }
   else if ((label|0) == 17) {
    HEAP32[$frm_nxt>>2] = $$1$lcssa35;
    $$0 = 1;
    break;
   }
   else if ((label|0) == 20) {
    HEAP32[$frm_nxt>>2] = $$1$lcssa;
    $not$3 = ($$1$lcssa|0)!=($frm_end|0);
    $40 = $not$3&1;
    $$0 = $40;
    break;
   }
  }
  else if ((label|0) == 22) {
   $$pre = HEAP32[$frm_nxt>>2]|0;
   $59 = $$pre;
   label = 31;
  }
 } while(0);
 if ((label|0) == 31) {
  $not$ = ($59|0)!=($frm_end|0);
  $60 = $not$&1;
  $$0 = $60;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0 = 0, $p$0 = 0;
 var $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tmp = sp;
 HEAP32[$to_nxt>>2] = $to;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_uselocale(($1|0))|0);
 $3 = (_wcrtomb($tmp,0,$st)|0);
 $4 = ($2|0)==(0|0);
 if (!($4)) {
  (_uselocale(($2|0))|0);
 }
 L4: do {
  if ((($3|0) == 0) | (($3|0) == -1)) {
   $$0 = 2;
  } else {
   $5 = (($3) + -1)|0;
   $6 = HEAP32[$to_nxt>>2]|0;
   $7 = $to_end;
   $8 = $6;
   $9 = (($7) - ($8))|0;
   $10 = ($5>>>0)>($9>>>0);
   if ($10) {
    $$0 = 1;
   } else {
    $n$0 = $5;$p$0 = $tmp;
    while(1) {
     $11 = ($n$0|0)==(0);
     if ($11) {
      $$0 = 0;
      break L4;
     }
     $12 = (($p$0) + 1|0);
     $13 = HEAP8[$p$0>>0]|0;
     $14 = HEAP32[$to_nxt>>2]|0;
     $15 = (($14) + 1|0);
     HEAP32[$to_nxt>>2] = $15;
     HEAP8[$14>>0] = $13;
     $16 = (($n$0) + -1)|0;
     $n$0 = $16;$p$0 = $12;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_uselocale(($1|0))|0);
 $3 = (_mbtowc(0,0,4)|0);
 $4 = ($2|0)==(0|0);
 if (!($4)) {
  (_uselocale(($2|0))|0);
 }
 $5 = ($3|0)==(0);
 if ($5) {
  $6 = HEAP32[$0>>2]|0;
  $7 = ($6|0)==(0|0);
  if ($7) {
   $$0 = 1;
  } else {
   $8 = (_uselocale(($6|0))|0);
   $9 = ($8|0)==(0|0);
   if ($9) {
    $$0 = 0;
   } else {
    (_uselocale(($8|0))|0);
    $$0 = 0;
   }
  }
 } else {
  $$0 = -1;
 }
 return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$01 = 0, $$1 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nbytes$0 = 0, $nbytes$0$lcssa = 0, $nbytes$1 = 0, $nwchar_t$0 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $frm_end;
 $1 = (($this) + 8|0);
 $$01 = $frm;$nbytes$0 = 0;$nwchar_t$0 = 0;
 while(1) {
  $2 = ($nwchar_t$0>>>0)>=($mx>>>0);
  $3 = ($$01|0)==($frm_end|0);
  $or$cond = $3 | $2;
  if ($or$cond) {
   $nbytes$0$lcssa = $nbytes$0;
   break;
  }
  $4 = $$01;
  $5 = (($0) - ($4))|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = (_uselocale(($6|0))|0);
  $8 = (_mbrlen($$01,$5,$st)|0);
  $9 = ($7|0)==(0|0);
  if (!($9)) {
   (_uselocale(($7|0))|0);
  }
  if ((($8|0) == -2) | (($8|0) == -1)) {
   $nbytes$0$lcssa = $nbytes$0;
   break;
  } else if ((($8|0) == 0)) {
   $10 = (($$01) + 1|0);
   $$1 = $10;$$pn = 1;
  } else {
   $11 = (($$01) + ($8)|0);
   $$1 = $11;$$pn = $8;
  }
  $nbytes$1 = (($$pn) + ($nbytes$0))|0;
  $12 = (($nwchar_t$0) + 1)|0;
  $$01 = $$1;$nbytes$0 = $nbytes$1;$nwchar_t$0 = $12;
 }
 return ($nbytes$0$lcssa|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $5 = 1;
 } else {
  $3 = (_uselocale(($1|0))|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   $5 = 4;
  } else {
   (_uselocale(($3|0))|0);
   $5 = 4;
  }
 }
 return ($5|0);
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $2;
 $3 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $2;
 $3 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $2;
 $3 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $2 = 0, $3 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 HEAP32[$frm_nxt>>2] = $2;
 $3 = HEAP32[$_to_nxt>>2]|0;
 HEAP32[$to_nxt>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__18numpunctIcEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((6864 + 8|0));
 $2 = (($this) + 8|0);
 HEAP8[$2>>0] = 46;
 $3 = (($this) + 9|0);
 HEAP8[$3>>0] = 44;
 $4 = (($this) + 12|0);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $5 = (($4) + ($__i$0$i$i<<2)|0);
  HEAP32[$5>>2] = 0;
  $6 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $6;
 }
 return;
}
function __ZNSt3__18numpunctIwEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((6904 + 8|0));
 $2 = (($this) + 8|0);
 HEAP32[$2>>2] = 46;
 $3 = (($this) + 12|0);
 HEAP32[$3>>2] = 44;
 $4 = (($this) + 16|0);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $5 = (($4) + ($__i$0$i$i<<2)|0);
  HEAP32[$5>>2] = 0;
  $6 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $6;
 }
 return;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6864 + 8|0));
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIcED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6904 + 8|0));
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIwED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP8[$0>>0]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 9|0);
 $1 = HEAP8[$0>>0]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$0);
 return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$0);
 return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,6944,4);
 return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(6952)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,6952,$0);
 return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,6976,5);
 return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(6984)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,6984,$0);
 return;
}
function __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($iob) {
 $iob = $iob|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 8)) {
  $$0 = 16;
 } else if ((($2|0) == 64)) {
  $$0 = 8;
 } else if ((($2|0) == 0)) {
  $$0 = 0;
 } else {
  $$0 = 10;
 }
 return ($$0|0);
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7016>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((7016|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = HEAP8[14192>>0]|0;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $6 = (___cxa_guard_acquire((14192|0))|0);
    $7 = ($6|0)==(0);
    if (!($7)) {
     $9 = 14024;
     while(1) {
      $__i$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $8 = (($9) + ($__i$0$i$i$i<<2)|0);
       HEAP32[$8>>2] = 0;
       $10 = (($__i$0$i$i$i) + 1)|0;
       $__i$0$i$i$i = $10;
      }
      $11 = (($9) + 12|0);
      $12 = ($11|0)==(((14024 + 168|0))|0);
      if ($12) {
       break;
      } else {
       $9 = $11;
      }
     }
     ___cxa_guard_release((14192|0));
    }
   }
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14024,14200)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((14024 + 12|0)),14208)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((14024 + 24|0)),14216)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((14024 + 36|0)),14224)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((14024 + 48|0)),14240)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((14024 + 60|0)),14256)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((14024 + 72|0)),14264)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((14024 + 84|0)),14280)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((14024 + 96|0)),14288)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((14024 + 108|0)),14296)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((14024 + 120|0)),14304)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((14024 + 132|0)),14312)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((14024 + 144|0)),14320)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((14024 + 156|0)),14328)|0);
   HEAP32[7008>>2] = 14024;
   ___cxa_guard_release((7016|0));
  }
 }
 $13 = HEAP32[7008>>2]|0;
 return ($13|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7032>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((7032|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = HEAP8[13656>>0]|0;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $6 = (___cxa_guard_acquire((13656|0))|0);
    $7 = ($6|0)==(0);
    if (!($7)) {
     $9 = 13488;
     while(1) {
      $__i$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $8 = (($9) + ($__i$0$i$i$i<<2)|0);
       HEAP32[$8>>2] = 0;
       $10 = (($__i$0$i$i$i) + 1)|0;
       $__i$0$i$i$i = $10;
      }
      $11 = (($9) + 12|0);
      $12 = ($11|0)==(((13488 + 168|0))|0);
      if ($12) {
       break;
      } else {
       $9 = $11;
      }
     }
     ___cxa_guard_release((13656|0));
    }
   }
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(13488,13664)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((13488 + 12|0)),13696)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((13488 + 24|0)),13728)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((13488 + 36|0)),13760)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((13488 + 48|0)),13800)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((13488 + 60|0)),13840)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((13488 + 72|0)),13872)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((13488 + 84|0)),13912)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((13488 + 96|0)),13928)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((13488 + 108|0)),13944)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((13488 + 120|0)),13960)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((13488 + 132|0)),13976)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((13488 + 144|0)),13992)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((13488 + 156|0)),14008)|0);
   HEAP32[7024>>2] = 13488;
   ___cxa_guard_release((7032|0));
  }
 }
 $13 = HEAP32[7024>>2]|0;
 return ($13|0);
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7048>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((7048|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = HEAP8[13264>>0]|0;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $6 = (___cxa_guard_acquire((13264|0))|0);
    $7 = ($6|0)==(0);
    if (!($7)) {
     $9 = 12976;
     while(1) {
      $__i$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $8 = (($9) + ($__i$0$i$i$i<<2)|0);
       HEAP32[$8>>2] = 0;
       $10 = (($__i$0$i$i$i) + 1)|0;
       $__i$0$i$i$i = $10;
      }
      $11 = (($9) + 12|0);
      $12 = ($11|0)==(((12976 + 288|0))|0);
      if ($12) {
       break;
      } else {
       $9 = $11;
      }
     }
     ___cxa_guard_release((13264|0));
    }
   }
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12976,13272)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((12976 + 12|0)),13280)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((12976 + 24|0)),13296)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((12976 + 36|0)),13304)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((12976 + 48|0)),13312)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((12976 + 60|0)),13320)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((12976 + 72|0)),13328)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((12976 + 84|0)),13336)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((12976 + 96|0)),13344)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((12976 + 108|0)),13360)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((12976 + 120|0)),13368)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((12976 + 132|0)),13384)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((12976 + 144|0)),13400)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((12976 + 156|0)),13408)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((12976 + 168|0)),13416)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((12976 + 180|0)),13424)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((12976 + 192|0)),13312)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((12976 + 204|0)),13432)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((12976 + 216|0)),13440)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((12976 + 228|0)),13448)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((12976 + 240|0)),13456)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((12976 + 252|0)),13464)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((12976 + 264|0)),13472)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((12976 + 276|0)),13480)|0);
   HEAP32[7040>>2] = 12976;
   ___cxa_guard_release((7048|0));
  }
 }
 $13 = HEAP32[7040>>2]|0;
 return ($13|0);
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7064>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((7064|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = HEAP8[12424>>0]|0;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $6 = (___cxa_guard_acquire((12424|0))|0);
    $7 = ($6|0)==(0);
    if (!($7)) {
     $9 = 12136;
     while(1) {
      $__i$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $8 = (($9) + ($__i$0$i$i$i<<2)|0);
       HEAP32[$8>>2] = 0;
       $10 = (($__i$0$i$i$i) + 1)|0;
       $__i$0$i$i$i = $10;
      }
      $11 = (($9) + 12|0);
      $12 = ($11|0)==(((12136 + 288|0))|0);
      if ($12) {
       break;
      } else {
       $9 = $11;
      }
     }
     ___cxa_guard_release((12424|0));
    }
   }
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(12136,12432)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12136 + 12|0)),12464)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12136 + 24|0)),12504)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12136 + 36|0)),12528)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12136 + 48|0)),12552)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12136 + 60|0)),12568)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12136 + 72|0)),12592)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12136 + 84|0)),12616)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12136 + 96|0)),12648)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12136 + 108|0)),12688)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12136 + 120|0)),12720)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12136 + 132|0)),12760)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12136 + 144|0)),12800)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12136 + 156|0)),12816)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12136 + 168|0)),12832)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12136 + 180|0)),12848)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12136 + 192|0)),12552)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12136 + 204|0)),12864)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12136 + 216|0)),12880)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12136 + 228|0)),12896)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12136 + 240|0)),12912)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12136 + 252|0)),12928)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12136 + 264|0)),12944)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((12136 + 276|0)),12960)|0);
   HEAP32[7056>>2] = 12136;
   ___cxa_guard_release((7064|0));
  }
 }
 $13 = HEAP32[7056>>2]|0;
 return ($13|0);
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7080>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((7080|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = HEAP8[12112>>0]|0;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $6 = (___cxa_guard_acquire((12112|0))|0);
    $7 = ($6|0)==(0);
    if (!($7)) {
     $9 = 11824;
     while(1) {
      $__i$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $8 = (($9) + ($__i$0$i$i$i<<2)|0);
       HEAP32[$8>>2] = 0;
       $10 = (($__i$0$i$i$i) + 1)|0;
       $__i$0$i$i$i = $10;
      }
      $11 = (($9) + 12|0);
      $12 = ($11|0)==(((11824 + 288|0))|0);
      if ($12) {
       break;
      } else {
       $9 = $11;
      }
     }
     ___cxa_guard_release((12112|0));
    }
   }
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11824,12120)|0);
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(((11824 + 12|0)),12128)|0);
   HEAP32[7072>>2] = 11824;
   ___cxa_guard_release((7080|0));
  }
 }
 $13 = HEAP32[7072>>2]|0;
 return ($13|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7096>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((7096|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = HEAP8[11784>>0]|0;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $6 = (___cxa_guard_acquire((11784|0))|0);
    $7 = ($6|0)==(0);
    if (!($7)) {
     $9 = 11496;
     while(1) {
      $__i$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $8 = (($9) + ($__i$0$i$i$i<<2)|0);
       HEAP32[$8>>2] = 0;
       $10 = (($__i$0$i$i$i) + 1)|0;
       $__i$0$i$i$i = $10;
      }
      $11 = (($9) + 12|0);
      $12 = ($11|0)==(((11496 + 288|0))|0);
      if ($12) {
       break;
      } else {
       $9 = $11;
      }
     }
     ___cxa_guard_release((11784|0));
    }
   }
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11496,11792)|0);
   (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(((11496 + 12|0)),11808)|0);
   HEAP32[7088>>2] = 11496;
   ___cxa_guard_release((7096|0));
  }
 }
 $13 = HEAP32[7088>>2]|0;
 return ($13|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7120>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((7120|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(7104,7128,8);
   ___cxa_guard_release((7120|0));
  }
 }
 return (7104|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7160>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((7160|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = (_wcslen(7168)|0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(7144,7168,$4);
   ___cxa_guard_release((7160|0));
  }
 }
 return (7144|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7224>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((7224|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(7208,7232,8);
   ___cxa_guard_release((7224|0));
  }
 }
 return (7208|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7264>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((7264|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = (_wcslen(7272)|0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(7248,7272,$4);
   ___cxa_guard_release((7264|0));
  }
 }
 return (7248|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7328>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((7328|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(7312,7336,20);
   ___cxa_guard_release((7328|0));
  }
 }
 return (7312|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7376>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((7376|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = (_wcslen(7384)|0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(7360,7384,$4);
   ___cxa_guard_release((7376|0));
  }
 }
 return (7360|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7488>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((7488|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(7472,7496,11);
   ___cxa_guard_release((7488|0));
  }
 }
 return (7472|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7528>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((7528|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = (_wcslen(7536)|0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(7512,7536,$4);
   ___cxa_guard_release((7528|0));
  }
 }
 return (7512|0);
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6784 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 $3 = ($1|0)==($2|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  _freelocale(($4|0));
 }
 return;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$021 = 0, $$lcssa = 0, $$lcssa30 = 0, $$pre$i$i$i = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$i2$i$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off0 = 0, $__consume$1$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$0 = 0, $__ky1$0 = 0, $__ky2$0 = 0, $__n_does_match$0 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0;
 var $__n_does_match$3 = 0, $__n_does_match$4 = 0, $__n_does_match$5 = 0, $__n_does_match$6 = 0, $__n_might_match$0 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3 = 0, $__n_might_match$4 = 0, $__st$0 = 0, $__st$1 = 0, $__st$2 = 0, $__st$3 = 0, $__statbuf = 0, $__status$0 = 0, $tmp$i$i10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $157 = $5;$__status$0 = $5;
  }
 } else {
  $157 = 0;$__status$0 = $__statbuf;
 }
 $__ky$0 = $__kb;$__n_does_match$0 = 0;$__n_might_match$0 = $3;$__st$0 = $__status$0;
 while(1) {
  $7 = ($__ky$0|0)==($__ke|0);
  if ($7) {
   $__n_does_match$0$lcssa = $__n_does_match$0;$__n_might_match$0$lcssa = $__n_might_match$0;
   break;
  }
  $8 = HEAP8[$__ky$0>>0]|0;
  $9 = $8 & 1;
  $10 = ($9<<24>>24)==(0);
  if ($10) {
   $13 = $8&255;
   $14 = $13 >>> 1;
   $15 = $14;
  } else {
   $11 = (($__ky$0) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $15 = $12;
  }
  $16 = ($15|0)==(0);
  if ($16) {
   HEAP8[$__st$0>>0] = 2;
   $17 = (($__n_might_match$0) + -1)|0;
   $18 = (($__n_does_match$0) + 1)|0;
   $__n_does_match$1 = $18;$__n_might_match$1 = $17;
  } else {
   HEAP8[$__st$0>>0] = 1;
   $__n_does_match$1 = $__n_does_match$0;$__n_might_match$1 = $__n_might_match$0;
  }
  $19 = (($__ky$0) + 12|0);
  $20 = (($__st$0) + 1|0);
  $__ky$0 = $19;$__n_does_match$0 = $__n_does_match$1;$__n_might_match$0 = $__n_might_match$1;$__st$0 = $20;
 }
 $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
 L17: while(1) {
  $21 = HEAP32[$__b>>2]|0;
  $22 = ($21|0)==(0|0);
  do {
   if ($22) {
    $33 = 0;
   } else {
    $23 = (($21) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (($21) + 16|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($24|0)==($26|0);
    if ($27) {
     $28 = HEAP32[$21>>2]|0;
     $29 = (($28) + 36|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (FUNCTION_TABLE_ii[$30 & 63]($21)|0);
     $32 = ($31|0)==(-1);
     if ($32) {
      HEAP32[$__b>>2] = 0;
      $33 = 0;
      break;
     } else {
      $$pre$i$i$i4 = HEAP32[$__b>>2]|0;
      $33 = $$pre$i$i$i4;
      break;
     }
    } else {
     $33 = $21;
    }
   }
  } while(0);
  $34 = ($33|0)==(0|0);
  $35 = HEAP32[$__e>>2]|0;
  $36 = ($35|0)==(0|0);
  if ($36) {
   $$pre$i2$i$i = 0;
  } else {
   $37 = (($35) + 12|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($35) + 16|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($38|0)==($40|0);
   if ($41) {
    $42 = HEAP32[$35>>2]|0;
    $43 = (($42) + 36|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (FUNCTION_TABLE_ii[$44 & 63]($35)|0);
    $46 = ($45|0)==(-1);
    if ($46) {
     HEAP32[$__e>>2] = 0;
     $$pre$i2$i$i = 0;
    } else {
     $$pre$i2$i$i = $35;
    }
   } else {
    $$pre$i2$i$i = $35;
   }
  }
  $47 = ($$pre$i2$i$i|0)==(0|0);
  $tmp$i$i10 = $34 ^ $47;
  $48 = ($__n_might_match$2|0)!=(0);
  $$ = $48 & $tmp$i$i10;
  $49 = HEAP32[$__b>>2]|0;
  if (!($$)) {
   $$lcssa = $47;$$lcssa30 = $49;$$pre$i2$i$i$lcssa = $$pre$i2$i$i;
   break;
  }
  $50 = (($49) + 12|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + 16|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($51|0)==($53|0);
  if ($54) {
   $55 = HEAP32[$49>>2]|0;
   $56 = (($55) + 36|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (FUNCTION_TABLE_ii[$57 & 63]($49)|0);
   $$0$i$i = $58;
  } else {
   $59 = HEAP8[$51>>0]|0;
   $60 = $59&255;
   $$0$i$i = $60;
  }
  $61 = $$0$i$i&255;
  if ($__case_sensitive) {
   $__c$0 = $61;
  } else {
   $62 = HEAP32[$__ct>>2]|0;
   $63 = (($62) + 12|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (FUNCTION_TABLE_iii[$64 & 15]($__ct,$61)|0);
   $__c$0 = $65;
  }
  $66 = (($__indx$0) + 1)|0;
  $__consume$0$off0 = 0;$__ky1$0 = $__kb;$__n_does_match$3 = $__n_does_match$2;$__n_might_match$3 = $__n_might_match$2;$__st$1 = $__status$0;
  while(1) {
   $67 = ($__ky1$0|0)==($__ke|0);
   if ($67) {
    break;
   }
   $68 = HEAP8[$__st$1>>0]|0;
   $69 = ($68<<24>>24)==(1);
   do {
    if ($69) {
     $70 = HEAP8[$__ky1$0>>0]|0;
     $71 = $70 & 1;
     $72 = ($71<<24>>24)==(0);
     if ($72) {
      $75 = (($__ky1$0) + 1|0);
      $77 = $75;
     } else {
      $73 = (($__ky1$0) + 8|0);
      $74 = HEAP32[$73>>2]|0;
      $77 = $74;
     }
     $76 = (($77) + ($__indx$0)|0);
     $78 = HEAP8[$76>>0]|0;
     if ($__case_sensitive) {
      $__kc$0 = $78;
     } else {
      $79 = HEAP32[$__ct>>2]|0;
      $80 = (($79) + 12|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = (FUNCTION_TABLE_iii[$81 & 15]($__ct,$78)|0);
      $__kc$0 = $82;
     }
     $83 = ($__c$0<<24>>24)==($__kc$0<<24>>24);
     if (!($83)) {
      HEAP8[$__st$1>>0] = 0;
      $95 = (($__n_might_match$3) + -1)|0;
      $__consume$1$off0 = $__consume$0$off0;$__n_does_match$4 = $__n_does_match$3;$__n_might_match$4 = $95;
      break;
     }
     $84 = HEAP8[$__ky1$0>>0]|0;
     $85 = $84 & 1;
     $86 = ($85<<24>>24)==(0);
     if ($86) {
      $89 = $84&255;
      $90 = $89 >>> 1;
      $91 = $90;
     } else {
      $87 = (($__ky1$0) + 4|0);
      $88 = HEAP32[$87>>2]|0;
      $91 = $88;
     }
     $92 = ($91|0)==($66|0);
     if ($92) {
      HEAP8[$__st$1>>0] = 2;
      $93 = (($__n_might_match$3) + -1)|0;
      $94 = (($__n_does_match$3) + 1)|0;
      $__consume$1$off0 = 1;$__n_does_match$4 = $94;$__n_might_match$4 = $93;
     } else {
      $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$3;$__n_might_match$4 = $__n_might_match$3;
     }
    } else {
     $__consume$1$off0 = $__consume$0$off0;$__n_does_match$4 = $__n_does_match$3;$__n_might_match$4 = $__n_might_match$3;
    }
   } while(0);
   $96 = (($__ky1$0) + 12|0);
   $97 = (($__st$1) + 1|0);
   $__consume$0$off0 = $__consume$1$off0;$__ky1$0 = $96;$__n_does_match$3 = $__n_does_match$4;$__n_might_match$3 = $__n_might_match$4;$__st$1 = $97;
  }
  if (!($__consume$0$off0)) {
   $__indx$0 = $66;$__n_does_match$2 = $__n_does_match$3;$__n_might_match$2 = $__n_might_match$3;
   continue;
  }
  $98 = HEAP32[$__b>>2]|0;
  $99 = (($98) + 12|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (($98) + 16|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($100|0)==($102|0);
  if ($103) {
   $104 = HEAP32[$98>>2]|0;
   $105 = (($104) + 40|0);
   $106 = HEAP32[$105>>2]|0;
   (FUNCTION_TABLE_ii[$106 & 63]($98)|0);
  } else {
   $107 = (($100) + 1|0);
   HEAP32[$99>>2] = $107;
  }
  $108 = (($__n_does_match$3) + ($__n_might_match$3))|0;
  $109 = ($108>>>0)>(1);
  if ($109) {
   $__ky2$0 = $__kb;$__n_does_match$5 = $__n_does_match$3;$__st$2 = $__status$0;
  } else {
   $__indx$0 = $66;$__n_does_match$2 = $__n_does_match$3;$__n_might_match$2 = $__n_might_match$3;
   continue;
  }
  while(1) {
   $110 = ($__ky2$0|0)==($__ke|0);
   if ($110) {
    $__indx$0 = $66;$__n_does_match$2 = $__n_does_match$5;$__n_might_match$2 = $__n_might_match$3;
    continue L17;
   }
   $111 = HEAP8[$__st$2>>0]|0;
   $112 = ($111<<24>>24)==(2);
   if ($112) {
    $113 = HEAP8[$__ky2$0>>0]|0;
    $114 = $113 & 1;
    $115 = ($114<<24>>24)==(0);
    if ($115) {
     $118 = $113&255;
     $119 = $118 >>> 1;
     $120 = $119;
    } else {
     $116 = (($__ky2$0) + 4|0);
     $117 = HEAP32[$116>>2]|0;
     $120 = $117;
    }
    $121 = ($120|0)==($66|0);
    if ($121) {
     $__n_does_match$6 = $__n_does_match$5;
    } else {
     HEAP8[$__st$2>>0] = 0;
     $122 = (($__n_does_match$5) + -1)|0;
     $__n_does_match$6 = $122;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$5;
   }
   $123 = (($__ky2$0) + 12|0);
   $124 = (($__st$2) + 1|0);
   $__ky2$0 = $123;$__n_does_match$5 = $__n_does_match$6;$__st$2 = $124;
  }
 }
 $125 = ($$lcssa30|0)==(0|0);
 do {
  if ($125) {
   $136 = 0;
  } else {
   $126 = (($$lcssa30) + 12|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($$lcssa30) + 16|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if ($130) {
    $131 = HEAP32[$$lcssa30>>2]|0;
    $132 = (($131) + 36|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (FUNCTION_TABLE_ii[$133 & 63]($$lcssa30)|0);
    $135 = ($134|0)==(-1);
    if ($135) {
     HEAP32[$__b>>2] = 0;
     $136 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $136 = $$pre$i$i$i;
     break;
    }
   } else {
    $136 = $$lcssa30;
   }
  }
 } while(0);
 $137 = ($136|0)==(0|0);
 do {
  if ($$lcssa) {
   label = 68;
  } else {
   $138 = (($$pre$i2$i$i$lcssa) + 12|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = (($$pre$i2$i$i$lcssa) + 16|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = ($139|0)==($141|0);
   if ($142) {
    $143 = HEAP32[$$pre$i2$i$i$lcssa>>2]|0;
    $144 = (($143) + 36|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = (FUNCTION_TABLE_ii[$145 & 63]($$pre$i2$i$i$lcssa)|0);
    $147 = ($146|0)==(-1);
    if ($147) {
     HEAP32[$__e>>2] = 0;
     label = 68;
     break;
    }
   }
   if ($137) {
    $$0 = $__kb;$__st$3 = $__status$0;
   } else {
    label = 69;
   }
  }
 } while(0);
 if ((label|0) == 68) {
  if ($137) {
   label = 69;
  } else {
   $$0 = $__kb;$__st$3 = $__status$0;
  }
 }
 if ((label|0) == 69) {
  $148 = HEAP32[$__err>>2]|0;
  $149 = $148 | 2;
  HEAP32[$__err>>2] = $149;
  $$0 = $__kb;$__st$3 = $__status$0;
 }
 while(1) {
  $150 = ($$0|0)==($__ke|0);
  if ($150) {
   label = 73;
   break;
  }
  $151 = HEAP8[$__st$3>>0]|0;
  $152 = ($151<<24>>24)==(2);
  if ($152) {
   $$021 = $$0;
   break;
  }
  $153 = (($$0) + 12|0);
  $154 = (($__st$3) + 1|0);
  $$0 = $153;$__st$3 = $154;
 }
 if ((label|0) == 73) {
  $155 = HEAP32[$__err>>2]|0;
  $156 = $155 | 4;
  HEAP32[$__err>>2] = $156;
  $$021 = $__ke;
 }
 _free($157);
 STACKTOP = sp;return ($$021|0);
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i = 0, $$pre$phi21Z2D = 0, $$pre$phi23Z2D = 0, $$pre18 = 0, $$pre20 = 0, $$pre22 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0;
 var $__thousands_sep = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$8,0);
 $9 = HEAP8[$__buf>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $14 = (($__buf) + 1|0);
  $$pre22 = (($__buf) + 8|0);
  $$pre$phi21Z2D = $14;$$pre$phi23Z2D = $$pre22;$15 = $14;
 } else {
  $12 = (($__buf) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $$pre20 = (($__buf) + 1|0);
  $$pre$phi21Z2D = $$pre20;$$pre$phi23Z2D = $12;$15 = $13;
 }
 HEAP32[$__a_end>>2] = $15;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $16 = (($__buf) + 4|0);
 $17 = HEAP8[$__thousands_sep>>0]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i2 = $$pre;$__a$0 = $15;
 L12: while(1) {
  $18 = ($$pre$i$i$i2|0)==(0|0);
  if ($18) {
   $29 = 0;
  } else {
   $19 = (($$pre$i$i$i2) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($$pre$i$i$i2) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($20|0)==($22|0);
   if ($23) {
    $24 = HEAP32[$$pre$i$i$i2>>2]|0;
    $25 = (($24) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (FUNCTION_TABLE_ii[$26 & 63]($$pre$i$i$i2)|0);
    $28 = ($27|0)==(-1);
    if ($28) {
     HEAP32[$__b>>2] = 0;
     $29 = 0;
    } else {
     $29 = $$pre$i$i$i2;
    }
   } else {
    $29 = $$pre$i$i$i2;
   }
  }
  $30 = ($29|0)==(0|0);
  $31 = HEAP32[$__e>>2]|0;
  $32 = ($31|0)==(0|0);
  do {
   if ($32) {
    label = 19;
   } else {
    $33 = (($31) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($31) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if (!($37)) {
     if ($30) {
      $138 = $31;
      break;
     } else {
      $$lcssa = $29;$$pre$i2$i$i = $31;$__a$2 = $__a$0;
      break L12;
     }
    }
    $38 = HEAP32[$31>>2]|0;
    $39 = (($38) + 36|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (FUNCTION_TABLE_ii[$40 & 63]($31)|0);
    $42 = ($41|0)==(-1);
    if ($42) {
     HEAP32[$__e>>2] = 0;
     label = 19;
     break;
    } else {
     if ($30) {
      $138 = $31;
      break;
     } else {
      $$lcssa = $29;$$pre$i2$i$i = $31;$__a$2 = $__a$0;
      break L12;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($30) {
    $$lcssa = $29;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $138 = 0;
   }
  }
  $43 = HEAP32[$__a_end>>2]|0;
  $44 = HEAP8[$__buf>>0]|0;
  $45 = $44 & 1;
  $46 = ($45<<24>>24)==(0);
  if ($46) {
   $48 = $44&255;
   $49 = $48 >>> 1;
   $51 = $49;
  } else {
   $47 = HEAP32[$16>>2]|0;
   $51 = $47;
  }
  $50 = (($__a$0) + ($51)|0);
  $52 = ($43|0)==($50|0);
  if ($52) {
   if ($46) {
    $54 = $44&255;
    $55 = $54 >>> 1;
    $56 = $44&255;
    $57 = $56 >>> 1;
    $59 = $57;$72 = $55;
   } else {
    $53 = HEAP32[$16>>2]|0;
    $59 = $53;$72 = $53;
   }
   $58 = $59 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$58,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = 10;
   } else {
    $63 = HEAP32[$__buf>>2]|0;
    $64 = $63 & -2;
    $phitmp$i12 = (($64) + -1)|0;
    $65 = $phitmp$i12;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$65,0);
   $66 = HEAP8[$__buf>>0]|0;
   $67 = $66 & 1;
   $68 = ($67<<24>>24)==(0);
   if ($68) {
    $71 = $$pre$phi21Z2D;
   } else {
    $69 = HEAP32[$$pre$phi23Z2D>>2]|0;
    $71 = $69;
   }
   $70 = (($71) + ($72)|0);
   HEAP32[$__a_end>>2] = $70;
   $__a$1 = $71;
  } else {
   $__a$1 = $__a$0;
  }
  $73 = (($29) + 12|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($29) + 16|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($74|0)==($76|0);
  if ($77) {
   $78 = HEAP32[$29>>2]|0;
   $79 = (($78) + 36|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (FUNCTION_TABLE_ii[$80 & 63]($29)|0);
   $$0$i$i = $81;
  } else {
   $82 = HEAP8[$74>>0]|0;
   $83 = $82&255;
   $$0$i$i = $83;
  }
  $84 = $$0$i$i&255;
  $85 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($84,$0,$__a$1,$__a_end,$__dc,$17,$__grouping,$__g,$__g_end,$__atoms)|0);
  $86 = ($85|0)==(0);
  if (!($86)) {
   $$lcssa = $29;$$pre$i2$i$i = $138;$__a$2 = $__a$1;
   break;
  }
  $87 = HEAP32[$73>>2]|0;
  $88 = HEAP32[$75>>2]|0;
  $89 = ($87|0)==($88|0);
  if ($89) {
   $90 = HEAP32[$29>>2]|0;
   $91 = (($90) + 40|0);
   $92 = HEAP32[$91>>2]|0;
   (FUNCTION_TABLE_ii[$92 & 63]($29)|0);
   $$pre$i$i$i2 = $29;$__a$0 = $__a$1;
   continue;
  } else {
   $93 = (($87) + 1|0);
   HEAP32[$73>>2] = $93;
   $$pre$i$i$i2 = $29;$__a$0 = $__a$1;
   continue;
  }
 }
 $94 = HEAP8[$__grouping>>0]|0;
 $95 = $94 & 1;
 $96 = ($95<<24>>24)==(0);
 if ($96) {
  $99 = $94&255;
  $100 = $99 >>> 1;
  $101 = $100;
 } else {
  $97 = (($__grouping) + 4|0);
  $98 = HEAP32[$97>>2]|0;
  $101 = $98;
 }
 $102 = ($101|0)==(0);
 $$pre18 = HEAP32[$__g_end>>2]|0;
 if ($102) {
  $111 = $$pre18;
 } else {
  $103 = $$pre18;
  $104 = $__g;
  $105 = (($103) - ($104))|0;
  $106 = ($105|0)<(160);
  if ($106) {
   $107 = HEAP32[$__dc>>2]|0;
   $108 = (($$pre18) + 4|0);
   HEAP32[$__g_end>>2] = $108;
   HEAP32[$$pre18>>2] = $107;
   $111 = $108;
  } else {
   $111 = $$pre18;
  }
 }
 $109 = HEAP32[$__a_end>>2]|0;
 $110 = (__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a$2,$109,$__err,$0)|0);
 HEAP32[$__v>>2] = $110;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$111,$__err);
 $112 = ($$lcssa|0)==(0|0);
 if ($112) {
  $123 = 0;
 } else {
  $113 = (($$lcssa) + 12|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($$lcssa) + 16|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ($114|0)==($116|0);
  if ($117) {
   $118 = HEAP32[$$lcssa>>2]|0;
   $119 = (($118) + 36|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (FUNCTION_TABLE_ii[$120 & 63]($$lcssa)|0);
   $122 = ($121|0)==(-1);
   if ($122) {
    HEAP32[$__b>>2] = 0;
    $123 = 0;
   } else {
    $123 = $$lcssa;
   }
  } else {
   $123 = $$lcssa;
  }
 }
 $124 = ($123|0)==(0|0);
 $125 = ($$pre$i2$i$i|0)==(0|0);
 do {
  if ($125) {
   label = 55;
  } else {
   $126 = (($$pre$i2$i$i) + 12|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($$pre$i2$i$i) + 16|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if ($130) {
    $131 = HEAP32[$$pre$i2$i$i>>2]|0;
    $132 = (($131) + 36|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (FUNCTION_TABLE_ii[$133 & 63]($$pre$i2$i$i)|0);
    $135 = ($134|0)==(-1);
    if ($135) {
     HEAP32[$__e>>2] = 0;
     label = 55;
     break;
    }
   }
   if (!($124)) {
    label = 56;
   }
  }
 } while(0);
 if ((label|0) == 55) {
  if ($124) {
   label = 56;
  }
 }
 if ((label|0) == 56) {
  $136 = HEAP32[$__err>>2]|0;
  $137 = $136 | 2;
  HEAP32[$__err>>2] = $137;
 }
 HEAP32[$agg$result>>2] = $123;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i = 0, $$pre$phi21Z2D = 0, $$pre$phi23Z2D = 0, $$pre18 = 0, $$pre20 = 0, $$pre22 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0;
 var $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$8,0);
 $9 = HEAP8[$__buf>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $14 = (($__buf) + 1|0);
  $$pre22 = (($__buf) + 8|0);
  $$pre$phi21Z2D = $14;$$pre$phi23Z2D = $$pre22;$15 = $14;
 } else {
  $12 = (($__buf) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $$pre20 = (($__buf) + 1|0);
  $$pre$phi21Z2D = $$pre20;$$pre$phi23Z2D = $12;$15 = $13;
 }
 HEAP32[$__a_end>>2] = $15;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $16 = (($__buf) + 4|0);
 $17 = HEAP8[$__thousands_sep>>0]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i2 = $$pre;$__a$0 = $15;
 L12: while(1) {
  $18 = ($$pre$i$i$i2|0)==(0|0);
  if ($18) {
   $29 = 0;
  } else {
   $19 = (($$pre$i$i$i2) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($$pre$i$i$i2) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($20|0)==($22|0);
   if ($23) {
    $24 = HEAP32[$$pre$i$i$i2>>2]|0;
    $25 = (($24) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (FUNCTION_TABLE_ii[$26 & 63]($$pre$i$i$i2)|0);
    $28 = ($27|0)==(-1);
    if ($28) {
     HEAP32[$__b>>2] = 0;
     $29 = 0;
    } else {
     $29 = $$pre$i$i$i2;
    }
   } else {
    $29 = $$pre$i$i$i2;
   }
  }
  $30 = ($29|0)==(0|0);
  $31 = HEAP32[$__e>>2]|0;
  $32 = ($31|0)==(0|0);
  do {
   if ($32) {
    label = 19;
   } else {
    $33 = (($31) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($31) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if (!($37)) {
     if ($30) {
      $143 = $31;
      break;
     } else {
      $$lcssa = $29;$$pre$i2$i$i = $31;$__a$2 = $__a$0;
      break L12;
     }
    }
    $38 = HEAP32[$31>>2]|0;
    $39 = (($38) + 36|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (FUNCTION_TABLE_ii[$40 & 63]($31)|0);
    $42 = ($41|0)==(-1);
    if ($42) {
     HEAP32[$__e>>2] = 0;
     label = 19;
     break;
    } else {
     if ($30) {
      $143 = $31;
      break;
     } else {
      $$lcssa = $29;$$pre$i2$i$i = $31;$__a$2 = $__a$0;
      break L12;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($30) {
    $$lcssa = $29;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $143 = 0;
   }
  }
  $43 = HEAP32[$__a_end>>2]|0;
  $44 = HEAP8[$__buf>>0]|0;
  $45 = $44 & 1;
  $46 = ($45<<24>>24)==(0);
  if ($46) {
   $48 = $44&255;
   $49 = $48 >>> 1;
   $51 = $49;
  } else {
   $47 = HEAP32[$16>>2]|0;
   $51 = $47;
  }
  $50 = (($__a$0) + ($51)|0);
  $52 = ($43|0)==($50|0);
  if ($52) {
   if ($46) {
    $54 = $44&255;
    $55 = $54 >>> 1;
    $56 = $44&255;
    $57 = $56 >>> 1;
    $59 = $57;$72 = $55;
   } else {
    $53 = HEAP32[$16>>2]|0;
    $59 = $53;$72 = $53;
   }
   $58 = $59 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$58,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = 10;
   } else {
    $63 = HEAP32[$__buf>>2]|0;
    $64 = $63 & -2;
    $phitmp$i12 = (($64) + -1)|0;
    $65 = $phitmp$i12;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$65,0);
   $66 = HEAP8[$__buf>>0]|0;
   $67 = $66 & 1;
   $68 = ($67<<24>>24)==(0);
   if ($68) {
    $71 = $$pre$phi21Z2D;
   } else {
    $69 = HEAP32[$$pre$phi23Z2D>>2]|0;
    $71 = $69;
   }
   $70 = (($71) + ($72)|0);
   HEAP32[$__a_end>>2] = $70;
   $__a$1 = $71;
  } else {
   $__a$1 = $__a$0;
  }
  $73 = (($29) + 12|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($29) + 16|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($74|0)==($76|0);
  if ($77) {
   $78 = HEAP32[$29>>2]|0;
   $79 = (($78) + 36|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (FUNCTION_TABLE_ii[$80 & 63]($29)|0);
   $$0$i$i = $81;
  } else {
   $82 = HEAP8[$74>>0]|0;
   $83 = $82&255;
   $$0$i$i = $83;
  }
  $84 = $$0$i$i&255;
  $85 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($84,$0,$__a$1,$__a_end,$__dc,$17,$__grouping,$__g,$__g_end,$__atoms)|0);
  $86 = ($85|0)==(0);
  if (!($86)) {
   $$lcssa = $29;$$pre$i2$i$i = $143;$__a$2 = $__a$1;
   break;
  }
  $87 = HEAP32[$73>>2]|0;
  $88 = HEAP32[$75>>2]|0;
  $89 = ($87|0)==($88|0);
  if ($89) {
   $90 = HEAP32[$29>>2]|0;
   $91 = (($90) + 40|0);
   $92 = HEAP32[$91>>2]|0;
   (FUNCTION_TABLE_ii[$92 & 63]($29)|0);
   $$pre$i$i$i2 = $29;$__a$0 = $__a$1;
   continue;
  } else {
   $93 = (($87) + 1|0);
   HEAP32[$73>>2] = $93;
   $$pre$i$i$i2 = $29;$__a$0 = $__a$1;
   continue;
  }
 }
 $94 = HEAP8[$__grouping>>0]|0;
 $95 = $94 & 1;
 $96 = ($95<<24>>24)==(0);
 if ($96) {
  $99 = $94&255;
  $100 = $99 >>> 1;
  $101 = $100;
 } else {
  $97 = (($__grouping) + 4|0);
  $98 = HEAP32[$97>>2]|0;
  $101 = $98;
 }
 $102 = ($101|0)==(0);
 $$pre18 = HEAP32[$__g_end>>2]|0;
 if ($102) {
  $116 = $$pre18;
 } else {
  $103 = $$pre18;
  $104 = $__g;
  $105 = (($103) - ($104))|0;
  $106 = ($105|0)<(160);
  if ($106) {
   $107 = HEAP32[$__dc>>2]|0;
   $108 = (($$pre18) + 4|0);
   HEAP32[$__g_end>>2] = $108;
   HEAP32[$$pre18>>2] = $107;
   $116 = $108;
  } else {
   $116 = $$pre18;
  }
 }
 $109 = HEAP32[$__a_end>>2]|0;
 $110 = (__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a$2,$109,$__err,$0)|0);
 $111 = tempRet0;
 $112 = $__v;
 $113 = $112;
 HEAP32[$113>>2] = $110;
 $114 = (($112) + 4)|0;
 $115 = $114;
 HEAP32[$115>>2] = $111;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$116,$__err);
 $117 = ($$lcssa|0)==(0|0);
 if ($117) {
  $128 = 0;
 } else {
  $118 = (($$lcssa) + 12|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (($$lcssa) + 16|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ($119|0)==($121|0);
  if ($122) {
   $123 = HEAP32[$$lcssa>>2]|0;
   $124 = (($123) + 36|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (FUNCTION_TABLE_ii[$125 & 63]($$lcssa)|0);
   $127 = ($126|0)==(-1);
   if ($127) {
    HEAP32[$__b>>2] = 0;
    $128 = 0;
   } else {
    $128 = $$lcssa;
   }
  } else {
   $128 = $$lcssa;
  }
 }
 $129 = ($128|0)==(0|0);
 $130 = ($$pre$i2$i$i|0)==(0|0);
 do {
  if ($130) {
   label = 55;
  } else {
   $131 = (($$pre$i2$i$i) + 12|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = (($$pre$i2$i$i) + 16|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = ($132|0)==($134|0);
   if ($135) {
    $136 = HEAP32[$$pre$i2$i$i>>2]|0;
    $137 = (($136) + 36|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = (FUNCTION_TABLE_ii[$138 & 63]($$pre$i2$i$i)|0);
    $140 = ($139|0)==(-1);
    if ($140) {
     HEAP32[$__e>>2] = 0;
     label = 55;
     break;
    }
   }
   if (!($129)) {
    label = 56;
   }
  }
 } while(0);
 if ((label|0) == 55) {
  if ($129) {
   label = 56;
  }
 }
 if ((label|0) == 56) {
  $141 = HEAP32[$__err>>2]|0;
  $142 = $141 | 2;
  HEAP32[$__err>>2] = $142;
 }
 HEAP32[$agg$result>>2] = $128;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i = 0, $$pre$phi21Z2D = 0, $$pre$phi23Z2D = 0, $$pre18 = 0, $$pre20 = 0, $$pre22 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0;
 var $__thousands_sep = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$8,0);
 $9 = HEAP8[$__buf>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $14 = (($__buf) + 1|0);
  $$pre22 = (($__buf) + 8|0);
  $$pre$phi21Z2D = $14;$$pre$phi23Z2D = $$pre22;$15 = $14;
 } else {
  $12 = (($__buf) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $$pre20 = (($__buf) + 1|0);
  $$pre$phi21Z2D = $$pre20;$$pre$phi23Z2D = $12;$15 = $13;
 }
 HEAP32[$__a_end>>2] = $15;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $16 = (($__buf) + 4|0);
 $17 = HEAP8[$__thousands_sep>>0]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i2 = $$pre;$__a$0 = $15;
 L12: while(1) {
  $18 = ($$pre$i$i$i2|0)==(0|0);
  if ($18) {
   $29 = 0;
  } else {
   $19 = (($$pre$i$i$i2) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($$pre$i$i$i2) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($20|0)==($22|0);
   if ($23) {
    $24 = HEAP32[$$pre$i$i$i2>>2]|0;
    $25 = (($24) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (FUNCTION_TABLE_ii[$26 & 63]($$pre$i$i$i2)|0);
    $28 = ($27|0)==(-1);
    if ($28) {
     HEAP32[$__b>>2] = 0;
     $29 = 0;
    } else {
     $29 = $$pre$i$i$i2;
    }
   } else {
    $29 = $$pre$i$i$i2;
   }
  }
  $30 = ($29|0)==(0|0);
  $31 = HEAP32[$__e>>2]|0;
  $32 = ($31|0)==(0|0);
  do {
   if ($32) {
    label = 19;
   } else {
    $33 = (($31) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($31) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if (!($37)) {
     if ($30) {
      $138 = $31;
      break;
     } else {
      $$lcssa = $29;$$pre$i2$i$i = $31;$__a$2 = $__a$0;
      break L12;
     }
    }
    $38 = HEAP32[$31>>2]|0;
    $39 = (($38) + 36|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (FUNCTION_TABLE_ii[$40 & 63]($31)|0);
    $42 = ($41|0)==(-1);
    if ($42) {
     HEAP32[$__e>>2] = 0;
     label = 19;
     break;
    } else {
     if ($30) {
      $138 = $31;
      break;
     } else {
      $$lcssa = $29;$$pre$i2$i$i = $31;$__a$2 = $__a$0;
      break L12;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($30) {
    $$lcssa = $29;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $138 = 0;
   }
  }
  $43 = HEAP32[$__a_end>>2]|0;
  $44 = HEAP8[$__buf>>0]|0;
  $45 = $44 & 1;
  $46 = ($45<<24>>24)==(0);
  if ($46) {
   $48 = $44&255;
   $49 = $48 >>> 1;
   $51 = $49;
  } else {
   $47 = HEAP32[$16>>2]|0;
   $51 = $47;
  }
  $50 = (($__a$0) + ($51)|0);
  $52 = ($43|0)==($50|0);
  if ($52) {
   if ($46) {
    $54 = $44&255;
    $55 = $54 >>> 1;
    $56 = $44&255;
    $57 = $56 >>> 1;
    $59 = $57;$72 = $55;
   } else {
    $53 = HEAP32[$16>>2]|0;
    $59 = $53;$72 = $53;
   }
   $58 = $59 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$58,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = 10;
   } else {
    $63 = HEAP32[$__buf>>2]|0;
    $64 = $63 & -2;
    $phitmp$i12 = (($64) + -1)|0;
    $65 = $phitmp$i12;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$65,0);
   $66 = HEAP8[$__buf>>0]|0;
   $67 = $66 & 1;
   $68 = ($67<<24>>24)==(0);
   if ($68) {
    $71 = $$pre$phi21Z2D;
   } else {
    $69 = HEAP32[$$pre$phi23Z2D>>2]|0;
    $71 = $69;
   }
   $70 = (($71) + ($72)|0);
   HEAP32[$__a_end>>2] = $70;
   $__a$1 = $71;
  } else {
   $__a$1 = $__a$0;
  }
  $73 = (($29) + 12|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($29) + 16|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($74|0)==($76|0);
  if ($77) {
   $78 = HEAP32[$29>>2]|0;
   $79 = (($78) + 36|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (FUNCTION_TABLE_ii[$80 & 63]($29)|0);
   $$0$i$i = $81;
  } else {
   $82 = HEAP8[$74>>0]|0;
   $83 = $82&255;
   $$0$i$i = $83;
  }
  $84 = $$0$i$i&255;
  $85 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($84,$0,$__a$1,$__a_end,$__dc,$17,$__grouping,$__g,$__g_end,$__atoms)|0);
  $86 = ($85|0)==(0);
  if (!($86)) {
   $$lcssa = $29;$$pre$i2$i$i = $138;$__a$2 = $__a$1;
   break;
  }
  $87 = HEAP32[$73>>2]|0;
  $88 = HEAP32[$75>>2]|0;
  $89 = ($87|0)==($88|0);
  if ($89) {
   $90 = HEAP32[$29>>2]|0;
   $91 = (($90) + 40|0);
   $92 = HEAP32[$91>>2]|0;
   (FUNCTION_TABLE_ii[$92 & 63]($29)|0);
   $$pre$i$i$i2 = $29;$__a$0 = $__a$1;
   continue;
  } else {
   $93 = (($87) + 1|0);
   HEAP32[$73>>2] = $93;
   $$pre$i$i$i2 = $29;$__a$0 = $__a$1;
   continue;
  }
 }
 $94 = HEAP8[$__grouping>>0]|0;
 $95 = $94 & 1;
 $96 = ($95<<24>>24)==(0);
 if ($96) {
  $99 = $94&255;
  $100 = $99 >>> 1;
  $101 = $100;
 } else {
  $97 = (($__grouping) + 4|0);
  $98 = HEAP32[$97>>2]|0;
  $101 = $98;
 }
 $102 = ($101|0)==(0);
 $$pre18 = HEAP32[$__g_end>>2]|0;
 if ($102) {
  $111 = $$pre18;
 } else {
  $103 = $$pre18;
  $104 = $__g;
  $105 = (($103) - ($104))|0;
  $106 = ($105|0)<(160);
  if ($106) {
   $107 = HEAP32[$__dc>>2]|0;
   $108 = (($$pre18) + 4|0);
   HEAP32[$__g_end>>2] = $108;
   HEAP32[$$pre18>>2] = $107;
   $111 = $108;
  } else {
   $111 = $$pre18;
  }
 }
 $109 = HEAP32[$__a_end>>2]|0;
 $110 = (__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a$2,$109,$__err,$0)|0);
 HEAP16[$__v>>1] = $110;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$111,$__err);
 $112 = ($$lcssa|0)==(0|0);
 if ($112) {
  $123 = 0;
 } else {
  $113 = (($$lcssa) + 12|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($$lcssa) + 16|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ($114|0)==($116|0);
  if ($117) {
   $118 = HEAP32[$$lcssa>>2]|0;
   $119 = (($118) + 36|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (FUNCTION_TABLE_ii[$120 & 63]($$lcssa)|0);
   $122 = ($121|0)==(-1);
   if ($122) {
    HEAP32[$__b>>2] = 0;
    $123 = 0;
   } else {
    $123 = $$lcssa;
   }
  } else {
   $123 = $$lcssa;
  }
 }
 $124 = ($123|0)==(0|0);
 $125 = ($$pre$i2$i$i|0)==(0|0);
 do {
  if ($125) {
   label = 55;
  } else {
   $126 = (($$pre$i2$i$i) + 12|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($$pre$i2$i$i) + 16|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if ($130) {
    $131 = HEAP32[$$pre$i2$i$i>>2]|0;
    $132 = (($131) + 36|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (FUNCTION_TABLE_ii[$133 & 63]($$pre$i2$i$i)|0);
    $135 = ($134|0)==(-1);
    if ($135) {
     HEAP32[$__e>>2] = 0;
     label = 55;
     break;
    }
   }
   if (!($124)) {
    label = 56;
   }
  }
 } while(0);
 if ((label|0) == 55) {
  if ($124) {
   label = 56;
  }
 }
 if ((label|0) == 56) {
  $136 = HEAP32[$__err>>2]|0;
  $137 = $136 | 2;
  HEAP32[$__err>>2] = $137;
 }
 HEAP32[$agg$result>>2] = $123;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i = 0, $$pre$phi21Z2D = 0, $$pre$phi23Z2D = 0, $$pre18 = 0, $$pre20 = 0, $$pre22 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0;
 var $__thousands_sep = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$8,0);
 $9 = HEAP8[$__buf>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $14 = (($__buf) + 1|0);
  $$pre22 = (($__buf) + 8|0);
  $$pre$phi21Z2D = $14;$$pre$phi23Z2D = $$pre22;$15 = $14;
 } else {
  $12 = (($__buf) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $$pre20 = (($__buf) + 1|0);
  $$pre$phi21Z2D = $$pre20;$$pre$phi23Z2D = $12;$15 = $13;
 }
 HEAP32[$__a_end>>2] = $15;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $16 = (($__buf) + 4|0);
 $17 = HEAP8[$__thousands_sep>>0]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i2 = $$pre;$__a$0 = $15;
 L12: while(1) {
  $18 = ($$pre$i$i$i2|0)==(0|0);
  if ($18) {
   $29 = 0;
  } else {
   $19 = (($$pre$i$i$i2) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($$pre$i$i$i2) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($20|0)==($22|0);
   if ($23) {
    $24 = HEAP32[$$pre$i$i$i2>>2]|0;
    $25 = (($24) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (FUNCTION_TABLE_ii[$26 & 63]($$pre$i$i$i2)|0);
    $28 = ($27|0)==(-1);
    if ($28) {
     HEAP32[$__b>>2] = 0;
     $29 = 0;
    } else {
     $29 = $$pre$i$i$i2;
    }
   } else {
    $29 = $$pre$i$i$i2;
   }
  }
  $30 = ($29|0)==(0|0);
  $31 = HEAP32[$__e>>2]|0;
  $32 = ($31|0)==(0|0);
  do {
   if ($32) {
    label = 19;
   } else {
    $33 = (($31) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($31) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if (!($37)) {
     if ($30) {
      $138 = $31;
      break;
     } else {
      $$lcssa = $29;$$pre$i2$i$i = $31;$__a$2 = $__a$0;
      break L12;
     }
    }
    $38 = HEAP32[$31>>2]|0;
    $39 = (($38) + 36|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (FUNCTION_TABLE_ii[$40 & 63]($31)|0);
    $42 = ($41|0)==(-1);
    if ($42) {
     HEAP32[$__e>>2] = 0;
     label = 19;
     break;
    } else {
     if ($30) {
      $138 = $31;
      break;
     } else {
      $$lcssa = $29;$$pre$i2$i$i = $31;$__a$2 = $__a$0;
      break L12;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($30) {
    $$lcssa = $29;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $138 = 0;
   }
  }
  $43 = HEAP32[$__a_end>>2]|0;
  $44 = HEAP8[$__buf>>0]|0;
  $45 = $44 & 1;
  $46 = ($45<<24>>24)==(0);
  if ($46) {
   $48 = $44&255;
   $49 = $48 >>> 1;
   $51 = $49;
  } else {
   $47 = HEAP32[$16>>2]|0;
   $51 = $47;
  }
  $50 = (($__a$0) + ($51)|0);
  $52 = ($43|0)==($50|0);
  if ($52) {
   if ($46) {
    $54 = $44&255;
    $55 = $54 >>> 1;
    $56 = $44&255;
    $57 = $56 >>> 1;
    $59 = $57;$72 = $55;
   } else {
    $53 = HEAP32[$16>>2]|0;
    $59 = $53;$72 = $53;
   }
   $58 = $59 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$58,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = 10;
   } else {
    $63 = HEAP32[$__buf>>2]|0;
    $64 = $63 & -2;
    $phitmp$i12 = (($64) + -1)|0;
    $65 = $phitmp$i12;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$65,0);
   $66 = HEAP8[$__buf>>0]|0;
   $67 = $66 & 1;
   $68 = ($67<<24>>24)==(0);
   if ($68) {
    $71 = $$pre$phi21Z2D;
   } else {
    $69 = HEAP32[$$pre$phi23Z2D>>2]|0;
    $71 = $69;
   }
   $70 = (($71) + ($72)|0);
   HEAP32[$__a_end>>2] = $70;
   $__a$1 = $71;
  } else {
   $__a$1 = $__a$0;
  }
  $73 = (($29) + 12|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($29) + 16|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($74|0)==($76|0);
  if ($77) {
   $78 = HEAP32[$29>>2]|0;
   $79 = (($78) + 36|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (FUNCTION_TABLE_ii[$80 & 63]($29)|0);
   $$0$i$i = $81;
  } else {
   $82 = HEAP8[$74>>0]|0;
   $83 = $82&255;
   $$0$i$i = $83;
  }
  $84 = $$0$i$i&255;
  $85 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($84,$0,$__a$1,$__a_end,$__dc,$17,$__grouping,$__g,$__g_end,$__atoms)|0);
  $86 = ($85|0)==(0);
  if (!($86)) {
   $$lcssa = $29;$$pre$i2$i$i = $138;$__a$2 = $__a$1;
   break;
  }
  $87 = HEAP32[$73>>2]|0;
  $88 = HEAP32[$75>>2]|0;
  $89 = ($87|0)==($88|0);
  if ($89) {
   $90 = HEAP32[$29>>2]|0;
   $91 = (($90) + 40|0);
   $92 = HEAP32[$91>>2]|0;
   (FUNCTION_TABLE_ii[$92 & 63]($29)|0);
   $$pre$i$i$i2 = $29;$__a$0 = $__a$1;
   continue;
  } else {
   $93 = (($87) + 1|0);
   HEAP32[$73>>2] = $93;
   $$pre$i$i$i2 = $29;$__a$0 = $__a$1;
   continue;
  }
 }
 $94 = HEAP8[$__grouping>>0]|0;
 $95 = $94 & 1;
 $96 = ($95<<24>>24)==(0);
 if ($96) {
  $99 = $94&255;
  $100 = $99 >>> 1;
  $101 = $100;
 } else {
  $97 = (($__grouping) + 4|0);
  $98 = HEAP32[$97>>2]|0;
  $101 = $98;
 }
 $102 = ($101|0)==(0);
 $$pre18 = HEAP32[$__g_end>>2]|0;
 if ($102) {
  $111 = $$pre18;
 } else {
  $103 = $$pre18;
  $104 = $__g;
  $105 = (($103) - ($104))|0;
  $106 = ($105|0)<(160);
  if ($106) {
   $107 = HEAP32[$__dc>>2]|0;
   $108 = (($$pre18) + 4|0);
   HEAP32[$__g_end>>2] = $108;
   HEAP32[$$pre18>>2] = $107;
   $111 = $108;
  } else {
   $111 = $$pre18;
  }
 }
 $109 = HEAP32[$__a_end>>2]|0;
 $110 = (__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a$2,$109,$__err,$0)|0);
 HEAP32[$__v>>2] = $110;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$111,$__err);
 $112 = ($$lcssa|0)==(0|0);
 if ($112) {
  $123 = 0;
 } else {
  $113 = (($$lcssa) + 12|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($$lcssa) + 16|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ($114|0)==($116|0);
  if ($117) {
   $118 = HEAP32[$$lcssa>>2]|0;
   $119 = (($118) + 36|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (FUNCTION_TABLE_ii[$120 & 63]($$lcssa)|0);
   $122 = ($121|0)==(-1);
   if ($122) {
    HEAP32[$__b>>2] = 0;
    $123 = 0;
   } else {
    $123 = $$lcssa;
   }
  } else {
   $123 = $$lcssa;
  }
 }
 $124 = ($123|0)==(0|0);
 $125 = ($$pre$i2$i$i|0)==(0|0);
 do {
  if ($125) {
   label = 55;
  } else {
   $126 = (($$pre$i2$i$i) + 12|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($$pre$i2$i$i) + 16|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if ($130) {
    $131 = HEAP32[$$pre$i2$i$i>>2]|0;
    $132 = (($131) + 36|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (FUNCTION_TABLE_ii[$133 & 63]($$pre$i2$i$i)|0);
    $135 = ($134|0)==(-1);
    if ($135) {
     HEAP32[$__e>>2] = 0;
     label = 55;
     break;
    }
   }
   if (!($124)) {
    label = 56;
   }
  }
 } while(0);
 if ((label|0) == 55) {
  if ($124) {
   label = 56;
  }
 }
 if ((label|0) == 56) {
  $136 = HEAP32[$__err>>2]|0;
  $137 = $136 | 2;
  HEAP32[$__err>>2] = $137;
 }
 HEAP32[$agg$result>>2] = $123;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i = 0, $$pre$phi21Z2D = 0, $$pre$phi23Z2D = 0, $$pre18 = 0, $$pre20 = 0, $$pre22 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0;
 var $__thousands_sep = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$8,0);
 $9 = HEAP8[$__buf>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $14 = (($__buf) + 1|0);
  $$pre22 = (($__buf) + 8|0);
  $$pre$phi21Z2D = $14;$$pre$phi23Z2D = $$pre22;$15 = $14;
 } else {
  $12 = (($__buf) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $$pre20 = (($__buf) + 1|0);
  $$pre$phi21Z2D = $$pre20;$$pre$phi23Z2D = $12;$15 = $13;
 }
 HEAP32[$__a_end>>2] = $15;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $16 = (($__buf) + 4|0);
 $17 = HEAP8[$__thousands_sep>>0]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i2 = $$pre;$__a$0 = $15;
 L12: while(1) {
  $18 = ($$pre$i$i$i2|0)==(0|0);
  if ($18) {
   $29 = 0;
  } else {
   $19 = (($$pre$i$i$i2) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($$pre$i$i$i2) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($20|0)==($22|0);
   if ($23) {
    $24 = HEAP32[$$pre$i$i$i2>>2]|0;
    $25 = (($24) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (FUNCTION_TABLE_ii[$26 & 63]($$pre$i$i$i2)|0);
    $28 = ($27|0)==(-1);
    if ($28) {
     HEAP32[$__b>>2] = 0;
     $29 = 0;
    } else {
     $29 = $$pre$i$i$i2;
    }
   } else {
    $29 = $$pre$i$i$i2;
   }
  }
  $30 = ($29|0)==(0|0);
  $31 = HEAP32[$__e>>2]|0;
  $32 = ($31|0)==(0|0);
  do {
   if ($32) {
    label = 19;
   } else {
    $33 = (($31) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($31) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if (!($37)) {
     if ($30) {
      $138 = $31;
      break;
     } else {
      $$lcssa = $29;$$pre$i2$i$i = $31;$__a$2 = $__a$0;
      break L12;
     }
    }
    $38 = HEAP32[$31>>2]|0;
    $39 = (($38) + 36|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (FUNCTION_TABLE_ii[$40 & 63]($31)|0);
    $42 = ($41|0)==(-1);
    if ($42) {
     HEAP32[$__e>>2] = 0;
     label = 19;
     break;
    } else {
     if ($30) {
      $138 = $31;
      break;
     } else {
      $$lcssa = $29;$$pre$i2$i$i = $31;$__a$2 = $__a$0;
      break L12;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($30) {
    $$lcssa = $29;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $138 = 0;
   }
  }
  $43 = HEAP32[$__a_end>>2]|0;
  $44 = HEAP8[$__buf>>0]|0;
  $45 = $44 & 1;
  $46 = ($45<<24>>24)==(0);
  if ($46) {
   $48 = $44&255;
   $49 = $48 >>> 1;
   $51 = $49;
  } else {
   $47 = HEAP32[$16>>2]|0;
   $51 = $47;
  }
  $50 = (($__a$0) + ($51)|0);
  $52 = ($43|0)==($50|0);
  if ($52) {
   if ($46) {
    $54 = $44&255;
    $55 = $54 >>> 1;
    $56 = $44&255;
    $57 = $56 >>> 1;
    $59 = $57;$72 = $55;
   } else {
    $53 = HEAP32[$16>>2]|0;
    $59 = $53;$72 = $53;
   }
   $58 = $59 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$58,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = 10;
   } else {
    $63 = HEAP32[$__buf>>2]|0;
    $64 = $63 & -2;
    $phitmp$i12 = (($64) + -1)|0;
    $65 = $phitmp$i12;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$65,0);
   $66 = HEAP8[$__buf>>0]|0;
   $67 = $66 & 1;
   $68 = ($67<<24>>24)==(0);
   if ($68) {
    $71 = $$pre$phi21Z2D;
   } else {
    $69 = HEAP32[$$pre$phi23Z2D>>2]|0;
    $71 = $69;
   }
   $70 = (($71) + ($72)|0);
   HEAP32[$__a_end>>2] = $70;
   $__a$1 = $71;
  } else {
   $__a$1 = $__a$0;
  }
  $73 = (($29) + 12|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($29) + 16|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($74|0)==($76|0);
  if ($77) {
   $78 = HEAP32[$29>>2]|0;
   $79 = (($78) + 36|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (FUNCTION_TABLE_ii[$80 & 63]($29)|0);
   $$0$i$i = $81;
  } else {
   $82 = HEAP8[$74>>0]|0;
   $83 = $82&255;
   $$0$i$i = $83;
  }
  $84 = $$0$i$i&255;
  $85 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($84,$0,$__a$1,$__a_end,$__dc,$17,$__grouping,$__g,$__g_end,$__atoms)|0);
  $86 = ($85|0)==(0);
  if (!($86)) {
   $$lcssa = $29;$$pre$i2$i$i = $138;$__a$2 = $__a$1;
   break;
  }
  $87 = HEAP32[$73>>2]|0;
  $88 = HEAP32[$75>>2]|0;
  $89 = ($87|0)==($88|0);
  if ($89) {
   $90 = HEAP32[$29>>2]|0;
   $91 = (($90) + 40|0);
   $92 = HEAP32[$91>>2]|0;
   (FUNCTION_TABLE_ii[$92 & 63]($29)|0);
   $$pre$i$i$i2 = $29;$__a$0 = $__a$1;
   continue;
  } else {
   $93 = (($87) + 1|0);
   HEAP32[$73>>2] = $93;
   $$pre$i$i$i2 = $29;$__a$0 = $__a$1;
   continue;
  }
 }
 $94 = HEAP8[$__grouping>>0]|0;
 $95 = $94 & 1;
 $96 = ($95<<24>>24)==(0);
 if ($96) {
  $99 = $94&255;
  $100 = $99 >>> 1;
  $101 = $100;
 } else {
  $97 = (($__grouping) + 4|0);
  $98 = HEAP32[$97>>2]|0;
  $101 = $98;
 }
 $102 = ($101|0)==(0);
 $$pre18 = HEAP32[$__g_end>>2]|0;
 if ($102) {
  $111 = $$pre18;
 } else {
  $103 = $$pre18;
  $104 = $__g;
  $105 = (($103) - ($104))|0;
  $106 = ($105|0)<(160);
  if ($106) {
   $107 = HEAP32[$__dc>>2]|0;
   $108 = (($$pre18) + 4|0);
   HEAP32[$__g_end>>2] = $108;
   HEAP32[$$pre18>>2] = $107;
   $111 = $108;
  } else {
   $111 = $$pre18;
  }
 }
 $109 = HEAP32[$__a_end>>2]|0;
 $110 = (__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a$2,$109,$__err,$0)|0);
 HEAP32[$__v>>2] = $110;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$111,$__err);
 $112 = ($$lcssa|0)==(0|0);
 if ($112) {
  $123 = 0;
 } else {
  $113 = (($$lcssa) + 12|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($$lcssa) + 16|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ($114|0)==($116|0);
  if ($117) {
   $118 = HEAP32[$$lcssa>>2]|0;
   $119 = (($118) + 36|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (FUNCTION_TABLE_ii[$120 & 63]($$lcssa)|0);
   $122 = ($121|0)==(-1);
   if ($122) {
    HEAP32[$__b>>2] = 0;
    $123 = 0;
   } else {
    $123 = $$lcssa;
   }
  } else {
   $123 = $$lcssa;
  }
 }
 $124 = ($123|0)==(0|0);
 $125 = ($$pre$i2$i$i|0)==(0|0);
 do {
  if ($125) {
   label = 55;
  } else {
   $126 = (($$pre$i2$i$i) + 12|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($$pre$i2$i$i) + 16|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if ($130) {
    $131 = HEAP32[$$pre$i2$i$i>>2]|0;
    $132 = (($131) + 36|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (FUNCTION_TABLE_ii[$133 & 63]($$pre$i2$i$i)|0);
    $135 = ($134|0)==(-1);
    if ($135) {
     HEAP32[$__e>>2] = 0;
     label = 55;
     break;
    }
   }
   if (!($124)) {
    label = 56;
   }
  }
 } while(0);
 if ((label|0) == 55) {
  if ($124) {
   label = 56;
  }
 }
 if ((label|0) == 56) {
  $136 = HEAP32[$__err>>2]|0;
  $137 = $136 | 2;
  HEAP32[$__err>>2] = $137;
 }
 HEAP32[$agg$result>>2] = $123;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i = 0, $$pre$phi21Z2D = 0, $$pre$phi23Z2D = 0, $$pre18 = 0, $$pre20 = 0, $$pre22 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0;
 var $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$8,0);
 $9 = HEAP8[$__buf>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $14 = (($__buf) + 1|0);
  $$pre22 = (($__buf) + 8|0);
  $$pre$phi21Z2D = $14;$$pre$phi23Z2D = $$pre22;$15 = $14;
 } else {
  $12 = (($__buf) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $$pre20 = (($__buf) + 1|0);
  $$pre$phi21Z2D = $$pre20;$$pre$phi23Z2D = $12;$15 = $13;
 }
 HEAP32[$__a_end>>2] = $15;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $16 = (($__buf) + 4|0);
 $17 = HEAP8[$__thousands_sep>>0]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i2 = $$pre;$__a$0 = $15;
 L12: while(1) {
  $18 = ($$pre$i$i$i2|0)==(0|0);
  if ($18) {
   $29 = 0;
  } else {
   $19 = (($$pre$i$i$i2) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($$pre$i$i$i2) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($20|0)==($22|0);
   if ($23) {
    $24 = HEAP32[$$pre$i$i$i2>>2]|0;
    $25 = (($24) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (FUNCTION_TABLE_ii[$26 & 63]($$pre$i$i$i2)|0);
    $28 = ($27|0)==(-1);
    if ($28) {
     HEAP32[$__b>>2] = 0;
     $29 = 0;
    } else {
     $29 = $$pre$i$i$i2;
    }
   } else {
    $29 = $$pre$i$i$i2;
   }
  }
  $30 = ($29|0)==(0|0);
  $31 = HEAP32[$__e>>2]|0;
  $32 = ($31|0)==(0|0);
  do {
   if ($32) {
    label = 19;
   } else {
    $33 = (($31) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($31) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if (!($37)) {
     if ($30) {
      $143 = $31;
      break;
     } else {
      $$lcssa = $29;$$pre$i2$i$i = $31;$__a$2 = $__a$0;
      break L12;
     }
    }
    $38 = HEAP32[$31>>2]|0;
    $39 = (($38) + 36|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (FUNCTION_TABLE_ii[$40 & 63]($31)|0);
    $42 = ($41|0)==(-1);
    if ($42) {
     HEAP32[$__e>>2] = 0;
     label = 19;
     break;
    } else {
     if ($30) {
      $143 = $31;
      break;
     } else {
      $$lcssa = $29;$$pre$i2$i$i = $31;$__a$2 = $__a$0;
      break L12;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($30) {
    $$lcssa = $29;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $143 = 0;
   }
  }
  $43 = HEAP32[$__a_end>>2]|0;
  $44 = HEAP8[$__buf>>0]|0;
  $45 = $44 & 1;
  $46 = ($45<<24>>24)==(0);
  if ($46) {
   $48 = $44&255;
   $49 = $48 >>> 1;
   $51 = $49;
  } else {
   $47 = HEAP32[$16>>2]|0;
   $51 = $47;
  }
  $50 = (($__a$0) + ($51)|0);
  $52 = ($43|0)==($50|0);
  if ($52) {
   if ($46) {
    $54 = $44&255;
    $55 = $54 >>> 1;
    $56 = $44&255;
    $57 = $56 >>> 1;
    $59 = $57;$72 = $55;
   } else {
    $53 = HEAP32[$16>>2]|0;
    $59 = $53;$72 = $53;
   }
   $58 = $59 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$58,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = 10;
   } else {
    $63 = HEAP32[$__buf>>2]|0;
    $64 = $63 & -2;
    $phitmp$i12 = (($64) + -1)|0;
    $65 = $phitmp$i12;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$65,0);
   $66 = HEAP8[$__buf>>0]|0;
   $67 = $66 & 1;
   $68 = ($67<<24>>24)==(0);
   if ($68) {
    $71 = $$pre$phi21Z2D;
   } else {
    $69 = HEAP32[$$pre$phi23Z2D>>2]|0;
    $71 = $69;
   }
   $70 = (($71) + ($72)|0);
   HEAP32[$__a_end>>2] = $70;
   $__a$1 = $71;
  } else {
   $__a$1 = $__a$0;
  }
  $73 = (($29) + 12|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($29) + 16|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($74|0)==($76|0);
  if ($77) {
   $78 = HEAP32[$29>>2]|0;
   $79 = (($78) + 36|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (FUNCTION_TABLE_ii[$80 & 63]($29)|0);
   $$0$i$i = $81;
  } else {
   $82 = HEAP8[$74>>0]|0;
   $83 = $82&255;
   $$0$i$i = $83;
  }
  $84 = $$0$i$i&255;
  $85 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($84,$0,$__a$1,$__a_end,$__dc,$17,$__grouping,$__g,$__g_end,$__atoms)|0);
  $86 = ($85|0)==(0);
  if (!($86)) {
   $$lcssa = $29;$$pre$i2$i$i = $143;$__a$2 = $__a$1;
   break;
  }
  $87 = HEAP32[$73>>2]|0;
  $88 = HEAP32[$75>>2]|0;
  $89 = ($87|0)==($88|0);
  if ($89) {
   $90 = HEAP32[$29>>2]|0;
   $91 = (($90) + 40|0);
   $92 = HEAP32[$91>>2]|0;
   (FUNCTION_TABLE_ii[$92 & 63]($29)|0);
   $$pre$i$i$i2 = $29;$__a$0 = $__a$1;
   continue;
  } else {
   $93 = (($87) + 1|0);
   HEAP32[$73>>2] = $93;
   $$pre$i$i$i2 = $29;$__a$0 = $__a$1;
   continue;
  }
 }
 $94 = HEAP8[$__grouping>>0]|0;
 $95 = $94 & 1;
 $96 = ($95<<24>>24)==(0);
 if ($96) {
  $99 = $94&255;
  $100 = $99 >>> 1;
  $101 = $100;
 } else {
  $97 = (($__grouping) + 4|0);
  $98 = HEAP32[$97>>2]|0;
  $101 = $98;
 }
 $102 = ($101|0)==(0);
 $$pre18 = HEAP32[$__g_end>>2]|0;
 if ($102) {
  $116 = $$pre18;
 } else {
  $103 = $$pre18;
  $104 = $__g;
  $105 = (($103) - ($104))|0;
  $106 = ($105|0)<(160);
  if ($106) {
   $107 = HEAP32[$__dc>>2]|0;
   $108 = (($$pre18) + 4|0);
   HEAP32[$__g_end>>2] = $108;
   HEAP32[$$pre18>>2] = $107;
   $116 = $108;
  } else {
   $116 = $$pre18;
  }
 }
 $109 = HEAP32[$__a_end>>2]|0;
 $110 = (__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a$2,$109,$__err,$0)|0);
 $111 = tempRet0;
 $112 = $__v;
 $113 = $112;
 HEAP32[$113>>2] = $110;
 $114 = (($112) + 4)|0;
 $115 = $114;
 HEAP32[$115>>2] = $111;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$116,$__err);
 $117 = ($$lcssa|0)==(0|0);
 if ($117) {
  $128 = 0;
 } else {
  $118 = (($$lcssa) + 12|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (($$lcssa) + 16|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ($119|0)==($121|0);
  if ($122) {
   $123 = HEAP32[$$lcssa>>2]|0;
   $124 = (($123) + 36|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (FUNCTION_TABLE_ii[$125 & 63]($$lcssa)|0);
   $127 = ($126|0)==(-1);
   if ($127) {
    HEAP32[$__b>>2] = 0;
    $128 = 0;
   } else {
    $128 = $$lcssa;
   }
  } else {
   $128 = $$lcssa;
  }
 }
 $129 = ($128|0)==(0|0);
 $130 = ($$pre$i2$i$i|0)==(0|0);
 do {
  if ($130) {
   label = 55;
  } else {
   $131 = (($$pre$i2$i$i) + 12|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = (($$pre$i2$i$i) + 16|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = ($132|0)==($134|0);
   if ($135) {
    $136 = HEAP32[$$pre$i2$i$i>>2]|0;
    $137 = (($136) + 36|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = (FUNCTION_TABLE_ii[$138 & 63]($$pre$i2$i$i)|0);
    $140 = ($139|0)==(-1);
    if ($140) {
     HEAP32[$__e>>2] = 0;
     label = 55;
     break;
    }
   }
   if (!($129)) {
    label = 56;
   }
  }
 } while(0);
 if ((label|0) == 55) {
  if ($129) {
   label = 56;
  }
 }
 if ((label|0) == 56) {
  $141 = HEAP32[$__err>>2]|0;
  $142 = $141 | 2;
  HEAP32[$__err>>2] = $142;
 }
 HEAP32[$agg$result>>2] = $128;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i3 = 0, $$pre$i2$i$i = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre19 = 0, $$pre21 = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0;
 var $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$7,0);
 $8 = HEAP8[$__buf>>0]|0;
 $9 = $8 & 1;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  $13 = (($__buf) + 1|0);
  $$pre23 = (($__buf) + 8|0);
  $$pre$phi22Z2D = $13;$$pre$phi24Z2D = $$pre23;$14 = $13;
 } else {
  $11 = (($__buf) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $$pre21 = (($__buf) + 1|0);
  $$pre$phi22Z2D = $$pre21;$$pre$phi24Z2D = $11;$14 = $12;
 }
 HEAP32[$__a_end>>2] = $14;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 HEAP8[$__in_units>>0] = 1;
 HEAP8[$__exp>>0] = 69;
 $15 = (($__buf) + 4|0);
 $16 = HEAP8[$__decimal_point>>0]|0;
 $17 = HEAP8[$__thousands_sep>>0]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i3 = $$pre;$__a$0 = $14;
 L12: while(1) {
  $18 = ($$pre$i$i$i3|0)==(0|0);
  if ($18) {
   $29 = 0;
  } else {
   $19 = (($$pre$i$i$i3) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($$pre$i$i$i3) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($20|0)==($22|0);
   if ($23) {
    $24 = HEAP32[$$pre$i$i$i3>>2]|0;
    $25 = (($24) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (FUNCTION_TABLE_ii[$26 & 63]($$pre$i$i$i3)|0);
    $28 = ($27|0)==(-1);
    if ($28) {
     HEAP32[$__b>>2] = 0;
     $29 = 0;
    } else {
     $29 = $$pre$i$i$i3;
    }
   } else {
    $29 = $$pre$i$i$i3;
   }
  }
  $30 = ($29|0)==(0|0);
  $31 = HEAP32[$__e>>2]|0;
  $32 = ($31|0)==(0|0);
  do {
   if ($32) {
    label = 19;
   } else {
    $33 = (($31) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($31) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if (!($37)) {
     if ($30) {
      $140 = $31;
      break;
     } else {
      $$lcssa = $29;$$pre$i2$i$i = $31;$__a$2 = $__a$0;
      break L12;
     }
    }
    $38 = HEAP32[$31>>2]|0;
    $39 = (($38) + 36|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (FUNCTION_TABLE_ii[$40 & 63]($31)|0);
    $42 = ($41|0)==(-1);
    if ($42) {
     HEAP32[$__e>>2] = 0;
     label = 19;
     break;
    } else {
     if ($30) {
      $140 = $31;
      break;
     } else {
      $$lcssa = $29;$$pre$i2$i$i = $31;$__a$2 = $__a$0;
      break L12;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($30) {
    $$lcssa = $29;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $140 = 0;
   }
  }
  $43 = HEAP32[$__a_end>>2]|0;
  $44 = HEAP8[$__buf>>0]|0;
  $45 = $44 & 1;
  $46 = ($45<<24>>24)==(0);
  if ($46) {
   $48 = $44&255;
   $49 = $48 >>> 1;
   $51 = $49;
  } else {
   $47 = HEAP32[$15>>2]|0;
   $51 = $47;
  }
  $50 = (($__a$0) + ($51)|0);
  $52 = ($43|0)==($50|0);
  if ($52) {
   if ($46) {
    $54 = $44&255;
    $55 = $54 >>> 1;
    $56 = $44&255;
    $57 = $56 >>> 1;
    $59 = $57;$72 = $55;
   } else {
    $53 = HEAP32[$15>>2]|0;
    $59 = $53;$72 = $53;
   }
   $58 = $59 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$58,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = 10;
   } else {
    $63 = HEAP32[$__buf>>2]|0;
    $64 = $63 & -2;
    $phitmp$i13 = (($64) + -1)|0;
    $65 = $phitmp$i13;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$65,0);
   $66 = HEAP8[$__buf>>0]|0;
   $67 = $66 & 1;
   $68 = ($67<<24>>24)==(0);
   if ($68) {
    $71 = $$pre$phi22Z2D;
   } else {
    $69 = HEAP32[$$pre$phi24Z2D>>2]|0;
    $71 = $69;
   }
   $70 = (($71) + ($72)|0);
   HEAP32[$__a_end>>2] = $70;
   $__a$1 = $71;
  } else {
   $__a$1 = $__a$0;
  }
  $73 = (($29) + 12|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($29) + 16|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($74|0)==($76|0);
  if ($77) {
   $78 = HEAP32[$29>>2]|0;
   $79 = (($78) + 36|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (FUNCTION_TABLE_ii[$80 & 63]($29)|0);
   $$0$i$i = $81;
  } else {
   $82 = HEAP8[$74>>0]|0;
   $83 = $82&255;
   $$0$i$i = $83;
  }
  $84 = $$0$i$i&255;
  $85 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($84,$__in_units,$__exp,$__a$1,$__a_end,$16,$17,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
  $86 = ($85|0)==(0);
  if (!($86)) {
   $$lcssa = $29;$$pre$i2$i$i = $140;$__a$2 = $__a$1;
   break;
  }
  $87 = HEAP32[$73>>2]|0;
  $88 = HEAP32[$75>>2]|0;
  $89 = ($87|0)==($88|0);
  if ($89) {
   $90 = HEAP32[$29>>2]|0;
   $91 = (($90) + 40|0);
   $92 = HEAP32[$91>>2]|0;
   (FUNCTION_TABLE_ii[$92 & 63]($29)|0);
   $$pre$i$i$i3 = $29;$__a$0 = $__a$1;
   continue;
  } else {
   $93 = (($87) + 1|0);
   HEAP32[$73>>2] = $93;
   $$pre$i$i$i3 = $29;$__a$0 = $__a$1;
   continue;
  }
 }
 $94 = HEAP8[$__grouping>>0]|0;
 $95 = $94 & 1;
 $96 = ($95<<24>>24)==(0);
 if ($96) {
  $99 = $94&255;
  $100 = $99 >>> 1;
  $101 = $100;
 } else {
  $97 = (($__grouping) + 4|0);
  $98 = HEAP32[$97>>2]|0;
  $101 = $98;
 }
 $102 = ($101|0)==(0);
 $103 = HEAP8[$__in_units>>0]|0;
 $104 = ($103<<24>>24)==(0);
 $or$cond = $102 | $104;
 $$pre19 = HEAP32[$__g_end>>2]|0;
 if ($or$cond) {
  $113 = $$pre19;
 } else {
  $105 = $$pre19;
  $106 = $__g;
  $107 = (($105) - ($106))|0;
  $108 = ($107|0)<(160);
  if ($108) {
   $109 = HEAP32[$__dc>>2]|0;
   $110 = (($$pre19) + 4|0);
   HEAP32[$__g_end>>2] = $110;
   HEAP32[$$pre19>>2] = $109;
   $113 = $110;
  } else {
   $113 = $$pre19;
  }
 }
 $111 = HEAP32[$__a_end>>2]|0;
 $112 = (+__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a$2,$111,$__err));
 HEAPF32[$__v>>2] = $112;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$113,$__err);
 $114 = ($$lcssa|0)==(0|0);
 if ($114) {
  $125 = 0;
 } else {
  $115 = (($$lcssa) + 12|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (($$lcssa) + 16|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ($116|0)==($118|0);
  if ($119) {
   $120 = HEAP32[$$lcssa>>2]|0;
   $121 = (($120) + 36|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (FUNCTION_TABLE_ii[$122 & 63]($$lcssa)|0);
   $124 = ($123|0)==(-1);
   if ($124) {
    HEAP32[$__b>>2] = 0;
    $125 = 0;
   } else {
    $125 = $$lcssa;
   }
  } else {
   $125 = $$lcssa;
  }
 }
 $126 = ($125|0)==(0|0);
 $127 = ($$pre$i2$i$i|0)==(0|0);
 do {
  if ($127) {
   label = 55;
  } else {
   $128 = (($$pre$i2$i$i) + 12|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (($$pre$i2$i$i) + 16|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = ($129|0)==($131|0);
   if ($132) {
    $133 = HEAP32[$$pre$i2$i$i>>2]|0;
    $134 = (($133) + 36|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (FUNCTION_TABLE_ii[$135 & 63]($$pre$i2$i$i)|0);
    $137 = ($136|0)==(-1);
    if ($137) {
     HEAP32[$__e>>2] = 0;
     label = 55;
     break;
    }
   }
   if (!($126)) {
    label = 56;
   }
  }
 } while(0);
 if ((label|0) == 55) {
  if ($126) {
   label = 56;
  }
 }
 if ((label|0) == 56) {
  $138 = HEAP32[$__err>>2]|0;
  $139 = $138 | 2;
  HEAP32[$__err>>2] = $139;
 }
 HEAP32[$agg$result>>2] = $125;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i3 = 0, $$pre$i2$i$i = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre19 = 0, $$pre21 = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0;
 var $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$7,0);
 $8 = HEAP8[$__buf>>0]|0;
 $9 = $8 & 1;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  $13 = (($__buf) + 1|0);
  $$pre23 = (($__buf) + 8|0);
  $$pre$phi22Z2D = $13;$$pre$phi24Z2D = $$pre23;$14 = $13;
 } else {
  $11 = (($__buf) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $$pre21 = (($__buf) + 1|0);
  $$pre$phi22Z2D = $$pre21;$$pre$phi24Z2D = $11;$14 = $12;
 }
 HEAP32[$__a_end>>2] = $14;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 HEAP8[$__in_units>>0] = 1;
 HEAP8[$__exp>>0] = 69;
 $15 = (($__buf) + 4|0);
 $16 = HEAP8[$__decimal_point>>0]|0;
 $17 = HEAP8[$__thousands_sep>>0]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i3 = $$pre;$__a$0 = $14;
 L12: while(1) {
  $18 = ($$pre$i$i$i3|0)==(0|0);
  if ($18) {
   $29 = 0;
  } else {
   $19 = (($$pre$i$i$i3) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($$pre$i$i$i3) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($20|0)==($22|0);
   if ($23) {
    $24 = HEAP32[$$pre$i$i$i3>>2]|0;
    $25 = (($24) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (FUNCTION_TABLE_ii[$26 & 63]($$pre$i$i$i3)|0);
    $28 = ($27|0)==(-1);
    if ($28) {
     HEAP32[$__b>>2] = 0;
     $29 = 0;
    } else {
     $29 = $$pre$i$i$i3;
    }
   } else {
    $29 = $$pre$i$i$i3;
   }
  }
  $30 = ($29|0)==(0|0);
  $31 = HEAP32[$__e>>2]|0;
  $32 = ($31|0)==(0|0);
  do {
   if ($32) {
    label = 19;
   } else {
    $33 = (($31) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($31) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if (!($37)) {
     if ($30) {
      $140 = $31;
      break;
     } else {
      $$lcssa = $29;$$pre$i2$i$i = $31;$__a$2 = $__a$0;
      break L12;
     }
    }
    $38 = HEAP32[$31>>2]|0;
    $39 = (($38) + 36|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (FUNCTION_TABLE_ii[$40 & 63]($31)|0);
    $42 = ($41|0)==(-1);
    if ($42) {
     HEAP32[$__e>>2] = 0;
     label = 19;
     break;
    } else {
     if ($30) {
      $140 = $31;
      break;
     } else {
      $$lcssa = $29;$$pre$i2$i$i = $31;$__a$2 = $__a$0;
      break L12;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($30) {
    $$lcssa = $29;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $140 = 0;
   }
  }
  $43 = HEAP32[$__a_end>>2]|0;
  $44 = HEAP8[$__buf>>0]|0;
  $45 = $44 & 1;
  $46 = ($45<<24>>24)==(0);
  if ($46) {
   $48 = $44&255;
   $49 = $48 >>> 1;
   $51 = $49;
  } else {
   $47 = HEAP32[$15>>2]|0;
   $51 = $47;
  }
  $50 = (($__a$0) + ($51)|0);
  $52 = ($43|0)==($50|0);
  if ($52) {
   if ($46) {
    $54 = $44&255;
    $55 = $54 >>> 1;
    $56 = $44&255;
    $57 = $56 >>> 1;
    $59 = $57;$72 = $55;
   } else {
    $53 = HEAP32[$15>>2]|0;
    $59 = $53;$72 = $53;
   }
   $58 = $59 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$58,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = 10;
   } else {
    $63 = HEAP32[$__buf>>2]|0;
    $64 = $63 & -2;
    $phitmp$i13 = (($64) + -1)|0;
    $65 = $phitmp$i13;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$65,0);
   $66 = HEAP8[$__buf>>0]|0;
   $67 = $66 & 1;
   $68 = ($67<<24>>24)==(0);
   if ($68) {
    $71 = $$pre$phi22Z2D;
   } else {
    $69 = HEAP32[$$pre$phi24Z2D>>2]|0;
    $71 = $69;
   }
   $70 = (($71) + ($72)|0);
   HEAP32[$__a_end>>2] = $70;
   $__a$1 = $71;
  } else {
   $__a$1 = $__a$0;
  }
  $73 = (($29) + 12|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($29) + 16|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($74|0)==($76|0);
  if ($77) {
   $78 = HEAP32[$29>>2]|0;
   $79 = (($78) + 36|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (FUNCTION_TABLE_ii[$80 & 63]($29)|0);
   $$0$i$i = $81;
  } else {
   $82 = HEAP8[$74>>0]|0;
   $83 = $82&255;
   $$0$i$i = $83;
  }
  $84 = $$0$i$i&255;
  $85 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($84,$__in_units,$__exp,$__a$1,$__a_end,$16,$17,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
  $86 = ($85|0)==(0);
  if (!($86)) {
   $$lcssa = $29;$$pre$i2$i$i = $140;$__a$2 = $__a$1;
   break;
  }
  $87 = HEAP32[$73>>2]|0;
  $88 = HEAP32[$75>>2]|0;
  $89 = ($87|0)==($88|0);
  if ($89) {
   $90 = HEAP32[$29>>2]|0;
   $91 = (($90) + 40|0);
   $92 = HEAP32[$91>>2]|0;
   (FUNCTION_TABLE_ii[$92 & 63]($29)|0);
   $$pre$i$i$i3 = $29;$__a$0 = $__a$1;
   continue;
  } else {
   $93 = (($87) + 1|0);
   HEAP32[$73>>2] = $93;
   $$pre$i$i$i3 = $29;$__a$0 = $__a$1;
   continue;
  }
 }
 $94 = HEAP8[$__grouping>>0]|0;
 $95 = $94 & 1;
 $96 = ($95<<24>>24)==(0);
 if ($96) {
  $99 = $94&255;
  $100 = $99 >>> 1;
  $101 = $100;
 } else {
  $97 = (($__grouping) + 4|0);
  $98 = HEAP32[$97>>2]|0;
  $101 = $98;
 }
 $102 = ($101|0)==(0);
 $103 = HEAP8[$__in_units>>0]|0;
 $104 = ($103<<24>>24)==(0);
 $or$cond = $102 | $104;
 $$pre19 = HEAP32[$__g_end>>2]|0;
 if ($or$cond) {
  $113 = $$pre19;
 } else {
  $105 = $$pre19;
  $106 = $__g;
  $107 = (($105) - ($106))|0;
  $108 = ($107|0)<(160);
  if ($108) {
   $109 = HEAP32[$__dc>>2]|0;
   $110 = (($$pre19) + 4|0);
   HEAP32[$__g_end>>2] = $110;
   HEAP32[$$pre19>>2] = $109;
   $113 = $110;
  } else {
   $113 = $$pre19;
  }
 }
 $111 = HEAP32[$__a_end>>2]|0;
 $112 = (+__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a$2,$111,$__err));
 HEAPF64[$__v>>3] = $112;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$113,$__err);
 $114 = ($$lcssa|0)==(0|0);
 if ($114) {
  $125 = 0;
 } else {
  $115 = (($$lcssa) + 12|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (($$lcssa) + 16|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ($116|0)==($118|0);
  if ($119) {
   $120 = HEAP32[$$lcssa>>2]|0;
   $121 = (($120) + 36|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (FUNCTION_TABLE_ii[$122 & 63]($$lcssa)|0);
   $124 = ($123|0)==(-1);
   if ($124) {
    HEAP32[$__b>>2] = 0;
    $125 = 0;
   } else {
    $125 = $$lcssa;
   }
  } else {
   $125 = $$lcssa;
  }
 }
 $126 = ($125|0)==(0|0);
 $127 = ($$pre$i2$i$i|0)==(0|0);
 do {
  if ($127) {
   label = 55;
  } else {
   $128 = (($$pre$i2$i$i) + 12|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (($$pre$i2$i$i) + 16|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = ($129|0)==($131|0);
   if ($132) {
    $133 = HEAP32[$$pre$i2$i$i>>2]|0;
    $134 = (($133) + 36|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (FUNCTION_TABLE_ii[$135 & 63]($$pre$i2$i$i)|0);
    $137 = ($136|0)==(-1);
    if ($137) {
     HEAP32[$__e>>2] = 0;
     label = 55;
     break;
    }
   }
   if (!($126)) {
    label = 56;
   }
  }
 } while(0);
 if ((label|0) == 55) {
  if ($126) {
   label = 56;
  }
 }
 if ((label|0) == 56) {
  $138 = HEAP32[$__err>>2]|0;
  $139 = $138 | 2;
  HEAP32[$__err>>2] = $139;
 }
 HEAP32[$agg$result>>2] = $125;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i3 = 0, $$pre$i2$i$i = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre19 = 0, $$pre21 = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0;
 var $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$7,0);
 $8 = HEAP8[$__buf>>0]|0;
 $9 = $8 & 1;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  $13 = (($__buf) + 1|0);
  $$pre23 = (($__buf) + 8|0);
  $$pre$phi22Z2D = $13;$$pre$phi24Z2D = $$pre23;$14 = $13;
 } else {
  $11 = (($__buf) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $$pre21 = (($__buf) + 1|0);
  $$pre$phi22Z2D = $$pre21;$$pre$phi24Z2D = $11;$14 = $12;
 }
 HEAP32[$__a_end>>2] = $14;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 HEAP8[$__in_units>>0] = 1;
 HEAP8[$__exp>>0] = 69;
 $15 = (($__buf) + 4|0);
 $16 = HEAP8[$__decimal_point>>0]|0;
 $17 = HEAP8[$__thousands_sep>>0]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i3 = $$pre;$__a$0 = $14;
 L12: while(1) {
  $18 = ($$pre$i$i$i3|0)==(0|0);
  if ($18) {
   $29 = 0;
  } else {
   $19 = (($$pre$i$i$i3) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($$pre$i$i$i3) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($20|0)==($22|0);
   if ($23) {
    $24 = HEAP32[$$pre$i$i$i3>>2]|0;
    $25 = (($24) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (FUNCTION_TABLE_ii[$26 & 63]($$pre$i$i$i3)|0);
    $28 = ($27|0)==(-1);
    if ($28) {
     HEAP32[$__b>>2] = 0;
     $29 = 0;
    } else {
     $29 = $$pre$i$i$i3;
    }
   } else {
    $29 = $$pre$i$i$i3;
   }
  }
  $30 = ($29|0)==(0|0);
  $31 = HEAP32[$__e>>2]|0;
  $32 = ($31|0)==(0|0);
  do {
   if ($32) {
    label = 19;
   } else {
    $33 = (($31) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($31) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($34|0)==($36|0);
    if (!($37)) {
     if ($30) {
      $140 = $31;
      break;
     } else {
      $$lcssa = $29;$$pre$i2$i$i = $31;$__a$2 = $__a$0;
      break L12;
     }
    }
    $38 = HEAP32[$31>>2]|0;
    $39 = (($38) + 36|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (FUNCTION_TABLE_ii[$40 & 63]($31)|0);
    $42 = ($41|0)==(-1);
    if ($42) {
     HEAP32[$__e>>2] = 0;
     label = 19;
     break;
    } else {
     if ($30) {
      $140 = $31;
      break;
     } else {
      $$lcssa = $29;$$pre$i2$i$i = $31;$__a$2 = $__a$0;
      break L12;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   if ($30) {
    $$lcssa = $29;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $140 = 0;
   }
  }
  $43 = HEAP32[$__a_end>>2]|0;
  $44 = HEAP8[$__buf>>0]|0;
  $45 = $44 & 1;
  $46 = ($45<<24>>24)==(0);
  if ($46) {
   $48 = $44&255;
   $49 = $48 >>> 1;
   $51 = $49;
  } else {
   $47 = HEAP32[$15>>2]|0;
   $51 = $47;
  }
  $50 = (($__a$0) + ($51)|0);
  $52 = ($43|0)==($50|0);
  if ($52) {
   if ($46) {
    $54 = $44&255;
    $55 = $54 >>> 1;
    $56 = $44&255;
    $57 = $56 >>> 1;
    $59 = $57;$72 = $55;
   } else {
    $53 = HEAP32[$15>>2]|0;
    $59 = $53;$72 = $53;
   }
   $58 = $59 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$58,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = 10;
   } else {
    $63 = HEAP32[$__buf>>2]|0;
    $64 = $63 & -2;
    $phitmp$i13 = (($64) + -1)|0;
    $65 = $phitmp$i13;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$65,0);
   $66 = HEAP8[$__buf>>0]|0;
   $67 = $66 & 1;
   $68 = ($67<<24>>24)==(0);
   if ($68) {
    $71 = $$pre$phi22Z2D;
   } else {
    $69 = HEAP32[$$pre$phi24Z2D>>2]|0;
    $71 = $69;
   }
   $70 = (($71) + ($72)|0);
   HEAP32[$__a_end>>2] = $70;
   $__a$1 = $71;
  } else {
   $__a$1 = $__a$0;
  }
  $73 = (($29) + 12|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($29) + 16|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($74|0)==($76|0);
  if ($77) {
   $78 = HEAP32[$29>>2]|0;
   $79 = (($78) + 36|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (FUNCTION_TABLE_ii[$80 & 63]($29)|0);
   $$0$i$i = $81;
  } else {
   $82 = HEAP8[$74>>0]|0;
   $83 = $82&255;
   $$0$i$i = $83;
  }
  $84 = $$0$i$i&255;
  $85 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($84,$__in_units,$__exp,$__a$1,$__a_end,$16,$17,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
  $86 = ($85|0)==(0);
  if (!($86)) {
   $$lcssa = $29;$$pre$i2$i$i = $140;$__a$2 = $__a$1;
   break;
  }
  $87 = HEAP32[$73>>2]|0;
  $88 = HEAP32[$75>>2]|0;
  $89 = ($87|0)==($88|0);
  if ($89) {
   $90 = HEAP32[$29>>2]|0;
   $91 = (($90) + 40|0);
   $92 = HEAP32[$91>>2]|0;
   (FUNCTION_TABLE_ii[$92 & 63]($29)|0);
   $$pre$i$i$i3 = $29;$__a$0 = $__a$1;
   continue;
  } else {
   $93 = (($87) + 1|0);
   HEAP32[$73>>2] = $93;
   $$pre$i$i$i3 = $29;$__a$0 = $__a$1;
   continue;
  }
 }
 $94 = HEAP8[$__grouping>>0]|0;
 $95 = $94 & 1;
 $96 = ($95<<24>>24)==(0);
 if ($96) {
  $99 = $94&255;
  $100 = $99 >>> 1;
  $101 = $100;
 } else {
  $97 = (($__grouping) + 4|0);
  $98 = HEAP32[$97>>2]|0;
  $101 = $98;
 }
 $102 = ($101|0)==(0);
 $103 = HEAP8[$__in_units>>0]|0;
 $104 = ($103<<24>>24)==(0);
 $or$cond = $102 | $104;
 $$pre19 = HEAP32[$__g_end>>2]|0;
 if ($or$cond) {
  $113 = $$pre19;
 } else {
  $105 = $$pre19;
  $106 = $__g;
  $107 = (($105) - ($106))|0;
  $108 = ($107|0)<(160);
  if ($108) {
   $109 = HEAP32[$__dc>>2]|0;
   $110 = (($$pre19) + 4|0);
   HEAP32[$__g_end>>2] = $110;
   HEAP32[$$pre19>>2] = $109;
   $113 = $110;
  } else {
   $113 = $$pre19;
  }
 }
 $111 = HEAP32[$__a_end>>2]|0;
 $112 = (+__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a$2,$111,$__err));
 HEAPF64[$__v>>3] = $112;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$113,$__err);
 $114 = ($$lcssa|0)==(0|0);
 if ($114) {
  $125 = 0;
 } else {
  $115 = (($$lcssa) + 12|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (($$lcssa) + 16|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ($116|0)==($118|0);
  if ($119) {
   $120 = HEAP32[$$lcssa>>2]|0;
   $121 = (($120) + 36|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (FUNCTION_TABLE_ii[$122 & 63]($$lcssa)|0);
   $124 = ($123|0)==(-1);
   if ($124) {
    HEAP32[$__b>>2] = 0;
    $125 = 0;
   } else {
    $125 = $$lcssa;
   }
  } else {
   $125 = $$lcssa;
  }
 }
 $126 = ($125|0)==(0|0);
 $127 = ($$pre$i2$i$i|0)==(0|0);
 do {
  if ($127) {
   label = 55;
  } else {
   $128 = (($$pre$i2$i$i) + 12|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (($$pre$i2$i$i) + 16|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = ($129|0)==($131|0);
   if ($132) {
    $133 = HEAP32[$$pre$i2$i$i>>2]|0;
    $134 = (($133) + 36|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (FUNCTION_TABLE_ii[$135 & 63]($$pre$i2$i$i)|0);
    $137 = ($136|0)==(-1);
    if ($137) {
     HEAP32[$__e>>2] = 0;
     label = 55;
     break;
    }
   }
   if (!($126)) {
    label = 56;
   }
  }
 } while(0);
 if ((label|0) == 55) {
  if ($126) {
   label = 56;
  }
 }
 if ((label|0) == 56) {
  $138 = HEAP32[$__err>>2]|0;
  $139 = $138 | 2;
  HEAP32[$__err>>2] = $139;
 }
 HEAP32[$agg$result>>2] = $125;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsscanf($__s,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if (!($2)) {
  (_uselocale(($0|0))|0);
 }
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$025 = 0, $$lcssa = 0, $$pre$i$i$i = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$i3$i$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off0 = 0, $__consume$1$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$0 = 0, $__ky1$0 = 0, $__ky2$0 = 0;
 var $__n_does_match$0 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$3 = 0, $__n_does_match$4 = 0, $__n_does_match$5 = 0, $__n_does_match$6 = 0, $__n_might_match$0 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$3 = 0, $__n_might_match$4 = 0, $__st$0 = 0, $__st$1 = 0, $__st$2 = 0, $__st$3 = 0, $__statbuf = 0, $__status$0 = 0;
 var $phitmp$i$i$i = 0, $phitmp$i$i$i6 = 0, $tmp$i$i14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   __ZSt17__throw_bad_allocv();
   // unreachable;
  } else {
   $157 = $5;$__status$0 = $5;
  }
 } else {
  $157 = 0;$__status$0 = $__statbuf;
 }
 $__ky$0 = $__kb;$__n_does_match$0 = 0;$__n_might_match$0 = $3;$__st$0 = $__status$0;
 while(1) {
  $7 = ($__ky$0|0)==($__ke|0);
  if ($7) {
   $__n_does_match$0$lcssa = $__n_does_match$0;$__n_might_match$0$lcssa = $__n_might_match$0;
   break;
  }
  $8 = HEAP8[$__ky$0>>0]|0;
  $9 = $8 & 1;
  $10 = ($9<<24>>24)==(0);
  if ($10) {
   $13 = $8&255;
   $14 = $13 >>> 1;
   $15 = $14;
  } else {
   $11 = (($__ky$0) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $15 = $12;
  }
  $16 = ($15|0)==(0);
  if ($16) {
   HEAP8[$__st$0>>0] = 2;
   $17 = (($__n_might_match$0) + -1)|0;
   $18 = (($__n_does_match$0) + 1)|0;
   $__n_does_match$1 = $18;$__n_might_match$1 = $17;
  } else {
   HEAP8[$__st$0>>0] = 1;
   $__n_does_match$1 = $__n_does_match$0;$__n_might_match$1 = $__n_might_match$0;
  }
  $19 = (($__ky$0) + 12|0);
  $20 = (($__st$0) + 1|0);
  $__ky$0 = $19;$__n_does_match$0 = $__n_does_match$1;$__n_might_match$0 = $__n_might_match$1;$__st$0 = $20;
 }
 $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
 L17: while(1) {
  $21 = HEAP32[$__b>>2]|0;
  $22 = ($21|0)==(0|0);
  do {
   if ($22) {
    $48 = 1;
   } else {
    $23 = (($21) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (($21) + 16|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($24|0)==($26|0);
    if ($27) {
     $28 = HEAP32[$21>>2]|0;
     $29 = (($28) + 36|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (FUNCTION_TABLE_ii[$30 & 63]($21)|0);
     $$0$i$i$i$i3 = $31;
    } else {
     $32 = HEAP32[$24>>2]|0;
     $$0$i$i$i$i3 = $32;
    }
    $33 = ($$0$i$i$i$i3|0)==(-1);
    if ($33) {
     HEAP32[$__b>>2] = 0;
     $48 = 1;
     break;
    } else {
     $$pre$i$i$i5 = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i6 = ($$pre$i$i$i5|0)==(0|0);
     $48 = $phitmp$i$i$i6;
     break;
    }
   }
  } while(0);
  $34 = HEAP32[$__e>>2]|0;
  $35 = ($34|0)==(0|0);
  if ($35) {
   $$pre$i3$i$i = 0;$47 = 1;
  } else {
   $36 = (($34) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($34) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($37|0)==($39|0);
   if ($40) {
    $41 = HEAP32[$34>>2]|0;
    $42 = (($41) + 36|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (FUNCTION_TABLE_ii[$43 & 63]($34)|0);
    $$0$i$i1$i$i9 = $44;
   } else {
    $45 = HEAP32[$37>>2]|0;
    $$0$i$i1$i$i9 = $45;
   }
   $46 = ($$0$i$i1$i$i9|0)==(-1);
   if ($46) {
    HEAP32[$__e>>2] = 0;
    $$pre$i3$i$i = 0;$47 = 1;
   } else {
    $$pre$i3$i$i = $34;$47 = 0;
   }
  }
  $tmp$i$i14 = $48 ^ $47;
  $49 = ($__n_might_match$2|0)!=(0);
  $$ = $49 & $tmp$i$i14;
  $50 = HEAP32[$__b>>2]|0;
  if (!($$)) {
   $$lcssa = $50;$$pre$i3$i$i$lcssa = $$pre$i3$i$i;
   break;
  }
  $51 = (($50) + 12|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($50) + 16|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)==($54|0);
  if ($55) {
   $56 = HEAP32[$50>>2]|0;
   $57 = (($56) + 36|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (FUNCTION_TABLE_ii[$58 & 63]($50)|0);
   $$0$i$i = $59;
  } else {
   $60 = HEAP32[$52>>2]|0;
   $$0$i$i = $60;
  }
  if ($__case_sensitive) {
   $__c$0 = $$0$i$i;
  } else {
   $61 = HEAP32[$__ct>>2]|0;
   $62 = (($61) + 28|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (FUNCTION_TABLE_iii[$63 & 15]($__ct,$$0$i$i)|0);
   $__c$0 = $64;
  }
  $65 = (($__indx$0) + 1)|0;
  $__consume$0$off0 = 0;$__ky1$0 = $__kb;$__n_does_match$3 = $__n_does_match$2;$__n_might_match$3 = $__n_might_match$2;$__st$1 = $__status$0;
  while(1) {
   $66 = ($__ky1$0|0)==($__ke|0);
   if ($66) {
    break;
   }
   $67 = HEAP8[$__st$1>>0]|0;
   $68 = ($67<<24>>24)==(1);
   do {
    if ($68) {
     $69 = HEAP8[$__ky1$0>>0]|0;
     $70 = $69 & 1;
     $71 = ($70<<24>>24)==(0);
     if ($71) {
      $74 = (($__ky1$0) + 4|0);
      $76 = $74;
     } else {
      $72 = (($__ky1$0) + 8|0);
      $73 = HEAP32[$72>>2]|0;
      $76 = $73;
     }
     $75 = (($76) + ($__indx$0<<2)|0);
     $77 = HEAP32[$75>>2]|0;
     if ($__case_sensitive) {
      $__kc$0 = $77;
     } else {
      $78 = HEAP32[$__ct>>2]|0;
      $79 = (($78) + 28|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = (FUNCTION_TABLE_iii[$80 & 15]($__ct,$77)|0);
      $__kc$0 = $81;
     }
     $82 = ($__c$0|0)==($__kc$0|0);
     if (!($82)) {
      HEAP8[$__st$1>>0] = 0;
      $94 = (($__n_might_match$3) + -1)|0;
      $__consume$1$off0 = $__consume$0$off0;$__n_does_match$4 = $__n_does_match$3;$__n_might_match$4 = $94;
      break;
     }
     $83 = HEAP8[$__ky1$0>>0]|0;
     $84 = $83 & 1;
     $85 = ($84<<24>>24)==(0);
     if ($85) {
      $88 = $83&255;
      $89 = $88 >>> 1;
      $90 = $89;
     } else {
      $86 = (($__ky1$0) + 4|0);
      $87 = HEAP32[$86>>2]|0;
      $90 = $87;
     }
     $91 = ($90|0)==($65|0);
     if ($91) {
      HEAP8[$__st$1>>0] = 2;
      $92 = (($__n_might_match$3) + -1)|0;
      $93 = (($__n_does_match$3) + 1)|0;
      $__consume$1$off0 = 1;$__n_does_match$4 = $93;$__n_might_match$4 = $92;
     } else {
      $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$3;$__n_might_match$4 = $__n_might_match$3;
     }
    } else {
     $__consume$1$off0 = $__consume$0$off0;$__n_does_match$4 = $__n_does_match$3;$__n_might_match$4 = $__n_might_match$3;
    }
   } while(0);
   $95 = (($__ky1$0) + 12|0);
   $96 = (($__st$1) + 1|0);
   $__consume$0$off0 = $__consume$1$off0;$__ky1$0 = $95;$__n_does_match$3 = $__n_does_match$4;$__n_might_match$3 = $__n_might_match$4;$__st$1 = $96;
  }
  if (!($__consume$0$off0)) {
   $__indx$0 = $65;$__n_does_match$2 = $__n_does_match$3;$__n_might_match$2 = $__n_might_match$3;
   continue;
  }
  $97 = HEAP32[$__b>>2]|0;
  $98 = (($97) + 12|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (($97) + 16|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = ($99|0)==($101|0);
  if ($102) {
   $103 = HEAP32[$97>>2]|0;
   $104 = (($103) + 40|0);
   $105 = HEAP32[$104>>2]|0;
   (FUNCTION_TABLE_ii[$105 & 63]($97)|0);
  } else {
   $106 = (($99) + 4|0);
   HEAP32[$98>>2] = $106;
  }
  $107 = (($__n_does_match$3) + ($__n_might_match$3))|0;
  $108 = ($107>>>0)>(1);
  if ($108) {
   $__ky2$0 = $__kb;$__n_does_match$5 = $__n_does_match$3;$__st$2 = $__status$0;
  } else {
   $__indx$0 = $65;$__n_does_match$2 = $__n_does_match$3;$__n_might_match$2 = $__n_might_match$3;
   continue;
  }
  while(1) {
   $109 = ($__ky2$0|0)==($__ke|0);
   if ($109) {
    $__indx$0 = $65;$__n_does_match$2 = $__n_does_match$5;$__n_might_match$2 = $__n_might_match$3;
    continue L17;
   }
   $110 = HEAP8[$__st$2>>0]|0;
   $111 = ($110<<24>>24)==(2);
   if ($111) {
    $112 = HEAP8[$__ky2$0>>0]|0;
    $113 = $112 & 1;
    $114 = ($113<<24>>24)==(0);
    if ($114) {
     $117 = $112&255;
     $118 = $117 >>> 1;
     $119 = $118;
    } else {
     $115 = (($__ky2$0) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     $119 = $116;
    }
    $120 = ($119|0)==($65|0);
    if ($120) {
     $__n_does_match$6 = $__n_does_match$5;
    } else {
     HEAP8[$__st$2>>0] = 0;
     $121 = (($__n_does_match$5) + -1)|0;
     $__n_does_match$6 = $121;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$5;
   }
   $122 = (($__ky2$0) + 12|0);
   $123 = (($__st$2) + 1|0);
   $__ky2$0 = $122;$__n_does_match$5 = $__n_does_match$6;$__st$2 = $123;
  }
 }
 $124 = ($$lcssa|0)==(0|0);
 do {
  if ($124) {
   $158 = 1;
  } else {
   $125 = (($$lcssa) + 12|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = (($$lcssa) + 16|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = ($126|0)==($128|0);
   if ($129) {
    $130 = HEAP32[$$lcssa>>2]|0;
    $131 = (($130) + 36|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = (FUNCTION_TABLE_ii[$132 & 63]($$lcssa)|0);
    $$0$i$i$i$i = $133;
   } else {
    $134 = HEAP32[$126>>2]|0;
    $$0$i$i$i$i = $134;
   }
   $135 = ($$0$i$i$i$i|0)==(-1);
   if ($135) {
    HEAP32[$__b>>2] = 0;
    $158 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $158 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $136 = ($$pre$i3$i$i$lcssa|0)==(0|0);
 do {
  if ($136) {
   label = 75;
  } else {
   $137 = (($$pre$i3$i$i$lcssa) + 12|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = (($$pre$i3$i$i$lcssa) + 16|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ($138|0)==($140|0);
   if ($141) {
    $142 = HEAP32[$$pre$i3$i$i$lcssa>>2]|0;
    $143 = (($142) + 36|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = (FUNCTION_TABLE_ii[$144 & 63]($$pre$i3$i$i$lcssa)|0);
    $$0$i$i1$i$i = $145;
   } else {
    $146 = HEAP32[$138>>2]|0;
    $$0$i$i1$i$i = $146;
   }
   $147 = ($$0$i$i1$i$i|0)==(-1);
   if ($147) {
    HEAP32[$__e>>2] = 0;
    label = 75;
    break;
   } else {
    if ($158) {
     $$0 = $__kb;$__st$3 = $__status$0;
     break;
    } else {
     label = 77;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 75) {
  if ($158) {
   label = 77;
  } else {
   $$0 = $__kb;$__st$3 = $__status$0;
  }
 }
 if ((label|0) == 77) {
  $148 = HEAP32[$__err>>2]|0;
  $149 = $148 | 2;
  HEAP32[$__err>>2] = $149;
  $$0 = $__kb;$__st$3 = $__status$0;
 }
 while(1) {
  $150 = ($$0|0)==($__ke|0);
  if ($150) {
   label = 81;
   break;
  }
  $151 = HEAP8[$__st$3>>0]|0;
  $152 = ($151<<24>>24)==(2);
  if ($152) {
   $$025 = $$0;
   break;
  }
  $153 = (($$0) + 12|0);
  $154 = (($__st$3) + 1|0);
  $$0 = $153;$__st$3 = $154;
 }
 if ((label|0) == 81) {
  $155 = HEAP32[$__err>>2]|0;
  $156 = $155 | 4;
  HEAP32[$__err>>2] = $156;
  $$025 = $__ke;
 }
 _free($157);
 STACKTOP = sp;return ($$025|0);
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i = 0, $$pre$phi24Z2D = 0, $$pre$phi26Z2D = 0, $$pre21 = 0, $$pre23 = 0, $$pre25 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$8,0);
 $9 = HEAP8[$__buf>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $14 = (($__buf) + 1|0);
  $$pre25 = (($__buf) + 8|0);
  $$pre$phi24Z2D = $14;$$pre$phi26Z2D = $$pre25;$15 = $14;
 } else {
  $12 = (($__buf) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $$pre23 = (($__buf) + 1|0);
  $$pre$phi24Z2D = $$pre23;$$pre$phi26Z2D = $12;$15 = $13;
 }
 HEAP32[$__a_end>>2] = $15;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $16 = (($__buf) + 4|0);
 $17 = HEAP32[$__thousands_sep>>2]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i3 = $$pre;$__a$0 = $15;
 L12: while(1) {
  $18 = ($$pre$i$i$i3|0)==(0|0);
  if ($18) {
   $138 = 1;$74 = 0;
  } else {
   $19 = (($$pre$i$i$i3) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($$pre$i$i$i3) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($20|0)==($22|0);
   if ($23) {
    $24 = HEAP32[$$pre$i$i$i3>>2]|0;
    $25 = (($24) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (FUNCTION_TABLE_ii[$26 & 63]($$pre$i$i$i3)|0);
    $$0$i$i$i$i1 = $27;
   } else {
    $28 = HEAP32[$20>>2]|0;
    $$0$i$i$i$i1 = $28;
   }
   $29 = ($$0$i$i$i$i1|0)==(-1);
   if ($29) {
    HEAP32[$__b>>2] = 0;
    $138 = 1;$74 = 0;
   } else {
    $138 = 0;$74 = $$pre$i$i$i3;
   }
  }
  $30 = HEAP32[$__e>>2]|0;
  $31 = ($30|0)==(0|0);
  do {
   if ($31) {
    label = 22;
   } else {
    $32 = (($30) + 12|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($30) + 16|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($33|0)==($35|0);
    if ($36) {
     $37 = HEAP32[$30>>2]|0;
     $38 = (($37) + 36|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (FUNCTION_TABLE_ii[$39 & 63]($30)|0);
     $$0$i$i1$i$i7 = $40;
    } else {
     $41 = HEAP32[$33>>2]|0;
     $$0$i$i1$i$i7 = $41;
    }
    $42 = ($$0$i$i1$i$i7|0)==(-1);
    if ($42) {
     HEAP32[$__e>>2] = 0;
     label = 22;
     break;
    } else {
     if ($138) {
      $139 = $30;
      break;
     } else {
      $$lcssa = $74;$$pre$i3$i$i = $30;$__a$2 = $__a$0;
      break L12;
     }
    }
   }
  } while(0);
  if ((label|0) == 22) {
   label = 0;
   if ($138) {
    $$lcssa = $74;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $139 = 0;
   }
  }
  $43 = HEAP32[$__a_end>>2]|0;
  $44 = HEAP8[$__buf>>0]|0;
  $45 = $44 & 1;
  $46 = ($45<<24>>24)==(0);
  if ($46) {
   $48 = $44&255;
   $49 = $48 >>> 1;
   $51 = $49;
  } else {
   $47 = HEAP32[$16>>2]|0;
   $51 = $47;
  }
  $50 = (($__a$0) + ($51)|0);
  $52 = ($43|0)==($50|0);
  if ($52) {
   if ($46) {
    $54 = $44&255;
    $55 = $54 >>> 1;
    $56 = $44&255;
    $57 = $56 >>> 1;
    $59 = $57;$72 = $55;
   } else {
    $53 = HEAP32[$16>>2]|0;
    $59 = $53;$72 = $53;
   }
   $58 = $59 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$58,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = 10;
   } else {
    $63 = HEAP32[$__buf>>2]|0;
    $64 = $63 & -2;
    $phitmp$i16 = (($64) + -1)|0;
    $65 = $phitmp$i16;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$65,0);
   $66 = HEAP8[$__buf>>0]|0;
   $67 = $66 & 1;
   $68 = ($67<<24>>24)==(0);
   if ($68) {
    $71 = $$pre$phi24Z2D;
   } else {
    $69 = HEAP32[$$pre$phi26Z2D>>2]|0;
    $71 = $69;
   }
   $70 = (($71) + ($72)|0);
   HEAP32[$__a_end>>2] = $70;
   $__a$1 = $71;
  } else {
   $__a$1 = $__a$0;
  }
  $73 = (($74) + 12|0);
  $75 = HEAP32[$73>>2]|0;
  $76 = (($74) + 16|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75|0)==($77|0);
  if ($78) {
   $79 = HEAP32[$74>>2]|0;
   $80 = (($79) + 36|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (FUNCTION_TABLE_ii[$81 & 63]($74)|0);
   $$0$i$i = $82;
  } else {
   $83 = HEAP32[$75>>2]|0;
   $$0$i$i = $83;
  }
  $84 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$17,$__grouping,$__g,$__g_end,$__atoms)|0);
  $85 = ($84|0)==(0);
  if (!($85)) {
   $$lcssa = $74;$$pre$i3$i$i = $139;$__a$2 = $__a$1;
   break;
  }
  $86 = HEAP32[$73>>2]|0;
  $87 = HEAP32[$76>>2]|0;
  $88 = ($86|0)==($87|0);
  if ($88) {
   $89 = HEAP32[$74>>2]|0;
   $90 = (($89) + 40|0);
   $91 = HEAP32[$90>>2]|0;
   (FUNCTION_TABLE_ii[$91 & 63]($74)|0);
   $$pre$i$i$i3 = $74;$__a$0 = $__a$1;
   continue;
  } else {
   $92 = (($86) + 4|0);
   HEAP32[$73>>2] = $92;
   $$pre$i$i$i3 = $74;$__a$0 = $__a$1;
   continue;
  }
 }
 $93 = HEAP8[$__grouping>>0]|0;
 $94 = $93 & 1;
 $95 = ($94<<24>>24)==(0);
 if ($95) {
  $98 = $93&255;
  $99 = $98 >>> 1;
  $100 = $99;
 } else {
  $96 = (($__grouping) + 4|0);
  $97 = HEAP32[$96>>2]|0;
  $100 = $97;
 }
 $101 = ($100|0)==(0);
 $$pre21 = HEAP32[$__g_end>>2]|0;
 if ($101) {
  $110 = $$pre21;
 } else {
  $102 = $$pre21;
  $103 = $__g;
  $104 = (($102) - ($103))|0;
  $105 = ($104|0)<(160);
  if ($105) {
   $106 = HEAP32[$__dc>>2]|0;
   $107 = (($$pre21) + 4|0);
   HEAP32[$__g_end>>2] = $107;
   HEAP32[$$pre21>>2] = $106;
   $110 = $107;
  } else {
   $110 = $$pre21;
  }
 }
 $108 = HEAP32[$__a_end>>2]|0;
 $109 = (__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a$2,$108,$__err,$0)|0);
 HEAP32[$__v>>2] = $109;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$110,$__err);
 $111 = ($$lcssa|0)==(0|0);
 if ($111) {
  $137 = 0;$140 = 1;
 } else {
  $112 = (($$lcssa) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($$lcssa) + 16|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($113|0)==($115|0);
  if ($116) {
   $117 = HEAP32[$$lcssa>>2]|0;
   $118 = (($117) + 36|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (FUNCTION_TABLE_ii[$119 & 63]($$lcssa)|0);
   $$0$i$i$i$i = $120;
  } else {
   $121 = HEAP32[$113>>2]|0;
   $$0$i$i$i$i = $121;
  }
  $122 = ($$0$i$i$i$i|0)==(-1);
  if ($122) {
   HEAP32[$__b>>2] = 0;
   $137 = 0;$140 = 1;
  } else {
   $137 = $$lcssa;$140 = 0;
  }
 }
 $123 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($123) {
   label = 61;
  } else {
   $124 = (($$pre$i3$i$i) + 12|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (($$pre$i3$i$i) + 16|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ($125|0)==($127|0);
   if ($128) {
    $129 = HEAP32[$$pre$i3$i$i>>2]|0;
    $130 = (($129) + 36|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (FUNCTION_TABLE_ii[$131 & 63]($$pre$i3$i$i)|0);
    $$0$i$i1$i$i = $132;
   } else {
    $133 = HEAP32[$125>>2]|0;
    $$0$i$i1$i$i = $133;
   }
   $134 = ($$0$i$i1$i$i|0)==(-1);
   if ($134) {
    HEAP32[$__e>>2] = 0;
    label = 61;
    break;
   } else {
    if ($140) {
     break;
    } else {
     label = 63;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 61) {
  if ($140) {
   label = 63;
  }
 }
 if ((label|0) == 63) {
  $135 = HEAP32[$__err>>2]|0;
  $136 = $135 | 2;
  HEAP32[$__err>>2] = $136;
 }
 HEAP32[$agg$result>>2] = $137;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i = 0, $$pre$phi24Z2D = 0, $$pre$phi26Z2D = 0, $$pre21 = 0, $$pre23 = 0, $$pre25 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$8,0);
 $9 = HEAP8[$__buf>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $14 = (($__buf) + 1|0);
  $$pre25 = (($__buf) + 8|0);
  $$pre$phi24Z2D = $14;$$pre$phi26Z2D = $$pre25;$15 = $14;
 } else {
  $12 = (($__buf) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $$pre23 = (($__buf) + 1|0);
  $$pre$phi24Z2D = $$pre23;$$pre$phi26Z2D = $12;$15 = $13;
 }
 HEAP32[$__a_end>>2] = $15;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $16 = (($__buf) + 4|0);
 $17 = HEAP32[$__thousands_sep>>2]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i3 = $$pre;$__a$0 = $15;
 L12: while(1) {
  $18 = ($$pre$i$i$i3|0)==(0|0);
  if ($18) {
   $143 = 1;$74 = 0;
  } else {
   $19 = (($$pre$i$i$i3) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($$pre$i$i$i3) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($20|0)==($22|0);
   if ($23) {
    $24 = HEAP32[$$pre$i$i$i3>>2]|0;
    $25 = (($24) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (FUNCTION_TABLE_ii[$26 & 63]($$pre$i$i$i3)|0);
    $$0$i$i$i$i1 = $27;
   } else {
    $28 = HEAP32[$20>>2]|0;
    $$0$i$i$i$i1 = $28;
   }
   $29 = ($$0$i$i$i$i1|0)==(-1);
   if ($29) {
    HEAP32[$__b>>2] = 0;
    $143 = 1;$74 = 0;
   } else {
    $143 = 0;$74 = $$pre$i$i$i3;
   }
  }
  $30 = HEAP32[$__e>>2]|0;
  $31 = ($30|0)==(0|0);
  do {
   if ($31) {
    label = 22;
   } else {
    $32 = (($30) + 12|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($30) + 16|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($33|0)==($35|0);
    if ($36) {
     $37 = HEAP32[$30>>2]|0;
     $38 = (($37) + 36|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (FUNCTION_TABLE_ii[$39 & 63]($30)|0);
     $$0$i$i1$i$i7 = $40;
    } else {
     $41 = HEAP32[$33>>2]|0;
     $$0$i$i1$i$i7 = $41;
    }
    $42 = ($$0$i$i1$i$i7|0)==(-1);
    if ($42) {
     HEAP32[$__e>>2] = 0;
     label = 22;
     break;
    } else {
     if ($143) {
      $144 = $30;
      break;
     } else {
      $$lcssa = $74;$$pre$i3$i$i = $30;$__a$2 = $__a$0;
      break L12;
     }
    }
   }
  } while(0);
  if ((label|0) == 22) {
   label = 0;
   if ($143) {
    $$lcssa = $74;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $144 = 0;
   }
  }
  $43 = HEAP32[$__a_end>>2]|0;
  $44 = HEAP8[$__buf>>0]|0;
  $45 = $44 & 1;
  $46 = ($45<<24>>24)==(0);
  if ($46) {
   $48 = $44&255;
   $49 = $48 >>> 1;
   $51 = $49;
  } else {
   $47 = HEAP32[$16>>2]|0;
   $51 = $47;
  }
  $50 = (($__a$0) + ($51)|0);
  $52 = ($43|0)==($50|0);
  if ($52) {
   if ($46) {
    $54 = $44&255;
    $55 = $54 >>> 1;
    $56 = $44&255;
    $57 = $56 >>> 1;
    $59 = $57;$72 = $55;
   } else {
    $53 = HEAP32[$16>>2]|0;
    $59 = $53;$72 = $53;
   }
   $58 = $59 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$58,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = 10;
   } else {
    $63 = HEAP32[$__buf>>2]|0;
    $64 = $63 & -2;
    $phitmp$i16 = (($64) + -1)|0;
    $65 = $phitmp$i16;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$65,0);
   $66 = HEAP8[$__buf>>0]|0;
   $67 = $66 & 1;
   $68 = ($67<<24>>24)==(0);
   if ($68) {
    $71 = $$pre$phi24Z2D;
   } else {
    $69 = HEAP32[$$pre$phi26Z2D>>2]|0;
    $71 = $69;
   }
   $70 = (($71) + ($72)|0);
   HEAP32[$__a_end>>2] = $70;
   $__a$1 = $71;
  } else {
   $__a$1 = $__a$0;
  }
  $73 = (($74) + 12|0);
  $75 = HEAP32[$73>>2]|0;
  $76 = (($74) + 16|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75|0)==($77|0);
  if ($78) {
   $79 = HEAP32[$74>>2]|0;
   $80 = (($79) + 36|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (FUNCTION_TABLE_ii[$81 & 63]($74)|0);
   $$0$i$i = $82;
  } else {
   $83 = HEAP32[$75>>2]|0;
   $$0$i$i = $83;
  }
  $84 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$17,$__grouping,$__g,$__g_end,$__atoms)|0);
  $85 = ($84|0)==(0);
  if (!($85)) {
   $$lcssa = $74;$$pre$i3$i$i = $144;$__a$2 = $__a$1;
   break;
  }
  $86 = HEAP32[$73>>2]|0;
  $87 = HEAP32[$76>>2]|0;
  $88 = ($86|0)==($87|0);
  if ($88) {
   $89 = HEAP32[$74>>2]|0;
   $90 = (($89) + 40|0);
   $91 = HEAP32[$90>>2]|0;
   (FUNCTION_TABLE_ii[$91 & 63]($74)|0);
   $$pre$i$i$i3 = $74;$__a$0 = $__a$1;
   continue;
  } else {
   $92 = (($86) + 4|0);
   HEAP32[$73>>2] = $92;
   $$pre$i$i$i3 = $74;$__a$0 = $__a$1;
   continue;
  }
 }
 $93 = HEAP8[$__grouping>>0]|0;
 $94 = $93 & 1;
 $95 = ($94<<24>>24)==(0);
 if ($95) {
  $98 = $93&255;
  $99 = $98 >>> 1;
  $100 = $99;
 } else {
  $96 = (($__grouping) + 4|0);
  $97 = HEAP32[$96>>2]|0;
  $100 = $97;
 }
 $101 = ($100|0)==(0);
 $$pre21 = HEAP32[$__g_end>>2]|0;
 if ($101) {
  $115 = $$pre21;
 } else {
  $102 = $$pre21;
  $103 = $__g;
  $104 = (($102) - ($103))|0;
  $105 = ($104|0)<(160);
  if ($105) {
   $106 = HEAP32[$__dc>>2]|0;
   $107 = (($$pre21) + 4|0);
   HEAP32[$__g_end>>2] = $107;
   HEAP32[$$pre21>>2] = $106;
   $115 = $107;
  } else {
   $115 = $$pre21;
  }
 }
 $108 = HEAP32[$__a_end>>2]|0;
 $109 = (__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a$2,$108,$__err,$0)|0);
 $110 = tempRet0;
 $111 = $__v;
 $112 = $111;
 HEAP32[$112>>2] = $109;
 $113 = (($111) + 4)|0;
 $114 = $113;
 HEAP32[$114>>2] = $110;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$115,$__err);
 $116 = ($$lcssa|0)==(0|0);
 if ($116) {
  $142 = 0;$145 = 1;
 } else {
  $117 = (($$lcssa) + 12|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($$lcssa) + 16|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ($118|0)==($120|0);
  if ($121) {
   $122 = HEAP32[$$lcssa>>2]|0;
   $123 = (($122) + 36|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (FUNCTION_TABLE_ii[$124 & 63]($$lcssa)|0);
   $$0$i$i$i$i = $125;
  } else {
   $126 = HEAP32[$118>>2]|0;
   $$0$i$i$i$i = $126;
  }
  $127 = ($$0$i$i$i$i|0)==(-1);
  if ($127) {
   HEAP32[$__b>>2] = 0;
   $142 = 0;$145 = 1;
  } else {
   $142 = $$lcssa;$145 = 0;
  }
 }
 $128 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($128) {
   label = 61;
  } else {
   $129 = (($$pre$i3$i$i) + 12|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (($$pre$i3$i$i) + 16|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ($130|0)==($132|0);
   if ($133) {
    $134 = HEAP32[$$pre$i3$i$i>>2]|0;
    $135 = (($134) + 36|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = (FUNCTION_TABLE_ii[$136 & 63]($$pre$i3$i$i)|0);
    $$0$i$i1$i$i = $137;
   } else {
    $138 = HEAP32[$130>>2]|0;
    $$0$i$i1$i$i = $138;
   }
   $139 = ($$0$i$i1$i$i|0)==(-1);
   if ($139) {
    HEAP32[$__e>>2] = 0;
    label = 61;
    break;
   } else {
    if ($145) {
     break;
    } else {
     label = 63;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 61) {
  if ($145) {
   label = 63;
  }
 }
 if ((label|0) == 63) {
  $140 = HEAP32[$__err>>2]|0;
  $141 = $140 | 2;
  HEAP32[$__err>>2] = $141;
 }
 HEAP32[$agg$result>>2] = $142;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i = 0, $$pre$phi24Z2D = 0, $$pre$phi26Z2D = 0, $$pre21 = 0, $$pre23 = 0, $$pre25 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$8,0);
 $9 = HEAP8[$__buf>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $14 = (($__buf) + 1|0);
  $$pre25 = (($__buf) + 8|0);
  $$pre$phi24Z2D = $14;$$pre$phi26Z2D = $$pre25;$15 = $14;
 } else {
  $12 = (($__buf) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $$pre23 = (($__buf) + 1|0);
  $$pre$phi24Z2D = $$pre23;$$pre$phi26Z2D = $12;$15 = $13;
 }
 HEAP32[$__a_end>>2] = $15;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $16 = (($__buf) + 4|0);
 $17 = HEAP32[$__thousands_sep>>2]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i3 = $$pre;$__a$0 = $15;
 L12: while(1) {
  $18 = ($$pre$i$i$i3|0)==(0|0);
  if ($18) {
   $138 = 1;$74 = 0;
  } else {
   $19 = (($$pre$i$i$i3) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($$pre$i$i$i3) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($20|0)==($22|0);
   if ($23) {
    $24 = HEAP32[$$pre$i$i$i3>>2]|0;
    $25 = (($24) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (FUNCTION_TABLE_ii[$26 & 63]($$pre$i$i$i3)|0);
    $$0$i$i$i$i1 = $27;
   } else {
    $28 = HEAP32[$20>>2]|0;
    $$0$i$i$i$i1 = $28;
   }
   $29 = ($$0$i$i$i$i1|0)==(-1);
   if ($29) {
    HEAP32[$__b>>2] = 0;
    $138 = 1;$74 = 0;
   } else {
    $138 = 0;$74 = $$pre$i$i$i3;
   }
  }
  $30 = HEAP32[$__e>>2]|0;
  $31 = ($30|0)==(0|0);
  do {
   if ($31) {
    label = 22;
   } else {
    $32 = (($30) + 12|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($30) + 16|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($33|0)==($35|0);
    if ($36) {
     $37 = HEAP32[$30>>2]|0;
     $38 = (($37) + 36|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (FUNCTION_TABLE_ii[$39 & 63]($30)|0);
     $$0$i$i1$i$i7 = $40;
    } else {
     $41 = HEAP32[$33>>2]|0;
     $$0$i$i1$i$i7 = $41;
    }
    $42 = ($$0$i$i1$i$i7|0)==(-1);
    if ($42) {
     HEAP32[$__e>>2] = 0;
     label = 22;
     break;
    } else {
     if ($138) {
      $139 = $30;
      break;
     } else {
      $$lcssa = $74;$$pre$i3$i$i = $30;$__a$2 = $__a$0;
      break L12;
     }
    }
   }
  } while(0);
  if ((label|0) == 22) {
   label = 0;
   if ($138) {
    $$lcssa = $74;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $139 = 0;
   }
  }
  $43 = HEAP32[$__a_end>>2]|0;
  $44 = HEAP8[$__buf>>0]|0;
  $45 = $44 & 1;
  $46 = ($45<<24>>24)==(0);
  if ($46) {
   $48 = $44&255;
   $49 = $48 >>> 1;
   $51 = $49;
  } else {
   $47 = HEAP32[$16>>2]|0;
   $51 = $47;
  }
  $50 = (($__a$0) + ($51)|0);
  $52 = ($43|0)==($50|0);
  if ($52) {
   if ($46) {
    $54 = $44&255;
    $55 = $54 >>> 1;
    $56 = $44&255;
    $57 = $56 >>> 1;
    $59 = $57;$72 = $55;
   } else {
    $53 = HEAP32[$16>>2]|0;
    $59 = $53;$72 = $53;
   }
   $58 = $59 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$58,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = 10;
   } else {
    $63 = HEAP32[$__buf>>2]|0;
    $64 = $63 & -2;
    $phitmp$i16 = (($64) + -1)|0;
    $65 = $phitmp$i16;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$65,0);
   $66 = HEAP8[$__buf>>0]|0;
   $67 = $66 & 1;
   $68 = ($67<<24>>24)==(0);
   if ($68) {
    $71 = $$pre$phi24Z2D;
   } else {
    $69 = HEAP32[$$pre$phi26Z2D>>2]|0;
    $71 = $69;
   }
   $70 = (($71) + ($72)|0);
   HEAP32[$__a_end>>2] = $70;
   $__a$1 = $71;
  } else {
   $__a$1 = $__a$0;
  }
  $73 = (($74) + 12|0);
  $75 = HEAP32[$73>>2]|0;
  $76 = (($74) + 16|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75|0)==($77|0);
  if ($78) {
   $79 = HEAP32[$74>>2]|0;
   $80 = (($79) + 36|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (FUNCTION_TABLE_ii[$81 & 63]($74)|0);
   $$0$i$i = $82;
  } else {
   $83 = HEAP32[$75>>2]|0;
   $$0$i$i = $83;
  }
  $84 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$17,$__grouping,$__g,$__g_end,$__atoms)|0);
  $85 = ($84|0)==(0);
  if (!($85)) {
   $$lcssa = $74;$$pre$i3$i$i = $139;$__a$2 = $__a$1;
   break;
  }
  $86 = HEAP32[$73>>2]|0;
  $87 = HEAP32[$76>>2]|0;
  $88 = ($86|0)==($87|0);
  if ($88) {
   $89 = HEAP32[$74>>2]|0;
   $90 = (($89) + 40|0);
   $91 = HEAP32[$90>>2]|0;
   (FUNCTION_TABLE_ii[$91 & 63]($74)|0);
   $$pre$i$i$i3 = $74;$__a$0 = $__a$1;
   continue;
  } else {
   $92 = (($86) + 4|0);
   HEAP32[$73>>2] = $92;
   $$pre$i$i$i3 = $74;$__a$0 = $__a$1;
   continue;
  }
 }
 $93 = HEAP8[$__grouping>>0]|0;
 $94 = $93 & 1;
 $95 = ($94<<24>>24)==(0);
 if ($95) {
  $98 = $93&255;
  $99 = $98 >>> 1;
  $100 = $99;
 } else {
  $96 = (($__grouping) + 4|0);
  $97 = HEAP32[$96>>2]|0;
  $100 = $97;
 }
 $101 = ($100|0)==(0);
 $$pre21 = HEAP32[$__g_end>>2]|0;
 if ($101) {
  $110 = $$pre21;
 } else {
  $102 = $$pre21;
  $103 = $__g;
  $104 = (($102) - ($103))|0;
  $105 = ($104|0)<(160);
  if ($105) {
   $106 = HEAP32[$__dc>>2]|0;
   $107 = (($$pre21) + 4|0);
   HEAP32[$__g_end>>2] = $107;
   HEAP32[$$pre21>>2] = $106;
   $110 = $107;
  } else {
   $110 = $$pre21;
  }
 }
 $108 = HEAP32[$__a_end>>2]|0;
 $109 = (__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a$2,$108,$__err,$0)|0);
 HEAP16[$__v>>1] = $109;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$110,$__err);
 $111 = ($$lcssa|0)==(0|0);
 if ($111) {
  $137 = 0;$140 = 1;
 } else {
  $112 = (($$lcssa) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($$lcssa) + 16|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($113|0)==($115|0);
  if ($116) {
   $117 = HEAP32[$$lcssa>>2]|0;
   $118 = (($117) + 36|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (FUNCTION_TABLE_ii[$119 & 63]($$lcssa)|0);
   $$0$i$i$i$i = $120;
  } else {
   $121 = HEAP32[$113>>2]|0;
   $$0$i$i$i$i = $121;
  }
  $122 = ($$0$i$i$i$i|0)==(-1);
  if ($122) {
   HEAP32[$__b>>2] = 0;
   $137 = 0;$140 = 1;
  } else {
   $137 = $$lcssa;$140 = 0;
  }
 }
 $123 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($123) {
   label = 61;
  } else {
   $124 = (($$pre$i3$i$i) + 12|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (($$pre$i3$i$i) + 16|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ($125|0)==($127|0);
   if ($128) {
    $129 = HEAP32[$$pre$i3$i$i>>2]|0;
    $130 = (($129) + 36|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (FUNCTION_TABLE_ii[$131 & 63]($$pre$i3$i$i)|0);
    $$0$i$i1$i$i = $132;
   } else {
    $133 = HEAP32[$125>>2]|0;
    $$0$i$i1$i$i = $133;
   }
   $134 = ($$0$i$i1$i$i|0)==(-1);
   if ($134) {
    HEAP32[$__e>>2] = 0;
    label = 61;
    break;
   } else {
    if ($140) {
     break;
    } else {
     label = 63;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 61) {
  if ($140) {
   label = 63;
  }
 }
 if ((label|0) == 63) {
  $135 = HEAP32[$__err>>2]|0;
  $136 = $135 | 2;
  HEAP32[$__err>>2] = $136;
 }
 HEAP32[$agg$result>>2] = $137;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i = 0, $$pre$phi24Z2D = 0, $$pre$phi26Z2D = 0, $$pre21 = 0, $$pre23 = 0, $$pre25 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$8,0);
 $9 = HEAP8[$__buf>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $14 = (($__buf) + 1|0);
  $$pre25 = (($__buf) + 8|0);
  $$pre$phi24Z2D = $14;$$pre$phi26Z2D = $$pre25;$15 = $14;
 } else {
  $12 = (($__buf) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $$pre23 = (($__buf) + 1|0);
  $$pre$phi24Z2D = $$pre23;$$pre$phi26Z2D = $12;$15 = $13;
 }
 HEAP32[$__a_end>>2] = $15;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $16 = (($__buf) + 4|0);
 $17 = HEAP32[$__thousands_sep>>2]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i3 = $$pre;$__a$0 = $15;
 L12: while(1) {
  $18 = ($$pre$i$i$i3|0)==(0|0);
  if ($18) {
   $138 = 1;$74 = 0;
  } else {
   $19 = (($$pre$i$i$i3) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($$pre$i$i$i3) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($20|0)==($22|0);
   if ($23) {
    $24 = HEAP32[$$pre$i$i$i3>>2]|0;
    $25 = (($24) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (FUNCTION_TABLE_ii[$26 & 63]($$pre$i$i$i3)|0);
    $$0$i$i$i$i1 = $27;
   } else {
    $28 = HEAP32[$20>>2]|0;
    $$0$i$i$i$i1 = $28;
   }
   $29 = ($$0$i$i$i$i1|0)==(-1);
   if ($29) {
    HEAP32[$__b>>2] = 0;
    $138 = 1;$74 = 0;
   } else {
    $138 = 0;$74 = $$pre$i$i$i3;
   }
  }
  $30 = HEAP32[$__e>>2]|0;
  $31 = ($30|0)==(0|0);
  do {
   if ($31) {
    label = 22;
   } else {
    $32 = (($30) + 12|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($30) + 16|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($33|0)==($35|0);
    if ($36) {
     $37 = HEAP32[$30>>2]|0;
     $38 = (($37) + 36|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (FUNCTION_TABLE_ii[$39 & 63]($30)|0);
     $$0$i$i1$i$i7 = $40;
    } else {
     $41 = HEAP32[$33>>2]|0;
     $$0$i$i1$i$i7 = $41;
    }
    $42 = ($$0$i$i1$i$i7|0)==(-1);
    if ($42) {
     HEAP32[$__e>>2] = 0;
     label = 22;
     break;
    } else {
     if ($138) {
      $139 = $30;
      break;
     } else {
      $$lcssa = $74;$$pre$i3$i$i = $30;$__a$2 = $__a$0;
      break L12;
     }
    }
   }
  } while(0);
  if ((label|0) == 22) {
   label = 0;
   if ($138) {
    $$lcssa = $74;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $139 = 0;
   }
  }
  $43 = HEAP32[$__a_end>>2]|0;
  $44 = HEAP8[$__buf>>0]|0;
  $45 = $44 & 1;
  $46 = ($45<<24>>24)==(0);
  if ($46) {
   $48 = $44&255;
   $49 = $48 >>> 1;
   $51 = $49;
  } else {
   $47 = HEAP32[$16>>2]|0;
   $51 = $47;
  }
  $50 = (($__a$0) + ($51)|0);
  $52 = ($43|0)==($50|0);
  if ($52) {
   if ($46) {
    $54 = $44&255;
    $55 = $54 >>> 1;
    $56 = $44&255;
    $57 = $56 >>> 1;
    $59 = $57;$72 = $55;
   } else {
    $53 = HEAP32[$16>>2]|0;
    $59 = $53;$72 = $53;
   }
   $58 = $59 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$58,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = 10;
   } else {
    $63 = HEAP32[$__buf>>2]|0;
    $64 = $63 & -2;
    $phitmp$i16 = (($64) + -1)|0;
    $65 = $phitmp$i16;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$65,0);
   $66 = HEAP8[$__buf>>0]|0;
   $67 = $66 & 1;
   $68 = ($67<<24>>24)==(0);
   if ($68) {
    $71 = $$pre$phi24Z2D;
   } else {
    $69 = HEAP32[$$pre$phi26Z2D>>2]|0;
    $71 = $69;
   }
   $70 = (($71) + ($72)|0);
   HEAP32[$__a_end>>2] = $70;
   $__a$1 = $71;
  } else {
   $__a$1 = $__a$0;
  }
  $73 = (($74) + 12|0);
  $75 = HEAP32[$73>>2]|0;
  $76 = (($74) + 16|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75|0)==($77|0);
  if ($78) {
   $79 = HEAP32[$74>>2]|0;
   $80 = (($79) + 36|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (FUNCTION_TABLE_ii[$81 & 63]($74)|0);
   $$0$i$i = $82;
  } else {
   $83 = HEAP32[$75>>2]|0;
   $$0$i$i = $83;
  }
  $84 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$17,$__grouping,$__g,$__g_end,$__atoms)|0);
  $85 = ($84|0)==(0);
  if (!($85)) {
   $$lcssa = $74;$$pre$i3$i$i = $139;$__a$2 = $__a$1;
   break;
  }
  $86 = HEAP32[$73>>2]|0;
  $87 = HEAP32[$76>>2]|0;
  $88 = ($86|0)==($87|0);
  if ($88) {
   $89 = HEAP32[$74>>2]|0;
   $90 = (($89) + 40|0);
   $91 = HEAP32[$90>>2]|0;
   (FUNCTION_TABLE_ii[$91 & 63]($74)|0);
   $$pre$i$i$i3 = $74;$__a$0 = $__a$1;
   continue;
  } else {
   $92 = (($86) + 4|0);
   HEAP32[$73>>2] = $92;
   $$pre$i$i$i3 = $74;$__a$0 = $__a$1;
   continue;
  }
 }
 $93 = HEAP8[$__grouping>>0]|0;
 $94 = $93 & 1;
 $95 = ($94<<24>>24)==(0);
 if ($95) {
  $98 = $93&255;
  $99 = $98 >>> 1;
  $100 = $99;
 } else {
  $96 = (($__grouping) + 4|0);
  $97 = HEAP32[$96>>2]|0;
  $100 = $97;
 }
 $101 = ($100|0)==(0);
 $$pre21 = HEAP32[$__g_end>>2]|0;
 if ($101) {
  $110 = $$pre21;
 } else {
  $102 = $$pre21;
  $103 = $__g;
  $104 = (($102) - ($103))|0;
  $105 = ($104|0)<(160);
  if ($105) {
   $106 = HEAP32[$__dc>>2]|0;
   $107 = (($$pre21) + 4|0);
   HEAP32[$__g_end>>2] = $107;
   HEAP32[$$pre21>>2] = $106;
   $110 = $107;
  } else {
   $110 = $$pre21;
  }
 }
 $108 = HEAP32[$__a_end>>2]|0;
 $109 = (__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a$2,$108,$__err,$0)|0);
 HEAP32[$__v>>2] = $109;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$110,$__err);
 $111 = ($$lcssa|0)==(0|0);
 if ($111) {
  $137 = 0;$140 = 1;
 } else {
  $112 = (($$lcssa) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($$lcssa) + 16|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($113|0)==($115|0);
  if ($116) {
   $117 = HEAP32[$$lcssa>>2]|0;
   $118 = (($117) + 36|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (FUNCTION_TABLE_ii[$119 & 63]($$lcssa)|0);
   $$0$i$i$i$i = $120;
  } else {
   $121 = HEAP32[$113>>2]|0;
   $$0$i$i$i$i = $121;
  }
  $122 = ($$0$i$i$i$i|0)==(-1);
  if ($122) {
   HEAP32[$__b>>2] = 0;
   $137 = 0;$140 = 1;
  } else {
   $137 = $$lcssa;$140 = 0;
  }
 }
 $123 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($123) {
   label = 61;
  } else {
   $124 = (($$pre$i3$i$i) + 12|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (($$pre$i3$i$i) + 16|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ($125|0)==($127|0);
   if ($128) {
    $129 = HEAP32[$$pre$i3$i$i>>2]|0;
    $130 = (($129) + 36|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (FUNCTION_TABLE_ii[$131 & 63]($$pre$i3$i$i)|0);
    $$0$i$i1$i$i = $132;
   } else {
    $133 = HEAP32[$125>>2]|0;
    $$0$i$i1$i$i = $133;
   }
   $134 = ($$0$i$i1$i$i|0)==(-1);
   if ($134) {
    HEAP32[$__e>>2] = 0;
    label = 61;
    break;
   } else {
    if ($140) {
     break;
    } else {
     label = 63;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 61) {
  if ($140) {
   label = 63;
  }
 }
 if ((label|0) == 63) {
  $135 = HEAP32[$__err>>2]|0;
  $136 = $135 | 2;
  HEAP32[$__err>>2] = $136;
 }
 HEAP32[$agg$result>>2] = $137;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i = 0, $$pre$phi24Z2D = 0, $$pre$phi26Z2D = 0, $$pre21 = 0, $$pre23 = 0, $$pre25 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$8,0);
 $9 = HEAP8[$__buf>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $14 = (($__buf) + 1|0);
  $$pre25 = (($__buf) + 8|0);
  $$pre$phi24Z2D = $14;$$pre$phi26Z2D = $$pre25;$15 = $14;
 } else {
  $12 = (($__buf) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $$pre23 = (($__buf) + 1|0);
  $$pre$phi24Z2D = $$pre23;$$pre$phi26Z2D = $12;$15 = $13;
 }
 HEAP32[$__a_end>>2] = $15;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $16 = (($__buf) + 4|0);
 $17 = HEAP32[$__thousands_sep>>2]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i3 = $$pre;$__a$0 = $15;
 L12: while(1) {
  $18 = ($$pre$i$i$i3|0)==(0|0);
  if ($18) {
   $138 = 1;$74 = 0;
  } else {
   $19 = (($$pre$i$i$i3) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($$pre$i$i$i3) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($20|0)==($22|0);
   if ($23) {
    $24 = HEAP32[$$pre$i$i$i3>>2]|0;
    $25 = (($24) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (FUNCTION_TABLE_ii[$26 & 63]($$pre$i$i$i3)|0);
    $$0$i$i$i$i1 = $27;
   } else {
    $28 = HEAP32[$20>>2]|0;
    $$0$i$i$i$i1 = $28;
   }
   $29 = ($$0$i$i$i$i1|0)==(-1);
   if ($29) {
    HEAP32[$__b>>2] = 0;
    $138 = 1;$74 = 0;
   } else {
    $138 = 0;$74 = $$pre$i$i$i3;
   }
  }
  $30 = HEAP32[$__e>>2]|0;
  $31 = ($30|0)==(0|0);
  do {
   if ($31) {
    label = 22;
   } else {
    $32 = (($30) + 12|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($30) + 16|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($33|0)==($35|0);
    if ($36) {
     $37 = HEAP32[$30>>2]|0;
     $38 = (($37) + 36|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (FUNCTION_TABLE_ii[$39 & 63]($30)|0);
     $$0$i$i1$i$i7 = $40;
    } else {
     $41 = HEAP32[$33>>2]|0;
     $$0$i$i1$i$i7 = $41;
    }
    $42 = ($$0$i$i1$i$i7|0)==(-1);
    if ($42) {
     HEAP32[$__e>>2] = 0;
     label = 22;
     break;
    } else {
     if ($138) {
      $139 = $30;
      break;
     } else {
      $$lcssa = $74;$$pre$i3$i$i = $30;$__a$2 = $__a$0;
      break L12;
     }
    }
   }
  } while(0);
  if ((label|0) == 22) {
   label = 0;
   if ($138) {
    $$lcssa = $74;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $139 = 0;
   }
  }
  $43 = HEAP32[$__a_end>>2]|0;
  $44 = HEAP8[$__buf>>0]|0;
  $45 = $44 & 1;
  $46 = ($45<<24>>24)==(0);
  if ($46) {
   $48 = $44&255;
   $49 = $48 >>> 1;
   $51 = $49;
  } else {
   $47 = HEAP32[$16>>2]|0;
   $51 = $47;
  }
  $50 = (($__a$0) + ($51)|0);
  $52 = ($43|0)==($50|0);
  if ($52) {
   if ($46) {
    $54 = $44&255;
    $55 = $54 >>> 1;
    $56 = $44&255;
    $57 = $56 >>> 1;
    $59 = $57;$72 = $55;
   } else {
    $53 = HEAP32[$16>>2]|0;
    $59 = $53;$72 = $53;
   }
   $58 = $59 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$58,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = 10;
   } else {
    $63 = HEAP32[$__buf>>2]|0;
    $64 = $63 & -2;
    $phitmp$i16 = (($64) + -1)|0;
    $65 = $phitmp$i16;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$65,0);
   $66 = HEAP8[$__buf>>0]|0;
   $67 = $66 & 1;
   $68 = ($67<<24>>24)==(0);
   if ($68) {
    $71 = $$pre$phi24Z2D;
   } else {
    $69 = HEAP32[$$pre$phi26Z2D>>2]|0;
    $71 = $69;
   }
   $70 = (($71) + ($72)|0);
   HEAP32[$__a_end>>2] = $70;
   $__a$1 = $71;
  } else {
   $__a$1 = $__a$0;
  }
  $73 = (($74) + 12|0);
  $75 = HEAP32[$73>>2]|0;
  $76 = (($74) + 16|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75|0)==($77|0);
  if ($78) {
   $79 = HEAP32[$74>>2]|0;
   $80 = (($79) + 36|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (FUNCTION_TABLE_ii[$81 & 63]($74)|0);
   $$0$i$i = $82;
  } else {
   $83 = HEAP32[$75>>2]|0;
   $$0$i$i = $83;
  }
  $84 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$17,$__grouping,$__g,$__g_end,$__atoms)|0);
  $85 = ($84|0)==(0);
  if (!($85)) {
   $$lcssa = $74;$$pre$i3$i$i = $139;$__a$2 = $__a$1;
   break;
  }
  $86 = HEAP32[$73>>2]|0;
  $87 = HEAP32[$76>>2]|0;
  $88 = ($86|0)==($87|0);
  if ($88) {
   $89 = HEAP32[$74>>2]|0;
   $90 = (($89) + 40|0);
   $91 = HEAP32[$90>>2]|0;
   (FUNCTION_TABLE_ii[$91 & 63]($74)|0);
   $$pre$i$i$i3 = $74;$__a$0 = $__a$1;
   continue;
  } else {
   $92 = (($86) + 4|0);
   HEAP32[$73>>2] = $92;
   $$pre$i$i$i3 = $74;$__a$0 = $__a$1;
   continue;
  }
 }
 $93 = HEAP8[$__grouping>>0]|0;
 $94 = $93 & 1;
 $95 = ($94<<24>>24)==(0);
 if ($95) {
  $98 = $93&255;
  $99 = $98 >>> 1;
  $100 = $99;
 } else {
  $96 = (($__grouping) + 4|0);
  $97 = HEAP32[$96>>2]|0;
  $100 = $97;
 }
 $101 = ($100|0)==(0);
 $$pre21 = HEAP32[$__g_end>>2]|0;
 if ($101) {
  $110 = $$pre21;
 } else {
  $102 = $$pre21;
  $103 = $__g;
  $104 = (($102) - ($103))|0;
  $105 = ($104|0)<(160);
  if ($105) {
   $106 = HEAP32[$__dc>>2]|0;
   $107 = (($$pre21) + 4|0);
   HEAP32[$__g_end>>2] = $107;
   HEAP32[$$pre21>>2] = $106;
   $110 = $107;
  } else {
   $110 = $$pre21;
  }
 }
 $108 = HEAP32[$__a_end>>2]|0;
 $109 = (__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a$2,$108,$__err,$0)|0);
 HEAP32[$__v>>2] = $109;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$110,$__err);
 $111 = ($$lcssa|0)==(0|0);
 if ($111) {
  $137 = 0;$140 = 1;
 } else {
  $112 = (($$lcssa) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($$lcssa) + 16|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($113|0)==($115|0);
  if ($116) {
   $117 = HEAP32[$$lcssa>>2]|0;
   $118 = (($117) + 36|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (FUNCTION_TABLE_ii[$119 & 63]($$lcssa)|0);
   $$0$i$i$i$i = $120;
  } else {
   $121 = HEAP32[$113>>2]|0;
   $$0$i$i$i$i = $121;
  }
  $122 = ($$0$i$i$i$i|0)==(-1);
  if ($122) {
   HEAP32[$__b>>2] = 0;
   $137 = 0;$140 = 1;
  } else {
   $137 = $$lcssa;$140 = 0;
  }
 }
 $123 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($123) {
   label = 61;
  } else {
   $124 = (($$pre$i3$i$i) + 12|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (($$pre$i3$i$i) + 16|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ($125|0)==($127|0);
   if ($128) {
    $129 = HEAP32[$$pre$i3$i$i>>2]|0;
    $130 = (($129) + 36|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (FUNCTION_TABLE_ii[$131 & 63]($$pre$i3$i$i)|0);
    $$0$i$i1$i$i = $132;
   } else {
    $133 = HEAP32[$125>>2]|0;
    $$0$i$i1$i$i = $133;
   }
   $134 = ($$0$i$i1$i$i|0)==(-1);
   if ($134) {
    HEAP32[$__e>>2] = 0;
    label = 61;
    break;
   } else {
    if ($140) {
     break;
    } else {
     label = 63;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 61) {
  if ($140) {
   label = 63;
  }
 }
 if ((label|0) == 63) {
  $135 = HEAP32[$__err>>2]|0;
  $136 = $135 | 2;
  HEAP32[$__err>>2] = $136;
 }
 HEAP32[$agg$result>>2] = $137;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i = 0, $$pre$phi24Z2D = 0, $$pre$phi26Z2D = 0, $$pre21 = 0, $$pre23 = 0, $$pre25 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 $3 = HEAP8[$__buf>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = 10;
 } else {
  $6 = HEAP32[$__buf>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $phitmp$i;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$8,0);
 $9 = HEAP8[$__buf>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $14 = (($__buf) + 1|0);
  $$pre25 = (($__buf) + 8|0);
  $$pre$phi24Z2D = $14;$$pre$phi26Z2D = $$pre25;$15 = $14;
 } else {
  $12 = (($__buf) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $$pre23 = (($__buf) + 1|0);
  $$pre$phi24Z2D = $$pre23;$$pre$phi26Z2D = $12;$15 = $13;
 }
 HEAP32[$__a_end>>2] = $15;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 $16 = (($__buf) + 4|0);
 $17 = HEAP32[$__thousands_sep>>2]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i3 = $$pre;$__a$0 = $15;
 L12: while(1) {
  $18 = ($$pre$i$i$i3|0)==(0|0);
  if ($18) {
   $143 = 1;$74 = 0;
  } else {
   $19 = (($$pre$i$i$i3) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($$pre$i$i$i3) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($20|0)==($22|0);
   if ($23) {
    $24 = HEAP32[$$pre$i$i$i3>>2]|0;
    $25 = (($24) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (FUNCTION_TABLE_ii[$26 & 63]($$pre$i$i$i3)|0);
    $$0$i$i$i$i1 = $27;
   } else {
    $28 = HEAP32[$20>>2]|0;
    $$0$i$i$i$i1 = $28;
   }
   $29 = ($$0$i$i$i$i1|0)==(-1);
   if ($29) {
    HEAP32[$__b>>2] = 0;
    $143 = 1;$74 = 0;
   } else {
    $143 = 0;$74 = $$pre$i$i$i3;
   }
  }
  $30 = HEAP32[$__e>>2]|0;
  $31 = ($30|0)==(0|0);
  do {
   if ($31) {
    label = 22;
   } else {
    $32 = (($30) + 12|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($30) + 16|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($33|0)==($35|0);
    if ($36) {
     $37 = HEAP32[$30>>2]|0;
     $38 = (($37) + 36|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (FUNCTION_TABLE_ii[$39 & 63]($30)|0);
     $$0$i$i1$i$i7 = $40;
    } else {
     $41 = HEAP32[$33>>2]|0;
     $$0$i$i1$i$i7 = $41;
    }
    $42 = ($$0$i$i1$i$i7|0)==(-1);
    if ($42) {
     HEAP32[$__e>>2] = 0;
     label = 22;
     break;
    } else {
     if ($143) {
      $144 = $30;
      break;
     } else {
      $$lcssa = $74;$$pre$i3$i$i = $30;$__a$2 = $__a$0;
      break L12;
     }
    }
   }
  } while(0);
  if ((label|0) == 22) {
   label = 0;
   if ($143) {
    $$lcssa = $74;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $144 = 0;
   }
  }
  $43 = HEAP32[$__a_end>>2]|0;
  $44 = HEAP8[$__buf>>0]|0;
  $45 = $44 & 1;
  $46 = ($45<<24>>24)==(0);
  if ($46) {
   $48 = $44&255;
   $49 = $48 >>> 1;
   $51 = $49;
  } else {
   $47 = HEAP32[$16>>2]|0;
   $51 = $47;
  }
  $50 = (($__a$0) + ($51)|0);
  $52 = ($43|0)==($50|0);
  if ($52) {
   if ($46) {
    $54 = $44&255;
    $55 = $54 >>> 1;
    $56 = $44&255;
    $57 = $56 >>> 1;
    $59 = $57;$72 = $55;
   } else {
    $53 = HEAP32[$16>>2]|0;
    $59 = $53;$72 = $53;
   }
   $58 = $59 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$58,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = 10;
   } else {
    $63 = HEAP32[$__buf>>2]|0;
    $64 = $63 & -2;
    $phitmp$i16 = (($64) + -1)|0;
    $65 = $phitmp$i16;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$65,0);
   $66 = HEAP8[$__buf>>0]|0;
   $67 = $66 & 1;
   $68 = ($67<<24>>24)==(0);
   if ($68) {
    $71 = $$pre$phi24Z2D;
   } else {
    $69 = HEAP32[$$pre$phi26Z2D>>2]|0;
    $71 = $69;
   }
   $70 = (($71) + ($72)|0);
   HEAP32[$__a_end>>2] = $70;
   $__a$1 = $71;
  } else {
   $__a$1 = $__a$0;
  }
  $73 = (($74) + 12|0);
  $75 = HEAP32[$73>>2]|0;
  $76 = (($74) + 16|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75|0)==($77|0);
  if ($78) {
   $79 = HEAP32[$74>>2]|0;
   $80 = (($79) + 36|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (FUNCTION_TABLE_ii[$81 & 63]($74)|0);
   $$0$i$i = $82;
  } else {
   $83 = HEAP32[$75>>2]|0;
   $$0$i$i = $83;
  }
  $84 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$17,$__grouping,$__g,$__g_end,$__atoms)|0);
  $85 = ($84|0)==(0);
  if (!($85)) {
   $$lcssa = $74;$$pre$i3$i$i = $144;$__a$2 = $__a$1;
   break;
  }
  $86 = HEAP32[$73>>2]|0;
  $87 = HEAP32[$76>>2]|0;
  $88 = ($86|0)==($87|0);
  if ($88) {
   $89 = HEAP32[$74>>2]|0;
   $90 = (($89) + 40|0);
   $91 = HEAP32[$90>>2]|0;
   (FUNCTION_TABLE_ii[$91 & 63]($74)|0);
   $$pre$i$i$i3 = $74;$__a$0 = $__a$1;
   continue;
  } else {
   $92 = (($86) + 4|0);
   HEAP32[$73>>2] = $92;
   $$pre$i$i$i3 = $74;$__a$0 = $__a$1;
   continue;
  }
 }
 $93 = HEAP8[$__grouping>>0]|0;
 $94 = $93 & 1;
 $95 = ($94<<24>>24)==(0);
 if ($95) {
  $98 = $93&255;
  $99 = $98 >>> 1;
  $100 = $99;
 } else {
  $96 = (($__grouping) + 4|0);
  $97 = HEAP32[$96>>2]|0;
  $100 = $97;
 }
 $101 = ($100|0)==(0);
 $$pre21 = HEAP32[$__g_end>>2]|0;
 if ($101) {
  $115 = $$pre21;
 } else {
  $102 = $$pre21;
  $103 = $__g;
  $104 = (($102) - ($103))|0;
  $105 = ($104|0)<(160);
  if ($105) {
   $106 = HEAP32[$__dc>>2]|0;
   $107 = (($$pre21) + 4|0);
   HEAP32[$__g_end>>2] = $107;
   HEAP32[$$pre21>>2] = $106;
   $115 = $107;
  } else {
   $115 = $$pre21;
  }
 }
 $108 = HEAP32[$__a_end>>2]|0;
 $109 = (__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a$2,$108,$__err,$0)|0);
 $110 = tempRet0;
 $111 = $__v;
 $112 = $111;
 HEAP32[$112>>2] = $109;
 $113 = (($111) + 4)|0;
 $114 = $113;
 HEAP32[$114>>2] = $110;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$115,$__err);
 $116 = ($$lcssa|0)==(0|0);
 if ($116) {
  $142 = 0;$145 = 1;
 } else {
  $117 = (($$lcssa) + 12|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($$lcssa) + 16|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ($118|0)==($120|0);
  if ($121) {
   $122 = HEAP32[$$lcssa>>2]|0;
   $123 = (($122) + 36|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (FUNCTION_TABLE_ii[$124 & 63]($$lcssa)|0);
   $$0$i$i$i$i = $125;
  } else {
   $126 = HEAP32[$118>>2]|0;
   $$0$i$i$i$i = $126;
  }
  $127 = ($$0$i$i$i$i|0)==(-1);
  if ($127) {
   HEAP32[$__b>>2] = 0;
   $142 = 0;$145 = 1;
  } else {
   $142 = $$lcssa;$145 = 0;
  }
 }
 $128 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($128) {
   label = 61;
  } else {
   $129 = (($$pre$i3$i$i) + 12|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (($$pre$i3$i$i) + 16|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ($130|0)==($132|0);
   if ($133) {
    $134 = HEAP32[$$pre$i3$i$i>>2]|0;
    $135 = (($134) + 36|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = (FUNCTION_TABLE_ii[$136 & 63]($$pre$i3$i$i)|0);
    $$0$i$i1$i$i = $137;
   } else {
    $138 = HEAP32[$130>>2]|0;
    $$0$i$i1$i$i = $138;
   }
   $139 = ($$0$i$i1$i$i|0)==(-1);
   if ($139) {
    HEAP32[$__e>>2] = 0;
    label = 61;
    break;
   } else {
    if ($145) {
     break;
    } else {
     label = 63;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 61) {
  if ($145) {
   label = 63;
  }
 }
 if ((label|0) == 63) {
  $140 = HEAP32[$__err>>2]|0;
  $141 = $140 | 2;
  HEAP32[$__err>>2] = $141;
 }
 HEAP32[$agg$result>>2] = $142;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i8 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i3$i$i = 0, $$pre$phi25Z2D = 0, $$pre$phi27Z2D = 0, $$pre22 = 0, $$pre24 = 0, $$pre26 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0;
 var $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$7,0);
 $8 = HEAP8[$__buf>>0]|0;
 $9 = $8 & 1;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  $13 = (($__buf) + 1|0);
  $$pre26 = (($__buf) + 8|0);
  $$pre$phi25Z2D = $13;$$pre$phi27Z2D = $$pre26;$14 = $13;
 } else {
  $11 = (($__buf) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $$pre24 = (($__buf) + 1|0);
  $$pre$phi25Z2D = $$pre24;$$pre$phi27Z2D = $11;$14 = $12;
 }
 HEAP32[$__a_end>>2] = $14;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 HEAP8[$__in_units>>0] = 1;
 HEAP8[$__exp>>0] = 69;
 $15 = (($__buf) + 4|0);
 $16 = HEAP32[$__decimal_point>>2]|0;
 $17 = HEAP32[$__thousands_sep>>2]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i4 = $$pre;$__a$0 = $14;
 L12: while(1) {
  $18 = ($$pre$i$i$i4|0)==(0|0);
  if ($18) {
   $140 = 1;$74 = 0;
  } else {
   $19 = (($$pre$i$i$i4) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($$pre$i$i$i4) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($20|0)==($22|0);
   if ($23) {
    $24 = HEAP32[$$pre$i$i$i4>>2]|0;
    $25 = (($24) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (FUNCTION_TABLE_ii[$26 & 63]($$pre$i$i$i4)|0);
    $$0$i$i$i$i2 = $27;
   } else {
    $28 = HEAP32[$20>>2]|0;
    $$0$i$i$i$i2 = $28;
   }
   $29 = ($$0$i$i$i$i2|0)==(-1);
   if ($29) {
    HEAP32[$__b>>2] = 0;
    $140 = 1;$74 = 0;
   } else {
    $140 = 0;$74 = $$pre$i$i$i4;
   }
  }
  $30 = HEAP32[$__e>>2]|0;
  $31 = ($30|0)==(0|0);
  do {
   if ($31) {
    label = 22;
   } else {
    $32 = (($30) + 12|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($30) + 16|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($33|0)==($35|0);
    if ($36) {
     $37 = HEAP32[$30>>2]|0;
     $38 = (($37) + 36|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (FUNCTION_TABLE_ii[$39 & 63]($30)|0);
     $$0$i$i1$i$i8 = $40;
    } else {
     $41 = HEAP32[$33>>2]|0;
     $$0$i$i1$i$i8 = $41;
    }
    $42 = ($$0$i$i1$i$i8|0)==(-1);
    if ($42) {
     HEAP32[$__e>>2] = 0;
     label = 22;
     break;
    } else {
     if ($140) {
      $141 = $30;
      break;
     } else {
      $$lcssa = $74;$$pre$i3$i$i = $30;$__a$2 = $__a$0;
      break L12;
     }
    }
   }
  } while(0);
  if ((label|0) == 22) {
   label = 0;
   if ($140) {
    $$lcssa = $74;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $141 = 0;
   }
  }
  $43 = HEAP32[$__a_end>>2]|0;
  $44 = HEAP8[$__buf>>0]|0;
  $45 = $44 & 1;
  $46 = ($45<<24>>24)==(0);
  if ($46) {
   $48 = $44&255;
   $49 = $48 >>> 1;
   $51 = $49;
  } else {
   $47 = HEAP32[$15>>2]|0;
   $51 = $47;
  }
  $50 = (($__a$0) + ($51)|0);
  $52 = ($43|0)==($50|0);
  if ($52) {
   if ($46) {
    $54 = $44&255;
    $55 = $54 >>> 1;
    $56 = $44&255;
    $57 = $56 >>> 1;
    $59 = $57;$72 = $55;
   } else {
    $53 = HEAP32[$15>>2]|0;
    $59 = $53;$72 = $53;
   }
   $58 = $59 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$58,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = 10;
   } else {
    $63 = HEAP32[$__buf>>2]|0;
    $64 = $63 & -2;
    $phitmp$i17 = (($64) + -1)|0;
    $65 = $phitmp$i17;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$65,0);
   $66 = HEAP8[$__buf>>0]|0;
   $67 = $66 & 1;
   $68 = ($67<<24>>24)==(0);
   if ($68) {
    $71 = $$pre$phi25Z2D;
   } else {
    $69 = HEAP32[$$pre$phi27Z2D>>2]|0;
    $71 = $69;
   }
   $70 = (($71) + ($72)|0);
   HEAP32[$__a_end>>2] = $70;
   $__a$1 = $71;
  } else {
   $__a$1 = $__a$0;
  }
  $73 = (($74) + 12|0);
  $75 = HEAP32[$73>>2]|0;
  $76 = (($74) + 16|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75|0)==($77|0);
  if ($78) {
   $79 = HEAP32[$74>>2]|0;
   $80 = (($79) + 36|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (FUNCTION_TABLE_ii[$81 & 63]($74)|0);
   $$0$i$i = $82;
  } else {
   $83 = HEAP32[$75>>2]|0;
   $$0$i$i = $83;
  }
  $84 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$16,$17,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
  $85 = ($84|0)==(0);
  if (!($85)) {
   $$lcssa = $74;$$pre$i3$i$i = $141;$__a$2 = $__a$1;
   break;
  }
  $86 = HEAP32[$73>>2]|0;
  $87 = HEAP32[$76>>2]|0;
  $88 = ($86|0)==($87|0);
  if ($88) {
   $89 = HEAP32[$74>>2]|0;
   $90 = (($89) + 40|0);
   $91 = HEAP32[$90>>2]|0;
   (FUNCTION_TABLE_ii[$91 & 63]($74)|0);
   $$pre$i$i$i4 = $74;$__a$0 = $__a$1;
   continue;
  } else {
   $92 = (($86) + 4|0);
   HEAP32[$73>>2] = $92;
   $$pre$i$i$i4 = $74;$__a$0 = $__a$1;
   continue;
  }
 }
 $93 = HEAP8[$__grouping>>0]|0;
 $94 = $93 & 1;
 $95 = ($94<<24>>24)==(0);
 if ($95) {
  $98 = $93&255;
  $99 = $98 >>> 1;
  $100 = $99;
 } else {
  $96 = (($__grouping) + 4|0);
  $97 = HEAP32[$96>>2]|0;
  $100 = $97;
 }
 $101 = ($100|0)==(0);
 $102 = HEAP8[$__in_units>>0]|0;
 $103 = ($102<<24>>24)==(0);
 $or$cond = $101 | $103;
 $$pre22 = HEAP32[$__g_end>>2]|0;
 if ($or$cond) {
  $112 = $$pre22;
 } else {
  $104 = $$pre22;
  $105 = $__g;
  $106 = (($104) - ($105))|0;
  $107 = ($106|0)<(160);
  if ($107) {
   $108 = HEAP32[$__dc>>2]|0;
   $109 = (($$pre22) + 4|0);
   HEAP32[$__g_end>>2] = $109;
   HEAP32[$$pre22>>2] = $108;
   $112 = $109;
  } else {
   $112 = $$pre22;
  }
 }
 $110 = HEAP32[$__a_end>>2]|0;
 $111 = (+__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a$2,$110,$__err));
 HEAPF32[$__v>>2] = $111;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$112,$__err);
 $113 = ($$lcssa|0)==(0|0);
 if ($113) {
  $139 = 0;$142 = 1;
 } else {
  $114 = (($$lcssa) + 12|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = (($$lcssa) + 16|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = ($115|0)==($117|0);
  if ($118) {
   $119 = HEAP32[$$lcssa>>2]|0;
   $120 = (($119) + 36|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = (FUNCTION_TABLE_ii[$121 & 63]($$lcssa)|0);
   $$0$i$i$i$i = $122;
  } else {
   $123 = HEAP32[$115>>2]|0;
   $$0$i$i$i$i = $123;
  }
  $124 = ($$0$i$i$i$i|0)==(-1);
  if ($124) {
   HEAP32[$__b>>2] = 0;
   $139 = 0;$142 = 1;
  } else {
   $139 = $$lcssa;$142 = 0;
  }
 }
 $125 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($125) {
   label = 61;
  } else {
   $126 = (($$pre$i3$i$i) + 12|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($$pre$i3$i$i) + 16|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if ($130) {
    $131 = HEAP32[$$pre$i3$i$i>>2]|0;
    $132 = (($131) + 36|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (FUNCTION_TABLE_ii[$133 & 63]($$pre$i3$i$i)|0);
    $$0$i$i1$i$i = $134;
   } else {
    $135 = HEAP32[$127>>2]|0;
    $$0$i$i1$i$i = $135;
   }
   $136 = ($$0$i$i1$i$i|0)==(-1);
   if ($136) {
    HEAP32[$__e>>2] = 0;
    label = 61;
    break;
   } else {
    if ($142) {
     break;
    } else {
     label = 63;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 61) {
  if ($142) {
   label = 63;
  }
 }
 if ((label|0) == 63) {
  $137 = HEAP32[$__err>>2]|0;
  $138 = $137 | 2;
  HEAP32[$__err>>2] = $138;
 }
 HEAP32[$agg$result>>2] = $139;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i8 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i3$i$i = 0, $$pre$phi25Z2D = 0, $$pre$phi27Z2D = 0, $$pre22 = 0, $$pre24 = 0, $$pre26 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0;
 var $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$7,0);
 $8 = HEAP8[$__buf>>0]|0;
 $9 = $8 & 1;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  $13 = (($__buf) + 1|0);
  $$pre26 = (($__buf) + 8|0);
  $$pre$phi25Z2D = $13;$$pre$phi27Z2D = $$pre26;$14 = $13;
 } else {
  $11 = (($__buf) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $$pre24 = (($__buf) + 1|0);
  $$pre$phi25Z2D = $$pre24;$$pre$phi27Z2D = $11;$14 = $12;
 }
 HEAP32[$__a_end>>2] = $14;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 HEAP8[$__in_units>>0] = 1;
 HEAP8[$__exp>>0] = 69;
 $15 = (($__buf) + 4|0);
 $16 = HEAP32[$__decimal_point>>2]|0;
 $17 = HEAP32[$__thousands_sep>>2]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i4 = $$pre;$__a$0 = $14;
 L12: while(1) {
  $18 = ($$pre$i$i$i4|0)==(0|0);
  if ($18) {
   $140 = 1;$74 = 0;
  } else {
   $19 = (($$pre$i$i$i4) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($$pre$i$i$i4) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($20|0)==($22|0);
   if ($23) {
    $24 = HEAP32[$$pre$i$i$i4>>2]|0;
    $25 = (($24) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (FUNCTION_TABLE_ii[$26 & 63]($$pre$i$i$i4)|0);
    $$0$i$i$i$i2 = $27;
   } else {
    $28 = HEAP32[$20>>2]|0;
    $$0$i$i$i$i2 = $28;
   }
   $29 = ($$0$i$i$i$i2|0)==(-1);
   if ($29) {
    HEAP32[$__b>>2] = 0;
    $140 = 1;$74 = 0;
   } else {
    $140 = 0;$74 = $$pre$i$i$i4;
   }
  }
  $30 = HEAP32[$__e>>2]|0;
  $31 = ($30|0)==(0|0);
  do {
   if ($31) {
    label = 22;
   } else {
    $32 = (($30) + 12|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($30) + 16|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($33|0)==($35|0);
    if ($36) {
     $37 = HEAP32[$30>>2]|0;
     $38 = (($37) + 36|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (FUNCTION_TABLE_ii[$39 & 63]($30)|0);
     $$0$i$i1$i$i8 = $40;
    } else {
     $41 = HEAP32[$33>>2]|0;
     $$0$i$i1$i$i8 = $41;
    }
    $42 = ($$0$i$i1$i$i8|0)==(-1);
    if ($42) {
     HEAP32[$__e>>2] = 0;
     label = 22;
     break;
    } else {
     if ($140) {
      $141 = $30;
      break;
     } else {
      $$lcssa = $74;$$pre$i3$i$i = $30;$__a$2 = $__a$0;
      break L12;
     }
    }
   }
  } while(0);
  if ((label|0) == 22) {
   label = 0;
   if ($140) {
    $$lcssa = $74;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $141 = 0;
   }
  }
  $43 = HEAP32[$__a_end>>2]|0;
  $44 = HEAP8[$__buf>>0]|0;
  $45 = $44 & 1;
  $46 = ($45<<24>>24)==(0);
  if ($46) {
   $48 = $44&255;
   $49 = $48 >>> 1;
   $51 = $49;
  } else {
   $47 = HEAP32[$15>>2]|0;
   $51 = $47;
  }
  $50 = (($__a$0) + ($51)|0);
  $52 = ($43|0)==($50|0);
  if ($52) {
   if ($46) {
    $54 = $44&255;
    $55 = $54 >>> 1;
    $56 = $44&255;
    $57 = $56 >>> 1;
    $59 = $57;$72 = $55;
   } else {
    $53 = HEAP32[$15>>2]|0;
    $59 = $53;$72 = $53;
   }
   $58 = $59 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$58,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = 10;
   } else {
    $63 = HEAP32[$__buf>>2]|0;
    $64 = $63 & -2;
    $phitmp$i17 = (($64) + -1)|0;
    $65 = $phitmp$i17;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$65,0);
   $66 = HEAP8[$__buf>>0]|0;
   $67 = $66 & 1;
   $68 = ($67<<24>>24)==(0);
   if ($68) {
    $71 = $$pre$phi25Z2D;
   } else {
    $69 = HEAP32[$$pre$phi27Z2D>>2]|0;
    $71 = $69;
   }
   $70 = (($71) + ($72)|0);
   HEAP32[$__a_end>>2] = $70;
   $__a$1 = $71;
  } else {
   $__a$1 = $__a$0;
  }
  $73 = (($74) + 12|0);
  $75 = HEAP32[$73>>2]|0;
  $76 = (($74) + 16|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75|0)==($77|0);
  if ($78) {
   $79 = HEAP32[$74>>2]|0;
   $80 = (($79) + 36|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (FUNCTION_TABLE_ii[$81 & 63]($74)|0);
   $$0$i$i = $82;
  } else {
   $83 = HEAP32[$75>>2]|0;
   $$0$i$i = $83;
  }
  $84 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$16,$17,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
  $85 = ($84|0)==(0);
  if (!($85)) {
   $$lcssa = $74;$$pre$i3$i$i = $141;$__a$2 = $__a$1;
   break;
  }
  $86 = HEAP32[$73>>2]|0;
  $87 = HEAP32[$76>>2]|0;
  $88 = ($86|0)==($87|0);
  if ($88) {
   $89 = HEAP32[$74>>2]|0;
   $90 = (($89) + 40|0);
   $91 = HEAP32[$90>>2]|0;
   (FUNCTION_TABLE_ii[$91 & 63]($74)|0);
   $$pre$i$i$i4 = $74;$__a$0 = $__a$1;
   continue;
  } else {
   $92 = (($86) + 4|0);
   HEAP32[$73>>2] = $92;
   $$pre$i$i$i4 = $74;$__a$0 = $__a$1;
   continue;
  }
 }
 $93 = HEAP8[$__grouping>>0]|0;
 $94 = $93 & 1;
 $95 = ($94<<24>>24)==(0);
 if ($95) {
  $98 = $93&255;
  $99 = $98 >>> 1;
  $100 = $99;
 } else {
  $96 = (($__grouping) + 4|0);
  $97 = HEAP32[$96>>2]|0;
  $100 = $97;
 }
 $101 = ($100|0)==(0);
 $102 = HEAP8[$__in_units>>0]|0;
 $103 = ($102<<24>>24)==(0);
 $or$cond = $101 | $103;
 $$pre22 = HEAP32[$__g_end>>2]|0;
 if ($or$cond) {
  $112 = $$pre22;
 } else {
  $104 = $$pre22;
  $105 = $__g;
  $106 = (($104) - ($105))|0;
  $107 = ($106|0)<(160);
  if ($107) {
   $108 = HEAP32[$__dc>>2]|0;
   $109 = (($$pre22) + 4|0);
   HEAP32[$__g_end>>2] = $109;
   HEAP32[$$pre22>>2] = $108;
   $112 = $109;
  } else {
   $112 = $$pre22;
  }
 }
 $110 = HEAP32[$__a_end>>2]|0;
 $111 = (+__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a$2,$110,$__err));
 HEAPF64[$__v>>3] = $111;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$112,$__err);
 $113 = ($$lcssa|0)==(0|0);
 if ($113) {
  $139 = 0;$142 = 1;
 } else {
  $114 = (($$lcssa) + 12|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = (($$lcssa) + 16|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = ($115|0)==($117|0);
  if ($118) {
   $119 = HEAP32[$$lcssa>>2]|0;
   $120 = (($119) + 36|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = (FUNCTION_TABLE_ii[$121 & 63]($$lcssa)|0);
   $$0$i$i$i$i = $122;
  } else {
   $123 = HEAP32[$115>>2]|0;
   $$0$i$i$i$i = $123;
  }
  $124 = ($$0$i$i$i$i|0)==(-1);
  if ($124) {
   HEAP32[$__b>>2] = 0;
   $139 = 0;$142 = 1;
  } else {
   $139 = $$lcssa;$142 = 0;
  }
 }
 $125 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($125) {
   label = 61;
  } else {
   $126 = (($$pre$i3$i$i) + 12|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($$pre$i3$i$i) + 16|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if ($130) {
    $131 = HEAP32[$$pre$i3$i$i>>2]|0;
    $132 = (($131) + 36|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (FUNCTION_TABLE_ii[$133 & 63]($$pre$i3$i$i)|0);
    $$0$i$i1$i$i = $134;
   } else {
    $135 = HEAP32[$127>>2]|0;
    $$0$i$i1$i$i = $135;
   }
   $136 = ($$0$i$i1$i$i|0)==(-1);
   if ($136) {
    HEAP32[$__e>>2] = 0;
    label = 61;
    break;
   } else {
    if ($142) {
     break;
    } else {
     label = 63;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 61) {
  if ($142) {
   label = 63;
  }
 }
 if ((label|0) == 63) {
  $137 = HEAP32[$__err>>2]|0;
  $138 = $137 | 2;
  HEAP32[$__err>>2] = $138;
 }
 HEAP32[$agg$result>>2] = $139;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i8 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i3$i$i = 0, $$pre$phi25Z2D = 0, $$pre$phi27Z2D = 0, $$pre22 = 0, $$pre24 = 0, $$pre26 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0;
 var $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__i$0$i$i = 0, $__in_units = 0, $__thousands_sep = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($__buf) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__buf>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = 10;
 } else {
  $5 = HEAP32[$__buf>>2]|0;
  $6 = $5 & -2;
  $phitmp$i = (($6) + -1)|0;
  $7 = $phitmp$i;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$7,0);
 $8 = HEAP8[$__buf>>0]|0;
 $9 = $8 & 1;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  $13 = (($__buf) + 1|0);
  $$pre26 = (($__buf) + 8|0);
  $$pre$phi25Z2D = $13;$$pre$phi27Z2D = $$pre26;$14 = $13;
 } else {
  $11 = (($__buf) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $$pre24 = (($__buf) + 1|0);
  $$pre$phi25Z2D = $$pre24;$$pre$phi27Z2D = $11;$14 = $12;
 }
 HEAP32[$__a_end>>2] = $14;
 HEAP32[$__g_end>>2] = $__g;
 HEAP32[$__dc>>2] = 0;
 HEAP8[$__in_units>>0] = 1;
 HEAP8[$__exp>>0] = 69;
 $15 = (($__buf) + 4|0);
 $16 = HEAP32[$__decimal_point>>2]|0;
 $17 = HEAP32[$__thousands_sep>>2]|0;
 $$pre = HEAP32[$__b>>2]|0;
 $$pre$i$i$i4 = $$pre;$__a$0 = $14;
 L12: while(1) {
  $18 = ($$pre$i$i$i4|0)==(0|0);
  if ($18) {
   $140 = 1;$74 = 0;
  } else {
   $19 = (($$pre$i$i$i4) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($$pre$i$i$i4) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($20|0)==($22|0);
   if ($23) {
    $24 = HEAP32[$$pre$i$i$i4>>2]|0;
    $25 = (($24) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (FUNCTION_TABLE_ii[$26 & 63]($$pre$i$i$i4)|0);
    $$0$i$i$i$i2 = $27;
   } else {
    $28 = HEAP32[$20>>2]|0;
    $$0$i$i$i$i2 = $28;
   }
   $29 = ($$0$i$i$i$i2|0)==(-1);
   if ($29) {
    HEAP32[$__b>>2] = 0;
    $140 = 1;$74 = 0;
   } else {
    $140 = 0;$74 = $$pre$i$i$i4;
   }
  }
  $30 = HEAP32[$__e>>2]|0;
  $31 = ($30|0)==(0|0);
  do {
   if ($31) {
    label = 22;
   } else {
    $32 = (($30) + 12|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($30) + 16|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($33|0)==($35|0);
    if ($36) {
     $37 = HEAP32[$30>>2]|0;
     $38 = (($37) + 36|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (FUNCTION_TABLE_ii[$39 & 63]($30)|0);
     $$0$i$i1$i$i8 = $40;
    } else {
     $41 = HEAP32[$33>>2]|0;
     $$0$i$i1$i$i8 = $41;
    }
    $42 = ($$0$i$i1$i$i8|0)==(-1);
    if ($42) {
     HEAP32[$__e>>2] = 0;
     label = 22;
     break;
    } else {
     if ($140) {
      $141 = $30;
      break;
     } else {
      $$lcssa = $74;$$pre$i3$i$i = $30;$__a$2 = $__a$0;
      break L12;
     }
    }
   }
  } while(0);
  if ((label|0) == 22) {
   label = 0;
   if ($140) {
    $$lcssa = $74;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
    break;
   } else {
    $141 = 0;
   }
  }
  $43 = HEAP32[$__a_end>>2]|0;
  $44 = HEAP8[$__buf>>0]|0;
  $45 = $44 & 1;
  $46 = ($45<<24>>24)==(0);
  if ($46) {
   $48 = $44&255;
   $49 = $48 >>> 1;
   $51 = $49;
  } else {
   $47 = HEAP32[$15>>2]|0;
   $51 = $47;
  }
  $50 = (($__a$0) + ($51)|0);
  $52 = ($43|0)==($50|0);
  if ($52) {
   if ($46) {
    $54 = $44&255;
    $55 = $54 >>> 1;
    $56 = $44&255;
    $57 = $56 >>> 1;
    $59 = $57;$72 = $55;
   } else {
    $53 = HEAP32[$15>>2]|0;
    $59 = $53;$72 = $53;
   }
   $58 = $59 << 1;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$58,0);
   $60 = HEAP8[$__buf>>0]|0;
   $61 = $60 & 1;
   $62 = ($61<<24>>24)==(0);
   if ($62) {
    $65 = 10;
   } else {
    $63 = HEAP32[$__buf>>2]|0;
    $64 = $63 & -2;
    $phitmp$i17 = (($64) + -1)|0;
    $65 = $phitmp$i17;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$65,0);
   $66 = HEAP8[$__buf>>0]|0;
   $67 = $66 & 1;
   $68 = ($67<<24>>24)==(0);
   if ($68) {
    $71 = $$pre$phi25Z2D;
   } else {
    $69 = HEAP32[$$pre$phi27Z2D>>2]|0;
    $71 = $69;
   }
   $70 = (($71) + ($72)|0);
   HEAP32[$__a_end>>2] = $70;
   $__a$1 = $71;
  } else {
   $__a$1 = $__a$0;
  }
  $73 = (($74) + 12|0);
  $75 = HEAP32[$73>>2]|0;
  $76 = (($74) + 16|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75|0)==($77|0);
  if ($78) {
   $79 = HEAP32[$74>>2]|0;
   $80 = (($79) + 36|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (FUNCTION_TABLE_ii[$81 & 63]($74)|0);
   $$0$i$i = $82;
  } else {
   $83 = HEAP32[$75>>2]|0;
   $$0$i$i = $83;
  }
  $84 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$16,$17,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
  $85 = ($84|0)==(0);
  if (!($85)) {
   $$lcssa = $74;$$pre$i3$i$i = $141;$__a$2 = $__a$1;
   break;
  }
  $86 = HEAP32[$73>>2]|0;
  $87 = HEAP32[$76>>2]|0;
  $88 = ($86|0)==($87|0);
  if ($88) {
   $89 = HEAP32[$74>>2]|0;
   $90 = (($89) + 40|0);
   $91 = HEAP32[$90>>2]|0;
   (FUNCTION_TABLE_ii[$91 & 63]($74)|0);
   $$pre$i$i$i4 = $74;$__a$0 = $__a$1;
   continue;
  } else {
   $92 = (($86) + 4|0);
   HEAP32[$73>>2] = $92;
   $$pre$i$i$i4 = $74;$__a$0 = $__a$1;
   continue;
  }
 }
 $93 = HEAP8[$__grouping>>0]|0;
 $94 = $93 & 1;
 $95 = ($94<<24>>24)==(0);
 if ($95) {
  $98 = $93&255;
  $99 = $98 >>> 1;
  $100 = $99;
 } else {
  $96 = (($__grouping) + 4|0);
  $97 = HEAP32[$96>>2]|0;
  $100 = $97;
 }
 $101 = ($100|0)==(0);
 $102 = HEAP8[$__in_units>>0]|0;
 $103 = ($102<<24>>24)==(0);
 $or$cond = $101 | $103;
 $$pre22 = HEAP32[$__g_end>>2]|0;
 if ($or$cond) {
  $112 = $$pre22;
 } else {
  $104 = $$pre22;
  $105 = $__g;
  $106 = (($104) - ($105))|0;
  $107 = ($106|0)<(160);
  if ($107) {
   $108 = HEAP32[$__dc>>2]|0;
   $109 = (($$pre22) + 4|0);
   HEAP32[$__g_end>>2] = $109;
   HEAP32[$$pre22>>2] = $108;
   $112 = $109;
  } else {
   $112 = $$pre22;
  }
 }
 $110 = HEAP32[$__a_end>>2]|0;
 $111 = (+__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a$2,$110,$__err));
 HEAPF64[$__v>>3] = $111;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$112,$__err);
 $113 = ($$lcssa|0)==(0|0);
 if ($113) {
  $139 = 0;$142 = 1;
 } else {
  $114 = (($$lcssa) + 12|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = (($$lcssa) + 16|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = ($115|0)==($117|0);
  if ($118) {
   $119 = HEAP32[$$lcssa>>2]|0;
   $120 = (($119) + 36|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = (FUNCTION_TABLE_ii[$121 & 63]($$lcssa)|0);
   $$0$i$i$i$i = $122;
  } else {
   $123 = HEAP32[$115>>2]|0;
   $$0$i$i$i$i = $123;
  }
  $124 = ($$0$i$i$i$i|0)==(-1);
  if ($124) {
   HEAP32[$__b>>2] = 0;
   $139 = 0;$142 = 1;
  } else {
   $139 = $$lcssa;$142 = 0;
  }
 }
 $125 = ($$pre$i3$i$i|0)==(0|0);
 do {
  if ($125) {
   label = 61;
  } else {
   $126 = (($$pre$i3$i$i) + 12|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($$pre$i3$i$i) + 16|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127|0)==($129|0);
   if ($130) {
    $131 = HEAP32[$$pre$i3$i$i>>2]|0;
    $132 = (($131) + 36|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (FUNCTION_TABLE_ii[$133 & 63]($$pre$i3$i$i)|0);
    $$0$i$i1$i$i = $134;
   } else {
    $135 = HEAP32[$127>>2]|0;
    $$0$i$i1$i$i = $135;
   }
   $136 = ($$0$i$i1$i$i|0)==(-1);
   if ($136) {
    HEAP32[$__e>>2] = 0;
    label = 61;
    break;
   } else {
    if ($142) {
     break;
    } else {
     label = 63;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 61) {
  if ($142) {
   label = 63;
  }
 }
 if ((label|0) == 63) {
  $137 = HEAP32[$__err>>2]|0;
  $138 = $137 | 2;
  HEAP32[$__err>>2] = $138;
 }
 HEAP32[$agg$result>>2] = $139;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsnprintf($__s,$__n,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if (!($2)) {
  (_uselocale(($0|0))|0);
 }
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vasprintf($__s,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if (!($2)) {
  (_uselocale(($0|0))|0);
 }
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   HEAP32[$agg$result>>2] = 0;
  } else {
   $2 = $__oe;
   $3 = $__ob;
   $4 = (($2) - ($3))|0;
   $5 = $4 >> 2;
   $6 = (($__iob) + 12|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)>($5|0);
   $9 = (($7) - ($5))|0;
   $__ns$0 = $8 ? $9 : 0;
   $10 = $__op;
   $11 = (($10) - ($3))|0;
   $12 = $11 >> 2;
   $13 = ($11|0)>(0);
   if ($13) {
    $14 = HEAP32[$0>>2]|0;
    $15 = (($14) + 48|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 31]($0,$__ob,$12)|0);
    $18 = ($17|0)==($12|0);
    if (!($18)) {
     HEAP32[$__s>>2] = 0;
     HEAP32[$agg$result>>2] = 0;
     break;
    }
   }
   $19 = ($__ns$0|0)>(0);
   do {
    if ($19) {
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns$0,$__fl);
     $20 = HEAP8[$__sp>>0]|0;
     $21 = $20 & 1;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      $25 = (($__sp) + 4|0);
      $29 = $25;
     } else {
      $23 = (($__sp) + 8|0);
      $24 = HEAP32[$23>>2]|0;
      $29 = $24;
     }
     $26 = HEAP32[$0>>2]|0;
     $27 = (($26) + 48|0);
     $28 = HEAP32[$27>>2]|0;
     $30 = (FUNCTION_TABLE_iiii[$28 & 31]($0,$29,$__ns$0)|0);
     $31 = ($30|0)==($__ns$0|0);
     if ($31) {
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
      break;
     } else {
      HEAP32[$__s>>2] = 0;
      HEAP32[$agg$result>>2] = 0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($__sp);
      break L1;
     }
    }
   } while(0);
   $32 = (($2) - ($10))|0;
   $33 = $32 >> 2;
   $34 = ($32|0)>(0);
   if ($34) {
    $35 = HEAP32[$0>>2]|0;
    $36 = (($35) + 48|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_iiii[$37 & 31]($0,$__op,$33)|0);
    $39 = ($38|0)==($33|0);
    if (!($39)) {
     HEAP32[$__s>>2] = 0;
     HEAP32[$agg$result>>2] = 0;
     break;
    }
   }
   HEAP32[$6>>2] = 0;
   HEAP32[$agg$result>>2] = $0;
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i10 = 0, $$0$in = 0, $$01 = 0, $$lcssa = 0, $$pre$i$i$i = 0, $$pre$i$i$i16 = 0, $$pre$i$i$i3 = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i20$lcssa = 0, $$pre$i2$i$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $__r$0$lcssa = 0, $isascii1$i = 0, $isascii1$i12 = 0, $sext = 0, $sext24 = 0, $tmp$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $12 = 0;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 63]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $12 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $12 = $$pre$i$i$i;
     break;
    }
   } else {
    $12 = $0;
   }
  }
 } while(0);
 $13 = ($12|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = (($14) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($14) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = (($21) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 63]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($13) {
    $156 = $14;
    label = 13;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($13) {
   label = 12;
  } else {
   $156 = 0;
   label = 13;
  }
 }
 L16: do {
  if ((label|0) == 12) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
   $$01 = 0;
  }
  else if ((label|0) == 13) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = (($28) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($28) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = (($34) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 63]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP8[$30>>0]|0;
    $39 = $38&255;
    $$0$i$i = $39;
   }
   $40 = $$0$i$i&255;
   $isascii1$i = ($40<<24>>24)>(-1);
   if ($isascii1$i) {
    $sext = $$0$i$i << 24;
    $41 = $sext >> 24;
    $42 = (($__ct) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($43) + ($41<<1)|0);
    $45 = HEAP16[$44>>1]|0;
    $46 = $45 & 2048;
    $47 = ($46<<16>>16)==(0);
    if (!($47)) {
     $50 = HEAP32[$__ct>>2]|0;
     $51 = (($50) + 36|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (FUNCTION_TABLE_iiii[$52 & 31]($__ct,$40,0)|0);
     $54 = $53 << 24 >> 24;
     $55 = HEAP32[$__b>>2]|0;
     $56 = (($55) + 12|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (($55) + 16|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = ($57|0)==($59|0);
     if ($60) {
      $61 = HEAP32[$55>>2]|0;
      $62 = (($61) + 40|0);
      $63 = HEAP32[$62>>2]|0;
      (FUNCTION_TABLE_ii[$63 & 63]($55)|0);
      $$0$in = $__n;$$pre$i2$i$i7 = $156;$79 = $156;$__r$0$in = $54;
     } else {
      $64 = (($57) + 1|0);
      HEAP32[$56>>2] = $64;
      $$0$in = $__n;$$pre$i2$i$i7 = $156;$79 = $156;$__r$0$in = $54;
     }
     while(1) {
      $__r$0 = (($__r$0$in) + -48)|0;
      $$0 = (($$0$in) + -1)|0;
      $65 = HEAP32[$__b>>2]|0;
      $66 = ($65|0)==(0|0);
      do {
       if ($66) {
        $77 = 0;
       } else {
        $67 = (($65) + 12|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = (($65) + 16|0);
        $70 = HEAP32[$69>>2]|0;
        $71 = ($68|0)==($70|0);
        if ($71) {
         $72 = HEAP32[$65>>2]|0;
         $73 = (($72) + 36|0);
         $74 = HEAP32[$73>>2]|0;
         $75 = (FUNCTION_TABLE_ii[$74 & 63]($65)|0);
         $76 = ($75|0)==(-1);
         if ($76) {
          HEAP32[$__b>>2] = 0;
          $77 = 0;
          break;
         } else {
          $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
          $77 = $$pre$i$i$i3;
          break;
         }
        } else {
         $77 = $65;
        }
       }
      } while(0);
      $78 = ($77|0)==(0|0);
      $80 = ($79|0)==(0|0);
      if ($80) {
       $$pre$i2$i$i20 = $$pre$i2$i$i7;$91 = 0;
      } else {
       $81 = (($79) + 12|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = (($79) + 16|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = ($82|0)==($84|0);
       if ($85) {
        $86 = HEAP32[$79>>2]|0;
        $87 = (($86) + 36|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = (FUNCTION_TABLE_ii[$88 & 63]($79)|0);
        $90 = ($89|0)==(-1);
        if ($90) {
         HEAP32[$__e>>2] = 0;
         $$pre$i2$i$i20 = 0;$91 = 0;
        } else {
         $$pre$i2$i$i20 = $$pre$i2$i$i7;$91 = $$pre$i2$i$i7;
        }
       } else {
        $$pre$i2$i$i20 = $$pre$i2$i$i7;$91 = $79;
       }
      }
      $92 = ($91|0)==(0|0);
      $tmp$i$i9 = $78 ^ $92;
      $93 = ($$0$in|0)>(1);
      $$ = $93 & $tmp$i$i9;
      $94 = HEAP32[$__b>>2]|0;
      if (!($$)) {
       $$lcssa = $94;$$pre$i2$i$i20$lcssa = $$pre$i2$i$i20;$__r$0$lcssa = $__r$0;
       break;
      }
      $95 = (($94) + 12|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = (($94) + 16|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = ($96|0)==($98|0);
      if ($99) {
       $100 = HEAP32[$94>>2]|0;
       $101 = (($100) + 36|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = (FUNCTION_TABLE_ii[$102 & 63]($94)|0);
       $$0$i$i10 = $103;
      } else {
       $104 = HEAP8[$96>>0]|0;
       $105 = $104&255;
       $$0$i$i10 = $105;
      }
      $106 = $$0$i$i10&255;
      $isascii1$i12 = ($106<<24>>24)>(-1);
      if (!($isascii1$i12)) {
       $$01 = $__r$0;
       break L16;
      }
      $sext24 = $$0$i$i10 << 24;
      $107 = $sext24 >> 24;
      $108 = HEAP32[$42>>2]|0;
      $109 = (($108) + ($107<<1)|0);
      $110 = HEAP16[$109>>1]|0;
      $111 = $110 & 2048;
      $112 = ($111<<16>>16)==(0);
      if ($112) {
       $$01 = $__r$0;
       break L16;
      }
      $113 = ($__r$0*10)|0;
      $114 = HEAP32[$__ct>>2]|0;
      $115 = (($114) + 36|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = (FUNCTION_TABLE_iiii[$116 & 31]($__ct,$106,0)|0);
      $118 = $117 << 24 >> 24;
      $119 = (($118) + ($113))|0;
      $120 = HEAP32[$__b>>2]|0;
      $121 = (($120) + 12|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 16|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ($122|0)==($124|0);
      if ($125) {
       $126 = HEAP32[$120>>2]|0;
       $127 = (($126) + 40|0);
       $128 = HEAP32[$127>>2]|0;
       (FUNCTION_TABLE_ii[$128 & 63]($120)|0);
       $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$79 = $91;$__r$0$in = $119;
       continue;
      } else {
       $129 = (($122) + 1|0);
       HEAP32[$121>>2] = $129;
       $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$79 = $91;$__r$0$in = $119;
       continue;
      }
     }
     $130 = ($$lcssa|0)==(0|0);
     do {
      if ($130) {
       $141 = 0;
      } else {
       $131 = (($$lcssa) + 12|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = (($$lcssa) + 16|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = ($132|0)==($134|0);
       if ($135) {
        $136 = HEAP32[$$lcssa>>2]|0;
        $137 = (($136) + 36|0);
        $138 = HEAP32[$137>>2]|0;
        $139 = (FUNCTION_TABLE_ii[$138 & 63]($$lcssa)|0);
        $140 = ($139|0)==(-1);
        if ($140) {
         HEAP32[$__b>>2] = 0;
         $141 = 0;
         break;
        } else {
         $$pre$i$i$i16 = HEAP32[$__b>>2]|0;
         $141 = $$pre$i$i$i16;
         break;
        }
       } else {
        $141 = $$lcssa;
       }
      }
     } while(0);
     $142 = ($141|0)==(0|0);
     $143 = ($$pre$i2$i$i20$lcssa|0)==(0|0);
     do {
      if ($143) {
       label = 50;
      } else {
       $144 = (($$pre$i2$i$i20$lcssa) + 12|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = (($$pre$i2$i$i20$lcssa) + 16|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = ($145|0)==($147|0);
       if ($148) {
        $149 = HEAP32[$$pre$i2$i$i20$lcssa>>2]|0;
        $150 = (($149) + 36|0);
        $151 = HEAP32[$150>>2]|0;
        $152 = (FUNCTION_TABLE_ii[$151 & 63]($$pre$i2$i$i20$lcssa)|0);
        $153 = ($152|0)==(-1);
        if ($153) {
         HEAP32[$__e>>2] = 0;
         label = 50;
         break;
        }
       }
       if ($142) {
        $$01 = $__r$0$lcssa;
        break L16;
       }
      }
     } while(0);
     if ((label|0) == 50) {
      if (!($142)) {
       $$01 = $__r$0$lcssa;
       break;
      }
     }
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
     $$01 = $__r$0$lcssa;
     break;
    }
   }
   $48 = HEAP32[$__err>>2]|0;
   $49 = $48 | 4;
   HEAP32[$__err>>2] = $49;
   $$01 = 0;
  }
 } while(0);
 return ($$01|0);
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i17 = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i23 = 0, $$0$i$i1$i$i8 = 0, $$0$i$i14 = 0, $$0$in = 0, $$01 = 0, $$lcssa = 0, $$pre$i$i$i = 0, $$pre$i$i$i19 = 0, $$pre$i$i$i4 = 0, $$pre$i3$i$i10 = 0, $$pre$i3$i$i25 = 0, $$pre$i3$i$i25$lcssa = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $__r$0$lcssa = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i20 = 0, $phitmp$i$i$i5 = 0, $phitmp$i4$i$i11 = 0, $tmp$i$i13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $147 = 1;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 63]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $147 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $147 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = (($13) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($13) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 63]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($147) {
     $148 = $13;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($147) {
   label = 16;
  } else {
   $148 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
   $$01 = 0;
  }
  else if ((label|0) == 17) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = (($28) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($28) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = (($34) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 63]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP32[$30>>2]|0;
    $$0$i$i = $38;
   }
   $39 = HEAP32[$__ct>>2]|0;
   $40 = (($39) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (FUNCTION_TABLE_iiii[$41 & 31]($__ct,2048,$$0$i$i)|0);
   if (!($42)) {
    $43 = HEAP32[$__err>>2]|0;
    $44 = $43 | 4;
    HEAP32[$__err>>2] = $44;
    $$01 = 0;
    break;
   }
   $45 = HEAP32[$__ct>>2]|0;
   $46 = (($45) + 52|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_iiii[$47 & 31]($__ct,$$0$i$i,0)|0);
   $49 = $48 << 24 >> 24;
   $50 = HEAP32[$__b>>2]|0;
   $51 = (($50) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($50) + 16|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($52|0)==($54|0);
   if ($55) {
    $56 = HEAP32[$50>>2]|0;
    $57 = (($56) + 40|0);
    $58 = HEAP32[$57>>2]|0;
    (FUNCTION_TABLE_ii[$58 & 63]($50)|0);
    $$0$in = $__n;$$pre$i3$i$i10 = $148;$73 = $148;$__r$0$in = $49;
   } else {
    $59 = (($52) + 4|0);
    HEAP32[$51>>2] = $59;
    $$0$in = $__n;$$pre$i3$i$i10 = $148;$73 = $148;$__r$0$in = $49;
   }
   while(1) {
    $__r$0 = (($__r$0$in) + -48)|0;
    $$0 = (($$0$in) + -1)|0;
    $60 = HEAP32[$__b>>2]|0;
    $61 = ($60|0)==(0|0);
    do {
     if ($61) {
      $87 = 1;
     } else {
      $62 = (($60) + 12|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = (($60) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($63|0)==($65|0);
      if ($66) {
       $67 = HEAP32[$60>>2]|0;
       $68 = (($67) + 36|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = (FUNCTION_TABLE_ii[$69 & 63]($60)|0);
       $$0$i$i$i$i2 = $70;
      } else {
       $71 = HEAP32[$63>>2]|0;
       $$0$i$i$i$i2 = $71;
      }
      $72 = ($$0$i$i$i$i2|0)==(-1);
      if ($72) {
       HEAP32[$__b>>2] = 0;
       $87 = 1;
       break;
      } else {
       $$pre$i$i$i4 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i5 = ($$pre$i$i$i4|0)==(0|0);
       $87 = $phitmp$i$i$i5;
       break;
      }
     }
    } while(0);
    $74 = ($73|0)==(0|0);
    do {
     if ($74) {
      $$pre$i3$i$i25 = $$pre$i3$i$i10;$149 = 0;$86 = 1;
     } else {
      $75 = (($73) + 12|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = (($73) + 16|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ($76|0)==($78|0);
      if ($79) {
       $80 = HEAP32[$73>>2]|0;
       $81 = (($80) + 36|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = (FUNCTION_TABLE_ii[$82 & 63]($73)|0);
       $$0$i$i1$i$i8 = $83;
      } else {
       $84 = HEAP32[$76>>2]|0;
       $$0$i$i1$i$i8 = $84;
      }
      $85 = ($$0$i$i1$i$i8|0)==(-1);
      if ($85) {
       HEAP32[$__e>>2] = 0;
       $$pre$i3$i$i25 = 0;$149 = 0;$86 = 1;
       break;
      } else {
       $phitmp$i4$i$i11 = ($$pre$i3$i$i10|0)==(0|0);
       $$pre$i3$i$i25 = $$pre$i3$i$i10;$149 = $$pre$i3$i$i10;$86 = $phitmp$i4$i$i11;
       break;
      }
     }
    } while(0);
    $tmp$i$i13 = $87 ^ $86;
    $88 = ($$0$in|0)>(1);
    $$ = $88 & $tmp$i$i13;
    $89 = HEAP32[$__b>>2]|0;
    if (!($$)) {
     $$lcssa = $89;$$pre$i3$i$i25$lcssa = $$pre$i3$i$i25;$__r$0$lcssa = $__r$0;
     break;
    }
    $90 = (($89) + 12|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (($89) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($91|0)==($93|0);
    if ($94) {
     $95 = HEAP32[$89>>2]|0;
     $96 = (($95) + 36|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = (FUNCTION_TABLE_ii[$97 & 63]($89)|0);
     $$0$i$i14 = $98;
    } else {
     $99 = HEAP32[$91>>2]|0;
     $$0$i$i14 = $99;
    }
    $100 = HEAP32[$__ct>>2]|0;
    $101 = (($100) + 12|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = (FUNCTION_TABLE_iiii[$102 & 31]($__ct,2048,$$0$i$i14)|0);
    if (!($103)) {
     $$01 = $__r$0;
     break L22;
    }
    $104 = ($__r$0*10)|0;
    $105 = HEAP32[$__ct>>2]|0;
    $106 = (($105) + 52|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (FUNCTION_TABLE_iiii[$107 & 31]($__ct,$$0$i$i14,0)|0);
    $109 = $108 << 24 >> 24;
    $110 = (($109) + ($104))|0;
    $111 = HEAP32[$__b>>2]|0;
    $112 = (($111) + 12|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = (($111) + 16|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ($113|0)==($115|0);
    if ($116) {
     $117 = HEAP32[$111>>2]|0;
     $118 = (($117) + 40|0);
     $119 = HEAP32[$118>>2]|0;
     (FUNCTION_TABLE_ii[$119 & 63]($111)|0);
     $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$73 = $149;$__r$0$in = $110;
     continue;
    } else {
     $120 = (($113) + 4|0);
     HEAP32[$112>>2] = $120;
     $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$73 = $149;$__r$0$in = $110;
     continue;
    }
   }
   $121 = ($$lcssa|0)==(0|0);
   do {
    if ($121) {
     $150 = 1;
    } else {
     $122 = (($$lcssa) + 12|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = (($$lcssa) + 16|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = ($123|0)==($125|0);
     if ($126) {
      $127 = HEAP32[$$lcssa>>2]|0;
      $128 = (($127) + 36|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = (FUNCTION_TABLE_ii[$129 & 63]($$lcssa)|0);
      $$0$i$i$i$i17 = $130;
     } else {
      $131 = HEAP32[$123>>2]|0;
      $$0$i$i$i$i17 = $131;
     }
     $132 = ($$0$i$i$i$i17|0)==(-1);
     if ($132) {
      HEAP32[$__b>>2] = 0;
      $150 = 1;
      break;
     } else {
      $$pre$i$i$i19 = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i20 = ($$pre$i$i$i19|0)==(0|0);
      $150 = $phitmp$i$i$i20;
      break;
     }
    }
   } while(0);
   $133 = ($$pre$i3$i$i25$lcssa|0)==(0|0);
   do {
    if ($133) {
     label = 60;
    } else {
     $134 = (($$pre$i3$i$i25$lcssa) + 12|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = (($$pre$i3$i$i25$lcssa) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($135|0)==($137|0);
     if ($138) {
      $139 = HEAP32[$$pre$i3$i$i25$lcssa>>2]|0;
      $140 = (($139) + 36|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = (FUNCTION_TABLE_ii[$141 & 63]($$pre$i3$i$i25$lcssa)|0);
      $$0$i$i1$i$i23 = $142;
     } else {
      $143 = HEAP32[$135>>2]|0;
      $$0$i$i1$i$i23 = $143;
     }
     $144 = ($$0$i$i1$i$i23|0)==(-1);
     if ($144) {
      HEAP32[$__e>>2] = 0;
      label = 60;
      break;
     } else {
      if ($150) {
       $$01 = $__r$0$lcssa;
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 60) {
    if (!($150)) {
     $$01 = $__r$0$lcssa;
     break;
    }
   }
   $145 = HEAP32[$__err>>2]|0;
   $146 = $145 | 2;
   HEAP32[$__err>>2] = $146;
   $$01 = $__r$0$lcssa;
  }
 } while(0);
 return ($$01|0);
}
function __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(107|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $2 ? $4 : 0;
 $14 = (_realloc($13,$$)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  __ZSt17__throw_bad_allocv();
  // unreachable;
 }
 if ($2) {
  HEAP32[$__b>>2] = $14;
  $19 = $14;
 } else {
  $$pr = HEAP32[$__b>>2]|0;
  HEAP32[$__b>>2] = $14;
  $16 = ($$pr|0)==(0|0);
  if ($16) {
   $19 = $14;
  } else {
   $17 = HEAP32[$0>>2]|0;
   FUNCTION_TABLE_vi[$17 & 127]($$pr);
   $$pre = HEAP32[$__b>>2]|0;
   $19 = $$pre;
  }
 }
 HEAP32[$0>>2] = 110;
 $18 = (($19) + ($12)|0);
 HEAP32[$__n>>2] = $18;
 $20 = HEAP32[$__b>>2]|0;
 $21 = (($20) + ($$)|0);
 HEAP32[$__e>>2] = $21;
 return;
}
function __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(107|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $12 >> 2;
 $14 = $2 ? $4 : 0;
 $15 = (_realloc($14,$$)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  __ZSt17__throw_bad_allocv();
  // unreachable;
 }
 if ($2) {
  HEAP32[$__b>>2] = $15;
  $21 = $15;
 } else {
  $$pr = HEAP32[$__b>>2]|0;
  HEAP32[$__b>>2] = $15;
  $17 = ($$pr|0)==(0|0);
  if ($17) {
   $21 = $15;
  } else {
   $18 = HEAP32[$0>>2]|0;
   FUNCTION_TABLE_vi[$18 & 127]($$pr);
   $$pre = HEAP32[$__b>>2]|0;
   $21 = $$pre;
  }
 }
 HEAP32[$0>>2] = 110;
 $19 = $$ >>> 2;
 $20 = (($21) + ($13<<2)|0);
 HEAP32[$__n>>2] = $20;
 $22 = HEAP32[$__b>>2]|0;
 $23 = (($22) + ($19<<2)|0);
 HEAP32[$__e>>2] = $23;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep1 = 0, $scevgep2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $15 = $5;$16 = 10;$40 = $1;
 } else {
  $6 = (($this) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $15 = $7;$16 = $phitmp$i;$40 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = ($__last|0)==($__first|0);
 do {
  if (!($13)) {
   $14 = (($16) - ($15))|0;
   $17 = ($14>>>0)<($12>>>0);
   if ($17) {
    $18 = (($15) + ($12))|0;
    $19 = (($18) - ($16))|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$16,$19,$15,$15,0,0);
    $$pre = HEAP8[$this>>0]|0;
    $21 = $$pre;
   } else {
    $21 = $40;
   }
   $20 = $21 & 1;
   $22 = ($20<<24>>24)==(0);
   if ($22) {
    $25 = (($this) + 1|0);
    $27 = $25;
   } else {
    $23 = (($this) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $27 = $24;
   }
   $26 = (($27) + ($15)|0);
   $28 = (($15) - ($0))|0;
   $scevgep = (($__last) + ($28)|0);
   $scevgep1 = $scevgep;
   $$0 = $__first;$__p$0 = $26;
   while(1) {
    $29 = ($$0|0)==($__last|0);
    if ($29) {
     break;
    }
    $30 = HEAP8[$$0>>0]|0;
    HEAP8[$__p$0>>0] = $30;
    $31 = (($__p$0) + 1|0);
    $32 = (($$0) + 1|0);
    $$0 = $32;$__p$0 = $31;
   }
   $scevgep2 = (($27) + ($scevgep1)|0);
   HEAP8[$scevgep2>>0] = 0;
   $33 = (($15) + ($12))|0;
   $34 = HEAP8[$this>>0]|0;
   $35 = $34 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $38 = $33 << 1;
    $39 = $38&255;
    HEAP8[$this>>0] = $39;
    break;
   } else {
    $37 = (($this) + 4|0);
    HEAP32[$37>>2] = $33;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(107|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $12 >> 2;
 $14 = $2 ? $4 : 0;
 $15 = (_realloc($14,$$)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  __ZSt17__throw_bad_allocv();
  // unreachable;
 }
 if ($2) {
  HEAP32[$__b>>2] = $15;
  $21 = $15;
 } else {
  $$pr = HEAP32[$__b>>2]|0;
  HEAP32[$__b>>2] = $15;
  $17 = ($$pr|0)==(0|0);
  if ($17) {
   $21 = $15;
  } else {
   $18 = HEAP32[$0>>2]|0;
   FUNCTION_TABLE_vi[$18 & 127]($$pr);
   $$pre = HEAP32[$__b>>2]|0;
   $21 = $$pre;
  }
 }
 HEAP32[$0>>2] = 110;
 $19 = $$ >>> 2;
 $20 = (($21) + ($13<<2)|0);
 HEAP32[$__n>>2] = $20;
 $22 = HEAP32[$__b>>2]|0;
 $23 = (($22) + ($19<<2)|0);
 HEAP32[$__e>>2] = $23;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, $phitmp$i = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $16 = $5;$17 = 1;$44 = $1;
 } else {
  $6 = (($this) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $16 = $7;$17 = $phitmp$i;$44 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = $12 >> 2;
 $14 = ($13|0)==(0);
 do {
  if (!($14)) {
   $15 = (($17) - ($16))|0;
   $18 = ($15>>>0)<($13>>>0);
   if ($18) {
    $19 = (($16) + ($13))|0;
    $20 = (($19) - ($17))|0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$17,$20,$16,$16,0,0);
    $$pre = HEAP8[$this>>0]|0;
    $22 = $$pre;
   } else {
    $22 = $44;
   }
   $21 = $22 & 1;
   $23 = ($21<<24>>24)==(0);
   if ($23) {
    $26 = (($this) + 4|0);
    $28 = $26;
   } else {
    $24 = (($this) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $28 = $25;
   }
   $27 = (($28) + ($16<<2)|0);
   $29 = $__last;
   $30 = (($29) - ($0))|0;
   $31 = $30 >>> 2;
   $32 = (($16) + ($31))|0;
   $$0 = $__first;$__p$0 = $27;
   while(1) {
    $33 = ($$0|0)==($__last|0);
    if ($33) {
     break;
    }
    $34 = HEAP32[$$0>>2]|0;
    HEAP32[$__p$0>>2] = $34;
    $35 = (($__p$0) + 4|0);
    $36 = (($$0) + 4|0);
    $$0 = $36;$__p$0 = $35;
   }
   $scevgep = (($28) + ($32<<2)|0);
   HEAP32[$scevgep>>2] = 0;
   $37 = (($16) + ($13))|0;
   $38 = HEAP8[$this>>0]|0;
   $39 = $38 & 1;
   $40 = ($39<<24>>24)==(0);
   if ($40) {
    $42 = $37 << 1;
    $43 = $42&255;
    HEAP8[$this>>0] = $43;
    break;
   } else {
    $41 = (($this) + 4|0);
    HEAP32[$41>>2] = $37;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 128|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__n|0)==(0);
 if (!($3)) {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this,$__n);
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n);
 }
 return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(4936)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(4976)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6704)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6696)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6768)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6776)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6832)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6840)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6848)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6856)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(5048)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(5168)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(5232)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(5328)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(5920)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(5984)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6048)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6112)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6152)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6216)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6272)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6320)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(5440)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(5592)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(5824)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(5856)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6360)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6400)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($__sz>>>0);
 L1: do {
  if ($7) {
   $8 = (($__sz) - ($6))|0;
   __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$8);
  } else {
   $9 = ($6>>>0)>($__sz>>>0);
   if ($9) {
    $10 = (($2) + ($__sz<<2)|0);
    $11 = $1;
    while(1) {
     $12 = ($11|0)==($10|0);
     if ($12) {
      break L1;
     }
     $13 = (($11) + -4|0);
     HEAP32[$0>>2] = $13;
     $11 = $13;
    }
   }
  }
 } while(0);
 return;
}
function __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $$pre$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if (!($1)) {
   $2 = (($this) + 4|0);
   $$pre$i$i = HEAP32[$2>>2]|0;
   $3 = $$pre$i$i;
   while(1) {
    $4 = ($3|0)==($0|0);
    if ($4) {
     break;
    }
    $5 = (($3) + -4|0);
    HEAP32[$2>>2] = $5;
    $3 = $5;
   }
   $6 = (($this) + 16|0);
   $7 = ($6|0)==($0|0);
   if ($7) {
    $8 = (($this) + 128|0);
    HEAP8[$8>>0] = 0;
    break;
   } else {
    __ZdlPv($0);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__vp) + 4|0);
 $$field = HEAP32[$0>>2]|0;
 $$index1 = (($0) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $1 = HEAP32[$__vp>>2]|0;
 $2 = $$field2 >> 1;
 $3 = (($1) + ($2)|0);
 $4 = $$field2 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $9 = $$field;
  $10 = $9;
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + ($$field)|0);
  $8 = HEAP32[$7>>2]|0;
  $10 = $8;
 }
 FUNCTION_TABLE_vi[$10 & 127]($3);
 return;
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 $$pre1 = $to_end;
 if ($1) {
  label = 4;
 } else {
  $2 = $to;
  $3 = (($$pre1) - ($2))|0;
  $4 = ($3|0)<(3);
  if ($4) {
   $$0 = 1;
  } else {
   $5 = (($to) + 1|0);
   HEAP32[$to_nxt>>2] = $5;
   HEAP8[$to>>0] = -17;
   $6 = HEAP32[$to_nxt>>2]|0;
   $7 = (($6) + 1|0);
   HEAP32[$to_nxt>>2] = $7;
   HEAP8[$6>>0] = -69;
   $8 = HEAP32[$to_nxt>>2]|0;
   $9 = (($8) + 1|0);
   HEAP32[$to_nxt>>2] = $9;
   HEAP8[$8>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $10 = $frm_end;
   $$pre = HEAP32[$frm_nxt>>2]|0;
   $11 = $$pre;
   while(1) {
    $12 = ($11>>>0)<($frm_end>>>0);
    if (!($12)) {
     $$0 = 0;
     break L4;
    }
    $13 = HEAP16[$11>>1]|0;
    $14 = $13&65535;
    $15 = ($14>>>0)>($Maxcode>>>0);
    if ($15) {
     $$0 = 2;
     break L4;
    }
    $16 = ($13&65535)<(128);
    do {
     if ($16) {
      $17 = HEAP32[$to_nxt>>2]|0;
      $18 = $17;
      $19 = (($$pre1) - ($18))|0;
      $20 = ($19|0)<(1);
      if ($20) {
       $$0 = 1;
       break L4;
      }
      $21 = $13&255;
      $22 = (($17) + 1|0);
      HEAP32[$to_nxt>>2] = $22;
      HEAP8[$17>>0] = $21;
     } else {
      $23 = ($13&65535)<(2048);
      if ($23) {
       $24 = HEAP32[$to_nxt>>2]|0;
       $25 = $24;
       $26 = (($$pre1) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $$0 = 1;
        break L4;
       }
       $28 = $14 >>> 6;
       $29 = $28 | 192;
       $30 = $29&255;
       $31 = (($24) + 1|0);
       HEAP32[$to_nxt>>2] = $31;
       HEAP8[$24>>0] = $30;
       $32 = $14 & 63;
       $33 = $32 | 128;
       $34 = $33&255;
       $35 = HEAP32[$to_nxt>>2]|0;
       $36 = (($35) + 1|0);
       HEAP32[$to_nxt>>2] = $36;
       HEAP8[$35>>0] = $34;
       break;
      }
      $37 = ($13&65535)<(55296);
      if ($37) {
       $38 = HEAP32[$to_nxt>>2]|0;
       $39 = $38;
       $40 = (($$pre1) - ($39))|0;
       $41 = ($40|0)<(3);
       if ($41) {
        $$0 = 1;
        break L4;
       }
       $42 = $14 >>> 12;
       $43 = $42 | 224;
       $44 = $43&255;
       $45 = (($38) + 1|0);
       HEAP32[$to_nxt>>2] = $45;
       HEAP8[$38>>0] = $44;
       $46 = $14 >>> 6;
       $47 = $46 & 63;
       $48 = $47 | 128;
       $49 = $48&255;
       $50 = HEAP32[$to_nxt>>2]|0;
       $51 = (($50) + 1|0);
       HEAP32[$to_nxt>>2] = $51;
       HEAP8[$50>>0] = $49;
       $52 = $14 & 63;
       $53 = $52 | 128;
       $54 = $53&255;
       $55 = HEAP32[$to_nxt>>2]|0;
       $56 = (($55) + 1|0);
       HEAP32[$to_nxt>>2] = $56;
       HEAP8[$55>>0] = $54;
       break;
      }
      $57 = ($13&65535)<(56320);
      if (!($57)) {
       $109 = ($13&65535)<(57344);
       if ($109) {
        $$0 = 2;
        break L4;
       }
       $110 = HEAP32[$to_nxt>>2]|0;
       $111 = $110;
       $112 = (($$pre1) - ($111))|0;
       $113 = ($112|0)<(3);
       if ($113) {
        $$0 = 1;
        break L4;
       }
       $114 = $14 >>> 12;
       $115 = $114 | 224;
       $116 = $115&255;
       $117 = (($110) + 1|0);
       HEAP32[$to_nxt>>2] = $117;
       HEAP8[$110>>0] = $116;
       $118 = $14 >>> 6;
       $119 = $118 & 63;
       $120 = $119 | 128;
       $121 = $120&255;
       $122 = HEAP32[$to_nxt>>2]|0;
       $123 = (($122) + 1|0);
       HEAP32[$to_nxt>>2] = $123;
       HEAP8[$122>>0] = $121;
       $124 = $14 & 63;
       $125 = $124 | 128;
       $126 = $125&255;
       $127 = HEAP32[$to_nxt>>2]|0;
       $128 = (($127) + 1|0);
       HEAP32[$to_nxt>>2] = $128;
       HEAP8[$127>>0] = $126;
       break;
      }
      $58 = $11;
      $59 = (($10) - ($58))|0;
      $60 = ($59|0)<(4);
      if ($60) {
       $$0 = 1;
       break L4;
      }
      $61 = (($11) + 2|0);
      $62 = HEAP16[$61>>1]|0;
      $63 = $62&65535;
      $64 = $63 & 64512;
      $65 = ($64|0)==(56320);
      if (!($65)) {
       $$0 = 2;
       break L4;
      }
      $66 = HEAP32[$to_nxt>>2]|0;
      $67 = $66;
      $68 = (($$pre1) - ($67))|0;
      $69 = ($68|0)<(4);
      if ($69) {
       $$0 = 1;
       break L4;
      }
      $70 = $14 & 960;
      $71 = $70 << 10;
      $72 = (($71) + 65536)|0;
      $73 = $14 << 10;
      $74 = $73 & 64512;
      $75 = $72 | $74;
      $76 = $63 & 1023;
      $77 = $75 | $76;
      $78 = ($77>>>0)>($Maxcode>>>0);
      if ($78) {
       $$0 = 2;
       break L4;
      }
      HEAP32[$frm_nxt>>2] = $61;
      $79 = $70 >>> 6;
      $80 = (($79) + 1)|0;
      $81 = $80 >>> 2;
      $82 = $81 | 240;
      $83 = $82&255;
      $84 = HEAP32[$to_nxt>>2]|0;
      $85 = (($84) + 1|0);
      HEAP32[$to_nxt>>2] = $85;
      HEAP8[$84>>0] = $83;
      $86 = $80 << 4;
      $87 = $86 & 48;
      $88 = $14 >>> 2;
      $89 = $88 & 15;
      $90 = $89 | $87;
      $91 = $90 | 128;
      $92 = $91&255;
      $93 = HEAP32[$to_nxt>>2]|0;
      $94 = (($93) + 1|0);
      HEAP32[$to_nxt>>2] = $94;
      HEAP8[$93>>0] = $92;
      $95 = $14 << 4;
      $96 = $95 & 48;
      $97 = $63 >>> 6;
      $98 = $97 & 15;
      $99 = $96 | $98;
      $100 = $99 | 128;
      $101 = $100&255;
      $102 = HEAP32[$to_nxt>>2]|0;
      $103 = (($102) + 1|0);
      HEAP32[$to_nxt>>2] = $103;
      HEAP8[$102>>0] = $101;
      $104 = $63 & 63;
      $105 = $104 | 128;
      $106 = $105&255;
      $107 = HEAP32[$to_nxt>>2]|0;
      $108 = (($107) + 1|0);
      HEAP32[$to_nxt>>2] = $108;
      HEAP8[$107>>0] = $106;
     }
    } while(0);
    $129 = HEAP32[$frm_nxt>>2]|0;
    $130 = (($129) + 2|0);
    HEAP32[$frm_nxt>>2] = $130;
    $11 = $130;
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$lcssa = 0, $$off = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $$pre = $frm_end;
  $$pre$phiZ2D = $$pre;
 } else {
  $2 = HEAP32[$frm_nxt>>2]|0;
  $3 = $frm_end;
  $4 = $2;
  $5 = (($3) - ($4))|0;
  $6 = ($5|0)>(2);
  if ($6) {
   $7 = HEAP8[$2>>0]|0;
   $8 = ($7<<24>>24)==(-17);
   if ($8) {
    $9 = (($2) + 1|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(-69);
    if ($11) {
     $12 = (($2) + 2|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = ($13<<24>>24)==(-65);
     if ($14) {
      $15 = (($2) + 3|0);
      HEAP32[$frm_nxt>>2] = $15;
      $$pre$phiZ2D = $3;
     } else {
      $$pre$phiZ2D = $3;
     }
    } else {
     $$pre$phiZ2D = $3;
    }
   } else {
    $$pre$phiZ2D = $3;
   }
  } else {
   $$pre$phiZ2D = $3;
  }
 }
 $16 = $to_end;
 L9: while(1) {
  $17 = HEAP32[$frm_nxt>>2]|0;
  $18 = ($17>>>0)<($frm_end>>>0);
  if (!($18)) {
   $$lcssa = $18;
   label = 41;
   break;
  }
  $19 = HEAP32[$to_nxt>>2]|0;
  $20 = ($19>>>0)<($to_end>>>0);
  if (!($20)) {
   $$lcssa = $18;
   label = 41;
   break;
  }
  $21 = HEAP8[$17>>0]|0;
  $22 = $21&255;
  $23 = ($22>>>0)>($Maxcode>>>0);
  if ($23) {
   $$0 = 2;
   break;
  }
  $24 = ($21<<24>>24)>(-1);
  do {
   if ($24) {
    $25 = $21&255;
    HEAP16[$19>>1] = $25;
    $26 = (($17) + 1|0);
    HEAP32[$frm_nxt>>2] = $26;
   } else {
    $27 = ($21&255)<(194);
    if ($27) {
     $$0 = 2;
     break L9;
    }
    $28 = ($21&255)<(224);
    if ($28) {
     $29 = $17;
     $30 = (($$pre$phiZ2D) - ($29))|0;
     $31 = ($30|0)<(2);
     if ($31) {
      $$0 = 1;
      break L9;
     }
     $32 = (($17) + 1|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = $33&255;
     $35 = $34 & 192;
     $36 = ($35|0)==(128);
     if (!($36)) {
      $$0 = 2;
      break L9;
     }
     $37 = $22 << 6;
     $38 = $37 & 1984;
     $39 = $34 & 63;
     $40 = $39 | $38;
     $41 = ($40>>>0)>($Maxcode>>>0);
     if ($41) {
      $$0 = 2;
      break L9;
     }
     $42 = $40&65535;
     HEAP16[$19>>1] = $42;
     $43 = (($17) + 2|0);
     HEAP32[$frm_nxt>>2] = $43;
     break;
    }
    $44 = ($21&255)<(240);
    if ($44) {
     $45 = $17;
     $46 = (($$pre$phiZ2D) - ($45))|0;
     $47 = ($46|0)<(3);
     if ($47) {
      $$0 = 1;
      break L9;
     }
     $48 = (($17) + 1|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = (($17) + 2|0);
     $51 = HEAP8[$50>>0]|0;
     if ((($22|0) == 237)) {
      $54 = $49 & -32;
      $55 = ($54<<24>>24)==(-128);
      if (!($55)) {
       $$0 = 2;
       break L9;
      }
     } else if ((($22|0) == 224)) {
      $52 = $49 & -32;
      $53 = ($52<<24>>24)==(-96);
      if (!($53)) {
       $$0 = 2;
       break L9;
      }
     } else {
      $56 = $49 & -64;
      $57 = ($56<<24>>24)==(-128);
      if (!($57)) {
       $$0 = 2;
       break L9;
      }
     }
     $58 = $51&255;
     $59 = $58 & 192;
     $60 = ($59|0)==(128);
     if (!($60)) {
      $$0 = 2;
      break L9;
     }
     $61 = $22 << 12;
     $62 = $49&255;
     $63 = $62 << 6;
     $64 = $63 & 4032;
     $65 = $64 | $61;
     $66 = $58 & 63;
     $67 = $65 | $66;
     $68 = $67 & 65535;
     $69 = ($68>>>0)>($Maxcode>>>0);
     if ($69) {
      $$0 = 2;
      break L9;
     }
     $70 = $67&65535;
     HEAP16[$19>>1] = $70;
     $71 = (($17) + 3|0);
     HEAP32[$frm_nxt>>2] = $71;
     break;
    }
    $72 = ($21&255)<(245);
    if (!($72)) {
     $$0 = 2;
     break L9;
    }
    $73 = $17;
    $74 = (($$pre$phiZ2D) - ($73))|0;
    $75 = ($74|0)<(4);
    if ($75) {
     $$0 = 1;
     break L9;
    }
    $76 = (($17) + 1|0);
    $77 = HEAP8[$76>>0]|0;
    $78 = (($17) + 2|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = (($17) + 3|0);
    $81 = HEAP8[$80>>0]|0;
    if ((($22|0) == 244)) {
     $83 = $77 & -16;
     $84 = ($83<<24>>24)==(-128);
     if (!($84)) {
      $$0 = 2;
      break L9;
     }
    } else if ((($22|0) == 240)) {
     $$off = (($77) + 112)<<24>>24;
     $82 = ($$off&255)<(48);
     if (!($82)) {
      $$0 = 2;
      break L9;
     }
    } else {
     $85 = $77 & -64;
     $86 = ($85<<24>>24)==(-128);
     if (!($86)) {
      $$0 = 2;
      break L9;
     }
    }
    $87 = $79&255;
    $88 = $87 & 192;
    $89 = ($88|0)==(128);
    if (!($89)) {
     $$0 = 2;
     break L9;
    }
    $90 = $81&255;
    $91 = $90 & 192;
    $92 = ($91|0)==(128);
    if (!($92)) {
     $$0 = 2;
     break L9;
    }
    $93 = $19;
    $94 = (($16) - ($93))|0;
    $95 = ($94|0)<(4);
    if ($95) {
     $$0 = 1;
     break L9;
    }
    $96 = $22 & 7;
    $97 = $96 << 18;
    $98 = $77&255;
    $99 = $98 << 12;
    $100 = $99 & 258048;
    $101 = $100 | $97;
    $102 = $87 << 6;
    $103 = $102 & 4032;
    $104 = $101 | $103;
    $105 = $90 & 63;
    $106 = $104 | $105;
    $107 = ($106>>>0)>($Maxcode>>>0);
    if ($107) {
     $$0 = 2;
     break L9;
    }
    $108 = $96 << 2;
    $109 = $98 >>> 4;
    $110 = $109 & 3;
    $111 = $110 | $108;
    $112 = $111 << 6;
    $113 = (($112) + 16320)|0;
    $114 = $98 << 2;
    $115 = $114 & 60;
    $116 = $87 >>> 4;
    $117 = $116 & 3;
    $118 = $115 | $117;
    $119 = $118 | $113;
    $120 = $119 | 55296;
    $121 = $120&65535;
    HEAP16[$19>>1] = $121;
    $122 = $102 & 960;
    $123 = $105 | $122;
    $124 = $123 | 56320;
    $125 = $124&65535;
    $126 = (($19) + 2|0);
    HEAP32[$to_nxt>>2] = $126;
    HEAP16[$126>>1] = $125;
    $127 = HEAP32[$frm_nxt>>2]|0;
    $128 = (($127) + 4|0);
    HEAP32[$frm_nxt>>2] = $128;
   }
  } while(0);
  $129 = HEAP32[$to_nxt>>2]|0;
  $130 = (($129) + 2|0);
  HEAP32[$to_nxt>>2] = $130;
 }
 if ((label|0) == 41) {
  $131 = $$lcssa&1;
  $$0 = $131;
 }
 return ($$0|0);
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$lcssa = 0, $$lcssa43 = 0, $$lcssa44 = 0, $$lcssa45 = 0, $$lcssa46 = 0, $$lcssa47 = 0, $$off = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$2 = 0, $nchar16_t$0 = 0, $nchar16_t$1 = 0, $or$cond = 0, $or$cond2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre = $frm_end;
 if ($1) {
  $frm_nxt$1 = $frm;$nchar16_t$0 = 0;
 } else {
  $2 = $frm;
  $3 = (($$pre) - ($2))|0;
  $4 = ($3|0)>(2);
  if ($4) {
   $5 = HEAP8[$frm>>0]|0;
   $6 = ($5<<24>>24)==(-17);
   if ($6) {
    $7 = (($frm) + 1|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==(-69);
    if ($9) {
     $10 = (($frm) + 2|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = ($11<<24>>24)==(-65);
     $13 = (($frm) + 3|0);
     $$frm = $12 ? $13 : $frm;
     $frm_nxt$1 = $$frm;$nchar16_t$0 = 0;
    } else {
     $frm_nxt$1 = $frm;$nchar16_t$0 = 0;
    }
   } else {
    $frm_nxt$1 = $frm;$nchar16_t$0 = 0;
   }
  } else {
   $frm_nxt$1 = $frm;$nchar16_t$0 = 0;
  }
 }
 L6: while(1) {
  $14 = ($frm_nxt$1>>>0)<($frm_end>>>0);
  $15 = ($nchar16_t$0>>>0)<($mx>>>0);
  $or$cond = $15 & $14;
  if (!($or$cond)) {
   $frm_nxt$1$lcssa = $frm_nxt$1;
   label = 42;
   break;
  }
  $16 = HEAP8[$frm_nxt$1>>0]|0;
  $17 = $16&255;
  $18 = ($17>>>0)>($Maxcode>>>0);
  if ($18) {
   $frm_nxt$1$lcssa = $frm_nxt$1;
   label = 42;
   break;
  }
  $19 = ($16<<24>>24)>(-1);
  do {
   if ($19) {
    $20 = (($frm_nxt$1) + 1|0);
    $frm_nxt$2 = $20;$nchar16_t$1 = $nchar16_t$0;
   } else {
    $21 = ($16&255)<(194);
    if ($21) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 42;
     break L6;
    }
    $22 = ($16&255)<(224);
    if ($22) {
     $23 = $frm_nxt$1;
     $24 = (($$pre) - ($23))|0;
     $25 = ($24|0)<(2);
     if ($25) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 42;
      break L6;
     }
     $26 = (($frm_nxt$1) + 1|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = $27&255;
     $29 = $28 & 192;
     $30 = ($29|0)==(128);
     if (!($30)) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 42;
      break L6;
     }
     $31 = $17 << 6;
     $32 = $31 & 1984;
     $33 = $28 & 63;
     $34 = $33 | $32;
     $35 = ($34>>>0)>($Maxcode>>>0);
     if ($35) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 42;
      break L6;
     }
     $36 = (($frm_nxt$1) + 2|0);
     $frm_nxt$2 = $36;$nchar16_t$1 = $nchar16_t$0;
     break;
    }
    $37 = ($16&255)<(240);
    if ($37) {
     $38 = $frm_nxt$1;
     $39 = (($$pre) - ($38))|0;
     $40 = ($39|0)<(3);
     if ($40) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 42;
      break L6;
     }
     $41 = (($frm_nxt$1) + 1|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = (($frm_nxt$1) + 2|0);
     $44 = HEAP8[$43>>0]|0;
     if ((($17|0) == 224)) {
      $45 = $42 & -32;
      $46 = ($45<<24>>24)==(-96);
      if (!($46)) {
       $$lcssa46 = $38;
       label = 20;
       break L6;
      }
     } else if ((($17|0) == 237)) {
      $49 = $42 & -32;
      $50 = ($49<<24>>24)==(-128);
      if (!($50)) {
       $$lcssa45 = $38;
       label = 22;
       break L6;
      }
     } else {
      $53 = $42 & -64;
      $54 = ($53<<24>>24)==(-128);
      if (!($54)) {
       $$lcssa47 = $38;
       label = 24;
       break L6;
      }
     }
     $57 = $44&255;
     $58 = $57 & 192;
     $59 = ($58|0)==(128);
     if (!($59)) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 42;
      break L6;
     }
     $60 = $17 << 12;
     $61 = $60 & 61440;
     $62 = $42&255;
     $63 = $62 << 6;
     $64 = $63 & 4032;
     $65 = $64 | $61;
     $66 = $57 & 63;
     $67 = $65 | $66;
     $68 = ($67>>>0)>($Maxcode>>>0);
     if ($68) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 42;
      break L6;
     }
     $69 = (($frm_nxt$1) + 3|0);
     $frm_nxt$2 = $69;$nchar16_t$1 = $nchar16_t$0;
     break;
    }
    $70 = ($16&255)<(245);
    if (!($70)) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 42;
     break L6;
    }
    $71 = $frm_nxt$1;
    $72 = (($$pre) - ($71))|0;
    $73 = ($72|0)<(4);
    $74 = (($mx) - ($nchar16_t$0))|0;
    $75 = ($74>>>0)<(2);
    $or$cond2 = $75 | $73;
    if ($or$cond2) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 42;
     break L6;
    }
    $76 = (($frm_nxt$1) + 1|0);
    $77 = HEAP8[$76>>0]|0;
    $78 = (($frm_nxt$1) + 2|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = (($frm_nxt$1) + 3|0);
    $81 = HEAP8[$80>>0]|0;
    if ((($17|0) == 244)) {
     $85 = $77 & -16;
     $86 = ($85<<24>>24)==(-128);
     if (!($86)) {
      $$lcssa = $71;
      label = 34;
      break L6;
     }
    } else if ((($17|0) == 240)) {
     $$off = (($77) + 112)<<24>>24;
     $82 = ($$off&255)<(48);
     if (!($82)) {
      $$lcssa43 = $71;
      label = 32;
      break L6;
     }
    } else {
     $89 = $77 & -64;
     $90 = ($89<<24>>24)==(-128);
     if (!($90)) {
      $$lcssa44 = $71;
      label = 36;
      break L6;
     }
    }
    $93 = $79&255;
    $94 = $93 & 192;
    $95 = ($94|0)==(128);
    if (!($95)) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 42;
     break L6;
    }
    $96 = $81&255;
    $97 = $96 & 192;
    $98 = ($97|0)==(128);
    if (!($98)) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 42;
     break L6;
    }
    $99 = $17 << 18;
    $100 = $99 & 1835008;
    $101 = $77&255;
    $102 = $101 << 12;
    $103 = $102 & 258048;
    $104 = $103 | $100;
    $105 = $93 << 6;
    $106 = $105 & 4032;
    $107 = $104 | $106;
    $108 = $96 & 63;
    $109 = $107 | $108;
    $110 = ($109>>>0)>($Maxcode>>>0);
    if ($110) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 42;
     break L6;
    }
    $111 = (($nchar16_t$0) + 1)|0;
    $112 = (($frm_nxt$1) + 4|0);
    $frm_nxt$2 = $112;$nchar16_t$1 = $111;
   }
  } while(0);
  $113 = (($nchar16_t$1) + 1)|0;
  $frm_nxt$1 = $frm_nxt$2;$nchar16_t$0 = $113;
 }
 if ((label|0) == 20) {
  $47 = $frm;
  $48 = (($$lcssa46) - ($47))|0;
  $$0 = $48;
 }
 else if ((label|0) == 22) {
  $51 = $frm;
  $52 = (($$lcssa45) - ($51))|0;
  $$0 = $52;
 }
 else if ((label|0) == 24) {
  $55 = $frm;
  $56 = (($$lcssa47) - ($55))|0;
  $$0 = $56;
 }
 else if ((label|0) == 32) {
  $83 = $frm;
  $84 = (($$lcssa43) - ($83))|0;
  $$0 = $84;
 }
 else if ((label|0) == 34) {
  $87 = $frm;
  $88 = (($$lcssa) - ($87))|0;
  $$0 = $88;
 }
 else if ((label|0) == 36) {
  $91 = $frm;
  $92 = (($$lcssa44) - ($91))|0;
  $$0 = $92;
 }
 else if ((label|0) == 42) {
  $114 = $frm_nxt$1$lcssa;
  $115 = $frm;
  $116 = (($114) - ($115))|0;
  $$0 = $116;
 }
 return ($$0|0);
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 $$pre1 = $to_end;
 if ($1) {
  label = 4;
 } else {
  $2 = $to;
  $3 = (($$pre1) - ($2))|0;
  $4 = ($3|0)<(3);
  if ($4) {
   $$0 = 1;
  } else {
   $5 = (($to) + 1|0);
   HEAP32[$to_nxt>>2] = $5;
   HEAP8[$to>>0] = -17;
   $6 = HEAP32[$to_nxt>>2]|0;
   $7 = (($6) + 1|0);
   HEAP32[$to_nxt>>2] = $7;
   HEAP8[$6>>0] = -69;
   $8 = HEAP32[$to_nxt>>2]|0;
   $9 = (($8) + 1|0);
   HEAP32[$to_nxt>>2] = $9;
   HEAP8[$8>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $$pre = HEAP32[$frm_nxt>>2]|0;
   $10 = $$pre;
   while(1) {
    $11 = ($10>>>0)<($frm_end>>>0);
    if (!($11)) {
     $$0 = 0;
     break L4;
    }
    $12 = HEAP32[$10>>2]|0;
    $13 = $12 & -2048;
    $14 = ($13|0)==(55296);
    $15 = ($12>>>0)>($Maxcode>>>0);
    $or$cond = $15 | $14;
    if ($or$cond) {
     $$0 = 2;
     break L4;
    }
    $16 = ($12>>>0)<(128);
    do {
     if ($16) {
      $17 = HEAP32[$to_nxt>>2]|0;
      $18 = $17;
      $19 = (($$pre1) - ($18))|0;
      $20 = ($19|0)<(1);
      if ($20) {
       $$0 = 1;
       break L4;
      }
      $21 = $12&255;
      $22 = (($17) + 1|0);
      HEAP32[$to_nxt>>2] = $22;
      HEAP8[$17>>0] = $21;
     } else {
      $23 = ($12>>>0)<(2048);
      if ($23) {
       $24 = HEAP32[$to_nxt>>2]|0;
       $25 = $24;
       $26 = (($$pre1) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $$0 = 1;
        break L4;
       }
       $28 = $12 >>> 6;
       $29 = $28 | 192;
       $30 = $29&255;
       $31 = (($24) + 1|0);
       HEAP32[$to_nxt>>2] = $31;
       HEAP8[$24>>0] = $30;
       $32 = $12 & 63;
       $33 = $32 | 128;
       $34 = $33&255;
       $35 = HEAP32[$to_nxt>>2]|0;
       $36 = (($35) + 1|0);
       HEAP32[$to_nxt>>2] = $36;
       HEAP8[$35>>0] = $34;
       break;
      }
      $37 = ($12>>>0)<(65536);
      $38 = HEAP32[$to_nxt>>2]|0;
      $39 = $38;
      $40 = (($$pre1) - ($39))|0;
      if ($37) {
       $41 = ($40|0)<(3);
       if ($41) {
        $$0 = 1;
        break L4;
       }
       $42 = $12 >>> 12;
       $43 = $42 | 224;
       $44 = $43&255;
       $45 = (($38) + 1|0);
       HEAP32[$to_nxt>>2] = $45;
       HEAP8[$38>>0] = $44;
       $46 = $12 >>> 6;
       $47 = $46 & 63;
       $48 = $47 | 128;
       $49 = $48&255;
       $50 = HEAP32[$to_nxt>>2]|0;
       $51 = (($50) + 1|0);
       HEAP32[$to_nxt>>2] = $51;
       HEAP8[$50>>0] = $49;
       $52 = $12 & 63;
       $53 = $52 | 128;
       $54 = $53&255;
       $55 = HEAP32[$to_nxt>>2]|0;
       $56 = (($55) + 1|0);
       HEAP32[$to_nxt>>2] = $56;
       HEAP8[$55>>0] = $54;
       break;
      } else {
       $57 = ($40|0)<(4);
       if ($57) {
        $$0 = 1;
        break L4;
       }
       $58 = $12 >>> 18;
       $59 = $58 | 240;
       $60 = $59&255;
       $61 = (($38) + 1|0);
       HEAP32[$to_nxt>>2] = $61;
       HEAP8[$38>>0] = $60;
       $62 = $12 >>> 12;
       $63 = $62 & 63;
       $64 = $63 | 128;
       $65 = $64&255;
       $66 = HEAP32[$to_nxt>>2]|0;
       $67 = (($66) + 1|0);
       HEAP32[$to_nxt>>2] = $67;
       HEAP8[$66>>0] = $65;
       $68 = $12 >>> 6;
       $69 = $68 & 63;
       $70 = $69 | 128;
       $71 = $70&255;
       $72 = HEAP32[$to_nxt>>2]|0;
       $73 = (($72) + 1|0);
       HEAP32[$to_nxt>>2] = $73;
       HEAP8[$72>>0] = $71;
       $74 = $12 & 63;
       $75 = $74 | 128;
       $76 = $75&255;
       $77 = HEAP32[$to_nxt>>2]|0;
       $78 = (($77) + 1|0);
       HEAP32[$to_nxt>>2] = $78;
       HEAP8[$77>>0] = $76;
       break;
      }
     }
    } while(0);
    $79 = HEAP32[$frm_nxt>>2]|0;
    $80 = (($79) + 4|0);
    HEAP32[$frm_nxt>>2] = $80;
    $10 = $80;
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$lcssa = 0, $$off = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $$pre = $frm_end;
  $$pre$phiZ2D = $$pre;
 } else {
  $2 = HEAP32[$frm_nxt>>2]|0;
  $3 = $frm_end;
  $4 = $2;
  $5 = (($3) - ($4))|0;
  $6 = ($5|0)>(2);
  if ($6) {
   $7 = HEAP8[$2>>0]|0;
   $8 = ($7<<24>>24)==(-17);
   if ($8) {
    $9 = (($2) + 1|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(-69);
    if ($11) {
     $12 = (($2) + 2|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = ($13<<24>>24)==(-65);
     if ($14) {
      $15 = (($2) + 3|0);
      HEAP32[$frm_nxt>>2] = $15;
      $$pre$phiZ2D = $3;
     } else {
      $$pre$phiZ2D = $3;
     }
    } else {
     $$pre$phiZ2D = $3;
    }
   } else {
    $$pre$phiZ2D = $3;
   }
  } else {
   $$pre$phiZ2D = $3;
  }
 }
 L9: while(1) {
  $16 = HEAP32[$frm_nxt>>2]|0;
  $17 = ($16>>>0)<($frm_end>>>0);
  if (!($17)) {
   $$lcssa = $17;
   label = 40;
   break;
  }
  $18 = HEAP32[$to_nxt>>2]|0;
  $19 = ($18>>>0)<($to_end>>>0);
  if (!($19)) {
   $$lcssa = $17;
   label = 40;
   break;
  }
  $20 = HEAP8[$16>>0]|0;
  $21 = $20&255;
  $22 = ($20<<24>>24)>(-1);
  do {
   if ($22) {
    $23 = ($21>>>0)>($Maxcode>>>0);
    if ($23) {
     $$0 = 2;
     break L9;
    }
    HEAP32[$18>>2] = $21;
    $24 = (($16) + 1|0);
    HEAP32[$frm_nxt>>2] = $24;
   } else {
    $25 = ($20&255)<(194);
    if ($25) {
     $$0 = 2;
     break L9;
    }
    $26 = ($20&255)<(224);
    if ($26) {
     $27 = $16;
     $28 = (($$pre$phiZ2D) - ($27))|0;
     $29 = ($28|0)<(2);
     if ($29) {
      $$0 = 1;
      break L9;
     }
     $30 = (($16) + 1|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = $31&255;
     $33 = $32 & 192;
     $34 = ($33|0)==(128);
     if (!($34)) {
      $$0 = 2;
      break L9;
     }
     $35 = $21 << 6;
     $36 = $35 & 1984;
     $37 = $32 & 63;
     $38 = $37 | $36;
     $39 = ($38>>>0)>($Maxcode>>>0);
     if ($39) {
      $$0 = 2;
      break L9;
     }
     HEAP32[$18>>2] = $38;
     $40 = (($16) + 2|0);
     HEAP32[$frm_nxt>>2] = $40;
     break;
    }
    $41 = ($20&255)<(240);
    if ($41) {
     $42 = $16;
     $43 = (($$pre$phiZ2D) - ($42))|0;
     $44 = ($43|0)<(3);
     if ($44) {
      $$0 = 1;
      break L9;
     }
     $45 = (($16) + 1|0);
     $46 = HEAP8[$45>>0]|0;
     $47 = (($16) + 2|0);
     $48 = HEAP8[$47>>0]|0;
     if ((($21|0) == 224)) {
      $49 = $46 & -32;
      $50 = ($49<<24>>24)==(-96);
      if (!($50)) {
       $$0 = 2;
       break L9;
      }
     } else if ((($21|0) == 237)) {
      $51 = $46 & -32;
      $52 = ($51<<24>>24)==(-128);
      if (!($52)) {
       $$0 = 2;
       break L9;
      }
     } else {
      $53 = $46 & -64;
      $54 = ($53<<24>>24)==(-128);
      if (!($54)) {
       $$0 = 2;
       break L9;
      }
     }
     $55 = $48&255;
     $56 = $55 & 192;
     $57 = ($56|0)==(128);
     if (!($57)) {
      $$0 = 2;
      break L9;
     }
     $58 = $21 << 12;
     $59 = $58 & 61440;
     $60 = $46&255;
     $61 = $60 << 6;
     $62 = $61 & 4032;
     $63 = $62 | $59;
     $64 = $55 & 63;
     $65 = $63 | $64;
     $66 = ($65>>>0)>($Maxcode>>>0);
     if ($66) {
      $$0 = 2;
      break L9;
     }
     HEAP32[$18>>2] = $65;
     $67 = (($16) + 3|0);
     HEAP32[$frm_nxt>>2] = $67;
     break;
    }
    $68 = ($20&255)<(245);
    if (!($68)) {
     $$0 = 2;
     break L9;
    }
    $69 = $16;
    $70 = (($$pre$phiZ2D) - ($69))|0;
    $71 = ($70|0)<(4);
    if ($71) {
     $$0 = 1;
     break L9;
    }
    $72 = (($16) + 1|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = (($16) + 2|0);
    $75 = HEAP8[$74>>0]|0;
    $76 = (($16) + 3|0);
    $77 = HEAP8[$76>>0]|0;
    if ((($21|0) == 240)) {
     $$off = (($73) + 112)<<24>>24;
     $78 = ($$off&255)<(48);
     if (!($78)) {
      $$0 = 2;
      break L9;
     }
    } else if ((($21|0) == 244)) {
     $79 = $73 & -16;
     $80 = ($79<<24>>24)==(-128);
     if (!($80)) {
      $$0 = 2;
      break L9;
     }
    } else {
     $81 = $73 & -64;
     $82 = ($81<<24>>24)==(-128);
     if (!($82)) {
      $$0 = 2;
      break L9;
     }
    }
    $83 = $75&255;
    $84 = $83 & 192;
    $85 = ($84|0)==(128);
    if (!($85)) {
     $$0 = 2;
     break L9;
    }
    $86 = $77&255;
    $87 = $86 & 192;
    $88 = ($87|0)==(128);
    if (!($88)) {
     $$0 = 2;
     break L9;
    }
    $89 = $21 << 18;
    $90 = $89 & 1835008;
    $91 = $73&255;
    $92 = $91 << 12;
    $93 = $92 & 258048;
    $94 = $93 | $90;
    $95 = $83 << 6;
    $96 = $95 & 4032;
    $97 = $94 | $96;
    $98 = $86 & 63;
    $99 = $97 | $98;
    $100 = ($99>>>0)>($Maxcode>>>0);
    if ($100) {
     $$0 = 2;
     break L9;
    }
    HEAP32[$18>>2] = $99;
    $101 = (($16) + 4|0);
    HEAP32[$frm_nxt>>2] = $101;
   }
  } while(0);
  $102 = HEAP32[$to_nxt>>2]|0;
  $103 = (($102) + 4|0);
  HEAP32[$to_nxt>>2] = $103;
 }
 if ((label|0) == 40) {
  $104 = $$lcssa&1;
  $$0 = $104;
 }
 return ($$0|0);
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$lcssa = 0, $$lcssa41 = 0, $$lcssa42 = 0, $$lcssa43 = 0, $$lcssa44 = 0, $$lcssa45 = 0, $$off = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$2 = 0, $nchar32_t$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre = $frm_end;
 if ($1) {
  $frm_nxt$1 = $frm;$nchar32_t$0 = 0;
 } else {
  $2 = $frm;
  $3 = (($$pre) - ($2))|0;
  $4 = ($3|0)>(2);
  if ($4) {
   $5 = HEAP8[$frm>>0]|0;
   $6 = ($5<<24>>24)==(-17);
   if ($6) {
    $7 = (($frm) + 1|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==(-69);
    if ($9) {
     $10 = (($frm) + 2|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = ($11<<24>>24)==(-65);
     $13 = (($frm) + 3|0);
     $$frm = $12 ? $13 : $frm;
     $frm_nxt$1 = $$frm;$nchar32_t$0 = 0;
    } else {
     $frm_nxt$1 = $frm;$nchar32_t$0 = 0;
    }
   } else {
    $frm_nxt$1 = $frm;$nchar32_t$0 = 0;
   }
  } else {
   $frm_nxt$1 = $frm;$nchar32_t$0 = 0;
  }
 }
 L6: while(1) {
  $14 = ($frm_nxt$1>>>0)<($frm_end>>>0);
  $15 = ($nchar32_t$0>>>0)<($mx>>>0);
  $or$cond = $15 & $14;
  if (!($or$cond)) {
   $frm_nxt$1$lcssa = $frm_nxt$1;
   label = 42;
   break;
  }
  $16 = HEAP8[$frm_nxt$1>>0]|0;
  $17 = $16&255;
  $18 = ($16<<24>>24)>(-1);
  do {
   if ($18) {
    $19 = ($17>>>0)>($Maxcode>>>0);
    if ($19) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 42;
     break L6;
    }
    $20 = (($frm_nxt$1) + 1|0);
    $frm_nxt$2 = $20;
   } else {
    $21 = ($16&255)<(194);
    if ($21) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 42;
     break L6;
    }
    $22 = ($16&255)<(224);
    if ($22) {
     $23 = $frm_nxt$1;
     $24 = (($$pre) - ($23))|0;
     $25 = ($24|0)<(2);
     if ($25) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 42;
      break L6;
     }
     $26 = (($frm_nxt$1) + 1|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = $27&255;
     $29 = $28 & 192;
     $30 = ($29|0)==(128);
     if (!($30)) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 42;
      break L6;
     }
     $31 = $17 << 6;
     $32 = $31 & 1984;
     $33 = $28 & 63;
     $34 = $33 | $32;
     $35 = ($34>>>0)>($Maxcode>>>0);
     if ($35) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 42;
      break L6;
     }
     $36 = (($frm_nxt$1) + 2|0);
     $frm_nxt$2 = $36;
     break;
    }
    $37 = ($16&255)<(240);
    if ($37) {
     $38 = $frm_nxt$1;
     $39 = (($$pre) - ($38))|0;
     $40 = ($39|0)<(3);
     if ($40) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 42;
      break L6;
     }
     $41 = (($frm_nxt$1) + 1|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = (($frm_nxt$1) + 2|0);
     $44 = HEAP8[$43>>0]|0;
     if ((($17|0) == 224)) {
      $45 = $42 & -32;
      $46 = ($45<<24>>24)==(-96);
      if (!($46)) {
       $$lcssa44 = $38;
       label = 20;
       break L6;
      }
     } else if ((($17|0) == 237)) {
      $49 = $42 & -32;
      $50 = ($49<<24>>24)==(-128);
      if (!($50)) {
       $$lcssa43 = $38;
       label = 22;
       break L6;
      }
     } else {
      $53 = $42 & -64;
      $54 = ($53<<24>>24)==(-128);
      if (!($54)) {
       $$lcssa45 = $38;
       label = 24;
       break L6;
      }
     }
     $57 = $44&255;
     $58 = $57 & 192;
     $59 = ($58|0)==(128);
     if (!($59)) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 42;
      break L6;
     }
     $60 = $17 << 12;
     $61 = $60 & 61440;
     $62 = $42&255;
     $63 = $62 << 6;
     $64 = $63 & 4032;
     $65 = $64 | $61;
     $66 = $57 & 63;
     $67 = $65 | $66;
     $68 = ($67>>>0)>($Maxcode>>>0);
     if ($68) {
      $frm_nxt$1$lcssa = $frm_nxt$1;
      label = 42;
      break L6;
     }
     $69 = (($frm_nxt$1) + 3|0);
     $frm_nxt$2 = $69;
     break;
    }
    $70 = ($16&255)<(245);
    if (!($70)) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 42;
     break L6;
    }
    $71 = $frm_nxt$1;
    $72 = (($$pre) - ($71))|0;
    $73 = ($72|0)<(4);
    if ($73) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 42;
     break L6;
    }
    $74 = (($frm_nxt$1) + 1|0);
    $75 = HEAP8[$74>>0]|0;
    $76 = (($frm_nxt$1) + 2|0);
    $77 = HEAP8[$76>>0]|0;
    $78 = (($frm_nxt$1) + 3|0);
    $79 = HEAP8[$78>>0]|0;
    if ((($17|0) == 244)) {
     $83 = $75 & -16;
     $84 = ($83<<24>>24)==(-128);
     if (!($84)) {
      $$lcssa = $71;
      label = 34;
      break L6;
     }
    } else if ((($17|0) == 240)) {
     $$off = (($75) + 112)<<24>>24;
     $80 = ($$off&255)<(48);
     if (!($80)) {
      $$lcssa41 = $71;
      label = 32;
      break L6;
     }
    } else {
     $87 = $75 & -64;
     $88 = ($87<<24>>24)==(-128);
     if (!($88)) {
      $$lcssa42 = $71;
      label = 36;
      break L6;
     }
    }
    $91 = $77&255;
    $92 = $91 & 192;
    $93 = ($92|0)==(128);
    if (!($93)) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 42;
     break L6;
    }
    $94 = $79&255;
    $95 = $94 & 192;
    $96 = ($95|0)==(128);
    if (!($96)) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 42;
     break L6;
    }
    $97 = $17 << 18;
    $98 = $97 & 1835008;
    $99 = $75&255;
    $100 = $99 << 12;
    $101 = $100 & 258048;
    $102 = $101 | $98;
    $103 = $91 << 6;
    $104 = $103 & 4032;
    $105 = $102 | $104;
    $106 = $94 & 63;
    $107 = $105 | $106;
    $108 = ($107>>>0)>($Maxcode>>>0);
    if ($108) {
     $frm_nxt$1$lcssa = $frm_nxt$1;
     label = 42;
     break L6;
    }
    $109 = (($frm_nxt$1) + 4|0);
    $frm_nxt$2 = $109;
   }
  } while(0);
  $110 = (($nchar32_t$0) + 1)|0;
  $frm_nxt$1 = $frm_nxt$2;$nchar32_t$0 = $110;
 }
 if ((label|0) == 20) {
  $47 = $frm;
  $48 = (($$lcssa44) - ($47))|0;
  $$0 = $48;
 }
 else if ((label|0) == 22) {
  $51 = $frm;
  $52 = (($$lcssa43) - ($51))|0;
  $$0 = $52;
 }
 else if ((label|0) == 24) {
  $55 = $frm;
  $56 = (($$lcssa45) - ($55))|0;
  $$0 = $56;
 }
 else if ((label|0) == 32) {
  $81 = $frm;
  $82 = (($$lcssa41) - ($81))|0;
  $$0 = $82;
 }
 else if ((label|0) == 34) {
  $85 = $frm;
  $86 = (($$lcssa) - ($85))|0;
  $$0 = $86;
 }
 else if ((label|0) == 36) {
  $89 = $frm;
  $90 = (($$lcssa42) - ($89))|0;
  $$0 = $90;
 }
 else if ((label|0) == 42) {
  $111 = $frm_nxt$1$lcssa;
  $112 = $frm;
  $113 = (($111) - ($112))|0;
  $$0 = $113;
 }
 return ($$0|0);
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 L1: do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (_strtoll_l($__a,$__p2,$__base,$3)|0);
   $5 = tempRet0;
   $6 = HEAP32[$1>>2]|0;
   $7 = ($6|0)==(0);
   if ($7) {
    HEAP32[$1>>2] = $2;
   }
   $8 = HEAP32[$__p2>>2]|0;
   $9 = ($8|0)==($__a_end|0);
   if (!($9)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $10 = ($6|0)==(34);
   do {
    if ($10) {
     HEAP32[$__err>>2] = 4;
     $21 = ($5|0)>(0);
     $22 = ($4>>>0)>(0);
     $23 = ($5|0)==(0);
     $24 = $23 & $22;
     $25 = $21 | $24;
     if ($25) {
      $$0 = 2147483647;
      break L1;
     }
    } else {
     $11 = ($5|0)<(-1);
     $12 = ($4>>>0)<(2147483648);
     $13 = ($5|0)==(-1);
     $14 = $13 & $12;
     $15 = $11 | $14;
     if ($15) {
      HEAP32[$__err>>2] = 4;
      break;
     }
     $16 = ($5|0)>(0);
     $17 = ($4>>>0)>(2147483647);
     $18 = ($5|0)==(0);
     $19 = $18 & $17;
     $20 = $16 | $19;
     if ($20) {
      HEAP32[$__err>>2] = 4;
      $$0 = 2147483647;
      break L1;
     } else {
      $$0 = $4;
      break L1;
     }
    }
   } while(0);
   $$0 = -2147483648;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $18 = 0;$19 = 0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (_strtoll_l($__a,$__p2,$__base,$3)|0);
   $5 = tempRet0;
   $6 = HEAP32[$1>>2]|0;
   $7 = ($6|0)==(0);
   if ($7) {
    HEAP32[$1>>2] = $2;
   }
   $8 = HEAP32[$__p2>>2]|0;
   $9 = ($8|0)==($__a_end|0);
   if (!($9)) {
    HEAP32[$__err>>2] = 4;
    $18 = 0;$19 = 0;
    break;
   }
   $10 = ($6|0)==(34);
   if ($10) {
    HEAP32[$__err>>2] = 4;
    $11 = ($5|0)>(0);
    $12 = ($4>>>0)>(0);
    $13 = ($5|0)==(0);
    $14 = $13 & $12;
    $15 = $11 | $14;
    $16 = $15 ? -1 : 0;
    $17 = $15 ? 2147483647 : -2147483648;
    tempRet0 = $17;
    STACKTOP = sp;return ($16|0);
   } else {
    $18 = $5;$19 = $4;
   }
  }
 } while(0);
 tempRet0 = $18;
 STACKTOP = sp;return ($19|0);
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   $13 = ($7>>>0)>(0);
   $14 = ($6>>>0)>(65535);
   $15 = ($7|0)==(0);
   $16 = $15 & $14;
   $17 = $13 | $16;
   $or$cond = $17 | $12;
   if ($or$cond) {
    HEAP32[$__err>>2] = 4;
    $$0 = -1;
    break;
   } else {
    $18 = $6&65535;
    $$0 = $18;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   $13 = ($7>>>0)>(0);
   $14 = ($6>>>0)>(4294967295);
   $15 = ($7|0)==(0);
   $16 = $15 & $14;
   $17 = $13 | $16;
   $or$cond = $17 | $12;
   if ($or$cond) {
    HEAP32[$__err>>2] = 4;
    $$0 = -1;
    break;
   } else {
    $$0 = $6;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   $13 = ($7>>>0)>(0);
   $14 = ($6>>>0)>(4294967295);
   $15 = ($7|0)==(0);
   $16 = $15 & $14;
   $17 = $13 | $16;
   $or$cond = $17 | $12;
   if ($or$cond) {
    HEAP32[$__err>>2] = 4;
    $$0 = -1;
    break;
   } else {
    $$0 = $6;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $13 = 0;$14 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $13 = 0;$14 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $13 = 0;$14 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   if ($12) {
    HEAP32[$__err>>2] = 4;
    $13 = -1;$14 = -1;
   } else {
    $13 = $7;$14 = $6;
   }
  }
 } while(0);
 tempRet0 = $13;
 STACKTOP = sp;return ($14|0);
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (+_strtold_l($__a,$__p2,$3));
   $5 = HEAP32[$1>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$1>>2] = $2;
   }
   $7 = HEAP32[$__p2>>2]|0;
   $8 = ($7|0)==($__a_end|0);
   if (!($8)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
   }
   $10 = $4;
   $$0 = $10;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (+_strtold_l($__a,$__p2,$3));
   $5 = HEAP32[$1>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$1>>2] = $2;
   }
   $7 = HEAP32[$__p2>>2]|0;
   $8 = ($7|0)==($__a_end|0);
   if (!($8)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (+_strtold_l($__a,$__p2,$3));
   $5 = HEAP32[$1>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$1>>2] = $2;
   }
   $7 = HEAP32[$__p2>>2]|0;
   $8 = ($7|0)==($__a_end|0);
   if (!($8)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i$i = 0, $$not$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741823);
 if ($0) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = (($this) + 128|0);
 $2 = HEAP8[$1>>0]|0;
 $$not$i$i = ($2<<24>>24)==(0);
 $3 = ($__n>>>0)<(29);
 $or$cond$i$i = $3 & $$not$i$i;
 if ($or$cond$i$i) {
  $4 = (($this) + 16|0);
  HEAP8[$1>>0] = 1;
  $$0$i$i = $4;
 } else {
  $5 = $__n << 2;
  $6 = (__Znwj($5)|0);
  $$0$i$i = $6;
 }
 $7 = (($this) + 4|0);
 HEAP32[$7>>2] = $$0$i$i;
 HEAP32[$this>>2] = $$0$i$i;
 $8 = (($$0$i$i) + ($__n<<2)|0);
 $9 = (($this) + 8|0);
 HEAP32[$9>>2] = $8;
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $$pre = HEAP32[$0>>2]|0;
 $$0 = $__n;$1 = $$pre;
 while(1) {
  $2 = ($1|0)==(0|0);
  if ($2) {
   $4 = 0;
  } else {
   HEAP32[$1>>2] = 0;
   $$pre1 = HEAP32[$0>>2]|0;
   $4 = $$pre1;
  }
  $3 = (($4) + 4|0);
  HEAP32[$0>>2] = $3;
  $5 = (($$0) + -1)|0;
  $6 = ($5|0)==(0);
  if ($6) {
   break;
  } else {
   $$0 = $5;$1 = $3;
  }
 }
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)<($__n>>>0);
 if ($8) {
  $9 = (($this) + 16|0);
  $10 = HEAP32[$this>>2]|0;
  $11 = $10;
  $12 = (($5) - ($11))|0;
  $13 = $12 >> 2;
  $14 = (($13) + ($__n))|0;
  $15 = ($14>>>0)>(1073741823);
  if ($15) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
   // unreachable;
  }
  $16 = (($4) - ($11))|0;
  $17 = $16 >> 2;
  $18 = ($17>>>0)<(536870911);
  if ($18) {
   $19 = $16 >> 1;
   $20 = ($19>>>0)<($14>>>0);
   $21 = $20 ? $14 : $19;
   $$0$i = $21;
  } else {
   $$0$i = 1073741823;
  }
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($__v,$$0$i,$13,$9);
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($__v,$__n);
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v);
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($__v);
 } else {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $$not$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 do {
  if ($2) {
   $8 = 0;
  } else {
   $3 = (($__a) + 112|0);
   $4 = HEAP8[$3>>0]|0;
   $$not$i$i = ($4<<24>>24)==(0);
   $5 = ($__cap>>>0)<(29);
   $or$cond$i$i = $5 & $$not$i$i;
   if ($or$cond$i$i) {
    HEAP8[$3>>0] = 1;
    $8 = $__a;
    break;
   } else {
    $6 = $__cap << 2;
    $7 = (__Znwj($6)|0);
    $8 = $7;
    break;
   }
  }
 } while(0);
 HEAP32[$this>>2] = $8;
 $9 = (($8) + ($__start<<2)|0);
 $10 = (($this) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = (($this) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = (($8) + ($__cap<<2)|0);
 HEAP32[$0>>2] = $12;
 return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $$pre = HEAP32[$0>>2]|0;
 $$0 = $__n;$1 = $$pre;
 while(1) {
  $2 = ($1|0)==(0|0);
  if ($2) {
   $4 = 0;
  } else {
   HEAP32[$1>>2] = 0;
   $$pre1 = HEAP32[$0>>2]|0;
   $4 = $$pre1;
  }
  $3 = (($4) + 4|0);
  HEAP32[$0>>2] = $3;
  $5 = (($$0) + -1)|0;
  $6 = ($5|0)==(0);
  if ($6) {
   break;
  } else {
   $$0 = $5;$1 = $3;
  }
 }
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($__v) + 4|0);
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = HEAP32[$3>>2]|0;
 $9 = (0 - ($7))|0;
 $10 = (($8) + ($9<<2)|0);
 HEAP32[$3>>2] = $10;
 _memcpy(($10|0),($0|0),($6|0))|0;
 $11 = HEAP32[$this>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $12;
 HEAP32[$3>>2] = $11;
 $13 = (($__v) + 8|0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$13>>2]|0;
 HEAP32[$1>>2] = $15;
 HEAP32[$13>>2] = $14;
 $16 = (($this) + 8|0);
 $17 = (($__v) + 12|0);
 $18 = HEAP32[$16>>2]|0;
 $19 = HEAP32[$17>>2]|0;
 HEAP32[$16>>2] = $19;
 HEAP32[$17>>2] = $18;
 $20 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $20;
 return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $$pre$i$i$i = HEAP32[$2>>2]|0;
 $3 = $$pre$i$i$i;
 while(1) {
  $4 = ($3|0)==($1|0);
  if ($4) {
   break;
  }
  $5 = (($3) + -4|0);
  HEAP32[$2>>2] = $5;
  $3 = $5;
 }
 $6 = HEAP32[$this>>2]|0;
 $7 = ($6|0)==(0|0);
 do {
  if (!($7)) {
   $8 = (($this) + 16|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==($6|0);
   if ($10) {
    $11 = (($9) + 112|0);
    HEAP8[$11>>0] = 0;
    break;
   } else {
    __ZdlPv($6);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+1)|0);
 return;
}
function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+-1)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = HEAP32[$this>>2]|0;
  $4 = (($3) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vi[$5 & 127]($this);
  $$0 = 1;
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg,$func) {
 $flag = $flag|0;
 $arg = $arg|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((14376|0))|0);
 while(1) {
  $0 = HEAP32[$flag>>2]|0;
  $1 = ($0|0)==(1);
  if (!($1)) {
   break;
  }
  (_pthread_cond_wait((14400|0),(14376|0))|0);
 }
 $2 = HEAP32[$flag>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  HEAP32[$flag>>2] = 1;
  (_pthread_mutex_unlock((14376|0))|0);
  FUNCTION_TABLE_vi[$func & 127]($arg);
  (_pthread_mutex_lock((14376|0))|0);
  HEAP32[$flag>>2] = -1;
  (_pthread_mutex_unlock((14376|0))|0);
  (_pthread_cond_broadcast((14400|0))|0);
 } else {
  (_pthread_mutex_unlock((14376|0))|0);
 }
 return;
}
function runPostSets() {

}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&31](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&127](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
}


function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
  FUNCTION_TABLE_viiiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&63](a1|0)|0;
}


function dynCall_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
  FUNCTION_TABLE_viiiiiid[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&3](a1|0,a2|0,a3|0);
}


function dynCall_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
  FUNCTION_TABLE_viiiiid[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&3]();
}


function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return FUNCTION_TABLE_iiiiiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&7](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  FUNCTION_TABLE_viiiiiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&15](a1|0,a2|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&7](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(0);return 0; }
function b1(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; abort(1); }
function b2(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(2); }
function b3(p0) { p0 = p0|0; abort(3); }
function b4(p0,p1) { p0 = p0|0;p1 = p1|0; abort(4); }
function b5(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; abort(5); }
function b6(p0) { p0 = p0|0; abort(6);return 0; }
function b7(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = +p6; abort(7); }
function b8(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(8); }
function b9(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; abort(9); }
function b10() { ; abort(10); }
function ___cxa_pure_virtual__wrapper() { ; ___cxa_pure_virtual(); }
function b11(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; abort(11);return 0; }
function b12(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(12);return 0; }
function b13(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; abort(13); }
function b14(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(14); }
function b15(p0,p1) { p0 = p0|0;p1 = p1|0; abort(15);return 0; }
function b16(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(16);return 0; }
function b17(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(17); }

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,__ZN6ikfast14IkSolutionListIdE11AddSolutionERKNSt3__16vectorINS_23IkSingleDOFSolutionBaseIdEENS2_9allocatorIS5_EEEERKNS3_IiNS6_IiEEEE,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_sn_write,__ZNKSt3__17collateIcE7do_hashEPKcS3_,__ZNKSt3__17collateIwE7do_hashEPKwS3_,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__15ctypeIcE9do_narrowEcc,__ZNKSt3__15ctypeIwE5do_isEtw,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,__ZNKSt3__15ctypeIwE9do_narrowEwc,_do_read,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_viiiiiii = [b1,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm
,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_viiiii = [b2,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_vi = [b3,__ZN6ikfast14IkSolutionListIdED2Ev,__ZN6ikfast14IkSolutionListIdED0Ev,__ZN6ikfast14IkSolutionListIdE5ClearEv,__ZN6ikfast10IkSolutionIdED2Ev,__ZN6ikfast10IkSolutionIdED0Ev,__ZNK6ikfast10IkSolutionIdE8ValidateEv,__ZN6ikfast14IkSolutionBaseIdED2Ev,__ZN6ikfast14IkSolutionBaseIdED0Ev,__ZN6ikfast18IkSolutionListBaseIdED2Ev,__ZN6ikfast18IkSolutionListBaseIdED0Ev,__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev
,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__17collateIcED2Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,__ZNSt3__17collateIwED2Ev,__ZNSt3__17collateIwED0Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev
,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__110moneypunctIcLb0EED2Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,__ZNSt3__110moneypunctIcLb1EED2Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,__ZNSt3__110moneypunctIwLb0EED2Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,__ZNSt3__110moneypunctIwLb1EED2Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18messagesIcED2Ev,__ZNSt3__18messagesIcED0Ev,__ZNSt3__18messagesIwED2Ev,__ZNSt3__18messagesIwED0Ev,__ZNSt3__16locale5__impD2Ev
,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,__ZNSt3__112__do_nothingEPv,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,_free,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,__ZNK6ikfast10IkSolutionIdE18GetSolutionIndicesERNSt3__16vectorIjNS2_9allocatorIjEEEE,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__18messagesIcE8do_closeEi,__ZNKSt3__18messagesIwE8do_closeEi
,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_viiiiiiiii = [b5,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b5];
var FUNCTION_TABLE_ii = [b6,__ZNK6ikfast14IkSolutionListIdE15GetNumSolutionsEv,__ZNK6ikfast10IkSolutionIdE7GetFreeEv,__ZNK6ikfast10IkSolutionIdE6GetDOFEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,__ZNKSt9bad_alloc4whatEv,__ZNKSt13runtime_error4whatEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv
,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,b6,b6,b6,b6
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_viiiiiid = [b7,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b7];
var FUNCTION_TABLE_viii = [b8,__ZNK6ikfast10IkSolutionIdE11GetSolutionEPdPKd,__ZNK6ikfast10IkSolutionIdE11GetSolutionERNSt3__16vectorIdNS2_9allocatorIdEEEERKS6_,__ZNK6ikfast14IkSolutionBaseIdE11GetSolutionERNSt3__16vectorIdNS2_9allocatorIdEEEERKS6_];
var FUNCTION_TABLE_viiiiid = [b9,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b9,b9,b9];
var FUNCTION_TABLE_v = [b10,___cxa_pure_virtual__wrapper,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev];
var FUNCTION_TABLE_iiiiiiiii = [b11,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b11,b11,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_iiiii = [b12,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,b12,b12];
var FUNCTION_TABLE_viiiiiiii = [b13,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b13];
var FUNCTION_TABLE_viiiiii = [b14,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE];
var FUNCTION_TABLE_iii = [b15,__ZNK6ikfast14IkSolutionListIdE11GetSolutionEj,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNKSt3__15ctypeIcE10do_toupperEc,__ZNKSt3__15ctypeIcE10do_tolowerEc,__ZNKSt3__15ctypeIcE8do_widenEc,__ZNKSt3__15ctypeIwE10do_toupperEw,__ZNKSt3__15ctypeIwE10do_tolowerEw,__ZNKSt3__15ctypeIwE8do_widenEc,b15,b15,b15,b15];
var FUNCTION_TABLE_iiiiii = [b16,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b16,b16,b16];
var FUNCTION_TABLE_viiii = [b17,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__17collateIcE12do_transformEPKcS3_,__ZNKSt3__17collateIwE12do_transformEPKwS3_];

  return { ___cxa_can_catch: ___cxa_can_catch, _free: _free, _main: _main, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _memmove: _memmove, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _strlen: _strlen, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_ii: dynCall_ii, dynCall_viiiiiid: dynCall_viiiiiid, dynCall_viii: dynCall_viii, dynCall_viiiiid: dynCall_viiiiid, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viiiiiid = Module["dynCall_viiiiiid"] = asm["dynCall_viiiiiid"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiiiid = Module["dynCall_viiiiid"] = asm["dynCall_viiiiid"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }
    var request = Module['memoryInitializerRequest'];
    if (request) {
      // a network request has already been created, just use that
      if (request.response) {
        setTimeout(function() {
          applyMemoryInitializer(request.response);
        }, 0); // it's already here; but, apply it asynchronously
      } else {
        request.addEventListener('load', function() { // wait for it
          if (request.status !== 200 && request.status !== 0) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status);
          }
          if (!request.response || typeof request.response !== 'object' || !request.response.byteLength) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest response (expected ArrayBuffer): ' + request.response);
          }
          applyMemoryInitializer(request.response);
        });
      }
    } else {
      // fetch it from the network ourselves
      Browser.asyncLoad(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {
    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  abortDecorators.forEach(function(decorator) {
    output = decorator(output, what);
  });
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = false;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}




module.exports = Module._main;

module.exports = Module._main;
