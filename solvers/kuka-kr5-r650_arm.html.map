{"version":3,"file":"./solvers/kuka-kr5-r650_arm.html","sources":["./solvers/kuka-kr5-r650_arm.tmp.cpp"],"names":[],"mappingspMA;AAAA;AAAA;;;;;;;;AAFA;AAAA;AAAA;;;;;AA0MA;;;;;;;;;;;;;;;AAyzHA;AACA;AACA;AACA;AAAA;AACA;;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAEA;;AAAA;AAAA;AACA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AACA","sourcesContent":["/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE\n/// \\author Rosen Diankov\n///\n/// Licensed under the Apache License, Version 2.0 (the \"License\");\n/// you may not use this file except in compliance with the License.\n/// You may obtain a copy of the License at\n///     http://www.apache.org/licenses/LICENSE-2.0\n/// \n/// Unless required by applicable law or agreed to in writing, software\n/// distributed under the License is distributed on an \"AS IS\" BASIS,\n/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n/// See the License for the specific language governing permissions and\n/// limitations under the License.\n///\n/// ikfast version 0x10000048 generated on 2015-05-22 19:42:35.541315\n/// To compile with gcc:\n///     gcc -lstdc++ ik.cpp\n/// To compile without any main function as a shared object (might need -llapack):\n///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp\n#define IKFAST_HAS_LIBRARY\n#include \"ikfast.h\" // found inside share/openrave-X.Y/python/ikfast.h\nusing namespace ikfast;\n\n// check if the included ikfast version matches what this file was compiled with\n#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]\nIKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);\n\n#include <cmath>\n#include <vector>\n#include <limits>\n#include <algorithm>\n#include <complex>\n\n#ifndef IKFAST_ASSERT\n#include <stdexcept>\n#include <sstream>\n#include <iostream>\n\n#ifdef _MSC_VER\n#ifndef __PRETTY_FUNCTION__\n#define __PRETTY_FUNCTION__ __FUNCDNAME__\n#endif\n#endif\n\n#ifndef __PRETTY_FUNCTION__\n#define __PRETTY_FUNCTION__ __func__\n#endif\n\n#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << \"ikfast exception: \" << __FILE__ << \":\" << __LINE__ << \": \" <<__PRETTY_FUNCTION__ << \": Assertion '\" << #b << \"' failed\"; throw std::runtime_error(ss.str()); } }\n\n#endif\n\n#if defined(_MSC_VER)\n#define IKFAST_ALIGNED16(x) __declspec(align(16)) x\n#else\n#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))\n#endif\n\n#define IK2PI  ((IkReal)6.28318530717959)\n#define IKPI  ((IkReal)3.14159265358979)\n#define IKPI_2  ((IkReal)1.57079632679490)\n\n#ifdef _MSC_VER\n#ifndef isnan\n#define isnan _isnan\n#endif\n#ifndef isinf\n#define isinf _isinf\n#endif\n//#ifndef isfinite\n//#define isfinite _isfinite\n//#endif\n#endif // _MSC_VER\n\n// lapack routines\nextern \"C\" {\n  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);\n  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);\n  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);\n  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);\n  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);\n  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);\n}\n\nusing namespace std; // necessary to get std math routines\n\n#ifdef IKFAST_NAMESPACE\nnamespace IKFAST_NAMESPACE {\n#endif\n\ninline float IKabs(float f) { return fabsf(f); }\ninline double IKabs(double f) { return fabs(f); }\n\ninline float IKsqr(float f) { return f*f; }\ninline double IKsqr(double f) { return f*f; }\n\ninline float IKlog(float f) { return logf(f); }\ninline double IKlog(double f) { return log(f); }\n\n// allows asin and acos to exceed 1\n#ifndef IKFAST_SINCOS_THRESH\n#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)\n#endif\n\n// used to check input to atan2 for degenerate cases\n#ifndef IKFAST_ATAN2_MAGTHRESH\n#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)\n#endif\n\n// minimum distance of separate solutions\n#ifndef IKFAST_SOLUTION_THRESH\n#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)\n#endif\n\n// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate\n#ifndef IKFAST_EVALCOND_THRESH\n#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)\n#endif\n\n\ninline float IKasin(float f)\n{\nIKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver\nif( f <= -1 ) return float(-IKPI_2);\nelse if( f >= 1 ) return float(IKPI_2);\nreturn asinf(f);\n}\ninline double IKasin(double f)\n{\nIKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver\nif( f <= -1 ) return -IKPI_2;\nelse if( f >= 1 ) return IKPI_2;\nreturn asin(f);\n}\n\n// return positive value in [0,y)\ninline float IKfmod(float x, float y)\n{\n    while(x < 0) {\n        x += y;\n    }\n    return fmodf(x,y);\n}\n\n// return positive value in [0,y)\ninline double IKfmod(double x, double y)\n{\n    while(x < 0) {\n        x += y;\n    }\n    return fmod(x,y);\n}\n\ninline float IKacos(float f)\n{\nIKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver\nif( f <= -1 ) return float(IKPI);\nelse if( f >= 1 ) return float(0);\nreturn acosf(f);\n}\ninline double IKacos(double f)\n{\nIKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver\nif( f <= -1 ) return IKPI;\nelse if( f >= 1 ) return 0;\nreturn acos(f);\n}\ninline float IKsin(float f) { return sinf(f); }\ninline double IKsin(double f) { return sin(f); }\ninline float IKcos(float f) { return cosf(f); }\ninline double IKcos(double f) { return cos(f); }\ninline float IKtan(float f) { return tanf(f); }\ninline double IKtan(double f) { return tan(f); }\ninline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }\ninline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }\ninline float IKatan2Simple(float fy, float fx) {\n    return atan2f(fy,fx);\n}\ninline float IKatan2(float fy, float fx) {\n    if( isnan(fy) ) {\n        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned\n        return float(IKPI_2);\n    }\n    else if( isnan(fx) ) {\n        return 0;\n    }\n    return atan2f(fy,fx);\n}\ninline double IKatan2Simple(double fy, double fx) {\n    return atan2(fy,fx);\n}\ninline double IKatan2(double fy, double fx) {\n    if( isnan(fy) ) {\n        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned\n        return IKPI_2;\n    }\n    else if( isnan(fx) ) {\n        return 0;\n    }\n    return atan2(fy,fx);\n}\n\ntemplate <typename T>\nstruct CheckValue\n{\n    T value;\n    bool valid;\n};\n\ntemplate <typename T>\ninline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)\n{\n    CheckValue<T> ret;\n    ret.valid = false;\n    ret.value = 0;\n    if( !isnan(fy) && !isnan(fx) ) {\n        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {\n            ret.value = IKatan2Simple(fy,fx);\n            ret.valid = true;\n        }\n    }\n    return ret;\n}\n\ninline float IKsign(float f) {\n    if( f > 0 ) {\n        return float(1);\n    }\n    else if( f < 0 ) {\n        return float(-1);\n    }\n    return 0;\n}\n\ninline double IKsign(double f) {\n    if( f > 0 ) {\n        return 1.0;\n    }\n    else if( f < 0 ) {\n        return -1.0;\n    }\n    return 0;\n}\n\ntemplate <typename T>\ninline CheckValue<T> IKPowWithIntegerCheck(T f, int n)\n{\n    CheckValue<T> ret;\n    ret.valid = true;\n    if( n == 0 ) {\n        ret.value = 1.0;\n        return ret;\n    }\n    else if( n == 1 )\n    {\n        ret.value = f;\n        return ret;\n    }\n    else if( n < 0 )\n    {\n        if( f == 0 )\n        {\n            ret.valid = false;\n            ret.value = (T)1.0e30;\n            return ret;\n        }\n        if( n == -1 ) {\n            ret.value = T(1.0)/f;\n            return ret;\n        }\n    }\n\n    int num = n > 0 ? n : -n;\n    if( num == 2 ) {\n        ret.value = f*f;\n    }\n    else if( num == 3 ) {\n        ret.value = f*f*f;\n    }\n    else {\n        ret.value = 1.0;\n        while(num>0) {\n            if( num & 1 ) {\n                ret.value *= f;\n            }\n            num >>= 1;\n            f *= f;\n        }\n    }\n    \n    if( n < 0 ) {\n        ret.value = T(1.0)/ret.value;\n    }\n    return ret;\n}\n\n/// solves the forward kinematics equations.\n/// \\param pfree is an array specifying the free joints of the chain.\nIKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {\nIkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49;\nx0=IKcos(j[0]);\nx1=IKcos(j[1]);\nx2=IKsin(j[2]);\nx3=IKcos(j[2]);\nx4=IKsin(j[1]);\nx5=IKsin(j[3]);\nx6=IKcos(j[3]);\nx7=IKsin(j[0]);\nx8=IKsin(j[4]);\nx9=IKcos(j[4]);\nx10=IKsin(j[5]);\nx11=IKcos(j[5]);\nx12=((0.295)*x7);\nx13=((0.052)*x1);\nx14=((1.0)*x6);\nx15=((0.052)*x7);\nx16=((0.27)*x4);\nx17=((1.0)*x7);\nx18=((0.052)*x6);\nx19=((1.0)*x0);\nx20=((0.09)*x7);\nx21=(x0*x5);\nx22=(x2*x4);\nx23=(x0*x3);\nx24=(x1*x3);\nx25=((-1.0)*x9);\nx26=((-1.0)*x8);\nx27=(x1*x2);\nx28=(x3*x4);\nx29=(x6*x8);\nx30=(x17*x5);\nx31=(x0*x14);\nx32=(x17*x22);\nx33=((((-1.0)*x24))+x22);\nx34=(x27+x28);\nx35=(x33*x5);\nx36=(x33*x6);\nx37=(((x1*x23))+(((-1.0)*x19*x22)));\nx38=((((-1.0)*x32))+((x24*x7)));\nx39=(x36*x9);\nx40=(x19*(((((-1.0)*x27))+(((-1.0)*x28)))));\nx41=(x17*(((((-1.0)*x27))+(((-1.0)*x28)))));\nx42=(x37*x8);\nx43=(x41*x5);\nx44=(x41*x6);\nx45=((-1.0)*x41);\nx46=(((x40*x5))+((x6*x7)));\nx47=((((-1.0)*x14*x40))+x30);\nx48=((((-1.0)*x19*x5))+(((-1.0)*x14*x41)));\nx49=(x47*x9);\neerot[0]=(((x8*(((((-1.0)*x30))+((x40*x6))))))+((x37*x9)));\neerot[1]=(((x11*x46))+((x10*(((((-1.0)*x42))+(((-1.0)*x49)))))));\neerot[2]=(((x11*((x49+x42))))+((x10*x46)));\nIkReal x50=(x0*x22);\neetrans[0]=((((0.09)*x0*x27))+((x0*x16))+(((0.295)*x1*x23))+(((-0.295)*x50))+(((0.09)*x23*x4))+(((0.075)*x0))+((x8*((((x18*x40))+(((-1.0)*x15*x5))))))+((x9*(((((-0.052)*x50))+((x13*x23)))))));\neerot[3]=(((x9*(((((-1.0)*x17*x24))+x32))))+((x48*x8)));\neerot[4]=(((x11*(((((-1.0)*x43))+x31))))+((x10*((((x48*x9))+((x38*x8)))))));\neerot[5]=(((x10*(((((-1.0)*x43))+x31))))+((x11*((((x26*x38))+((x25*(((((-1.0)*x44))+(((-1.0)*x21)))))))))));\nIkReal x51=((1.0)*x20);\nIkReal x52=((1.0)*x7);\neetrans[1]=((((-1.0)*x16*x52))+(((-1.0)*x12*x24))+(((-0.075)*x7))+(((-1.0)*x27*x51))+(((-1.0)*x28*x51))+((x8*(((((-1.0)*x18*x41))+(((-0.052)*x21))))))+((x12*x22))+((x9*(((((-1.0)*x13*x3*x52))+((x15*x22)))))));\neerot[6]=(((x9*(((((-1.0)*x27))+(((-1.0)*x28))))))+((x29*x33)));\neerot[7]=(((x11*x35))+((x10*((((x34*x8))+x39)))));\neerot[8]=(((x11*((((x26*x34))+((x25*x36))))))+((x10*x35)));\nIkReal x53=((1.0)*x13);\neetrans[2]=((0.335)+((x29*(((((0.052)*x22))+(((-1.0)*x3*x53))))))+(((0.27)*x1))+(((-0.09)*x22))+((x9*(((((-1.0)*x2*x53))+(((-0.052)*x28))))))+(((-0.295)*x28))+(((-0.295)*x27))+(((0.09)*x24)));\n}\n\nIKFAST_API int GetNumFreeParameters() { return 0; }\nIKFAST_API int* GetFreeParameters() { return NULL; }\nIKFAST_API int GetNumJoints() { return 6; }\n\nIKFAST_API int GetIkRealSize() { return sizeof(IkReal); }\n\nIKFAST_API int GetIkType() { return 0x67000001; }\n\nclass IKSolver {\npublic:\nIkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;\nunsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;\n\nIkReal j100, cj100, sj100;\nunsigned char _ij100[2], _nj100;\nbool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {\nj0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; \nfor(int dummyiter = 0; dummyiter < 1; ++dummyiter) {\n    solutions.Clear();\nr00 = eerot[0*3+0];\nr01 = eerot[0*3+1];\nr02 = eerot[0*3+2];\nr10 = eerot[1*3+0];\nr11 = eerot[1*3+1];\nr12 = eerot[1*3+2];\nr20 = eerot[2*3+0];\nr21 = eerot[2*3+1];\nr22 = eerot[2*3+2];\npx = eetrans[0]; py = eetrans[1]; pz = eetrans[2];\n\nnew_r00=r02;\nnew_r01=r01;\nnew_r02=((-1.0)*r00);\nnew_px=((((-0.052)*r00))+px);\nnew_r10=((-1.0)*r12);\nnew_r11=((-1.0)*r11);\nnew_r12=r10;\nnew_py=((((-1.0)*py))+(((0.052)*r10)));\nnew_r20=((-1.0)*r22);\nnew_r21=((-1.0)*r21);\nnew_r22=r20;\nnew_pz=((0.335)+(((-1.0)*pz))+(((0.052)*r20)));\nr00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;\nIkReal x54=((1.0)*px);\nIkReal x55=((1.0)*pz);\nIkReal x56=((1.0)*py);\npp=((px*px)+(py*py)+(pz*pz));\nnpx=(((px*r00))+((py*r10))+((pz*r20)));\nnpy=(((px*r01))+((py*r11))+((pz*r21)));\nnpz=(((px*r02))+((py*r12))+((pz*r22)));\nrxp0_0=((((-1.0)*r20*x56))+((pz*r10)));\nrxp0_1=(((px*r20))+(((-1.0)*r00*x55)));\nrxp0_2=((((-1.0)*r10*x54))+((py*r00)));\nrxp1_0=((((-1.0)*r21*x56))+((pz*r11)));\nrxp1_1=(((px*r21))+(((-1.0)*r01*x55)));\nrxp1_2=((((-1.0)*r11*x54))+((py*r01)));\nrxp2_0=(((pz*r12))+(((-1.0)*r22*x56)));\nrxp2_1=(((px*r22))+(((-1.0)*r02*x55)));\nrxp2_2=((((-1.0)*r12*x54))+((py*r02)));\n{\nIkReal j0eval[1];\nj0eval[0]=((IKabs(px))+(IKabs(py)));\nif( IKabs(j0eval[0]) < 0.0000010000000000  )\n{\ncontinue; // no branches [j0, j1, j2]\n\n} else\n{\n{\nIkReal j0array[2], cj0array[2], sj0array[2];\nbool j0valid[2]={false};\n_nj0 = 2;\nCheckValue<IkReal> x58 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);\nif(!x58.valid){\ncontinue;\n}\nIkReal x57=x58.value;\nj0array[0]=((-1.0)*x57);\nsj0array[0]=IKsin(j0array[0]);\ncj0array[0]=IKcos(j0array[0]);\nj0array[1]=((3.14159265358979)+(((-1.0)*x57)));\nsj0array[1]=IKsin(j0array[1]);\ncj0array[1]=IKcos(j0array[1]);\nif( j0array[0] > IKPI )\n{\n    j0array[0]-=IK2PI;\n}\nelse if( j0array[0] < -IKPI )\n{    j0array[0]+=IK2PI;\n}\nj0valid[0] = true;\nif( j0array[1] > IKPI )\n{\n    j0array[1]-=IK2PI;\n}\nelse if( j0array[1] < -IKPI )\n{    j0array[1]+=IK2PI;\n}\nj0valid[1] = true;\nfor(int ij0 = 0; ij0 < 2; ++ij0)\n{\nif( !j0valid[ij0] )\n{\n    continue;\n}\n_ij0[0] = ij0; _ij0[1] = -1;\nfor(int iij0 = ij0+1; iij0 < 2; ++iij0)\n{\nif( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )\n{\n    j0valid[iij0]=false; _ij0[1] = iij0; break; \n}\n}\nj0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];\n\n{\nIkReal j2array[2], cj2array[2], sj2array[2];\nbool j2valid[2]={false};\n_nj2 = 2;\nif( (((0.975090511065744)+(((0.900637787314419)*py*sj0))+(((-6.00425191542946)*pp))+(((0.900637787314419)*cj0*px)))) < -1-IKFAST_SINCOS_THRESH || (((0.975090511065744)+(((0.900637787314419)*py*sj0))+(((-6.00425191542946)*pp))+(((0.900637787314419)*cj0*px)))) > 1+IKFAST_SINCOS_THRESH )\n    continue;\nIkReal x59=IKasin(((0.975090511065744)+(((0.900637787314419)*py*sj0))+(((-6.00425191542946)*pp))+(((0.900637787314419)*cj0*px))));\nj2array[0]=((-2.84547750771483)+(((-1.0)*x59)));\nsj2array[0]=IKsin(j2array[0]);\ncj2array[0]=IKcos(j2array[0]);\nj2array[1]=((0.296115145874965)+x59);\nsj2array[1]=IKsin(j2array[1]);\ncj2array[1]=IKcos(j2array[1]);\nif( j2array[0] > IKPI )\n{\n    j2array[0]-=IK2PI;\n}\nelse if( j2array[0] < -IKPI )\n{    j2array[0]+=IK2PI;\n}\nj2valid[0] = true;\nif( j2array[1] > IKPI )\n{\n    j2array[1]-=IK2PI;\n}\nelse if( j2array[1] < -IKPI )\n{    j2array[1]+=IK2PI;\n}\nj2valid[1] = true;\nfor(int ij2 = 0; ij2 < 2; ++ij2)\n{\nif( !j2valid[ij2] )\n{\n    continue;\n}\n_ij2[0] = ij2; _ij2[1] = -1;\nfor(int iij2 = ij2+1; iij2 < 2; ++iij2)\n{\nif( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )\n{\n    j2valid[iij2]=false; _ij2[1] = iij2; break; \n}\n}\nj2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];\n\n{\nIkReal j1eval[2];\nIkReal x60=(cj0*px);\nIkReal x61=((0.295)*cj2);\nIkReal x62=(py*sj0);\nIkReal x63=((43.7037037037037)*cj2);\nIkReal x64=((13.3333333333333)*sj2);\nIkReal x65=(cj2*pz);\nIkReal x66=((0.09)*sj2);\nIkReal x67=(pz*sj2);\nj1eval[0]=(sj2+(((43.7037037037037)*x67))+(((3.27777777777778)*cj2))+(((-13.3333333333333)*x65))+(((-1.0)*x60*x63))+(((-1.0)*x60*x64))+(((-40.0)*pz))+(((-1.0)*x62*x64))+(((-1.0)*x62*x63)));\nj1eval[1]=IKsign(((((-1.0)*x61*x62))+(((0.00675)*sj2))+(((0.295)*x67))+(((-0.27)*pz))+(((0.022125)*cj2))+(((-0.09)*x65))+(((-1.0)*x60*x61))+(((-1.0)*x60*x66))+(((-1.0)*x62*x66))));\nif( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j1eval[3];\nIkReal x68=cj2*cj2;\nIkReal x69=(cj0*px);\nIkReal x70=(pz*sj2);\nIkReal x71=((13.3333333333333)*cj2);\nIkReal x72=(py*sj0);\nIkReal x73=((43.7037037037037)*sj2);\nIkReal x74=((0.295)*sj2);\nIkReal x75=(cj2*sj2);\nIkReal x76=((0.09)*cj2);\nIkReal x77=(cj2*pz);\nj1eval[0]=((3.0)+(((43.7037037037037)*x77))+cj2+((x69*x73))+(((-40.0)*x72))+(((-1.0)*x71*x72))+(((-3.27777777777778)*sj2))+(((-1.0)*x69*x71))+((x72*x73))+(((-40.0)*x69))+(((13.3333333333333)*x70)));\nj1eval[1]=((IKabs(((-0.159925)+(((0.1593)*sj2))+(((0.078925)*x68))+(pz*pz)+(((0.0531)*x75))+(((-0.0486)*cj2)))))+(IKabs(((0.02655)+(((0.078925)*x75))+((pz*x72))+(((-0.075)*pz))+(((-0.0243)*sj2))+(((-0.0531)*x68))+(((-0.07965)*cj2))+((pz*x69))))));\nj1eval[2]=IKsign(((0.02025)+(((-0.022125)*sj2))+(((0.00675)*cj2))+((x69*x74))+(((0.295)*x77))+(((-1.0)*x72*x76))+(((-1.0)*x69*x76))+((x72*x74))+(((0.09)*x70))+(((-0.27)*x72))+(((-0.27)*x69))));\nif( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal j1eval[2];\nIkReal x78=cj0*cj0;\nIkReal x79=py*py;\nIkReal x80=px*px;\nIkReal x81=pz*pz;\nIkReal x82=(py*sj0);\nIkReal x83=(cj0*px);\nIkReal x84=(x78*x79);\nIkReal x85=(x78*x80);\nIkReal x86=(x82*x83);\nj1eval[0]=((-1.0)+(((177.777777777778)*x84))+(((26.6666666666667)*x82))+(((26.6666666666667)*x83))+(((-177.777777777778)*x79))+(((-177.777777777778)*x85))+(((-177.777777777778)*x81))+(((-355.555555555556)*x86)));\nj1eval[1]=IKsign(((-0.005625)+(((0.15)*x82))+(((0.15)*x83))+(((-2.0)*x86))+x84+(((-1.0)*x81))+(((-1.0)*x85))+(((-1.0)*x79))));\nif( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )\n{\ncontinue; // no branches [j1]\n\n} else\n{\n{\nIkReal j1array[1], cj1array[1], sj1array[1];\nbool j1valid[1]={false};\n_nj1 = 1;\nIkReal x87=py*py;\nIkReal x88=cj0*cj0;\nIkReal x89=(cj0*px);\nIkReal x90=((0.295)*cj2);\nIkReal x91=((0.09)*sj2);\nIkReal x92=(py*sj0);\nIkReal x93=((0.295)*sj2);\nIkReal x94=((0.09)*cj2);\nCheckValue<IkReal> x95=IKPowWithIntegerCheck(IKsign(((-0.005625)+(((0.15)*x89))+(((0.15)*x92))+(((-2.0)*x89*x92))+(((-1.0)*x87))+(((-1.0)*(pz*pz)))+(((-1.0)*x88*(px*px)))+((x87*x88)))),-1);\nif(!x95.valid){\ncontinue;\n}\nCheckValue<IkReal> x96 = IKatan2WithCheck(IkReal(((0.02025)+(((-0.022125)*sj2))+(((-1.0)*pz*x90))+(((-1.0)*pz*x91))+((x89*x93))+((x92*x93))+(((0.00675)*cj2))+(((-1.0)*x92*x94))+(((-0.27)*x92))+(((-1.0)*x89*x94))+(((-0.27)*x89)))),((((-1.0)*pz*x93))+(((0.00675)*sj2))+(((0.27)*pz))+(((-1.0)*x90*x92))+(((-1.0)*x91*x92))+((pz*x94))+(((0.022125)*cj2))+(((-1.0)*x89*x90))+(((-1.0)*x89*x91))),IKFAST_ATAN2_MAGTHRESH);\nif(!x96.valid){\ncontinue;\n}\nj1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x95.value)))+(x96.value));\nsj1array[0]=IKsin(j1array[0]);\ncj1array[0]=IKcos(j1array[0]);\nif( j1array[0] > IKPI )\n{\n    j1array[0]-=IK2PI;\n}\nelse if( j1array[0] < -IKPI )\n{    j1array[0]+=IK2PI;\n}\nj1valid[0] = true;\nfor(int ij1 = 0; ij1 < 1; ++ij1)\n{\nif( !j1valid[ij1] )\n{\n    continue;\n}\n_ij1[0] = ij1; _ij1[1] = -1;\nfor(int iij1 = ij1+1; iij1 < 1; ++iij1)\n{\nif( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )\n{\n    j1valid[iij1]=false; _ij1[1] = iij1; break; \n}\n}\nj1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];\n{\nIkReal evalcond[5];\nIkReal x97=IKsin(j1);\nIkReal x98=IKcos(j1);\nIkReal x99=(cj0*px);\nIkReal x100=((0.09)*cj2);\nIkReal x101=(py*sj0);\nIkReal x102=((0.295)*sj2);\nIkReal x103=((1.0)*pz);\nIkReal x104=((0.09)*sj2);\nIkReal x105=((0.295)*cj2);\nIkReal x106=((0.295)*x97);\nIkReal x107=((1.0)*x98);\nIkReal x108=((0.54)*x97);\nevalcond[0]=((-0.27)+(((-1.0)*x103*x98))+((x101*x97))+(((-1.0)*x100))+((x97*x99))+x102+(((-0.075)*x97)));\nevalcond[1]=((((-1.0)*x107*x99))+(((-1.0)*x103*x97))+(((-1.0)*x101*x107))+(((0.075)*x98))+x104+x105);\nevalcond[2]=(((x102*x98))+(((-1.0)*x103))+(((-1.0)*x100*x98))+((x105*x97))+(((-0.27)*x98))+((x104*x97)));\nevalcond[3]=((0.0166)+(((0.15)*x99))+(((-0.54)*pz*x98))+(((-1.0)*pp))+((x108*x99))+(((0.15)*x101))+((x101*x108))+(((-0.0405)*x97)));\nevalcond[4]=((0.075)+(((-1.0)*x102*x97))+((x100*x97))+(((-1.0)*x99))+(((0.27)*x97))+((x105*x98))+(((-1.0)*x101))+((x104*x98)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j1array[1], cj1array[1], sj1array[1];\nbool j1valid[1]={false};\n_nj1 = 1;\nIkReal x470=cj2*cj2;\nIkReal x471=(cj0*px);\nIkReal x472=((0.295)*sj2);\nIkReal x473=(cj2*sj2);\nIkReal x474=((0.09)*cj2);\nIkReal x475=(py*sj0);\nCheckValue<IkReal> x476=IKPowWithIntegerCheck(IKsign(((0.02025)+(((-0.022125)*sj2))+((x471*x472))+(((0.09)*pz*sj2))+(((0.295)*cj2*pz))+((x472*x475))+(((0.00675)*cj2))+(((-1.0)*x471*x474))+(((-0.27)*x475))+(((-0.27)*x471))+(((-1.0)*x474*x475)))),-1);\nif(!x476.valid){\ncontinue;\n}\nCheckValue<IkReal> x477 = IKatan2WithCheck(IkReal(((-0.159925)+(((0.1593)*sj2))+(pz*pz)+(((0.078925)*x470))+(((0.0531)*x473))+(((-0.0486)*cj2)))),((0.02655)+(((-0.0531)*x470))+(((-0.075)*pz))+(((-0.0243)*sj2))+(((0.078925)*x473))+((pz*x471))+((pz*x475))+(((-0.07965)*cj2))),IKFAST_ATAN2_MAGTHRESH);\nif(!x477.valid){\ncontinue;\n}\nj1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x476.value)))+(x477.value));\nsj1array[0]=IKsin(j1array[0]);\ncj1array[0]=IKcos(j1array[0]);\nif( j1array[0] > IKPI )\n{\n    j1array[0]-=IK2PI;\n}\nelse if( j1array[0] < -IKPI )\n{    j1array[0]+=IK2PI;\n}\nj1valid[0] = true;\nfor(int ij1 = 0; ij1 < 1; ++ij1)\n{\nif( !j1valid[ij1] )\n{\n    continue;\n}\n_ij1[0] = ij1; _ij1[1] = -1;\nfor(int iij1 = ij1+1; iij1 < 1; ++iij1)\n{\nif( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )\n{\n    j1valid[iij1]=false; _ij1[1] = iij1; break; \n}\n}\nj1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];\n{\nIkReal evalcond[5];\nIkReal x478=IKsin(j1);\nIkReal x479=IKcos(j1);\nIkReal x480=(cj0*px);\nIkReal x481=((0.09)*cj2);\nIkReal x482=(py*sj0);\nIkReal x483=((0.295)*sj2);\nIkReal x484=((1.0)*pz);\nIkReal x485=((0.09)*sj2);\nIkReal x486=((0.295)*cj2);\nIkReal x487=((0.295)*x478);\nIkReal x488=((1.0)*x479);\nIkReal x489=((0.54)*x478);\nevalcond[0]=((-0.27)+(((-1.0)*x481))+((x478*x480))+((x478*x482))+x483+(((-1.0)*x479*x484))+(((-0.075)*x478)));\nevalcond[1]=((((0.075)*x479))+x485+x486+(((-1.0)*x480*x488))+(((-1.0)*x482*x488))+(((-1.0)*x478*x484)));\nevalcond[2]=((((-1.0)*x484))+((x478*x485))+((x478*x486))+(((-1.0)*x479*x481))+(((-0.27)*x479))+((x479*x483)));\nevalcond[3]=((0.0166)+(((-1.0)*pp))+(((0.15)*x480))+(((0.15)*x482))+((x480*x489))+(((-0.0405)*x478))+((x482*x489))+(((-0.54)*pz*x479)));\nevalcond[4]=((0.075)+(((0.27)*x478))+(((-1.0)*x482))+(((-1.0)*x480))+((x478*x481))+((x479*x486))+((x479*x485))+(((-1.0)*x478*x483)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j1array[1], cj1array[1], sj1array[1];\nbool j1valid[1]={false};\n_nj1 = 1;\nIkReal x490=cj2*cj2;\nIkReal x491=((0.295)*cj2);\nIkReal x492=(cj0*px);\nIkReal x493=(cj2*sj2);\nIkReal x494=(py*sj0);\nIkReal x495=((1.0)*pz);\nIkReal x496=((0.09)*sj2);\nCheckValue<IkReal> x497=IKPowWithIntegerCheck(IKsign(((((-1.0)*x494*x496))+(((0.00675)*sj2))+(((-1.0)*x491*x494))+(((-1.0)*x491*x492))+(((-0.09)*cj2*pz))+(((0.295)*pz*sj2))+(((-0.27)*pz))+(((0.022125)*cj2))+(((-1.0)*x492*x496)))),-1);\nif(!x497.valid){\ncontinue;\n}\nCheckValue<IkReal> x498 = IKatan2WithCheck(IkReal(((0.02655)+(((-1.0)*x494*x495))+(((-0.0243)*sj2))+(((-0.07965)*cj2))+(((0.075)*pz))+(((0.078925)*x493))+(((-0.0531)*x490))+(((-1.0)*x492*x495)))),((-0.0081)+(pz*pz)+(((-0.078925)*x490))+(((-0.0531)*x493))),IKFAST_ATAN2_MAGTHRESH);\nif(!x498.valid){\ncontinue;\n}\nj1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x497.value)))+(x498.value));\nsj1array[0]=IKsin(j1array[0]);\ncj1array[0]=IKcos(j1array[0]);\nif( j1array[0] > IKPI )\n{\n    j1array[0]-=IK2PI;\n}\nelse if( j1array[0] < -IKPI )\n{    j1array[0]+=IK2PI;\n}\nj1valid[0] = true;\nfor(int ij1 = 0; ij1 < 1; ++ij1)\n{\nif( !j1valid[ij1] )\n{\n    continue;\n}\n_ij1[0] = ij1; _ij1[1] = -1;\nfor(int iij1 = ij1+1; iij1 < 1; ++iij1)\n{\nif( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )\n{\n    j1valid[iij1]=false; _ij1[1] = iij1; break; \n}\n}\nj1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];\n{\nIkReal evalcond[5];\nIkReal x499=IKsin(j1);\nIkReal x500=IKcos(j1);\nIkReal x501=(cj0*px);\nIkReal x502=((0.09)*cj2);\nIkReal x503=(py*sj0);\nIkReal x504=((0.295)*sj2);\nIkReal x505=((1.0)*pz);\nIkReal x506=((0.09)*sj2);\nIkReal x507=((0.295)*cj2);\nIkReal x508=((0.295)*x499);\nIkReal x509=((1.0)*x500);\nIkReal x510=((0.54)*x499);\nevalcond[0]=((-0.27)+(((-1.0)*x502))+(((-0.075)*x499))+x504+((x499*x503))+((x499*x501))+(((-1.0)*x500*x505)));\nevalcond[1]=((((-1.0)*x499*x505))+(((-1.0)*x501*x509))+(((-1.0)*x503*x509))+x506+x507+(((0.075)*x500)));\nevalcond[2]=(((x500*x504))+(((-1.0)*x505))+((x499*x507))+((x499*x506))+(((-0.27)*x500))+(((-1.0)*x500*x502)));\nevalcond[3]=((0.0166)+((x501*x510))+((x503*x510))+(((-0.54)*pz*x500))+(((0.15)*x501))+(((0.15)*x503))+(((-1.0)*pp))+(((-0.0405)*x499)));\nevalcond[4]=((0.075)+(((0.27)*x499))+((x500*x506))+((x500*x507))+(((-1.0)*x499*x504))+(((-1.0)*x501))+(((-1.0)*x503))+((x499*x502)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n}\n}\n}\n}\n\n}\n\n}\n}\nreturn solutions.GetNumSolutions()>0;\n}\ninline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {\nfor(int rotationiter = 0; rotationiter < 1; ++rotationiter) {\nIkReal x109=((1.0)*cj0);\nIkReal x110=(r11*sj0);\nIkReal x111=(r10*sj0);\nIkReal x112=((1.0)*cj2);\nIkReal x113=(cj1*sj2);\nIkReal x114=(r12*sj0);\nIkReal x115=(((cj2*sj1))+x113);\nIkReal x116=((((-1.0)*cj1*x112))+((sj1*sj2)));\nIkReal x117=(sj0*x116);\nIkReal x118=(cj0*x115);\nIkReal x119=(cj0*x116);\nIkReal x120=((((-1.0)*sj1*x112))+(((-1.0)*x113)));\nnew_r00=(((x111*x115))+((r20*x116))+((r00*x118)));\nnew_r01=(((x110*x115))+((r21*x116))+((r01*x118)));\nnew_r02=(((r22*x116))+((r02*x118))+((x114*x115)));\nnew_r10=(((r00*sj0))+(((-1.0)*r10*x109)));\nnew_r11=((((-1.0)*r11*x109))+((r01*sj0)));\nnew_r12=((((-1.0)*r12*x109))+((r02*sj0)));\nnew_r20=(((x111*x116))+((r00*x119))+((r20*x120)));\nnew_r21=(((x110*x116))+((r21*x120))+((r01*x119)));\nnew_r22=(((r02*x119))+((x114*x116))+((r22*x120)));\n{\nIkReal j4array[2], cj4array[2], sj4array[2];\nbool j4valid[2]={false};\n_nj4 = 2;\ncj4array[0]=new_r22;\nif( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j4valid[0] = j4valid[1] = true;\n    j4array[0] = IKacos(cj4array[0]);\n    sj4array[0] = IKsin(j4array[0]);\n    cj4array[1] = cj4array[0];\n    j4array[1] = -j4array[0];\n    sj4array[1] = -sj4array[0];\n}\nelse if( isnan(cj4array[0]) )\n{\n    // probably any value will work\n    j4valid[0] = true;\n    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;\n}\nfor(int ij4 = 0; ij4 < 2; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 2; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n\n{\nIkReal j3eval[2];\nIkReal x121=((1.0)*cj0);\nIkReal x122=(r11*sj0);\nIkReal x123=(r10*sj0);\nIkReal x124=((1.0)*cj2);\nIkReal x125=(cj1*sj2);\nIkReal x126=(r12*sj0);\nIkReal x127=(((cj2*sj1))+x125);\nIkReal x128=x116;\nIkReal x129=(sj0*x128);\nIkReal x130=(cj0*x127);\nIkReal x131=(cj0*x128);\nIkReal x132=x120;\nnew_r00=(((r00*x130))+((x123*x127))+((r20*x128)));\nnew_r01=(((r21*x128))+((x122*x127))+((r01*x130)));\nnew_r02=(((r02*x130))+((r22*x128))+((x126*x127)));\nnew_r10=(((r00*sj0))+(((-1.0)*r10*x121)));\nnew_r11=(((r01*sj0))+(((-1.0)*r11*x121)));\nnew_r12=((((-1.0)*r12*x121))+((r02*sj0)));\nnew_r20=(((r00*x131))+((x123*x128))+((r20*x132)));\nnew_r21=(((r21*x132))+((x122*x128))+((r01*x131)));\nnew_r22=(((r02*x131))+((r22*x132))+((x126*x128)));\nj3eval[0]=sj4;\nj3eval[1]=IKsign(sj4);\nif( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j3eval[1];\nIkReal x133=((1.0)*cj0);\nIkReal x134=(r11*sj0);\nIkReal x135=(r10*sj0);\nIkReal x136=((1.0)*cj2);\nIkReal x137=(cj1*sj2);\nIkReal x138=(r12*sj0);\nIkReal x139=(((cj2*sj1))+x137);\nIkReal x140=x116;\nIkReal x141=(sj0*x140);\nIkReal x142=(cj0*x139);\nIkReal x143=(cj0*x140);\nIkReal x144=x120;\nnew_r00=(((r20*x140))+((x135*x139))+((r00*x142)));\nnew_r01=(((r01*x142))+((r21*x140))+((x134*x139)));\nnew_r02=(((x138*x139))+((r02*x142))+((r22*x140)));\nnew_r10=(((r00*sj0))+(((-1.0)*r10*x133)));\nnew_r11=(((r01*sj0))+(((-1.0)*r11*x133)));\nnew_r12=((((-1.0)*r12*x133))+((r02*sj0)));\nnew_r20=(((r20*x144))+((r00*x143))+((x135*x140)));\nnew_r21=(((r01*x143))+((r21*x144))+((x134*x140)));\nnew_r22=(((x138*x140))+((r02*x143))+((r22*x144)));\nj3eval[0]=sj4;\nif( IKabs(j3eval[0]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[6];\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));\nevalcond[1]=((-1.0)+new_r22);\nevalcond[2]=new_r20;\nevalcond[3]=new_r02;\nevalcond[4]=new_r12;\nevalcond[5]=new_r21;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j3array[2], cj3array[2], sj3array[2];\nbool j3valid[2]={false};\n_nj3 = 2;\nCheckValue<IkReal> x146 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);\nif(!x146.valid){\ncontinue;\n}\nIkReal x145=x146.value;\nj3array[0]=((-1.0)*x145);\nsj3array[0]=IKsin(j3array[0]);\ncj3array[0]=IKcos(j3array[0]);\nj3array[1]=((3.14159265358979)+(((-1.0)*x145)));\nsj3array[1]=IKsin(j3array[1]);\ncj3array[1]=IKcos(j3array[1]);\nif( j3array[0] > IKPI )\n{\n    j3array[0]-=IK2PI;\n}\nelse if( j3array[0] < -IKPI )\n{    j3array[0]+=IK2PI;\n}\nj3valid[0] = true;\nif( j3array[1] > IKPI )\n{\n    j3array[1]-=IK2PI;\n}\nelse if( j3array[1] < -IKPI )\n{    j3array[1]+=IK2PI;\n}\nj3valid[1] = true;\nfor(int ij3 = 0; ij3 < 2; ++ij3)\n{\nif( !j3valid[ij3] )\n{\n    continue;\n}\n_ij3[0] = ij3; _ij3[1] = -1;\nfor(int iij3 = ij3+1; iij3 < 2; ++iij3)\n{\nif( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )\n{\n    j3valid[iij3]=false; _ij3[1] = iij3; break; \n}\n}\nj3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];\n{\nIkReal evalcond[1];\nevalcond[0]=((((-1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x147=((1.0)*new_r01);\nif( IKabs(((((-1.0)*cj3*x147))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x147))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x147))+(((-1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x147))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((((-1.0)*cj3*x147))+(((-1.0)*new_r00*sj3))), ((((-1.0)*sj3*x147))+((cj3*new_r00))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x148=IKsin(j5);\nIkReal x149=IKcos(j5);\nIkReal x150=((1.0)*sj3);\nIkReal x151=((1.0)*x149);\nIkReal x152=(sj3*x148);\nIkReal x153=((1.0)*x148);\nIkReal x154=(cj3*x151);\nevalcond[0]=(((new_r11*sj3))+x148+((cj3*new_r01)));\nevalcond[1]=(((cj3*x148))+new_r01+((sj3*x149)));\nevalcond[2]=((((-1.0)*x151))+((new_r10*sj3))+((cj3*new_r00)));\nevalcond[3]=((((-1.0)*x153))+((cj3*new_r10))+(((-1.0)*new_r00*x150)));\nevalcond[4]=((((-1.0)*x151))+((cj3*new_r11))+(((-1.0)*new_r01*x150)));\nevalcond[5]=((((-1.0)*x154))+x152+new_r00);\nevalcond[6]=((((-1.0)*x154))+x152+new_r11);\nevalcond[7]=((((-1.0)*cj3*x153))+new_r10+(((-1.0)*x149*x150)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));\nevalcond[1]=((1.0)+new_r22);\nevalcond[2]=new_r20;\nevalcond[3]=new_r02;\nevalcond[4]=new_r12;\nevalcond[5]=new_r21;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j3array[2], cj3array[2], sj3array[2];\nbool j3valid[2]={false};\n_nj3 = 2;\nCheckValue<IkReal> x156 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);\nif(!x156.valid){\ncontinue;\n}\nIkReal x155=x156.value;\nj3array[0]=((-1.0)*x155);\nsj3array[0]=IKsin(j3array[0]);\ncj3array[0]=IKcos(j3array[0]);\nj3array[1]=((3.14159265358979)+(((-1.0)*x155)));\nsj3array[1]=IKsin(j3array[1]);\ncj3array[1]=IKcos(j3array[1]);\nif( j3array[0] > IKPI )\n{\n    j3array[0]-=IK2PI;\n}\nelse if( j3array[0] < -IKPI )\n{    j3array[0]+=IK2PI;\n}\nj3valid[0] = true;\nif( j3array[1] > IKPI )\n{\n    j3array[1]-=IK2PI;\n}\nelse if( j3array[1] < -IKPI )\n{    j3array[1]+=IK2PI;\n}\nj3valid[1] = true;\nfor(int ij3 = 0; ij3 < 2; ++ij3)\n{\nif( !j3valid[ij3] )\n{\n    continue;\n}\n_ij3[0] = ij3; _ij3[1] = -1;\nfor(int iij3 = ij3+1; iij3 < 2; ++iij3)\n{\nif( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )\n{\n    j3valid[iij3]=false; _ij3[1] = iij3; break; \n}\n}\nj3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];\n{\nIkReal evalcond[1];\nevalcond[0]=((((-1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x157=((1.0)*sj3);\nif( IKabs((((cj3*new_r01))+(((-1.0)*new_r00*x157)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x157)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj3*new_r01))+(((-1.0)*new_r00*x157))))+IKsqr(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x157))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2((((cj3*new_r01))+(((-1.0)*new_r00*x157))), ((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x157))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x158=IKsin(j5);\nIkReal x159=IKcos(j5);\nIkReal x160=((1.0)*sj3);\nIkReal x161=((1.0)*x158);\nIkReal x162=(sj3*x159);\nIkReal x163=((1.0)*x159);\nIkReal x164=(cj3*x161);\nevalcond[0]=(((new_r10*sj3))+x159+((cj3*new_r00)));\nevalcond[1]=((((-1.0)*x161))+((new_r11*sj3))+((cj3*new_r01)));\nevalcond[2]=(((cj3*x159))+new_r00+((sj3*x158)));\nevalcond[3]=((((-1.0)*new_r00*x160))+(((-1.0)*x161))+((cj3*new_r10)));\nevalcond[4]=((((-1.0)*x163))+((cj3*new_r11))+(((-1.0)*new_r01*x160)));\nevalcond[5]=((((-1.0)*x164))+x162+new_r01);\nevalcond[6]=((((-1.0)*x164))+x162+new_r10);\nevalcond[7]=((((-1.0)*x158*x160))+(((-1.0)*cj3*x163))+new_r11);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j3, j5]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j3array[1], cj3array[1], sj3array[1];\nbool j3valid[1]={false};\n_nj3 = 1;\nCheckValue<IkReal> x166=IKPowWithIntegerCheck(sj4,-1);\nif(!x166.valid){\ncontinue;\n}\nIkReal x165=x166.value;\nCheckValue<IkReal> x167=IKPowWithIntegerCheck(new_r12,-1);\nif(!x167.valid){\ncontinue;\n}\nif( IKabs((x165*(x167.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r02*new_r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x165)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x165*(x167.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r02*new_r02)))))))+IKsqr((new_r02*x165))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj3array[0]=IKatan2((x165*(x167.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r02*new_r02)))))), (new_r02*x165));\nsj3array[0]=IKsin(j3array[0]);\ncj3array[0]=IKcos(j3array[0]);\nif( j3array[0] > IKPI )\n{\n    j3array[0]-=IK2PI;\n}\nelse if( j3array[0] < -IKPI )\n{    j3array[0]+=IK2PI;\n}\nj3valid[0] = true;\nfor(int ij3 = 0; ij3 < 1; ++ij3)\n{\nif( !j3valid[ij3] )\n{\n    continue;\n}\n_ij3[0] = ij3; _ij3[1] = -1;\nfor(int iij3 = ij3+1; iij3 < 1; ++iij3)\n{\nif( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )\n{\n    j3valid[iij3]=false; _ij3[1] = iij3; break; \n}\n}\nj3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];\n{\nIkReal evalcond[8];\nIkReal x168=IKcos(j3);\nIkReal x169=IKsin(j3);\nIkReal x170=((1.0)*sj4);\nIkReal x171=((1.0)*cj4);\nIkReal x172=(new_r12*x169);\nIkReal x173=(new_r02*x168);\nevalcond[0]=((((-1.0)*x168*x170))+new_r02);\nevalcond[1]=(new_r12+(((-1.0)*x169*x170)));\nevalcond[2]=(((new_r12*x168))+(((-1.0)*new_r02*x169)));\nevalcond[3]=((((-1.0)*x170))+x173+x172);\nevalcond[4]=(((new_r22*sj4))+(((-1.0)*x171*x173))+(((-1.0)*x171*x172)));\nevalcond[5]=((((-1.0)*new_r20*x171))+(((-1.0)*new_r00*x168*x170))+(((-1.0)*new_r10*x169*x170)));\nevalcond[6]=((((-1.0)*new_r21*x171))+(((-1.0)*new_r11*x169*x170))+(((-1.0)*new_r01*x168*x170)));\nevalcond[7]=((1.0)+(((-1.0)*x170*x172))+(((-1.0)*x170*x173))+(((-1.0)*new_r22*x171)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nIkReal j5eval[2];\nIkReal x174=((1.0)*cj0);\nIkReal x175=(r11*sj0);\nIkReal x176=(r10*sj0);\nIkReal x177=((1.0)*cj2);\nIkReal x178=(cj1*sj2);\nIkReal x179=(r12*sj0);\nIkReal x180=(((cj2*sj1))+x178);\nIkReal x181=x116;\nIkReal x182=(sj0*x181);\nIkReal x183=(cj0*x180);\nIkReal x184=(cj0*x181);\nIkReal x185=x120;\nnew_r00=(((x176*x180))+((r00*x183))+((r20*x181)));\nnew_r01=(((r01*x183))+((x175*x180))+((r21*x181)));\nnew_r02=(((x179*x180))+((r02*x183))+((r22*x181)));\nnew_r10=(((r00*sj0))+(((-1.0)*r10*x174)));\nnew_r11=((((-1.0)*r11*x174))+((r01*sj0)));\nnew_r12=(((r02*sj0))+(((-1.0)*r12*x174)));\nnew_r20=(((x176*x181))+((r00*x184))+((r20*x185)));\nnew_r21=(((r01*x184))+((x175*x181))+((r21*x185)));\nnew_r22=(((x179*x181))+((r02*x184))+((r22*x185)));\nj5eval[0]=sj4;\nj5eval[1]=IKsign(sj4);\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j5eval[2];\nIkReal x186=((1.0)*cj0);\nIkReal x187=(r11*sj0);\nIkReal x188=(r10*sj0);\nIkReal x189=((1.0)*cj2);\nIkReal x190=(cj1*sj2);\nIkReal x191=(r12*sj0);\nIkReal x192=(((cj2*sj1))+x190);\nIkReal x193=x116;\nIkReal x194=(sj0*x193);\nIkReal x195=(cj0*x192);\nIkReal x196=(cj0*x193);\nIkReal x197=x120;\nnew_r00=(((r00*x195))+((x188*x192))+((r20*x193)));\nnew_r01=(((x187*x192))+((r01*x195))+((r21*x193)));\nnew_r02=(((x191*x192))+((r22*x193))+((r02*x195)));\nnew_r10=(((r00*sj0))+(((-1.0)*r10*x186)));\nnew_r11=((((-1.0)*r11*x186))+((r01*sj0)));\nnew_r12=((((-1.0)*r12*x186))+((r02*sj0)));\nnew_r20=(((r00*x196))+((x188*x193))+((r20*x197)));\nnew_r21=(((x187*x193))+((r01*x196))+((r21*x197)));\nnew_r22=(((x191*x193))+((r22*x197))+((r02*x196)));\nj5eval[0]=sj3;\nj5eval[1]=sj4;\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j5eval[3];\nIkReal x198=((1.0)*cj0);\nIkReal x199=(r11*sj0);\nIkReal x200=(r10*sj0);\nIkReal x201=((1.0)*cj2);\nIkReal x202=(cj1*sj2);\nIkReal x203=(r12*sj0);\nIkReal x204=(((cj2*sj1))+x202);\nIkReal x205=x116;\nIkReal x206=(sj0*x205);\nIkReal x207=(cj0*x204);\nIkReal x208=(cj0*x205);\nIkReal x209=x120;\nnew_r00=(((x200*x204))+((r00*x207))+((r20*x205)));\nnew_r01=(((r01*x207))+((r21*x205))+((x199*x204)));\nnew_r02=(((r22*x205))+((x203*x204))+((r02*x207)));\nnew_r10=(((r00*sj0))+(((-1.0)*r10*x198)));\nnew_r11=(((r01*sj0))+(((-1.0)*r11*x198)));\nnew_r12=((((-1.0)*r12*x198))+((r02*sj0)));\nnew_r20=(((x200*x205))+((r00*x208))+((r20*x209)));\nnew_r21=(((r01*x208))+((r21*x209))+((x199*x205)));\nnew_r22=(((r22*x209))+((x203*x205))+((r02*x208)));\nj5eval[0]=cj3;\nj5eval[1]=cj4;\nj5eval[2]=sj4;\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[12];\nbool bgotonextstatement = true;\ndo\n{\nIkReal x210=(new_r22+(((-1.0)*cj4)));\nIkReal x211=((((-1.0)*sj4))+new_r12);\nIkReal x212=((1.0)*cj4);\nIkReal x213=((1.0)*sj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));\nevalcond[1]=x210;\nevalcond[2]=x210;\nevalcond[3]=new_r02;\nevalcond[4]=x211;\nevalcond[5]=x211;\nevalcond[6]=((((-1.0)*new_r12*x212))+((new_r22*sj4)));\nevalcond[7]=((((-1.0)*new_r10*x213))+(((-1.0)*new_r20*x212)));\nevalcond[8]=((((-1.0)*new_r11*x213))+(((-1.0)*new_r21*x212)));\nevalcond[9]=((1.0)+(((-1.0)*new_r12*x213))+(((-1.0)*new_r22*x212)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x214 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);\nif(!x214.valid){\ncontinue;\n}\nCheckValue<IkReal> x215=IKPowWithIntegerCheck(IKsign(new_r12),-1);\nif(!x215.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(x214.value)+(((1.5707963267949)*(x215.value))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x216=IKsin(j5);\nIkReal x217=IKcos(j5);\nIkReal x218=((1.0)*new_r22);\nIkReal x219=((1.0)*x216);\nIkReal x220=((1.0)*x217);\nevalcond[0]=(new_r20+((new_r12*x217)));\nevalcond[1]=(((new_r22*x216))+new_r11);\nevalcond[2]=((((-1.0)*new_r12*x219))+new_r21);\nevalcond[3]=((((-1.0)*x217*x218))+new_r10);\nevalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x219)));\nevalcond[5]=((((-1.0)*new_r01))+(((-1.0)*x220)));\nevalcond[6]=((((-1.0)*new_r10*x218))+((new_r12*new_r20))+x217);\nevalcond[7]=((((-1.0)*new_r11*x218))+((new_r12*new_r21))+(((-1.0)*x219)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x221=(new_r22+(((-1.0)*cj4)));\nIkReal x222=((1.0)*cj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));\nevalcond[1]=x221;\nevalcond[2]=x221;\nevalcond[3]=new_r02;\nevalcond[4]=(sj4+new_r12);\nevalcond[5]=((((-1.0)*sj4))+(((-1.0)*new_r12)));\nevalcond[6]=(((cj4*new_r12))+((new_r22*sj4)));\nevalcond[7]=(((new_r10*sj4))+(((-1.0)*new_r20*x222)));\nevalcond[8]=(((new_r11*sj4))+(((-1.0)*new_r21*x222)));\nevalcond[9]=((1.0)+((new_r12*sj4))+(((-1.0)*new_r22*x222)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(new_r00, new_r01);\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x223=IKsin(j5);\nIkReal x224=IKcos(j5);\nIkReal x225=((1.0)*new_r12);\nIkReal x226=((1.0)*x223);\nIkReal x227=((1.0)*x224);\nevalcond[0]=(((new_r12*x223))+new_r21);\nevalcond[1]=(new_r00+(((-1.0)*x226)));\nevalcond[2]=(new_r01+(((-1.0)*x227)));\nevalcond[3]=((((-1.0)*x224*x225))+new_r20);\nevalcond[4]=(((new_r22*x223))+(((-1.0)*new_r11)));\nevalcond[5]=((((-1.0)*new_r10))+(((-1.0)*new_r22*x227)));\nevalcond[6]=(x224+((new_r10*new_r22))+(((-1.0)*new_r20*x225)));\nevalcond[7]=(((new_r11*new_r22))+(((-1.0)*new_r21*x225))+(((-1.0)*x226)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x228=(new_r12*sj3);\nIkReal x229=(new_r11*sj3);\nIkReal x230=((1.0)*sj3);\nIkReal x231=((1.0)*cj3);\nIkReal x232=((((-1.0)*new_r02*x230))+((cj3*new_r12)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));\nevalcond[1]=new_r22;\nevalcond[2]=((((-1.0)*x231))+new_r02);\nevalcond[3]=((((-1.0)*x230))+new_r12);\nevalcond[4]=x232;\nevalcond[5]=x232;\nevalcond[6]=((-1.0)+x228+((cj3*new_r02)));\nevalcond[7]=(x229+((cj3*new_r01)));\nevalcond[8]=(((new_r10*sj3))+((cj3*new_r00)));\nevalcond[9]=((((-1.0)*new_r10*x230))+(((-1.0)*new_r00*x231)));\nevalcond[10]=((((-1.0)*new_r01*x231))+(((-1.0)*x229)));\nevalcond[11]=((1.0)+(((-1.0)*new_r02*x231))+(((-1.0)*x228)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(new_r21, ((-1.0)*new_r20));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x233=IKcos(j5);\nIkReal x234=IKsin(j5);\nIkReal x235=((1.0)*new_r12);\nIkReal x236=((1.0)*x234);\nIkReal x237=((1.0)*x233);\nevalcond[0]=(x233+new_r20);\nevalcond[1]=((((-1.0)*x236))+new_r21);\nevalcond[2]=(((new_r12*x233))+new_r01);\nevalcond[3]=(((new_r12*x234))+new_r00);\nevalcond[4]=((((-1.0)*new_r02*x237))+new_r11);\nevalcond[5]=((((-1.0)*new_r02*x236))+new_r10);\nevalcond[6]=((((-1.0)*x236))+((new_r02*new_r10))+(((-1.0)*new_r00*x235)));\nevalcond[7]=((((-1.0)*x237))+((new_r02*new_r11))+(((-1.0)*new_r01*x235)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x238=((((-1.0)*new_r02*sj3))+((cj3*new_r12)));\nIkReal x239=(((new_r10*sj3))+((cj3*new_r00)));\nIkReal x240=(((new_r11*sj3))+((cj3*new_r01)));\nIkReal x241=((1.0)+((new_r12*sj3))+((cj3*new_r02)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));\nevalcond[1]=new_r22;\nevalcond[2]=(cj3+new_r02);\nevalcond[3]=(sj3+new_r12);\nevalcond[4]=x238;\nevalcond[5]=x238;\nevalcond[6]=x241;\nevalcond[7]=x240;\nevalcond[8]=x239;\nevalcond[9]=x239;\nevalcond[10]=x240;\nevalcond[11]=x241;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((-1.0)*new_r21), new_r20);\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x242=IKcos(j5);\nIkReal x243=IKsin(j5);\nIkReal x244=((1.0)*new_r02);\nIkReal x245=((1.0)*x242);\nIkReal x246=((1.0)*x243);\nevalcond[0]=(x243+new_r21);\nevalcond[1]=((((-1.0)*x245))+new_r20);\nevalcond[2]=(new_r11+((new_r02*x242)));\nevalcond[3]=(new_r10+((new_r02*x243)));\nevalcond[4]=((((-1.0)*new_r12*x245))+new_r01);\nevalcond[5]=((((-1.0)*new_r12*x246))+new_r00);\nevalcond[6]=(((new_r00*new_r12))+(((-1.0)*new_r10*x244))+(((-1.0)*x246)));\nevalcond[7]=(((new_r01*new_r12))+(((-1.0)*new_r11*x244))+(((-1.0)*x245)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x247=(new_r12*sj3);\nIkReal x248=((1.0)*new_r02);\nIkReal x249=((((-1.0)*sj3*x248))+((cj3*new_r12)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));\nevalcond[1]=((-1.0)+new_r22);\nevalcond[2]=new_r20;\nevalcond[3]=new_r02;\nevalcond[4]=new_r12;\nevalcond[5]=new_r21;\nevalcond[6]=x249;\nevalcond[7]=x249;\nevalcond[8]=(x247+((cj3*new_r02)));\nevalcond[9]=((((-1.0)*x247))+(((-1.0)*cj3*x248)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x250=((1.0)*new_r01);\nif( IKabs(((((-1.0)*cj3*x250))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x250))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x250))+(((-1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x250))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((((-1.0)*cj3*x250))+(((-1.0)*new_r00*sj3))), ((((-1.0)*sj3*x250))+((cj3*new_r00))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x251=IKsin(j5);\nIkReal x252=IKcos(j5);\nIkReal x253=((1.0)*sj3);\nIkReal x254=((1.0)*x252);\nIkReal x255=(sj3*x251);\nIkReal x256=((1.0)*x251);\nIkReal x257=(cj3*x254);\nevalcond[0]=(((new_r11*sj3))+x251+((cj3*new_r01)));\nevalcond[1]=(((cj3*x251))+((sj3*x252))+new_r01);\nevalcond[2]=(((new_r10*sj3))+((cj3*new_r00))+(((-1.0)*x254)));\nevalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x253))+(((-1.0)*x256)));\nevalcond[4]=((((-1.0)*new_r01*x253))+((cj3*new_r11))+(((-1.0)*x254)));\nevalcond[5]=(x255+new_r00+(((-1.0)*x257)));\nevalcond[6]=(x255+new_r11+(((-1.0)*x257)));\nevalcond[7]=((((-1.0)*x252*x253))+(((-1.0)*cj3*x256))+new_r10);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x258=((((-1.0)*new_r02*sj3))+((cj3*new_r12)));\nIkReal x259=(((new_r12*sj3))+((cj3*new_r02)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));\nevalcond[1]=((1.0)+new_r22);\nevalcond[2]=new_r20;\nevalcond[3]=new_r02;\nevalcond[4]=new_r12;\nevalcond[5]=new_r21;\nevalcond[6]=x258;\nevalcond[7]=x258;\nevalcond[8]=x259;\nevalcond[9]=x259;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x260=((1.0)*sj3);\nif( IKabs(((((-1.0)*new_r00*x260))+((cj3*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x260))+(((-1.0)*cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x260))+((cj3*new_r01))))+IKsqr(((((-1.0)*new_r01*x260))+(((-1.0)*cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((((-1.0)*new_r00*x260))+((cj3*new_r01))), ((((-1.0)*new_r01*x260))+(((-1.0)*cj3*new_r00))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x261=IKsin(j5);\nIkReal x262=IKcos(j5);\nIkReal x263=((1.0)*sj3);\nIkReal x264=((1.0)*x261);\nIkReal x265=(sj3*x262);\nIkReal x266=((1.0)*x262);\nIkReal x267=(cj3*x264);\nevalcond[0]=(((new_r10*sj3))+x262+((cj3*new_r00)));\nevalcond[1]=(((new_r11*sj3))+((cj3*new_r01))+(((-1.0)*x264)));\nevalcond[2]=(((sj3*x261))+new_r00+((cj3*x262)));\nevalcond[3]=((((-1.0)*new_r00*x263))+((cj3*new_r10))+(((-1.0)*x264)));\nevalcond[4]=((((-1.0)*new_r01*x263))+((cj3*new_r11))+(((-1.0)*x266)));\nevalcond[5]=(x265+new_r01+(((-1.0)*x267)));\nevalcond[6]=(x265+new_r10+(((-1.0)*x267)));\nevalcond[7]=((((-1.0)*cj3*x266))+(((-1.0)*x261*x263))+new_r11);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x268=(new_r22+(((-1.0)*cj4)));\nIkReal x269=((((-1.0)*sj4))+new_r02);\nIkReal x270=((1.0)*cj4);\nIkReal x271=((1.0)*sj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));\nevalcond[1]=x268;\nevalcond[2]=x268;\nevalcond[3]=x269;\nevalcond[4]=new_r12;\nevalcond[5]=x269;\nevalcond[6]=(((new_r22*sj4))+(((-1.0)*new_r02*x270)));\nevalcond[7]=((((-1.0)*new_r00*x271))+(((-1.0)*new_r20*x270)));\nevalcond[8]=((((-1.0)*new_r01*x271))+(((-1.0)*new_r21*x270)));\nevalcond[9]=((1.0)+(((-1.0)*new_r22*x270))+(((-1.0)*new_r02*x271)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(new_r10, new_r11);\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x272=IKcos(j5);\nIkReal x273=IKsin(j5);\nIkReal x274=((1.0)*new_r22);\nIkReal x275=((1.0)*x273);\nevalcond[0]=(new_r20+((new_r02*x272)));\nevalcond[1]=((((-1.0)*x275))+new_r10);\nevalcond[2]=((((-1.0)*x272))+new_r11);\nevalcond[3]=(((new_r22*x273))+new_r01);\nevalcond[4]=((((-1.0)*new_r02*x275))+new_r21);\nevalcond[5]=((((-1.0)*x272*x274))+new_r00);\nevalcond[6]=((((-1.0)*new_r00*x274))+x272+((new_r02*new_r20)));\nevalcond[7]=((((-1.0)*new_r01*x274))+(((-1.0)*x275))+((new_r02*new_r21)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x276=(new_r22+(((-1.0)*cj4)));\nIkReal x277=((1.0)*cj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));\nevalcond[1]=x276;\nevalcond[2]=x276;\nevalcond[3]=(sj4+new_r02);\nevalcond[4]=new_r12;\nevalcond[5]=((((-1.0)*sj4))+(((-1.0)*new_r02)));\nevalcond[6]=(((cj4*new_r02))+((new_r22*sj4)));\nevalcond[7]=(((new_r00*sj4))+(((-1.0)*new_r20*x277)));\nevalcond[8]=(((new_r01*sj4))+(((-1.0)*new_r21*x277)));\nevalcond[9]=((1.0)+((new_r02*sj4))+(((-1.0)*new_r22*x277)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x278 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);\nif(!x278.valid){\ncontinue;\n}\nCheckValue<IkReal> x279=IKPowWithIntegerCheck(IKsign(new_r02),-1);\nif(!x279.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(x278.value)+(((1.5707963267949)*(x279.value))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x280=IKsin(j5);\nIkReal x281=IKcos(j5);\nIkReal x282=((1.0)*new_r02);\nIkReal x283=((1.0)*x280);\nIkReal x284=((1.0)*x281);\nevalcond[0]=(((new_r02*x280))+new_r21);\nevalcond[1]=((((-1.0)*x281*x282))+new_r20);\nevalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x283)));\nevalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x284)));\nevalcond[4]=((((-1.0)*new_r01))+((new_r22*x280)));\nevalcond[5]=((((-1.0)*new_r22*x284))+(((-1.0)*new_r00)));\nevalcond[6]=(((new_r00*new_r22))+x281+(((-1.0)*new_r20*x282)));\nevalcond[7]=(((new_r01*new_r22))+(((-1.0)*x283))+(((-1.0)*new_r21*x282)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j5]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x286=IKPowWithIntegerCheck(sj4,-1);\nif(!x286.valid){\ncontinue;\n}\nIkReal x285=x286.value;\nCheckValue<IkReal> x287=IKPowWithIntegerCheck(cj3,-1);\nif(!x287.valid){\ncontinue;\n}\nCheckValue<IkReal> x288=IKPowWithIntegerCheck(cj4,-1);\nif(!x288.valid){\ncontinue;\n}\nif( IKabs((x285*(x287.value)*(x288.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x285)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x285*(x287.value)*(x288.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4))))))+IKsqr(((-1.0)*new_r20*x285))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2((x285*(x287.value)*(x288.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4))))), ((-1.0)*new_r20*x285));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[12];\nIkReal x289=IKsin(j5);\nIkReal x290=IKcos(j5);\nIkReal x291=(cj3*new_r00);\nIkReal x292=(cj3*cj4);\nIkReal x293=((1.0)*sj3);\nIkReal x294=((1.0)*x289);\nIkReal x295=(sj3*x289);\nIkReal x296=((1.0)*x290);\nevalcond[0]=(((sj4*x290))+new_r20);\nevalcond[1]=(new_r21+(((-1.0)*sj4*x294)));\nevalcond[2]=(((new_r11*sj3))+((cj3*new_r01))+((cj4*x289)));\nevalcond[3]=((((-1.0)*x294))+((cj3*new_r10))+(((-1.0)*new_r00*x293)));\nevalcond[4]=((((-1.0)*new_r01*x293))+(((-1.0)*x296))+((cj3*new_r11)));\nevalcond[5]=(((x289*x292))+new_r01+((sj3*x290)));\nevalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x296))+x291);\nevalcond[7]=(x295+new_r00+(((-1.0)*x292*x296)));\nevalcond[8]=(((cj4*x295))+(((-1.0)*cj3*x296))+new_r11);\nevalcond[9]=((((-1.0)*cj3*x294))+new_r10+(((-1.0)*cj4*x290*x293)));\nevalcond[10]=(((new_r20*sj4))+(((-1.0)*cj4*x291))+(((-1.0)*cj4*new_r10*x293))+x290);\nevalcond[11]=((((-1.0)*new_r01*x292))+(((-1.0)*x294))+(((-1.0)*cj4*new_r11*x293))+((new_r21*sj4)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x298=IKPowWithIntegerCheck(sj4,-1);\nif(!x298.valid){\ncontinue;\n}\nIkReal x297=x298.value;\nCheckValue<IkReal> x299=IKPowWithIntegerCheck(sj3,-1);\nif(!x299.valid){\ncontinue;\n}\nif( IKabs((x297*(x299.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x297)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x297*(x299.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))))+IKsqr(((-1.0)*new_r20*x297))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2((x297*(x299.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))), ((-1.0)*new_r20*x297));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[12];\nIkReal x300=IKsin(j5);\nIkReal x301=IKcos(j5);\nIkReal x302=(cj3*new_r00);\nIkReal x303=(cj3*cj4);\nIkReal x304=((1.0)*sj3);\nIkReal x305=((1.0)*x300);\nIkReal x306=(sj3*x300);\nIkReal x307=((1.0)*x301);\nevalcond[0]=(((sj4*x301))+new_r20);\nevalcond[1]=((((-1.0)*sj4*x305))+new_r21);\nevalcond[2]=(((new_r11*sj3))+((cj3*new_r01))+((cj4*x300)));\nevalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x304))+(((-1.0)*x305)));\nevalcond[4]=((((-1.0)*new_r01*x304))+((cj3*new_r11))+(((-1.0)*x307)));\nevalcond[5]=(((sj3*x301))+new_r01+((x300*x303)));\nevalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x307))+x302);\nevalcond[7]=((((-1.0)*x303*x307))+x306+new_r00);\nevalcond[8]=((((-1.0)*cj3*x307))+new_r11+((cj4*x306)));\nevalcond[9]=((((-1.0)*cj3*x305))+(((-1.0)*cj4*x301*x304))+new_r10);\nevalcond[10]=(((new_r20*sj4))+x301+(((-1.0)*cj4*x302))+(((-1.0)*cj4*new_r10*x304)));\nevalcond[11]=((((-1.0)*new_r01*x303))+(((-1.0)*cj4*new_r11*x304))+((new_r21*sj4))+(((-1.0)*x305)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x308=IKPowWithIntegerCheck(IKsign(sj4),-1);\nif(!x308.valid){\ncontinue;\n}\nCheckValue<IkReal> x309 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);\nif(!x309.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x308.value)))+(x309.value));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[12];\nIkReal x310=IKsin(j5);\nIkReal x311=IKcos(j5);\nIkReal x312=(cj3*new_r00);\nIkReal x313=(cj3*cj4);\nIkReal x314=((1.0)*sj3);\nIkReal x315=((1.0)*x310);\nIkReal x316=(sj3*x310);\nIkReal x317=((1.0)*x311);\nevalcond[0]=(((sj4*x311))+new_r20);\nevalcond[1]=((((-1.0)*sj4*x315))+new_r21);\nevalcond[2]=(((cj4*x310))+((new_r11*sj3))+((cj3*new_r01)));\nevalcond[3]=((((-1.0)*new_r00*x314))+(((-1.0)*x315))+((cj3*new_r10)));\nevalcond[4]=((((-1.0)*x317))+((cj3*new_r11))+(((-1.0)*new_r01*x314)));\nevalcond[5]=(((x310*x313))+new_r01+((sj3*x311)));\nevalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x317))+x312);\nevalcond[7]=((((-1.0)*x313*x317))+x316+new_r00);\nevalcond[8]=(((cj4*x316))+new_r11+(((-1.0)*cj3*x317)));\nevalcond[9]=((((-1.0)*cj4*x311*x314))+new_r10+(((-1.0)*cj3*x315)));\nevalcond[10]=((((-1.0)*cj4*new_r10*x314))+((new_r20*sj4))+x311+(((-1.0)*cj4*x312)));\nevalcond[11]=((((-1.0)*new_r01*x313))+(((-1.0)*cj4*new_r11*x314))+(((-1.0)*x315))+((new_r21*sj4)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j3array[1], cj3array[1], sj3array[1];\nbool j3valid[1]={false};\n_nj3 = 1;\nCheckValue<IkReal> x318=IKPowWithIntegerCheck(IKsign(sj4),-1);\nif(!x318.valid){\ncontinue;\n}\nCheckValue<IkReal> x319 = IKatan2WithCheck(IkReal(new_r12),new_r02,IKFAST_ATAN2_MAGTHRESH);\nif(!x319.valid){\ncontinue;\n}\nj3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x318.value)))+(x319.value));\nsj3array[0]=IKsin(j3array[0]);\ncj3array[0]=IKcos(j3array[0]);\nif( j3array[0] > IKPI )\n{\n    j3array[0]-=IK2PI;\n}\nelse if( j3array[0] < -IKPI )\n{    j3array[0]+=IK2PI;\n}\nj3valid[0] = true;\nfor(int ij3 = 0; ij3 < 1; ++ij3)\n{\nif( !j3valid[ij3] )\n{\n    continue;\n}\n_ij3[0] = ij3; _ij3[1] = -1;\nfor(int iij3 = ij3+1; iij3 < 1; ++iij3)\n{\nif( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )\n{\n    j3valid[iij3]=false; _ij3[1] = iij3; break; \n}\n}\nj3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];\n{\nIkReal evalcond[8];\nIkReal x320=IKcos(j3);\nIkReal x321=IKsin(j3);\nIkReal x322=((1.0)*sj4);\nIkReal x323=((1.0)*cj4);\nIkReal x324=(new_r12*x321);\nIkReal x325=(new_r02*x320);\nevalcond[0]=((((-1.0)*x320*x322))+new_r02);\nevalcond[1]=((((-1.0)*x321*x322))+new_r12);\nevalcond[2]=(((new_r12*x320))+(((-1.0)*new_r02*x321)));\nevalcond[3]=((((-1.0)*x322))+x324+x325);\nevalcond[4]=((((-1.0)*x323*x325))+(((-1.0)*x323*x324))+((new_r22*sj4)));\nevalcond[5]=((((-1.0)*new_r10*x321*x322))+(((-1.0)*new_r00*x320*x322))+(((-1.0)*new_r20*x323)));\nevalcond[6]=((((-1.0)*new_r01*x320*x322))+(((-1.0)*new_r11*x321*x322))+(((-1.0)*new_r21*x323)));\nevalcond[7]=((1.0)+(((-1.0)*new_r22*x323))+(((-1.0)*x322*x324))+(((-1.0)*x322*x325)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nIkReal j5eval[2];\nIkReal x326=((1.0)*cj0);\nIkReal x327=(r11*sj0);\nIkReal x328=(r10*sj0);\nIkReal x329=((1.0)*cj2);\nIkReal x330=(cj1*sj2);\nIkReal x331=(r12*sj0);\nIkReal x332=(((cj2*sj1))+x330);\nIkReal x333=x116;\nIkReal x334=(sj0*x333);\nIkReal x335=(cj0*x332);\nIkReal x336=(cj0*x333);\nIkReal x337=x120;\nnew_r00=(((r00*x335))+((r20*x333))+((x328*x332)));\nnew_r01=(((r01*x335))+((r21*x333))+((x327*x332)));\nnew_r02=(((r22*x333))+((x331*x332))+((r02*x335)));\nnew_r10=(((r00*sj0))+(((-1.0)*r10*x326)));\nnew_r11=(((r01*sj0))+(((-1.0)*r11*x326)));\nnew_r12=((((-1.0)*r12*x326))+((r02*sj0)));\nnew_r20=(((r00*x336))+((r20*x337))+((x328*x333)));\nnew_r21=(((r01*x336))+((r21*x337))+((x327*x333)));\nnew_r22=(((r22*x337))+((x331*x333))+((r02*x336)));\nj5eval[0]=sj4;\nj5eval[1]=IKsign(sj4);\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j5eval[2];\nIkReal x338=((1.0)*cj0);\nIkReal x339=(r11*sj0);\nIkReal x340=(r10*sj0);\nIkReal x341=((1.0)*cj2);\nIkReal x342=(cj1*sj2);\nIkReal x343=(r12*sj0);\nIkReal x344=(((cj2*sj1))+x342);\nIkReal x345=x116;\nIkReal x346=(sj0*x345);\nIkReal x347=(cj0*x344);\nIkReal x348=(cj0*x345);\nIkReal x349=x120;\nnew_r00=(((r00*x347))+((r20*x345))+((x340*x344)));\nnew_r01=(((r01*x347))+((r21*x345))+((x339*x344)));\nnew_r02=(((r22*x345))+((r02*x347))+((x343*x344)));\nnew_r10=(((r00*sj0))+(((-1.0)*r10*x338)));\nnew_r11=(((r01*sj0))+(((-1.0)*r11*x338)));\nnew_r12=(((r02*sj0))+(((-1.0)*r12*x338)));\nnew_r20=(((r00*x348))+((r20*x349))+((x340*x345)));\nnew_r21=(((r01*x348))+((r21*x349))+((x339*x345)));\nnew_r22=(((r22*x349))+((r02*x348))+((x343*x345)));\nj5eval[0]=sj3;\nj5eval[1]=sj4;\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j5eval[3];\nIkReal x350=((1.0)*cj0);\nIkReal x351=(r11*sj0);\nIkReal x352=(r10*sj0);\nIkReal x353=((1.0)*cj2);\nIkReal x354=(cj1*sj2);\nIkReal x355=(r12*sj0);\nIkReal x356=(((cj2*sj1))+x354);\nIkReal x357=x116;\nIkReal x358=(sj0*x357);\nIkReal x359=(cj0*x356);\nIkReal x360=(cj0*x357);\nIkReal x361=x120;\nnew_r00=(((x352*x356))+((r00*x359))+((r20*x357)));\nnew_r01=(((r21*x357))+((r01*x359))+((x351*x356)));\nnew_r02=(((x355*x356))+((r22*x357))+((r02*x359)));\nnew_r10=(((r00*sj0))+(((-1.0)*r10*x350)));\nnew_r11=((((-1.0)*r11*x350))+((r01*sj0)));\nnew_r12=((((-1.0)*r12*x350))+((r02*sj0)));\nnew_r20=(((r20*x361))+((r00*x360))+((x352*x357)));\nnew_r21=(((r01*x360))+((x351*x357))+((r21*x361)));\nnew_r22=(((x355*x357))+((r22*x361))+((r02*x360)));\nj5eval[0]=cj3;\nj5eval[1]=cj4;\nj5eval[2]=sj4;\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[12];\nbool bgotonextstatement = true;\ndo\n{\nIkReal x362=(new_r22+(((-1.0)*cj4)));\nIkReal x363=((((-1.0)*sj4))+new_r12);\nIkReal x364=((1.0)*cj4);\nIkReal x365=((1.0)*sj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));\nevalcond[1]=x362;\nevalcond[2]=x362;\nevalcond[3]=new_r02;\nevalcond[4]=x363;\nevalcond[5]=x363;\nevalcond[6]=((((-1.0)*new_r12*x364))+((new_r22*sj4)));\nevalcond[7]=((((-1.0)*new_r20*x364))+(((-1.0)*new_r10*x365)));\nevalcond[8]=((((-1.0)*new_r11*x365))+(((-1.0)*new_r21*x364)));\nevalcond[9]=((1.0)+(((-1.0)*new_r22*x364))+(((-1.0)*new_r12*x365)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x366 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);\nif(!x366.valid){\ncontinue;\n}\nCheckValue<IkReal> x367=IKPowWithIntegerCheck(IKsign(new_r12),-1);\nif(!x367.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(x366.value)+(((1.5707963267949)*(x367.value))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x368=IKsin(j5);\nIkReal x369=IKcos(j5);\nIkReal x370=((1.0)*new_r22);\nIkReal x371=((1.0)*x368);\nIkReal x372=((1.0)*x369);\nevalcond[0]=(new_r20+((new_r12*x369)));\nevalcond[1]=(((new_r22*x368))+new_r11);\nevalcond[2]=((((-1.0)*new_r12*x371))+new_r21);\nevalcond[3]=((((-1.0)*x369*x370))+new_r10);\nevalcond[4]=((((-1.0)*x371))+(((-1.0)*new_r00)));\nevalcond[5]=((((-1.0)*x372))+(((-1.0)*new_r01)));\nevalcond[6]=(x369+((new_r12*new_r20))+(((-1.0)*new_r10*x370)));\nevalcond[7]=((((-1.0)*x371))+((new_r12*new_r21))+(((-1.0)*new_r11*x370)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x373=(new_r22+(((-1.0)*cj4)));\nIkReal x374=((1.0)*cj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));\nevalcond[1]=x373;\nevalcond[2]=x373;\nevalcond[3]=new_r02;\nevalcond[4]=(sj4+new_r12);\nevalcond[5]=((((-1.0)*sj4))+(((-1.0)*new_r12)));\nevalcond[6]=(((cj4*new_r12))+((new_r22*sj4)));\nevalcond[7]=((((-1.0)*new_r20*x374))+((new_r10*sj4)));\nevalcond[8]=((((-1.0)*new_r21*x374))+((new_r11*sj4)));\nevalcond[9]=((1.0)+((new_r12*sj4))+(((-1.0)*new_r22*x374)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(new_r00, new_r01);\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x375=IKsin(j5);\nIkReal x376=IKcos(j5);\nIkReal x377=((1.0)*new_r12);\nIkReal x378=((1.0)*x375);\nIkReal x379=((1.0)*x376);\nevalcond[0]=(((new_r12*x375))+new_r21);\nevalcond[1]=((((-1.0)*x378))+new_r00);\nevalcond[2]=((((-1.0)*x379))+new_r01);\nevalcond[3]=((((-1.0)*x376*x377))+new_r20);\nevalcond[4]=((((-1.0)*new_r11))+((new_r22*x375)));\nevalcond[5]=((((-1.0)*new_r22*x379))+(((-1.0)*new_r10)));\nevalcond[6]=((((-1.0)*new_r20*x377))+x376+((new_r10*new_r22)));\nevalcond[7]=((((-1.0)*new_r21*x377))+(((-1.0)*x378))+((new_r11*new_r22)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x380=(new_r12*sj3);\nIkReal x381=(new_r11*sj3);\nIkReal x382=((1.0)*sj3);\nIkReal x383=((1.0)*cj3);\nIkReal x384=((((-1.0)*new_r02*x382))+((cj3*new_r12)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));\nevalcond[1]=new_r22;\nevalcond[2]=((((-1.0)*x383))+new_r02);\nevalcond[3]=((((-1.0)*x382))+new_r12);\nevalcond[4]=x384;\nevalcond[5]=x384;\nevalcond[6]=((-1.0)+x380+((cj3*new_r02)));\nevalcond[7]=(x381+((cj3*new_r01)));\nevalcond[8]=(((new_r10*sj3))+((cj3*new_r00)));\nevalcond[9]=((((-1.0)*new_r10*x382))+(((-1.0)*new_r00*x383)));\nevalcond[10]=((((-1.0)*new_r01*x383))+(((-1.0)*x381)));\nevalcond[11]=((1.0)+(((-1.0)*new_r02*x383))+(((-1.0)*x380)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(new_r21, ((-1.0)*new_r20));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x385=IKcos(j5);\nIkReal x386=IKsin(j5);\nIkReal x387=((1.0)*new_r12);\nIkReal x388=((1.0)*x386);\nIkReal x389=((1.0)*x385);\nevalcond[0]=(x385+new_r20);\nevalcond[1]=((((-1.0)*x388))+new_r21);\nevalcond[2]=(((new_r12*x385))+new_r01);\nevalcond[3]=(((new_r12*x386))+new_r00);\nevalcond[4]=((((-1.0)*new_r02*x389))+new_r11);\nevalcond[5]=((((-1.0)*new_r02*x388))+new_r10);\nevalcond[6]=((((-1.0)*new_r00*x387))+(((-1.0)*x388))+((new_r02*new_r10)));\nevalcond[7]=((((-1.0)*new_r01*x387))+(((-1.0)*x389))+((new_r02*new_r11)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x390=((((-1.0)*new_r02*sj3))+((cj3*new_r12)));\nIkReal x391=(((new_r10*sj3))+((cj3*new_r00)));\nIkReal x392=(((new_r11*sj3))+((cj3*new_r01)));\nIkReal x393=((1.0)+((new_r12*sj3))+((cj3*new_r02)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));\nevalcond[1]=new_r22;\nevalcond[2]=(cj3+new_r02);\nevalcond[3]=(sj3+new_r12);\nevalcond[4]=x390;\nevalcond[5]=x390;\nevalcond[6]=x393;\nevalcond[7]=x392;\nevalcond[8]=x391;\nevalcond[9]=x391;\nevalcond[10]=x392;\nevalcond[11]=x393;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((-1.0)*new_r21), new_r20);\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x394=IKcos(j5);\nIkReal x395=IKsin(j5);\nIkReal x396=((1.0)*new_r02);\nIkReal x397=((1.0)*x394);\nIkReal x398=((1.0)*x395);\nevalcond[0]=(x395+new_r21);\nevalcond[1]=((((-1.0)*x397))+new_r20);\nevalcond[2]=(new_r11+((new_r02*x394)));\nevalcond[3]=(new_r10+((new_r02*x395)));\nevalcond[4]=((((-1.0)*new_r12*x397))+new_r01);\nevalcond[5]=((((-1.0)*new_r12*x398))+new_r00);\nevalcond[6]=((((-1.0)*x398))+((new_r00*new_r12))+(((-1.0)*new_r10*x396)));\nevalcond[7]=((((-1.0)*x397))+((new_r01*new_r12))+(((-1.0)*new_r11*x396)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x399=(new_r12*sj3);\nIkReal x400=((1.0)*new_r02);\nIkReal x401=(((cj3*new_r12))+(((-1.0)*sj3*x400)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));\nevalcond[1]=((-1.0)+new_r22);\nevalcond[2]=new_r20;\nevalcond[3]=new_r02;\nevalcond[4]=new_r12;\nevalcond[5]=new_r21;\nevalcond[6]=x401;\nevalcond[7]=x401;\nevalcond[8]=(x399+((cj3*new_r02)));\nevalcond[9]=((((-1.0)*x399))+(((-1.0)*cj3*x400)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x402=((1.0)*new_r01);\nif( IKabs(((((-1.0)*cj3*x402))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj3*new_r00))+(((-1.0)*sj3*x402)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x402))+(((-1.0)*new_r00*sj3))))+IKsqr((((cj3*new_r00))+(((-1.0)*sj3*x402))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((((-1.0)*cj3*x402))+(((-1.0)*new_r00*sj3))), (((cj3*new_r00))+(((-1.0)*sj3*x402))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x403=IKsin(j5);\nIkReal x404=IKcos(j5);\nIkReal x405=((1.0)*sj3);\nIkReal x406=((1.0)*x404);\nIkReal x407=(sj3*x403);\nIkReal x408=((1.0)*x403);\nIkReal x409=(cj3*x406);\nevalcond[0]=(((new_r11*sj3))+x403+((cj3*new_r01)));\nevalcond[1]=(((sj3*x404))+new_r01+((cj3*x403)));\nevalcond[2]=(((new_r10*sj3))+((cj3*new_r00))+(((-1.0)*x406)));\nevalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x405))+(((-1.0)*x408)));\nevalcond[4]=(((cj3*new_r11))+(((-1.0)*new_r01*x405))+(((-1.0)*x406)));\nevalcond[5]=(x407+new_r00+(((-1.0)*x409)));\nevalcond[6]=(x407+new_r11+(((-1.0)*x409)));\nevalcond[7]=((((-1.0)*cj3*x408))+(((-1.0)*x404*x405))+new_r10);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x410=((((-1.0)*new_r02*sj3))+((cj3*new_r12)));\nIkReal x411=(((new_r12*sj3))+((cj3*new_r02)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));\nevalcond[1]=((1.0)+new_r22);\nevalcond[2]=new_r20;\nevalcond[3]=new_r02;\nevalcond[4]=new_r12;\nevalcond[5]=new_r21;\nevalcond[6]=x410;\nevalcond[7]=x410;\nevalcond[8]=x411;\nevalcond[9]=x411;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x412=((1.0)*sj3);\nif( IKabs((((cj3*new_r01))+(((-1.0)*new_r00*x412)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x412)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj3*new_r01))+(((-1.0)*new_r00*x412))))+IKsqr(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x412))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2((((cj3*new_r01))+(((-1.0)*new_r00*x412))), ((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x412))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x413=IKsin(j5);\nIkReal x414=IKcos(j5);\nIkReal x415=((1.0)*sj3);\nIkReal x416=((1.0)*x413);\nIkReal x417=(sj3*x414);\nIkReal x418=((1.0)*x414);\nIkReal x419=(cj3*x416);\nevalcond[0]=(((new_r10*sj3))+x414+((cj3*new_r00)));\nevalcond[1]=(((new_r11*sj3))+((cj3*new_r01))+(((-1.0)*x416)));\nevalcond[2]=(((sj3*x413))+new_r00+((cj3*x414)));\nevalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x415))+(((-1.0)*x416)));\nevalcond[4]=(((cj3*new_r11))+(((-1.0)*x418))+(((-1.0)*new_r01*x415)));\nevalcond[5]=(x417+new_r01+(((-1.0)*x419)));\nevalcond[6]=(x417+new_r10+(((-1.0)*x419)));\nevalcond[7]=((((-1.0)*cj3*x418))+(((-1.0)*x413*x415))+new_r11);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x420=(new_r22+(((-1.0)*cj4)));\nIkReal x421=((((-1.0)*sj4))+new_r02);\nIkReal x422=((1.0)*cj4);\nIkReal x423=((1.0)*sj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));\nevalcond[1]=x420;\nevalcond[2]=x420;\nevalcond[3]=x421;\nevalcond[4]=new_r12;\nevalcond[5]=x421;\nevalcond[6]=(((new_r22*sj4))+(((-1.0)*new_r02*x422)));\nevalcond[7]=((((-1.0)*new_r00*x423))+(((-1.0)*new_r20*x422)));\nevalcond[8]=((((-1.0)*new_r21*x422))+(((-1.0)*new_r01*x423)));\nevalcond[9]=((1.0)+(((-1.0)*new_r22*x422))+(((-1.0)*new_r02*x423)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(new_r10, new_r11);\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x424=IKcos(j5);\nIkReal x425=IKsin(j5);\nIkReal x426=((1.0)*new_r22);\nIkReal x427=((1.0)*x425);\nevalcond[0]=(new_r20+((new_r02*x424)));\nevalcond[1]=((((-1.0)*x427))+new_r10);\nevalcond[2]=((((-1.0)*x424))+new_r11);\nevalcond[3]=(((new_r22*x425))+new_r01);\nevalcond[4]=((((-1.0)*new_r02*x427))+new_r21);\nevalcond[5]=((((-1.0)*x424*x426))+new_r00);\nevalcond[6]=((((-1.0)*new_r00*x426))+x424+((new_r02*new_r20)));\nevalcond[7]=((((-1.0)*x427))+((new_r02*new_r21))+(((-1.0)*new_r01*x426)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x428=(new_r22+(((-1.0)*cj4)));\nIkReal x429=((1.0)*cj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));\nevalcond[1]=x428;\nevalcond[2]=x428;\nevalcond[3]=(sj4+new_r02);\nevalcond[4]=new_r12;\nevalcond[5]=((((-1.0)*sj4))+(((-1.0)*new_r02)));\nevalcond[6]=(((cj4*new_r02))+((new_r22*sj4)));\nevalcond[7]=(((new_r00*sj4))+(((-1.0)*new_r20*x429)));\nevalcond[8]=(((new_r01*sj4))+(((-1.0)*new_r21*x429)));\nevalcond[9]=((1.0)+((new_r02*sj4))+(((-1.0)*new_r22*x429)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x430 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);\nif(!x430.valid){\ncontinue;\n}\nCheckValue<IkReal> x431=IKPowWithIntegerCheck(IKsign(new_r02),-1);\nif(!x431.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(x430.value)+(((1.5707963267949)*(x431.value))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x432=IKsin(j5);\nIkReal x433=IKcos(j5);\nIkReal x434=((1.0)*new_r02);\nIkReal x435=((1.0)*x432);\nIkReal x436=((1.0)*x433);\nevalcond[0]=(new_r21+((new_r02*x432)));\nevalcond[1]=((((-1.0)*x433*x434))+new_r20);\nevalcond[2]=((((-1.0)*x435))+(((-1.0)*new_r10)));\nevalcond[3]=((((-1.0)*x436))+(((-1.0)*new_r11)));\nevalcond[4]=((((-1.0)*new_r01))+((new_r22*x432)));\nevalcond[5]=((((-1.0)*new_r00))+(((-1.0)*new_r22*x436)));\nevalcond[6]=(((new_r00*new_r22))+x433+(((-1.0)*new_r20*x434)));\nevalcond[7]=((((-1.0)*x435))+((new_r01*new_r22))+(((-1.0)*new_r21*x434)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j5]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x438=IKPowWithIntegerCheck(sj4,-1);\nif(!x438.valid){\ncontinue;\n}\nIkReal x437=x438.value;\nCheckValue<IkReal> x439=IKPowWithIntegerCheck(cj3,-1);\nif(!x439.valid){\ncontinue;\n}\nCheckValue<IkReal> x440=IKPowWithIntegerCheck(cj4,-1);\nif(!x440.valid){\ncontinue;\n}\nif( IKabs((x437*(x439.value)*(x440.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x437)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x437*(x439.value)*(x440.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4))))))+IKsqr(((-1.0)*new_r20*x437))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2((x437*(x439.value)*(x440.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4))))), ((-1.0)*new_r20*x437));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[12];\nIkReal x441=IKsin(j5);\nIkReal x442=IKcos(j5);\nIkReal x443=(cj3*new_r00);\nIkReal x444=(cj3*cj4);\nIkReal x445=((1.0)*sj3);\nIkReal x446=((1.0)*x441);\nIkReal x447=(sj3*x441);\nIkReal x448=((1.0)*x442);\nevalcond[0]=(((sj4*x442))+new_r20);\nevalcond[1]=((((-1.0)*sj4*x446))+new_r21);\nevalcond[2]=(((cj4*x441))+((new_r11*sj3))+((cj3*new_r01)));\nevalcond[3]=((((-1.0)*x446))+(((-1.0)*new_r00*x445))+((cj3*new_r10)));\nevalcond[4]=((((-1.0)*x448))+(((-1.0)*new_r01*x445))+((cj3*new_r11)));\nevalcond[5]=(((x441*x444))+((sj3*x442))+new_r01);\nevalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x448))+x443);\nevalcond[7]=((((-1.0)*x444*x448))+x447+new_r00);\nevalcond[8]=((((-1.0)*cj3*x448))+((cj4*x447))+new_r11);\nevalcond[9]=((((-1.0)*cj4*x442*x445))+(((-1.0)*cj3*x446))+new_r10);\nevalcond[10]=(((new_r20*sj4))+(((-1.0)*cj4*new_r10*x445))+(((-1.0)*cj4*x443))+x442);\nevalcond[11]=((((-1.0)*x446))+(((-1.0)*new_r01*x444))+(((-1.0)*cj4*new_r11*x445))+((new_r21*sj4)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x450=IKPowWithIntegerCheck(sj4,-1);\nif(!x450.valid){\ncontinue;\n}\nIkReal x449=x450.value;\nCheckValue<IkReal> x451=IKPowWithIntegerCheck(sj3,-1);\nif(!x451.valid){\ncontinue;\n}\nif( IKabs((x449*(x451.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x449)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x449*(x451.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))))+IKsqr(((-1.0)*new_r20*x449))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2((x449*(x451.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))), ((-1.0)*new_r20*x449));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[12];\nIkReal x452=IKsin(j5);\nIkReal x453=IKcos(j5);\nIkReal x454=(cj3*new_r00);\nIkReal x455=(cj3*cj4);\nIkReal x456=((1.0)*sj3);\nIkReal x457=((1.0)*x452);\nIkReal x458=(sj3*x452);\nIkReal x459=((1.0)*x453);\nevalcond[0]=(((sj4*x453))+new_r20);\nevalcond[1]=((((-1.0)*sj4*x457))+new_r21);\nevalcond[2]=(((cj4*x452))+((new_r11*sj3))+((cj3*new_r01)));\nevalcond[3]=((((-1.0)*new_r00*x456))+(((-1.0)*x457))+((cj3*new_r10)));\nevalcond[4]=((((-1.0)*new_r01*x456))+(((-1.0)*x459))+((cj3*new_r11)));\nevalcond[5]=(((sj3*x453))+((x452*x455))+new_r01);\nevalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x459))+x454);\nevalcond[7]=(x458+(((-1.0)*x455*x459))+new_r00);\nevalcond[8]=(((cj4*x458))+new_r11+(((-1.0)*cj3*x459)));\nevalcond[9]=((((-1.0)*cj4*x453*x456))+new_r10+(((-1.0)*cj3*x457)));\nevalcond[10]=(((new_r20*sj4))+(((-1.0)*cj4*x454))+(((-1.0)*cj4*new_r10*x456))+x453);\nevalcond[11]=((((-1.0)*x457))+(((-1.0)*cj4*new_r11*x456))+(((-1.0)*new_r01*x455))+((new_r21*sj4)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x460=IKPowWithIntegerCheck(IKsign(sj4),-1);\nif(!x460.valid){\ncontinue;\n}\nCheckValue<IkReal> x461 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);\nif(!x461.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x460.value)))+(x461.value));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[12];\nIkReal x462=IKsin(j5);\nIkReal x463=IKcos(j5);\nIkReal x464=(cj3*new_r00);\nIkReal x465=(cj3*cj4);\nIkReal x466=((1.0)*sj3);\nIkReal x467=((1.0)*x462);\nIkReal x468=(sj3*x462);\nIkReal x469=((1.0)*x463);\nevalcond[0]=(((sj4*x463))+new_r20);\nevalcond[1]=((((-1.0)*sj4*x467))+new_r21);\nevalcond[2]=(((cj4*x462))+((new_r11*sj3))+((cj3*new_r01)));\nevalcond[3]=((((-1.0)*x467))+(((-1.0)*new_r00*x466))+((cj3*new_r10)));\nevalcond[4]=((((-1.0)*new_r01*x466))+(((-1.0)*x469))+((cj3*new_r11)));\nevalcond[5]=(((sj3*x463))+new_r01+((x462*x465)));\nevalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x469))+x464);\nevalcond[7]=((((-1.0)*x465*x469))+x468+new_r00);\nevalcond[8]=(((cj4*x468))+new_r11+(((-1.0)*cj3*x469)));\nevalcond[9]=((((-1.0)*cj4*x463*x466))+new_r10+(((-1.0)*cj3*x467)));\nevalcond[10]=(((new_r20*sj4))+(((-1.0)*cj4*x464))+x463+(((-1.0)*cj4*new_r10*x466)));\nevalcond[11]=((((-1.0)*x467))+(((-1.0)*cj4*new_r11*x466))+(((-1.0)*new_r01*x465))+((new_r21*sj4)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n}\n}\n\n}\n\n}\n}\n}\n}\n}};\n\n\n/// solves the inverse kinematics equations.\n/// \\param pfree is an array specifying the free joints of the chain.\nIKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {\nIKSolver solver;\nreturn solver.ComputeIk(eetrans,eerot,pfree,solutions);\n}\n\nIKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {\nIKSolver solver;\nreturn solver.ComputeIk(eetrans,eerot,pfree,solutions);\n}\n\nIKFAST_API const char* GetKinematicsHash() { return \"91a2b4cd201a030d8d22848745147445\"; }\n\nIKFAST_API const char* GetIkFastVersion() { return \"0x10000048\"; }\n\n#ifdef IKFAST_NAMESPACE\n} // end namespace\n#endif\n\n#ifndef IKFAST_NO_MAIN\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef IKFAST_NAMESPACE\nusing namespace IKFAST_NAMESPACE;\n#endif\nint main(int argc, char** argv)\n{\n    if( argc != 12+GetNumFreeParameters()+1 ) {\n        printf(\"\\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\\n\\n\"\n               \"Returns the ik solutions given the transformation of the end effector specified by\\n\"\n               \"a 3x3 rotation R (rXX), and a 3x1 translation (tX).\\n\"\n               \"There are %d free parameters that have to be specified.\\n\\n\",GetNumFreeParameters());\n        return 1;\n    }\n\n    IkSolutionList<IkReal> solutions;\n    std::vector<IkReal> vfree(GetNumFreeParameters());\n    IkReal eerot[9],eetrans[3];\n    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);\n    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);\n    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);\n    for(std::size_t i = 0; i < vfree.size(); ++i)\n        vfree[i] = atof(argv[13+i]);\n    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);\n\n    if( !bSuccess ) {\n        fprintf(stderr,\"Failed to get ik solution\\n\");\n        return -1;\n    }\n\n    printf(\"Found %d ik solutions:\\n\", (int)solutions.GetNumSolutions());\n    std::vector<IkReal> solvalues(GetNumJoints());\n    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {\n        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);\n        printf(\"sol%d (free=%d): \", (int)i, (int)sol.GetFree().size());\n        std::vector<IkReal> vsolfree(sol.GetFree().size());\n        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);\n        for( std::size_t j = 0; j < solvalues.size(); ++j)\n            printf(\"%.15f, \", solvalues[j]);\n        printf(\"\\n\");\n    }\n    return 0;\n}\n\n#endif\n\nchar* ComputeFkWrapper(const IkReal* j) {\n    IkReal eetrans[3] = {0};\n    IkReal eerot[9] = {0};\n    char buffer [256] = {0};\n    ComputeFk(j, eetrans, eerot);\n    for(int i = 0; i < 3; ++i)\n        sprintf(buffer + strlen(buffer), \"%.15f,\", eetrans[i]);\n    for(int i = 0; i < 9 - 1; ++i)\n        sprintf(buffer + strlen(buffer), \"%.15f,\", eerot[i]);\n    sprintf(buffer + strlen(buffer), \"%.15f\", eerot[9 - 1]);\n    return buffer;\n}\n\nstd::vector<IkReal> TrueComputeIk(int argc, char** argv)\n{\n    std::vector<IkReal> solvalues(GetNumJoints());\n    if( argc != 12+GetNumFreeParameters()+1 ) {\n        printf(\"\\nKAKAKAK Usage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\\n\\n\"\n               \"Returns the ik solutions given the transformation of the end effector specified by\\n\"\n               \"a 3x3 rotation R (rXX), and a 3x1 translation (tX).\\n\"\n               \"There are %d free parameters that have to be specified.\\n\\n\",GetNumFreeParameters());\n    }\n\n    IkSolutionList<IkReal> solutions;\n    std::vector<IkReal> vfree(GetNumFreeParameters());\n    IkReal eerot[9],eetrans[3];\n    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);\n    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);\n    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);\n    for(std::size_t i = 0; i < vfree.size(); ++i)\n        vfree[i] = atof(argv[13+i]);\n    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);\n\n    if( !bSuccess ) {\n        fprintf(stderr,\"Failed to get ik solution\\n\");\n    }\n\n    printf(\"Found %d ik solutions:\\n\", (int)solutions.GetNumSolutions());\n    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {\n        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);\n        printf(\"sol%d (free=%d): \", (int)i, (int)sol.GetFree().size());\n        std::vector<IkReal> vsolfree(sol.GetFree().size());\n        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);\n        for( std::size_t j = 0; j < solvalues.size(); ++j)\n            printf(\"%.15f, \", solvalues[j]);\n        printf(\"\\n\");\n    }\n    return solvalues;\n}\n"]}