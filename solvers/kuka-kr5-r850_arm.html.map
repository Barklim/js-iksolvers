{"version":3,"file":"./solvers/kuka-kr5-r850_arm.html","sources":["./solvers/kuka-kr5-r850_arm.tmp.cpp"],"names":[],"mappingszMA;AAAA;AAAA;;;;;;;;AAFA;AAAA;AAAA;;;;;AA+MA;;;;;;;;;;;;;;;AAyzHA;AACA;AACA;AACA;AAAA;AACA;;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAEA;;AAAA;AAAA;AACA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AACA","sourcesContent":["/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE\n/// \\author Rosen Diankov\n///\n/// Licensed under the Apache License, Version 2.0 (the \"License\");\n/// you may not use this file except in compliance with the License.\n/// You may obtain a copy of the License at\n///     http://www.apache.org/licenses/LICENSE-2.0\n/// \n/// Unless required by applicable law or agreed to in writing, software\n/// distributed under the License is distributed on an \"AS IS\" BASIS,\n/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n/// See the License for the specific language governing permissions and\n/// limitations under the License.\n///\n/// ikfast version 0x10000048 generated on 2015-05-22 07:20:38.566313\n/// To compile with gcc:\n///     gcc -lstdc++ ik.cpp\n/// To compile without any main function as a shared object (might need -llapack):\n///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp\n#define IKFAST_HAS_LIBRARY\n#include \"ikfast.h\" // found inside share/openrave-X.Y/python/ikfast.h\nusing namespace ikfast;\n\n// check if the included ikfast version matches what this file was compiled with\n#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]\nIKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);\n\n#include <cmath>\n#include <vector>\n#include <limits>\n#include <algorithm>\n#include <complex>\n\n#ifndef IKFAST_ASSERT\n#include <stdexcept>\n#include <sstream>\n#include <iostream>\n\n#ifdef _MSC_VER\n#ifndef __PRETTY_FUNCTION__\n#define __PRETTY_FUNCTION__ __FUNCDNAME__\n#endif\n#endif\n\n#ifndef __PRETTY_FUNCTION__\n#define __PRETTY_FUNCTION__ __func__\n#endif\n\n#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << \"ikfast exception: \" << __FILE__ << \":\" << __LINE__ << \": \" <<__PRETTY_FUNCTION__ << \": Assertion '\" << #b << \"' failed\"; throw std::runtime_error(ss.str()); } }\n\n#endif\n\n#if defined(_MSC_VER)\n#define IKFAST_ALIGNED16(x) __declspec(align(16)) x\n#else\n#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))\n#endif\n\n#define IK2PI  ((IkReal)6.28318530717959)\n#define IKPI  ((IkReal)3.14159265358979)\n#define IKPI_2  ((IkReal)1.57079632679490)\n\n#ifdef _MSC_VER\n#ifndef isnan\n#define isnan _isnan\n#endif\n#ifndef isinf\n#define isinf _isinf\n#endif\n//#ifndef isfinite\n//#define isfinite _isfinite\n//#endif\n#endif // _MSC_VER\n\n// lapack routines\nextern \"C\" {\n  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);\n  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);\n  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);\n  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);\n  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);\n  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);\n}\n\nusing namespace std; // necessary to get std math routines\n\n#ifdef IKFAST_NAMESPACE\nnamespace IKFAST_NAMESPACE {\n#endif\n\ninline float IKabs(float f) { return fabsf(f); }\ninline double IKabs(double f) { return fabs(f); }\n\ninline float IKsqr(float f) { return f*f; }\ninline double IKsqr(double f) { return f*f; }\n\ninline float IKlog(float f) { return logf(f); }\ninline double IKlog(double f) { return log(f); }\n\n// allows asin and acos to exceed 1\n#ifndef IKFAST_SINCOS_THRESH\n#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)\n#endif\n\n// used to check input to atan2 for degenerate cases\n#ifndef IKFAST_ATAN2_MAGTHRESH\n#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)\n#endif\n\n// minimum distance of separate solutions\n#ifndef IKFAST_SOLUTION_THRESH\n#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)\n#endif\n\n// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate\n#ifndef IKFAST_EVALCOND_THRESH\n#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)\n#endif\n\n\ninline float IKasin(float f)\n{\nIKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver\nif( f <= -1 ) return float(-IKPI_2);\nelse if( f >= 1 ) return float(IKPI_2);\nreturn asinf(f);\n}\ninline double IKasin(double f)\n{\nIKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver\nif( f <= -1 ) return -IKPI_2;\nelse if( f >= 1 ) return IKPI_2;\nreturn asin(f);\n}\n\n// return positive value in [0,y)\ninline float IKfmod(float x, float y)\n{\n    while(x < 0) {\n        x += y;\n    }\n    return fmodf(x,y);\n}\n\n// return positive value in [0,y)\ninline double IKfmod(double x, double y)\n{\n    while(x < 0) {\n        x += y;\n    }\n    return fmod(x,y);\n}\n\ninline float IKacos(float f)\n{\nIKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver\nif( f <= -1 ) return float(IKPI);\nelse if( f >= 1 ) return float(0);\nreturn acosf(f);\n}\ninline double IKacos(double f)\n{\nIKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver\nif( f <= -1 ) return IKPI;\nelse if( f >= 1 ) return 0;\nreturn acos(f);\n}\ninline float IKsin(float f) { return sinf(f); }\ninline double IKsin(double f) { return sin(f); }\ninline float IKcos(float f) { return cosf(f); }\ninline double IKcos(double f) { return cos(f); }\ninline float IKtan(float f) { return tanf(f); }\ninline double IKtan(double f) { return tan(f); }\ninline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }\ninline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }\ninline float IKatan2Simple(float fy, float fx) {\n    return atan2f(fy,fx);\n}\ninline float IKatan2(float fy, float fx) {\n    if( isnan(fy) ) {\n        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned\n        return float(IKPI_2);\n    }\n    else if( isnan(fx) ) {\n        return 0;\n    }\n    return atan2f(fy,fx);\n}\ninline double IKatan2Simple(double fy, double fx) {\n    return atan2(fy,fx);\n}\ninline double IKatan2(double fy, double fx) {\n    if( isnan(fy) ) {\n        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned\n        return IKPI_2;\n    }\n    else if( isnan(fx) ) {\n        return 0;\n    }\n    return atan2(fy,fx);\n}\n\ntemplate <typename T>\nstruct CheckValue\n{\n    T value;\n    bool valid;\n};\n\ntemplate <typename T>\ninline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)\n{\n    CheckValue<T> ret;\n    ret.valid = false;\n    ret.value = 0;\n    if( !isnan(fy) && !isnan(fx) ) {\n        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {\n            ret.value = IKatan2Simple(fy,fx);\n            ret.valid = true;\n        }\n    }\n    return ret;\n}\n\ninline float IKsign(float f) {\n    if( f > 0 ) {\n        return float(1);\n    }\n    else if( f < 0 ) {\n        return float(-1);\n    }\n    return 0;\n}\n\ninline double IKsign(double f) {\n    if( f > 0 ) {\n        return 1.0;\n    }\n    else if( f < 0 ) {\n        return -1.0;\n    }\n    return 0;\n}\n\ntemplate <typename T>\ninline CheckValue<T> IKPowWithIntegerCheck(T f, int n)\n{\n    CheckValue<T> ret;\n    ret.valid = true;\n    if( n == 0 ) {\n        ret.value = 1.0;\n        return ret;\n    }\n    else if( n == 1 )\n    {\n        ret.value = f;\n        return ret;\n    }\n    else if( n < 0 )\n    {\n        if( f == 0 )\n        {\n            ret.valid = false;\n            ret.value = (T)1.0e30;\n            return ret;\n        }\n        if( n == -1 ) {\n            ret.value = T(1.0)/f;\n            return ret;\n        }\n    }\n\n    int num = n > 0 ? n : -n;\n    if( num == 2 ) {\n        ret.value = f*f;\n    }\n    else if( num == 3 ) {\n        ret.value = f*f*f;\n    }\n    else {\n        ret.value = 1.0;\n        while(num>0) {\n            if( num & 1 ) {\n                ret.value *= f;\n            }\n            num >>= 1;\n            f *= f;\n        }\n    }\n    \n    if( n < 0 ) {\n        ret.value = T(1.0)/ret.value;\n    }\n    return ret;\n}\n\n/// solves the forward kinematics equations.\n/// \\param pfree is an array specifying the free joints of the chain.\nIKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {\nIkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57;\nx0=IKcos(j[0]);\nx1=IKcos(j[1]);\nx2=IKsin(j[2]);\nx3=IKcos(j[2]);\nx4=IKsin(j[1]);\nx5=IKsin(j[3]);\nx6=IKcos(j[3]);\nx7=IKsin(j[0]);\nx8=IKsin(j[4]);\nx9=IKcos(j[4]);\nx10=IKsin(j[5]);\nx11=IKcos(j[5]);\nx12=((0.48)*x7);\nx13=((1.0)*x6);\nx14=((0.48)*x0);\nx15=((0.405)*x7);\nx16=((0.79)*x8);\nx17=((0.365)*x4);\nx18=((1.0)*x7);\nx19=((0.79)*x9);\nx20=((1.0)*x0);\nx21=((0.405)*x0);\nx22=((0.09)*x0);\nx23=((0.09)*x7);\nx24=(x0*x5);\nx25=(x3*x4);\nx26=(x10*x5);\nx27=(x2*x4);\nx28=(x1*x3);\nx29=((-1.0)*x9);\nx30=((-1.0)*x8);\nx31=(x1*x2);\nx32=(x6*x7);\nx33=(x6*x8);\nx34=(x18*x5);\nx35=(x0*x13);\nx36=(x18*x27);\nx37=((((-1.0)*x28))+x27);\nx38=(x31+x25);\nx39=(x37*x5);\nx40=(x37*x6);\nx41=(((x0*x28))+(((-1.0)*x20*x27)));\nx42=((((-1.0)*x36))+((x28*x7)));\nx43=(x40*x9);\nx44=(x20*(((((-1.0)*x31))+(((-1.0)*x25)))));\nx45=(x18*(((((-1.0)*x31))+(((-1.0)*x25)))));\nx46=(x41*x8);\nx47=(x42*x8);\nx48=(x45*x6);\nx49=(x45*x5);\nx50=(x44*x5);\nx51=(x44*x6);\nx52=((-1.0)*x45);\nx53=(x32+x50);\nx54=(x34+(((-1.0)*x13*x44)));\nx55=((((-1.0)*x20*x5))+(((-1.0)*x13*x45)));\nx56=((((-1.0)*x48))+(((-1.0)*x24)));\nx57=(x54*x9);\neerot[0]=(((x8*(((((-1.0)*x34))+x51))))+((x41*x9)));\neerot[1]=(((x10*(((((-1.0)*x46))+(((-1.0)*x57))))))+((x11*x53)));\neerot[2]=(((x11*((x46+x57))))+((x10*x53)));\neetrans[0]=((((-1.0)*x21*x27))+((x22*x25))+((x21*x28))+((x0*x17))+((x22*x31))+(((0.075)*x0))+((x11*(((((-1.0)*x16*x41))+(((-1.0)*x19*x54))))))+((x8*(((((-0.48)*x51))+((x12*x5))))))+((x10*(((((-0.79)*x32))+(((-0.79)*x50))))))+((x9*((((x14*x27))+(((-1.0)*x14*x28)))))));\neerot[3]=(((x9*(((((-1.0)*x18*x28))+x36))))+((x55*x8)));\neerot[4]=(((x11*(((((-1.0)*x49))+x35))))+((x10*((x47+((x55*x9)))))));\neerot[5]=(((x10*(((((-1.0)*x49))+x35))))+((x11*((((x30*x42))+((x29*x56)))))));\nIkReal x58=((1.0)*x23);\neetrans[1]=((((-1.0)*x15*x28))+((x8*(((((0.48)*x48))+((x14*x5))))))+(((-1.0)*x25*x58))+((x10*(((((-0.79)*x0*x6))+(((0.79)*x49))))))+(((-0.075)*x7))+(((-1.0)*x31*x58))+(((-1.0)*x17*x7))+((x11*((((x19*x56))+((x16*x42))))))+((x9*(((((-1.0)*x12*x27))+((x12*x28))))))+((x15*x27)));\neerot[6]=(((x9*(((((-1.0)*x31))+(((-1.0)*x25))))))+((x33*x37)));\neerot[7]=(((x11*x39))+((x10*((x43+((x38*x8)))))));\neerot[8]=(((x26*x37))+((x11*((((x29*x40))+((x30*x38)))))));\neetrans[2]=((0.335)+((x9*(((((0.48)*x25))+(((0.48)*x31))))))+((x33*(((((0.48)*x28))+(((-0.48)*x27))))))+(((-0.405)*x31))+(((-0.405)*x25))+((x26*(((((0.79)*x28))+(((-0.79)*x27))))))+(((-0.09)*x27))+(((0.365)*x1))+((x11*((((x19*x40))+((x16*x38))))))+(((0.09)*x28)));\n}\n\nIKFAST_API int GetNumFreeParameters() { return 0; }\nIKFAST_API int* GetFreeParameters() { return NULL; }\nIKFAST_API int GetNumJoints() { return 6; }\n\nIKFAST_API int GetIkRealSize() { return sizeof(IkReal); }\n\nIKFAST_API int GetIkType() { return 0x67000001; }\n\nclass IKSolver {\npublic:\nIkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;\nunsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;\n\nIkReal j100, cj100, sj100;\nunsigned char _ij100[2], _nj100;\nbool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {\nj0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; \nfor(int dummyiter = 0; dummyiter < 1; ++dummyiter) {\n    solutions.Clear();\nr00 = eerot[0*3+0];\nr01 = eerot[0*3+1];\nr02 = eerot[0*3+2];\nr10 = eerot[1*3+0];\nr11 = eerot[1*3+1];\nr12 = eerot[1*3+2];\nr20 = eerot[2*3+0];\nr21 = eerot[2*3+1];\nr22 = eerot[2*3+2];\npx = eetrans[0]; py = eetrans[1]; pz = eetrans[2];\n\nnew_r00=r02;\nnew_r01=r01;\nnew_r02=((-1.0)*r00);\nnew_px=((((0.48)*r00))+(((0.79)*r02))+px);\nnew_r10=((-1.0)*r12);\nnew_r11=((-1.0)*r11);\nnew_r12=r10;\nnew_py=((((-0.79)*r12))+(((-1.0)*py))+(((-0.48)*r10)));\nnew_r20=((-1.0)*r22);\nnew_r21=((-1.0)*r21);\nnew_r22=r20;\nnew_pz=((0.335)+(((-0.79)*r22))+(((-1.0)*pz))+(((-0.48)*r20)));\nr00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;\nIkReal x59=((1.0)*px);\nIkReal x60=((1.0)*pz);\nIkReal x61=((1.0)*py);\npp=((px*px)+(py*py)+(pz*pz));\nnpx=(((px*r00))+((py*r10))+((pz*r20)));\nnpy=(((px*r01))+((py*r11))+((pz*r21)));\nnpz=(((px*r02))+((py*r12))+((pz*r22)));\nrxp0_0=((((-1.0)*r20*x61))+((pz*r10)));\nrxp0_1=(((px*r20))+(((-1.0)*r00*x60)));\nrxp0_2=((((-1.0)*r10*x59))+((py*r00)));\nrxp1_0=((((-1.0)*r21*x61))+((pz*r11)));\nrxp1_1=(((px*r21))+(((-1.0)*r01*x60)));\nrxp1_2=((((-1.0)*r11*x59))+((py*r01)));\nrxp2_0=(((pz*r12))+(((-1.0)*r22*x61)));\nrxp2_1=(((px*r22))+(((-1.0)*r02*x60)));\nrxp2_2=((((-1.0)*r12*x59))+((py*r02)));\n{\nIkReal j0eval[1];\nj0eval[0]=((IKabs(px))+(IKabs(py)));\nif( IKabs(j0eval[0]) < 0.0000010000000000  )\n{\ncontinue; // no branches [j0, j1, j2]\n\n} else\n{\n{\nIkReal j0array[2], cj0array[2], sj0array[2];\nbool j0valid[2]={false};\n_nj0 = 2;\nCheckValue<IkReal> x63 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);\nif(!x63.valid){\ncontinue;\n}\nIkReal x62=x63.value;\nj0array[0]=((-1.0)*x62);\nsj0array[0]=IKsin(j0array[0]);\ncj0array[0]=IKcos(j0array[0]);\nj0array[1]=((3.14159265358979)+(((-1.0)*x62)));\nsj0array[1]=IKsin(j0array[1]);\ncj0array[1]=IKcos(j0array[1]);\nif( j0array[0] > IKPI )\n{\n    j0array[0]-=IK2PI;\n}\nelse if( j0array[0] < -IKPI )\n{    j0array[0]+=IK2PI;\n}\nj0valid[0] = true;\nif( j0array[1] > IKPI )\n{\n    j0array[1]-=IK2PI;\n}\nelse if( j0array[1] < -IKPI )\n{    j0array[1]+=IK2PI;\n}\nj0valid[1] = true;\nfor(int ij0 = 0; ij0 < 2; ++ij0)\n{\nif( !j0valid[ij0] )\n{\n    continue;\n}\n_ij0[0] = ij0; _ij0[1] = -1;\nfor(int iij0 = ij0+1; iij0 < 2; ++iij0)\n{\nif( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )\n{\n    j0valid[iij0]=false; _ij0[1] = iij0; break; \n}\n}\nj0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];\n\n{\nIkReal j2array[2], cj2array[2], sj2array[2];\nbool j2valid[2]={false};\n_nj2 = 2;\nif( (((0.989642031502233)+(((-3.30183345233875)*pp))+(((0.495275017850813)*py*sj0))+(((0.495275017850813)*cj0*px)))) < -1-IKFAST_SINCOS_THRESH || (((0.989642031502233)+(((-3.30183345233875)*pp))+(((0.495275017850813)*py*sj0))+(((0.495275017850813)*cj0*px)))) > 1+IKFAST_SINCOS_THRESH )\n    continue;\nIkReal x64=IKasin(((0.989642031502233)+(((-3.30183345233875)*pp))+(((0.495275017850813)*py*sj0))+(((0.495275017850813)*cj0*px))));\nj2array[0]=((-2.92292370771585)+(((-1.0)*x64)));\nsj2array[0]=IKsin(j2array[0]);\ncj2array[0]=IKcos(j2array[0]);\nj2array[1]=((0.218668945873942)+x64);\nsj2array[1]=IKsin(j2array[1]);\ncj2array[1]=IKcos(j2array[1]);\nif( j2array[0] > IKPI )\n{\n    j2array[0]-=IK2PI;\n}\nelse if( j2array[0] < -IKPI )\n{    j2array[0]+=IK2PI;\n}\nj2valid[0] = true;\nif( j2array[1] > IKPI )\n{\n    j2array[1]-=IK2PI;\n}\nelse if( j2array[1] < -IKPI )\n{    j2array[1]+=IK2PI;\n}\nj2valid[1] = true;\nfor(int ij2 = 0; ij2 < 2; ++ij2)\n{\nif( !j2valid[ij2] )\n{\n    continue;\n}\n_ij2[0] = ij2; _ij2[1] = -1;\nfor(int iij2 = ij2+1; iij2 < 2; ++iij2)\n{\nif( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )\n{\n    j2valid[iij2]=false; _ij2[1] = iij2; break; \n}\n}\nj2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];\n\n{\nIkReal j1eval[2];\nIkReal x65=(pz*sj2);\nIkReal x66=(cj2*pz);\nIkReal x67=((13.3333333333333)*sj2);\nIkReal x68=(cj0*px);\nIkReal x69=(py*sj0);\nIkReal x70=((60.0)*cj2);\nIkReal x71=((0.09)*sj2);\nIkReal x72=((0.405)*cj2);\nj1eval[0]=(sj2+(((-54.0740740740741)*pz))+(((-1.0)*x67*x69))+(((-1.0)*x67*x68))+(((60.0)*x65))+(((-13.3333333333333)*x66))+(((4.5)*cj2))+(((-1.0)*x69*x70))+(((-1.0)*x68*x70)));\nj1eval[1]=IKsign(((((0.405)*x65))+(((0.00675)*sj2))+(((-0.365)*pz))+(((0.030375)*cj2))+(((-1.0)*x69*x72))+(((-1.0)*x69*x71))+(((-1.0)*x68*x72))+(((-1.0)*x68*x71))+(((-0.09)*x66))));\nif( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j1eval[3];\nIkReal x73=cj2*cj2;\nIkReal x74=(cj0*px);\nIkReal x75=((60.0)*sj2);\nIkReal x76=(cj2*pz);\nIkReal x77=(pz*sj2);\nIkReal x78=((13.3333333333333)*cj2);\nIkReal x79=(cj2*sj2);\nIkReal x80=(py*sj0);\nIkReal x81=((0.405)*sj2);\nIkReal x82=((0.09)*cj2);\nj1eval[0]=((4.05555555555556)+(((-54.0740740740741)*x80))+cj2+(((-4.5)*sj2))+(((-1.0)*x78*x80))+(((-1.0)*x74*x78))+(((60.0)*x76))+(((-54.0740740740741)*x74))+((x75*x80))+((x74*x75))+(((13.3333333333333)*x77)));\nj1eval[1]=IKsign(((0.027375)+(((-0.030375)*sj2))+(((-1.0)*x80*x82))+((x74*x81))+(((0.00675)*cj2))+(((-0.365)*x80))+(((-1.0)*x74*x82))+((x80*x81))+(((-0.365)*x74))+(((0.09)*x77))+(((0.405)*x76))));\nj1eval[2]=((IKabs(((0.03645)+((pz*x74))+(((-0.075)*pz))+((pz*x80))+(((0.155925)*x79))+(((-0.0729)*x73))+(((-0.147825)*cj2))+(((-0.03285)*sj2)))))+(IKabs(((-0.29725)+(((0.0729)*x79))+(pz*pz)+(((0.155925)*x73))+(((-0.0657)*cj2))+(((0.29565)*sj2))))));\nif( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal j1eval[2];\nIkReal x83=cj0*cj0;\nIkReal x84=py*py;\nIkReal x85=px*px;\nIkReal x86=pz*pz;\nIkReal x87=(py*sj0);\nIkReal x88=(cj0*px);\nIkReal x89=(x83*x84);\nIkReal x90=(x83*x85);\nIkReal x91=(x87*x88);\nj1eval[0]=((-1.0)+(((177.777777777778)*x89))+(((26.6666666666667)*x87))+(((26.6666666666667)*x88))+(((-177.777777777778)*x90))+(((-177.777777777778)*x84))+(((-177.777777777778)*x86))+(((-355.555555555556)*x91)));\nj1eval[1]=IKsign(((-0.005625)+(((0.15)*x88))+(((0.15)*x87))+(((-2.0)*x91))+x89+(((-1.0)*x86))+(((-1.0)*x84))+(((-1.0)*x90))));\nif( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )\n{\ncontinue; // no branches [j1]\n\n} else\n{\n{\nIkReal j1array[1], cj1array[1], sj1array[1];\nbool j1valid[1]={false};\n_nj1 = 1;\nIkReal x92=py*py;\nIkReal x93=cj0*cj0;\nIkReal x94=(cj0*px);\nIkReal x95=((0.405)*cj2);\nIkReal x96=((0.09)*sj2);\nIkReal x97=(py*sj0);\nIkReal x98=((0.405)*sj2);\nIkReal x99=((0.09)*cj2);\nCheckValue<IkReal> x100 = IKatan2WithCheck(IkReal(((0.027375)+(((-1.0)*pz*x96))+(((-1.0)*pz*x95))+(((-0.030375)*sj2))+(((-1.0)*x94*x99))+((x97*x98))+(((0.00675)*cj2))+(((-0.365)*x97))+(((-0.365)*x94))+(((-1.0)*x97*x99))+((x94*x98)))),((((-1.0)*x95*x97))+(((-1.0)*pz*x98))+(((0.00675)*sj2))+(((-1.0)*x94*x96))+(((-1.0)*x94*x95))+(((0.365)*pz))+((pz*x99))+(((0.030375)*cj2))+(((-1.0)*x96*x97))),IKFAST_ATAN2_MAGTHRESH);\nif(!x100.valid){\ncontinue;\n}\nCheckValue<IkReal> x101=IKPowWithIntegerCheck(IKsign(((-0.005625)+((x92*x93))+(((0.15)*x94))+(((0.15)*x97))+(((-1.0)*x93*(px*px)))+(((-1.0)*(pz*pz)))+(((-1.0)*x92))+(((-2.0)*x94*x97)))),-1);\nif(!x101.valid){\ncontinue;\n}\nj1array[0]=((-1.5707963267949)+(x100.value)+(((1.5707963267949)*(x101.value))));\nsj1array[0]=IKsin(j1array[0]);\ncj1array[0]=IKcos(j1array[0]);\nif( j1array[0] > IKPI )\n{\n    j1array[0]-=IK2PI;\n}\nelse if( j1array[0] < -IKPI )\n{    j1array[0]+=IK2PI;\n}\nj1valid[0] = true;\nfor(int ij1 = 0; ij1 < 1; ++ij1)\n{\nif( !j1valid[ij1] )\n{\n    continue;\n}\n_ij1[0] = ij1; _ij1[1] = -1;\nfor(int iij1 = ij1+1; iij1 < 1; ++iij1)\n{\nif( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )\n{\n    j1valid[iij1]=false; _ij1[1] = iij1; break; \n}\n}\nj1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];\n{\nIkReal evalcond[5];\nIkReal x102=IKsin(j1);\nIkReal x103=IKcos(j1);\nIkReal x104=(cj0*px);\nIkReal x105=((0.09)*cj2);\nIkReal x106=(py*sj0);\nIkReal x107=((0.09)*sj2);\nIkReal x108=((1.0)*pz);\nIkReal x109=((0.405)*sj2);\nIkReal x110=((0.405)*cj2);\nIkReal x111=((1.0)*x103);\nIkReal x112=(sj2*x103);\nIkReal x113=((0.73)*x102);\nevalcond[0]=((-0.365)+(((-0.075)*x102))+(((-1.0)*x105))+x109+((x102*x106))+((x102*x104))+(((-1.0)*x103*x108)));\nevalcond[1]=(x110+x107+(((-1.0)*x106*x111))+(((-1.0)*x102*x108))+(((0.075)*x103))+(((-1.0)*x104*x111)));\nevalcond[2]=((((-1.0)*x108))+((x102*x110))+((x102*x107))+((x103*x109))+(((-0.365)*x103))+(((-1.0)*x103*x105)));\nevalcond[3]=((0.033275)+(((-0.05475)*x102))+((x106*x113))+(((-1.0)*pp))+(((-0.73)*pz*x103))+((x104*x113))+(((0.15)*x104))+(((0.15)*x106)));\nevalcond[4]=((0.075)+(((0.365)*x102))+((x103*x110))+((x102*x105))+((x103*x107))+(((-1.0)*x102*x109))+(((-1.0)*x106))+(((-1.0)*x104)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j1array[1], cj1array[1], sj1array[1];\nbool j1valid[1]={false};\n_nj1 = 1;\nIkReal x475=cj2*cj2;\nIkReal x476=(cj0*px);\nIkReal x477=(cj2*sj2);\nIkReal x478=((0.405)*sj2);\nIkReal x479=(py*sj0);\nIkReal x480=((0.09)*cj2);\nCheckValue<IkReal> x481 = IKatan2WithCheck(IkReal(((-0.29725)+(pz*pz)+(((0.155925)*x475))+(((-0.0657)*cj2))+(((0.29565)*sj2))+(((0.0729)*x477)))),((0.03645)+(((-0.075)*pz))+(((-0.147825)*cj2))+((pz*x479))+((pz*x476))+(((0.155925)*x477))+(((-0.0729)*x475))+(((-0.03285)*sj2))),IKFAST_ATAN2_MAGTHRESH);\nif(!x481.valid){\ncontinue;\n}\nCheckValue<IkReal> x482=IKPowWithIntegerCheck(IKsign(((0.027375)+(((-1.0)*x476*x480))+(((0.09)*pz*sj2))+(((-0.030375)*sj2))+((x478*x479))+(((-0.365)*x476))+(((-0.365)*x479))+(((0.00675)*cj2))+(((-1.0)*x479*x480))+(((0.405)*cj2*pz))+((x476*x478)))),-1);\nif(!x482.valid){\ncontinue;\n}\nj1array[0]=((-1.5707963267949)+(x481.value)+(((1.5707963267949)*(x482.value))));\nsj1array[0]=IKsin(j1array[0]);\ncj1array[0]=IKcos(j1array[0]);\nif( j1array[0] > IKPI )\n{\n    j1array[0]-=IK2PI;\n}\nelse if( j1array[0] < -IKPI )\n{    j1array[0]+=IK2PI;\n}\nj1valid[0] = true;\nfor(int ij1 = 0; ij1 < 1; ++ij1)\n{\nif( !j1valid[ij1] )\n{\n    continue;\n}\n_ij1[0] = ij1; _ij1[1] = -1;\nfor(int iij1 = ij1+1; iij1 < 1; ++iij1)\n{\nif( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )\n{\n    j1valid[iij1]=false; _ij1[1] = iij1; break; \n}\n}\nj1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];\n{\nIkReal evalcond[5];\nIkReal x483=IKsin(j1);\nIkReal x484=IKcos(j1);\nIkReal x485=(cj0*px);\nIkReal x486=((0.09)*cj2);\nIkReal x487=(py*sj0);\nIkReal x488=((0.09)*sj2);\nIkReal x489=((1.0)*pz);\nIkReal x490=((0.405)*sj2);\nIkReal x491=((0.405)*cj2);\nIkReal x492=((1.0)*x484);\nIkReal x493=(sj2*x484);\nIkReal x494=((0.73)*x483);\nevalcond[0]=((-0.365)+(((-1.0)*x484*x489))+(((-1.0)*x486))+((x483*x487))+((x483*x485))+(((-0.075)*x483))+x490);\nevalcond[1]=((((-1.0)*x483*x489))+x488+x491+(((-1.0)*x487*x492))+(((-1.0)*x485*x492))+(((0.075)*x484)));\nevalcond[2]=((((-1.0)*x484*x486))+(((-1.0)*x489))+((x483*x488))+((x483*x491))+(((-0.365)*x484))+((x484*x490)));\nevalcond[3]=((0.033275)+(((-0.05475)*x483))+(((-1.0)*pp))+(((0.15)*x485))+(((0.15)*x487))+(((-0.73)*pz*x484))+((x485*x494))+((x487*x494)));\nevalcond[4]=((0.075)+((x484*x488))+((x483*x486))+(((-1.0)*x483*x490))+(((-1.0)*x485))+(((-1.0)*x487))+(((0.365)*x483))+((x484*x491)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j1array[1], cj1array[1], sj1array[1];\nbool j1valid[1]={false};\n_nj1 = 1;\nIkReal x495=cj2*cj2;\nIkReal x496=(cj2*sj2);\nIkReal x497=((0.405)*cj2);\nIkReal x498=(py*sj0);\nIkReal x499=(cj0*px);\nIkReal x500=((0.09)*sj2);\nIkReal x501=((1.0)*pz);\nCheckValue<IkReal> x502=IKPowWithIntegerCheck(IKsign(((((-1.0)*x499*x500))+(((0.00675)*sj2))+(((0.405)*pz*sj2))+(((-0.365)*pz))+(((-1.0)*x497*x498))+(((-1.0)*x497*x499))+(((-0.09)*cj2*pz))+(((0.030375)*cj2))+(((-1.0)*x498*x500)))),-1);\nif(!x502.valid){\ncontinue;\n}\nCheckValue<IkReal> x503 = IKatan2WithCheck(IkReal(((0.03645)+(((0.155925)*x496))+(((-1.0)*x499*x501))+(((-0.0729)*x495))+(((-0.147825)*cj2))+(((-0.03285)*sj2))+(((0.075)*pz))+(((-1.0)*x498*x501)))),((-0.0081)+(pz*pz)+(((-0.155925)*x495))+(((-0.0729)*x496))),IKFAST_ATAN2_MAGTHRESH);\nif(!x503.valid){\ncontinue;\n}\nj1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x502.value)))+(x503.value));\nsj1array[0]=IKsin(j1array[0]);\ncj1array[0]=IKcos(j1array[0]);\nif( j1array[0] > IKPI )\n{\n    j1array[0]-=IK2PI;\n}\nelse if( j1array[0] < -IKPI )\n{    j1array[0]+=IK2PI;\n}\nj1valid[0] = true;\nfor(int ij1 = 0; ij1 < 1; ++ij1)\n{\nif( !j1valid[ij1] )\n{\n    continue;\n}\n_ij1[0] = ij1; _ij1[1] = -1;\nfor(int iij1 = ij1+1; iij1 < 1; ++iij1)\n{\nif( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )\n{\n    j1valid[iij1]=false; _ij1[1] = iij1; break; \n}\n}\nj1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];\n{\nIkReal evalcond[5];\nIkReal x504=IKsin(j1);\nIkReal x505=IKcos(j1);\nIkReal x506=(cj0*px);\nIkReal x507=((0.09)*cj2);\nIkReal x508=(py*sj0);\nIkReal x509=((0.09)*sj2);\nIkReal x510=((1.0)*pz);\nIkReal x511=((0.405)*sj2);\nIkReal x512=((0.405)*cj2);\nIkReal x513=((1.0)*x505);\nIkReal x514=(sj2*x505);\nIkReal x515=((0.73)*x504);\nevalcond[0]=((-0.365)+(((-1.0)*x507))+x511+(((-1.0)*x505*x510))+((x504*x506))+((x504*x508))+(((-0.075)*x504)));\nevalcond[1]=((((-1.0)*x504*x510))+x509+x512+(((-1.0)*x506*x513))+(((-1.0)*x508*x513))+(((0.075)*x505)));\nevalcond[2]=((((-1.0)*x505*x507))+((x504*x512))+(((-0.365)*x505))+(((-1.0)*x510))+((x505*x511))+((x504*x509)));\nevalcond[3]=((0.033275)+(((-0.05475)*x504))+(((0.15)*x508))+(((0.15)*x506))+(((-0.73)*pz*x505))+(((-1.0)*pp))+((x506*x515))+((x508*x515)));\nevalcond[4]=((0.075)+(((-1.0)*x504*x511))+((x505*x509))+(((0.365)*x504))+(((-1.0)*x506))+(((-1.0)*x508))+((x505*x512))+((x504*x507)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n}\n}\n}\n}\n\n}\n\n}\n}\nreturn solutions.GetNumSolutions()>0;\n}\ninline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {\nfor(int rotationiter = 0; rotationiter < 1; ++rotationiter) {\nIkReal x114=((1.0)*cj0);\nIkReal x115=(r11*sj0);\nIkReal x116=(r10*sj0);\nIkReal x117=((1.0)*cj2);\nIkReal x118=(cj1*sj2);\nIkReal x119=(r12*sj0);\nIkReal x120=(((cj2*sj1))+x118);\nIkReal x121=((((-1.0)*cj1*x117))+((sj1*sj2)));\nIkReal x122=(sj0*x121);\nIkReal x123=(cj0*x120);\nIkReal x124=(cj0*x121);\nIkReal x125=((((-1.0)*sj1*x117))+(((-1.0)*x118)));\nnew_r00=(((r00*x123))+((r20*x121))+((x116*x120)));\nnew_r01=(((r21*x121))+((r01*x123))+((x115*x120)));\nnew_r02=(((r02*x123))+((r22*x121))+((x119*x120)));\nnew_r10=(((r00*sj0))+(((-1.0)*r10*x114)));\nnew_r11=(((r01*sj0))+(((-1.0)*r11*x114)));\nnew_r12=((((-1.0)*r12*x114))+((r02*sj0)));\nnew_r20=(((r00*x124))+((r20*x125))+((x116*x121)));\nnew_r21=(((r21*x125))+((r01*x124))+((x115*x121)));\nnew_r22=(((r02*x124))+((r22*x125))+((x119*x121)));\n{\nIkReal j4array[2], cj4array[2], sj4array[2];\nbool j4valid[2]={false};\n_nj4 = 2;\ncj4array[0]=new_r22;\nif( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j4valid[0] = j4valid[1] = true;\n    j4array[0] = IKacos(cj4array[0]);\n    sj4array[0] = IKsin(j4array[0]);\n    cj4array[1] = cj4array[0];\n    j4array[1] = -j4array[0];\n    sj4array[1] = -sj4array[0];\n}\nelse if( isnan(cj4array[0]) )\n{\n    // probably any value will work\n    j4valid[0] = true;\n    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;\n}\nfor(int ij4 = 0; ij4 < 2; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 2; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n\n{\nIkReal j3eval[2];\nIkReal x126=((1.0)*cj0);\nIkReal x127=(r11*sj0);\nIkReal x128=(r10*sj0);\nIkReal x129=((1.0)*cj2);\nIkReal x130=(cj1*sj2);\nIkReal x131=(r12*sj0);\nIkReal x132=(((cj2*sj1))+x130);\nIkReal x133=x121;\nIkReal x134=(sj0*x133);\nIkReal x135=(cj0*x132);\nIkReal x136=(cj0*x133);\nIkReal x137=x125;\nnew_r00=(((r00*x135))+((r20*x133))+((x128*x132)));\nnew_r01=(((x127*x132))+((r21*x133))+((r01*x135)));\nnew_r02=(((r02*x135))+((r22*x133))+((x131*x132)));\nnew_r10=(((r00*sj0))+(((-1.0)*r10*x126)));\nnew_r11=(((r01*sj0))+(((-1.0)*r11*x126)));\nnew_r12=((((-1.0)*r12*x126))+((r02*sj0)));\nnew_r20=(((r00*x136))+((r20*x137))+((x128*x133)));\nnew_r21=(((x127*x133))+((r21*x137))+((r01*x136)));\nnew_r22=(((r02*x136))+((r22*x137))+((x131*x133)));\nj3eval[0]=sj4;\nj3eval[1]=IKsign(sj4);\nif( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j3eval[1];\nIkReal x138=((1.0)*cj0);\nIkReal x139=(r11*sj0);\nIkReal x140=(r10*sj0);\nIkReal x141=((1.0)*cj2);\nIkReal x142=(cj1*sj2);\nIkReal x143=(r12*sj0);\nIkReal x144=(((cj2*sj1))+x142);\nIkReal x145=x121;\nIkReal x146=(sj0*x145);\nIkReal x147=(cj0*x144);\nIkReal x148=(cj0*x145);\nIkReal x149=x125;\nnew_r00=(((x140*x144))+((r20*x145))+((r00*x147)));\nnew_r01=(((r01*x147))+((r21*x145))+((x139*x144)));\nnew_r02=(((r02*x147))+((r22*x145))+((x143*x144)));\nnew_r10=(((r00*sj0))+(((-1.0)*r10*x138)));\nnew_r11=(((r01*sj0))+(((-1.0)*r11*x138)));\nnew_r12=((((-1.0)*r12*x138))+((r02*sj0)));\nnew_r20=(((x140*x145))+((r20*x149))+((r00*x148)));\nnew_r21=(((r01*x148))+((r21*x149))+((x139*x145)));\nnew_r22=(((r02*x148))+((r22*x149))+((x143*x145)));\nj3eval[0]=sj4;\nif( IKabs(j3eval[0]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[6];\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));\nevalcond[1]=((-1.0)+new_r22);\nevalcond[2]=new_r20;\nevalcond[3]=new_r02;\nevalcond[4]=new_r12;\nevalcond[5]=new_r21;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j3array[2], cj3array[2], sj3array[2];\nbool j3valid[2]={false};\n_nj3 = 2;\nCheckValue<IkReal> x151 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);\nif(!x151.valid){\ncontinue;\n}\nIkReal x150=x151.value;\nj3array[0]=((-1.0)*x150);\nsj3array[0]=IKsin(j3array[0]);\ncj3array[0]=IKcos(j3array[0]);\nj3array[1]=((3.14159265358979)+(((-1.0)*x150)));\nsj3array[1]=IKsin(j3array[1]);\ncj3array[1]=IKcos(j3array[1]);\nif( j3array[0] > IKPI )\n{\n    j3array[0]-=IK2PI;\n}\nelse if( j3array[0] < -IKPI )\n{    j3array[0]+=IK2PI;\n}\nj3valid[0] = true;\nif( j3array[1] > IKPI )\n{\n    j3array[1]-=IK2PI;\n}\nelse if( j3array[1] < -IKPI )\n{    j3array[1]+=IK2PI;\n}\nj3valid[1] = true;\nfor(int ij3 = 0; ij3 < 2; ++ij3)\n{\nif( !j3valid[ij3] )\n{\n    continue;\n}\n_ij3[0] = ij3; _ij3[1] = -1;\nfor(int iij3 = ij3+1; iij3 < 2; ++iij3)\n{\nif( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )\n{\n    j3valid[iij3]=false; _ij3[1] = iij3; break; \n}\n}\nj3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];\n{\nIkReal evalcond[1];\nevalcond[0]=((((-1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x152=((1.0)*new_r01);\nif( IKabs(((((-1.0)*cj3*x152))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x152))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x152))+(((-1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x152))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((((-1.0)*cj3*x152))+(((-1.0)*new_r00*sj3))), ((((-1.0)*sj3*x152))+((cj3*new_r00))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x153=IKsin(j5);\nIkReal x154=IKcos(j5);\nIkReal x155=((1.0)*sj3);\nIkReal x156=((1.0)*x154);\nIkReal x157=(sj3*x153);\nIkReal x158=((1.0)*x153);\nIkReal x159=(cj3*x156);\nevalcond[0]=(((new_r11*sj3))+x153+((cj3*new_r01)));\nevalcond[1]=(((cj3*x153))+new_r01+((sj3*x154)));\nevalcond[2]=((((-1.0)*x156))+((new_r10*sj3))+((cj3*new_r00)));\nevalcond[3]=((((-1.0)*x158))+((cj3*new_r10))+(((-1.0)*new_r00*x155)));\nevalcond[4]=((((-1.0)*x156))+((cj3*new_r11))+(((-1.0)*new_r01*x155)));\nevalcond[5]=((((-1.0)*x159))+x157+new_r00);\nevalcond[6]=((((-1.0)*x159))+x157+new_r11);\nevalcond[7]=((((-1.0)*x154*x155))+(((-1.0)*cj3*x158))+new_r10);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));\nevalcond[1]=((1.0)+new_r22);\nevalcond[2]=new_r20;\nevalcond[3]=new_r02;\nevalcond[4]=new_r12;\nevalcond[5]=new_r21;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j3array[2], cj3array[2], sj3array[2];\nbool j3valid[2]={false};\n_nj3 = 2;\nCheckValue<IkReal> x161 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);\nif(!x161.valid){\ncontinue;\n}\nIkReal x160=x161.value;\nj3array[0]=((-1.0)*x160);\nsj3array[0]=IKsin(j3array[0]);\ncj3array[0]=IKcos(j3array[0]);\nj3array[1]=((3.14159265358979)+(((-1.0)*x160)));\nsj3array[1]=IKsin(j3array[1]);\ncj3array[1]=IKcos(j3array[1]);\nif( j3array[0] > IKPI )\n{\n    j3array[0]-=IK2PI;\n}\nelse if( j3array[0] < -IKPI )\n{    j3array[0]+=IK2PI;\n}\nj3valid[0] = true;\nif( j3array[1] > IKPI )\n{\n    j3array[1]-=IK2PI;\n}\nelse if( j3array[1] < -IKPI )\n{    j3array[1]+=IK2PI;\n}\nj3valid[1] = true;\nfor(int ij3 = 0; ij3 < 2; ++ij3)\n{\nif( !j3valid[ij3] )\n{\n    continue;\n}\n_ij3[0] = ij3; _ij3[1] = -1;\nfor(int iij3 = ij3+1; iij3 < 2; ++iij3)\n{\nif( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )\n{\n    j3valid[iij3]=false; _ij3[1] = iij3; break; \n}\n}\nj3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];\n{\nIkReal evalcond[1];\nevalcond[0]=((((-1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x162=((1.0)*sj3);\nif( IKabs(((((-1.0)*new_r00*x162))+((cj3*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x162)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x162))+((cj3*new_r01))))+IKsqr(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x162))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((((-1.0)*new_r00*x162))+((cj3*new_r01))), ((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x162))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x163=IKsin(j5);\nIkReal x164=IKcos(j5);\nIkReal x165=((1.0)*sj3);\nIkReal x166=((1.0)*x163);\nIkReal x167=(sj3*x164);\nIkReal x168=((1.0)*x164);\nIkReal x169=(cj3*x166);\nevalcond[0]=(((new_r10*sj3))+x164+((cj3*new_r00)));\nevalcond[1]=((((-1.0)*x166))+((new_r11*sj3))+((cj3*new_r01)));\nevalcond[2]=(((sj3*x163))+((cj3*x164))+new_r00);\nevalcond[3]=((((-1.0)*new_r00*x165))+(((-1.0)*x166))+((cj3*new_r10)));\nevalcond[4]=((((-1.0)*x168))+((cj3*new_r11))+(((-1.0)*new_r01*x165)));\nevalcond[5]=((((-1.0)*x169))+x167+new_r01);\nevalcond[6]=((((-1.0)*x169))+x167+new_r10);\nevalcond[7]=((((-1.0)*x163*x165))+(((-1.0)*cj3*x168))+new_r11);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j3, j5]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j3array[1], cj3array[1], sj3array[1];\nbool j3valid[1]={false};\n_nj3 = 1;\nCheckValue<IkReal> x171=IKPowWithIntegerCheck(sj4,-1);\nif(!x171.valid){\ncontinue;\n}\nIkReal x170=x171.value;\nCheckValue<IkReal> x172=IKPowWithIntegerCheck(new_r12,-1);\nif(!x172.valid){\ncontinue;\n}\nif( IKabs((x170*(x172.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r02*new_r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x170)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x170*(x172.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r02*new_r02)))))))+IKsqr((new_r02*x170))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj3array[0]=IKatan2((x170*(x172.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r02*new_r02)))))), (new_r02*x170));\nsj3array[0]=IKsin(j3array[0]);\ncj3array[0]=IKcos(j3array[0]);\nif( j3array[0] > IKPI )\n{\n    j3array[0]-=IK2PI;\n}\nelse if( j3array[0] < -IKPI )\n{    j3array[0]+=IK2PI;\n}\nj3valid[0] = true;\nfor(int ij3 = 0; ij3 < 1; ++ij3)\n{\nif( !j3valid[ij3] )\n{\n    continue;\n}\n_ij3[0] = ij3; _ij3[1] = -1;\nfor(int iij3 = ij3+1; iij3 < 1; ++iij3)\n{\nif( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )\n{\n    j3valid[iij3]=false; _ij3[1] = iij3; break; \n}\n}\nj3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];\n{\nIkReal evalcond[8];\nIkReal x173=IKcos(j3);\nIkReal x174=IKsin(j3);\nIkReal x175=((1.0)*sj4);\nIkReal x176=((1.0)*cj4);\nIkReal x177=(new_r12*x174);\nIkReal x178=(new_r02*x173);\nevalcond[0]=(new_r02+(((-1.0)*x173*x175)));\nevalcond[1]=((((-1.0)*x174*x175))+new_r12);\nevalcond[2]=((((-1.0)*new_r02*x174))+((new_r12*x173)));\nevalcond[3]=((((-1.0)*x175))+x178+x177);\nevalcond[4]=(((new_r22*sj4))+(((-1.0)*x176*x177))+(((-1.0)*x176*x178)));\nevalcond[5]=((((-1.0)*new_r20*x176))+(((-1.0)*new_r10*x174*x175))+(((-1.0)*new_r00*x173*x175)));\nevalcond[6]=((((-1.0)*new_r11*x174*x175))+(((-1.0)*new_r21*x176))+(((-1.0)*new_r01*x173*x175)));\nevalcond[7]=((1.0)+(((-1.0)*x175*x177))+(((-1.0)*x175*x178))+(((-1.0)*new_r22*x176)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nIkReal j5eval[2];\nIkReal x179=((1.0)*cj0);\nIkReal x180=(r11*sj0);\nIkReal x181=(r10*sj0);\nIkReal x182=((1.0)*cj2);\nIkReal x183=(cj1*sj2);\nIkReal x184=(r12*sj0);\nIkReal x185=(((cj2*sj1))+x183);\nIkReal x186=x121;\nIkReal x187=(sj0*x186);\nIkReal x188=(cj0*x185);\nIkReal x189=(cj0*x186);\nIkReal x190=x125;\nnew_r00=(((r00*x188))+((r20*x186))+((x181*x185)));\nnew_r01=(((x180*x185))+((r01*x188))+((r21*x186)));\nnew_r02=(((x184*x185))+((r02*x188))+((r22*x186)));\nnew_r10=(((r00*sj0))+(((-1.0)*r10*x179)));\nnew_r11=((((-1.0)*r11*x179))+((r01*sj0)));\nnew_r12=(((r02*sj0))+(((-1.0)*r12*x179)));\nnew_r20=(((r00*x189))+((r20*x190))+((x181*x186)));\nnew_r21=(((x180*x186))+((r01*x189))+((r21*x190)));\nnew_r22=(((x184*x186))+((r02*x189))+((r22*x190)));\nj5eval[0]=sj4;\nj5eval[1]=IKsign(sj4);\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j5eval[2];\nIkReal x191=((1.0)*cj0);\nIkReal x192=(r11*sj0);\nIkReal x193=(r10*sj0);\nIkReal x194=((1.0)*cj2);\nIkReal x195=(cj1*sj2);\nIkReal x196=(r12*sj0);\nIkReal x197=(((cj2*sj1))+x195);\nIkReal x198=x121;\nIkReal x199=(sj0*x198);\nIkReal x200=(cj0*x197);\nIkReal x201=(cj0*x198);\nIkReal x202=x125;\nnew_r00=(((x193*x197))+((r20*x198))+((r00*x200)));\nnew_r01=(((r01*x200))+((x192*x197))+((r21*x198)));\nnew_r02=(((x196*x197))+((r22*x198))+((r02*x200)));\nnew_r10=(((r00*sj0))+(((-1.0)*r10*x191)));\nnew_r11=(((r01*sj0))+(((-1.0)*r11*x191)));\nnew_r12=((((-1.0)*r12*x191))+((r02*sj0)));\nnew_r20=(((x193*x198))+((r00*x201))+((r20*x202)));\nnew_r21=(((r01*x201))+((x192*x198))+((r21*x202)));\nnew_r22=(((r22*x202))+((x196*x198))+((r02*x201)));\nj5eval[0]=sj3;\nj5eval[1]=sj4;\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j5eval[3];\nIkReal x203=((1.0)*cj0);\nIkReal x204=(r11*sj0);\nIkReal x205=(r10*sj0);\nIkReal x206=((1.0)*cj2);\nIkReal x207=(cj1*sj2);\nIkReal x208=(r12*sj0);\nIkReal x209=(((cj2*sj1))+x207);\nIkReal x210=x121;\nIkReal x211=(sj0*x210);\nIkReal x212=(cj0*x209);\nIkReal x213=(cj0*x210);\nIkReal x214=x125;\nnew_r00=(((x205*x209))+((r00*x212))+((r20*x210)));\nnew_r01=(((r21*x210))+((x204*x209))+((r01*x212)));\nnew_r02=(((r02*x212))+((r22*x210))+((x208*x209)));\nnew_r10=(((r00*sj0))+(((-1.0)*r10*x203)));\nnew_r11=((((-1.0)*r11*x203))+((r01*sj0)));\nnew_r12=((((-1.0)*r12*x203))+((r02*sj0)));\nnew_r20=(((x205*x210))+((r00*x213))+((r20*x214)));\nnew_r21=(((x204*x210))+((r21*x214))+((r01*x213)));\nnew_r22=(((x208*x210))+((r02*x213))+((r22*x214)));\nj5eval[0]=cj3;\nj5eval[1]=cj4;\nj5eval[2]=sj4;\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[12];\nbool bgotonextstatement = true;\ndo\n{\nIkReal x215=(new_r22+(((-1.0)*cj4)));\nIkReal x216=((((-1.0)*sj4))+new_r12);\nIkReal x217=((1.0)*cj4);\nIkReal x218=((1.0)*sj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));\nevalcond[1]=x215;\nevalcond[2]=x215;\nevalcond[3]=new_r02;\nevalcond[4]=x216;\nevalcond[5]=x216;\nevalcond[6]=((((-1.0)*new_r12*x217))+((new_r22*sj4)));\nevalcond[7]=((((-1.0)*new_r10*x218))+(((-1.0)*new_r20*x217)));\nevalcond[8]=((((-1.0)*new_r11*x218))+(((-1.0)*new_r21*x217)));\nevalcond[9]=((1.0)+(((-1.0)*new_r12*x218))+(((-1.0)*new_r22*x217)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x219 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);\nif(!x219.valid){\ncontinue;\n}\nCheckValue<IkReal> x220=IKPowWithIntegerCheck(IKsign(new_r12),-1);\nif(!x220.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(x219.value)+(((1.5707963267949)*(x220.value))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x221=IKsin(j5);\nIkReal x222=IKcos(j5);\nIkReal x223=((1.0)*new_r22);\nIkReal x224=((1.0)*x221);\nIkReal x225=((1.0)*x222);\nevalcond[0]=(((new_r12*x222))+new_r20);\nevalcond[1]=(((new_r22*x221))+new_r11);\nevalcond[2]=(new_r21+(((-1.0)*new_r12*x224)));\nevalcond[3]=((((-1.0)*x222*x223))+new_r10);\nevalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x224)));\nevalcond[5]=((((-1.0)*new_r01))+(((-1.0)*x225)));\nevalcond[6]=((((-1.0)*new_r10*x223))+((new_r12*new_r20))+x222);\nevalcond[7]=((((-1.0)*new_r11*x223))+((new_r12*new_r21))+(((-1.0)*x224)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x226=(new_r22+(((-1.0)*cj4)));\nIkReal x227=((1.0)*cj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));\nevalcond[1]=x226;\nevalcond[2]=x226;\nevalcond[3]=new_r02;\nevalcond[4]=(sj4+new_r12);\nevalcond[5]=((((-1.0)*sj4))+(((-1.0)*new_r12)));\nevalcond[6]=(((cj4*new_r12))+((new_r22*sj4)));\nevalcond[7]=(((new_r10*sj4))+(((-1.0)*new_r20*x227)));\nevalcond[8]=(((new_r11*sj4))+(((-1.0)*new_r21*x227)));\nevalcond[9]=((1.0)+((new_r12*sj4))+(((-1.0)*new_r22*x227)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(new_r00, new_r01);\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x228=IKsin(j5);\nIkReal x229=IKcos(j5);\nIkReal x230=((1.0)*new_r12);\nIkReal x231=((1.0)*x228);\nIkReal x232=((1.0)*x229);\nevalcond[0]=(((new_r12*x228))+new_r21);\nevalcond[1]=((((-1.0)*x231))+new_r00);\nevalcond[2]=((((-1.0)*x232))+new_r01);\nevalcond[3]=(new_r20+(((-1.0)*x229*x230)));\nevalcond[4]=(((new_r22*x228))+(((-1.0)*new_r11)));\nevalcond[5]=((((-1.0)*new_r22*x232))+(((-1.0)*new_r10)));\nevalcond[6]=((((-1.0)*new_r20*x230))+x229+((new_r10*new_r22)));\nevalcond[7]=((((-1.0)*new_r21*x230))+(((-1.0)*x231))+((new_r11*new_r22)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x233=(new_r12*sj3);\nIkReal x234=(new_r11*sj3);\nIkReal x235=((1.0)*sj3);\nIkReal x236=((1.0)*cj3);\nIkReal x237=((((-1.0)*new_r02*x235))+((cj3*new_r12)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));\nevalcond[1]=new_r22;\nevalcond[2]=((((-1.0)*x236))+new_r02);\nevalcond[3]=((((-1.0)*x235))+new_r12);\nevalcond[4]=x237;\nevalcond[5]=x237;\nevalcond[6]=((-1.0)+x233+((cj3*new_r02)));\nevalcond[7]=(x234+((cj3*new_r01)));\nevalcond[8]=(((new_r10*sj3))+((cj3*new_r00)));\nevalcond[9]=((((-1.0)*new_r10*x235))+(((-1.0)*new_r00*x236)));\nevalcond[10]=((((-1.0)*new_r01*x236))+(((-1.0)*x234)));\nevalcond[11]=((1.0)+(((-1.0)*new_r02*x236))+(((-1.0)*x233)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(new_r21, ((-1.0)*new_r20));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x238=IKcos(j5);\nIkReal x239=IKsin(j5);\nIkReal x240=((1.0)*new_r12);\nIkReal x241=((1.0)*x239);\nIkReal x242=((1.0)*x238);\nevalcond[0]=(x238+new_r20);\nevalcond[1]=((((-1.0)*x241))+new_r21);\nevalcond[2]=(((new_r12*x238))+new_r01);\nevalcond[3]=(((new_r12*x239))+new_r00);\nevalcond[4]=((((-1.0)*new_r02*x242))+new_r11);\nevalcond[5]=((((-1.0)*new_r02*x241))+new_r10);\nevalcond[6]=((((-1.0)*new_r00*x240))+((new_r02*new_r10))+(((-1.0)*x241)));\nevalcond[7]=((((-1.0)*new_r01*x240))+((new_r02*new_r11))+(((-1.0)*x242)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x243=((((-1.0)*new_r02*sj3))+((cj3*new_r12)));\nIkReal x244=(((new_r10*sj3))+((cj3*new_r00)));\nIkReal x245=(((new_r11*sj3))+((cj3*new_r01)));\nIkReal x246=((1.0)+((new_r12*sj3))+((cj3*new_r02)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));\nevalcond[1]=new_r22;\nevalcond[2]=(cj3+new_r02);\nevalcond[3]=(sj3+new_r12);\nevalcond[4]=x243;\nevalcond[5]=x243;\nevalcond[6]=x246;\nevalcond[7]=x245;\nevalcond[8]=x244;\nevalcond[9]=x244;\nevalcond[10]=x245;\nevalcond[11]=x246;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((-1.0)*new_r21), new_r20);\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x247=IKcos(j5);\nIkReal x248=IKsin(j5);\nIkReal x249=((1.0)*new_r02);\nIkReal x250=((1.0)*x247);\nIkReal x251=((1.0)*x248);\nevalcond[0]=(x248+new_r21);\nevalcond[1]=(new_r20+(((-1.0)*x250)));\nevalcond[2]=(new_r11+((new_r02*x247)));\nevalcond[3]=(new_r10+((new_r02*x248)));\nevalcond[4]=(new_r01+(((-1.0)*new_r12*x250)));\nevalcond[5]=(new_r00+(((-1.0)*new_r12*x251)));\nevalcond[6]=(((new_r00*new_r12))+(((-1.0)*new_r10*x249))+(((-1.0)*x251)));\nevalcond[7]=(((new_r01*new_r12))+(((-1.0)*new_r11*x249))+(((-1.0)*x250)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x252=(new_r12*sj3);\nIkReal x253=((1.0)*new_r02);\nIkReal x254=((((-1.0)*sj3*x253))+((cj3*new_r12)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));\nevalcond[1]=((-1.0)+new_r22);\nevalcond[2]=new_r20;\nevalcond[3]=new_r02;\nevalcond[4]=new_r12;\nevalcond[5]=new_r21;\nevalcond[6]=x254;\nevalcond[7]=x254;\nevalcond[8]=(x252+((cj3*new_r02)));\nevalcond[9]=((((-1.0)*cj3*x253))+(((-1.0)*x252)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x255=((1.0)*new_r01);\nif( IKabs(((((-1.0)*cj3*x255))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x255))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x255))+(((-1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x255))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((((-1.0)*cj3*x255))+(((-1.0)*new_r00*sj3))), ((((-1.0)*sj3*x255))+((cj3*new_r00))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x256=IKsin(j5);\nIkReal x257=IKcos(j5);\nIkReal x258=((1.0)*sj3);\nIkReal x259=((1.0)*x257);\nIkReal x260=(sj3*x256);\nIkReal x261=((1.0)*x256);\nIkReal x262=(cj3*x259);\nevalcond[0]=(((new_r11*sj3))+x256+((cj3*new_r01)));\nevalcond[1]=(((cj3*x256))+((sj3*x257))+new_r01);\nevalcond[2]=(((new_r10*sj3))+((cj3*new_r00))+(((-1.0)*x259)));\nevalcond[3]=(((cj3*new_r10))+(((-1.0)*x261))+(((-1.0)*new_r00*x258)));\nevalcond[4]=((((-1.0)*new_r01*x258))+((cj3*new_r11))+(((-1.0)*x259)));\nevalcond[5]=(x260+new_r00+(((-1.0)*x262)));\nevalcond[6]=(x260+new_r11+(((-1.0)*x262)));\nevalcond[7]=((((-1.0)*x257*x258))+(((-1.0)*cj3*x261))+new_r10);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x263=((((-1.0)*new_r02*sj3))+((cj3*new_r12)));\nIkReal x264=(((new_r12*sj3))+((cj3*new_r02)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));\nevalcond[1]=((1.0)+new_r22);\nevalcond[2]=new_r20;\nevalcond[3]=new_r02;\nevalcond[4]=new_r12;\nevalcond[5]=new_r21;\nevalcond[6]=x263;\nevalcond[7]=x263;\nevalcond[8]=x264;\nevalcond[9]=x264;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x265=((1.0)*sj3);\nif( IKabs(((((-1.0)*new_r00*x265))+((cj3*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x265))+(((-1.0)*cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x265))+((cj3*new_r01))))+IKsqr(((((-1.0)*new_r01*x265))+(((-1.0)*cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((((-1.0)*new_r00*x265))+((cj3*new_r01))), ((((-1.0)*new_r01*x265))+(((-1.0)*cj3*new_r00))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x266=IKsin(j5);\nIkReal x267=IKcos(j5);\nIkReal x268=((1.0)*sj3);\nIkReal x269=((1.0)*x266);\nIkReal x270=(sj3*x267);\nIkReal x271=((1.0)*x267);\nIkReal x272=(cj3*x269);\nevalcond[0]=(((new_r10*sj3))+x267+((cj3*new_r00)));\nevalcond[1]=(((new_r11*sj3))+((cj3*new_r01))+(((-1.0)*x269)));\nevalcond[2]=(((sj3*x266))+new_r00+((cj3*x267)));\nevalcond[3]=((((-1.0)*new_r00*x268))+((cj3*new_r10))+(((-1.0)*x269)));\nevalcond[4]=((((-1.0)*new_r01*x268))+((cj3*new_r11))+(((-1.0)*x271)));\nevalcond[5]=(x270+(((-1.0)*x272))+new_r01);\nevalcond[6]=(x270+(((-1.0)*x272))+new_r10);\nevalcond[7]=((((-1.0)*cj3*x271))+new_r11+(((-1.0)*x266*x268)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x273=(new_r22+(((-1.0)*cj4)));\nIkReal x274=((((-1.0)*sj4))+new_r02);\nIkReal x275=((1.0)*cj4);\nIkReal x276=((1.0)*sj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));\nevalcond[1]=x273;\nevalcond[2]=x273;\nevalcond[3]=x274;\nevalcond[4]=new_r12;\nevalcond[5]=x274;\nevalcond[6]=(((new_r22*sj4))+(((-1.0)*new_r02*x275)));\nevalcond[7]=((((-1.0)*new_r00*x276))+(((-1.0)*new_r20*x275)));\nevalcond[8]=((((-1.0)*new_r01*x276))+(((-1.0)*new_r21*x275)));\nevalcond[9]=((1.0)+(((-1.0)*new_r22*x275))+(((-1.0)*new_r02*x276)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(new_r10, new_r11);\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x277=IKcos(j5);\nIkReal x278=IKsin(j5);\nIkReal x279=((1.0)*new_r22);\nIkReal x280=((1.0)*x278);\nevalcond[0]=(new_r20+((new_r02*x277)));\nevalcond[1]=((((-1.0)*x280))+new_r10);\nevalcond[2]=((((-1.0)*x277))+new_r11);\nevalcond[3]=(((new_r22*x278))+new_r01);\nevalcond[4]=((((-1.0)*new_r02*x280))+new_r21);\nevalcond[5]=((((-1.0)*x277*x279))+new_r00);\nevalcond[6]=((((-1.0)*new_r00*x279))+x277+((new_r02*new_r20)));\nevalcond[7]=((((-1.0)*new_r01*x279))+(((-1.0)*x280))+((new_r02*new_r21)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x281=(new_r22+(((-1.0)*cj4)));\nIkReal x282=((1.0)*cj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));\nevalcond[1]=x281;\nevalcond[2]=x281;\nevalcond[3]=(sj4+new_r02);\nevalcond[4]=new_r12;\nevalcond[5]=((((-1.0)*sj4))+(((-1.0)*new_r02)));\nevalcond[6]=(((cj4*new_r02))+((new_r22*sj4)));\nevalcond[7]=(((new_r00*sj4))+(((-1.0)*new_r20*x282)));\nevalcond[8]=(((new_r01*sj4))+(((-1.0)*new_r21*x282)));\nevalcond[9]=((1.0)+((new_r02*sj4))+(((-1.0)*new_r22*x282)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x283 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);\nif(!x283.valid){\ncontinue;\n}\nCheckValue<IkReal> x284=IKPowWithIntegerCheck(IKsign(new_r02),-1);\nif(!x284.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(x283.value)+(((1.5707963267949)*(x284.value))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x285=IKsin(j5);\nIkReal x286=IKcos(j5);\nIkReal x287=((1.0)*new_r02);\nIkReal x288=((1.0)*x285);\nIkReal x289=((1.0)*x286);\nevalcond[0]=(((new_r02*x285))+new_r21);\nevalcond[1]=(new_r20+(((-1.0)*x286*x287)));\nevalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x288)));\nevalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x289)));\nevalcond[4]=((((-1.0)*new_r01))+((new_r22*x285)));\nevalcond[5]=((((-1.0)*new_r22*x289))+(((-1.0)*new_r00)));\nevalcond[6]=(((new_r00*new_r22))+x286+(((-1.0)*new_r20*x287)));\nevalcond[7]=(((new_r01*new_r22))+(((-1.0)*x288))+(((-1.0)*new_r21*x287)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j5]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x291=IKPowWithIntegerCheck(sj4,-1);\nif(!x291.valid){\ncontinue;\n}\nIkReal x290=x291.value;\nCheckValue<IkReal> x292=IKPowWithIntegerCheck(cj3,-1);\nif(!x292.valid){\ncontinue;\n}\nCheckValue<IkReal> x293=IKPowWithIntegerCheck(cj4,-1);\nif(!x293.valid){\ncontinue;\n}\nif( IKabs((x290*(x292.value)*(x293.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x290)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x290*(x292.value)*(x293.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4))))))+IKsqr(((-1.0)*new_r20*x290))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2((x290*(x292.value)*(x293.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4))))), ((-1.0)*new_r20*x290));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[12];\nIkReal x294=IKsin(j5);\nIkReal x295=IKcos(j5);\nIkReal x296=(cj3*new_r00);\nIkReal x297=(cj3*cj4);\nIkReal x298=((1.0)*sj3);\nIkReal x299=((1.0)*x294);\nIkReal x300=(sj3*x294);\nIkReal x301=((1.0)*x295);\nevalcond[0]=(((sj4*x295))+new_r20);\nevalcond[1]=(new_r21+(((-1.0)*sj4*x299)));\nevalcond[2]=(((new_r11*sj3))+((cj4*x294))+((cj3*new_r01)));\nevalcond[3]=((((-1.0)*x299))+((cj3*new_r10))+(((-1.0)*new_r00*x298)));\nevalcond[4]=((((-1.0)*new_r01*x298))+((cj3*new_r11))+(((-1.0)*x301)));\nevalcond[5]=(((x294*x297))+new_r01+((sj3*x295)));\nevalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x301))+x296);\nevalcond[7]=((((-1.0)*x297*x301))+x300+new_r00);\nevalcond[8]=((((-1.0)*cj3*x301))+new_r11+((cj4*x300)));\nevalcond[9]=((((-1.0)*cj4*x295*x298))+(((-1.0)*cj3*x299))+new_r10);\nevalcond[10]=(((new_r20*sj4))+(((-1.0)*cj4*x296))+(((-1.0)*cj4*new_r10*x298))+x295);\nevalcond[11]=((((-1.0)*new_r01*x297))+(((-1.0)*x299))+(((-1.0)*cj4*new_r11*x298))+((new_r21*sj4)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x303=IKPowWithIntegerCheck(sj4,-1);\nif(!x303.valid){\ncontinue;\n}\nIkReal x302=x303.value;\nCheckValue<IkReal> x304=IKPowWithIntegerCheck(sj3,-1);\nif(!x304.valid){\ncontinue;\n}\nif( IKabs((x302*(x304.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x302)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x302*(x304.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))))+IKsqr(((-1.0)*new_r20*x302))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2((x302*(x304.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))), ((-1.0)*new_r20*x302));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[12];\nIkReal x305=IKsin(j5);\nIkReal x306=IKcos(j5);\nIkReal x307=(cj3*new_r00);\nIkReal x308=(cj3*cj4);\nIkReal x309=((1.0)*sj3);\nIkReal x310=((1.0)*x305);\nIkReal x311=(sj3*x305);\nIkReal x312=((1.0)*x306);\nevalcond[0]=(((sj4*x306))+new_r20);\nevalcond[1]=((((-1.0)*sj4*x310))+new_r21);\nevalcond[2]=(((new_r11*sj3))+((cj3*new_r01))+((cj4*x305)));\nevalcond[3]=((((-1.0)*x310))+((cj3*new_r10))+(((-1.0)*new_r00*x309)));\nevalcond[4]=((((-1.0)*x312))+(((-1.0)*new_r01*x309))+((cj3*new_r11)));\nevalcond[5]=(((sj3*x306))+((x305*x308))+new_r01);\nevalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x312))+x307);\nevalcond[7]=((((-1.0)*x308*x312))+x311+new_r00);\nevalcond[8]=(((cj4*x311))+new_r11+(((-1.0)*cj3*x312)));\nevalcond[9]=(new_r10+(((-1.0)*cj4*x306*x309))+(((-1.0)*cj3*x310)));\nevalcond[10]=(((new_r20*sj4))+x306+(((-1.0)*cj4*x307))+(((-1.0)*cj4*new_r10*x309)));\nevalcond[11]=((((-1.0)*new_r01*x308))+(((-1.0)*cj4*new_r11*x309))+(((-1.0)*x310))+((new_r21*sj4)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x313=IKPowWithIntegerCheck(IKsign(sj4),-1);\nif(!x313.valid){\ncontinue;\n}\nCheckValue<IkReal> x314 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);\nif(!x314.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x313.value)))+(x314.value));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[12];\nIkReal x315=IKsin(j5);\nIkReal x316=IKcos(j5);\nIkReal x317=(cj3*new_r00);\nIkReal x318=(cj3*cj4);\nIkReal x319=((1.0)*sj3);\nIkReal x320=((1.0)*x315);\nIkReal x321=(sj3*x315);\nIkReal x322=((1.0)*x316);\nevalcond[0]=(((sj4*x316))+new_r20);\nevalcond[1]=(new_r21+(((-1.0)*sj4*x320)));\nevalcond[2]=(((cj4*x315))+((new_r11*sj3))+((cj3*new_r01)));\nevalcond[3]=((((-1.0)*new_r00*x319))+(((-1.0)*x320))+((cj3*new_r10)));\nevalcond[4]=((((-1.0)*x322))+((cj3*new_r11))+(((-1.0)*new_r01*x319)));\nevalcond[5]=(((x315*x318))+new_r01+((sj3*x316)));\nevalcond[6]=(((new_r10*sj3))+x317+(((-1.0)*cj4*x322)));\nevalcond[7]=(x321+(((-1.0)*x318*x322))+new_r00);\nevalcond[8]=((((-1.0)*cj3*x322))+((cj4*x321))+new_r11);\nevalcond[9]=((((-1.0)*cj3*x320))+new_r10+(((-1.0)*cj4*x316*x319)));\nevalcond[10]=((((-1.0)*cj4*new_r10*x319))+((new_r20*sj4))+x316+(((-1.0)*cj4*x317)));\nevalcond[11]=((((-1.0)*new_r01*x318))+(((-1.0)*cj4*new_r11*x319))+(((-1.0)*x320))+((new_r21*sj4)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j3array[1], cj3array[1], sj3array[1];\nbool j3valid[1]={false};\n_nj3 = 1;\nCheckValue<IkReal> x323=IKPowWithIntegerCheck(IKsign(sj4),-1);\nif(!x323.valid){\ncontinue;\n}\nCheckValue<IkReal> x324 = IKatan2WithCheck(IkReal(new_r12),new_r02,IKFAST_ATAN2_MAGTHRESH);\nif(!x324.valid){\ncontinue;\n}\nj3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x323.value)))+(x324.value));\nsj3array[0]=IKsin(j3array[0]);\ncj3array[0]=IKcos(j3array[0]);\nif( j3array[0] > IKPI )\n{\n    j3array[0]-=IK2PI;\n}\nelse if( j3array[0] < -IKPI )\n{    j3array[0]+=IK2PI;\n}\nj3valid[0] = true;\nfor(int ij3 = 0; ij3 < 1; ++ij3)\n{\nif( !j3valid[ij3] )\n{\n    continue;\n}\n_ij3[0] = ij3; _ij3[1] = -1;\nfor(int iij3 = ij3+1; iij3 < 1; ++iij3)\n{\nif( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )\n{\n    j3valid[iij3]=false; _ij3[1] = iij3; break; \n}\n}\nj3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];\n{\nIkReal evalcond[8];\nIkReal x325=IKcos(j3);\nIkReal x326=IKsin(j3);\nIkReal x327=((1.0)*sj4);\nIkReal x328=((1.0)*cj4);\nIkReal x329=(new_r12*x326);\nIkReal x330=(new_r02*x325);\nevalcond[0]=((((-1.0)*x325*x327))+new_r02);\nevalcond[1]=((((-1.0)*x326*x327))+new_r12);\nevalcond[2]=(((new_r12*x325))+(((-1.0)*new_r02*x326)));\nevalcond[3]=((((-1.0)*x327))+x330+x329);\nevalcond[4]=((((-1.0)*x328*x330))+((new_r22*sj4))+(((-1.0)*x328*x329)));\nevalcond[5]=((((-1.0)*new_r00*x325*x327))+(((-1.0)*new_r10*x326*x327))+(((-1.0)*new_r20*x328)));\nevalcond[6]=((((-1.0)*new_r11*x326*x327))+(((-1.0)*new_r01*x325*x327))+(((-1.0)*new_r21*x328)));\nevalcond[7]=((1.0)+(((-1.0)*new_r22*x328))+(((-1.0)*x327*x329))+(((-1.0)*x327*x330)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nIkReal j5eval[2];\nIkReal x331=((1.0)*cj0);\nIkReal x332=(r11*sj0);\nIkReal x333=(r10*sj0);\nIkReal x334=((1.0)*cj2);\nIkReal x335=(cj1*sj2);\nIkReal x336=(r12*sj0);\nIkReal x337=(((cj2*sj1))+x335);\nIkReal x338=x121;\nIkReal x339=(sj0*x338);\nIkReal x340=(cj0*x337);\nIkReal x341=(cj0*x338);\nIkReal x342=x125;\nnew_r00=(((r00*x340))+((r20*x338))+((x333*x337)));\nnew_r01=(((r01*x340))+((r21*x338))+((x332*x337)));\nnew_r02=(((r22*x338))+((x336*x337))+((r02*x340)));\nnew_r10=(((r00*sj0))+(((-1.0)*r10*x331)));\nnew_r11=(((r01*sj0))+(((-1.0)*r11*x331)));\nnew_r12=(((r02*sj0))+(((-1.0)*r12*x331)));\nnew_r20=(((r00*x341))+((x333*x338))+((r20*x342)));\nnew_r21=(((r01*x341))+((r21*x342))+((x332*x338)));\nnew_r22=(((x336*x338))+((r22*x342))+((r02*x341)));\nj5eval[0]=sj4;\nj5eval[1]=IKsign(sj4);\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j5eval[2];\nIkReal x343=((1.0)*cj0);\nIkReal x344=(r11*sj0);\nIkReal x345=(r10*sj0);\nIkReal x346=((1.0)*cj2);\nIkReal x347=(cj1*sj2);\nIkReal x348=(r12*sj0);\nIkReal x349=(((cj2*sj1))+x347);\nIkReal x350=x121;\nIkReal x351=(sj0*x350);\nIkReal x352=(cj0*x349);\nIkReal x353=(cj0*x350);\nIkReal x354=x125;\nnew_r00=(((r00*x352))+((x345*x349))+((r20*x350)));\nnew_r01=(((r21*x350))+((r01*x352))+((x344*x349)));\nnew_r02=(((x348*x349))+((r22*x350))+((r02*x352)));\nnew_r10=(((r00*sj0))+(((-1.0)*r10*x343)));\nnew_r11=((((-1.0)*r11*x343))+((r01*sj0)));\nnew_r12=((((-1.0)*r12*x343))+((r02*sj0)));\nnew_r20=(((x345*x350))+((r00*x353))+((r20*x354)));\nnew_r21=(((r21*x354))+((r01*x353))+((x344*x350)));\nnew_r22=(((r22*x354))+((x348*x350))+((r02*x353)));\nj5eval[0]=sj3;\nj5eval[1]=sj4;\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j5eval[3];\nIkReal x355=((1.0)*cj0);\nIkReal x356=(r11*sj0);\nIkReal x357=(r10*sj0);\nIkReal x358=((1.0)*cj2);\nIkReal x359=(cj1*sj2);\nIkReal x360=(r12*sj0);\nIkReal x361=(((cj2*sj1))+x359);\nIkReal x362=x121;\nIkReal x363=(sj0*x362);\nIkReal x364=(cj0*x361);\nIkReal x365=(cj0*x362);\nIkReal x366=x125;\nnew_r00=(((r20*x362))+((r00*x364))+((x357*x361)));\nnew_r01=(((r01*x364))+((x356*x361))+((r21*x362)));\nnew_r02=(((r22*x362))+((x360*x361))+((r02*x364)));\nnew_r10=(((r00*sj0))+(((-1.0)*r10*x355)));\nnew_r11=((((-1.0)*r11*x355))+((r01*sj0)));\nnew_r12=((((-1.0)*r12*x355))+((r02*sj0)));\nnew_r20=(((r20*x366))+((r00*x365))+((x357*x362)));\nnew_r21=(((r01*x365))+((x356*x362))+((r21*x366)));\nnew_r22=(((r22*x366))+((x360*x362))+((r02*x365)));\nj5eval[0]=cj3;\nj5eval[1]=cj4;\nj5eval[2]=sj4;\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[12];\nbool bgotonextstatement = true;\ndo\n{\nIkReal x367=(new_r22+(((-1.0)*cj4)));\nIkReal x368=((((-1.0)*sj4))+new_r12);\nIkReal x369=((1.0)*cj4);\nIkReal x370=((1.0)*sj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));\nevalcond[1]=x367;\nevalcond[2]=x367;\nevalcond[3]=new_r02;\nevalcond[4]=x368;\nevalcond[5]=x368;\nevalcond[6]=((((-1.0)*new_r12*x369))+((new_r22*sj4)));\nevalcond[7]=((((-1.0)*new_r20*x369))+(((-1.0)*new_r10*x370)));\nevalcond[8]=((((-1.0)*new_r11*x370))+(((-1.0)*new_r21*x369)));\nevalcond[9]=((1.0)+(((-1.0)*new_r12*x370))+(((-1.0)*new_r22*x369)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x371 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);\nif(!x371.valid){\ncontinue;\n}\nCheckValue<IkReal> x372=IKPowWithIntegerCheck(IKsign(new_r12),-1);\nif(!x372.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(x371.value)+(((1.5707963267949)*(x372.value))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x373=IKsin(j5);\nIkReal x374=IKcos(j5);\nIkReal x375=((1.0)*new_r22);\nIkReal x376=((1.0)*x373);\nIkReal x377=((1.0)*x374);\nevalcond[0]=(((new_r12*x374))+new_r20);\nevalcond[1]=(new_r11+((new_r22*x373)));\nevalcond[2]=((((-1.0)*new_r12*x376))+new_r21);\nevalcond[3]=((((-1.0)*x374*x375))+new_r10);\nevalcond[4]=((((-1.0)*x376))+(((-1.0)*new_r00)));\nevalcond[5]=((((-1.0)*x377))+(((-1.0)*new_r01)));\nevalcond[6]=(x374+((new_r12*new_r20))+(((-1.0)*new_r10*x375)));\nevalcond[7]=((((-1.0)*x376))+((new_r12*new_r21))+(((-1.0)*new_r11*x375)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x378=(new_r22+(((-1.0)*cj4)));\nIkReal x379=((1.0)*cj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));\nevalcond[1]=x378;\nevalcond[2]=x378;\nevalcond[3]=new_r02;\nevalcond[4]=(sj4+new_r12);\nevalcond[5]=((((-1.0)*sj4))+(((-1.0)*new_r12)));\nevalcond[6]=(((cj4*new_r12))+((new_r22*sj4)));\nevalcond[7]=((((-1.0)*new_r20*x379))+((new_r10*sj4)));\nevalcond[8]=((((-1.0)*new_r21*x379))+((new_r11*sj4)));\nevalcond[9]=((1.0)+((new_r12*sj4))+(((-1.0)*new_r22*x379)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(new_r00, new_r01);\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x380=IKsin(j5);\nIkReal x381=IKcos(j5);\nIkReal x382=((1.0)*new_r12);\nIkReal x383=((1.0)*x380);\nIkReal x384=((1.0)*x381);\nevalcond[0]=(((new_r12*x380))+new_r21);\nevalcond[1]=((((-1.0)*x383))+new_r00);\nevalcond[2]=((((-1.0)*x384))+new_r01);\nevalcond[3]=((((-1.0)*x381*x382))+new_r20);\nevalcond[4]=(((new_r22*x380))+(((-1.0)*new_r11)));\nevalcond[5]=((((-1.0)*new_r10))+(((-1.0)*new_r22*x384)));\nevalcond[6]=((((-1.0)*new_r20*x382))+x381+((new_r10*new_r22)));\nevalcond[7]=((((-1.0)*new_r21*x382))+((new_r11*new_r22))+(((-1.0)*x383)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x385=(new_r12*sj3);\nIkReal x386=(new_r11*sj3);\nIkReal x387=((1.0)*sj3);\nIkReal x388=((1.0)*cj3);\nIkReal x389=((((-1.0)*new_r02*x387))+((cj3*new_r12)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));\nevalcond[1]=new_r22;\nevalcond[2]=((((-1.0)*x388))+new_r02);\nevalcond[3]=((((-1.0)*x387))+new_r12);\nevalcond[4]=x389;\nevalcond[5]=x389;\nevalcond[6]=((-1.0)+x385+((cj3*new_r02)));\nevalcond[7]=(x386+((cj3*new_r01)));\nevalcond[8]=(((new_r10*sj3))+((cj3*new_r00)));\nevalcond[9]=((((-1.0)*new_r10*x387))+(((-1.0)*new_r00*x388)));\nevalcond[10]=((((-1.0)*new_r01*x388))+(((-1.0)*x386)));\nevalcond[11]=((1.0)+(((-1.0)*new_r02*x388))+(((-1.0)*x385)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(new_r21, ((-1.0)*new_r20));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x390=IKcos(j5);\nIkReal x391=IKsin(j5);\nIkReal x392=((1.0)*new_r12);\nIkReal x393=((1.0)*x391);\nIkReal x394=((1.0)*x390);\nevalcond[0]=(x390+new_r20);\nevalcond[1]=((((-1.0)*x393))+new_r21);\nevalcond[2]=(new_r01+((new_r12*x390)));\nevalcond[3]=(new_r00+((new_r12*x391)));\nevalcond[4]=(new_r11+(((-1.0)*new_r02*x394)));\nevalcond[5]=(new_r10+(((-1.0)*new_r02*x393)));\nevalcond[6]=((((-1.0)*x393))+((new_r02*new_r10))+(((-1.0)*new_r00*x392)));\nevalcond[7]=((((-1.0)*new_r01*x392))+(((-1.0)*x394))+((new_r02*new_r11)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x395=((((-1.0)*new_r02*sj3))+((cj3*new_r12)));\nIkReal x396=(((new_r10*sj3))+((cj3*new_r00)));\nIkReal x397=(((new_r11*sj3))+((cj3*new_r01)));\nIkReal x398=((1.0)+((new_r12*sj3))+((cj3*new_r02)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));\nevalcond[1]=new_r22;\nevalcond[2]=(cj3+new_r02);\nevalcond[3]=(sj3+new_r12);\nevalcond[4]=x395;\nevalcond[5]=x395;\nevalcond[6]=x398;\nevalcond[7]=x397;\nevalcond[8]=x396;\nevalcond[9]=x396;\nevalcond[10]=x397;\nevalcond[11]=x398;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((-1.0)*new_r21), new_r20);\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x399=IKcos(j5);\nIkReal x400=IKsin(j5);\nIkReal x401=((1.0)*new_r02);\nIkReal x402=((1.0)*x399);\nIkReal x403=((1.0)*x400);\nevalcond[0]=(x400+new_r21);\nevalcond[1]=(new_r20+(((-1.0)*x402)));\nevalcond[2]=(new_r11+((new_r02*x399)));\nevalcond[3]=(new_r10+((new_r02*x400)));\nevalcond[4]=((((-1.0)*new_r12*x402))+new_r01);\nevalcond[5]=((((-1.0)*new_r12*x403))+new_r00);\nevalcond[6]=(((new_r00*new_r12))+(((-1.0)*new_r10*x401))+(((-1.0)*x403)));\nevalcond[7]=(((new_r01*new_r12))+(((-1.0)*new_r11*x401))+(((-1.0)*x402)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x404=(new_r12*sj3);\nIkReal x405=((1.0)*new_r02);\nIkReal x406=(((cj3*new_r12))+(((-1.0)*sj3*x405)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));\nevalcond[1]=((-1.0)+new_r22);\nevalcond[2]=new_r20;\nevalcond[3]=new_r02;\nevalcond[4]=new_r12;\nevalcond[5]=new_r21;\nevalcond[6]=x406;\nevalcond[7]=x406;\nevalcond[8]=(x404+((cj3*new_r02)));\nevalcond[9]=((((-1.0)*cj3*x405))+(((-1.0)*x404)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x407=((1.0)*new_r01);\nif( IKabs(((((-1.0)*cj3*x407))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj3*new_r00))+(((-1.0)*sj3*x407)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x407))+(((-1.0)*new_r00*sj3))))+IKsqr((((cj3*new_r00))+(((-1.0)*sj3*x407))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((((-1.0)*cj3*x407))+(((-1.0)*new_r00*sj3))), (((cj3*new_r00))+(((-1.0)*sj3*x407))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x408=IKsin(j5);\nIkReal x409=IKcos(j5);\nIkReal x410=((1.0)*sj3);\nIkReal x411=((1.0)*x409);\nIkReal x412=(sj3*x408);\nIkReal x413=((1.0)*x408);\nIkReal x414=(cj3*x411);\nevalcond[0]=(((new_r11*sj3))+x408+((cj3*new_r01)));\nevalcond[1]=(((sj3*x409))+new_r01+((cj3*x408)));\nevalcond[2]=(((new_r10*sj3))+((cj3*new_r00))+(((-1.0)*x411)));\nevalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x410))+(((-1.0)*x413)));\nevalcond[4]=(((cj3*new_r11))+(((-1.0)*x411))+(((-1.0)*new_r01*x410)));\nevalcond[5]=(x412+new_r00+(((-1.0)*x414)));\nevalcond[6]=(x412+new_r11+(((-1.0)*x414)));\nevalcond[7]=((((-1.0)*cj3*x413))+new_r10+(((-1.0)*x409*x410)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x415=((((-1.0)*new_r02*sj3))+((cj3*new_r12)));\nIkReal x416=(((new_r12*sj3))+((cj3*new_r02)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));\nevalcond[1]=((1.0)+new_r22);\nevalcond[2]=new_r20;\nevalcond[3]=new_r02;\nevalcond[4]=new_r12;\nevalcond[5]=new_r21;\nevalcond[6]=x415;\nevalcond[7]=x415;\nevalcond[8]=x416;\nevalcond[9]=x416;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x417=((1.0)*sj3);\nif( IKabs((((cj3*new_r01))+(((-1.0)*new_r00*x417)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x417)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj3*new_r01))+(((-1.0)*new_r00*x417))))+IKsqr(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x417))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2((((cj3*new_r01))+(((-1.0)*new_r00*x417))), ((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x417))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x418=IKsin(j5);\nIkReal x419=IKcos(j5);\nIkReal x420=((1.0)*sj3);\nIkReal x421=((1.0)*x418);\nIkReal x422=(sj3*x419);\nIkReal x423=((1.0)*x419);\nIkReal x424=(cj3*x421);\nevalcond[0]=(((new_r10*sj3))+x419+((cj3*new_r00)));\nevalcond[1]=((((-1.0)*x421))+((new_r11*sj3))+((cj3*new_r01)));\nevalcond[2]=(((sj3*x418))+new_r00+((cj3*x419)));\nevalcond[3]=((((-1.0)*new_r00*x420))+(((-1.0)*x421))+((cj3*new_r10)));\nevalcond[4]=((((-1.0)*x423))+((cj3*new_r11))+(((-1.0)*new_r01*x420)));\nevalcond[5]=((((-1.0)*x424))+x422+new_r01);\nevalcond[6]=((((-1.0)*x424))+x422+new_r10);\nevalcond[7]=((((-1.0)*cj3*x423))+(((-1.0)*x418*x420))+new_r11);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x425=(new_r22+(((-1.0)*cj4)));\nIkReal x426=((((-1.0)*sj4))+new_r02);\nIkReal x427=((1.0)*cj4);\nIkReal x428=((1.0)*sj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));\nevalcond[1]=x425;\nevalcond[2]=x425;\nevalcond[3]=x426;\nevalcond[4]=new_r12;\nevalcond[5]=x426;\nevalcond[6]=(((new_r22*sj4))+(((-1.0)*new_r02*x427)));\nevalcond[7]=((((-1.0)*new_r00*x428))+(((-1.0)*new_r20*x427)));\nevalcond[8]=((((-1.0)*new_r21*x427))+(((-1.0)*new_r01*x428)));\nevalcond[9]=((1.0)+(((-1.0)*new_r22*x427))+(((-1.0)*new_r02*x428)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(new_r10, new_r11);\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x429=IKcos(j5);\nIkReal x430=IKsin(j5);\nIkReal x431=((1.0)*new_r22);\nIkReal x432=((1.0)*x430);\nevalcond[0]=(new_r20+((new_r02*x429)));\nevalcond[1]=((((-1.0)*x432))+new_r10);\nevalcond[2]=((((-1.0)*x429))+new_r11);\nevalcond[3]=(new_r01+((new_r22*x430)));\nevalcond[4]=((((-1.0)*new_r02*x432))+new_r21);\nevalcond[5]=((((-1.0)*x429*x431))+new_r00);\nevalcond[6]=((((-1.0)*new_r00*x431))+x429+((new_r02*new_r20)));\nevalcond[7]=((((-1.0)*x432))+(((-1.0)*new_r01*x431))+((new_r02*new_r21)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x433=(new_r22+(((-1.0)*cj4)));\nIkReal x434=((1.0)*cj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));\nevalcond[1]=x433;\nevalcond[2]=x433;\nevalcond[3]=(sj4+new_r02);\nevalcond[4]=new_r12;\nevalcond[5]=((((-1.0)*sj4))+(((-1.0)*new_r02)));\nevalcond[6]=(((cj4*new_r02))+((new_r22*sj4)));\nevalcond[7]=(((new_r00*sj4))+(((-1.0)*new_r20*x434)));\nevalcond[8]=(((new_r01*sj4))+(((-1.0)*new_r21*x434)));\nevalcond[9]=((1.0)+((new_r02*sj4))+(((-1.0)*new_r22*x434)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x435 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);\nif(!x435.valid){\ncontinue;\n}\nCheckValue<IkReal> x436=IKPowWithIntegerCheck(IKsign(new_r02),-1);\nif(!x436.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(x435.value)+(((1.5707963267949)*(x436.value))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x437=IKsin(j5);\nIkReal x438=IKcos(j5);\nIkReal x439=((1.0)*new_r02);\nIkReal x440=((1.0)*x437);\nIkReal x441=((1.0)*x438);\nevalcond[0]=(new_r21+((new_r02*x437)));\nevalcond[1]=((((-1.0)*x438*x439))+new_r20);\nevalcond[2]=((((-1.0)*x440))+(((-1.0)*new_r10)));\nevalcond[3]=((((-1.0)*x441))+(((-1.0)*new_r11)));\nevalcond[4]=((((-1.0)*new_r01))+((new_r22*x437)));\nevalcond[5]=((((-1.0)*new_r00))+(((-1.0)*new_r22*x441)));\nevalcond[6]=(((new_r00*new_r22))+x438+(((-1.0)*new_r20*x439)));\nevalcond[7]=((((-1.0)*x440))+((new_r01*new_r22))+(((-1.0)*new_r21*x439)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j5]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x443=IKPowWithIntegerCheck(sj4,-1);\nif(!x443.valid){\ncontinue;\n}\nIkReal x442=x443.value;\nCheckValue<IkReal> x444=IKPowWithIntegerCheck(cj3,-1);\nif(!x444.valid){\ncontinue;\n}\nCheckValue<IkReal> x445=IKPowWithIntegerCheck(cj4,-1);\nif(!x445.valid){\ncontinue;\n}\nif( IKabs((x442*(x444.value)*(x445.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x442)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x442*(x444.value)*(x445.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4))))))+IKsqr(((-1.0)*new_r20*x442))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2((x442*(x444.value)*(x445.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4))))), ((-1.0)*new_r20*x442));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[12];\nIkReal x446=IKsin(j5);\nIkReal x447=IKcos(j5);\nIkReal x448=(cj3*new_r00);\nIkReal x449=(cj3*cj4);\nIkReal x450=((1.0)*sj3);\nIkReal x451=((1.0)*x446);\nIkReal x452=(sj3*x446);\nIkReal x453=((1.0)*x447);\nevalcond[0]=(((sj4*x447))+new_r20);\nevalcond[1]=((((-1.0)*sj4*x451))+new_r21);\nevalcond[2]=(((cj4*x446))+((new_r11*sj3))+((cj3*new_r01)));\nevalcond[3]=((((-1.0)*new_r00*x450))+(((-1.0)*x451))+((cj3*new_r10)));\nevalcond[4]=((((-1.0)*new_r01*x450))+(((-1.0)*x453))+((cj3*new_r11)));\nevalcond[5]=(((x446*x449))+((sj3*x447))+new_r01);\nevalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x453))+x448);\nevalcond[7]=(x452+new_r00+(((-1.0)*x449*x453)));\nevalcond[8]=(((cj4*x452))+new_r11+(((-1.0)*cj3*x453)));\nevalcond[9]=((((-1.0)*cj4*x447*x450))+new_r10+(((-1.0)*cj3*x451)));\nevalcond[10]=(((new_r20*sj4))+(((-1.0)*cj4*x448))+(((-1.0)*cj4*new_r10*x450))+x447);\nevalcond[11]=((((-1.0)*x451))+(((-1.0)*new_r01*x449))+(((-1.0)*cj4*new_r11*x450))+((new_r21*sj4)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x455=IKPowWithIntegerCheck(sj4,-1);\nif(!x455.valid){\ncontinue;\n}\nIkReal x454=x455.value;\nCheckValue<IkReal> x456=IKPowWithIntegerCheck(sj3,-1);\nif(!x456.valid){\ncontinue;\n}\nif( IKabs((x454*(x456.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x454)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x454*(x456.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))))+IKsqr(((-1.0)*new_r20*x454))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2((x454*(x456.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))), ((-1.0)*new_r20*x454));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[12];\nIkReal x457=IKsin(j5);\nIkReal x458=IKcos(j5);\nIkReal x459=(cj3*new_r00);\nIkReal x460=(cj3*cj4);\nIkReal x461=((1.0)*sj3);\nIkReal x462=((1.0)*x457);\nIkReal x463=(sj3*x457);\nIkReal x464=((1.0)*x458);\nevalcond[0]=(((sj4*x458))+new_r20);\nevalcond[1]=((((-1.0)*sj4*x462))+new_r21);\nevalcond[2]=(((cj4*x457))+((new_r11*sj3))+((cj3*new_r01)));\nevalcond[3]=((((-1.0)*x462))+(((-1.0)*new_r00*x461))+((cj3*new_r10)));\nevalcond[4]=((((-1.0)*new_r01*x461))+(((-1.0)*x464))+((cj3*new_r11)));\nevalcond[5]=(((sj3*x458))+new_r01+((x457*x460)));\nevalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x464))+x459);\nevalcond[7]=((((-1.0)*x460*x464))+x463+new_r00);\nevalcond[8]=(((cj4*x463))+new_r11+(((-1.0)*cj3*x464)));\nevalcond[9]=((((-1.0)*cj4*x458*x461))+new_r10+(((-1.0)*cj3*x462)));\nevalcond[10]=(((new_r20*sj4))+(((-1.0)*cj4*x459))+x458+(((-1.0)*cj4*new_r10*x461)));\nevalcond[11]=((((-1.0)*x462))+(((-1.0)*cj4*new_r11*x461))+(((-1.0)*new_r01*x460))+((new_r21*sj4)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x465=IKPowWithIntegerCheck(IKsign(sj4),-1);\nif(!x465.valid){\ncontinue;\n}\nCheckValue<IkReal> x466 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);\nif(!x466.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x465.value)))+(x466.value));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[12];\nIkReal x467=IKsin(j5);\nIkReal x468=IKcos(j5);\nIkReal x469=(cj3*new_r00);\nIkReal x470=(cj3*cj4);\nIkReal x471=((1.0)*sj3);\nIkReal x472=((1.0)*x467);\nIkReal x473=(sj3*x467);\nIkReal x474=((1.0)*x468);\nevalcond[0]=(((sj4*x468))+new_r20);\nevalcond[1]=((((-1.0)*sj4*x472))+new_r21);\nevalcond[2]=(((cj4*x467))+((new_r11*sj3))+((cj3*new_r01)));\nevalcond[3]=((((-1.0)*new_r00*x471))+(((-1.0)*x472))+((cj3*new_r10)));\nevalcond[4]=((((-1.0)*x474))+(((-1.0)*new_r01*x471))+((cj3*new_r11)));\nevalcond[5]=(((sj3*x468))+((x467*x470))+new_r01);\nevalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x474))+x469);\nevalcond[7]=(x473+new_r00+(((-1.0)*x470*x474)));\nevalcond[8]=(((cj4*x473))+(((-1.0)*cj3*x474))+new_r11);\nevalcond[9]=((((-1.0)*cj4*x468*x471))+(((-1.0)*cj3*x472))+new_r10);\nevalcond[10]=(((new_r20*sj4))+(((-1.0)*cj4*x469))+x468+(((-1.0)*cj4*new_r10*x471)));\nevalcond[11]=((((-1.0)*cj4*new_r11*x471))+(((-1.0)*x472))+((new_r21*sj4))+(((-1.0)*new_r01*x470)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n}\n}\n\n}\n\n}\n}\n}\n}\n}};\n\n\n/// solves the inverse kinematics equations.\n/// \\param pfree is an array specifying the free joints of the chain.\nIKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {\nIKSolver solver;\nreturn solver.ComputeIk(eetrans,eerot,pfree,solutions);\n}\n\nIKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {\nIKSolver solver;\nreturn solver.ComputeIk(eetrans,eerot,pfree,solutions);\n}\n\nIKFAST_API const char* GetKinematicsHash() { return \"e158d2c8ede0f4f82aa37d63b20914b5\"; }\n\nIKFAST_API const char* GetIkFastVersion() { return \"0x10000048\"; }\n\n#ifdef IKFAST_NAMESPACE\n} // end namespace\n#endif\n\n#ifndef IKFAST_NO_MAIN\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef IKFAST_NAMESPACE\nusing namespace IKFAST_NAMESPACE;\n#endif\nint main(int argc, char** argv)\n{\n    if( argc != 12+GetNumFreeParameters()+1 ) {\n        printf(\"\\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\\n\\n\"\n               \"Returns the ik solutions given the transformation of the end effector specified by\\n\"\n               \"a 3x3 rotation R (rXX), and a 3x1 translation (tX).\\n\"\n               \"There are %d free parameters that have to be specified.\\n\\n\",GetNumFreeParameters());\n        return 1;\n    }\n\n    IkSolutionList<IkReal> solutions;\n    std::vector<IkReal> vfree(GetNumFreeParameters());\n    IkReal eerot[9],eetrans[3];\n    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);\n    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);\n    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);\n    for(std::size_t i = 0; i < vfree.size(); ++i)\n        vfree[i] = atof(argv[13+i]);\n    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);\n\n    if( !bSuccess ) {\n        fprintf(stderr,\"Failed to get ik solution\\n\");\n        return -1;\n    }\n\n    printf(\"Found %d ik solutions:\\n\", (int)solutions.GetNumSolutions());\n    std::vector<IkReal> solvalues(GetNumJoints());\n    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {\n        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);\n        printf(\"sol%d (free=%d): \", (int)i, (int)sol.GetFree().size());\n        std::vector<IkReal> vsolfree(sol.GetFree().size());\n        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);\n        for( std::size_t j = 0; j < solvalues.size(); ++j)\n            printf(\"%.15f, \", solvalues[j]);\n        printf(\"\\n\");\n    }\n    return 0;\n}\n\n#endif\n\nchar* ComputeFkWrapper(const IkReal* j) {\n    IkReal eetrans[3] = {0};\n    IkReal eerot[9] = {0};\n    char buffer [256] = {0};\n    ComputeFk(j, eetrans, eerot);\n    for(int i = 0; i < 3; ++i)\n        sprintf(buffer + strlen(buffer), \"%.15f,\", eetrans[i]);\n    for(int i = 0; i < 9 - 1; ++i)\n        sprintf(buffer + strlen(buffer), \"%.15f,\", eerot[i]);\n    sprintf(buffer + strlen(buffer), \"%.15f\", eerot[9 - 1]);\n    return buffer;\n}\n\nstd::vector<IkReal> TrueComputeIk(int argc, char** argv)\n{\n    std::vector<IkReal> solvalues(GetNumJoints());\n    if( argc != 12+GetNumFreeParameters()+1 ) {\n        printf(\"\\nKAKAKAK Usage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\\n\\n\"\n               \"Returns the ik solutions given the transformation of the end effector specified by\\n\"\n               \"a 3x3 rotation R (rXX), and a 3x1 translation (tX).\\n\"\n               \"There are %d free parameters that have to be specified.\\n\\n\",GetNumFreeParameters());\n    }\n\n    IkSolutionList<IkReal> solutions;\n    std::vector<IkReal> vfree(GetNumFreeParameters());\n    IkReal eerot[9],eetrans[3];\n    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);\n    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);\n    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);\n    for(std::size_t i = 0; i < vfree.size(); ++i)\n        vfree[i] = atof(argv[13+i]);\n    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);\n\n    if( !bSuccess ) {\n        fprintf(stderr,\"Failed to get ik solution\\n\");\n    }\n\n    printf(\"Found %d ik solutions:\\n\", (int)solutions.GetNumSolutions());\n    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {\n        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);\n        printf(\"sol%d (free=%d): \", (int)i, (int)sol.GetFree().size());\n        std::vector<IkReal> vsolfree(sol.GetFree().size());\n        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);\n        for( std::size_t j = 0; j < solvalues.size(); ++j)\n            printf(\"%.15f, \", solvalues[j]);\n        printf(\"\\n\");\n    }\n    return solvalues;\n}\n"]}