/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-05-22 07:18:42.341898
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKsin(j[6]);
x11=IKsin(j[5]);
x12=IKcos(j[5]);
x13=IKcos(j[6]);
x14=((0.5)*x0);
x15=((0.085)*x8);
x16=((1.0)*x5);
x17=((1.0)*x4);
x18=((1.0)*x3);
x19=((0.085)*x9);
x20=((1.0)*x11);
x21=((1.0)*x12);
x22=((0.5)*x3);
x23=((1.0)*x0);
x24=((0.085)*x5);
x25=(x1*x2);
x26=(x6*x7);
x27=(x2*x7);
x28=(x1*x6);
x29=(x0*x7);
x30=(x3*x7);
x31=(x17*x3);
x32=((1.0)*x28);
x33=(x4*x7*x9);
x34=(x16*x29);
x35=(x23*x26);
x36=(x16*x30);
x37=(x18*x26);
x38=((((-1.0)*x31))+((x0*x25)));
x39=(((x0*x4))+((x25*x3)));
x40=((((-1.0)*x1*x31))+((x0*x2)));
x41=((((-1.0)*x32))+((x27*x5)));
x42=(x31+(((-1.0)*x23*x25)));
x43=((((-1.0)*x0*x1*x17))+(((-1.0)*x18*x2)));
x44=((((-1.0)*x0*x17))+(((-1.0)*x18*x25)));
x45=(((x1*x16))+(((1.0)*x2*x26)));
x46=((-1.0)*x45);
x47=(x39*x6);
x48=(x11*x41);
x49=(x38*x6);
x50=(x42*x5);
x51=(x44*x5);
x52=((((-1.0)*x34))+x49);
x53=((((-1.0)*x36))+x47);
x54=((((-1.0)*x35))+x50);
x55=((((-1.0)*x37))+x51);
x56=(((x4*x7*x8))+((x45*x9)));
x57=(((x46*x8))+x33);
x58=(x11*x55);
x59=(((x53*x8))+((x40*x9)));
x60=(((x9*(((((-1.0)*x47))+x36))))+((x40*x8)));
x61=(((x43*x9))+((x52*x8)));
x62=(x12*x59);
x63=(((x9*(((((-1.0)*x49))+x34))))+((x43*x8)));
eerot[0]=(((x10*x63))+((x13*((((x12*x61))+((x11*x54)))))));
eerot[1]=(((x13*x63))+((x10*(((((-1.0)*x20*x54))+(((-1.0)*x21*x61)))))));
eerot[2]=(((x11*x61))+((x12*(((((-1.0)*x16*x42))+x35)))));
eetrans[0]=(((x5*((((x14*x25))+(((-1.0)*x22*x4))))))+((x11*((((x19*x43))+((x15*x52))))))+((x14*x26))+((x12*(((((-1.0)*x24*x42))+(((0.085)*x0*x26))))))+(((0.45)*x29)));
eerot[3]=(((x13*((x58+x62))))+((x10*x60)));
eerot[4]=(((x13*x60))+((x10*(((((-1.0)*x20*x55))+(((-1.0)*x21*x59)))))));
eerot[5]=(((x12*(((((-1.0)*x16*x44))+x37))))+((x11*x59)));
eetrans[1]=((((0.45)*x30))+((x22*x26))+((x11*((((x19*x40))+((x15*x53))))))+((x5*((((x22*x25))+((x14*x4))))))+((x12*(((((-1.0)*x24*x44))+(((0.085)*x26*x3)))))));
eerot[6]=(((x13*((((x12*x57))+x48))))+((x10*x56)));
eerot[7]=(((x13*x56))+((x10*(((((-1.0)*x20*x41))+(((-1.0)*x21*x57)))))));
eerot[8]=(((x11*x57))+((x12*(((((-1.0)*x16*x27))+x32)))));
eetrans[2]=((0.315)+((x12*(((((0.085)*x28))+(((-1.0)*x24*x27))))))+(((-0.5)*x27*x5))+(((0.5)*x28))+(((0.45)*x1))+((x11*((((x15*x46))+((x19*x4*x7)))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij2[2], _nj2;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]), htj2=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=(px+(((-0.085)*r02)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.085)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.315)+(((-0.085)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x64=((1.0)*px);
IkReal x65=((1.0)*pz);
IkReal x66=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x66))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x65)));
rxp0_2=((((-1.0)*r10*x64))+((py*r00)));
rxp1_0=((((-1.0)*r21*x66))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x65)));
rxp1_2=((((-1.0)*r11*x64))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x66)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x65)));
rxp2_2=((((-1.0)*r12*x64))+((py*r02)));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((-1.00555555555556)+(((2.22222222222222)*pp)));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal j0eval[2];
j0eval[0]=((px*px)+(py*py));
j0eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j1eval[0]=((1.0)+(((2.22222222222222)*cj3))+(((1.23456790123457)*(cj3*cj3)))+(((1.23456790123457)*(cj2*cj2)*(sj3*sj3))));
j1eval[1]=((((0.5)*(IKabs((cj2*sj3)))))+(IKabs(((-0.45)+(((-0.5)*cj3))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x67=cj2*cj2;
IkReal x68=sj2*sj2;
IkReal x69=px*px;
IkReal x70=py*py;
IkReal x71=py*py*py*py;
IkReal x72=sj2*sj2*sj2*sj2;
IkReal x73=cj2*cj2*cj2*cj2;
IkReal x74=((1.0)*px*py);
IkReal x75=(x69*x70);
IkReal x76=((2.0)*x67*x68);
j0eval[0]=(((x75*x76))+((x72*x75))+((x73*x75))+((x71*x76))+((x71*x72))+((x71*x73)));
j0eval[1]=((IKabs(((((-1.0)*x67*x74))+(((-1.0)*x68*x74)))))+(IKabs((((x68*x70))+((x67*x70))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x77=cj2*cj2;
IkReal x78=py*py;
IkReal x79=sj2*sj2;
IkReal x80=((1.0)*px*py);
IkReal x81=(((x78*x79))+((x77*x78)));
IkReal x82=((((-1.0)*x77*x80))+(((-1.0)*x79*x80)));
CheckValue<IkReal> x85 = IKatan2WithCheck(IkReal(x81),x82,IKFAST_ATAN2_MAGTHRESH);
if(!x85.valid){
continue;
}
IkReal x83=((1.0)*(x85.value));
if((((x81*x81)+(x82*x82))) < -0.00001)
continue;
CheckValue<IkReal> x86=IKPowWithIntegerCheck(IKabs(IKsqrt(((x81*x81)+(x82*x82)))),-1);
if(!x86.valid){
continue;
}
if( (((0.5)*py*sj2*sj3*(x86.value))) < -1-IKFAST_SINCOS_THRESH || (((0.5)*py*sj2*sj3*(x86.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x84=IKasin(((0.5)*py*sj2*sj3*(x86.value)));
j0array[0]=(x84+(((-1.0)*x83)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x84))+(((-1.0)*x83)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x87=IKcos(j0);
IkReal x88=IKsin(j0);
IkReal x89=sj2*sj2;
IkReal x90=cj2*cj2;
IkReal x91=px*px;
IkReal x92=(px*py);
IkReal x93=((1.0)*x91);
IkReal x94=((0.5)*sj2*sj3);
evalcond[0]=((((-1.0)*py*x87))+x94+((px*x88)));
evalcond[1]=(((x87*((((x89*x92))+((x90*x92))))))+(((-1.0)*px*x94))+((x88*(((((-1.0)*x90*x93))+(((-1.0)*x89*x93)))))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
IkReal x95=(cj0*px);
IkReal x96=((2.0)*pz);
IkReal x97=(py*sj0);
IkReal x98=(cj2*sj3);
IkReal x99=((1.11111111111111)*cj3);
j1eval[0]=((((1.11111111111111)*pz*x98))+((x97*x99))+x95+x97+((x95*x99)));
j1eval[1]=IKsign(((((0.9)*x97))+(((0.9)*x95))+((cj3*x95))+((cj3*x97))+((pz*x98))));
j1eval[2]=((IKabs(((0.405)+(((-1.0)*pz*x96))+(((0.9)*cj3))+(((0.5)*(cj3*cj3))))))+(IKabs((((x96*x97))+(((0.5)*cj3*x98))+(((0.45)*x98))+((x95*x96))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x100=(cj0*px);
IkReal x101=(cj2*sj3);
IkReal x102=((10.0)*pp);
IkReal x103=(py*sj0);
IkReal x104=((1.11111111111111)*cj3);
IkReal x105=((9.0)*cj3);
IkReal x106=((18.0)*pz);
j1eval[0]=((((1.11111111111111)*pz*x101))+x100+x103+((x103*x104))+((x100*x104)));
j1eval[1]=IKsign(((((9.0)*pz*x101))+(((8.1)*x100))+(((8.1)*x103))+((x103*x105))+((x100*x105))));
j1eval[2]=((IKabs(((-0.4275)+(((-1.0)*pz*x106))+((cj3*x102))+(((9.0)*pp))+(((-0.475)*cj3)))))+(IKabs((((x103*x106))+((x101*x102))+(((-0.475)*x101))+((x100*x106))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x107=cj2*cj2;
IkReal x108=cj3*cj3;
IkReal x109=((2.0)*cj3);
IkReal x110=(py*sj0);
IkReal x111=(cj0*px);
IkReal x112=((2.0)*cj2*sj3);
IkReal x113=(x107*x108);
j1eval[0]=((1.0)+(((-1.23456790123457)*x113))+(((2.22222222222222)*cj3))+(((1.23456790123457)*x107))+(((1.23456790123457)*x108)));
j1eval[1]=((IKabs(((((1.8)*pz))+((x110*x112))+((x111*x112))+((pz*x109)))))+(IKabs((((x109*x111))+((x109*x110))+(((1.8)*x111))+(((1.8)*x110))+(((-1.0)*pz*x112))))));
j1eval[2]=IKsign(((0.81)+x108+x107+(((1.8)*cj3))+(((-1.0)*x113))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x114=cj2*cj2;
IkReal x115=cj3*cj3;
IkReal x116=(cj2*sj3);
IkReal x117=((2.0)*pz);
IkReal x118=(py*sj0);
IkReal x119=((2.0)*cj0*px);
CheckValue<IkReal> x120 = IKatan2WithCheck(IkReal((((cj3*x119))+(((1.8)*cj0*px))+(((-1.0)*x116*x117))+(((2.0)*cj3*x118))+(((1.8)*x118)))),(((cj3*x117))+(((1.8)*pz))+(((2.0)*x116*x118))+((x116*x119))),IKFAST_ATAN2_MAGTHRESH);
if(!x120.valid){
continue;
}
CheckValue<IkReal> x121=IKPowWithIntegerCheck(IKsign(((0.81)+x115+x114+(((1.8)*cj3))+(((-1.0)*x114*x115)))),-1);
if(!x121.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x120.value)+(((1.5707963267949)*(x121.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x122=IKcos(j1);
IkReal x123=IKsin(j1);
IkReal x124=(px*sj2);
IkReal x125=((0.5)*sj3);
IkReal x126=((0.5)*cj3);
IkReal x127=(py*sj0);
IkReal x128=((1.0)*cj2);
IkReal x129=(cj0*py);
IkReal x130=((1.0)*sj2);
IkReal x131=(cj0*px);
IkReal x132=(pz*x122);
IkReal x133=(cj0*x122);
IkReal x134=(cj2*x123);
IkReal x135=((0.9)*x123);
evalcond[0]=((((-0.45)*x122))+((x125*x134))+pz+(((-1.0)*x122*x126)));
evalcond[1]=((-0.45)+(((-1.0)*x126))+x132+((x123*x131))+((x123*x127)));
evalcond[2]=((0.0475)+((x127*x135))+(((0.9)*x132))+(((-1.0)*pp))+((x131*x135)));
evalcond[3]=(((cj2*x122*x125))+(((0.45)*x123))+((x123*x126))+(((-1.0)*x131))+(((-1.0)*x127)));
evalcond[4]=(((sj2*x122*x127))+(((-1.0)*pz*x123*x130))+(((-1.0)*x128*x129))+((x124*x133))+((cj2*px*sj0)));
evalcond[5]=((((-1.0)*x122*x127*x128))+((pz*x134))+x125+(((-1.0)*x122*x128*x131))+(((-1.0)*x129*x130))+((sj0*x124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x571=(cj2*sj3);
IkReal x572=(py*sj0);
IkReal x573=(cj0*px);
IkReal x574=((18.0)*pz);
IkReal x575=((9.0)*cj3);
IkReal x576=((10.0)*pp);
CheckValue<IkReal> x577=IKPowWithIntegerCheck(IKsign(((((8.1)*x573))+(((8.1)*x572))+(((9.0)*pz*x571))+((x573*x575))+((x572*x575)))),-1);
if(!x577.valid){
continue;
}
CheckValue<IkReal> x578 = IKatan2WithCheck(IkReal(((-0.4275)+(((9.0)*pp))+((cj3*x576))+(((-1.0)*pz*x574))+(((-0.475)*cj3)))),(((x571*x576))+((x573*x574))+((x572*x574))+(((-0.475)*x571))),IKFAST_ATAN2_MAGTHRESH);
if(!x578.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x577.value)))+(x578.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x579=IKcos(j1);
IkReal x580=IKsin(j1);
IkReal x581=(px*sj2);
IkReal x582=((0.5)*sj3);
IkReal x583=((0.5)*cj3);
IkReal x584=(py*sj0);
IkReal x585=((1.0)*cj2);
IkReal x586=(cj0*py);
IkReal x587=((1.0)*sj2);
IkReal x588=(cj0*px);
IkReal x589=(pz*x579);
IkReal x590=(cj0*x579);
IkReal x591=(cj2*x580);
IkReal x592=((0.9)*x580);
evalcond[0]=((((-1.0)*x579*x583))+pz+(((-0.45)*x579))+((x582*x591)));
evalcond[1]=((-0.45)+((x580*x584))+((x580*x588))+x589+(((-1.0)*x583)));
evalcond[2]=((0.0475)+(((0.9)*x589))+(((-1.0)*pp))+((x584*x592))+((x588*x592)));
evalcond[3]=(((cj2*x579*x582))+(((-1.0)*x588))+(((-1.0)*x584))+((x580*x583))+(((0.45)*x580)));
evalcond[4]=(((sj2*x579*x584))+(((-1.0)*pz*x580*x587))+(((-1.0)*x585*x586))+((x581*x590))+((cj2*px*sj0)));
evalcond[5]=(((sj0*x581))+((pz*x591))+(((-1.0)*x579*x585*x588))+(((-1.0)*x579*x584*x585))+(((-1.0)*x586*x587))+x582);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x593=((2.0)*pz);
IkReal x594=(py*sj0);
IkReal x595=(cj0*px);
IkReal x596=(cj2*sj3);
CheckValue<IkReal> x597 = IKatan2WithCheck(IkReal(((0.405)+(((0.9)*cj3))+(((0.5)*(cj3*cj3)))+(((-1.0)*pz*x593)))),((((0.45)*x596))+(((0.5)*cj3*x596))+((x593*x594))+((x593*x595))),IKFAST_ATAN2_MAGTHRESH);
if(!x597.valid){
continue;
}
CheckValue<IkReal> x598=IKPowWithIntegerCheck(IKsign((((pz*x596))+((cj3*x594))+((cj3*x595))+(((0.9)*x594))+(((0.9)*x595)))),-1);
if(!x598.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x597.value)+(((1.5707963267949)*(x598.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x599=IKcos(j1);
IkReal x600=IKsin(j1);
IkReal x601=(px*sj2);
IkReal x602=((0.5)*sj3);
IkReal x603=((0.5)*cj3);
IkReal x604=(py*sj0);
IkReal x605=((1.0)*cj2);
IkReal x606=(cj0*py);
IkReal x607=((1.0)*sj2);
IkReal x608=(cj0*px);
IkReal x609=(pz*x599);
IkReal x610=(cj0*x599);
IkReal x611=(cj2*x600);
IkReal x612=((0.9)*x600);
evalcond[0]=((((-1.0)*x599*x603))+pz+(((-0.45)*x599))+((x602*x611)));
evalcond[1]=((-0.45)+((x600*x604))+((x600*x608))+x609+(((-1.0)*x603)));
evalcond[2]=((0.0475)+((x608*x612))+(((0.9)*x609))+(((-1.0)*pp))+((x604*x612)));
evalcond[3]=((((0.45)*x600))+((x600*x603))+(((-1.0)*x608))+(((-1.0)*x604))+((cj2*x599*x602)));
evalcond[4]=((((-1.0)*x605*x606))+((x601*x610))+(((-1.0)*pz*x600*x607))+((cj2*px*sj0))+((sj2*x599*x604)));
evalcond[5]=(((sj0*x601))+(((-1.0)*x599*x604*x605))+(((-1.0)*x599*x605*x608))+((pz*x611))+x602+(((-1.0)*x606*x607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x613=((-0.45)+(((-0.5)*cj3)));
CheckValue<IkReal> x616 = IKatan2WithCheck(IkReal(x613),((0.5)*cj2*sj3),IKFAST_ATAN2_MAGTHRESH);
if(!x616.valid){
continue;
}
IkReal x614=((1.0)*(x616.value));
if((((x613*x613)+(((0.25)*(cj2*cj2)*(sj3*sj3))))) < -0.00001)
continue;
CheckValue<IkReal> x617=IKPowWithIntegerCheck(IKabs(IKsqrt(((x613*x613)+(((0.25)*(cj2*cj2)*(sj3*sj3)))))),-1);
if(!x617.valid){
continue;
}
if( ((pz*(x617.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x617.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x615=IKasin((pz*(x617.value)));
j1array[0]=((((-1.0)*x615))+(((-1.0)*x614)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x614))+x615);
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j0eval[3];
IkReal x618=pz*pz;
IkReal x619=((1.0)*sj1);
IkReal x620=(pp*sj1);
IkReal x621=(sj2*sj3);
IkReal x622=((2.0)*cj1*pz);
j0eval[0]=((((-1.0)*x618*x619))+x620);
j0eval[1]=((IKabs(((((-1.0)*px*x619*x621))+(((0.9)*py))+((cj3*py))+(((-1.0)*py*x622)))))+(IKabs(((((0.9)*px))+(((-1.0)*px*x622))+((py*sj1*x621))+((cj3*px))))));
j0eval[2]=IKsign(((((-2.0)*sj1*x618))+(((2.0)*x620))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x623=pz*pz;
IkReal x624=(px*sj3);
IkReal x625=(cj1*cj2);
IkReal x626=((0.9)*sj1);
IkReal x627=(cj3*sj1);
IkReal x628=(py*sj3);
j0eval[0]=(pp+(((-1.0)*x623)));
j0eval[1]=((IKabs((((py*x626))+((py*x627))+((x625*x628))+(((-1.0)*sj2*x624)))))+(IKabs((((sj2*x628))+((x624*x625))+((px*x626))+((px*x627))))));
j0eval[2]=IKsign(((((-2.0)*x623))+(((2.0)*pp))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x629=pz*pz;
IkReal x630=((20.0)*pp);
IkReal x631=(pp*sj1);
IkReal x632=(sj1*x629);
IkReal x633=((18.0)*cj1*pz);
IkReal x634=((9.0)*sj1*sj2*sj3);
j0eval[0]=(x631+(((-1.0)*x632)));
j0eval[1]=((IKabs((((py*x634))+(((-0.95)*px))+(((-1.0)*px*x633))+((px*x630)))))+(IKabs((((py*x630))+(((-0.95)*py))+(((-1.0)*px*x634))+(((-1.0)*py*x633))))));
j0eval[2]=IKsign(((((-18.0)*x632))+(((18.0)*x631))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x635=((1.0)*pp);
IkReal x636=((-0.45)+pz+(((-0.5)*cj3)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((0.4525)+(((-1.0)*x635))+(((0.45)*cj3)));
evalcond[2]=x636;
evalcond[3]=x636;
evalcond[4]=((0.0475)+(((-1.0)*x635))+(((0.9)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
IkReal x637=pz*pz;
IkReal x638=(px*sj3);
IkReal x639=(py*sj3);
j0eval[0]=(pp+(((-1.0)*x637)));
j0eval[1]=((IKabs(((((-1.0)*sj2*x638))+((cj2*x639)))))+(IKabs((((sj2*x639))+((cj2*x638))))));
j0eval[2]=IKsign(((((2.0)*pp))+(((-2.0)*x637))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
IkReal x640=pz*pz;
IkReal x641=cj2*cj2;
IkReal x642=((2.0)*cj2);
IkReal x643=(px*sj3);
IkReal x644=((1.0)*cj2);
IkReal x645=(py*sj3);
j0eval[0]=((((-1.0)*x640*x644))+((cj2*pp)));
j0eval[1]=IKsign((((pp*x642))+(((-1.0)*x640*x642))));
j0eval[2]=((IKabs((((x641*x645))+(((-1.0)*sj2*x643*x644)))))+(IKabs((((cj2*sj2*x645))+((x641*x643))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
IkReal x646=pz*pz;
IkReal x647=cj2*cj2;
IkReal x648=(cj2*pp);
IkReal x649=(cj2*sj2);
IkReal x650=(px*sj3);
IkReal x651=((1.0)*py*sj3);
IkReal x652=(cj2*x646);
j0eval[0]=((((-1.0)*x648))+x652);
j0eval[1]=IKsign(((((2.0)*x652))+(((-2.0)*x648))));
j0eval[2]=((IKabs((((x649*x650))+(((-1.0)*x647*x651)))))+(IKabs(((((-1.0)*x649*x651))+(((-1.0)*x647*x650))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x653=((1.0)*pp);
IkReal x654=x636;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.4525)+(((-1.0)*x653))+(((0.45)*cj3)));
evalcond[2]=x654;
evalcond[3]=x654;
evalcond[4]=((0.0475)+(((0.9)*pz))+(((-1.0)*x653)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x655=pz*pz;
j0eval[0]=((((-1.0)*pp))+x655);
j0eval[1]=IKsign(((((-2.0)*pp))+(((2.0)*x655))));
j0eval[2]=((IKabs((px*sj3)))+(IKabs((py*sj3))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x656=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.9025)+(((-1.0)*x656)));
evalcond[2]=((-0.95)+pz);
evalcond[3]=((0.0475)+(((0.9)*pz))+(((-1.0)*x656)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x658 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x658.valid){
continue;
}
IkReal x657=x658.value;
j0array[0]=((-1.0)*x657);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x657)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j0))))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x659=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((0.0025)+(((-1.0)*x659)));
evalcond[2]=((0.05)+pz);
evalcond[3]=((0.0475)+(((0.9)*pz))+(((-1.0)*x659)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x661 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x661.valid){
continue;
}
IkReal x660=x661.value;
j0array[0]=((-1.0)*x660);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x660)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j0))))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x662=IKPowWithIntegerCheck(IKsign(((((-2.0)*pp))+(((2.0)*(pz*pz))))),-1);
if(!x662.valid){
continue;
}
CheckValue<IkReal> x663 = IKatan2WithCheck(IkReal((px*sj3)),((-1.0)*py*sj3),IKFAST_ATAN2_MAGTHRESH);
if(!x663.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x662.value)))+(x663.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x664=IKsin(j0);
IkReal x665=IKcos(j0);
IkReal x666=((1.0)*x665);
evalcond[0]=((((-1.0)*py*x664))+(((-1.0)*px*x666)));
evalcond[1]=((((0.5)*sj3))+((px*x664))+(((-1.0)*py*x666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x667=((1.0)*pp);
IkReal x668=x636;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.4525)+(((-1.0)*x667))+(((0.45)*cj3)));
evalcond[2]=x668;
evalcond[3]=x668;
evalcond[4]=((0.0475)+(((0.9)*pz))+(((-1.0)*x667)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x669=pz*pz;
j0eval[0]=((((-1.0)*x669))+pp);
j0eval[1]=IKsign(((((2.0)*pp))+(((-2.0)*x669))));
j0eval[2]=((IKabs((px*sj3)))+(IKabs((py*sj3))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x670=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.9025)+(((-1.0)*x670)));
evalcond[2]=((-0.95)+pz);
evalcond[3]=((0.0475)+(((0.9)*pz))+(((-1.0)*x670)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x672 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x672.valid){
continue;
}
IkReal x671=x672.value;
j0array[0]=((-1.0)*x671);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x671)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j0))))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x673=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((0.0025)+(((-1.0)*x673)));
evalcond[2]=((0.05)+pz);
evalcond[3]=((0.0475)+(((0.9)*pz))+(((-1.0)*x673)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x675 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x675.valid){
continue;
}
IkReal x674=x675.value;
j0array[0]=((-1.0)*x674);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x674)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j0))))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x676=IKPowWithIntegerCheck(IKsign(((((2.0)*pp))+(((-2.0)*(pz*pz))))),-1);
if(!x676.valid){
continue;
}
CheckValue<IkReal> x677 = IKatan2WithCheck(IkReal((px*sj3)),((-1.0)*py*sj3),IKFAST_ATAN2_MAGTHRESH);
if(!x677.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x676.value)))+(x677.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x678=IKsin(j0);
IkReal x679=IKcos(j0);
IkReal x680=((1.0)*x679);
evalcond[0]=((((-1.0)*py*x678))+(((-1.0)*px*x680)));
evalcond[1]=((((-1.0)*py*x680))+(((-0.5)*sj3))+((px*x678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x681=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.9025)+(((-1.0)*x681)));
evalcond[2]=((-0.95)+pz);
evalcond[3]=((0.0475)+(((-1.0)*x681))+(((0.9)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(((((-1.0)*cj2*py))+((px*sj2)))))+(IKabs((((cj2*px))+((py*sj2))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x682=((1.0)*py);
j0eval[0]=((IKabs(((((-1.0)*cj2*x682))+((px*sj2)))))+(IKabs(((((-1.0)*cj2*px))+(((-1.0)*sj2*x682))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x683=((1.0)*cj2);
CheckValue<IkReal> x685 = IKatan2WithCheck(IkReal(((((-1.0)*px*x683))+(((-1.0)*py*sj2)))),(((px*sj2))+(((-1.0)*py*x683))),IKFAST_ATAN2_MAGTHRESH);
if(!x685.valid){
continue;
}
IkReal x684=x685.value;
j0array[0]=((-1.0)*x684);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x684)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x686=IKcos(j0);
IkReal x687=IKsin(j0);
IkReal x688=(px*x687);
IkReal x689=((1.0)*x686);
IkReal x690=(py*x687);
evalcond[0]=(x688+(((-1.0)*py*x689)));
evalcond[1]=((((-1.0)*px*x689))+(((-1.0)*x690)));
evalcond[2]=((((-1.0)*cj2*py*x689))+((px*sj2*x686))+((sj2*x690))+((cj2*x688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x692 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*py))+((px*sj2)))),(((cj2*px))+((py*sj2))),IKFAST_ATAN2_MAGTHRESH);
if(!x692.valid){
continue;
}
IkReal x691=x692.value;
j0array[0]=((-1.0)*x691);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x691)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x693=IKcos(j0);
IkReal x694=IKsin(j0);
IkReal x695=(px*x694);
IkReal x696=((1.0)*x693);
IkReal x697=((1.0)*py*x694);
evalcond[0]=(x695+(((-1.0)*py*x696)));
evalcond[1]=((((-1.0)*px*x696))+(((-1.0)*x697)));
evalcond[2]=((((-1.0)*cj2*x697))+((sj2*x695))+(((-1.0)*cj2*px*x696))+(((-1.0)*py*sj2*x696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x699 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x699.valid){
continue;
}
IkReal x698=x699.value;
j0array[0]=((-1.0)*x698);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x698)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x700=IKcos(j0);
IkReal x701=IKsin(j0);
IkReal x702=(py*sj2);
IkReal x703=(px*sj2);
IkReal x704=(cj2*px);
IkReal x705=((1.0)*x700);
IkReal x706=((1.0)*py*x701);
evalcond[0]=((((-1.0)*px*x705))+(((-1.0)*x706)));
evalcond[1]=(((x701*x704))+((x701*x702))+((x700*x703))+(((-1.0)*cj2*py*x705)));
evalcond[2]=(((x701*x703))+(((-1.0)*x702*x705))+(((-1.0)*cj2*x706))+(((-1.0)*x704*x705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x707=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((0.0025)+(((-1.0)*x707)));
evalcond[2]=((0.05)+pz);
evalcond[3]=((0.0475)+(((0.9)*pz))+(((-1.0)*x707)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((IKabs(((((-1.0)*cj2*py))+((px*sj2)))))+(IKabs((((cj2*px))+((py*sj2))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x708=((1.0)*py);
j0eval[0]=((IKabs(((((-1.0)*cj2*px))+(((-1.0)*sj2*x708)))))+(IKabs(((((-1.0)*cj2*x708))+((px*sj2))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x709=((1.0)*cj2);
CheckValue<IkReal> x711 = IKatan2WithCheck(IkReal(((((-1.0)*px*x709))+(((-1.0)*py*sj2)))),((((-1.0)*py*x709))+((px*sj2))),IKFAST_ATAN2_MAGTHRESH);
if(!x711.valid){
continue;
}
IkReal x710=x711.value;
j0array[0]=((-1.0)*x710);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x710)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x712=IKcos(j0);
IkReal x713=IKsin(j0);
IkReal x714=(px*x713);
IkReal x715=((1.0)*x712);
IkReal x716=(py*x713);
evalcond[0]=(x714+(((-1.0)*py*x715)));
evalcond[1]=((((-1.0)*x716))+(((-1.0)*px*x715)));
evalcond[2]=(((sj2*x716))+(((-1.0)*cj2*py*x715))+((cj2*x714))+((px*sj2*x712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x718 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*py))+((px*sj2)))),(((cj2*px))+((py*sj2))),IKFAST_ATAN2_MAGTHRESH);
if(!x718.valid){
continue;
}
IkReal x717=x718.value;
j0array[0]=((-1.0)*x717);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x717)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x719=IKcos(j0);
IkReal x720=IKsin(j0);
IkReal x721=(px*x720);
IkReal x722=((1.0)*x719);
IkReal x723=((1.0)*py*x720);
evalcond[0]=(x721+(((-1.0)*py*x722)));
evalcond[1]=((((-1.0)*px*x722))+(((-1.0)*x723)));
evalcond[2]=((((-1.0)*cj2*x723))+((sj2*x721))+(((-1.0)*py*sj2*x722))+(((-1.0)*cj2*px*x722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x725 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x725.valid){
continue;
}
IkReal x724=x725.value;
j0array[0]=((-1.0)*x724);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x724)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x726=IKcos(j0);
IkReal x727=IKsin(j0);
IkReal x728=(py*sj2);
IkReal x729=(px*sj2);
IkReal x730=(cj2*px);
IkReal x731=((1.0)*x726);
IkReal x732=((1.0)*py*x727);
evalcond[0]=((((-1.0)*px*x731))+(((-1.0)*x732)));
evalcond[1]=(((x727*x730))+((x727*x728))+((x726*x729))+(((-1.0)*cj2*py*x731)));
evalcond[2]=(((x727*x729))+(((-1.0)*cj2*x732))+(((-1.0)*x730*x731))+(((-1.0)*x728*x731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x733=cj2*cj2;
IkReal x734=((2.0)*cj2);
IkReal x735=(cj2*sj2);
IkReal x736=(px*sj3);
IkReal x737=((1.0)*py*sj3);
CheckValue<IkReal> x738 = IKatan2WithCheck(IkReal((((x735*x736))+(((-1.0)*x733*x737)))),((((-1.0)*x735*x737))+(((-1.0)*x733*x736))),IKFAST_ATAN2_MAGTHRESH);
if(!x738.valid){
continue;
}
CheckValue<IkReal> x739=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*x734))+((x734*(pz*pz))))),-1);
if(!x739.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x738.value)+(((1.5707963267949)*(x739.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x740=IKcos(j0);
IkReal x741=IKsin(j0);
IkReal x742=((0.5)*sj3);
IkReal x743=(px*x741);
IkReal x744=((1.0)*x740);
IkReal x745=(py*x741);
evalcond[0]=((((-1.0)*py*x744))+((sj2*x742))+x743);
evalcond[1]=((((-1.0)*px*x744))+((cj2*x742))+(((-1.0)*x745)));
evalcond[2]=(((px*sj2*x740))+((cj2*x743))+(((-1.0)*cj2*py*x744))+((sj2*x745)));
evalcond[3]=((((-1.0)*cj2*px*x744))+(((-1.0)*py*sj2*x744))+(((-1.0)*cj2*x745))+((sj2*x743))+x742);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x746=cj2*cj2;
IkReal x747=((2.0)*cj2);
IkReal x748=(px*sj3);
IkReal x749=(cj2*sj2);
IkReal x750=(py*sj3);
CheckValue<IkReal> x751=IKPowWithIntegerCheck(IKsign((((pp*x747))+(((-1.0)*x747*(pz*pz))))),-1);
if(!x751.valid){
continue;
}
CheckValue<IkReal> x752 = IKatan2WithCheck(IkReal(((((-1.0)*x748*x749))+((x746*x750)))),(((x746*x748))+((x749*x750))),IKFAST_ATAN2_MAGTHRESH);
if(!x752.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x751.value)))+(x752.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x753=IKcos(j0);
IkReal x754=IKsin(j0);
IkReal x755=((0.5)*sj3);
IkReal x756=(px*x754);
IkReal x757=((1.0)*x753);
IkReal x758=(py*x754);
evalcond[0]=((((-1.0)*py*x757))+x756+((sj2*x755)));
evalcond[1]=((((-1.0)*px*x757))+((cj2*x755))+(((-1.0)*x758)));
evalcond[2]=(((px*sj2*x753))+((cj2*x756))+((sj2*x758))+(((-1.0)*cj2*py*x757)));
evalcond[3]=((((-1.0)*py*sj2*x757))+(((-1.0)*cj2*px*x757))+(((-1.0)*cj2*x758))+x755+((sj2*x756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x759=(px*sj3);
IkReal x760=(py*sj3);
CheckValue<IkReal> x761=IKPowWithIntegerCheck(IKsign(((((2.0)*pp))+(((-2.0)*(pz*pz))))),-1);
if(!x761.valid){
continue;
}
CheckValue<IkReal> x762 = IKatan2WithCheck(IkReal((((cj2*x760))+(((-1.0)*sj2*x759)))),(((sj2*x760))+((cj2*x759))),IKFAST_ATAN2_MAGTHRESH);
if(!x762.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x761.value)))+(x762.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x763=IKcos(j0);
IkReal x764=IKsin(j0);
IkReal x765=((0.5)*sj3);
IkReal x766=(px*x764);
IkReal x767=((1.0)*x763);
IkReal x768=(py*x764);
evalcond[0]=((((-1.0)*py*x767))+((sj2*x765))+x766);
evalcond[1]=(((cj2*x765))+(((-1.0)*px*x767))+(((-1.0)*x768)));
evalcond[2]=(((cj2*x766))+((sj2*x768))+(((-1.0)*cj2*py*x767))+((px*sj2*x763)));
evalcond[3]=(((sj2*x766))+(((-1.0)*py*sj2*x767))+x765+(((-1.0)*cj2*px*x767))+(((-1.0)*cj2*x768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x769=((0.5)*cj3);
IkReal x770=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((0.4525)+(((0.45)*cj3))+(((-1.0)*x770)));
evalcond[2]=((0.45)+pz+x769);
evalcond[3]=((-0.45)+(((-1.0)*x769))+(((-1.0)*pz)));
evalcond[4]=((0.0475)+(((-1.0)*x770))+(((-0.9)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x771=pz*pz;
IkReal x772=(px*sj3);
IkReal x773=(py*sj3);
j0eval[0]=((((-1.0)*pp))+x771);
j0eval[1]=IKsign(((((-2.0)*pp))+(((2.0)*x771))));
j0eval[2]=((IKabs((((cj2*x772))+(((-1.0)*sj2*x773)))))+(IKabs((((cj2*x773))+((sj2*x772))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x774=pz*pz;
IkReal x775=cj2*cj2;
IkReal x776=(cj2*pp);
IkReal x777=(px*sj3);
IkReal x778=(cj2*sj2);
IkReal x779=(py*sj3);
IkReal x780=(cj2*x774);
j0eval[0]=(x780+(((-1.0)*x776)));
j0eval[1]=IKsign(((((-2.0)*x776))+(((2.0)*x780))));
j0eval[2]=((IKabs((((x777*x778))+((x775*x779)))))+(IKabs(((((-1.0)*x778*x779))+((x775*x777))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x781=cj2*cj2;
IkReal x782=pz*pz;
IkReal x783=((2.0)*cj2);
IkReal x784=((1.0)*sj3);
IkReal x785=(cj2*sj2);
j0eval[0]=(((cj2*pp))+(((-1.0)*cj2*x782)));
j0eval[1]=((IKabs((((py*sj3*x785))+(((-1.0)*px*x781*x784)))))+(IKabs(((((-1.0)*py*x781*x784))+(((-1.0)*px*x784*x785))))));
j0eval[2]=IKsign((((pp*x783))+(((-1.0)*x782*x783))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x786=((0.5)*cj3);
IkReal x787=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.4525)+(((-1.0)*x787))+(((0.45)*cj3)));
evalcond[2]=((0.45)+pz+x786);
evalcond[3]=((-0.45)+(((-1.0)*x786))+(((-1.0)*pz)));
evalcond[4]=((0.0475)+(((-1.0)*x787))+(((-0.9)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x788=pz*pz;
j0eval[0]=((((-1.0)*pp))+x788);
j0eval[1]=IKsign(((((-2.0)*pp))+(((2.0)*x788))));
j0eval[2]=((IKabs((px*sj3)))+(IKabs((py*sj3))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x789=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.9025)+(((-1.0)*x789)));
evalcond[2]=((0.95)+pz);
evalcond[3]=((0.0475)+(((-1.0)*x789))+(((-0.9)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x791 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x791.valid){
continue;
}
IkReal x790=x791.value;
j0array[0]=((-1.0)*x790);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x790)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j0))))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x792=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((0.0025)+(((-1.0)*x792)));
evalcond[2]=((-0.05)+pz);
evalcond[3]=((0.0475)+(((-1.0)*x792))+(((-0.9)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x794 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x794.valid){
continue;
}
IkReal x793=x794.value;
j0array[0]=((-1.0)*x793);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x793)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j0))))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x795=IKPowWithIntegerCheck(IKsign(((((-2.0)*pp))+(((2.0)*(pz*pz))))),-1);
if(!x795.valid){
continue;
}
CheckValue<IkReal> x796 = IKatan2WithCheck(IkReal((px*sj3)),((-1.0)*py*sj3),IKFAST_ATAN2_MAGTHRESH);
if(!x796.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x795.value)))+(x796.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x797=IKsin(j0);
IkReal x798=IKcos(j0);
IkReal x799=((1.0)*x798);
evalcond[0]=((((-1.0)*px*x799))+(((-1.0)*py*x797)));
evalcond[1]=((((0.5)*sj3))+((px*x797))+(((-1.0)*py*x799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x800=((0.5)*cj3);
IkReal x801=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.4525)+(((0.45)*cj3))+(((-1.0)*x801)));
evalcond[2]=((0.45)+pz+x800);
evalcond[3]=((-0.45)+(((-1.0)*pz))+(((-1.0)*x800)));
evalcond[4]=((0.0475)+(((-1.0)*x801))+(((-0.9)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x802=pz*pz;
j0eval[0]=((((-1.0)*x802))+pp);
j0eval[1]=IKsign(((((2.0)*pp))+(((-2.0)*x802))));
j0eval[2]=((IKabs((px*sj3)))+(IKabs((py*sj3))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x803=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.9025)+(((-1.0)*x803)));
evalcond[2]=((0.95)+pz);
evalcond[3]=((0.0475)+(((-1.0)*x803))+(((-0.9)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x805 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x805.valid){
continue;
}
IkReal x804=x805.value;
j0array[0]=((-1.0)*x804);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x804)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j0))))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x806=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((0.0025)+(((-1.0)*x806)));
evalcond[2]=((-0.05)+pz);
evalcond[3]=((0.0475)+(((-1.0)*x806))+(((-0.9)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x808 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x808.valid){
continue;
}
IkReal x807=x808.value;
j0array[0]=((-1.0)*x807);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x807)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j0))))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x809=IKPowWithIntegerCheck(IKsign(((((2.0)*pp))+(((-2.0)*(pz*pz))))),-1);
if(!x809.valid){
continue;
}
CheckValue<IkReal> x810 = IKatan2WithCheck(IkReal((px*sj3)),((-1.0)*py*sj3),IKFAST_ATAN2_MAGTHRESH);
if(!x810.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x809.value)))+(x810.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x811=IKsin(j0);
IkReal x812=IKcos(j0);
IkReal x813=((1.0)*x812);
evalcond[0]=((((-1.0)*py*x811))+(((-1.0)*px*x813)));
evalcond[1]=(((px*x811))+(((-1.0)*py*x813))+(((-0.5)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x814=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.9025)+(((-1.0)*x814)));
evalcond[2]=((0.95)+pz);
evalcond[3]=((0.0475)+(((-1.0)*x814))+(((-0.9)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs((((cj2*px))+(((-1.0)*py*sj2)))))+(IKabs((((cj2*py))+((px*sj2))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal x815=((1.0)*sj2);
j0eval[0]=((IKabs(((((-1.0)*cj2*py))+(((-1.0)*px*x815)))))+(IKabs(((((-1.0)*py*x815))+((cj2*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x816=((1.0)*py);
CheckValue<IkReal> x818 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*x816))+(((-1.0)*px*sj2)))),(((cj2*px))+(((-1.0)*sj2*x816))),IKFAST_ATAN2_MAGTHRESH);
if(!x818.valid){
continue;
}
IkReal x817=x818.value;
j0array[0]=((-1.0)*x817);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x817)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x819=IKcos(j0);
IkReal x820=IKsin(j0);
IkReal x821=(px*x820);
IkReal x822=((1.0)*x819);
IkReal x823=(py*x820);
evalcond[0]=((((-1.0)*py*x822))+x821);
evalcond[1]=((((-1.0)*x823))+(((-1.0)*px*x822)));
evalcond[2]=(((cj2*px*x819))+((sj2*x821))+(((-1.0)*py*sj2*x822))+((cj2*x823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x825 = IKatan2WithCheck(IkReal((((cj2*px))+(((-1.0)*py*sj2)))),(((cj2*py))+((px*sj2))),IKFAST_ATAN2_MAGTHRESH);
if(!x825.valid){
continue;
}
IkReal x824=x825.value;
j0array[0]=((-1.0)*x824);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x824)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x826=IKcos(j0);
IkReal x827=IKsin(j0);
IkReal x828=(px*x827);
IkReal x829=((1.0)*x826);
IkReal x830=((1.0)*py*x827);
evalcond[0]=((((-1.0)*py*x829))+x828);
evalcond[1]=((((-1.0)*px*x829))+(((-1.0)*x830)));
evalcond[2]=((((-1.0)*cj2*py*x829))+(((-1.0)*px*sj2*x829))+((cj2*x828))+(((-1.0)*sj2*x830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x832 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x832.valid){
continue;
}
IkReal x831=x832.value;
j0array[0]=((-1.0)*x831);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x831)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x833=IKsin(j0);
IkReal x834=IKcos(j0);
IkReal x835=(py*sj2);
IkReal x836=((1.0)*x834);
IkReal x837=(py*x833);
IkReal x838=(px*x833);
evalcond[0]=((((-1.0)*px*x836))+(((-1.0)*x837)));
evalcond[1]=((((-1.0)*x835*x836))+((cj2*px*x834))+((cj2*x837))+((sj2*x838)));
evalcond[2]=((((-1.0)*x833*x835))+(((-1.0)*cj2*py*x836))+((cj2*x838))+(((-1.0)*px*sj2*x836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x839=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((0.0025)+(((-1.0)*x839)));
evalcond[2]=((-0.05)+pz);
evalcond[3]=((0.0475)+(((-1.0)*x839))+(((-0.9)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((IKabs((((cj2*px))+(((-1.0)*py*sj2)))))+(IKabs((((cj2*py))+((px*sj2))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x840=((1.0)*sj2);
j0eval[0]=((IKabs(((((-1.0)*py*x840))+((cj2*px)))))+(IKabs(((((-1.0)*px*x840))+(((-1.0)*cj2*py))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x841=((1.0)*py);
CheckValue<IkReal> x843 = IKatan2WithCheck(IkReal(((((-1.0)*px*sj2))+(((-1.0)*cj2*x841)))),((((-1.0)*sj2*x841))+((cj2*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x843.valid){
continue;
}
IkReal x842=x843.value;
j0array[0]=((-1.0)*x842);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x842)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x844=IKcos(j0);
IkReal x845=IKsin(j0);
IkReal x846=(px*x845);
IkReal x847=((1.0)*x844);
IkReal x848=(py*x845);
evalcond[0]=((((-1.0)*py*x847))+x846);
evalcond[1]=((((-1.0)*px*x847))+(((-1.0)*x848)));
evalcond[2]=(((cj2*px*x844))+((sj2*x846))+((cj2*x848))+(((-1.0)*py*sj2*x847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x850 = IKatan2WithCheck(IkReal((((cj2*px))+(((-1.0)*py*sj2)))),(((cj2*py))+((px*sj2))),IKFAST_ATAN2_MAGTHRESH);
if(!x850.valid){
continue;
}
IkReal x849=x850.value;
j0array[0]=((-1.0)*x849);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x849)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x851=IKcos(j0);
IkReal x852=IKsin(j0);
IkReal x853=(px*x852);
IkReal x854=((1.0)*x851);
IkReal x855=((1.0)*py*x852);
evalcond[0]=((((-1.0)*py*x854))+x853);
evalcond[1]=((((-1.0)*x855))+(((-1.0)*px*x854)));
evalcond[2]=(((cj2*x853))+(((-1.0)*cj2*py*x854))+(((-1.0)*px*sj2*x854))+(((-1.0)*sj2*x855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x857 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x857.valid){
continue;
}
IkReal x856=x857.value;
j0array[0]=((-1.0)*x856);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x856)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x858=IKsin(j0);
IkReal x859=IKcos(j0);
IkReal x860=(py*sj2);
IkReal x861=((1.0)*x859);
IkReal x862=(py*x858);
IkReal x863=(px*x858);
evalcond[0]=((((-1.0)*x862))+(((-1.0)*px*x861)));
evalcond[1]=(((sj2*x863))+((cj2*x862))+(((-1.0)*x860*x861))+((cj2*px*x859)));
evalcond[2]=(((cj2*x863))+(((-1.0)*cj2*py*x861))+(((-1.0)*px*sj2*x861))+(((-1.0)*x858*x860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x864=cj2*cj2;
IkReal x865=((2.0)*cj2);
IkReal x866=((1.0)*sj3);
IkReal x867=(cj2*sj2);
CheckValue<IkReal> x868=IKPowWithIntegerCheck(IKsign((((pp*x865))+(((-1.0)*x865*(pz*pz))))),-1);
if(!x868.valid){
continue;
}
CheckValue<IkReal> x869 = IKatan2WithCheck(IkReal(((((-1.0)*px*x866*x867))+(((-1.0)*py*x864*x866)))),(((py*sj3*x867))+(((-1.0)*px*x864*x866))),IKFAST_ATAN2_MAGTHRESH);
if(!x869.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x868.value)))+(x869.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x870=IKcos(j0);
IkReal x871=IKsin(j0);
IkReal x872=((0.5)*sj3);
IkReal x873=(px*x871);
IkReal x874=((1.0)*x870);
IkReal x875=(py*x871);
evalcond[0]=(((sj2*x872))+(((-1.0)*py*x874))+x873);
evalcond[1]=((((-1.0)*cj2*x872))+(((-1.0)*x875))+(((-1.0)*px*x874)));
evalcond[2]=(((cj2*x873))+(((-1.0)*cj2*py*x874))+(((-1.0)*sj2*x875))+(((-1.0)*px*sj2*x874)));
evalcond[3]=(((sj2*x873))+((cj2*px*x870))+((cj2*x875))+(((-1.0)*py*sj2*x874))+x872);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x876=cj2*cj2;
IkReal x877=((2.0)*cj2);
IkReal x878=(px*sj3);
IkReal x879=(cj2*sj2);
IkReal x880=(py*sj3);
CheckValue<IkReal> x881=IKPowWithIntegerCheck(IKsign((((x877*(pz*pz)))+(((-1.0)*pp*x877)))),-1);
if(!x881.valid){
continue;
}
CheckValue<IkReal> x882 = IKatan2WithCheck(IkReal((((x878*x879))+((x876*x880)))),(((x876*x878))+(((-1.0)*x879*x880))),IKFAST_ATAN2_MAGTHRESH);
if(!x882.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x881.value)))+(x882.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x883=IKcos(j0);
IkReal x884=IKsin(j0);
IkReal x885=((0.5)*sj3);
IkReal x886=(px*x884);
IkReal x887=((1.0)*x883);
IkReal x888=(py*x884);
evalcond[0]=((((-1.0)*py*x887))+((sj2*x885))+x886);
evalcond[1]=((((-1.0)*cj2*x885))+(((-1.0)*x888))+(((-1.0)*px*x887)));
evalcond[2]=(((cj2*x886))+(((-1.0)*sj2*x888))+(((-1.0)*cj2*py*x887))+(((-1.0)*px*sj2*x887)));
evalcond[3]=(((cj2*x888))+((cj2*px*x883))+((sj2*x886))+(((-1.0)*py*sj2*x887))+x885);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x889=(px*sj3);
IkReal x890=(py*sj3);
CheckValue<IkReal> x891=IKPowWithIntegerCheck(IKsign(((((-2.0)*pp))+(((2.0)*(pz*pz))))),-1);
if(!x891.valid){
continue;
}
CheckValue<IkReal> x892 = IKatan2WithCheck(IkReal((((cj2*x890))+((sj2*x889)))),(((cj2*x889))+(((-1.0)*sj2*x890))),IKFAST_ATAN2_MAGTHRESH);
if(!x892.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x891.value)))+(x892.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x893=IKcos(j0);
IkReal x894=IKsin(j0);
IkReal x895=((0.5)*sj3);
IkReal x896=(px*x894);
IkReal x897=((1.0)*x893);
IkReal x898=(py*x894);
evalcond[0]=((((-1.0)*py*x897))+((sj2*x895))+x896);
evalcond[1]=((((-1.0)*cj2*x895))+(((-1.0)*x898))+(((-1.0)*px*x897)));
evalcond[2]=(((cj2*x896))+(((-1.0)*sj2*x898))+(((-1.0)*cj2*py*x897))+(((-1.0)*px*sj2*x897)));
evalcond[3]=(((cj2*x898))+((cj2*px*x893))+((sj2*x896))+(((-1.0)*py*sj2*x897))+x895);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x899=((20.0)*pp);
IkReal x900=((18.0)*sj1);
IkReal x901=((18.0)*cj1*pz);
IkReal x902=((9.0)*sj1*sj2*sj3);
CheckValue<IkReal> x903=IKPowWithIntegerCheck(IKsign((((pp*x900))+(((-1.0)*x900*(pz*pz))))),-1);
if(!x903.valid){
continue;
}
CheckValue<IkReal> x904 = IKatan2WithCheck(IkReal(((((-1.0)*px*x902))+((py*x899))+(((-0.95)*py))+(((-1.0)*py*x901)))),((((-1.0)*px*x901))+(((-0.95)*px))+((px*x899))+((py*x902))),IKFAST_ATAN2_MAGTHRESH);
if(!x904.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x903.value)))+(x904.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x905=IKcos(j0);
IkReal x906=IKsin(j0);
IkReal x907=(cj1*sj2);
IkReal x908=((0.9)*sj1);
IkReal x909=((0.5)*sj3);
IkReal x910=((0.5)*cj3);
IkReal x911=(cj1*pz);
IkReal x912=(pz*sj1);
IkReal x913=(px*x906);
IkReal x914=(px*x905);
IkReal x915=(py*x906);
IkReal x916=((1.0)*cj1*cj2);
IkReal x917=((1.0)*py*x905);
evalcond[0]=(((sj2*x909))+(((-1.0)*x917))+x913);
evalcond[1]=((-0.45)+(((-1.0)*x910))+x911+((sj1*x914))+((sj1*x915)));
evalcond[2]=((0.0475)+(((0.9)*x911))+(((-1.0)*pp))+((x908*x914))+((x908*x915)));
evalcond[3]=((((0.45)*sj1))+(((-1.0)*x914))+(((-1.0)*x915))+((sj1*x910))+((cj1*cj2*x909)));
evalcond[4]=(((cj2*x913))+((x907*x914))+((x907*x915))+(((-1.0)*sj2*x912))+(((-1.0)*cj2*x917)));
evalcond[5]=(((sj2*x913))+((cj2*x912))+(((-1.0)*sj2*x917))+(((-1.0)*x914*x916))+x909+(((-1.0)*x915*x916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x918=(px*sj3);
IkReal x919=(cj1*cj2);
IkReal x920=((0.9)*sj1);
IkReal x921=(cj3*sj1);
IkReal x922=(py*sj3);
CheckValue<IkReal> x923=IKPowWithIntegerCheck(IKsign(((((2.0)*pp))+(((-2.0)*(pz*pz))))),-1);
if(!x923.valid){
continue;
}
CheckValue<IkReal> x924 = IKatan2WithCheck(IkReal((((x919*x922))+((py*x921))+((py*x920))+(((-1.0)*sj2*x918)))),(((x918*x919))+((px*x920))+((px*x921))+((sj2*x922))),IKFAST_ATAN2_MAGTHRESH);
if(!x924.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x923.value)))+(x924.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x925=IKcos(j0);
IkReal x926=IKsin(j0);
IkReal x927=(cj1*sj2);
IkReal x928=((0.9)*sj1);
IkReal x929=((0.5)*sj3);
IkReal x930=((0.5)*cj3);
IkReal x931=(cj1*pz);
IkReal x932=(pz*sj1);
IkReal x933=(px*x926);
IkReal x934=(px*x925);
IkReal x935=(py*x926);
IkReal x936=((1.0)*cj1*cj2);
IkReal x937=((1.0)*py*x925);
evalcond[0]=(x933+((sj2*x929))+(((-1.0)*x937)));
evalcond[1]=((-0.45)+((sj1*x934))+((sj1*x935))+x931+(((-1.0)*x930)));
evalcond[2]=((0.0475)+((x928*x935))+((x928*x934))+(((-1.0)*pp))+(((0.9)*x931)));
evalcond[3]=(((cj1*cj2*x929))+((sj1*x930))+(((-1.0)*x935))+(((-1.0)*x934))+(((0.45)*sj1)));
evalcond[4]=((((-1.0)*cj2*x937))+((x927*x935))+((x927*x934))+((cj2*x933))+(((-1.0)*sj2*x932)));
evalcond[5]=((((-1.0)*x935*x936))+(((-1.0)*sj2*x937))+(((-1.0)*x934*x936))+((cj2*x932))+((sj2*x933))+x929);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x938=((2.0)*sj1);
IkReal x939=((2.0)*cj1*pz);
IkReal x940=(sj1*sj2*sj3);
CheckValue<IkReal> x941 = IKatan2WithCheck(IkReal(((((-1.0)*px*x940))+(((0.9)*py))+(((-1.0)*py*x939))+((cj3*py)))),((((-1.0)*px*x939))+(((0.9)*px))+((cj3*px))+((py*x940))),IKFAST_ATAN2_MAGTHRESH);
if(!x941.valid){
continue;
}
CheckValue<IkReal> x942=IKPowWithIntegerCheck(IKsign((((pp*x938))+(((-1.0)*x938*(pz*pz))))),-1);
if(!x942.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x941.value)+(((1.5707963267949)*(x942.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x943=IKcos(j0);
IkReal x944=IKsin(j0);
IkReal x945=(cj1*sj2);
IkReal x946=((0.9)*sj1);
IkReal x947=((0.5)*sj3);
IkReal x948=((0.5)*cj3);
IkReal x949=(cj1*pz);
IkReal x950=(pz*sj1);
IkReal x951=(px*x944);
IkReal x952=(px*x943);
IkReal x953=(py*x944);
IkReal x954=((1.0)*cj1*cj2);
IkReal x955=((1.0)*py*x943);
evalcond[0]=(((sj2*x947))+(((-1.0)*x955))+x951);
evalcond[1]=((-0.45)+(((-1.0)*x948))+((sj1*x952))+((sj1*x953))+x949);
evalcond[2]=((0.0475)+(((-1.0)*pp))+((x946*x953))+((x946*x952))+(((0.9)*x949)));
evalcond[3]=(((sj1*x948))+((cj1*cj2*x947))+(((-1.0)*x952))+(((-1.0)*x953))+(((0.45)*sj1)));
evalcond[4]=((((-1.0)*cj2*x955))+((cj2*x951))+(((-1.0)*sj2*x950))+((x945*x952))+((x945*x953)));
evalcond[5]=(((cj2*x950))+(((-1.0)*x953*x954))+(((-1.0)*sj2*x955))+((sj2*x951))+(((-1.0)*x952*x954))+x947);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x958 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x958.valid){
continue;
}
IkReal x956=((1.0)*(x958.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x959=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x959.valid){
continue;
}
if( (((0.5)*sj2*sj3*(x959.value))) < -1-IKFAST_SINCOS_THRESH || (((0.5)*sj2*sj3*(x959.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x957=IKasin(((0.5)*sj2*sj3*(x959.value)));
j0array[0]=((((-1.0)*x957))+(((-1.0)*x956)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x956))+x957);
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1eval[3];
IkReal x960=(cj0*px);
IkReal x961=((2.0)*pz);
IkReal x962=(py*sj0);
IkReal x963=(cj2*sj3);
IkReal x964=((1.11111111111111)*cj3);
j1eval[0]=(((x962*x964))+(((1.11111111111111)*pz*x963))+((x960*x964))+x962+x960);
j1eval[1]=IKsign((((pz*x963))+(((0.9)*x962))+(((0.9)*x960))+((cj3*x962))+((cj3*x960))));
j1eval[2]=((IKabs(((0.405)+(((-1.0)*pz*x961))+(((0.9)*cj3))+(((0.5)*(cj3*cj3))))))+(IKabs(((((0.5)*cj3*x963))+((x961*x962))+(((0.45)*x963))+((x960*x961))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x965=(cj0*px);
IkReal x966=(cj2*sj3);
IkReal x967=((10.0)*pp);
IkReal x968=(py*sj0);
IkReal x969=((1.11111111111111)*cj3);
IkReal x970=((9.0)*cj3);
IkReal x971=((18.0)*pz);
j1eval[0]=((((1.11111111111111)*pz*x966))+((x965*x969))+((x968*x969))+x965+x968);
j1eval[1]=IKsign(((((8.1)*x968))+(((8.1)*x965))+(((9.0)*pz*x966))+((x968*x970))+((x965*x970))));
j1eval[2]=((IKabs(((((-0.475)*x966))+((x968*x971))+((x965*x971))+((x966*x967)))))+(IKabs(((-0.4275)+(((-1.0)*pz*x971))+(((9.0)*pp))+((cj3*x967))+(((-0.475)*cj3))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x972=cj2*cj2;
IkReal x973=cj3*cj3;
IkReal x974=((2.0)*cj3);
IkReal x975=(py*sj0);
IkReal x976=(cj0*px);
IkReal x977=((2.0)*cj2*sj3);
IkReal x978=(x972*x973);
j1eval[0]=((1.0)+(((2.22222222222222)*cj3))+(((-1.23456790123457)*x978))+(((1.23456790123457)*x973))+(((1.23456790123457)*x972)));
j1eval[1]=((IKabs(((((-1.0)*pz*x977))+(((1.8)*x975))+(((1.8)*x976))+((x974*x975))+((x974*x976)))))+(IKabs(((((1.8)*pz))+((x975*x977))+((x976*x977))+((pz*x974))))));
j1eval[2]=IKsign(((0.81)+(((-1.0)*x978))+(((1.8)*cj3))+x973+x972));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x979=cj2*cj2;
IkReal x980=cj3*cj3;
IkReal x981=(cj2*sj3);
IkReal x982=((2.0)*pz);
IkReal x983=(py*sj0);
IkReal x984=((2.0)*cj0*px);
CheckValue<IkReal> x985 = IKatan2WithCheck(IkReal(((((2.0)*cj3*x983))+(((1.8)*cj0*px))+(((1.8)*x983))+((cj3*x984))+(((-1.0)*x981*x982)))),(((x981*x984))+(((1.8)*pz))+(((2.0)*x981*x983))+((cj3*x982))),IKFAST_ATAN2_MAGTHRESH);
if(!x985.valid){
continue;
}
CheckValue<IkReal> x986=IKPowWithIntegerCheck(IKsign(((0.81)+(((-1.0)*x979*x980))+(((1.8)*cj3))+x980+x979)),-1);
if(!x986.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x985.value)+(((1.5707963267949)*(x986.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x987=IKcos(j1);
IkReal x988=IKsin(j1);
IkReal x989=(px*sj2);
IkReal x990=((0.5)*sj3);
IkReal x991=((0.5)*cj3);
IkReal x992=(py*sj0);
IkReal x993=((1.0)*cj2);
IkReal x994=(cj0*py);
IkReal x995=((1.0)*sj2);
IkReal x996=(cj0*px);
IkReal x997=(pz*x987);
IkReal x998=(cj0*x987);
IkReal x999=(cj2*x988);
IkReal x1000=((0.9)*x988);
evalcond[0]=(((x990*x999))+pz+(((-1.0)*x987*x991))+(((-0.45)*x987)));
evalcond[1]=((-0.45)+((x988*x992))+((x988*x996))+(((-1.0)*x991))+x997);
evalcond[2]=((0.0475)+((x1000*x996))+((x1000*x992))+(((0.9)*x997))+(((-1.0)*pp)));
evalcond[3]=((((-1.0)*x992))+(((-1.0)*x996))+((cj2*x987*x990))+((x988*x991))+(((0.45)*x988)));
evalcond[4]=(((x989*x998))+(((-1.0)*pz*x988*x995))+(((-1.0)*x993*x994))+((sj2*x987*x992))+((cj2*px*sj0)));
evalcond[5]=((((-1.0)*x994*x995))+(((-1.0)*x987*x992*x993))+((pz*x999))+((sj0*x989))+(((-1.0)*x987*x993*x996))+x990);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1001=(cj2*sj3);
IkReal x1002=(py*sj0);
IkReal x1003=(cj0*px);
IkReal x1004=((18.0)*pz);
IkReal x1005=((9.0)*cj3);
IkReal x1006=((10.0)*pp);
CheckValue<IkReal> x1007 = IKatan2WithCheck(IkReal(((-0.4275)+((cj3*x1006))+(((-1.0)*pz*x1004))+(((9.0)*pp))+(((-0.475)*cj3)))),((((-0.475)*x1001))+((x1002*x1004))+((x1001*x1006))+((x1003*x1004))),IKFAST_ATAN2_MAGTHRESH);
if(!x1007.valid){
continue;
}
CheckValue<IkReal> x1008=IKPowWithIntegerCheck(IKsign(((((9.0)*pz*x1001))+(((8.1)*x1003))+(((8.1)*x1002))+((x1002*x1005))+((x1003*x1005)))),-1);
if(!x1008.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1007.value)+(((1.5707963267949)*(x1008.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1009=IKcos(j1);
IkReal x1010=IKsin(j1);
IkReal x1011=(px*sj2);
IkReal x1012=((0.5)*sj3);
IkReal x1013=((0.5)*cj3);
IkReal x1014=(py*sj0);
IkReal x1015=((1.0)*cj2);
IkReal x1016=(cj0*py);
IkReal x1017=((1.0)*sj2);
IkReal x1018=(cj0*px);
IkReal x1019=(pz*x1009);
IkReal x1020=(cj0*x1009);
IkReal x1021=(cj2*x1010);
IkReal x1022=((0.9)*x1010);
evalcond[0]=((((-1.0)*x1009*x1013))+(((-0.45)*x1009))+pz+((x1012*x1021)));
evalcond[1]=((-0.45)+x1019+(((-1.0)*x1013))+((x1010*x1014))+((x1010*x1018)));
evalcond[2]=((0.0475)+(((0.9)*x1019))+((x1014*x1022))+(((-1.0)*pp))+((x1018*x1022)));
evalcond[3]=((((0.45)*x1010))+((x1010*x1013))+((cj2*x1009*x1012))+(((-1.0)*x1014))+(((-1.0)*x1018)));
evalcond[4]=(((x1011*x1020))+((sj2*x1009*x1014))+(((-1.0)*x1015*x1016))+(((-1.0)*pz*x1010*x1017))+((cj2*px*sj0)));
evalcond[5]=(x1012+((sj0*x1011))+(((-1.0)*x1009*x1015*x1018))+(((-1.0)*x1016*x1017))+(((-1.0)*x1009*x1014*x1015))+((pz*x1021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1023=((2.0)*pz);
IkReal x1024=(py*sj0);
IkReal x1025=(cj0*px);
IkReal x1026=(cj2*sj3);
CheckValue<IkReal> x1027=IKPowWithIntegerCheck(IKsign(((((0.9)*x1024))+(((0.9)*x1025))+((cj3*x1025))+((cj3*x1024))+((pz*x1026)))),-1);
if(!x1027.valid){
continue;
}
CheckValue<IkReal> x1028 = IKatan2WithCheck(IkReal(((0.405)+(((-1.0)*pz*x1023))+(((0.9)*cj3))+(((0.5)*(cj3*cj3))))),((((0.5)*cj3*x1026))+((x1023*x1025))+((x1023*x1024))+(((0.45)*x1026))),IKFAST_ATAN2_MAGTHRESH);
if(!x1028.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1027.value)))+(x1028.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1029=IKcos(j1);
IkReal x1030=IKsin(j1);
IkReal x1031=(px*sj2);
IkReal x1032=((0.5)*sj3);
IkReal x1033=((0.5)*cj3);
IkReal x1034=(py*sj0);
IkReal x1035=((1.0)*cj2);
IkReal x1036=(cj0*py);
IkReal x1037=((1.0)*sj2);
IkReal x1038=(cj0*px);
IkReal x1039=(pz*x1029);
IkReal x1040=(cj0*x1029);
IkReal x1041=(cj2*x1030);
IkReal x1042=((0.9)*x1030);
evalcond[0]=((((-0.45)*x1029))+(((-1.0)*x1029*x1033))+pz+((x1032*x1041)));
evalcond[1]=((-0.45)+((x1030*x1038))+((x1030*x1034))+(((-1.0)*x1033))+x1039);
evalcond[2]=((0.0475)+((x1038*x1042))+((x1034*x1042))+(((0.9)*x1039))+(((-1.0)*pp)));
evalcond[3]=(((x1030*x1033))+(((-1.0)*x1034))+(((-1.0)*x1038))+((cj2*x1029*x1032))+(((0.45)*x1030)));
evalcond[4]=((((-1.0)*x1035*x1036))+((x1031*x1040))+((sj2*x1029*x1034))+(((-1.0)*pz*x1030*x1037))+((cj2*px*sj0)));
evalcond[5]=(x1032+(((-1.0)*x1029*x1034*x1035))+(((-1.0)*x1036*x1037))+((sj0*x1031))+((pz*x1041))+(((-1.0)*x1029*x1035*x1038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x136=((1.0)*cj3);
IkReal x137=(sj0*sj2);
IkReal x138=(cj2*sj1);
IkReal x139=((1.0)*sj3);
IkReal x140=(cj1*cj2);
IkReal x141=(sj1*sj2);
IkReal x142=(cj0*sj2);
IkReal x143=((1.0)*cj1);
IkReal x144=((((-1.0)*sj1*x139))+((cj3*x140)));
IkReal x145=((((-1.0)*x137*x143))+((cj0*cj2)));
IkReal x146=(((sj3*x140))+((cj3*sj1)));
IkReal x147=((((-1.0)*x138*x139))+((cj1*cj3)));
IkReal x148=(cj0*x144);
IkReal x149=((((-1.0)*x136*x138))+(((-1.0)*cj1*x139)));
IkReal x150=((((-1.0)*x142*x143))+(((-1.0)*cj2*sj0)));
IkReal x151=(((sj0*x144))+((cj3*x142)));
IkReal x152=(((cj0*x146))+(((-1.0)*x137*x139)));
IkReal x153=(((sj0*x146))+((sj3*x142)));
IkReal x154=(x148+(((-1.0)*cj3*x137)));
new_r00=(((r20*x149))+((r10*x151))+((r00*((x148+(((-1.0)*x136*x137)))))));
new_r01=(((r01*x154))+((r21*x149))+((r11*x151)));
new_r02=(((r02*x154))+((r22*x149))+((r12*x151)));
new_r10=(((r20*x141))+((r00*x150))+((r10*x145)));
new_r11=(((r01*x150))+((r21*x141))+((r11*x145)));
new_r12=(((r02*x150))+((r22*x141))+((r12*x145)));
new_r20=(((r20*x147))+((r00*x152))+((r10*x153)));
new_r21=(((r01*x152))+((r21*x147))+((r11*x153)));
new_r22=(((r02*x152))+((r22*x147))+((r12*x153)));
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
cj5array[0]=new_r22;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x155=((1.0)*cj3);
IkReal x156=(sj0*sj2);
IkReal x157=(cj2*sj1);
IkReal x158=((1.0)*sj3);
IkReal x159=(cj1*cj2);
IkReal x160=(sj1*sj2);
IkReal x161=(cj0*sj2);
IkReal x162=((1.0)*cj1);
IkReal x163=x144;
IkReal x164=x145;
IkReal x165=x146;
IkReal x166=x147;
IkReal x167=(cj0*x163);
IkReal x168=x149;
IkReal x169=x150;
IkReal x170=(((sj0*x163))+((cj3*x161)));
IkReal x171=(((cj0*x165))+(((-1.0)*x156*x158)));
IkReal x172=(((sj3*x161))+((sj0*x165)));
IkReal x173=(x167+(((-1.0)*cj3*x156)));
new_r00=(((r00*((x167+(((-1.0)*x155*x156))))))+((r20*x168))+((r10*x170)));
new_r01=(((r01*x173))+((r21*x168))+((r11*x170)));
new_r02=(((r22*x168))+((r12*x170))+((r02*x173)));
new_r10=(((r00*x169))+((r20*x160))+((r10*x164)));
new_r11=(((r01*x169))+((r21*x160))+((r11*x164)));
new_r12=(((r22*x160))+((r12*x164))+((r02*x169)));
new_r20=(((r00*x171))+((r20*x166))+((r10*x172)));
new_r21=(((r01*x171))+((r21*x166))+((r11*x172)));
new_r22=(((r22*x166))+((r12*x172))+((r02*x171)));
j4eval[0]=sj5;
j4eval[1]=IKsign(sj5);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x174=((1.0)*cj3);
IkReal x175=(sj0*sj2);
IkReal x176=(cj2*sj1);
IkReal x177=((1.0)*sj3);
IkReal x178=(cj1*cj2);
IkReal x179=(sj1*sj2);
IkReal x180=(cj0*sj2);
IkReal x181=((1.0)*cj1);
IkReal x182=x144;
IkReal x183=x145;
IkReal x184=x146;
IkReal x185=x147;
IkReal x186=(cj0*x182);
IkReal x187=x149;
IkReal x188=x150;
IkReal x189=(((sj0*x182))+((cj3*x180)));
IkReal x190=((((-1.0)*x175*x177))+((cj0*x184)));
IkReal x191=(((sj3*x180))+((sj0*x184)));
IkReal x192=(x186+(((-1.0)*cj3*x175)));
new_r00=(((r20*x187))+((r00*(((((-1.0)*x174*x175))+x186))))+((r10*x189)));
new_r01=(((r01*x192))+((r21*x187))+((r11*x189)));
new_r02=(((r12*x189))+((r02*x192))+((r22*x187)));
new_r10=(((r00*x188))+((r20*x179))+((r10*x183)));
new_r11=(((r01*x188))+((r21*x179))+((r11*x183)));
new_r12=(((r22*x179))+((r12*x183))+((r02*x188)));
new_r20=(((r00*x190))+((r20*x185))+((r10*x191)));
new_r21=(((r01*x190))+((r21*x185))+((r11*x191)));
new_r22=(((r12*x191))+((r02*x190))+((r22*x185)));
j4eval[0]=sj5;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x194 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x194.valid){
continue;
}
IkReal x193=x194.value;
j4array[0]=((-1.0)*x193);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x193)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(((new_r12*(IKcos(j4))))+(((-1.0)*new_r02*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x195=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj4*x195))+(((-1.0)*new_r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*new_r00))+(((-1.0)*sj4*x195)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x195))+(((-1.0)*new_r00*sj4))))+IKsqr((((cj4*new_r00))+(((-1.0)*sj4*x195))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj4*x195))+(((-1.0)*new_r00*sj4))), (((cj4*new_r00))+(((-1.0)*sj4*x195))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x196=IKsin(j6);
IkReal x197=IKcos(j6);
IkReal x198=((1.0)*sj4);
IkReal x199=((1.0)*x197);
IkReal x200=(sj4*x196);
IkReal x201=(sj4*x197);
IkReal x202=(cj4*x196);
IkReal x203=(cj4*x199);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x196);
evalcond[1]=(x202+x201+new_r01);
evalcond[2]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x199)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x196))+(((-1.0)*new_r00*x198)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x199))+(((-1.0)*new_r01*x198)));
evalcond[5]=((((-1.0)*x203))+x200+new_r00);
evalcond[6]=((((-1.0)*x203))+x200+new_r11);
evalcond[7]=((((-1.0)*x197*x198))+new_r10+(((-1.0)*x202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x205 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x205.valid){
continue;
}
IkReal x204=x205.value;
j4array[0]=((-1.0)*x204);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x204)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(((new_r12*(IKcos(j4))))+(((-1.0)*new_r02*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x206=((1.0)*new_r00);
if( IKabs((((cj4*new_r01))+(((-1.0)*sj4*x206)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x206)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*new_r01))+(((-1.0)*sj4*x206))))+IKsqr(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x206))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((cj4*new_r01))+(((-1.0)*sj4*x206))), ((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x206))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x207=IKcos(j6);
IkReal x208=IKsin(j6);
IkReal x209=((1.0)*sj4);
IkReal x210=((1.0)*x208);
IkReal x211=(sj4*x207);
IkReal x212=((1.0)*x207);
IkReal x213=(cj4*x210);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x207);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x210)));
evalcond[2]=(((cj4*x207))+((sj4*x208))+new_r00);
evalcond[3]=((((-1.0)*new_r00*x209))+((cj4*new_r10))+(((-1.0)*x210)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x212))+(((-1.0)*new_r01*x209)));
evalcond[5]=(x211+new_r01+(((-1.0)*x213)));
evalcond[6]=(x211+new_r10+(((-1.0)*x213)));
evalcond[7]=((((-1.0)*x208*x209))+(((-1.0)*cj4*x212))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x215=IKPowWithIntegerCheck(sj5,-1);
if(!x215.valid){
continue;
}
IkReal x214=x215.value;
CheckValue<IkReal> x216=IKPowWithIntegerCheck(new_r12,-1);
if(!x216.valid){
continue;
}
if( IKabs((x214*(x216.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj5*cj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x214)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x214*(x216.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj5*cj5)))))))+IKsqr((new_r02*x214))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x214*(x216.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj5*cj5)))))), (new_r02*x214));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x217=IKcos(j4);
IkReal x218=IKsin(j4);
IkReal x219=((1.0)*sj5);
IkReal x220=((1.0)*cj5);
IkReal x221=(new_r12*x218);
IkReal x222=(new_r02*x217);
evalcond[0]=((((-1.0)*x217*x219))+new_r02);
evalcond[1]=((((-1.0)*x218*x219))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x218))+((new_r12*x217)));
evalcond[3]=(x221+x222+(((-1.0)*x219)));
evalcond[4]=((((-1.0)*new_r22*x219))+((cj5*x221))+((cj5*x222)));
evalcond[5]=((((-1.0)*new_r00*x217*x219))+(((-1.0)*new_r20*x220))+(((-1.0)*new_r10*x218*x219)));
evalcond[6]=((((-1.0)*new_r11*x218*x219))+(((-1.0)*new_r21*x220))+(((-1.0)*new_r01*x217*x219)));
evalcond[7]=((1.0)+(((-1.0)*x219*x221))+(((-1.0)*x219*x222))+(((-1.0)*new_r22*x220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[2];
IkReal x223=((1.0)*cj3);
IkReal x224=(sj0*sj2);
IkReal x225=(cj2*sj1);
IkReal x226=((1.0)*sj3);
IkReal x227=(cj1*cj2);
IkReal x228=(sj1*sj2);
IkReal x229=(cj0*sj2);
IkReal x230=((1.0)*cj1);
IkReal x231=x144;
IkReal x232=x145;
IkReal x233=x146;
IkReal x234=x147;
IkReal x235=(cj0*x231);
IkReal x236=x149;
IkReal x237=x150;
IkReal x238=(((cj3*x229))+((sj0*x231)));
IkReal x239=((((-1.0)*x224*x226))+((cj0*x233)));
IkReal x240=(((sj0*x233))+((sj3*x229)));
IkReal x241=(x235+(((-1.0)*cj3*x224)));
new_r00=(((r10*x238))+((r20*x236))+((r00*((x235+(((-1.0)*x223*x224)))))));
new_r01=(((r11*x238))+((r01*x241))+((r21*x236)));
new_r02=(((r02*x241))+((r12*x238))+((r22*x236)));
new_r10=(((r20*x228))+((r10*x232))+((r00*x237)));
new_r11=(((r11*x232))+((r01*x237))+((r21*x228)));
new_r12=(((r02*x237))+((r22*x228))+((r12*x232)));
new_r20=(((r00*x239))+((r20*x234))+((r10*x240)));
new_r21=(((r01*x239))+((r11*x240))+((r21*x234)));
new_r22=(((r02*x239))+((r12*x240))+((r22*x234)));
j6eval[0]=sj5;
j6eval[1]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x242=((1.0)*cj3);
IkReal x243=(sj0*sj2);
IkReal x244=(cj2*sj1);
IkReal x245=((1.0)*sj3);
IkReal x246=(cj1*cj2);
IkReal x247=(sj1*sj2);
IkReal x248=(cj0*sj2);
IkReal x249=((1.0)*cj1);
IkReal x250=x144;
IkReal x251=x145;
IkReal x252=x146;
IkReal x253=x147;
IkReal x254=(cj0*x250);
IkReal x255=x149;
IkReal x256=x150;
IkReal x257=(((sj0*x250))+((cj3*x248)));
IkReal x258=((((-1.0)*x243*x245))+((cj0*x252)));
IkReal x259=(((sj3*x248))+((sj0*x252)));
IkReal x260=(x254+(((-1.0)*cj3*x243)));
new_r00=(((r20*x255))+((r10*x257))+((r00*(((((-1.0)*x242*x243))+x254)))));
new_r01=(((r21*x255))+((r11*x257))+((r01*x260)));
new_r02=(((r02*x260))+((r12*x257))+((r22*x255)));
new_r10=(((r00*x256))+((r10*x251))+((r20*x247)));
new_r11=(((r11*x251))+((r01*x256))+((r21*x247)));
new_r12=(((r22*x247))+((r12*x251))+((r02*x256)));
new_r20=(((r20*x253))+((r00*x258))+((r10*x259)));
new_r21=(((r21*x253))+((r11*x259))+((r01*x258)));
new_r22=(((r12*x259))+((r22*x253))+((r02*x258)));
j6eval[0]=sj4;
j6eval[1]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
IkReal x261=((1.0)*cj3);
IkReal x262=(sj0*sj2);
IkReal x263=(cj2*sj1);
IkReal x264=((1.0)*sj3);
IkReal x265=(cj1*cj2);
IkReal x266=(sj1*sj2);
IkReal x267=(cj0*sj2);
IkReal x268=((1.0)*cj1);
IkReal x269=x144;
IkReal x270=x145;
IkReal x271=x146;
IkReal x272=x147;
IkReal x273=(cj0*x269);
IkReal x274=x149;
IkReal x275=x150;
IkReal x276=(((cj3*x267))+((sj0*x269)));
IkReal x277=((((-1.0)*x262*x264))+((cj0*x271)));
IkReal x278=(((sj3*x267))+((sj0*x271)));
IkReal x279=((((-1.0)*cj3*x262))+x273);
new_r00=(((r00*((x273+(((-1.0)*x261*x262))))))+((r10*x276))+((r20*x274)));
new_r01=(((r21*x274))+((r01*x279))+((r11*x276)));
new_r02=(((r02*x279))+((r22*x274))+((r12*x276)));
new_r10=(((r00*x275))+((r10*x270))+((r20*x266)));
new_r11=(((r21*x266))+((r01*x275))+((r11*x270)));
new_r12=(((r02*x275))+((r22*x266))+((r12*x270)));
new_r20=(((r00*x277))+((r10*x278))+((r20*x272)));
new_r21=(((r21*x272))+((r01*x277))+((r11*x278)));
new_r22=(((r02*x277))+((r22*x272))+((r12*x278)));
j6eval[0]=cj4;
j6eval[1]=cj5;
j6eval[2]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x280=(new_r22+(((-1.0)*cj5)));
IkReal x281=((((-1.0)*sj5))+new_r12);
IkReal x282=((1.0)*cj5);
IkReal x283=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=x280;
evalcond[2]=x280;
evalcond[3]=new_r02;
evalcond[4]=x281;
evalcond[5]=x281;
evalcond[6]=(((cj5*new_r12))+(((-1.0)*new_r22*x283)));
evalcond[7]=((((-1.0)*new_r10*x283))+(((-1.0)*new_r20*x282)));
evalcond[8]=((((-1.0)*new_r11*x283))+(((-1.0)*new_r21*x282)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x282))+(((-1.0)*new_r12*x283)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x284 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x284.valid){
continue;
}
CheckValue<IkReal> x285=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x285.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x284.value)+(((1.5707963267949)*(x285.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x286=IKsin(j6);
IkReal x287=IKcos(j6);
IkReal x288=((1.0)*new_r12);
IkReal x289=((1.0)*x287);
evalcond[0]=(((new_r12*x287))+new_r20);
evalcond[1]=(new_r11+((new_r22*x286)));
evalcond[2]=(new_r21+(((-1.0)*x286*x288)));
evalcond[3]=((((-1.0)*new_r22*x289))+new_r10);
evalcond[4]=((((-1.0)*x286))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x289))+(((-1.0)*new_r01)));
evalcond[6]=(x286+((new_r11*new_r22))+(((-1.0)*new_r21*x288)));
evalcond[7]=(((new_r10*new_r22))+(((-1.0)*x289))+(((-1.0)*new_r20*x288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x290=(new_r22+(((-1.0)*cj5)));
IkReal x291=((1.0)*cj5);
IkReal x292=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=x290;
evalcond[2]=x290;
evalcond[3]=new_r02;
evalcond[4]=(sj5+new_r12);
evalcond[5]=((((-1.0)*x292))+(((-1.0)*new_r12)));
evalcond[6]=((((-1.0)*new_r12*x291))+(((-1.0)*new_r22*x292)));
evalcond[7]=((((-1.0)*new_r20*x291))+((new_r10*sj5)));
evalcond[8]=((((-1.0)*new_r21*x291))+((new_r11*sj5)));
evalcond[9]=((1.0)+((new_r12*sj5))+(((-1.0)*new_r22*x291)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x293=IKsin(j6);
IkReal x294=IKcos(j6);
IkReal x295=((1.0)*new_r22);
IkReal x296=((1.0)*x294);
evalcond[0]=(((new_r12*x293))+new_r21);
evalcond[1]=((((-1.0)*x293))+new_r00);
evalcond[2]=((((-1.0)*x296))+new_r01);
evalcond[3]=((((-1.0)*new_r12*x296))+new_r20);
evalcond[4]=(((new_r22*x293))+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x294*x295)));
evalcond[6]=((((-1.0)*new_r11*x295))+((new_r12*new_r21))+x293);
evalcond[7]=((((-1.0)*new_r10*x295))+(((-1.0)*x296))+((new_r12*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x297=((1.0)*cj4);
IkReal x298=((1.0)*sj4);
IkReal x299=(((cj4*new_r12))+(((-1.0)*new_r02*x298)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x297))+new_r02);
evalcond[3]=((((-1.0)*x298))+new_r12);
evalcond[4]=x299;
evalcond[5]=x299;
evalcond[6]=((-1.0)+((new_r12*sj4))+((cj4*new_r02)));
evalcond[7]=(((cj4*new_r01))+((new_r11*sj4)));
evalcond[8]=(((cj4*new_r00))+((new_r10*sj4)));
evalcond[9]=((((-1.0)*new_r10*x298))+(((-1.0)*new_r00*x297)));
evalcond[10]=((((-1.0)*new_r01*x297))+(((-1.0)*new_r11*x298)));
evalcond[11]=((1.0)+(((-1.0)*new_r12*x298))+(((-1.0)*new_r02*x297)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x300=IKcos(j6);
IkReal x301=IKsin(j6);
IkReal x302=((1.0)*new_r12);
IkReal x303=((1.0)*x301);
IkReal x304=((1.0)*x300);
evalcond[0]=(x300+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x303)));
evalcond[2]=(((new_r12*x300))+new_r01);
evalcond[3]=(((new_r12*x301))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x304))+new_r11);
evalcond[5]=((((-1.0)*new_r02*x303))+new_r10);
evalcond[6]=(((new_r02*new_r10))+(((-1.0)*new_r00*x302))+(((-1.0)*x303)));
evalcond[7]=((((-1.0)*new_r01*x302))+((new_r02*new_r11))+(((-1.0)*x304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x305=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
IkReal x306=(((cj4*new_r00))+((new_r10*sj4)));
IkReal x307=(((cj4*new_r01))+((new_r11*sj4)));
IkReal x308=((1.0)+((new_r12*sj4))+((cj4*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj4+new_r02);
evalcond[3]=(sj4+new_r12);
evalcond[4]=x305;
evalcond[5]=x305;
evalcond[6]=x308;
evalcond[7]=x307;
evalcond[8]=x306;
evalcond[9]=x306;
evalcond[10]=x307;
evalcond[11]=x308;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x309=IKcos(j6);
IkReal x310=IKsin(j6);
IkReal x311=((1.0)*new_r02);
IkReal x312=((1.0)*new_r12);
IkReal x313=((1.0)*x309);
evalcond[0]=(x310+new_r21);
evalcond[1]=((((-1.0)*x313))+new_r20);
evalcond[2]=(((new_r02*x309))+new_r11);
evalcond[3]=(((new_r02*x310))+new_r10);
evalcond[4]=(new_r01+(((-1.0)*x309*x312)));
evalcond[5]=((((-1.0)*x310*x312))+new_r00);
evalcond[6]=(((new_r00*new_r12))+(((-1.0)*new_r10*x311))+(((-1.0)*x310)));
evalcond[7]=(((new_r01*new_r12))+(((-1.0)*new_r11*x311))+(((-1.0)*x313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x314=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
IkReal x315=(((new_r12*sj4))+((cj4*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x314;
evalcond[7]=x314;
evalcond[8]=x315;
evalcond[9]=x315;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x316=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj4*x316))+(((-1.0)*new_r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x316))+((cj4*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x316))+(((-1.0)*new_r00*sj4))))+IKsqr(((((-1.0)*sj4*x316))+((cj4*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj4*x316))+(((-1.0)*new_r00*sj4))), ((((-1.0)*sj4*x316))+((cj4*new_r00))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x317=IKsin(j6);
IkReal x318=IKcos(j6);
IkReal x319=((1.0)*sj4);
IkReal x320=((1.0)*x318);
IkReal x321=(sj4*x317);
IkReal x322=(sj4*x318);
IkReal x323=(cj4*x317);
IkReal x324=(cj4*x320);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x317);
evalcond[1]=(x322+x323+new_r01);
evalcond[2]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x320)));
evalcond[3]=((((-1.0)*new_r00*x319))+((cj4*new_r10))+(((-1.0)*x317)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x320))+(((-1.0)*new_r01*x319)));
evalcond[5]=((((-1.0)*x324))+x321+new_r00);
evalcond[6]=((((-1.0)*x324))+x321+new_r11);
evalcond[7]=((((-1.0)*x318*x319))+(((-1.0)*x323))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x325=(cj4*new_r02);
IkReal x326=(new_r12*sj4);
IkReal x327=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x327;
evalcond[7]=x327;
evalcond[8]=(x325+x326);
evalcond[9]=((((-1.0)*x325))+(((-1.0)*x326)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x328=((1.0)*new_r00);
if( IKabs((((cj4*new_r01))+(((-1.0)*sj4*x328)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x328)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*new_r01))+(((-1.0)*sj4*x328))))+IKsqr(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x328))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((cj4*new_r01))+(((-1.0)*sj4*x328))), ((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x328))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x329=IKcos(j6);
IkReal x330=IKsin(j6);
IkReal x331=((1.0)*sj4);
IkReal x332=((1.0)*x330);
IkReal x333=(sj4*x329);
IkReal x334=((1.0)*x329);
IkReal x335=(cj4*x332);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x329);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x332)));
evalcond[2]=(((cj4*x329))+((sj4*x330))+new_r00);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x331))+(((-1.0)*x332)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x334))+(((-1.0)*new_r01*x331)));
evalcond[5]=(x333+(((-1.0)*x335))+new_r01);
evalcond[6]=(x333+(((-1.0)*x335))+new_r10);
evalcond[7]=((((-1.0)*cj4*x334))+(((-1.0)*x330*x331))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x336=(new_r22+(((-1.0)*cj5)));
IkReal x337=((((-1.0)*sj5))+new_r02);
IkReal x338=((1.0)*cj5);
IkReal x339=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=x336;
evalcond[2]=x336;
evalcond[3]=x337;
evalcond[4]=new_r12;
evalcond[5]=x337;
evalcond[6]=((((-1.0)*new_r22*x339))+((cj5*new_r02)));
evalcond[7]=((((-1.0)*new_r20*x338))+(((-1.0)*new_r00*x339)));
evalcond[8]=((((-1.0)*new_r21*x338))+(((-1.0)*new_r01*x339)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x338))+(((-1.0)*new_r02*x339)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x340=IKcos(j6);
IkReal x341=IKsin(j6);
IkReal x342=((1.0)*new_r02);
IkReal x343=((1.0)*x340);
evalcond[0]=(((new_r02*x340))+new_r20);
evalcond[1]=(new_r10+(((-1.0)*x341)));
evalcond[2]=(new_r11+(((-1.0)*x343)));
evalcond[3]=(((new_r22*x341))+new_r01);
evalcond[4]=((((-1.0)*x341*x342))+new_r21);
evalcond[5]=(new_r00+(((-1.0)*new_r22*x343)));
evalcond[6]=(((new_r01*new_r22))+x341+(((-1.0)*new_r21*x342)));
evalcond[7]=(((new_r00*new_r22))+(((-1.0)*new_r20*x342))+(((-1.0)*x343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x344=(new_r22+(((-1.0)*cj5)));
IkReal x345=((1.0)*cj5);
IkReal x346=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=x344;
evalcond[2]=x344;
evalcond[3]=(sj5+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*new_r02))+(((-1.0)*x346)));
evalcond[6]=((((-1.0)*new_r02*x345))+(((-1.0)*new_r22*x346)));
evalcond[7]=(((new_r00*sj5))+(((-1.0)*new_r20*x345)));
evalcond[8]=(((new_r01*sj5))+(((-1.0)*new_r21*x345)));
evalcond[9]=((1.0)+((new_r02*sj5))+(((-1.0)*new_r22*x345)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x347 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x347.valid){
continue;
}
CheckValue<IkReal> x348=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x348.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x347.value)+(((1.5707963267949)*(x348.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x349=IKsin(j6);
IkReal x350=IKcos(j6);
IkReal x351=((1.0)*new_r01);
IkReal x352=((1.0)*new_r00);
IkReal x353=((1.0)*x350);
evalcond[0]=(((new_r02*x349))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x353))+new_r20);
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x349)));
evalcond[3]=((((-1.0)*x353))+(((-1.0)*new_r11)));
evalcond[4]=(((new_r22*x349))+(((-1.0)*x351)));
evalcond[5]=((((-1.0)*new_r22*x353))+(((-1.0)*x352)));
evalcond[6]=((((-1.0)*new_r22*x351))+x349+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*new_r22*x352))+(((-1.0)*x353))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x355=IKPowWithIntegerCheck(sj5,-1);
if(!x355.valid){
continue;
}
IkReal x354=x355.value;
CheckValue<IkReal> x356=IKPowWithIntegerCheck(cj4,-1);
if(!x356.valid){
continue;
}
CheckValue<IkReal> x357=IKPowWithIntegerCheck(cj5,-1);
if(!x357.valid){
continue;
}
if( IKabs((x354*(x356.value)*(x357.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x354)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x354*(x356.value)*(x357.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))))+IKsqr(((-1.0)*new_r20*x354))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x354*(x356.value)*(x357.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))), ((-1.0)*new_r20*x354));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x358=IKsin(j6);
IkReal x359=IKcos(j6);
IkReal x360=((1.0)*sj5);
IkReal x361=((1.0)*sj4);
IkReal x362=(cj5*sj4);
IkReal x363=(cj4*new_r01);
IkReal x364=(cj4*new_r00);
IkReal x365=((1.0)*x359);
IkReal x366=(cj5*x358);
IkReal x367=((1.0)*x358);
evalcond[0]=(((sj5*x359))+new_r20);
evalcond[1]=((((-1.0)*x358*x360))+new_r21);
evalcond[2]=(((new_r11*sj4))+x363+x366);
evalcond[3]=((((-1.0)*new_r00*x361))+(((-1.0)*x367))+((cj4*new_r10)));
evalcond[4]=((((-1.0)*x365))+((cj4*new_r11))+(((-1.0)*new_r01*x361)));
evalcond[5]=(((sj4*x359))+((cj4*x366))+new_r01);
evalcond[6]=(((new_r10*sj4))+(((-1.0)*cj5*x365))+x364);
evalcond[7]=(((sj4*x358))+(((-1.0)*cj4*cj5*x365))+new_r00);
evalcond[8]=(((x358*x362))+(((-1.0)*cj4*x365))+new_r11);
evalcond[9]=((((-1.0)*cj4*x367))+(((-1.0)*cj5*x359*x361))+new_r10);
evalcond[10]=(x358+((cj5*x363))+((new_r11*x362))+(((-1.0)*new_r21*x360)));
evalcond[11]=((((-1.0)*new_r20*x360))+(((-1.0)*x365))+((cj5*x364))+((new_r10*x362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x369=IKPowWithIntegerCheck(sj5,-1);
if(!x369.valid){
continue;
}
IkReal x368=x369.value;
CheckValue<IkReal> x370=IKPowWithIntegerCheck(sj4,-1);
if(!x370.valid){
continue;
}
if( IKabs((x368*(x370.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x368)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x368*(x370.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))))+IKsqr(((-1.0)*new_r20*x368))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x368*(x370.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))), ((-1.0)*new_r20*x368));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x371=IKsin(j6);
IkReal x372=IKcos(j6);
IkReal x373=((1.0)*sj5);
IkReal x374=((1.0)*sj4);
IkReal x375=(cj5*sj4);
IkReal x376=(cj4*new_r01);
IkReal x377=(cj4*new_r00);
IkReal x378=((1.0)*x372);
IkReal x379=(cj5*x371);
IkReal x380=((1.0)*x371);
evalcond[0]=(((sj5*x372))+new_r20);
evalcond[1]=((((-1.0)*x371*x373))+new_r21);
evalcond[2]=(((new_r11*sj4))+x379+x376);
evalcond[3]=((((-1.0)*new_r00*x374))+((cj4*new_r10))+(((-1.0)*x380)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x378))+(((-1.0)*new_r01*x374)));
evalcond[5]=(((sj4*x372))+((cj4*x379))+new_r01);
evalcond[6]=((((-1.0)*cj5*x378))+((new_r10*sj4))+x377);
evalcond[7]=(((sj4*x371))+(((-1.0)*cj4*cj5*x378))+new_r00);
evalcond[8]=((((-1.0)*cj4*x378))+new_r11+((x371*x375)));
evalcond[9]=((((-1.0)*cj4*x380))+new_r10+(((-1.0)*cj5*x372*x374)));
evalcond[10]=((((-1.0)*new_r21*x373))+((cj5*x376))+x371+((new_r11*x375)));
evalcond[11]=((((-1.0)*new_r20*x373))+(((-1.0)*x378))+((cj5*x377))+((new_r10*x375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x381=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x381.valid){
continue;
}
CheckValue<IkReal> x382 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x382.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x381.value)))+(x382.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x383=IKsin(j6);
IkReal x384=IKcos(j6);
IkReal x385=((1.0)*sj5);
IkReal x386=((1.0)*sj4);
IkReal x387=(cj5*sj4);
IkReal x388=(cj4*new_r01);
IkReal x389=(cj4*new_r00);
IkReal x390=((1.0)*x384);
IkReal x391=(cj5*x383);
IkReal x392=((1.0)*x383);
evalcond[0]=(((sj5*x384))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x383*x385)));
evalcond[2]=(((new_r11*sj4))+x388+x391);
evalcond[3]=((((-1.0)*x392))+((cj4*new_r10))+(((-1.0)*new_r00*x386)));
evalcond[4]=((((-1.0)*x390))+((cj4*new_r11))+(((-1.0)*new_r01*x386)));
evalcond[5]=(((cj4*x391))+((sj4*x384))+new_r01);
evalcond[6]=((((-1.0)*cj5*x390))+((new_r10*sj4))+x389);
evalcond[7]=((((-1.0)*cj4*cj5*x390))+((sj4*x383))+new_r00);
evalcond[8]=((((-1.0)*cj4*x390))+((x383*x387))+new_r11);
evalcond[9]=((((-1.0)*cj4*x392))+(((-1.0)*cj5*x384*x386))+new_r10);
evalcond[10]=(x383+((new_r11*x387))+(((-1.0)*new_r21*x385))+((cj5*x388)));
evalcond[11]=((((-1.0)*x390))+(((-1.0)*new_r20*x385))+((new_r10*x387))+((cj5*x389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x393=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x393.valid){
continue;
}
CheckValue<IkReal> x394 = IKatan2WithCheck(IkReal(new_r12),new_r02,IKFAST_ATAN2_MAGTHRESH);
if(!x394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x393.value)))+(x394.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x395=IKcos(j4);
IkReal x396=IKsin(j4);
IkReal x397=((1.0)*sj5);
IkReal x398=((1.0)*cj5);
IkReal x399=(new_r12*x396);
IkReal x400=(new_r02*x395);
evalcond[0]=((((-1.0)*x395*x397))+new_r02);
evalcond[1]=((((-1.0)*x396*x397))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x396))+((new_r12*x395)));
evalcond[3]=((((-1.0)*x397))+x399+x400);
evalcond[4]=((((-1.0)*new_r22*x397))+((cj5*x399))+((cj5*x400)));
evalcond[5]=((((-1.0)*new_r10*x396*x397))+(((-1.0)*new_r00*x395*x397))+(((-1.0)*new_r20*x398)));
evalcond[6]=((((-1.0)*new_r21*x398))+(((-1.0)*new_r11*x396*x397))+(((-1.0)*new_r01*x395*x397)));
evalcond[7]=((1.0)+(((-1.0)*new_r22*x398))+(((-1.0)*x397*x399))+(((-1.0)*x397*x400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[2];
IkReal x401=((1.0)*cj3);
IkReal x402=(sj0*sj2);
IkReal x403=(cj2*sj1);
IkReal x404=((1.0)*sj3);
IkReal x405=(cj1*cj2);
IkReal x406=(sj1*sj2);
IkReal x407=(cj0*sj2);
IkReal x408=((1.0)*cj1);
IkReal x409=x144;
IkReal x410=x145;
IkReal x411=x146;
IkReal x412=x147;
IkReal x413=(cj0*x409);
IkReal x414=x149;
IkReal x415=x150;
IkReal x416=(((sj0*x409))+((cj3*x407)));
IkReal x417=(((cj0*x411))+(((-1.0)*x402*x404)));
IkReal x418=(((sj0*x411))+((sj3*x407)));
IkReal x419=((((-1.0)*cj3*x402))+x413);
new_r00=(((r00*(((((-1.0)*x401*x402))+x413))))+((r20*x414))+((r10*x416)));
new_r01=(((r11*x416))+((r01*x419))+((r21*x414)));
new_r02=(((r12*x416))+((r22*x414))+((r02*x419)));
new_r10=(((r00*x415))+((r10*x410))+((r20*x406)));
new_r11=(((r11*x410))+((r01*x415))+((r21*x406)));
new_r12=(((r12*x410))+((r22*x406))+((r02*x415)));
new_r20=(((r00*x417))+((r20*x412))+((r10*x418)));
new_r21=(((r11*x418))+((r01*x417))+((r21*x412)));
new_r22=(((r12*x418))+((r22*x412))+((r02*x417)));
j6eval[0]=sj5;
j6eval[1]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x420=((1.0)*cj3);
IkReal x421=(sj0*sj2);
IkReal x422=(cj2*sj1);
IkReal x423=((1.0)*sj3);
IkReal x424=(cj1*cj2);
IkReal x425=(sj1*sj2);
IkReal x426=(cj0*sj2);
IkReal x427=((1.0)*cj1);
IkReal x428=x144;
IkReal x429=x145;
IkReal x430=x146;
IkReal x431=x147;
IkReal x432=(cj0*x428);
IkReal x433=x149;
IkReal x434=x150;
IkReal x435=(((cj3*x426))+((sj0*x428)));
IkReal x436=((((-1.0)*x421*x423))+((cj0*x430)));
IkReal x437=(((sj0*x430))+((sj3*x426)));
IkReal x438=((((-1.0)*cj3*x421))+x432);
new_r00=(((r00*(((((-1.0)*x420*x421))+x432))))+((r10*x435))+((r20*x433)));
new_r01=(((r21*x433))+((r01*x438))+((r11*x435)));
new_r02=(((r12*x435))+((r02*x438))+((r22*x433)));
new_r10=(((r20*x425))+((r00*x434))+((r10*x429)));
new_r11=(((r21*x425))+((r01*x434))+((r11*x429)));
new_r12=(((r02*x434))+((r22*x425))+((r12*x429)));
new_r20=(((r00*x436))+((r10*x437))+((r20*x431)));
new_r21=(((r21*x431))+((r01*x436))+((r11*x437)));
new_r22=(((r12*x437))+((r02*x436))+((r22*x431)));
j6eval[0]=sj4;
j6eval[1]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
IkReal x439=((1.0)*cj3);
IkReal x440=(sj0*sj2);
IkReal x441=(cj2*sj1);
IkReal x442=((1.0)*sj3);
IkReal x443=(cj1*cj2);
IkReal x444=(sj1*sj2);
IkReal x445=(cj0*sj2);
IkReal x446=((1.0)*cj1);
IkReal x447=x144;
IkReal x448=x145;
IkReal x449=x146;
IkReal x450=x147;
IkReal x451=(cj0*x447);
IkReal x452=x149;
IkReal x453=x150;
IkReal x454=(((sj0*x447))+((cj3*x445)));
IkReal x455=(((cj0*x449))+(((-1.0)*x440*x442)));
IkReal x456=(((sj0*x449))+((sj3*x445)));
IkReal x457=((((-1.0)*cj3*x440))+x451);
new_r00=(((r00*(((((-1.0)*x439*x440))+x451))))+((r20*x452))+((r10*x454)));
new_r01=(((r11*x454))+((r01*x457))+((r21*x452)));
new_r02=(((r12*x454))+((r02*x457))+((r22*x452)));
new_r10=(((r00*x453))+((r20*x444))+((r10*x448)));
new_r11=(((r21*x444))+((r11*x448))+((r01*x453)));
new_r12=(((r22*x444))+((r02*x453))+((r12*x448)));
new_r20=(((r20*x450))+((r00*x455))+((r10*x456)));
new_r21=(((r11*x456))+((r01*x455))+((r21*x450)));
new_r22=(((r12*x456))+((r02*x455))+((r22*x450)));
j6eval[0]=cj4;
j6eval[1]=cj5;
j6eval[2]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x458=(new_r22+(((-1.0)*cj5)));
IkReal x459=((((-1.0)*sj5))+new_r12);
IkReal x460=((1.0)*cj5);
IkReal x461=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=x458;
evalcond[2]=x458;
evalcond[3]=new_r02;
evalcond[4]=x459;
evalcond[5]=x459;
evalcond[6]=(((cj5*new_r12))+(((-1.0)*new_r22*x461)));
evalcond[7]=((((-1.0)*new_r20*x460))+(((-1.0)*new_r10*x461)));
evalcond[8]=((((-1.0)*new_r21*x460))+(((-1.0)*new_r11*x461)));
evalcond[9]=((1.0)+(((-1.0)*new_r12*x461))+(((-1.0)*new_r22*x460)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x462 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x462.valid){
continue;
}
CheckValue<IkReal> x463=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x463.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x462.value)+(((1.5707963267949)*(x463.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x464=IKsin(j6);
IkReal x465=IKcos(j6);
IkReal x466=((1.0)*new_r12);
IkReal x467=((1.0)*x465);
evalcond[0]=(((new_r12*x465))+new_r20);
evalcond[1]=(new_r11+((new_r22*x464)));
evalcond[2]=((((-1.0)*x464*x466))+new_r21);
evalcond[3]=((((-1.0)*new_r22*x467))+new_r10);
evalcond[4]=((((-1.0)*x464))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x467))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x466))+x464+((new_r11*new_r22)));
evalcond[7]=((((-1.0)*new_r20*x466))+(((-1.0)*x467))+((new_r10*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x468=(new_r22+(((-1.0)*cj5)));
IkReal x469=((1.0)*cj5);
IkReal x470=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=x468;
evalcond[2]=x468;
evalcond[3]=new_r02;
evalcond[4]=(sj5+new_r12);
evalcond[5]=((((-1.0)*x470))+(((-1.0)*new_r12)));
evalcond[6]=((((-1.0)*new_r12*x469))+(((-1.0)*new_r22*x470)));
evalcond[7]=(((new_r10*sj5))+(((-1.0)*new_r20*x469)));
evalcond[8]=((((-1.0)*new_r21*x469))+((new_r11*sj5)));
evalcond[9]=((1.0)+((new_r12*sj5))+(((-1.0)*new_r22*x469)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x471=IKsin(j6);
IkReal x472=IKcos(j6);
IkReal x473=((1.0)*new_r22);
IkReal x474=((1.0)*x472);
evalcond[0]=(((new_r12*x471))+new_r21);
evalcond[1]=((((-1.0)*x471))+new_r00);
evalcond[2]=((((-1.0)*x474))+new_r01);
evalcond[3]=((((-1.0)*new_r12*x474))+new_r20);
evalcond[4]=(((new_r22*x471))+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*x472*x473))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r11*x473))+((new_r12*new_r21))+x471);
evalcond[7]=((((-1.0)*x474))+(((-1.0)*new_r10*x473))+((new_r12*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x475=((1.0)*cj4);
IkReal x476=((1.0)*sj4);
IkReal x477=(((cj4*new_r12))+(((-1.0)*new_r02*x476)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x475))+new_r02);
evalcond[3]=((((-1.0)*x476))+new_r12);
evalcond[4]=x477;
evalcond[5]=x477;
evalcond[6]=((-1.0)+((new_r12*sj4))+((cj4*new_r02)));
evalcond[7]=(((cj4*new_r01))+((new_r11*sj4)));
evalcond[8]=(((cj4*new_r00))+((new_r10*sj4)));
evalcond[9]=((((-1.0)*new_r00*x475))+(((-1.0)*new_r10*x476)));
evalcond[10]=((((-1.0)*new_r11*x476))+(((-1.0)*new_r01*x475)));
evalcond[11]=((1.0)+(((-1.0)*new_r12*x476))+(((-1.0)*new_r02*x475)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x478=IKcos(j6);
IkReal x479=IKsin(j6);
IkReal x480=((1.0)*new_r12);
IkReal x481=((1.0)*x479);
IkReal x482=((1.0)*x478);
evalcond[0]=(x478+new_r20);
evalcond[1]=((((-1.0)*x481))+new_r21);
evalcond[2]=(((new_r12*x478))+new_r01);
evalcond[3]=(((new_r12*x479))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x482))+new_r11);
evalcond[5]=((((-1.0)*new_r02*x481))+new_r10);
evalcond[6]=((((-1.0)*x481))+(((-1.0)*new_r00*x480))+((new_r02*new_r10)));
evalcond[7]=((((-1.0)*new_r01*x480))+(((-1.0)*x482))+((new_r02*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x483=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
IkReal x484=(((cj4*new_r00))+((new_r10*sj4)));
IkReal x485=(((cj4*new_r01))+((new_r11*sj4)));
IkReal x486=((1.0)+((new_r12*sj4))+((cj4*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj4+new_r02);
evalcond[3]=(sj4+new_r12);
evalcond[4]=x483;
evalcond[5]=x483;
evalcond[6]=x486;
evalcond[7]=x485;
evalcond[8]=x484;
evalcond[9]=x484;
evalcond[10]=x485;
evalcond[11]=x486;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x487=IKcos(j6);
IkReal x488=IKsin(j6);
IkReal x489=((1.0)*new_r02);
IkReal x490=((1.0)*new_r12);
IkReal x491=((1.0)*x487);
evalcond[0]=(x488+new_r21);
evalcond[1]=((((-1.0)*x491))+new_r20);
evalcond[2]=(((new_r02*x487))+new_r11);
evalcond[3]=(((new_r02*x488))+new_r10);
evalcond[4]=((((-1.0)*x487*x490))+new_r01);
evalcond[5]=((((-1.0)*x488*x490))+new_r00);
evalcond[6]=((((-1.0)*new_r10*x489))+((new_r00*new_r12))+(((-1.0)*x488)));
evalcond[7]=((((-1.0)*new_r11*x489))+(((-1.0)*x491))+((new_r01*new_r12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x492=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
IkReal x493=(((new_r12*sj4))+((cj4*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x492;
evalcond[7]=x492;
evalcond[8]=x493;
evalcond[9]=x493;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x494=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj4*x494))+(((-1.0)*new_r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*new_r00))+(((-1.0)*sj4*x494)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x494))+(((-1.0)*new_r00*sj4))))+IKsqr((((cj4*new_r00))+(((-1.0)*sj4*x494))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj4*x494))+(((-1.0)*new_r00*sj4))), (((cj4*new_r00))+(((-1.0)*sj4*x494))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x495=IKsin(j6);
IkReal x496=IKcos(j6);
IkReal x497=((1.0)*sj4);
IkReal x498=((1.0)*x496);
IkReal x499=(sj4*x495);
IkReal x500=(sj4*x496);
IkReal x501=(cj4*x495);
IkReal x502=(cj4*x498);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x495);
evalcond[1]=(x500+x501+new_r01);
evalcond[2]=((((-1.0)*x498))+((cj4*new_r00))+((new_r10*sj4)));
evalcond[3]=((((-1.0)*new_r00*x497))+((cj4*new_r10))+(((-1.0)*x495)));
evalcond[4]=((((-1.0)*x498))+(((-1.0)*new_r01*x497))+((cj4*new_r11)));
evalcond[5]=((((-1.0)*x502))+x499+new_r00);
evalcond[6]=((((-1.0)*x502))+x499+new_r11);
evalcond[7]=((((-1.0)*x496*x497))+new_r10+(((-1.0)*x501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x503=(cj4*new_r02);
IkReal x504=(new_r12*sj4);
IkReal x505=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x505;
evalcond[7]=x505;
evalcond[8]=(x503+x504);
evalcond[9]=((((-1.0)*x503))+(((-1.0)*x504)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x506=((1.0)*new_r00);
if( IKabs((((cj4*new_r01))+(((-1.0)*sj4*x506)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x506)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*new_r01))+(((-1.0)*sj4*x506))))+IKsqr(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x506))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((cj4*new_r01))+(((-1.0)*sj4*x506))), ((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x506))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x507=IKcos(j6);
IkReal x508=IKsin(j6);
IkReal x509=((1.0)*sj4);
IkReal x510=((1.0)*x508);
IkReal x511=(sj4*x507);
IkReal x512=((1.0)*x507);
IkReal x513=(cj4*x510);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x507);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x510)));
evalcond[2]=(((cj4*x507))+((sj4*x508))+new_r00);
evalcond[3]=((((-1.0)*new_r00*x509))+((cj4*new_r10))+(((-1.0)*x510)));
evalcond[4]=((((-1.0)*new_r01*x509))+((cj4*new_r11))+(((-1.0)*x512)));
evalcond[5]=(x511+new_r01+(((-1.0)*x513)));
evalcond[6]=(x511+new_r10+(((-1.0)*x513)));
evalcond[7]=((((-1.0)*x508*x509))+(((-1.0)*cj4*x512))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x514=(new_r22+(((-1.0)*cj5)));
IkReal x515=((((-1.0)*sj5))+new_r02);
IkReal x516=((1.0)*cj5);
IkReal x517=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=x514;
evalcond[2]=x514;
evalcond[3]=x515;
evalcond[4]=new_r12;
evalcond[5]=x515;
evalcond[6]=(((cj5*new_r02))+(((-1.0)*new_r22*x517)));
evalcond[7]=((((-1.0)*new_r20*x516))+(((-1.0)*new_r00*x517)));
evalcond[8]=((((-1.0)*new_r01*x517))+(((-1.0)*new_r21*x516)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x516))+(((-1.0)*new_r02*x517)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x518=IKcos(j6);
IkReal x519=IKsin(j6);
IkReal x520=((1.0)*new_r02);
IkReal x521=((1.0)*x518);
evalcond[0]=(((new_r02*x518))+new_r20);
evalcond[1]=((((-1.0)*x519))+new_r10);
evalcond[2]=((((-1.0)*x521))+new_r11);
evalcond[3]=(((new_r22*x519))+new_r01);
evalcond[4]=(new_r21+(((-1.0)*x519*x520)));
evalcond[5]=((((-1.0)*new_r22*x521))+new_r00);
evalcond[6]=(((new_r01*new_r22))+(((-1.0)*new_r21*x520))+x519);
evalcond[7]=(((new_r00*new_r22))+(((-1.0)*new_r20*x520))+(((-1.0)*x521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x522=(new_r22+(((-1.0)*cj5)));
IkReal x523=((1.0)*cj5);
IkReal x524=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=x522;
evalcond[2]=x522;
evalcond[3]=(sj5+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*x524))+(((-1.0)*new_r02)));
evalcond[6]=((((-1.0)*new_r22*x524))+(((-1.0)*new_r02*x523)));
evalcond[7]=(((new_r00*sj5))+(((-1.0)*new_r20*x523)));
evalcond[8]=(((new_r01*sj5))+(((-1.0)*new_r21*x523)));
evalcond[9]=((1.0)+((new_r02*sj5))+(((-1.0)*new_r22*x523)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x525 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x525.valid){
continue;
}
CheckValue<IkReal> x526=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x526.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x525.value)+(((1.5707963267949)*(x526.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x527=IKsin(j6);
IkReal x528=IKcos(j6);
IkReal x529=((1.0)*new_r01);
IkReal x530=((1.0)*new_r00);
IkReal x531=((1.0)*x528);
evalcond[0]=(((new_r02*x527))+new_r21);
evalcond[1]=(new_r20+(((-1.0)*new_r02*x531)));
evalcond[2]=((((-1.0)*x527))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x531))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*x529))+((new_r22*x527)));
evalcond[5]=((((-1.0)*new_r22*x531))+(((-1.0)*x530)));
evalcond[6]=((((-1.0)*new_r22*x529))+x527+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*new_r22*x530))+(((-1.0)*x531))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x533=IKPowWithIntegerCheck(sj5,-1);
if(!x533.valid){
continue;
}
IkReal x532=x533.value;
CheckValue<IkReal> x534=IKPowWithIntegerCheck(cj4,-1);
if(!x534.valid){
continue;
}
CheckValue<IkReal> x535=IKPowWithIntegerCheck(cj5,-1);
if(!x535.valid){
continue;
}
if( IKabs((x532*(x534.value)*(x535.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x532)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x532*(x534.value)*(x535.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))))+IKsqr(((-1.0)*new_r20*x532))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x532*(x534.value)*(x535.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))), ((-1.0)*new_r20*x532));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x536=IKsin(j6);
IkReal x537=IKcos(j6);
IkReal x538=((1.0)*sj5);
IkReal x539=((1.0)*sj4);
IkReal x540=(cj5*sj4);
IkReal x541=(cj4*new_r01);
IkReal x542=(cj4*new_r00);
IkReal x543=((1.0)*x537);
IkReal x544=(cj5*x536);
IkReal x545=((1.0)*x536);
evalcond[0]=(((sj5*x537))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x536*x538)));
evalcond[2]=(((new_r11*sj4))+x544+x541);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x539))+(((-1.0)*x545)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x543))+(((-1.0)*new_r01*x539)));
evalcond[5]=(((cj4*x544))+new_r01+((sj4*x537)));
evalcond[6]=(((new_r10*sj4))+x542+(((-1.0)*cj5*x543)));
evalcond[7]=((((-1.0)*cj4*cj5*x543))+new_r00+((sj4*x536)));
evalcond[8]=(((x536*x540))+new_r11+(((-1.0)*cj4*x543)));
evalcond[9]=((((-1.0)*cj5*x537*x539))+new_r10+(((-1.0)*cj4*x545)));
evalcond[10]=(((cj5*x541))+((new_r11*x540))+(((-1.0)*new_r21*x538))+x536);
evalcond[11]=(((cj5*x542))+((new_r10*x540))+(((-1.0)*new_r20*x538))+(((-1.0)*x543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x547=IKPowWithIntegerCheck(sj5,-1);
if(!x547.valid){
continue;
}
IkReal x546=x547.value;
CheckValue<IkReal> x548=IKPowWithIntegerCheck(sj4,-1);
if(!x548.valid){
continue;
}
if( IKabs((x546*(x548.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x546)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x546*(x548.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))))+IKsqr(((-1.0)*new_r20*x546))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x546*(x548.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))), ((-1.0)*new_r20*x546));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x549=IKsin(j6);
IkReal x550=IKcos(j6);
IkReal x551=((1.0)*sj5);
IkReal x552=((1.0)*sj4);
IkReal x553=(cj5*sj4);
IkReal x554=(cj4*new_r01);
IkReal x555=(cj4*new_r00);
IkReal x556=((1.0)*x550);
IkReal x557=(cj5*x549);
IkReal x558=((1.0)*x549);
evalcond[0]=(((sj5*x550))+new_r20);
evalcond[1]=((((-1.0)*x549*x551))+new_r21);
evalcond[2]=(((new_r11*sj4))+x557+x554);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x552))+(((-1.0)*x558)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*new_r01*x552))+(((-1.0)*x556)));
evalcond[5]=(((sj4*x550))+((cj4*x557))+new_r01);
evalcond[6]=((((-1.0)*cj5*x556))+((new_r10*sj4))+x555);
evalcond[7]=((((-1.0)*cj4*cj5*x556))+new_r00+((sj4*x549)));
evalcond[8]=(((x549*x553))+new_r11+(((-1.0)*cj4*x556)));
evalcond[9]=(new_r10+(((-1.0)*cj5*x550*x552))+(((-1.0)*cj4*x558)));
evalcond[10]=(((new_r11*x553))+((cj5*x554))+(((-1.0)*new_r21*x551))+x549);
evalcond[11]=(((cj5*x555))+((new_r10*x553))+(((-1.0)*x556))+(((-1.0)*new_r20*x551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x559=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x559.valid){
continue;
}
CheckValue<IkReal> x560 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x560.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x559.value)))+(x560.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x561=IKsin(j6);
IkReal x562=IKcos(j6);
IkReal x563=((1.0)*sj5);
IkReal x564=((1.0)*sj4);
IkReal x565=(cj5*sj4);
IkReal x566=(cj4*new_r01);
IkReal x567=(cj4*new_r00);
IkReal x568=((1.0)*x562);
IkReal x569=(cj5*x561);
IkReal x570=((1.0)*x561);
evalcond[0]=(new_r20+((sj5*x562)));
evalcond[1]=(new_r21+(((-1.0)*x561*x563)));
evalcond[2]=(((new_r11*sj4))+x569+x566);
evalcond[3]=((((-1.0)*new_r00*x564))+((cj4*new_r10))+(((-1.0)*x570)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x568))+(((-1.0)*new_r01*x564)));
evalcond[5]=(((sj4*x562))+new_r01+((cj4*x569)));
evalcond[6]=(((new_r10*sj4))+(((-1.0)*cj5*x568))+x567);
evalcond[7]=((((-1.0)*cj4*cj5*x568))+((sj4*x561))+new_r00);
evalcond[8]=((((-1.0)*cj4*x568))+((x561*x565))+new_r11);
evalcond[9]=((((-1.0)*cj4*x570))+(((-1.0)*cj5*x562*x564))+new_r10);
evalcond[10]=(x561+((new_r11*x565))+((cj5*x566))+(((-1.0)*new_r21*x563)));
evalcond[11]=((((-1.0)*new_r20*x563))+((new_r10*x565))+((cj5*x567))+(((-1.0)*x568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "1327c54bf609b286bd81f3d4c134a061"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
