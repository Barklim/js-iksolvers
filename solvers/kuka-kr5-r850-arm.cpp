/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-05-18 22:29:22.077767
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[0]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=((0.48)*x7);
x13=((1.0)*x6);
x14=((0.48)*x0);
x15=((0.405)*x7);
x16=((0.79)*x8);
x17=((0.365)*x4);
x18=((1.0)*x7);
x19=((0.79)*x9);
x20=((1.0)*x0);
x21=((0.405)*x0);
x22=((0.09)*x0);
x23=((0.09)*x7);
x24=(x0*x5);
x25=(x3*x4);
x26=(x10*x5);
x27=(x2*x4);
x28=(x1*x3);
x29=((-1.0)*x9);
x30=((-1.0)*x8);
x31=(x1*x2);
x32=(x6*x7);
x33=(x6*x8);
x34=(x18*x5);
x35=(x0*x13);
x36=(x18*x27);
x37=((((-1.0)*x28))+x27);
x38=(x31+x25);
x39=(x37*x5);
x40=(x37*x6);
x41=(((x0*x28))+(((-1.0)*x20*x27)));
x42=((((-1.0)*x36))+((x28*x7)));
x43=(x40*x9);
x44=(x20*(((((-1.0)*x31))+(((-1.0)*x25)))));
x45=(x18*(((((-1.0)*x31))+(((-1.0)*x25)))));
x46=(x41*x8);
x47=(x42*x8);
x48=(x45*x6);
x49=(x45*x5);
x50=(x44*x5);
x51=(x44*x6);
x52=((-1.0)*x45);
x53=(x32+x50);
x54=(x34+(((-1.0)*x13*x44)));
x55=((((-1.0)*x20*x5))+(((-1.0)*x13*x45)));
x56=((((-1.0)*x48))+(((-1.0)*x24)));
x57=(x54*x9);
eerot[0]=(((x8*(((((-1.0)*x34))+x51))))+((x41*x9)));
eerot[1]=(((x10*(((((-1.0)*x46))+(((-1.0)*x57))))))+((x11*x53)));
eerot[2]=(((x11*((x46+x57))))+((x10*x53)));
eetrans[0]=((((-1.0)*x21*x27))+((x22*x25))+((x21*x28))+((x0*x17))+((x22*x31))+(((0.075)*x0))+((x11*(((((-1.0)*x16*x41))+(((-1.0)*x19*x54))))))+((x8*(((((-0.48)*x51))+((x12*x5))))))+((x10*(((((-0.79)*x32))+(((-0.79)*x50))))))+((x9*((((x14*x27))+(((-1.0)*x14*x28)))))));
eerot[3]=(((x9*(((((-1.0)*x18*x28))+x36))))+((x55*x8)));
eerot[4]=(((x11*(((((-1.0)*x49))+x35))))+((x10*((x47+((x55*x9)))))));
eerot[5]=(((x10*(((((-1.0)*x49))+x35))))+((x11*((((x30*x42))+((x29*x56)))))));
IkReal x58=((1.0)*x23);
eetrans[1]=((((-1.0)*x15*x28))+((x8*(((((0.48)*x48))+((x14*x5))))))+(((-1.0)*x25*x58))+((x10*(((((-0.79)*x0*x6))+(((0.79)*x49))))))+(((-0.075)*x7))+(((-1.0)*x31*x58))+(((-1.0)*x17*x7))+((x11*((((x19*x56))+((x16*x42))))))+((x9*(((((-1.0)*x12*x27))+((x12*x28))))))+((x15*x27)));
eerot[6]=(((x9*(((((-1.0)*x31))+(((-1.0)*x25))))))+((x33*x37)));
eerot[7]=(((x11*x39))+((x10*((x43+((x38*x8)))))));
eerot[8]=(((x26*x37))+((x11*((((x29*x40))+((x30*x38)))))));
eetrans[2]=((0.335)+((x9*(((((0.48)*x25))+(((0.48)*x31))))))+((x33*(((((0.48)*x28))+(((-0.48)*x27))))))+(((-0.405)*x31))+(((-0.405)*x25))+((x26*(((((0.79)*x28))+(((-0.79)*x27))))))+(((-0.09)*x27))+(((0.365)*x1))+((x11*((((x19*x40))+((x16*x38))))))+(((0.09)*x28)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r02;
new_r01=r01;
new_r02=((-1.0)*r00);
new_px=((((0.48)*r00))+(((0.79)*r02))+px);
new_r10=((-1.0)*r12);
new_r11=((-1.0)*r11);
new_r12=r10;
new_py=((((-0.79)*r12))+(((-1.0)*py))+(((-0.48)*r10)));
new_r20=((-1.0)*r22);
new_r21=((-1.0)*r21);
new_r22=r20;
new_pz=((0.335)+(((-0.79)*r22))+(((-1.0)*pz))+(((-0.48)*r20)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x59=((1.0)*px);
IkReal x60=((1.0)*pz);
IkReal x61=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x61))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x60)));
rxp0_2=((((-1.0)*r10*x59))+((py*r00)));
rxp1_0=((((-1.0)*r21*x61))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x60)));
rxp1_2=((((-1.0)*r11*x59))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x61)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x60)));
rxp2_2=((((-1.0)*r12*x59))+((py*r02)));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x63 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x63.valid){
continue;
}
IkReal x62=x63.value;
j0array[0]=((-1.0)*x62);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x62)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((0.989642031502233)+(((-3.30183345233875)*pp))+(((0.495275017850813)*py*sj0))+(((0.495275017850813)*cj0*px)))) < -1-IKFAST_SINCOS_THRESH || (((0.989642031502233)+(((-3.30183345233875)*pp))+(((0.495275017850813)*py*sj0))+(((0.495275017850813)*cj0*px)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x64=IKasin(((0.989642031502233)+(((-3.30183345233875)*pp))+(((0.495275017850813)*py*sj0))+(((0.495275017850813)*cj0*px))));
j2array[0]=((-2.92292370771585)+(((-1.0)*x64)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((0.218668945873942)+x64);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[2];
IkReal x65=(pz*sj2);
IkReal x66=(cj2*pz);
IkReal x67=((13.3333333333333)*sj2);
IkReal x68=(cj0*px);
IkReal x69=(py*sj0);
IkReal x70=((60.0)*cj2);
IkReal x71=((0.09)*sj2);
IkReal x72=((0.405)*cj2);
j1eval[0]=(sj2+(((-54.0740740740741)*pz))+(((-1.0)*x67*x69))+(((-1.0)*x67*x68))+(((60.0)*x65))+(((-13.3333333333333)*x66))+(((4.5)*cj2))+(((-1.0)*x69*x70))+(((-1.0)*x68*x70)));
j1eval[1]=IKsign(((((0.405)*x65))+(((0.00675)*sj2))+(((-0.365)*pz))+(((0.030375)*cj2))+(((-1.0)*x69*x72))+(((-1.0)*x69*x71))+(((-1.0)*x68*x72))+(((-1.0)*x68*x71))+(((-0.09)*x66))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x73=cj2*cj2;
IkReal x74=(cj0*px);
IkReal x75=((60.0)*sj2);
IkReal x76=(cj2*pz);
IkReal x77=(pz*sj2);
IkReal x78=((13.3333333333333)*cj2);
IkReal x79=(cj2*sj2);
IkReal x80=(py*sj0);
IkReal x81=((0.405)*sj2);
IkReal x82=((0.09)*cj2);
j1eval[0]=((4.05555555555556)+(((-54.0740740740741)*x80))+cj2+(((-4.5)*sj2))+(((-1.0)*x78*x80))+(((-1.0)*x74*x78))+(((60.0)*x76))+(((-54.0740740740741)*x74))+((x75*x80))+((x74*x75))+(((13.3333333333333)*x77)));
j1eval[1]=IKsign(((0.027375)+(((-0.030375)*sj2))+(((-1.0)*x80*x82))+((x74*x81))+(((0.00675)*cj2))+(((-0.365)*x80))+(((-1.0)*x74*x82))+((x80*x81))+(((-0.365)*x74))+(((0.09)*x77))+(((0.405)*x76))));
j1eval[2]=((IKabs(((0.03645)+((pz*x74))+(((-0.075)*pz))+((pz*x80))+(((0.155925)*x79))+(((-0.0729)*x73))+(((-0.147825)*cj2))+(((-0.03285)*sj2)))))+(IKabs(((-0.29725)+(((0.0729)*x79))+(pz*pz)+(((0.155925)*x73))+(((-0.0657)*cj2))+(((0.29565)*sj2))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x83=cj0*cj0;
IkReal x84=py*py;
IkReal x85=px*px;
IkReal x86=pz*pz;
IkReal x87=(py*sj0);
IkReal x88=(cj0*px);
IkReal x89=(x83*x84);
IkReal x90=(x83*x85);
IkReal x91=(x87*x88);
j1eval[0]=((-1.0)+(((177.777777777778)*x89))+(((26.6666666666667)*x87))+(((26.6666666666667)*x88))+(((-177.777777777778)*x90))+(((-177.777777777778)*x84))+(((-177.777777777778)*x86))+(((-355.555555555556)*x91)));
j1eval[1]=IKsign(((-0.005625)+(((0.15)*x88))+(((0.15)*x87))+(((-2.0)*x91))+x89+(((-1.0)*x86))+(((-1.0)*x84))+(((-1.0)*x90))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x92=py*py;
IkReal x93=cj0*cj0;
IkReal x94=(cj0*px);
IkReal x95=((0.405)*cj2);
IkReal x96=((0.09)*sj2);
IkReal x97=(py*sj0);
IkReal x98=((0.405)*sj2);
IkReal x99=((0.09)*cj2);
CheckValue<IkReal> x100 = IKatan2WithCheck(IkReal(((0.027375)+(((-1.0)*pz*x96))+(((-1.0)*pz*x95))+(((-0.030375)*sj2))+(((-1.0)*x94*x99))+((x97*x98))+(((0.00675)*cj2))+(((-0.365)*x97))+(((-0.365)*x94))+(((-1.0)*x97*x99))+((x94*x98)))),((((-1.0)*x95*x97))+(((-1.0)*pz*x98))+(((0.00675)*sj2))+(((-1.0)*x94*x96))+(((-1.0)*x94*x95))+(((0.365)*pz))+((pz*x99))+(((0.030375)*cj2))+(((-1.0)*x96*x97))),IKFAST_ATAN2_MAGTHRESH);
if(!x100.valid){
continue;
}
CheckValue<IkReal> x101=IKPowWithIntegerCheck(IKsign(((-0.005625)+((x92*x93))+(((0.15)*x94))+(((0.15)*x97))+(((-1.0)*x93*(px*px)))+(((-1.0)*(pz*pz)))+(((-1.0)*x92))+(((-2.0)*x94*x97)))),-1);
if(!x101.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x100.value)+(((1.5707963267949)*(x101.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x102=IKsin(j1);
IkReal x103=IKcos(j1);
IkReal x104=(cj0*px);
IkReal x105=((0.09)*cj2);
IkReal x106=(py*sj0);
IkReal x107=((0.09)*sj2);
IkReal x108=((1.0)*pz);
IkReal x109=((0.405)*sj2);
IkReal x110=((0.405)*cj2);
IkReal x111=((1.0)*x103);
IkReal x112=(sj2*x103);
IkReal x113=((0.73)*x102);
evalcond[0]=((-0.365)+(((-0.075)*x102))+(((-1.0)*x105))+x109+((x102*x106))+((x102*x104))+(((-1.0)*x103*x108)));
evalcond[1]=(x110+x107+(((-1.0)*x106*x111))+(((-1.0)*x102*x108))+(((0.075)*x103))+(((-1.0)*x104*x111)));
evalcond[2]=((((-1.0)*x108))+((x102*x110))+((x102*x107))+((x103*x109))+(((-0.365)*x103))+(((-1.0)*x103*x105)));
evalcond[3]=((0.033275)+(((-0.05475)*x102))+((x106*x113))+(((-1.0)*pp))+(((-0.73)*pz*x103))+((x104*x113))+(((0.15)*x104))+(((0.15)*x106)));
evalcond[4]=((0.075)+(((0.365)*x102))+((x103*x110))+((x102*x105))+((x103*x107))+(((-1.0)*x102*x109))+(((-1.0)*x106))+(((-1.0)*x104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x475=cj2*cj2;
IkReal x476=(cj0*px);
IkReal x477=(cj2*sj2);
IkReal x478=((0.405)*sj2);
IkReal x479=(py*sj0);
IkReal x480=((0.09)*cj2);
CheckValue<IkReal> x481 = IKatan2WithCheck(IkReal(((-0.29725)+(pz*pz)+(((0.155925)*x475))+(((-0.0657)*cj2))+(((0.29565)*sj2))+(((0.0729)*x477)))),((0.03645)+(((-0.075)*pz))+(((-0.147825)*cj2))+((pz*x479))+((pz*x476))+(((0.155925)*x477))+(((-0.0729)*x475))+(((-0.03285)*sj2))),IKFAST_ATAN2_MAGTHRESH);
if(!x481.valid){
continue;
}
CheckValue<IkReal> x482=IKPowWithIntegerCheck(IKsign(((0.027375)+(((-1.0)*x476*x480))+(((0.09)*pz*sj2))+(((-0.030375)*sj2))+((x478*x479))+(((-0.365)*x476))+(((-0.365)*x479))+(((0.00675)*cj2))+(((-1.0)*x479*x480))+(((0.405)*cj2*pz))+((x476*x478)))),-1);
if(!x482.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x481.value)+(((1.5707963267949)*(x482.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x483=IKsin(j1);
IkReal x484=IKcos(j1);
IkReal x485=(cj0*px);
IkReal x486=((0.09)*cj2);
IkReal x487=(py*sj0);
IkReal x488=((0.09)*sj2);
IkReal x489=((1.0)*pz);
IkReal x490=((0.405)*sj2);
IkReal x491=((0.405)*cj2);
IkReal x492=((1.0)*x484);
IkReal x493=(sj2*x484);
IkReal x494=((0.73)*x483);
evalcond[0]=((-0.365)+(((-1.0)*x484*x489))+(((-1.0)*x486))+((x483*x487))+((x483*x485))+(((-0.075)*x483))+x490);
evalcond[1]=((((-1.0)*x483*x489))+x488+x491+(((-1.0)*x487*x492))+(((-1.0)*x485*x492))+(((0.075)*x484)));
evalcond[2]=((((-1.0)*x484*x486))+(((-1.0)*x489))+((x483*x488))+((x483*x491))+(((-0.365)*x484))+((x484*x490)));
evalcond[3]=((0.033275)+(((-0.05475)*x483))+(((-1.0)*pp))+(((0.15)*x485))+(((0.15)*x487))+(((-0.73)*pz*x484))+((x485*x494))+((x487*x494)));
evalcond[4]=((0.075)+((x484*x488))+((x483*x486))+(((-1.0)*x483*x490))+(((-1.0)*x485))+(((-1.0)*x487))+(((0.365)*x483))+((x484*x491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x495=cj2*cj2;
IkReal x496=(cj2*sj2);
IkReal x497=((0.405)*cj2);
IkReal x498=(py*sj0);
IkReal x499=(cj0*px);
IkReal x500=((0.09)*sj2);
IkReal x501=((1.0)*pz);
CheckValue<IkReal> x502=IKPowWithIntegerCheck(IKsign(((((-1.0)*x499*x500))+(((0.00675)*sj2))+(((0.405)*pz*sj2))+(((-0.365)*pz))+(((-1.0)*x497*x498))+(((-1.0)*x497*x499))+(((-0.09)*cj2*pz))+(((0.030375)*cj2))+(((-1.0)*x498*x500)))),-1);
if(!x502.valid){
continue;
}
CheckValue<IkReal> x503 = IKatan2WithCheck(IkReal(((0.03645)+(((0.155925)*x496))+(((-1.0)*x499*x501))+(((-0.0729)*x495))+(((-0.147825)*cj2))+(((-0.03285)*sj2))+(((0.075)*pz))+(((-1.0)*x498*x501)))),((-0.0081)+(pz*pz)+(((-0.155925)*x495))+(((-0.0729)*x496))),IKFAST_ATAN2_MAGTHRESH);
if(!x503.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x502.value)))+(x503.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x504=IKsin(j1);
IkReal x505=IKcos(j1);
IkReal x506=(cj0*px);
IkReal x507=((0.09)*cj2);
IkReal x508=(py*sj0);
IkReal x509=((0.09)*sj2);
IkReal x510=((1.0)*pz);
IkReal x511=((0.405)*sj2);
IkReal x512=((0.405)*cj2);
IkReal x513=((1.0)*x505);
IkReal x514=(sj2*x505);
IkReal x515=((0.73)*x504);
evalcond[0]=((-0.365)+(((-1.0)*x507))+x511+(((-1.0)*x505*x510))+((x504*x506))+((x504*x508))+(((-0.075)*x504)));
evalcond[1]=((((-1.0)*x504*x510))+x509+x512+(((-1.0)*x506*x513))+(((-1.0)*x508*x513))+(((0.075)*x505)));
evalcond[2]=((((-1.0)*x505*x507))+((x504*x512))+(((-0.365)*x505))+(((-1.0)*x510))+((x505*x511))+((x504*x509)));
evalcond[3]=((0.033275)+(((-0.05475)*x504))+(((0.15)*x508))+(((0.15)*x506))+(((-0.73)*pz*x505))+(((-1.0)*pp))+((x506*x515))+((x508*x515)));
evalcond[4]=((0.075)+(((-1.0)*x504*x511))+((x505*x509))+(((0.365)*x504))+(((-1.0)*x506))+(((-1.0)*x508))+((x505*x512))+((x504*x507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x114=((1.0)*cj0);
IkReal x115=(r11*sj0);
IkReal x116=(r10*sj0);
IkReal x117=((1.0)*cj2);
IkReal x118=(cj1*sj2);
IkReal x119=(r12*sj0);
IkReal x120=(((cj2*sj1))+x118);
IkReal x121=((((-1.0)*cj1*x117))+((sj1*sj2)));
IkReal x122=(sj0*x121);
IkReal x123=(cj0*x120);
IkReal x124=(cj0*x121);
IkReal x125=((((-1.0)*sj1*x117))+(((-1.0)*x118)));
new_r00=(((r00*x123))+((r20*x121))+((x116*x120)));
new_r01=(((r21*x121))+((r01*x123))+((x115*x120)));
new_r02=(((r02*x123))+((r22*x121))+((x119*x120)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x114)));
new_r11=(((r01*sj0))+(((-1.0)*r11*x114)));
new_r12=((((-1.0)*r12*x114))+((r02*sj0)));
new_r20=(((r00*x124))+((r20*x125))+((x116*x121)));
new_r21=(((r21*x125))+((r01*x124))+((x115*x121)));
new_r22=(((r02*x124))+((r22*x125))+((x119*x121)));
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=new_r22;
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3eval[2];
IkReal x126=((1.0)*cj0);
IkReal x127=(r11*sj0);
IkReal x128=(r10*sj0);
IkReal x129=((1.0)*cj2);
IkReal x130=(cj1*sj2);
IkReal x131=(r12*sj0);
IkReal x132=(((cj2*sj1))+x130);
IkReal x133=x121;
IkReal x134=(sj0*x133);
IkReal x135=(cj0*x132);
IkReal x136=(cj0*x133);
IkReal x137=x125;
new_r00=(((r00*x135))+((r20*x133))+((x128*x132)));
new_r01=(((x127*x132))+((r21*x133))+((r01*x135)));
new_r02=(((r02*x135))+((r22*x133))+((x131*x132)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x126)));
new_r11=(((r01*sj0))+(((-1.0)*r11*x126)));
new_r12=((((-1.0)*r12*x126))+((r02*sj0)));
new_r20=(((r00*x136))+((r20*x137))+((x128*x133)));
new_r21=(((x127*x133))+((r21*x137))+((r01*x136)));
new_r22=(((r02*x136))+((r22*x137))+((x131*x133)));
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x138=((1.0)*cj0);
IkReal x139=(r11*sj0);
IkReal x140=(r10*sj0);
IkReal x141=((1.0)*cj2);
IkReal x142=(cj1*sj2);
IkReal x143=(r12*sj0);
IkReal x144=(((cj2*sj1))+x142);
IkReal x145=x121;
IkReal x146=(sj0*x145);
IkReal x147=(cj0*x144);
IkReal x148=(cj0*x145);
IkReal x149=x125;
new_r00=(((x140*x144))+((r20*x145))+((r00*x147)));
new_r01=(((r01*x147))+((r21*x145))+((x139*x144)));
new_r02=(((r02*x147))+((r22*x145))+((x143*x144)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x138)));
new_r11=(((r01*sj0))+(((-1.0)*r11*x138)));
new_r12=((((-1.0)*r12*x138))+((r02*sj0)));
new_r20=(((x140*x145))+((r20*x149))+((r00*x148)));
new_r21=(((r01*x148))+((r21*x149))+((x139*x145)));
new_r22=(((r02*x148))+((r22*x149))+((x143*x145)));
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x151 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x151.valid){
continue;
}
IkReal x150=x151.value;
j3array[0]=((-1.0)*x150);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x150)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x152=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj3*x152))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x152))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x152))+(((-1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x152))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj3*x152))+(((-1.0)*new_r00*sj3))), ((((-1.0)*sj3*x152))+((cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x153=IKsin(j5);
IkReal x154=IKcos(j5);
IkReal x155=((1.0)*sj3);
IkReal x156=((1.0)*x154);
IkReal x157=(sj3*x153);
IkReal x158=((1.0)*x153);
IkReal x159=(cj3*x156);
evalcond[0]=(((new_r11*sj3))+x153+((cj3*new_r01)));
evalcond[1]=(((cj3*x153))+new_r01+((sj3*x154)));
evalcond[2]=((((-1.0)*x156))+((new_r10*sj3))+((cj3*new_r00)));
evalcond[3]=((((-1.0)*x158))+((cj3*new_r10))+(((-1.0)*new_r00*x155)));
evalcond[4]=((((-1.0)*x156))+((cj3*new_r11))+(((-1.0)*new_r01*x155)));
evalcond[5]=((((-1.0)*x159))+x157+new_r00);
evalcond[6]=((((-1.0)*x159))+x157+new_r11);
evalcond[7]=((((-1.0)*x154*x155))+(((-1.0)*cj3*x158))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x161 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x161.valid){
continue;
}
IkReal x160=x161.value;
j3array[0]=((-1.0)*x160);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x160)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x162=((1.0)*sj3);
if( IKabs(((((-1.0)*new_r00*x162))+((cj3*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x162)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x162))+((cj3*new_r01))))+IKsqr(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x162))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*new_r00*x162))+((cj3*new_r01))), ((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x162))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x163=IKsin(j5);
IkReal x164=IKcos(j5);
IkReal x165=((1.0)*sj3);
IkReal x166=((1.0)*x163);
IkReal x167=(sj3*x164);
IkReal x168=((1.0)*x164);
IkReal x169=(cj3*x166);
evalcond[0]=(((new_r10*sj3))+x164+((cj3*new_r00)));
evalcond[1]=((((-1.0)*x166))+((new_r11*sj3))+((cj3*new_r01)));
evalcond[2]=(((sj3*x163))+((cj3*x164))+new_r00);
evalcond[3]=((((-1.0)*new_r00*x165))+(((-1.0)*x166))+((cj3*new_r10)));
evalcond[4]=((((-1.0)*x168))+((cj3*new_r11))+(((-1.0)*new_r01*x165)));
evalcond[5]=((((-1.0)*x169))+x167+new_r01);
evalcond[6]=((((-1.0)*x169))+x167+new_r10);
evalcond[7]=((((-1.0)*x163*x165))+(((-1.0)*cj3*x168))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x171=IKPowWithIntegerCheck(sj4,-1);
if(!x171.valid){
continue;
}
IkReal x170=x171.value;
CheckValue<IkReal> x172=IKPowWithIntegerCheck(new_r12,-1);
if(!x172.valid){
continue;
}
if( IKabs((x170*(x172.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r02*new_r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x170)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x170*(x172.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r02*new_r02)))))))+IKsqr((new_r02*x170))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x170*(x172.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r02*new_r02)))))), (new_r02*x170));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x173=IKcos(j3);
IkReal x174=IKsin(j3);
IkReal x175=((1.0)*sj4);
IkReal x176=((1.0)*cj4);
IkReal x177=(new_r12*x174);
IkReal x178=(new_r02*x173);
evalcond[0]=(new_r02+(((-1.0)*x173*x175)));
evalcond[1]=((((-1.0)*x174*x175))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x174))+((new_r12*x173)));
evalcond[3]=((((-1.0)*x175))+x178+x177);
evalcond[4]=(((new_r22*sj4))+(((-1.0)*x176*x177))+(((-1.0)*x176*x178)));
evalcond[5]=((((-1.0)*new_r20*x176))+(((-1.0)*new_r10*x174*x175))+(((-1.0)*new_r00*x173*x175)));
evalcond[6]=((((-1.0)*new_r11*x174*x175))+(((-1.0)*new_r21*x176))+(((-1.0)*new_r01*x173*x175)));
evalcond[7]=((1.0)+(((-1.0)*x175*x177))+(((-1.0)*x175*x178))+(((-1.0)*new_r22*x176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x179=((1.0)*cj0);
IkReal x180=(r11*sj0);
IkReal x181=(r10*sj0);
IkReal x182=((1.0)*cj2);
IkReal x183=(cj1*sj2);
IkReal x184=(r12*sj0);
IkReal x185=(((cj2*sj1))+x183);
IkReal x186=x121;
IkReal x187=(sj0*x186);
IkReal x188=(cj0*x185);
IkReal x189=(cj0*x186);
IkReal x190=x125;
new_r00=(((r00*x188))+((r20*x186))+((x181*x185)));
new_r01=(((x180*x185))+((r01*x188))+((r21*x186)));
new_r02=(((x184*x185))+((r02*x188))+((r22*x186)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x179)));
new_r11=((((-1.0)*r11*x179))+((r01*sj0)));
new_r12=(((r02*sj0))+(((-1.0)*r12*x179)));
new_r20=(((r00*x189))+((r20*x190))+((x181*x186)));
new_r21=(((x180*x186))+((r01*x189))+((r21*x190)));
new_r22=(((x184*x186))+((r02*x189))+((r22*x190)));
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x191=((1.0)*cj0);
IkReal x192=(r11*sj0);
IkReal x193=(r10*sj0);
IkReal x194=((1.0)*cj2);
IkReal x195=(cj1*sj2);
IkReal x196=(r12*sj0);
IkReal x197=(((cj2*sj1))+x195);
IkReal x198=x121;
IkReal x199=(sj0*x198);
IkReal x200=(cj0*x197);
IkReal x201=(cj0*x198);
IkReal x202=x125;
new_r00=(((x193*x197))+((r20*x198))+((r00*x200)));
new_r01=(((r01*x200))+((x192*x197))+((r21*x198)));
new_r02=(((x196*x197))+((r22*x198))+((r02*x200)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x191)));
new_r11=(((r01*sj0))+(((-1.0)*r11*x191)));
new_r12=((((-1.0)*r12*x191))+((r02*sj0)));
new_r20=(((x193*x198))+((r00*x201))+((r20*x202)));
new_r21=(((r01*x201))+((x192*x198))+((r21*x202)));
new_r22=(((r22*x202))+((x196*x198))+((r02*x201)));
j5eval[0]=sj3;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x203=((1.0)*cj0);
IkReal x204=(r11*sj0);
IkReal x205=(r10*sj0);
IkReal x206=((1.0)*cj2);
IkReal x207=(cj1*sj2);
IkReal x208=(r12*sj0);
IkReal x209=(((cj2*sj1))+x207);
IkReal x210=x121;
IkReal x211=(sj0*x210);
IkReal x212=(cj0*x209);
IkReal x213=(cj0*x210);
IkReal x214=x125;
new_r00=(((x205*x209))+((r00*x212))+((r20*x210)));
new_r01=(((r21*x210))+((x204*x209))+((r01*x212)));
new_r02=(((r02*x212))+((r22*x210))+((x208*x209)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x203)));
new_r11=((((-1.0)*r11*x203))+((r01*sj0)));
new_r12=((((-1.0)*r12*x203))+((r02*sj0)));
new_r20=(((x205*x210))+((r00*x213))+((r20*x214)));
new_r21=(((x204*x210))+((r21*x214))+((r01*x213)));
new_r22=(((x208*x210))+((r02*x213))+((r22*x214)));
j5eval[0]=cj3;
j5eval[1]=cj4;
j5eval[2]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x215=(new_r22+(((-1.0)*cj4)));
IkReal x216=((((-1.0)*sj4))+new_r12);
IkReal x217=((1.0)*cj4);
IkReal x218=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x215;
evalcond[2]=x215;
evalcond[3]=new_r02;
evalcond[4]=x216;
evalcond[5]=x216;
evalcond[6]=((((-1.0)*new_r12*x217))+((new_r22*sj4)));
evalcond[7]=((((-1.0)*new_r10*x218))+(((-1.0)*new_r20*x217)));
evalcond[8]=((((-1.0)*new_r11*x218))+(((-1.0)*new_r21*x217)));
evalcond[9]=((1.0)+(((-1.0)*new_r12*x218))+(((-1.0)*new_r22*x217)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x219 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x219.valid){
continue;
}
CheckValue<IkReal> x220=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x220.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x219.value)+(((1.5707963267949)*(x220.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x221=IKsin(j5);
IkReal x222=IKcos(j5);
IkReal x223=((1.0)*new_r22);
IkReal x224=((1.0)*x221);
IkReal x225=((1.0)*x222);
evalcond[0]=(((new_r12*x222))+new_r20);
evalcond[1]=(((new_r22*x221))+new_r11);
evalcond[2]=(new_r21+(((-1.0)*new_r12*x224)));
evalcond[3]=((((-1.0)*x222*x223))+new_r10);
evalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x224)));
evalcond[5]=((((-1.0)*new_r01))+(((-1.0)*x225)));
evalcond[6]=((((-1.0)*new_r10*x223))+((new_r12*new_r20))+x222);
evalcond[7]=((((-1.0)*new_r11*x223))+((new_r12*new_r21))+(((-1.0)*x224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x226=(new_r22+(((-1.0)*cj4)));
IkReal x227=((1.0)*cj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x226;
evalcond[2]=x226;
evalcond[3]=new_r02;
evalcond[4]=(sj4+new_r12);
evalcond[5]=((((-1.0)*sj4))+(((-1.0)*new_r12)));
evalcond[6]=(((cj4*new_r12))+((new_r22*sj4)));
evalcond[7]=(((new_r10*sj4))+(((-1.0)*new_r20*x227)));
evalcond[8]=(((new_r11*sj4))+(((-1.0)*new_r21*x227)));
evalcond[9]=((1.0)+((new_r12*sj4))+(((-1.0)*new_r22*x227)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r00, new_r01);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x228=IKsin(j5);
IkReal x229=IKcos(j5);
IkReal x230=((1.0)*new_r12);
IkReal x231=((1.0)*x228);
IkReal x232=((1.0)*x229);
evalcond[0]=(((new_r12*x228))+new_r21);
evalcond[1]=((((-1.0)*x231))+new_r00);
evalcond[2]=((((-1.0)*x232))+new_r01);
evalcond[3]=(new_r20+(((-1.0)*x229*x230)));
evalcond[4]=(((new_r22*x228))+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*new_r22*x232))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r20*x230))+x229+((new_r10*new_r22)));
evalcond[7]=((((-1.0)*new_r21*x230))+(((-1.0)*x231))+((new_r11*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x233=(new_r12*sj3);
IkReal x234=(new_r11*sj3);
IkReal x235=((1.0)*sj3);
IkReal x236=((1.0)*cj3);
IkReal x237=((((-1.0)*new_r02*x235))+((cj3*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x236))+new_r02);
evalcond[3]=((((-1.0)*x235))+new_r12);
evalcond[4]=x237;
evalcond[5]=x237;
evalcond[6]=((-1.0)+x233+((cj3*new_r02)));
evalcond[7]=(x234+((cj3*new_r01)));
evalcond[8]=(((new_r10*sj3))+((cj3*new_r00)));
evalcond[9]=((((-1.0)*new_r10*x235))+(((-1.0)*new_r00*x236)));
evalcond[10]=((((-1.0)*new_r01*x236))+(((-1.0)*x234)));
evalcond[11]=((1.0)+(((-1.0)*new_r02*x236))+(((-1.0)*x233)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x238=IKcos(j5);
IkReal x239=IKsin(j5);
IkReal x240=((1.0)*new_r12);
IkReal x241=((1.0)*x239);
IkReal x242=((1.0)*x238);
evalcond[0]=(x238+new_r20);
evalcond[1]=((((-1.0)*x241))+new_r21);
evalcond[2]=(((new_r12*x238))+new_r01);
evalcond[3]=(((new_r12*x239))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x242))+new_r11);
evalcond[5]=((((-1.0)*new_r02*x241))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x240))+((new_r02*new_r10))+(((-1.0)*x241)));
evalcond[7]=((((-1.0)*new_r01*x240))+((new_r02*new_r11))+(((-1.0)*x242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x243=((((-1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x244=(((new_r10*sj3))+((cj3*new_r00)));
IkReal x245=(((new_r11*sj3))+((cj3*new_r01)));
IkReal x246=((1.0)+((new_r12*sj3))+((cj3*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj3+new_r02);
evalcond[3]=(sj3+new_r12);
evalcond[4]=x243;
evalcond[5]=x243;
evalcond[6]=x246;
evalcond[7]=x245;
evalcond[8]=x244;
evalcond[9]=x244;
evalcond[10]=x245;
evalcond[11]=x246;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x247=IKcos(j5);
IkReal x248=IKsin(j5);
IkReal x249=((1.0)*new_r02);
IkReal x250=((1.0)*x247);
IkReal x251=((1.0)*x248);
evalcond[0]=(x248+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x250)));
evalcond[2]=(new_r11+((new_r02*x247)));
evalcond[3]=(new_r10+((new_r02*x248)));
evalcond[4]=(new_r01+(((-1.0)*new_r12*x250)));
evalcond[5]=(new_r00+(((-1.0)*new_r12*x251)));
evalcond[6]=(((new_r00*new_r12))+(((-1.0)*new_r10*x249))+(((-1.0)*x251)));
evalcond[7]=(((new_r01*new_r12))+(((-1.0)*new_r11*x249))+(((-1.0)*x250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x252=(new_r12*sj3);
IkReal x253=((1.0)*new_r02);
IkReal x254=((((-1.0)*sj3*x253))+((cj3*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x254;
evalcond[7]=x254;
evalcond[8]=(x252+((cj3*new_r02)));
evalcond[9]=((((-1.0)*cj3*x253))+(((-1.0)*x252)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x255=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj3*x255))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x255))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x255))+(((-1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x255))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj3*x255))+(((-1.0)*new_r00*sj3))), ((((-1.0)*sj3*x255))+((cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x256=IKsin(j5);
IkReal x257=IKcos(j5);
IkReal x258=((1.0)*sj3);
IkReal x259=((1.0)*x257);
IkReal x260=(sj3*x256);
IkReal x261=((1.0)*x256);
IkReal x262=(cj3*x259);
evalcond[0]=(((new_r11*sj3))+x256+((cj3*new_r01)));
evalcond[1]=(((cj3*x256))+((sj3*x257))+new_r01);
evalcond[2]=(((new_r10*sj3))+((cj3*new_r00))+(((-1.0)*x259)));
evalcond[3]=(((cj3*new_r10))+(((-1.0)*x261))+(((-1.0)*new_r00*x258)));
evalcond[4]=((((-1.0)*new_r01*x258))+((cj3*new_r11))+(((-1.0)*x259)));
evalcond[5]=(x260+new_r00+(((-1.0)*x262)));
evalcond[6]=(x260+new_r11+(((-1.0)*x262)));
evalcond[7]=((((-1.0)*x257*x258))+(((-1.0)*cj3*x261))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x263=((((-1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x264=(((new_r12*sj3))+((cj3*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x263;
evalcond[7]=x263;
evalcond[8]=x264;
evalcond[9]=x264;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x265=((1.0)*sj3);
if( IKabs(((((-1.0)*new_r00*x265))+((cj3*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x265))+(((-1.0)*cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x265))+((cj3*new_r01))))+IKsqr(((((-1.0)*new_r01*x265))+(((-1.0)*cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*new_r00*x265))+((cj3*new_r01))), ((((-1.0)*new_r01*x265))+(((-1.0)*cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x266=IKsin(j5);
IkReal x267=IKcos(j5);
IkReal x268=((1.0)*sj3);
IkReal x269=((1.0)*x266);
IkReal x270=(sj3*x267);
IkReal x271=((1.0)*x267);
IkReal x272=(cj3*x269);
evalcond[0]=(((new_r10*sj3))+x267+((cj3*new_r00)));
evalcond[1]=(((new_r11*sj3))+((cj3*new_r01))+(((-1.0)*x269)));
evalcond[2]=(((sj3*x266))+new_r00+((cj3*x267)));
evalcond[3]=((((-1.0)*new_r00*x268))+((cj3*new_r10))+(((-1.0)*x269)));
evalcond[4]=((((-1.0)*new_r01*x268))+((cj3*new_r11))+(((-1.0)*x271)));
evalcond[5]=(x270+(((-1.0)*x272))+new_r01);
evalcond[6]=(x270+(((-1.0)*x272))+new_r10);
evalcond[7]=((((-1.0)*cj3*x271))+new_r11+(((-1.0)*x266*x268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x273=(new_r22+(((-1.0)*cj4)));
IkReal x274=((((-1.0)*sj4))+new_r02);
IkReal x275=((1.0)*cj4);
IkReal x276=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=x273;
evalcond[2]=x273;
evalcond[3]=x274;
evalcond[4]=new_r12;
evalcond[5]=x274;
evalcond[6]=(((new_r22*sj4))+(((-1.0)*new_r02*x275)));
evalcond[7]=((((-1.0)*new_r00*x276))+(((-1.0)*new_r20*x275)));
evalcond[8]=((((-1.0)*new_r01*x276))+(((-1.0)*new_r21*x275)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x275))+(((-1.0)*new_r02*x276)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x277=IKcos(j5);
IkReal x278=IKsin(j5);
IkReal x279=((1.0)*new_r22);
IkReal x280=((1.0)*x278);
evalcond[0]=(new_r20+((new_r02*x277)));
evalcond[1]=((((-1.0)*x280))+new_r10);
evalcond[2]=((((-1.0)*x277))+new_r11);
evalcond[3]=(((new_r22*x278))+new_r01);
evalcond[4]=((((-1.0)*new_r02*x280))+new_r21);
evalcond[5]=((((-1.0)*x277*x279))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x279))+x277+((new_r02*new_r20)));
evalcond[7]=((((-1.0)*new_r01*x279))+(((-1.0)*x280))+((new_r02*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x281=(new_r22+(((-1.0)*cj4)));
IkReal x282=((1.0)*cj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=x281;
evalcond[2]=x281;
evalcond[3]=(sj4+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*sj4))+(((-1.0)*new_r02)));
evalcond[6]=(((cj4*new_r02))+((new_r22*sj4)));
evalcond[7]=(((new_r00*sj4))+(((-1.0)*new_r20*x282)));
evalcond[8]=(((new_r01*sj4))+(((-1.0)*new_r21*x282)));
evalcond[9]=((1.0)+((new_r02*sj4))+(((-1.0)*new_r22*x282)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x283 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x283.valid){
continue;
}
CheckValue<IkReal> x284=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x284.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x283.value)+(((1.5707963267949)*(x284.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x285=IKsin(j5);
IkReal x286=IKcos(j5);
IkReal x287=((1.0)*new_r02);
IkReal x288=((1.0)*x285);
IkReal x289=((1.0)*x286);
evalcond[0]=(((new_r02*x285))+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x286*x287)));
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x288)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x289)));
evalcond[4]=((((-1.0)*new_r01))+((new_r22*x285)));
evalcond[5]=((((-1.0)*new_r22*x289))+(((-1.0)*new_r00)));
evalcond[6]=(((new_r00*new_r22))+x286+(((-1.0)*new_r20*x287)));
evalcond[7]=(((new_r01*new_r22))+(((-1.0)*x288))+(((-1.0)*new_r21*x287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x291=IKPowWithIntegerCheck(sj4,-1);
if(!x291.valid){
continue;
}
IkReal x290=x291.value;
CheckValue<IkReal> x292=IKPowWithIntegerCheck(cj3,-1);
if(!x292.valid){
continue;
}
CheckValue<IkReal> x293=IKPowWithIntegerCheck(cj4,-1);
if(!x293.valid){
continue;
}
if( IKabs((x290*(x292.value)*(x293.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x290)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x290*(x292.value)*(x293.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4))))))+IKsqr(((-1.0)*new_r20*x290))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x290*(x292.value)*(x293.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4))))), ((-1.0)*new_r20*x290));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x294=IKsin(j5);
IkReal x295=IKcos(j5);
IkReal x296=(cj3*new_r00);
IkReal x297=(cj3*cj4);
IkReal x298=((1.0)*sj3);
IkReal x299=((1.0)*x294);
IkReal x300=(sj3*x294);
IkReal x301=((1.0)*x295);
evalcond[0]=(((sj4*x295))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*sj4*x299)));
evalcond[2]=(((new_r11*sj3))+((cj4*x294))+((cj3*new_r01)));
evalcond[3]=((((-1.0)*x299))+((cj3*new_r10))+(((-1.0)*new_r00*x298)));
evalcond[4]=((((-1.0)*new_r01*x298))+((cj3*new_r11))+(((-1.0)*x301)));
evalcond[5]=(((x294*x297))+new_r01+((sj3*x295)));
evalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x301))+x296);
evalcond[7]=((((-1.0)*x297*x301))+x300+new_r00);
evalcond[8]=((((-1.0)*cj3*x301))+new_r11+((cj4*x300)));
evalcond[9]=((((-1.0)*cj4*x295*x298))+(((-1.0)*cj3*x299))+new_r10);
evalcond[10]=(((new_r20*sj4))+(((-1.0)*cj4*x296))+(((-1.0)*cj4*new_r10*x298))+x295);
evalcond[11]=((((-1.0)*new_r01*x297))+(((-1.0)*x299))+(((-1.0)*cj4*new_r11*x298))+((new_r21*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x303=IKPowWithIntegerCheck(sj4,-1);
if(!x303.valid){
continue;
}
IkReal x302=x303.value;
CheckValue<IkReal> x304=IKPowWithIntegerCheck(sj3,-1);
if(!x304.valid){
continue;
}
if( IKabs((x302*(x304.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x302)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x302*(x304.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))))+IKsqr(((-1.0)*new_r20*x302))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x302*(x304.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))), ((-1.0)*new_r20*x302));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x305=IKsin(j5);
IkReal x306=IKcos(j5);
IkReal x307=(cj3*new_r00);
IkReal x308=(cj3*cj4);
IkReal x309=((1.0)*sj3);
IkReal x310=((1.0)*x305);
IkReal x311=(sj3*x305);
IkReal x312=((1.0)*x306);
evalcond[0]=(((sj4*x306))+new_r20);
evalcond[1]=((((-1.0)*sj4*x310))+new_r21);
evalcond[2]=(((new_r11*sj3))+((cj3*new_r01))+((cj4*x305)));
evalcond[3]=((((-1.0)*x310))+((cj3*new_r10))+(((-1.0)*new_r00*x309)));
evalcond[4]=((((-1.0)*x312))+(((-1.0)*new_r01*x309))+((cj3*new_r11)));
evalcond[5]=(((sj3*x306))+((x305*x308))+new_r01);
evalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x312))+x307);
evalcond[7]=((((-1.0)*x308*x312))+x311+new_r00);
evalcond[8]=(((cj4*x311))+new_r11+(((-1.0)*cj3*x312)));
evalcond[9]=(new_r10+(((-1.0)*cj4*x306*x309))+(((-1.0)*cj3*x310)));
evalcond[10]=(((new_r20*sj4))+x306+(((-1.0)*cj4*x307))+(((-1.0)*cj4*new_r10*x309)));
evalcond[11]=((((-1.0)*new_r01*x308))+(((-1.0)*cj4*new_r11*x309))+(((-1.0)*x310))+((new_r21*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x313=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x313.valid){
continue;
}
CheckValue<IkReal> x314 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x314.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x313.value)))+(x314.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x315=IKsin(j5);
IkReal x316=IKcos(j5);
IkReal x317=(cj3*new_r00);
IkReal x318=(cj3*cj4);
IkReal x319=((1.0)*sj3);
IkReal x320=((1.0)*x315);
IkReal x321=(sj3*x315);
IkReal x322=((1.0)*x316);
evalcond[0]=(((sj4*x316))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*sj4*x320)));
evalcond[2]=(((cj4*x315))+((new_r11*sj3))+((cj3*new_r01)));
evalcond[3]=((((-1.0)*new_r00*x319))+(((-1.0)*x320))+((cj3*new_r10)));
evalcond[4]=((((-1.0)*x322))+((cj3*new_r11))+(((-1.0)*new_r01*x319)));
evalcond[5]=(((x315*x318))+new_r01+((sj3*x316)));
evalcond[6]=(((new_r10*sj3))+x317+(((-1.0)*cj4*x322)));
evalcond[7]=(x321+(((-1.0)*x318*x322))+new_r00);
evalcond[8]=((((-1.0)*cj3*x322))+((cj4*x321))+new_r11);
evalcond[9]=((((-1.0)*cj3*x320))+new_r10+(((-1.0)*cj4*x316*x319)));
evalcond[10]=((((-1.0)*cj4*new_r10*x319))+((new_r20*sj4))+x316+(((-1.0)*cj4*x317)));
evalcond[11]=((((-1.0)*new_r01*x318))+(((-1.0)*cj4*new_r11*x319))+(((-1.0)*x320))+((new_r21*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x323=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x323.valid){
continue;
}
CheckValue<IkReal> x324 = IKatan2WithCheck(IkReal(new_r12),new_r02,IKFAST_ATAN2_MAGTHRESH);
if(!x324.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x323.value)))+(x324.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x325=IKcos(j3);
IkReal x326=IKsin(j3);
IkReal x327=((1.0)*sj4);
IkReal x328=((1.0)*cj4);
IkReal x329=(new_r12*x326);
IkReal x330=(new_r02*x325);
evalcond[0]=((((-1.0)*x325*x327))+new_r02);
evalcond[1]=((((-1.0)*x326*x327))+new_r12);
evalcond[2]=(((new_r12*x325))+(((-1.0)*new_r02*x326)));
evalcond[3]=((((-1.0)*x327))+x330+x329);
evalcond[4]=((((-1.0)*x328*x330))+((new_r22*sj4))+(((-1.0)*x328*x329)));
evalcond[5]=((((-1.0)*new_r00*x325*x327))+(((-1.0)*new_r10*x326*x327))+(((-1.0)*new_r20*x328)));
evalcond[6]=((((-1.0)*new_r11*x326*x327))+(((-1.0)*new_r01*x325*x327))+(((-1.0)*new_r21*x328)));
evalcond[7]=((1.0)+(((-1.0)*new_r22*x328))+(((-1.0)*x327*x329))+(((-1.0)*x327*x330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x331=((1.0)*cj0);
IkReal x332=(r11*sj0);
IkReal x333=(r10*sj0);
IkReal x334=((1.0)*cj2);
IkReal x335=(cj1*sj2);
IkReal x336=(r12*sj0);
IkReal x337=(((cj2*sj1))+x335);
IkReal x338=x121;
IkReal x339=(sj0*x338);
IkReal x340=(cj0*x337);
IkReal x341=(cj0*x338);
IkReal x342=x125;
new_r00=(((r00*x340))+((r20*x338))+((x333*x337)));
new_r01=(((r01*x340))+((r21*x338))+((x332*x337)));
new_r02=(((r22*x338))+((x336*x337))+((r02*x340)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x331)));
new_r11=(((r01*sj0))+(((-1.0)*r11*x331)));
new_r12=(((r02*sj0))+(((-1.0)*r12*x331)));
new_r20=(((r00*x341))+((x333*x338))+((r20*x342)));
new_r21=(((r01*x341))+((r21*x342))+((x332*x338)));
new_r22=(((x336*x338))+((r22*x342))+((r02*x341)));
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x343=((1.0)*cj0);
IkReal x344=(r11*sj0);
IkReal x345=(r10*sj0);
IkReal x346=((1.0)*cj2);
IkReal x347=(cj1*sj2);
IkReal x348=(r12*sj0);
IkReal x349=(((cj2*sj1))+x347);
IkReal x350=x121;
IkReal x351=(sj0*x350);
IkReal x352=(cj0*x349);
IkReal x353=(cj0*x350);
IkReal x354=x125;
new_r00=(((r00*x352))+((x345*x349))+((r20*x350)));
new_r01=(((r21*x350))+((r01*x352))+((x344*x349)));
new_r02=(((x348*x349))+((r22*x350))+((r02*x352)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x343)));
new_r11=((((-1.0)*r11*x343))+((r01*sj0)));
new_r12=((((-1.0)*r12*x343))+((r02*sj0)));
new_r20=(((x345*x350))+((r00*x353))+((r20*x354)));
new_r21=(((r21*x354))+((r01*x353))+((x344*x350)));
new_r22=(((r22*x354))+((x348*x350))+((r02*x353)));
j5eval[0]=sj3;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x355=((1.0)*cj0);
IkReal x356=(r11*sj0);
IkReal x357=(r10*sj0);
IkReal x358=((1.0)*cj2);
IkReal x359=(cj1*sj2);
IkReal x360=(r12*sj0);
IkReal x361=(((cj2*sj1))+x359);
IkReal x362=x121;
IkReal x363=(sj0*x362);
IkReal x364=(cj0*x361);
IkReal x365=(cj0*x362);
IkReal x366=x125;
new_r00=(((r20*x362))+((r00*x364))+((x357*x361)));
new_r01=(((r01*x364))+((x356*x361))+((r21*x362)));
new_r02=(((r22*x362))+((x360*x361))+((r02*x364)));
new_r10=(((r00*sj0))+(((-1.0)*r10*x355)));
new_r11=((((-1.0)*r11*x355))+((r01*sj0)));
new_r12=((((-1.0)*r12*x355))+((r02*sj0)));
new_r20=(((r20*x366))+((r00*x365))+((x357*x362)));
new_r21=(((r01*x365))+((x356*x362))+((r21*x366)));
new_r22=(((r22*x366))+((x360*x362))+((r02*x365)));
j5eval[0]=cj3;
j5eval[1]=cj4;
j5eval[2]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x367=(new_r22+(((-1.0)*cj4)));
IkReal x368=((((-1.0)*sj4))+new_r12);
IkReal x369=((1.0)*cj4);
IkReal x370=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x367;
evalcond[2]=x367;
evalcond[3]=new_r02;
evalcond[4]=x368;
evalcond[5]=x368;
evalcond[6]=((((-1.0)*new_r12*x369))+((new_r22*sj4)));
evalcond[7]=((((-1.0)*new_r20*x369))+(((-1.0)*new_r10*x370)));
evalcond[8]=((((-1.0)*new_r11*x370))+(((-1.0)*new_r21*x369)));
evalcond[9]=((1.0)+(((-1.0)*new_r12*x370))+(((-1.0)*new_r22*x369)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x371 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x371.valid){
continue;
}
CheckValue<IkReal> x372=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x372.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x371.value)+(((1.5707963267949)*(x372.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x373=IKsin(j5);
IkReal x374=IKcos(j5);
IkReal x375=((1.0)*new_r22);
IkReal x376=((1.0)*x373);
IkReal x377=((1.0)*x374);
evalcond[0]=(((new_r12*x374))+new_r20);
evalcond[1]=(new_r11+((new_r22*x373)));
evalcond[2]=((((-1.0)*new_r12*x376))+new_r21);
evalcond[3]=((((-1.0)*x374*x375))+new_r10);
evalcond[4]=((((-1.0)*x376))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x377))+(((-1.0)*new_r01)));
evalcond[6]=(x374+((new_r12*new_r20))+(((-1.0)*new_r10*x375)));
evalcond[7]=((((-1.0)*x376))+((new_r12*new_r21))+(((-1.0)*new_r11*x375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x378=(new_r22+(((-1.0)*cj4)));
IkReal x379=((1.0)*cj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x378;
evalcond[2]=x378;
evalcond[3]=new_r02;
evalcond[4]=(sj4+new_r12);
evalcond[5]=((((-1.0)*sj4))+(((-1.0)*new_r12)));
evalcond[6]=(((cj4*new_r12))+((new_r22*sj4)));
evalcond[7]=((((-1.0)*new_r20*x379))+((new_r10*sj4)));
evalcond[8]=((((-1.0)*new_r21*x379))+((new_r11*sj4)));
evalcond[9]=((1.0)+((new_r12*sj4))+(((-1.0)*new_r22*x379)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r00, new_r01);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x380=IKsin(j5);
IkReal x381=IKcos(j5);
IkReal x382=((1.0)*new_r12);
IkReal x383=((1.0)*x380);
IkReal x384=((1.0)*x381);
evalcond[0]=(((new_r12*x380))+new_r21);
evalcond[1]=((((-1.0)*x383))+new_r00);
evalcond[2]=((((-1.0)*x384))+new_r01);
evalcond[3]=((((-1.0)*x381*x382))+new_r20);
evalcond[4]=(((new_r22*x380))+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*new_r22*x384)));
evalcond[6]=((((-1.0)*new_r20*x382))+x381+((new_r10*new_r22)));
evalcond[7]=((((-1.0)*new_r21*x382))+((new_r11*new_r22))+(((-1.0)*x383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x385=(new_r12*sj3);
IkReal x386=(new_r11*sj3);
IkReal x387=((1.0)*sj3);
IkReal x388=((1.0)*cj3);
IkReal x389=((((-1.0)*new_r02*x387))+((cj3*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x388))+new_r02);
evalcond[3]=((((-1.0)*x387))+new_r12);
evalcond[4]=x389;
evalcond[5]=x389;
evalcond[6]=((-1.0)+x385+((cj3*new_r02)));
evalcond[7]=(x386+((cj3*new_r01)));
evalcond[8]=(((new_r10*sj3))+((cj3*new_r00)));
evalcond[9]=((((-1.0)*new_r10*x387))+(((-1.0)*new_r00*x388)));
evalcond[10]=((((-1.0)*new_r01*x388))+(((-1.0)*x386)));
evalcond[11]=((1.0)+(((-1.0)*new_r02*x388))+(((-1.0)*x385)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x390=IKcos(j5);
IkReal x391=IKsin(j5);
IkReal x392=((1.0)*new_r12);
IkReal x393=((1.0)*x391);
IkReal x394=((1.0)*x390);
evalcond[0]=(x390+new_r20);
evalcond[1]=((((-1.0)*x393))+new_r21);
evalcond[2]=(new_r01+((new_r12*x390)));
evalcond[3]=(new_r00+((new_r12*x391)));
evalcond[4]=(new_r11+(((-1.0)*new_r02*x394)));
evalcond[5]=(new_r10+(((-1.0)*new_r02*x393)));
evalcond[6]=((((-1.0)*x393))+((new_r02*new_r10))+(((-1.0)*new_r00*x392)));
evalcond[7]=((((-1.0)*new_r01*x392))+(((-1.0)*x394))+((new_r02*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x395=((((-1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x396=(((new_r10*sj3))+((cj3*new_r00)));
IkReal x397=(((new_r11*sj3))+((cj3*new_r01)));
IkReal x398=((1.0)+((new_r12*sj3))+((cj3*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj3+new_r02);
evalcond[3]=(sj3+new_r12);
evalcond[4]=x395;
evalcond[5]=x395;
evalcond[6]=x398;
evalcond[7]=x397;
evalcond[8]=x396;
evalcond[9]=x396;
evalcond[10]=x397;
evalcond[11]=x398;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x399=IKcos(j5);
IkReal x400=IKsin(j5);
IkReal x401=((1.0)*new_r02);
IkReal x402=((1.0)*x399);
IkReal x403=((1.0)*x400);
evalcond[0]=(x400+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x402)));
evalcond[2]=(new_r11+((new_r02*x399)));
evalcond[3]=(new_r10+((new_r02*x400)));
evalcond[4]=((((-1.0)*new_r12*x402))+new_r01);
evalcond[5]=((((-1.0)*new_r12*x403))+new_r00);
evalcond[6]=(((new_r00*new_r12))+(((-1.0)*new_r10*x401))+(((-1.0)*x403)));
evalcond[7]=(((new_r01*new_r12))+(((-1.0)*new_r11*x401))+(((-1.0)*x402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x404=(new_r12*sj3);
IkReal x405=((1.0)*new_r02);
IkReal x406=(((cj3*new_r12))+(((-1.0)*sj3*x405)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x406;
evalcond[7]=x406;
evalcond[8]=(x404+((cj3*new_r02)));
evalcond[9]=((((-1.0)*cj3*x405))+(((-1.0)*x404)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x407=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj3*x407))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj3*new_r00))+(((-1.0)*sj3*x407)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x407))+(((-1.0)*new_r00*sj3))))+IKsqr((((cj3*new_r00))+(((-1.0)*sj3*x407))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj3*x407))+(((-1.0)*new_r00*sj3))), (((cj3*new_r00))+(((-1.0)*sj3*x407))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x408=IKsin(j5);
IkReal x409=IKcos(j5);
IkReal x410=((1.0)*sj3);
IkReal x411=((1.0)*x409);
IkReal x412=(sj3*x408);
IkReal x413=((1.0)*x408);
IkReal x414=(cj3*x411);
evalcond[0]=(((new_r11*sj3))+x408+((cj3*new_r01)));
evalcond[1]=(((sj3*x409))+new_r01+((cj3*x408)));
evalcond[2]=(((new_r10*sj3))+((cj3*new_r00))+(((-1.0)*x411)));
evalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x410))+(((-1.0)*x413)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*x411))+(((-1.0)*new_r01*x410)));
evalcond[5]=(x412+new_r00+(((-1.0)*x414)));
evalcond[6]=(x412+new_r11+(((-1.0)*x414)));
evalcond[7]=((((-1.0)*cj3*x413))+new_r10+(((-1.0)*x409*x410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x415=((((-1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x416=(((new_r12*sj3))+((cj3*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x415;
evalcond[7]=x415;
evalcond[8]=x416;
evalcond[9]=x416;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x417=((1.0)*sj3);
if( IKabs((((cj3*new_r01))+(((-1.0)*new_r00*x417)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x417)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj3*new_r01))+(((-1.0)*new_r00*x417))))+IKsqr(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x417))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj3*new_r01))+(((-1.0)*new_r00*x417))), ((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x417))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x418=IKsin(j5);
IkReal x419=IKcos(j5);
IkReal x420=((1.0)*sj3);
IkReal x421=((1.0)*x418);
IkReal x422=(sj3*x419);
IkReal x423=((1.0)*x419);
IkReal x424=(cj3*x421);
evalcond[0]=(((new_r10*sj3))+x419+((cj3*new_r00)));
evalcond[1]=((((-1.0)*x421))+((new_r11*sj3))+((cj3*new_r01)));
evalcond[2]=(((sj3*x418))+new_r00+((cj3*x419)));
evalcond[3]=((((-1.0)*new_r00*x420))+(((-1.0)*x421))+((cj3*new_r10)));
evalcond[4]=((((-1.0)*x423))+((cj3*new_r11))+(((-1.0)*new_r01*x420)));
evalcond[5]=((((-1.0)*x424))+x422+new_r01);
evalcond[6]=((((-1.0)*x424))+x422+new_r10);
evalcond[7]=((((-1.0)*cj3*x423))+(((-1.0)*x418*x420))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x425=(new_r22+(((-1.0)*cj4)));
IkReal x426=((((-1.0)*sj4))+new_r02);
IkReal x427=((1.0)*cj4);
IkReal x428=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=x425;
evalcond[2]=x425;
evalcond[3]=x426;
evalcond[4]=new_r12;
evalcond[5]=x426;
evalcond[6]=(((new_r22*sj4))+(((-1.0)*new_r02*x427)));
evalcond[7]=((((-1.0)*new_r00*x428))+(((-1.0)*new_r20*x427)));
evalcond[8]=((((-1.0)*new_r21*x427))+(((-1.0)*new_r01*x428)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x427))+(((-1.0)*new_r02*x428)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x429=IKcos(j5);
IkReal x430=IKsin(j5);
IkReal x431=((1.0)*new_r22);
IkReal x432=((1.0)*x430);
evalcond[0]=(new_r20+((new_r02*x429)));
evalcond[1]=((((-1.0)*x432))+new_r10);
evalcond[2]=((((-1.0)*x429))+new_r11);
evalcond[3]=(new_r01+((new_r22*x430)));
evalcond[4]=((((-1.0)*new_r02*x432))+new_r21);
evalcond[5]=((((-1.0)*x429*x431))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x431))+x429+((new_r02*new_r20)));
evalcond[7]=((((-1.0)*x432))+(((-1.0)*new_r01*x431))+((new_r02*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x433=(new_r22+(((-1.0)*cj4)));
IkReal x434=((1.0)*cj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=x433;
evalcond[2]=x433;
evalcond[3]=(sj4+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*sj4))+(((-1.0)*new_r02)));
evalcond[6]=(((cj4*new_r02))+((new_r22*sj4)));
evalcond[7]=(((new_r00*sj4))+(((-1.0)*new_r20*x434)));
evalcond[8]=(((new_r01*sj4))+(((-1.0)*new_r21*x434)));
evalcond[9]=((1.0)+((new_r02*sj4))+(((-1.0)*new_r22*x434)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x435 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x435.valid){
continue;
}
CheckValue<IkReal> x436=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x436.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x435.value)+(((1.5707963267949)*(x436.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x437=IKsin(j5);
IkReal x438=IKcos(j5);
IkReal x439=((1.0)*new_r02);
IkReal x440=((1.0)*x437);
IkReal x441=((1.0)*x438);
evalcond[0]=(new_r21+((new_r02*x437)));
evalcond[1]=((((-1.0)*x438*x439))+new_r20);
evalcond[2]=((((-1.0)*x440))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x441))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*new_r01))+((new_r22*x437)));
evalcond[5]=((((-1.0)*new_r00))+(((-1.0)*new_r22*x441)));
evalcond[6]=(((new_r00*new_r22))+x438+(((-1.0)*new_r20*x439)));
evalcond[7]=((((-1.0)*x440))+((new_r01*new_r22))+(((-1.0)*new_r21*x439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x443=IKPowWithIntegerCheck(sj4,-1);
if(!x443.valid){
continue;
}
IkReal x442=x443.value;
CheckValue<IkReal> x444=IKPowWithIntegerCheck(cj3,-1);
if(!x444.valid){
continue;
}
CheckValue<IkReal> x445=IKPowWithIntegerCheck(cj4,-1);
if(!x445.valid){
continue;
}
if( IKabs((x442*(x444.value)*(x445.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x442)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x442*(x444.value)*(x445.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4))))))+IKsqr(((-1.0)*new_r20*x442))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x442*(x444.value)*(x445.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4))))), ((-1.0)*new_r20*x442));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x446=IKsin(j5);
IkReal x447=IKcos(j5);
IkReal x448=(cj3*new_r00);
IkReal x449=(cj3*cj4);
IkReal x450=((1.0)*sj3);
IkReal x451=((1.0)*x446);
IkReal x452=(sj3*x446);
IkReal x453=((1.0)*x447);
evalcond[0]=(((sj4*x447))+new_r20);
evalcond[1]=((((-1.0)*sj4*x451))+new_r21);
evalcond[2]=(((cj4*x446))+((new_r11*sj3))+((cj3*new_r01)));
evalcond[3]=((((-1.0)*new_r00*x450))+(((-1.0)*x451))+((cj3*new_r10)));
evalcond[4]=((((-1.0)*new_r01*x450))+(((-1.0)*x453))+((cj3*new_r11)));
evalcond[5]=(((x446*x449))+((sj3*x447))+new_r01);
evalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x453))+x448);
evalcond[7]=(x452+new_r00+(((-1.0)*x449*x453)));
evalcond[8]=(((cj4*x452))+new_r11+(((-1.0)*cj3*x453)));
evalcond[9]=((((-1.0)*cj4*x447*x450))+new_r10+(((-1.0)*cj3*x451)));
evalcond[10]=(((new_r20*sj4))+(((-1.0)*cj4*x448))+(((-1.0)*cj4*new_r10*x450))+x447);
evalcond[11]=((((-1.0)*x451))+(((-1.0)*new_r01*x449))+(((-1.0)*cj4*new_r11*x450))+((new_r21*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x455=IKPowWithIntegerCheck(sj4,-1);
if(!x455.valid){
continue;
}
IkReal x454=x455.value;
CheckValue<IkReal> x456=IKPowWithIntegerCheck(sj3,-1);
if(!x456.valid){
continue;
}
if( IKabs((x454*(x456.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x454)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x454*(x456.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))))+IKsqr(((-1.0)*new_r20*x454))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x454*(x456.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))), ((-1.0)*new_r20*x454));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x457=IKsin(j5);
IkReal x458=IKcos(j5);
IkReal x459=(cj3*new_r00);
IkReal x460=(cj3*cj4);
IkReal x461=((1.0)*sj3);
IkReal x462=((1.0)*x457);
IkReal x463=(sj3*x457);
IkReal x464=((1.0)*x458);
evalcond[0]=(((sj4*x458))+new_r20);
evalcond[1]=((((-1.0)*sj4*x462))+new_r21);
evalcond[2]=(((cj4*x457))+((new_r11*sj3))+((cj3*new_r01)));
evalcond[3]=((((-1.0)*x462))+(((-1.0)*new_r00*x461))+((cj3*new_r10)));
evalcond[4]=((((-1.0)*new_r01*x461))+(((-1.0)*x464))+((cj3*new_r11)));
evalcond[5]=(((sj3*x458))+new_r01+((x457*x460)));
evalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x464))+x459);
evalcond[7]=((((-1.0)*x460*x464))+x463+new_r00);
evalcond[8]=(((cj4*x463))+new_r11+(((-1.0)*cj3*x464)));
evalcond[9]=((((-1.0)*cj4*x458*x461))+new_r10+(((-1.0)*cj3*x462)));
evalcond[10]=(((new_r20*sj4))+(((-1.0)*cj4*x459))+x458+(((-1.0)*cj4*new_r10*x461)));
evalcond[11]=((((-1.0)*x462))+(((-1.0)*cj4*new_r11*x461))+(((-1.0)*new_r01*x460))+((new_r21*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x465=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x465.valid){
continue;
}
CheckValue<IkReal> x466 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x466.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x465.value)))+(x466.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x467=IKsin(j5);
IkReal x468=IKcos(j5);
IkReal x469=(cj3*new_r00);
IkReal x470=(cj3*cj4);
IkReal x471=((1.0)*sj3);
IkReal x472=((1.0)*x467);
IkReal x473=(sj3*x467);
IkReal x474=((1.0)*x468);
evalcond[0]=(((sj4*x468))+new_r20);
evalcond[1]=((((-1.0)*sj4*x472))+new_r21);
evalcond[2]=(((cj4*x467))+((new_r11*sj3))+((cj3*new_r01)));
evalcond[3]=((((-1.0)*new_r00*x471))+(((-1.0)*x472))+((cj3*new_r10)));
evalcond[4]=((((-1.0)*x474))+(((-1.0)*new_r01*x471))+((cj3*new_r11)));
evalcond[5]=(((sj3*x468))+((x467*x470))+new_r01);
evalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x474))+x469);
evalcond[7]=(x473+new_r00+(((-1.0)*x470*x474)));
evalcond[8]=(((cj4*x473))+(((-1.0)*cj3*x474))+new_r11);
evalcond[9]=((((-1.0)*cj4*x468*x471))+(((-1.0)*cj3*x472))+new_r10);
evalcond[10]=(((new_r20*sj4))+(((-1.0)*cj4*x469))+x468+(((-1.0)*cj4*new_r10*x471)));
evalcond[11]=((((-1.0)*cj4*new_r11*x471))+(((-1.0)*x472))+((new_r21*sj4))+(((-1.0)*new_r01*x470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "e158d2c8ede0f4f82aa37d63b20914b5"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
