{"version":3,"file":"./solvers/PUMA_arm_nogripper.html","sources":["./solvers/PUMA_arm_nogripper.tmp.cpp"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4SA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;AAIA;;;;;;;;;;;;;;;AAmuJA;AACA;AACA;AACA;AAAA;AACA;;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAEA;;AAAA;AAAA;AACA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AACA;;;;;;;;AAx6JA;AAAA;AAAA;;;;;;;;AAFA;AAAA;AAAA","sourcesContent":["/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE\n/// \\author Rosen Diankov\n///\n/// Licensed under the Apache License, Version 2.0 (the \"License\");\n/// you may not use this file except in compliance with the License.\n/// You may obtain a copy of the License at\n///     http://www.apache.org/licenses/LICENSE-2.0\n/// \n/// Unless required by applicable law or agreed to in writing, software\n/// distributed under the License is distributed on an \"AS IS\" BASIS,\n/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n/// See the License for the specific language governing permissions and\n/// limitations under the License.\n///\n/// ikfast version 0x10000048 generated on 2015-05-22 07:12:04.602377\n/// To compile with gcc:\n///     gcc -lstdc++ ik.cpp\n/// To compile without any main function as a shared object (might need -llapack):\n///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp\n#define IKFAST_HAS_LIBRARY\n#include \"ikfast.h\" // found inside share/openrave-X.Y/python/ikfast.h\nusing namespace ikfast;\n\n// check if the included ikfast version matches what this file was compiled with\n#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]\nIKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);\n\n#include <cmath>\n#include <vector>\n#include <limits>\n#include <algorithm>\n#include <complex>\n\n#ifndef IKFAST_ASSERT\n#include <stdexcept>\n#include <sstream>\n#include <iostream>\n\n#ifdef _MSC_VER\n#ifndef __PRETTY_FUNCTION__\n#define __PRETTY_FUNCTION__ __FUNCDNAME__\n#endif\n#endif\n\n#ifndef __PRETTY_FUNCTION__\n#define __PRETTY_FUNCTION__ __func__\n#endif\n\n#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << \"ikfast exception: \" << __FILE__ << \":\" << __LINE__ << \": \" <<__PRETTY_FUNCTION__ << \": Assertion '\" << #b << \"' failed\"; throw std::runtime_error(ss.str()); } }\n\n#endif\n\n#if defined(_MSC_VER)\n#define IKFAST_ALIGNED16(x) __declspec(align(16)) x\n#else\n#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))\n#endif\n\n#define IK2PI  ((IkReal)6.28318530717959)\n#define IKPI  ((IkReal)3.14159265358979)\n#define IKPI_2  ((IkReal)1.57079632679490)\n\n#ifdef _MSC_VER\n#ifndef isnan\n#define isnan _isnan\n#endif\n#ifndef isinf\n#define isinf _isinf\n#endif\n//#ifndef isfinite\n//#define isfinite _isfinite\n//#endif\n#endif // _MSC_VER\n\n// lapack routines\nextern \"C\" {\n  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);\n  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);\n  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);\n  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);\n  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);\n  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);\n}\n\nusing namespace std; // necessary to get std math routines\n\n#ifdef IKFAST_NAMESPACE\nnamespace IKFAST_NAMESPACE {\n#endif\n\ninline float IKabs(float f) { return fabsf(f); }\ninline double IKabs(double f) { return fabs(f); }\n\ninline float IKsqr(float f) { return f*f; }\ninline double IKsqr(double f) { return f*f; }\n\ninline float IKlog(float f) { return logf(f); }\ninline double IKlog(double f) { return log(f); }\n\n// allows asin and acos to exceed 1\n#ifndef IKFAST_SINCOS_THRESH\n#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)\n#endif\n\n// used to check input to atan2 for degenerate cases\n#ifndef IKFAST_ATAN2_MAGTHRESH\n#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)\n#endif\n\n// minimum distance of separate solutions\n#ifndef IKFAST_SOLUTION_THRESH\n#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)\n#endif\n\n// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate\n#ifndef IKFAST_EVALCOND_THRESH\n#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)\n#endif\n\n\ninline float IKasin(float f)\n{\nIKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver\nif( f <= -1 ) return float(-IKPI_2);\nelse if( f >= 1 ) return float(IKPI_2);\nreturn asinf(f);\n}\ninline double IKasin(double f)\n{\nIKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver\nif( f <= -1 ) return -IKPI_2;\nelse if( f >= 1 ) return IKPI_2;\nreturn asin(f);\n}\n\n// return positive value in [0,y)\ninline float IKfmod(float x, float y)\n{\n    while(x < 0) {\n        x += y;\n    }\n    return fmodf(x,y);\n}\n\n// return positive value in [0,y)\ninline double IKfmod(double x, double y)\n{\n    while(x < 0) {\n        x += y;\n    }\n    return fmod(x,y);\n}\n\ninline float IKacos(float f)\n{\nIKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver\nif( f <= -1 ) return float(IKPI);\nelse if( f >= 1 ) return float(0);\nreturn acosf(f);\n}\ninline double IKacos(double f)\n{\nIKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver\nif( f <= -1 ) return IKPI;\nelse if( f >= 1 ) return 0;\nreturn acos(f);\n}\ninline float IKsin(float f) { return sinf(f); }\ninline double IKsin(double f) { return sin(f); }\ninline float IKcos(float f) { return cosf(f); }\ninline double IKcos(double f) { return cos(f); }\ninline float IKtan(float f) { return tanf(f); }\ninline double IKtan(double f) { return tan(f); }\ninline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }\ninline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }\ninline float IKatan2Simple(float fy, float fx) {\n    return atan2f(fy,fx);\n}\ninline float IKatan2(float fy, float fx) {\n    if( isnan(fy) ) {\n        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned\n        return float(IKPI_2);\n    }\n    else if( isnan(fx) ) {\n        return 0;\n    }\n    return atan2f(fy,fx);\n}\ninline double IKatan2Simple(double fy, double fx) {\n    return atan2(fy,fx);\n}\ninline double IKatan2(double fy, double fx) {\n    if( isnan(fy) ) {\n        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned\n        return IKPI_2;\n    }\n    else if( isnan(fx) ) {\n        return 0;\n    }\n    return atan2(fy,fx);\n}\n\ntemplate <typename T>\nstruct CheckValue\n{\n    T value;\n    bool valid;\n};\n\ntemplate <typename T>\ninline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)\n{\n    CheckValue<T> ret;\n    ret.valid = false;\n    ret.value = 0;\n    if( !isnan(fy) && !isnan(fx) ) {\n        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {\n            ret.value = IKatan2Simple(fy,fx);\n            ret.valid = true;\n        }\n    }\n    return ret;\n}\n\ninline float IKsign(float f) {\n    if( f > 0 ) {\n        return float(1);\n    }\n    else if( f < 0 ) {\n        return float(-1);\n    }\n    return 0;\n}\n\ninline double IKsign(double f) {\n    if( f > 0 ) {\n        return 1.0;\n    }\n    else if( f < 0 ) {\n        return -1.0;\n    }\n    return 0;\n}\n\ntemplate <typename T>\ninline CheckValue<T> IKPowWithIntegerCheck(T f, int n)\n{\n    CheckValue<T> ret;\n    ret.valid = true;\n    if( n == 0 ) {\n        ret.value = 1.0;\n        return ret;\n    }\n    else if( n == 1 )\n    {\n        ret.value = f;\n        return ret;\n    }\n    else if( n < 0 )\n    {\n        if( f == 0 )\n        {\n            ret.valid = false;\n            ret.value = (T)1.0e30;\n            return ret;\n        }\n        if( n == -1 ) {\n            ret.value = T(1.0)/f;\n            return ret;\n        }\n    }\n\n    int num = n > 0 ? n : -n;\n    if( num == 2 ) {\n        ret.value = f*f;\n    }\n    else if( num == 3 ) {\n        ret.value = f*f*f;\n    }\n    else {\n        ret.value = 1.0;\n        while(num>0) {\n            if( num & 1 ) {\n                ret.value *= f;\n            }\n            num >>= 1;\n            f *= f;\n        }\n    }\n    \n    if( n < 0 ) {\n        ret.value = T(1.0)/ret.value;\n    }\n    return ret;\n}\n\n/// solves the forward kinematics equations.\n/// \\param pfree is an array specifying the free joints of the chain.\nIKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {\nIkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41;\nx0=IKcos(j[0]);\nx1=IKcos(j[1]);\nx2=IKsin(j[2]);\nx3=IKcos(j[2]);\nx4=IKsin(j[1]);\nx5=IKsin(j[3]);\nx6=IKcos(j[3]);\nx7=IKsin(j[0]);\nx8=IKcos(j[5]);\nx9=IKsin(j[5]);\nx10=IKsin(j[4]);\nx11=IKcos(j[4]);\nx12=((1.0)*x11);\nx13=((1.0)*x7);\nx14=((1.0)*x10);\nx15=((1.0)*x2);\nx16=((0.4331)*x2);\nx17=(x0*x1);\nx18=(x1*x7);\nx19=(x3*x4);\nx20=(x2*x4);\nx21=(x1*x3);\nx22=(x1*x2);\nx23=((1.0)*x21);\nx24=((1.0)*x19);\nx25=((0.0203)*x21);\nx26=(x0*x15*x4);\nx27=(x13*x20);\nx28=((((-1.0)*x23))+x20);\nx29=(((x1*x15))+x24);\nx30=((-1.0)*x29);\nx31=(x30*x6);\nx32=(x29*x5);\nx33=((((-1.0)*x15*x17))+(((-1.0)*x0*x24)));\nx34=(((x0*x24))+((x15*x17)));\nx35=(x13*(((((-1.0)*x22))+(((-1.0)*x19)))));\nx36=(x13*((x19+x22)));\nx37=(x10*x33);\nx38=(((x6*(((((-1.0)*x26))+((x17*x3))))))+(((-1.0)*x13*x5)));\nx39=(((x0*x5))+((x6*((((x18*x3))+(((-1.0)*x27)))))));\nx40=(((x5*(((((-1.0)*x17*x3))+x26))))+(((-1.0)*x13*x6)));\nx41=(((x0*x6))+((x5*(((((-1.0)*x13*x21))+x27)))));\neerot[0]=(((x40*x9))+((x8*((((x11*x38))+x37)))));\neerot[1]=(((x40*x8))+((x9*(((((-1.0)*x12*x38))+(((-1.0)*x14*x33)))))));\neerot[2]=(((x10*x38))+((x11*x34)));\neetrans[0]=((((0.4318)*x17))+(((0.4331)*x0*x19))+(((-0.0203)*x17*x3))+(((0.0203)*x0*x20))+((x16*x17))+(((-0.1501)*x7)));\neerot[3]=(((x41*x9))+((x8*((((x10*x35))+((x11*x39)))))));\neerot[4]=(((x41*x8))+((x9*(((((-1.0)*x12*x39))+(((-1.0)*x14*x35)))))));\neerot[5]=(((x10*x39))+((x11*x36)));\neetrans[1]=((((0.1501)*x0))+(((0.4318)*x18))+(((-0.0203)*x18*x3))+(((0.4331)*x19*x7))+((x16*x18))+(((0.0203)*x20*x7)));\neerot[6]=(((x32*x9))+((x8*((((x11*x31))+((x10*x28)))))));\neerot[7]=(((x32*x8))+((x9*(((((-1.0)*x12*x31))+(((-1.0)*x14*x28)))))));\neerot[8]=(((x10*x31))+((x11*((x23+(((-1.0)*x15*x4)))))));\neetrans[2]=((1.371)+(((-0.4318)*x4))+(((0.4331)*x21))+(((-1.0)*x16*x4))+(((0.0203)*x19))+(((0.0203)*x22)));\n}\n\nIKFAST_API int GetNumFreeParameters() { return 0; }\nIKFAST_API int* GetFreeParameters() { return NULL; }\nIKFAST_API int GetNumJoints() { return 6; }\n\nIKFAST_API int GetIkRealSize() { return sizeof(IkReal); }\n\nIKFAST_API int GetIkType() { return 0x67000001; }\n\nclass IKSolver {\npublic:\nIkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;\nunsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;\n\nIkReal j100, cj100, sj100;\nunsigned char _ij100[2], _nj100;\nbool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {\nj0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; \nfor(int dummyiter = 0; dummyiter < 1; ++dummyiter) {\n    solutions.Clear();\nr00 = eerot[0*3+0];\nr01 = eerot[0*3+1];\nr02 = eerot[0*3+2];\nr10 = eerot[1*3+0];\nr11 = eerot[1*3+1];\nr12 = eerot[1*3+2];\nr20 = eerot[2*3+0];\nr21 = eerot[2*3+1];\nr22 = eerot[2*3+2];\npx = eetrans[0]; py = eetrans[1]; pz = eetrans[2];\n\nnew_r00=r00;\nnew_r01=r01;\nnew_r02=r02;\nnew_px=px;\nnew_r10=r10;\nnew_r11=r11;\nnew_r12=r12;\nnew_py=py;\nnew_r20=r20;\nnew_r21=r21;\nnew_r22=r22;\nnew_pz=((-1.371)+pz);\nr00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;\nIkReal x42=((1.0)*px);\nIkReal x43=((1.0)*pz);\nIkReal x44=((1.0)*py);\npp=((px*px)+(py*py)+(pz*pz));\nnpx=(((px*r00))+((py*r10))+((pz*r20)));\nnpy=(((px*r01))+((py*r11))+((pz*r21)));\nnpz=(((px*r02))+((py*r12))+((pz*r22)));\nrxp0_0=((((-1.0)*r20*x44))+((pz*r10)));\nrxp0_1=(((px*r20))+(((-1.0)*r00*x43)));\nrxp0_2=((((-1.0)*r10*x42))+((py*r00)));\nrxp1_0=((((-1.0)*r21*x44))+((pz*r11)));\nrxp1_1=(((px*r21))+(((-1.0)*r01*x43)));\nrxp1_2=((((-1.0)*r11*x42))+((py*r01)));\nrxp2_0=((((-1.0)*r22*x44))+((pz*r12)));\nrxp2_1=((((-1.0)*r02*x43))+((px*r22)));\nrxp2_2=((((-1.0)*r12*x42))+((py*r02)));\n{\nIkReal j2array[2], cj2array[2], sj2array[2];\nbool j2valid[2]={false};\n_nj2 = 2;\nif( (((-1.0601789761685)+(((2.67068488900329)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((-1.0601789761685)+(((2.67068488900329)*pp)))) > 1+IKFAST_SINCOS_THRESH )\n    continue;\nIkReal x45=IKasin(((-1.0601789761685)+(((2.67068488900329)*pp))));\nj2array[0]=((0.0468371131132389)+(((1.0)*x45)));\nsj2array[0]=IKsin(j2array[0]);\ncj2array[0]=IKcos(j2array[0]);\nj2array[1]=((3.18842976670303)+(((-1.0)*x45)));\nsj2array[1]=IKsin(j2array[1]);\ncj2array[1]=IKcos(j2array[1]);\nif( j2array[0] > IKPI )\n{\n    j2array[0]-=IK2PI;\n}\nelse if( j2array[0] < -IKPI )\n{    j2array[0]+=IK2PI;\n}\nj2valid[0] = true;\nif( j2array[1] > IKPI )\n{\n    j2array[1]-=IK2PI;\n}\nelse if( j2array[1] < -IKPI )\n{    j2array[1]+=IK2PI;\n}\nj2valid[1] = true;\nfor(int ij2 = 0; ij2 < 2; ++ij2)\n{\nif( !j2valid[ij2] )\n{\n    continue;\n}\n_ij2[0] = ij2; _ij2[1] = -1;\nfor(int iij2 = ij2+1; iij2 < 2; ++iij2)\n{\nif( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )\n{\n    j2valid[iij2]=false; _ij2[1] = iij2; break; \n}\n}\nj2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];\n\n{\nIkReal j0eval[2];\nj0eval[0]=((IKabs(px))+(IKabs(py)));\nj0eval[1]=((px*px)+(py*py));\nif( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j1eval[1];\nj1eval[0]=((10.6354679802956)+(((10.7231100422792)*(cj2*cj2)))+(((-1.0)*cj2))+(((21.3349753694581)*sj2))+(((10.7231100422792)*(sj2*sj2))));\nif( IKabs(j1eval[0]) < 0.0000010000000000  )\n{\ncontinue; // no branches [j0, j1]\n\n} else\n{\n{\nIkReal j1array[2], cj1array[2], sj1array[2];\nbool j1valid[2]={false};\n_nj1 = 2;\nIkReal x46=((((-0.4331)*cj2))+(((-0.0203)*sj2)));\nIkReal x47=((0.4318)+(((-0.0203)*cj2))+(((0.4331)*sj2)));\nCheckValue<IkReal> x50 = IKatan2WithCheck(IkReal(x46),x47,IKFAST_ATAN2_MAGTHRESH);\nif(!x50.valid){\ncontinue;\n}\nIkReal x48=((1.0)*(x50.value));\nif((((x46*x46)+(x47*x47))) < -0.00001)\ncontinue;\nCheckValue<IkReal> x51=IKPowWithIntegerCheck(IKabs(IKsqrt(((x46*x46)+(x47*x47)))),-1);\nif(!x51.valid){\ncontinue;\n}\nif( ((pz*(x51.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x51.value))) > 1+IKFAST_SINCOS_THRESH )\n    continue;\nIkReal x49=IKasin((pz*(x51.value)));\nj1array[0]=((((-1.0)*x49))+(((-1.0)*x48)));\nsj1array[0]=IKsin(j1array[0]);\ncj1array[0]=IKcos(j1array[0]);\nj1array[1]=((3.14159265358979)+(((-1.0)*x48))+x49);\nsj1array[1]=IKsin(j1array[1]);\ncj1array[1]=IKcos(j1array[1]);\nif( j1array[0] > IKPI )\n{\n    j1array[0]-=IK2PI;\n}\nelse if( j1array[0] < -IKPI )\n{    j1array[0]+=IK2PI;\n}\nj1valid[0] = true;\nif( j1array[1] > IKPI )\n{\n    j1array[1]-=IK2PI;\n}\nelse if( j1array[1] < -IKPI )\n{    j1array[1]+=IK2PI;\n}\nj1valid[1] = true;\nfor(int ij1 = 0; ij1 < 2; ++ij1)\n{\nif( !j1valid[ij1] )\n{\n    continue;\n}\n_ij1[0] = ij1; _ij1[1] = -1;\nfor(int iij1 = ij1+1; iij1 < 2; ++iij1)\n{\nif( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )\n{\n    j1valid[iij1]=false; _ij1[1] = iij1; break; \n}\n}\nj1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];\n\n{\nIkReal j0eval[3];\nIkReal x52=pz*pz;\nIkReal x53=((25000000.0)*pp);\nIkReal x54=(cj1*pp);\nIkReal x55=((3240659.0)*cj1);\nIkReal x56=((21590000.0)*pz*sj1);\nIkReal x57=(cj1*x52);\nj0eval[0]=(x54+(((-1.0)*x57)));\nj0eval[1]=IKsign(((((-21590000.0)*x57))+(((21590000.0)*x54))));\nj0eval[2]=((IKabs((((px*x56))+((px*x53))+(((-601661.75)*px))+((py*x55)))))+(IKabs(((((-1.0)*px*x55))+(((-601661.75)*py))+((py*x56))+((py*x53))))));\nif( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal j0eval[3];\nIkReal x58=pz*pz;\nIkReal x59=((4331.0)*cj2);\nIkReal x60=(pp*sj1);\nIkReal x61=((1501.0)*sj1);\nIkReal x62=((203.0)*sj2);\nIkReal x63=(sj1*x58);\nIkReal x64=((10000.0)*cj1*pz);\nj0eval[0]=(x60+(((-1.0)*x63)));\nj0eval[1]=((IKabs(((((-1.0)*px*x64))+((px*x59))+((px*x62))+((py*x61)))))+(IKabs(((((-1.0)*px*x61))+(((-1.0)*py*x64))+((py*x62))+((py*x59))))));\nj0eval[2]=IKsign(((((10000.0)*x60))+(((-10000.0)*x63))));\nif( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal j0eval[3];\nIkReal x65=pz*pz;\nIkReal x66=((203.0)*cj2);\nIkReal x67=(cj1*pp);\nIkReal x68=((1501.0)*cj1);\nIkReal x69=((4331.0)*sj2);\nIkReal x70=((10000.0)*pz*sj1);\nIkReal x71=(cj1*x65);\nj0eval[0]=(x67+(((-1.0)*x71)));\nj0eval[1]=IKsign(((((-10000.0)*x71))+(((10000.0)*x67))));\nj0eval[2]=((IKabs(((((-1.0)*px*x66))+((px*x69))+(((4318.0)*px))+((px*x70))+((py*x68)))))+(IKabs((((py*x70))+(((-1.0)*px*x68))+(((4318.0)*py))+(((-1.0)*py*x66))+((py*x69))))));\nif( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[5];\nbool bgotonextstatement = true;\ndo\n{\nIkReal x72=((1.0)*pp);\nIkReal x73=((0.4318)+pz+(((-0.0203)*cj2))+(((0.4331)*sj2)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));\nevalcond[1]=((0.39696895)+(((-1.0)*x72))+(((-0.01753108)*cj2))+(((0.37402516)*sj2)));\nevalcond[2]=((0.02406647)+(((-1.0)*x72))+(((-0.8636)*pz)));\nevalcond[3]=x73;\nevalcond[4]=x73;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j0eval[3];\nsj1=1.0;\ncj1=0;\nj1=1.5707963267949;\nIkReal x74=pz*pz;\nIkReal x75=((203.0)*sj2);\nIkReal x76=((4331.0)*cj2);\nj0eval[0]=((((-1.0)*pp))+x74);\nj0eval[1]=((IKabs(((((-1.0)*px*x75))+(((-1.0)*px*x76))+(((-1501.0)*py)))))+(IKabs(((((1501.0)*px))+(((-1.0)*py*x76))+(((-1.0)*py*x75))))));\nj0eval[2]=IKsign(((((10000.0)*x74))+(((-10000.0)*pp))));\nif( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )\n{\ncontinue; // no branches [j0]\n\n} else\n{\n{\nIkReal j0array[1], cj0array[1], sj0array[1];\nbool j0valid[1]={false};\n_nj0 = 1;\nIkReal x77=((203.0)*sj2);\nIkReal x78=((4331.0)*cj2);\nCheckValue<IkReal> x79 = IKatan2WithCheck(IkReal(((((1501.0)*px))+(((-1.0)*py*x77))+(((-1.0)*py*x78)))),((((-1.0)*px*x77))+(((-1.0)*px*x78))+(((-1501.0)*py))),IKFAST_ATAN2_MAGTHRESH);\nif(!x79.valid){\ncontinue;\n}\nCheckValue<IkReal> x80=IKPowWithIntegerCheck(IKsign(((((10000.0)*(pz*pz)))+(((-10000.0)*pp)))),-1);\nif(!x80.valid){\ncontinue;\n}\nj0array[0]=((-1.5707963267949)+(x79.value)+(((1.5707963267949)*(x80.value))));\nsj0array[0]=IKsin(j0array[0]);\ncj0array[0]=IKcos(j0array[0]);\nif( j0array[0] > IKPI )\n{\n    j0array[0]-=IK2PI;\n}\nelse if( j0array[0] < -IKPI )\n{    j0array[0]+=IK2PI;\n}\nj0valid[0] = true;\nfor(int ij0 = 0; ij0 < 1; ++ij0)\n{\nif( !j0valid[ij0] )\n{\n    continue;\n}\n_ij0[0] = ij0; _ij0[1] = -1;\nfor(int iij0 = ij0+1; iij0 < 1; ++iij0)\n{\nif( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )\n{\n    j0valid[iij0]=false; _ij0[1] = iij0; break; \n}\n}\nj0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];\n{\nIkReal evalcond[2];\nIkReal x81=IKsin(j0);\nIkReal x82=IKcos(j0);\nevalcond[0]=((0.1501)+(((-1.0)*py*x82))+((px*x81)));\nevalcond[1]=((((-0.4331)*cj2))+((py*x81))+((px*x82))+(((-0.0203)*sj2)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x469=((1.0)*pp);\nIkReal x470=((0.0203)*cj2);\nIkReal x471=((0.4331)*sj2);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));\nevalcond[1]=((0.39696895)+(((-0.01753108)*cj2))+(((-1.0)*x469))+(((0.37402516)*sj2)));\nevalcond[2]=((0.02406647)+(((-1.0)*x469))+(((0.8636)*pz)));\nevalcond[3]=((0.4318)+(((-1.0)*x470))+(((-1.0)*pz))+x471);\nevalcond[4]=((-0.4318)+(((-1.0)*x471))+x470+pz);\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j0eval[3];\nsj1=-1.0;\ncj1=0;\nj1=-1.5707963267949;\nIkReal x472=pz*pz;\nIkReal x473=((203.0)*sj2);\nIkReal x474=((4331.0)*cj2);\nj0eval[0]=((((-1.0)*x472))+pp);\nj0eval[1]=IKsign(((((-10000.0)*x472))+(((10000.0)*pp))));\nj0eval[2]=((IKabs(((((-1.0)*py*x473))+(((-1.0)*py*x474))+(((-1501.0)*px)))))+(IKabs(((((1501.0)*py))+(((-1.0)*px*x473))+(((-1.0)*px*x474))))));\nif( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )\n{\ncontinue; // no branches [j0]\n\n} else\n{\n{\nIkReal j0array[1], cj0array[1], sj0array[1];\nbool j0valid[1]={false};\n_nj0 = 1;\nIkReal x475=((203.0)*sj2);\nIkReal x476=((4331.0)*cj2);\nCheckValue<IkReal> x477 = IKatan2WithCheck(IkReal(((((-1.0)*py*x475))+(((-1.0)*py*x476))+(((-1501.0)*px)))),((((1501.0)*py))+(((-1.0)*px*x476))+(((-1.0)*px*x475))),IKFAST_ATAN2_MAGTHRESH);\nif(!x477.valid){\ncontinue;\n}\nCheckValue<IkReal> x478=IKPowWithIntegerCheck(IKsign(((((-10000.0)*(pz*pz)))+(((10000.0)*pp)))),-1);\nif(!x478.valid){\ncontinue;\n}\nj0array[0]=((-1.5707963267949)+(x477.value)+(((1.5707963267949)*(x478.value))));\nsj0array[0]=IKsin(j0array[0]);\ncj0array[0]=IKcos(j0array[0]);\nif( j0array[0] > IKPI )\n{\n    j0array[0]-=IK2PI;\n}\nelse if( j0array[0] < -IKPI )\n{    j0array[0]+=IK2PI;\n}\nj0valid[0] = true;\nfor(int ij0 = 0; ij0 < 1; ++ij0)\n{\nif( !j0valid[ij0] )\n{\n    continue;\n}\n_ij0[0] = ij0; _ij0[1] = -1;\nfor(int iij0 = ij0+1; iij0 < 1; ++iij0)\n{\nif( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )\n{\n    j0valid[iij0]=false; _ij0[1] = iij0; break; \n}\n}\nj0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];\n{\nIkReal evalcond[2];\nIkReal x479=IKcos(j0);\nIkReal x480=IKsin(j0);\nIkReal x481=((1.0)*x479);\nevalcond[0]=((0.1501)+((px*x480))+(((-1.0)*py*x481)));\nevalcond[1]=((((-1.0)*py*x480))+(((-0.4331)*cj2))+(((-1.0)*px*x481))+(((-0.0203)*sj2)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x482=((((-0.4331)*cj2))+pz+(((-0.0203)*sj2)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));\nevalcond[1]=((0.39696895)+(((-0.01753108)*cj2))+(((-1.0)*pp))+(((0.37402516)*sj2)));\nevalcond[2]=x482;\nevalcond[3]=x482;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j0eval[3];\nsj1=0;\ncj1=1.0;\nj1=0;\nIkReal x483=pz*pz;\nIkReal x484=((25000000.0)*pp);\nj0eval[0]=((((-1.0)*pp))+x483);\nj0eval[1]=((IKabs(((((601661.75)*py))+(((3240659.0)*px))+(((-1.0)*py*x484)))))+(IKabs(((((-3240659.0)*py))+(((-1.0)*px*x484))+(((601661.75)*px))))));\nj0eval[2]=IKsign(((((21590000.0)*x483))+(((-21590000.0)*pp))));\nif( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal j0eval[3];\nsj1=0;\ncj1=1.0;\nj1=0;\nIkReal x485=pz*pz;\nIkReal x486=((4340.5148926345)*sj2);\nIkReal x487=((468.713922881552)*pz);\nj0eval[0]=((((-1.0)*x485))+pp);\nj0eval[1]=IKsign(((((-10000.0)*x485))+(((10000.0)*pp))));\nj0eval[2]=((IKabs((((py*x486))+(((4318.0)*py))+(((-1501.0)*px))+(((-1.0)*py*x487)))))+(IKabs(((((1501.0)*py))+((px*x486))+(((-1.0)*px*x487))+(((4318.0)*px))))));\nif( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )\n{\ncontinue; // no branches [j0]\n\n} else\n{\n{\nIkReal j0array[1], cj0array[1], sj0array[1];\nbool j0valid[1]={false};\n_nj0 = 1;\nIkReal x488=((4340.5148926345)*sj2);\nIkReal x489=((468.713922881552)*pz);\nCheckValue<IkReal> x490 = IKatan2WithCheck(IkReal((((py*x488))+(((4318.0)*py))+(((-1501.0)*px))+(((-1.0)*py*x489)))),((((1501.0)*py))+((px*x488))+(((-1.0)*px*x489))+(((4318.0)*px))),IKFAST_ATAN2_MAGTHRESH);\nif(!x490.valid){\ncontinue;\n}\nCheckValue<IkReal> x491=IKPowWithIntegerCheck(IKsign(((((-10000.0)*(pz*pz)))+(((10000.0)*pp)))),-1);\nif(!x491.valid){\ncontinue;\n}\nj0array[0]=((-1.5707963267949)+(x490.value)+(((1.5707963267949)*(x491.value))));\nsj0array[0]=IKsin(j0array[0]);\ncj0array[0]=IKcos(j0array[0]);\nif( j0array[0] > IKPI )\n{\n    j0array[0]-=IK2PI;\n}\nelse if( j0array[0] < -IKPI )\n{    j0array[0]+=IK2PI;\n}\nj0valid[0] = true;\nfor(int ij0 = 0; ij0 < 1; ++ij0)\n{\nif( !j0valid[ij0] )\n{\n    continue;\n}\n_ij0[0] = ij0; _ij0[1] = -1;\nfor(int iij0 = ij0+1; iij0 < 1; ++iij0)\n{\nif( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )\n{\n    j0valid[iij0]=false; _ij0[1] = iij0; break; \n}\n}\nj0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];\n{\nIkReal evalcond[3];\nIkReal x492=IKsin(j0);\nIkReal x493=IKcos(j0);\nIkReal x494=((1.0)*x493);\nIkReal x495=(py*x492);\nevalcond[0]=((0.1501)+((px*x492))+(((-1.0)*py*x494)));\nevalcond[1]=((0.02406647)+(((0.8636)*x495))+(((-1.0)*pp))+(((0.8636)*px*x493)));\nevalcond[2]=((0.4318)+(((-1.0)*px*x494))+(((0.43405148926345)*sj2))+(((-1.0)*x495))+(((-0.0468713922881552)*pz)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j0array[1], cj0array[1], sj0array[1];\nbool j0valid[1]={false};\n_nj0 = 1;\nIkReal x496=((25000000.0)*pp);\nCheckValue<IkReal> x497=IKPowWithIntegerCheck(IKsign(((((21590000.0)*(pz*pz)))+(((-21590000.0)*pp)))),-1);\nif(!x497.valid){\ncontinue;\n}\nCheckValue<IkReal> x498 = IKatan2WithCheck(IkReal(((((601661.75)*py))+(((3240659.0)*px))+(((-1.0)*py*x496)))),((((-3240659.0)*py))+(((-1.0)*px*x496))+(((601661.75)*px))),IKFAST_ATAN2_MAGTHRESH);\nif(!x498.valid){\ncontinue;\n}\nj0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x497.value)))+(x498.value));\nsj0array[0]=IKsin(j0array[0]);\ncj0array[0]=IKcos(j0array[0]);\nif( j0array[0] > IKPI )\n{\n    j0array[0]-=IK2PI;\n}\nelse if( j0array[0] < -IKPI )\n{    j0array[0]+=IK2PI;\n}\nj0valid[0] = true;\nfor(int ij0 = 0; ij0 < 1; ++ij0)\n{\nif( !j0valid[ij0] )\n{\n    continue;\n}\n_ij0[0] = ij0; _ij0[1] = -1;\nfor(int iij0 = ij0+1; iij0 < 1; ++iij0)\n{\nif( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )\n{\n    j0valid[iij0]=false; _ij0[1] = iij0; break; \n}\n}\nj0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];\n{\nIkReal evalcond[3];\nIkReal x499=IKsin(j0);\nIkReal x500=IKcos(j0);\nIkReal x501=((1.0)*x500);\nIkReal x502=(py*x499);\nevalcond[0]=((0.1501)+(((-1.0)*py*x501))+((px*x499)));\nevalcond[1]=((0.02406647)+(((0.8636)*px*x500))+(((0.8636)*x502))+(((-1.0)*pp)));\nevalcond[2]=((0.4318)+(((0.43405148926345)*sj2))+(((-0.0468713922881552)*pz))+(((-1.0)*x502))+(((-1.0)*px*x501)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x503=((0.0203)*sj2);\nIkReal x504=((0.4331)*cj2);\nIkReal x505=(x503+x504);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));\nevalcond[1]=((0.39696895)+(((-0.01753108)*cj2))+(((-1.0)*pp))+(((0.37402516)*sj2)));\nevalcond[2]=((((-1.0)*x505))+(((-1.0)*pz)));\nevalcond[3]=(pz+x505);\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j0eval[3];\nsj1=0;\ncj1=-1.0;\nj1=3.14159265358979;\nIkReal x506=pz*pz;\nIkReal x507=((25000000.0)*pp);\nj0eval[0]=(pp+(((-1.0)*x506)));\nj0eval[1]=((IKabs(((((601661.75)*px))+(((3240659.0)*py))+(((-1.0)*px*x507)))))+(IKabs(((((-1.0)*py*x507))+(((-3240659.0)*px))+(((601661.75)*py))))));\nj0eval[2]=IKsign(((((-21590000.0)*x506))+(((21590000.0)*pp))));\nif( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal j0eval[3];\nsj1=0;\ncj1=-1.0;\nj1=3.14159265358979;\nIkReal x508=pz*pz;\nIkReal x509=((4340.5148926345)*sj2);\nIkReal x510=((468.713922881552)*pz);\nj0eval[0]=((((-1.0)*pp))+x508);\nj0eval[1]=((IKabs(((((1501.0)*px))+((py*x510))+(((4318.0)*py))+((py*x509)))))+(IKabs((((px*x510))+(((4318.0)*px))+((px*x509))+(((-1501.0)*py))))));\nj0eval[2]=IKsign(((((-10000.0)*pp))+(((10000.0)*x508))));\nif( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )\n{\ncontinue; // no branches [j0]\n\n} else\n{\n{\nIkReal j0array[1], cj0array[1], sj0array[1];\nbool j0valid[1]={false};\n_nj0 = 1;\nIkReal x511=((4340.5148926345)*sj2);\nIkReal x512=((468.713922881552)*pz);\nCheckValue<IkReal> x513=IKPowWithIntegerCheck(IKsign(((((10000.0)*(pz*pz)))+(((-10000.0)*pp)))),-1);\nif(!x513.valid){\ncontinue;\n}\nCheckValue<IkReal> x514 = IKatan2WithCheck(IkReal(((((1501.0)*px))+((py*x512))+((py*x511))+(((4318.0)*py)))),(((px*x512))+((px*x511))+(((4318.0)*px))+(((-1501.0)*py))),IKFAST_ATAN2_MAGTHRESH);\nif(!x514.valid){\ncontinue;\n}\nj0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x513.value)))+(x514.value));\nsj0array[0]=IKsin(j0array[0]);\ncj0array[0]=IKcos(j0array[0]);\nif( j0array[0] > IKPI )\n{\n    j0array[0]-=IK2PI;\n}\nelse if( j0array[0] < -IKPI )\n{    j0array[0]+=IK2PI;\n}\nj0valid[0] = true;\nfor(int ij0 = 0; ij0 < 1; ++ij0)\n{\nif( !j0valid[ij0] )\n{\n    continue;\n}\n_ij0[0] = ij0; _ij0[1] = -1;\nfor(int iij0 = ij0+1; iij0 < 1; ++iij0)\n{\nif( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )\n{\n    j0valid[iij0]=false; _ij0[1] = iij0; break; \n}\n}\nj0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];\n{\nIkReal evalcond[3];\nIkReal x515=IKsin(j0);\nIkReal x516=IKcos(j0);\nIkReal x517=(px*x516);\nIkReal x518=(py*x515);\nevalcond[0]=((0.1501)+((px*x515))+(((-1.0)*py*x516)));\nevalcond[1]=((0.02406647)+(((-0.8636)*x517))+(((-0.8636)*x518))+(((-1.0)*pp)));\nevalcond[2]=((0.4318)+(((0.43405148926345)*sj2))+(((0.0468713922881552)*pz))+x518+x517);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j0array[1], cj0array[1], sj0array[1];\nbool j0valid[1]={false};\n_nj0 = 1;\nIkReal x519=((25000000.0)*pp);\nCheckValue<IkReal> x520 = IKatan2WithCheck(IkReal(((((-3240659.0)*px))+(((601661.75)*py))+(((-1.0)*py*x519)))),((((-1.0)*px*x519))+(((601661.75)*px))+(((3240659.0)*py))),IKFAST_ATAN2_MAGTHRESH);\nif(!x520.valid){\ncontinue;\n}\nCheckValue<IkReal> x521=IKPowWithIntegerCheck(IKsign(((((-21590000.0)*(pz*pz)))+(((21590000.0)*pp)))),-1);\nif(!x521.valid){\ncontinue;\n}\nj0array[0]=((-1.5707963267949)+(x520.value)+(((1.5707963267949)*(x521.value))));\nsj0array[0]=IKsin(j0array[0]);\ncj0array[0]=IKcos(j0array[0]);\nif( j0array[0] > IKPI )\n{\n    j0array[0]-=IK2PI;\n}\nelse if( j0array[0] < -IKPI )\n{    j0array[0]+=IK2PI;\n}\nj0valid[0] = true;\nfor(int ij0 = 0; ij0 < 1; ++ij0)\n{\nif( !j0valid[ij0] )\n{\n    continue;\n}\n_ij0[0] = ij0; _ij0[1] = -1;\nfor(int iij0 = ij0+1; iij0 < 1; ++iij0)\n{\nif( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )\n{\n    j0valid[iij0]=false; _ij0[1] = iij0; break; \n}\n}\nj0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];\n{\nIkReal evalcond[3];\nIkReal x522=IKsin(j0);\nIkReal x523=IKcos(j0);\nIkReal x524=(px*x523);\nIkReal x525=(py*x522);\nevalcond[0]=((0.1501)+(((-1.0)*py*x523))+((px*x522)));\nevalcond[1]=((0.02406647)+(((-0.8636)*x525))+(((-0.8636)*x524))+(((-1.0)*pp)));\nevalcond[2]=((0.4318)+(((0.43405148926345)*sj2))+(((0.0468713922881552)*pz))+x524+x525);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j0]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j0array[1], cj0array[1], sj0array[1];\nbool j0valid[1]={false};\n_nj0 = 1;\nIkReal x526=((203.0)*cj2);\nIkReal x527=((1501.0)*cj1);\nIkReal x528=((4331.0)*sj2);\nIkReal x529=((10000.0)*cj1);\nIkReal x530=((10000.0)*pz*sj1);\nCheckValue<IkReal> x531 = IKatan2WithCheck(IkReal(((((-1.0)*px*x527))+(((-1.0)*py*x526))+(((4318.0)*py))+((py*x528))+((py*x530)))),((((-1.0)*px*x526))+((px*x530))+((px*x528))+(((4318.0)*px))+((py*x527))),IKFAST_ATAN2_MAGTHRESH);\nif(!x531.valid){\ncontinue;\n}\nCheckValue<IkReal> x532=IKPowWithIntegerCheck(IKsign(((((-1.0)*x529*(pz*pz)))+((pp*x529)))),-1);\nif(!x532.valid){\ncontinue;\n}\nj0array[0]=((-1.5707963267949)+(x531.value)+(((1.5707963267949)*(x532.value))));\nsj0array[0]=IKsin(j0array[0]);\ncj0array[0]=IKcos(j0array[0]);\nif( j0array[0] > IKPI )\n{\n    j0array[0]-=IK2PI;\n}\nelse if( j0array[0] < -IKPI )\n{    j0array[0]+=IK2PI;\n}\nj0valid[0] = true;\nfor(int ij0 = 0; ij0 < 1; ++ij0)\n{\nif( !j0valid[ij0] )\n{\n    continue;\n}\n_ij0[0] = ij0; _ij0[1] = -1;\nfor(int iij0 = ij0+1; iij0 < 1; ++iij0)\n{\nif( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )\n{\n    j0valid[iij0]=false; _ij0[1] = iij0; break; \n}\n}\nj0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];\n{\nIkReal evalcond[5];\nIkReal x533=IKcos(j0);\nIkReal x534=IKsin(j0);\nIkReal x535=((0.4331)*sj2);\nIkReal x536=((0.4331)*cj2);\nIkReal x537=(pz*sj1);\nIkReal x538=((0.0203)*cj2);\nIkReal x539=((0.8636)*cj1);\nIkReal x540=((1.0)*cj1);\nIkReal x541=((0.0203)*sj2);\nIkReal x542=(px*x533);\nIkReal x543=(py*x534);\nevalcond[0]=((0.1501)+(((-1.0)*py*x533))+((px*x534)));\nevalcond[1]=(((sj1*x543))+((sj1*x542))+(((-1.0)*x536))+(((-1.0)*x541))+((cj1*pz)));\nevalcond[2]=((0.02406647)+((x539*x542))+((x539*x543))+(((-0.8636)*x537))+(((-1.0)*pp)));\nevalcond[3]=((0.4318)+(((-1.0)*x540*x543))+(((-1.0)*x540*x542))+(((-1.0)*x538))+x535+x537);\nevalcond[4]=((((0.4318)*cj1))+((sj1*x541))+(((-1.0)*x543))+(((-1.0)*x542))+((sj1*x536))+(((-1.0)*cj1*x538))+((cj1*x535)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j0array[1], cj0array[1], sj0array[1];\nbool j0valid[1]={false};\n_nj0 = 1;\nIkReal x544=((203.0)*sj2);\nIkReal x545=((4331.0)*cj2);\nIkReal x546=((10000.0)*sj1);\nIkReal x547=((1501.0)*sj1);\nIkReal x548=((10000.0)*cj1*pz);\nCheckValue<IkReal> x549 = IKatan2WithCheck(IkReal((((py*x544))+((py*x545))+(((-1.0)*px*x547))+(((-1.0)*py*x548)))),(((py*x547))+((px*x545))+((px*x544))+(((-1.0)*px*x548))),IKFAST_ATAN2_MAGTHRESH);\nif(!x549.valid){\ncontinue;\n}\nCheckValue<IkReal> x550=IKPowWithIntegerCheck(IKsign(((((-1.0)*x546*(pz*pz)))+((pp*x546)))),-1);\nif(!x550.valid){\ncontinue;\n}\nj0array[0]=((-1.5707963267949)+(x549.value)+(((1.5707963267949)*(x550.value))));\nsj0array[0]=IKsin(j0array[0]);\ncj0array[0]=IKcos(j0array[0]);\nif( j0array[0] > IKPI )\n{\n    j0array[0]-=IK2PI;\n}\nelse if( j0array[0] < -IKPI )\n{    j0array[0]+=IK2PI;\n}\nj0valid[0] = true;\nfor(int ij0 = 0; ij0 < 1; ++ij0)\n{\nif( !j0valid[ij0] )\n{\n    continue;\n}\n_ij0[0] = ij0; _ij0[1] = -1;\nfor(int iij0 = ij0+1; iij0 < 1; ++iij0)\n{\nif( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )\n{\n    j0valid[iij0]=false; _ij0[1] = iij0; break; \n}\n}\nj0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];\n{\nIkReal evalcond[5];\nIkReal x551=IKcos(j0);\nIkReal x552=IKsin(j0);\nIkReal x553=((0.4331)*sj2);\nIkReal x554=((0.4331)*cj2);\nIkReal x555=(pz*sj1);\nIkReal x556=((0.0203)*cj2);\nIkReal x557=((0.8636)*cj1);\nIkReal x558=((1.0)*cj1);\nIkReal x559=((0.0203)*sj2);\nIkReal x560=(px*x551);\nIkReal x561=(py*x552);\nevalcond[0]=((0.1501)+(((-1.0)*py*x551))+((px*x552)));\nevalcond[1]=(((cj1*pz))+(((-1.0)*x559))+(((-1.0)*x554))+((sj1*x561))+((sj1*x560)));\nevalcond[2]=((0.02406647)+(((-0.8636)*x555))+(((-1.0)*pp))+((x557*x561))+((x557*x560)));\nevalcond[3]=((0.4318)+(((-1.0)*x558*x560))+(((-1.0)*x558*x561))+(((-1.0)*x556))+x553+x555);\nevalcond[4]=(((sj1*x554))+((sj1*x559))+(((0.4318)*cj1))+(((-1.0)*cj1*x556))+((cj1*x553))+(((-1.0)*x560))+(((-1.0)*x561)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j0array[1], cj0array[1], sj0array[1];\nbool j0valid[1]={false};\n_nj0 = 1;\nIkReal x562=((25000000.0)*pp);\nIkReal x563=((21590000.0)*cj1);\nIkReal x564=((3240659.0)*cj1);\nIkReal x565=((21590000.0)*pz*sj1);\nCheckValue<IkReal> x566 = IKatan2WithCheck(IkReal(((((-601661.75)*py))+((py*x562))+((py*x565))+(((-1.0)*px*x564)))),((((-601661.75)*px))+((py*x564))+((px*x562))+((px*x565))),IKFAST_ATAN2_MAGTHRESH);\nif(!x566.valid){\ncontinue;\n}\nCheckValue<IkReal> x567=IKPowWithIntegerCheck(IKsign(((((-1.0)*x563*(pz*pz)))+((pp*x563)))),-1);\nif(!x567.valid){\ncontinue;\n}\nj0array[0]=((-1.5707963267949)+(x566.value)+(((1.5707963267949)*(x567.value))));\nsj0array[0]=IKsin(j0array[0]);\ncj0array[0]=IKcos(j0array[0]);\nif( j0array[0] > IKPI )\n{\n    j0array[0]-=IK2PI;\n}\nelse if( j0array[0] < -IKPI )\n{    j0array[0]+=IK2PI;\n}\nj0valid[0] = true;\nfor(int ij0 = 0; ij0 < 1; ++ij0)\n{\nif( !j0valid[ij0] )\n{\n    continue;\n}\n_ij0[0] = ij0; _ij0[1] = -1;\nfor(int iij0 = ij0+1; iij0 < 1; ++iij0)\n{\nif( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )\n{\n    j0valid[iij0]=false; _ij0[1] = iij0; break; \n}\n}\nj0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];\n{\nIkReal evalcond[5];\nIkReal x568=IKcos(j0);\nIkReal x569=IKsin(j0);\nIkReal x570=((0.4331)*sj2);\nIkReal x571=((0.4331)*cj2);\nIkReal x572=(pz*sj1);\nIkReal x573=((0.0203)*cj2);\nIkReal x574=((0.8636)*cj1);\nIkReal x575=((1.0)*cj1);\nIkReal x576=((0.0203)*sj2);\nIkReal x577=(px*x568);\nIkReal x578=(py*x569);\nevalcond[0]=((0.1501)+(((-1.0)*py*x568))+((px*x569)));\nevalcond[1]=(((sj1*x577))+((sj1*x578))+((cj1*pz))+(((-1.0)*x571))+(((-1.0)*x576)));\nevalcond[2]=((0.02406647)+((x574*x578))+((x574*x577))+(((-1.0)*pp))+(((-0.8636)*x572)));\nevalcond[3]=((0.4318)+(((-1.0)*x575*x578))+(((-1.0)*x575*x577))+(((-1.0)*x573))+x570+x572);\nevalcond[4]=(((sj1*x571))+((sj1*x576))+(((0.4318)*cj1))+(((-1.0)*cj1*x573))+(((-1.0)*x577))+(((-1.0)*x578))+((cj1*x570)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j0array[2], cj0array[2], sj0array[2];\nbool j0valid[2]={false};\n_nj0 = 2;\nCheckValue<IkReal> x581 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);\nif(!x581.valid){\ncontinue;\n}\nIkReal x579=((1.0)*(x581.value));\nif((((px*px)+(py*py))) < -0.00001)\ncontinue;\nCheckValue<IkReal> x582=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);\nif(!x582.valid){\ncontinue;\n}\nif( (((0.1501)*(x582.value))) < -1-IKFAST_SINCOS_THRESH || (((0.1501)*(x582.value))) > 1+IKFAST_SINCOS_THRESH )\n    continue;\nIkReal x580=IKasin(((0.1501)*(x582.value)));\nj0array[0]=((((-1.0)*x580))+(((-1.0)*x579)));\nsj0array[0]=IKsin(j0array[0]);\ncj0array[0]=IKcos(j0array[0]);\nj0array[1]=((3.14159265358979)+(((-1.0)*x579))+x580);\nsj0array[1]=IKsin(j0array[1]);\ncj0array[1]=IKcos(j0array[1]);\nif( j0array[0] > IKPI )\n{\n    j0array[0]-=IK2PI;\n}\nelse if( j0array[0] < -IKPI )\n{    j0array[0]+=IK2PI;\n}\nj0valid[0] = true;\nif( j0array[1] > IKPI )\n{\n    j0array[1]-=IK2PI;\n}\nelse if( j0array[1] < -IKPI )\n{    j0array[1]+=IK2PI;\n}\nj0valid[1] = true;\nfor(int ij0 = 0; ij0 < 2; ++ij0)\n{\nif( !j0valid[ij0] )\n{\n    continue;\n}\n_ij0[0] = ij0; _ij0[1] = -1;\nfor(int iij0 = ij0+1; iij0 < 2; ++iij0)\n{\nif( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )\n{\n    j0valid[iij0]=false; _ij0[1] = iij0; break; \n}\n}\nj0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];\n\n{\nIkReal j1eval[3];\nIkReal x583=cj2*cj2;\nIkReal x584=(cj2*sj2);\nIkReal x585=(py*sj0);\nIkReal x586=(pz*sj2);\nIkReal x587=((1.0)*pz);\nIkReal x588=(cj2*pz);\nIkReal x589=(cj0*cj2*px);\nIkReal x590=(cj0*px*sj2);\nj1eval[0]=((((-21.3349753694581)*x586))+(((-21.3349753694581)*x589))+(((-1.0)*sj2*x585))+(((-1.0)*x590))+(((-21.3349753694581)*cj2*x585))+x588+(((-21.2709359605911)*pz)));\nj1eval[1]=IKsign(((((0.0203)*x588))+(((-0.0203)*sj2*x585))+(((-0.4331)*cj2*x585))+(((-0.4331)*x589))+(((-0.4331)*x586))+(((-0.4318)*pz))+(((-0.0203)*x590))));\nj1eval[2]=((IKabs(((-0.00041209)+(((-0.01758386)*x584))+(((-0.18716352)*x583))+(pz*pz))))+(IKabs(((-0.00879193)+(((-0.00876554)*sj2))+(((-0.18701258)*cj2))+(((0.01758386)*x583))+(((-0.18716352)*x584))+(((-1.0)*x585*x587))+(((-1.0)*cj0*px*x587))))));\nif( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal j1eval[3];\nIkReal x591=(cj2*pz);\nIkReal x592=(py*sj0);\nIkReal x593=((935.0629)*sj2);\nIkReal x594=((1.0)*cj2);\nIkReal x595=((21.3349753694581)*sj2);\nIkReal x596=(cj0*px);\nIkReal x597=((1082.75)*pp);\nIkReal x598=(pz*sj2);\nIkReal x599=((43.8277)*cj2);\nIkReal x600=((50.75)*pp);\nIkReal x601=((2159.0)*pz);\nj1eval[0]=(((x595*x596))+(((-1.0)*x598))+(((-1.0)*x592*x594))+(((-21.3349753694581)*x591))+(((-1.0)*x594*x596))+(((21.2709359605911)*x592))+(((21.2709359605911)*x596))+((x592*x595)));\nj1eval[1]=IKsign(((((-43.8277)*x598))+(((-1.0)*x596*x599))+(((-1.0)*x592*x599))+(((932.2562)*x596))+(((932.2562)*x592))+(((-935.0629)*x591))+((x593*x596))+((x592*x593))));\nj1eval[2]=((IKabs(((((-1.0)*x592*x601))+(((-1.0)*x596*x601))+((cj2*x597))+(((-1.2213733525)*sj2))+(((-26.0579703925)*cj2))+((sj2*x600)))))+(IKabs(((-25.979754365)+(((-1.0)*cj2*x600))+(((1079.5)*pp))+(((-26.0579703925)*sj2))+(((1.2213733525)*cj2))+((sj2*x597))+(((-1.0)*pz*x601))))));\nif( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal j1eval[3];\nIkReal x602=cj0*cj0;\nIkReal x603=py*py;\nIkReal x604=pz*pz;\nIkReal x605=px*px;\nIkReal x606=((935.0629)*cj2);\nIkReal x607=(py*sj0);\nIkReal x608=((43.8277)*sj2);\nIkReal x609=((2500.0)*pp);\nIkReal x610=(cj0*px);\nIkReal x611=(x602*x603);\nIkReal x612=(x602*x605);\nj1eval[0]=((((-1.0)*x611))+(((2.0)*x607*x610))+x603+x604+x612);\nj1eval[1]=((IKabs(((((60.166175)*pz))+((x608*x610))+((x607*x608))+((x606*x607))+((x606*x610))+(((-1.0)*pz*x609)))))+(IKabs(((((-60.166175)*x607))+(((-60.166175)*x610))+((x607*x609))+((x609*x610))+((pz*x608))+((pz*x606))))));\nj1eval[2]=IKsign(((((2159.0)*x612))+(((2159.0)*x604))+(((2159.0)*x603))+(((4318.0)*x607*x610))+(((-2159.0)*x611))));\nif( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )\n{\ncontinue; // no branches [j1]\n\n} else\n{\n{\nIkReal j1array[1], cj1array[1], sj1array[1];\nbool j1valid[1]={false};\n_nj1 = 1;\nIkReal x613=cj0*cj0;\nIkReal x614=py*py;\nIkReal x615=(py*sj0);\nIkReal x616=((43.8277)*sj2);\nIkReal x617=((935.0629)*cj2);\nIkReal x618=(cj0*px);\nIkReal x619=((2500.0)*pp);\nIkReal x620=((2159.0)*x614);\nCheckValue<IkReal> x621=IKPowWithIntegerCheck(IKsign(((((4318.0)*x615*x618))+(((2159.0)*(pz*pz)))+(((2159.0)*x613*(px*px)))+x620+(((-1.0)*x613*x620)))),-1);\nif(!x621.valid){\ncontinue;\n}\nCheckValue<IkReal> x622 = IKatan2WithCheck(IkReal(((((60.166175)*pz))+((x616*x618))+((x617*x618))+(((-1.0)*pz*x619))+((x615*x617))+((x615*x616)))),((((-60.166175)*x618))+(((-60.166175)*x615))+((pz*x617))+((pz*x616))+((x615*x619))+((x618*x619))),IKFAST_ATAN2_MAGTHRESH);\nif(!x622.valid){\ncontinue;\n}\nj1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x621.value)))+(x622.value));\nsj1array[0]=IKsin(j1array[0]);\ncj1array[0]=IKcos(j1array[0]);\nif( j1array[0] > IKPI )\n{\n    j1array[0]-=IK2PI;\n}\nelse if( j1array[0] < -IKPI )\n{    j1array[0]+=IK2PI;\n}\nj1valid[0] = true;\nfor(int ij1 = 0; ij1 < 1; ++ij1)\n{\nif( !j1valid[ij1] )\n{\n    continue;\n}\n_ij1[0] = ij1; _ij1[1] = -1;\nfor(int iij1 = ij1+1; iij1 < 1; ++iij1)\n{\nif( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )\n{\n    j1valid[iij1]=false; _ij1[1] = iij1; break; \n}\n}\nj1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];\n{\nIkReal evalcond[5];\nIkReal x623=IKsin(j1);\nIkReal x624=IKcos(j1);\nIkReal x625=((0.4331)*sj2);\nIkReal x626=(cj0*px);\nIkReal x627=((0.4331)*cj2);\nIkReal x628=(py*sj0);\nIkReal x629=((0.0203)*cj2);\nIkReal x630=((0.0203)*sj2);\nIkReal x631=((1.0)*x624);\nIkReal x632=((0.0203)*x623);\nIkReal x633=(pz*x623);\nIkReal x634=((0.8636)*x624);\nevalcond[0]=(((pz*x624))+(((-1.0)*x627))+(((-1.0)*x630))+((x623*x626))+((x623*x628)));\nevalcond[1]=((0.02406647)+((x628*x634))+(((-1.0)*pp))+(((-0.8636)*x633))+((x626*x634)));\nevalcond[2]=((0.4318)+(((-1.0)*x628*x631))+(((-1.0)*x629))+x625+x633+(((-1.0)*x626*x631)));\nevalcond[3]=((((-1.0)*x623*x629))+(((-1.0)*x624*x627))+(((-1.0)*x624*x630))+(((0.4318)*x623))+pz+((x623*x625)));\nevalcond[4]=((((-1.0)*x624*x629))+(((0.4318)*x624))+((x624*x625))+(((-1.0)*x628))+(((-1.0)*x626))+((x623*x630))+((x623*x627)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j1array[1], cj1array[1], sj1array[1];\nbool j1valid[1]={false};\n_nj1 = 1;\nIkReal x635=(pp*sj2);\nIkReal x636=(cj2*pp);\nIkReal x637=(py*sj0);\nIkReal x638=(cj0*px);\nIkReal x639=((935.0629)*sj2);\nIkReal x640=((2159.0)*pz);\nIkReal x641=((43.8277)*cj2);\nCheckValue<IkReal> x642 = IKatan2WithCheck(IkReal(((((50.75)*x635))+(((-1.2213733525)*sj2))+(((-26.0579703925)*cj2))+(((-1.0)*x637*x640))+(((1082.75)*x636))+(((-1.0)*x638*x640)))),((-25.979754365)+(((1079.5)*pp))+(((-26.0579703925)*sj2))+(((-50.75)*x636))+(((1.2213733525)*cj2))+(((1082.75)*x635))+(((-1.0)*pz*x640))),IKFAST_ATAN2_MAGTHRESH);\nif(!x642.valid){\ncontinue;\n}\nCheckValue<IkReal> x643=IKPowWithIntegerCheck(IKsign(((((-935.0629)*cj2*pz))+(((-43.8277)*pz*sj2))+((x638*x639))+(((932.2562)*x638))+(((932.2562)*x637))+(((-1.0)*x637*x641))+(((-1.0)*x638*x641))+((x637*x639)))),-1);\nif(!x643.valid){\ncontinue;\n}\nj1array[0]=((-1.5707963267949)+(x642.value)+(((1.5707963267949)*(x643.value))));\nsj1array[0]=IKsin(j1array[0]);\ncj1array[0]=IKcos(j1array[0]);\nif( j1array[0] > IKPI )\n{\n    j1array[0]-=IK2PI;\n}\nelse if( j1array[0] < -IKPI )\n{    j1array[0]+=IK2PI;\n}\nj1valid[0] = true;\nfor(int ij1 = 0; ij1 < 1; ++ij1)\n{\nif( !j1valid[ij1] )\n{\n    continue;\n}\n_ij1[0] = ij1; _ij1[1] = -1;\nfor(int iij1 = ij1+1; iij1 < 1; ++iij1)\n{\nif( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )\n{\n    j1valid[iij1]=false; _ij1[1] = iij1; break; \n}\n}\nj1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];\n{\nIkReal evalcond[5];\nIkReal x644=IKsin(j1);\nIkReal x645=IKcos(j1);\nIkReal x646=((0.4331)*sj2);\nIkReal x647=(cj0*px);\nIkReal x648=((0.4331)*cj2);\nIkReal x649=(py*sj0);\nIkReal x650=((0.0203)*cj2);\nIkReal x651=((0.0203)*sj2);\nIkReal x652=((1.0)*x645);\nIkReal x653=((0.0203)*x644);\nIkReal x654=(pz*x644);\nIkReal x655=((0.8636)*x645);\nevalcond[0]=(((x644*x649))+((x644*x647))+(((-1.0)*x651))+((pz*x645))+(((-1.0)*x648)));\nevalcond[1]=((0.02406647)+((x647*x655))+(((-0.8636)*x654))+((x649*x655))+(((-1.0)*pp)));\nevalcond[2]=((0.4318)+(((-1.0)*x647*x652))+(((-1.0)*x650))+x646+x654+(((-1.0)*x649*x652)));\nevalcond[3]=((((0.4318)*x644))+((x644*x646))+pz+(((-1.0)*x645*x651))+(((-1.0)*x644*x650))+(((-1.0)*x645*x648)));\nevalcond[4]=((((-1.0)*x649))+(((-1.0)*x647))+(((0.4318)*x645))+((x644*x648))+((x644*x651))+((x645*x646))+(((-1.0)*x645*x650)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j1array[1], cj1array[1], sj1array[1];\nbool j1valid[1]={false};\n_nj1 = 1;\nIkReal x656=cj2*cj2;\nIkReal x657=(cj0*px);\nIkReal x658=((0.4331)*cj2);\nIkReal x659=(cj2*sj2);\nIkReal x660=((0.0203)*sj2);\nIkReal x661=(py*sj0);\nIkReal x662=((1.0)*pz);\nCheckValue<IkReal> x663 = IKatan2WithCheck(IkReal(((-0.00041209)+(((-0.18716352)*x656))+(pz*pz)+(((-0.01758386)*x659)))),((-0.00879193)+(((-0.00876554)*sj2))+(((0.01758386)*x656))+(((-0.18701258)*cj2))+(((-0.18716352)*x659))+(((-1.0)*x661*x662))+(((-1.0)*x657*x662))),IKFAST_ATAN2_MAGTHRESH);\nif(!x663.valid){\ncontinue;\n}\nCheckValue<IkReal> x664=IKPowWithIntegerCheck(IKsign(((((-1.0)*x657*x658))+(((-1.0)*x660*x661))+(((-1.0)*x658*x661))+(((-1.0)*x657*x660))+(((0.0203)*cj2*pz))+(((-0.4331)*pz*sj2))+(((-0.4318)*pz)))),-1);\nif(!x664.valid){\ncontinue;\n}\nj1array[0]=((-1.5707963267949)+(x663.value)+(((1.5707963267949)*(x664.value))));\nsj1array[0]=IKsin(j1array[0]);\ncj1array[0]=IKcos(j1array[0]);\nif( j1array[0] > IKPI )\n{\n    j1array[0]-=IK2PI;\n}\nelse if( j1array[0] < -IKPI )\n{    j1array[0]+=IK2PI;\n}\nj1valid[0] = true;\nfor(int ij1 = 0; ij1 < 1; ++ij1)\n{\nif( !j1valid[ij1] )\n{\n    continue;\n}\n_ij1[0] = ij1; _ij1[1] = -1;\nfor(int iij1 = ij1+1; iij1 < 1; ++iij1)\n{\nif( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )\n{\n    j1valid[iij1]=false; _ij1[1] = iij1; break; \n}\n}\nj1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];\n{\nIkReal evalcond[5];\nIkReal x665=IKsin(j1);\nIkReal x666=IKcos(j1);\nIkReal x667=((0.4331)*sj2);\nIkReal x668=(cj0*px);\nIkReal x669=((0.4331)*cj2);\nIkReal x670=(py*sj0);\nIkReal x671=((0.0203)*cj2);\nIkReal x672=((0.0203)*sj2);\nIkReal x673=((1.0)*x666);\nIkReal x674=((0.0203)*x665);\nIkReal x675=(pz*x665);\nIkReal x676=((0.8636)*x666);\nevalcond[0]=(((x665*x670))+((x665*x668))+(((-1.0)*x669))+((pz*x666))+(((-1.0)*x672)));\nevalcond[1]=((0.02406647)+((x670*x676))+(((-1.0)*pp))+(((-0.8636)*x675))+((x668*x676)));\nevalcond[2]=((0.4318)+(((-1.0)*x668*x673))+(((-1.0)*x670*x673))+x667+x675+(((-1.0)*x671)));\nevalcond[3]=(((x665*x667))+(((0.4318)*x665))+(((-1.0)*x665*x671))+(((-1.0)*x666*x672))+pz+(((-1.0)*x666*x669)));\nevalcond[4]=(((x666*x667))+((x665*x672))+((x665*x669))+(((0.4318)*x666))+(((-1.0)*x668))+(((-1.0)*x666*x671))+(((-1.0)*x670)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n}\n}\n\n}\n\n}\n}\n}\n}\nreturn solutions.GetNumSolutions()>0;\n}\ninline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {\nfor(int rotationiter = 0; rotationiter < 1; ++rotationiter) {\nIkReal x83=(cj0*r00);\nIkReal x84=(cj0*r01);\nIkReal x85=((1.0)*sj1);\nIkReal x86=((1.0)*sj0);\nIkReal x87=(r11*sj0);\nIkReal x88=(cj1*sj2);\nIkReal x89=(cj0*r02);\nIkReal x90=((((-1.0)*sj2*x85))+((cj1*cj2)));\nIkReal x91=(((cj2*sj1))+x88);\nIkReal x92=(cj0*x90);\nIkReal x93=(sj0*x90);\nIkReal x94=(sj0*x91);\nIkReal x95=((((-1.0)*x88))+(((-1.0)*cj2*x85)));\nnew_r00=(((r10*x93))+((r20*x95))+((x83*x90)));\nnew_r01=(((r21*x95))+((x87*x90))+((x84*x90)));\nnew_r02=(((r12*x93))+((x89*x90))+((r22*x95)));\nnew_r10=((((-1.0)*r00*x86))+((cj0*r10)));\nnew_r11=(((cj0*r11))+(((-1.0)*r01*x86)));\nnew_r12=((((-1.0)*r02*x86))+((cj0*r12)));\nnew_r20=(((r10*x94))+((r20*x90))+((x83*x91)));\nnew_r21=(((r21*x90))+((x87*x91))+((x84*x91)));\nnew_r22=(((r12*x94))+((x89*x91))+((r22*x90)));\n{\nIkReal j4array[2], cj4array[2], sj4array[2];\nbool j4valid[2]={false};\n_nj4 = 2;\ncj4array[0]=new_r22;\nif( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j4valid[0] = j4valid[1] = true;\n    j4array[0] = IKacos(cj4array[0]);\n    sj4array[0] = IKsin(j4array[0]);\n    cj4array[1] = cj4array[0];\n    j4array[1] = -j4array[0];\n    sj4array[1] = -sj4array[0];\n}\nelse if( isnan(cj4array[0]) )\n{\n    // probably any value will work\n    j4valid[0] = true;\n    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;\n}\nfor(int ij4 = 0; ij4 < 2; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 2; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n\n{\nIkReal j3eval[2];\nIkReal x96=(cj0*r00);\nIkReal x97=(cj0*r01);\nIkReal x98=((1.0)*sj1);\nIkReal x99=((1.0)*sj0);\nIkReal x100=(r11*sj0);\nIkReal x101=(cj1*sj2);\nIkReal x102=(cj0*r02);\nIkReal x103=x90;\nIkReal x104=(((cj2*sj1))+x101);\nIkReal x105=(cj0*x103);\nIkReal x106=(sj0*x103);\nIkReal x107=(sj0*x104);\nIkReal x108=x95;\nnew_r00=(((r10*x106))+((x103*x96))+((r20*x108)));\nnew_r01=(((x103*x97))+((r21*x108))+((x100*x103)));\nnew_r02=(((r22*x108))+((x102*x103))+((r12*x106)));\nnew_r10=(((cj0*r10))+(((-1.0)*r00*x99)));\nnew_r11=((((-1.0)*r01*x99))+((cj0*r11)));\nnew_r12=(((cj0*r12))+(((-1.0)*r02*x99)));\nnew_r20=(((r10*x107))+((r20*x103))+((x104*x96)));\nnew_r21=(((r21*x103))+((x104*x97))+((x100*x104)));\nnew_r22=(((r22*x103))+((x102*x104))+((r12*x107)));\nj3eval[0]=sj4;\nj3eval[1]=IKsign(sj4);\nif( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j3eval[1];\nIkReal x109=(cj0*r00);\nIkReal x110=(cj0*r01);\nIkReal x111=((1.0)*sj1);\nIkReal x112=((1.0)*sj0);\nIkReal x113=(r11*sj0);\nIkReal x114=(cj1*sj2);\nIkReal x115=(cj0*r02);\nIkReal x116=x90;\nIkReal x117=(((cj2*sj1))+x114);\nIkReal x118=(cj0*x116);\nIkReal x119=(sj0*x116);\nIkReal x120=(sj0*x117);\nIkReal x121=x95;\nnew_r00=(((r10*x119))+((x109*x116))+((r20*x121)));\nnew_r01=(((x110*x116))+((r21*x121))+((x113*x116)));\nnew_r02=(((r22*x121))+((r12*x119))+((x115*x116)));\nnew_r10=((((-1.0)*r00*x112))+((cj0*r10)));\nnew_r11=((((-1.0)*r01*x112))+((cj0*r11)));\nnew_r12=((((-1.0)*r02*x112))+((cj0*r12)));\nnew_r20=(((x109*x117))+((r20*x116))+((r10*x120)));\nnew_r21=(((x110*x117))+((x113*x117))+((r21*x116)));\nnew_r22=(((r22*x116))+((r12*x120))+((x115*x117)));\nj3eval[0]=sj4;\nif( IKabs(j3eval[0]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[6];\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));\nevalcond[1]=((-1.0)+new_r22);\nevalcond[2]=new_r20;\nevalcond[3]=new_r02;\nevalcond[4]=new_r12;\nevalcond[5]=new_r21;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j3array[2], cj3array[2], sj3array[2];\nbool j3valid[2]={false};\n_nj3 = 2;\nCheckValue<IkReal> x123 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);\nif(!x123.valid){\ncontinue;\n}\nIkReal x122=x123.value;\nj3array[0]=((-1.0)*x122);\nsj3array[0]=IKsin(j3array[0]);\ncj3array[0]=IKcos(j3array[0]);\nj3array[1]=((3.14159265358979)+(((-1.0)*x122)));\nsj3array[1]=IKsin(j3array[1]);\ncj3array[1]=IKcos(j3array[1]);\nif( j3array[0] > IKPI )\n{\n    j3array[0]-=IK2PI;\n}\nelse if( j3array[0] < -IKPI )\n{    j3array[0]+=IK2PI;\n}\nj3valid[0] = true;\nif( j3array[1] > IKPI )\n{\n    j3array[1]-=IK2PI;\n}\nelse if( j3array[1] < -IKPI )\n{    j3array[1]+=IK2PI;\n}\nj3valid[1] = true;\nfor(int ij3 = 0; ij3 < 2; ++ij3)\n{\nif( !j3valid[ij3] )\n{\n    continue;\n}\n_ij3[0] = ij3; _ij3[1] = -1;\nfor(int iij3 = ij3+1; iij3 < 2; ++iij3)\n{\nif( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )\n{\n    j3valid[iij3]=false; _ij3[1] = iij3; break; \n}\n}\nj3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];\n{\nIkReal evalcond[1];\nevalcond[0]=((((-1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x124=((1.0)*new_r01);\nif( IKabs(((((-1.0)*cj3*x124))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x124))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x124))+(((-1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x124))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((((-1.0)*cj3*x124))+(((-1.0)*new_r00*sj3))), ((((-1.0)*sj3*x124))+((cj3*new_r00))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x125=IKsin(j5);\nIkReal x126=IKcos(j5);\nIkReal x127=((1.0)*sj3);\nIkReal x128=((1.0)*x126);\nIkReal x129=(sj3*x125);\nIkReal x130=((1.0)*x125);\nIkReal x131=(cj3*x128);\nevalcond[0]=(((new_r11*sj3))+x125+((cj3*new_r01)));\nevalcond[1]=(((cj3*x125))+((sj3*x126))+new_r01);\nevalcond[2]=(((new_r10*sj3))+(((-1.0)*x128))+((cj3*new_r00)));\nevalcond[3]=((((-1.0)*new_r00*x127))+(((-1.0)*x130))+((cj3*new_r10)));\nevalcond[4]=((((-1.0)*new_r01*x127))+(((-1.0)*x128))+((cj3*new_r11)));\nevalcond[5]=(x129+(((-1.0)*x131))+new_r00);\nevalcond[6]=(x129+(((-1.0)*x131))+new_r11);\nevalcond[7]=((((-1.0)*x126*x127))+(((-1.0)*cj3*x130))+new_r10);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));\nevalcond[1]=((1.0)+new_r22);\nevalcond[2]=new_r20;\nevalcond[3]=new_r02;\nevalcond[4]=new_r12;\nevalcond[5]=new_r21;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j3array[2], cj3array[2], sj3array[2];\nbool j3valid[2]={false};\n_nj3 = 2;\nCheckValue<IkReal> x133 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);\nif(!x133.valid){\ncontinue;\n}\nIkReal x132=x133.value;\nj3array[0]=((-1.0)*x132);\nsj3array[0]=IKsin(j3array[0]);\ncj3array[0]=IKcos(j3array[0]);\nj3array[1]=((3.14159265358979)+(((-1.0)*x132)));\nsj3array[1]=IKsin(j3array[1]);\ncj3array[1]=IKcos(j3array[1]);\nif( j3array[0] > IKPI )\n{\n    j3array[0]-=IK2PI;\n}\nelse if( j3array[0] < -IKPI )\n{    j3array[0]+=IK2PI;\n}\nj3valid[0] = true;\nif( j3array[1] > IKPI )\n{\n    j3array[1]-=IK2PI;\n}\nelse if( j3array[1] < -IKPI )\n{    j3array[1]+=IK2PI;\n}\nj3valid[1] = true;\nfor(int ij3 = 0; ij3 < 2; ++ij3)\n{\nif( !j3valid[ij3] )\n{\n    continue;\n}\n_ij3[0] = ij3; _ij3[1] = -1;\nfor(int iij3 = ij3+1; iij3 < 2; ++iij3)\n{\nif( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )\n{\n    j3valid[iij3]=false; _ij3[1] = iij3; break; \n}\n}\nj3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];\n{\nIkReal evalcond[1];\nevalcond[0]=((((-1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x134=((1.0)*sj3);\nif( IKabs(((((-1.0)*new_r00*x134))+((cj3*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x134))+(((-1.0)*cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x134))+((cj3*new_r01))))+IKsqr(((((-1.0)*new_r01*x134))+(((-1.0)*cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((((-1.0)*new_r00*x134))+((cj3*new_r01))), ((((-1.0)*new_r01*x134))+(((-1.0)*cj3*new_r00))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x135=IKsin(j5);\nIkReal x136=IKcos(j5);\nIkReal x137=((1.0)*sj3);\nIkReal x138=((1.0)*x135);\nIkReal x139=(sj3*x136);\nIkReal x140=((1.0)*x136);\nIkReal x141=(cj3*x138);\nevalcond[0]=(((new_r10*sj3))+x136+((cj3*new_r00)));\nevalcond[1]=(((new_r11*sj3))+(((-1.0)*x138))+((cj3*new_r01)));\nevalcond[2]=(((cj3*x136))+((sj3*x135))+new_r00);\nevalcond[3]=((((-1.0)*new_r00*x137))+(((-1.0)*x138))+((cj3*new_r10)));\nevalcond[4]=((((-1.0)*x140))+(((-1.0)*new_r01*x137))+((cj3*new_r11)));\nevalcond[5]=((((-1.0)*x141))+x139+new_r01);\nevalcond[6]=((((-1.0)*x141))+x139+new_r10);\nevalcond[7]=((((-1.0)*x135*x137))+(((-1.0)*cj3*x140))+new_r11);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j3, j5]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j3array[1], cj3array[1], sj3array[1];\nbool j3valid[1]={false};\n_nj3 = 1;\nCheckValue<IkReal> x143=IKPowWithIntegerCheck(sj4,-1);\nif(!x143.valid){\ncontinue;\n}\nIkReal x142=x143.value;\nCheckValue<IkReal> x144=IKPowWithIntegerCheck(new_r12,-1);\nif(!x144.valid){\ncontinue;\n}\nif( IKabs((x142*(x144.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r02*new_r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x142)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x142*(x144.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r02*new_r02)))))))+IKsqr((new_r02*x142))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj3array[0]=IKatan2((x142*(x144.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r02*new_r02)))))), (new_r02*x142));\nsj3array[0]=IKsin(j3array[0]);\ncj3array[0]=IKcos(j3array[0]);\nif( j3array[0] > IKPI )\n{\n    j3array[0]-=IK2PI;\n}\nelse if( j3array[0] < -IKPI )\n{    j3array[0]+=IK2PI;\n}\nj3valid[0] = true;\nfor(int ij3 = 0; ij3 < 1; ++ij3)\n{\nif( !j3valid[ij3] )\n{\n    continue;\n}\n_ij3[0] = ij3; _ij3[1] = -1;\nfor(int iij3 = ij3+1; iij3 < 1; ++iij3)\n{\nif( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )\n{\n    j3valid[iij3]=false; _ij3[1] = iij3; break; \n}\n}\nj3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];\n{\nIkReal evalcond[8];\nIkReal x145=IKcos(j3);\nIkReal x146=IKsin(j3);\nIkReal x147=((1.0)*sj4);\nIkReal x148=((1.0)*cj4);\nIkReal x149=(new_r02*x145);\nIkReal x150=(new_r12*x146);\nevalcond[0]=((((-1.0)*x145*x147))+new_r02);\nevalcond[1]=((((-1.0)*x146*x147))+new_r12);\nevalcond[2]=(((new_r12*x145))+(((-1.0)*new_r02*x146)));\nevalcond[3]=((((-1.0)*x147))+x150+x149);\nevalcond[4]=(((cj4*x150))+(((-1.0)*new_r22*x147))+((cj4*x149)));\nevalcond[5]=((((-1.0)*new_r10*x146*x147))+(((-1.0)*new_r20*x148))+(((-1.0)*new_r00*x145*x147)));\nevalcond[6]=((((-1.0)*new_r21*x148))+(((-1.0)*new_r11*x146*x147))+(((-1.0)*new_r01*x145*x147)));\nevalcond[7]=((1.0)+(((-1.0)*new_r22*x148))+(((-1.0)*x147*x149))+(((-1.0)*x147*x150)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nIkReal j5eval[2];\nIkReal x151=(cj0*r00);\nIkReal x152=(cj0*r01);\nIkReal x153=((1.0)*sj1);\nIkReal x154=((1.0)*sj0);\nIkReal x155=(r11*sj0);\nIkReal x156=(cj1*sj2);\nIkReal x157=(cj0*r02);\nIkReal x158=x90;\nIkReal x159=(((cj2*sj1))+x156);\nIkReal x160=(cj0*x158);\nIkReal x161=(sj0*x158);\nIkReal x162=(sj0*x159);\nIkReal x163=x95;\nnew_r00=(((r20*x163))+((x151*x158))+((r10*x161)));\nnew_r01=(((x152*x158))+((r21*x163))+((x155*x158)));\nnew_r02=(((r22*x163))+((x157*x158))+((r12*x161)));\nnew_r10=((((-1.0)*r00*x154))+((cj0*r10)));\nnew_r11=((((-1.0)*r01*x154))+((cj0*r11)));\nnew_r12=((((-1.0)*r02*x154))+((cj0*r12)));\nnew_r20=(((r20*x158))+((x151*x159))+((r10*x162)));\nnew_r21=(((x152*x159))+((x155*x159))+((r21*x158)));\nnew_r22=(((x157*x159))+((r12*x162))+((r22*x158)));\nj5eval[0]=sj4;\nj5eval[1]=IKsign(sj4);\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j5eval[2];\nIkReal x164=(cj0*r00);\nIkReal x165=(cj0*r01);\nIkReal x166=((1.0)*sj1);\nIkReal x167=((1.0)*sj0);\nIkReal x168=(r11*sj0);\nIkReal x169=(cj1*sj2);\nIkReal x170=(cj0*r02);\nIkReal x171=x90;\nIkReal x172=(((cj2*sj1))+x169);\nIkReal x173=(cj0*x171);\nIkReal x174=(sj0*x171);\nIkReal x175=(sj0*x172);\nIkReal x176=x95;\nnew_r00=(((r20*x176))+((x164*x171))+((r10*x174)));\nnew_r01=(((x168*x171))+((r21*x176))+((x165*x171)));\nnew_r02=(((r22*x176))+((x170*x171))+((r12*x174)));\nnew_r10=((((-1.0)*r00*x167))+((cj0*r10)));\nnew_r11=((((-1.0)*r01*x167))+((cj0*r11)));\nnew_r12=((((-1.0)*r02*x167))+((cj0*r12)));\nnew_r20=(((r20*x171))+((x164*x172))+((r10*x175)));\nnew_r21=(((x168*x172))+((r21*x171))+((x165*x172)));\nnew_r22=(((r22*x171))+((x170*x172))+((r12*x175)));\nj5eval[0]=sj3;\nj5eval[1]=sj4;\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j5eval[3];\nIkReal x177=(cj0*r00);\nIkReal x178=(cj0*r01);\nIkReal x179=((1.0)*sj1);\nIkReal x180=((1.0)*sj0);\nIkReal x181=(r11*sj0);\nIkReal x182=(cj1*sj2);\nIkReal x183=(cj0*r02);\nIkReal x184=x90;\nIkReal x185=(((cj2*sj1))+x182);\nIkReal x186=(cj0*x184);\nIkReal x187=(sj0*x184);\nIkReal x188=(sj0*x185);\nIkReal x189=x95;\nnew_r00=(((x177*x184))+((r20*x189))+((r10*x187)));\nnew_r01=(((x178*x184))+((r21*x189))+((x181*x184)));\nnew_r02=(((r12*x187))+((x183*x184))+((r22*x189)));\nnew_r10=((((-1.0)*r00*x180))+((cj0*r10)));\nnew_r11=((((-1.0)*r01*x180))+((cj0*r11)));\nnew_r12=((((-1.0)*r02*x180))+((cj0*r12)));\nnew_r20=(((x177*x185))+((r20*x184))+((r10*x188)));\nnew_r21=(((x178*x185))+((r21*x184))+((x181*x185)));\nnew_r22=(((r12*x188))+((x183*x185))+((r22*x184)));\nj5eval[0]=cj3;\nj5eval[1]=cj4;\nj5eval[2]=sj4;\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[12];\nbool bgotonextstatement = true;\ndo\n{\nIkReal x190=(new_r22+(((-1.0)*cj4)));\nIkReal x191=((((-1.0)*sj4))+new_r12);\nIkReal x192=((1.0)*cj4);\nIkReal x193=((1.0)*sj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));\nevalcond[1]=x190;\nevalcond[2]=x190;\nevalcond[3]=new_r02;\nevalcond[4]=x191;\nevalcond[5]=x191;\nevalcond[6]=(((cj4*new_r12))+(((-1.0)*new_r22*x193)));\nevalcond[7]=((((-1.0)*new_r20*x192))+(((-1.0)*new_r10*x193)));\nevalcond[8]=((((-1.0)*new_r21*x192))+(((-1.0)*new_r11*x193)));\nevalcond[9]=((1.0)+(((-1.0)*new_r22*x192))+(((-1.0)*new_r12*x193)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x194 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);\nif(!x194.valid){\ncontinue;\n}\nCheckValue<IkReal> x195=IKPowWithIntegerCheck(IKsign(new_r12),-1);\nif(!x195.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(x194.value)+(((1.5707963267949)*(x195.value))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x196=IKsin(j5);\nIkReal x197=IKcos(j5);\nIkReal x198=((1.0)*new_r12);\nIkReal x199=((1.0)*x197);\nIkReal x200=((1.0)*x196);\nevalcond[0]=(((new_r12*x197))+new_r20);\nevalcond[1]=(((new_r22*x196))+new_r11);\nevalcond[2]=((((-1.0)*x196*x198))+new_r21);\nevalcond[3]=((((-1.0)*new_r22*x199))+new_r10);\nevalcond[4]=((((-1.0)*x200))+(((-1.0)*new_r00)));\nevalcond[5]=((((-1.0)*x199))+(((-1.0)*new_r01)));\nevalcond[6]=((((-1.0)*new_r21*x198))+x196+((new_r11*new_r22)));\nevalcond[7]=((((-1.0)*x199))+(((-1.0)*new_r20*x198))+((new_r10*new_r22)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x201=(new_r22+(((-1.0)*cj4)));\nIkReal x202=((1.0)*cj4);\nIkReal x203=((1.0)*sj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));\nevalcond[1]=x201;\nevalcond[2]=x201;\nevalcond[3]=new_r02;\nevalcond[4]=(sj4+new_r12);\nevalcond[5]=((((-1.0)*x203))+(((-1.0)*new_r12)));\nevalcond[6]=((((-1.0)*new_r22*x203))+(((-1.0)*new_r12*x202)));\nevalcond[7]=(((new_r10*sj4))+(((-1.0)*new_r20*x202)));\nevalcond[8]=((((-1.0)*new_r21*x202))+((new_r11*sj4)));\nevalcond[9]=((1.0)+(((-1.0)*new_r22*x202))+((new_r12*sj4)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(new_r00, new_r01);\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x204=IKsin(j5);\nIkReal x205=IKcos(j5);\nIkReal x206=((1.0)*new_r11);\nIkReal x207=((1.0)*new_r10);\nIkReal x208=((1.0)*x205);\nevalcond[0]=(((new_r12*x204))+new_r21);\nevalcond[1]=(new_r00+(((-1.0)*x204)));\nevalcond[2]=((((-1.0)*x208))+new_r01);\nevalcond[3]=((((-1.0)*new_r12*x208))+new_r20);\nevalcond[4]=((((-1.0)*x206))+((new_r22*x204)));\nevalcond[5]=((((-1.0)*new_r22*x208))+(((-1.0)*x207)));\nevalcond[6]=((((-1.0)*new_r22*x206))+((new_r12*new_r21))+x204);\nevalcond[7]=((((-1.0)*new_r22*x207))+(((-1.0)*x208))+((new_r12*new_r20)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x209=(new_r12*sj3);\nIkReal x210=(new_r11*sj3);\nIkReal x211=((1.0)*sj3);\nIkReal x212=((1.0)*cj3);\nIkReal x213=((((-1.0)*new_r02*x211))+((cj3*new_r12)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));\nevalcond[1]=new_r22;\nevalcond[2]=(new_r02+(((-1.0)*x212)));\nevalcond[3]=(new_r12+(((-1.0)*x211)));\nevalcond[4]=x213;\nevalcond[5]=x213;\nevalcond[6]=((-1.0)+x209+((cj3*new_r02)));\nevalcond[7]=(x210+((cj3*new_r01)));\nevalcond[8]=(((new_r10*sj3))+((cj3*new_r00)));\nevalcond[9]=((((-1.0)*new_r10*x211))+(((-1.0)*new_r00*x212)));\nevalcond[10]=((((-1.0)*x210))+(((-1.0)*new_r01*x212)));\nevalcond[11]=((1.0)+(((-1.0)*new_r02*x212))+(((-1.0)*x209)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(new_r21, ((-1.0)*new_r20));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x214=IKcos(j5);\nIkReal x215=IKsin(j5);\nIkReal x216=((1.0)*new_r12);\nIkReal x217=((1.0)*x215);\nIkReal x218=((1.0)*x214);\nevalcond[0]=(x214+new_r20);\nevalcond[1]=(new_r21+(((-1.0)*x217)));\nevalcond[2]=(new_r01+((new_r12*x214)));\nevalcond[3]=(new_r00+((new_r12*x215)));\nevalcond[4]=((((-1.0)*new_r02*x218))+new_r11);\nevalcond[5]=((((-1.0)*new_r02*x217))+new_r10);\nevalcond[6]=(((new_r02*new_r10))+(((-1.0)*x217))+(((-1.0)*new_r00*x216)));\nevalcond[7]=((((-1.0)*new_r01*x216))+((new_r02*new_r11))+(((-1.0)*x218)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x219=((((-1.0)*new_r02*sj3))+((cj3*new_r12)));\nIkReal x220=(((new_r10*sj3))+((cj3*new_r00)));\nIkReal x221=(((new_r11*sj3))+((cj3*new_r01)));\nIkReal x222=((1.0)+((new_r12*sj3))+((cj3*new_r02)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));\nevalcond[1]=new_r22;\nevalcond[2]=(cj3+new_r02);\nevalcond[3]=(sj3+new_r12);\nevalcond[4]=x219;\nevalcond[5]=x219;\nevalcond[6]=x222;\nevalcond[7]=x221;\nevalcond[8]=x220;\nevalcond[9]=x220;\nevalcond[10]=x221;\nevalcond[11]=x222;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((-1.0)*new_r21), new_r20);\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x223=IKcos(j5);\nIkReal x224=IKsin(j5);\nIkReal x225=((1.0)*new_r02);\nIkReal x226=((1.0)*x223);\nIkReal x227=((1.0)*x224);\nevalcond[0]=(x224+new_r21);\nevalcond[1]=(new_r20+(((-1.0)*x226)));\nevalcond[2]=(((new_r02*x223))+new_r11);\nevalcond[3]=(((new_r02*x224))+new_r10);\nevalcond[4]=(new_r01+(((-1.0)*new_r12*x226)));\nevalcond[5]=(new_r00+(((-1.0)*new_r12*x227)));\nevalcond[6]=((((-1.0)*new_r10*x225))+((new_r00*new_r12))+(((-1.0)*x227)));\nevalcond[7]=((((-1.0)*new_r11*x225))+((new_r01*new_r12))+(((-1.0)*x226)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x228=((((-1.0)*new_r02*sj3))+((cj3*new_r12)));\nIkReal x229=(((new_r12*sj3))+((cj3*new_r02)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));\nevalcond[1]=((-1.0)+new_r22);\nevalcond[2]=new_r20;\nevalcond[3]=new_r02;\nevalcond[4]=new_r12;\nevalcond[5]=new_r21;\nevalcond[6]=x228;\nevalcond[7]=x228;\nevalcond[8]=x229;\nevalcond[9]=x229;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x230=((1.0)*new_r01);\nif( IKabs(((((-1.0)*cj3*x230))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj3*new_r00))+(((-1.0)*sj3*x230)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x230))+(((-1.0)*new_r00*sj3))))+IKsqr((((cj3*new_r00))+(((-1.0)*sj3*x230))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((((-1.0)*cj3*x230))+(((-1.0)*new_r00*sj3))), (((cj3*new_r00))+(((-1.0)*sj3*x230))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x231=IKsin(j5);\nIkReal x232=IKcos(j5);\nIkReal x233=((1.0)*sj3);\nIkReal x234=((1.0)*x232);\nIkReal x235=(sj3*x231);\nIkReal x236=((1.0)*x231);\nIkReal x237=(cj3*x234);\nevalcond[0]=(((new_r11*sj3))+x231+((cj3*new_r01)));\nevalcond[1]=(((cj3*x231))+new_r01+((sj3*x232)));\nevalcond[2]=(((new_r10*sj3))+(((-1.0)*x234))+((cj3*new_r00)));\nevalcond[3]=((((-1.0)*x236))+((cj3*new_r10))+(((-1.0)*new_r00*x233)));\nevalcond[4]=((((-1.0)*x234))+((cj3*new_r11))+(((-1.0)*new_r01*x233)));\nevalcond[5]=((((-1.0)*x237))+x235+new_r00);\nevalcond[6]=((((-1.0)*x237))+x235+new_r11);\nevalcond[7]=((((-1.0)*cj3*x236))+new_r10+(((-1.0)*x232*x233)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x238=(new_r12*sj3);\nIkReal x239=((1.0)*new_r02);\nIkReal x240=(((cj3*new_r12))+(((-1.0)*sj3*x239)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));\nevalcond[1]=((1.0)+new_r22);\nevalcond[2]=new_r20;\nevalcond[3]=new_r02;\nevalcond[4]=new_r12;\nevalcond[5]=new_r21;\nevalcond[6]=x240;\nevalcond[7]=x240;\nevalcond[8]=(x238+((cj3*new_r02)));\nevalcond[9]=((((-1.0)*cj3*x239))+(((-1.0)*x238)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x241=((1.0)*sj3);\nif( IKabs(((((-1.0)*new_r00*x241))+((cj3*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x241))+(((-1.0)*cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x241))+((cj3*new_r01))))+IKsqr(((((-1.0)*new_r01*x241))+(((-1.0)*cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((((-1.0)*new_r00*x241))+((cj3*new_r01))), ((((-1.0)*new_r01*x241))+(((-1.0)*cj3*new_r00))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x242=IKsin(j5);\nIkReal x243=IKcos(j5);\nIkReal x244=((1.0)*sj3);\nIkReal x245=((1.0)*x242);\nIkReal x246=(sj3*x243);\nIkReal x247=((1.0)*x243);\nIkReal x248=(cj3*x245);\nevalcond[0]=(((new_r10*sj3))+x243+((cj3*new_r00)));\nevalcond[1]=(((new_r11*sj3))+((cj3*new_r01))+(((-1.0)*x245)));\nevalcond[2]=(((sj3*x242))+new_r00+((cj3*x243)));\nevalcond[3]=((((-1.0)*new_r00*x244))+((cj3*new_r10))+(((-1.0)*x245)));\nevalcond[4]=((((-1.0)*new_r01*x244))+((cj3*new_r11))+(((-1.0)*x247)));\nevalcond[5]=(x246+(((-1.0)*x248))+new_r01);\nevalcond[6]=(x246+(((-1.0)*x248))+new_r10);\nevalcond[7]=((((-1.0)*x242*x244))+(((-1.0)*cj3*x247))+new_r11);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x249=(new_r22+(((-1.0)*cj4)));\nIkReal x250=((((-1.0)*sj4))+new_r02);\nIkReal x251=((1.0)*cj4);\nIkReal x252=((1.0)*sj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));\nevalcond[1]=x249;\nevalcond[2]=x249;\nevalcond[3]=x250;\nevalcond[4]=new_r12;\nevalcond[5]=x250;\nevalcond[6]=(((cj4*new_r02))+(((-1.0)*new_r22*x252)));\nevalcond[7]=((((-1.0)*new_r20*x251))+(((-1.0)*new_r00*x252)));\nevalcond[8]=((((-1.0)*new_r21*x251))+(((-1.0)*new_r01*x252)));\nevalcond[9]=((1.0)+(((-1.0)*new_r22*x251))+(((-1.0)*new_r02*x252)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(new_r10, new_r11);\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x253=IKcos(j5);\nIkReal x254=IKsin(j5);\nIkReal x255=((1.0)*new_r02);\nIkReal x256=((1.0)*x253);\nevalcond[0]=(((new_r02*x253))+new_r20);\nevalcond[1]=(new_r10+(((-1.0)*x254)));\nevalcond[2]=(new_r11+(((-1.0)*x256)));\nevalcond[3]=(((new_r22*x254))+new_r01);\nevalcond[4]=((((-1.0)*x254*x255))+new_r21);\nevalcond[5]=(new_r00+(((-1.0)*new_r22*x256)));\nevalcond[6]=((((-1.0)*new_r21*x255))+((new_r01*new_r22))+x254);\nevalcond[7]=(((new_r00*new_r22))+(((-1.0)*new_r20*x255))+(((-1.0)*x256)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x257=(new_r22+(((-1.0)*cj4)));\nIkReal x258=((1.0)*cj4);\nIkReal x259=((1.0)*sj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));\nevalcond[1]=x257;\nevalcond[2]=x257;\nevalcond[3]=(sj4+new_r02);\nevalcond[4]=new_r12;\nevalcond[5]=((((-1.0)*new_r02))+(((-1.0)*x259)));\nevalcond[6]=((((-1.0)*new_r22*x259))+(((-1.0)*new_r02*x258)));\nevalcond[7]=(((new_r00*sj4))+(((-1.0)*new_r20*x258)));\nevalcond[8]=((((-1.0)*new_r21*x258))+((new_r01*sj4)));\nevalcond[9]=((1.0)+((new_r02*sj4))+(((-1.0)*new_r22*x258)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x260 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);\nif(!x260.valid){\ncontinue;\n}\nCheckValue<IkReal> x261=IKPowWithIntegerCheck(IKsign(new_r02),-1);\nif(!x261.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(x260.value)+(((1.5707963267949)*(x261.value))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x262=IKsin(j5);\nIkReal x263=IKcos(j5);\nIkReal x264=((1.0)*new_r00);\nIkReal x265=((1.0)*new_r01);\nIkReal x266=((1.0)*x263);\nevalcond[0]=(new_r21+((new_r02*x262)));\nevalcond[1]=(new_r20+(((-1.0)*new_r02*x266)));\nevalcond[2]=((((-1.0)*x262))+(((-1.0)*new_r10)));\nevalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x266)));\nevalcond[4]=(((new_r22*x262))+(((-1.0)*x265)));\nevalcond[5]=((((-1.0)*new_r22*x266))+(((-1.0)*x264)));\nevalcond[6]=((((-1.0)*new_r22*x265))+x262+((new_r02*new_r21)));\nevalcond[7]=((((-1.0)*new_r22*x264))+((new_r02*new_r20))+(((-1.0)*x266)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j5]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x268=IKPowWithIntegerCheck(sj4,-1);\nif(!x268.valid){\ncontinue;\n}\nIkReal x267=x268.value;\nCheckValue<IkReal> x269=IKPowWithIntegerCheck(cj3,-1);\nif(!x269.valid){\ncontinue;\n}\nCheckValue<IkReal> x270=IKPowWithIntegerCheck(cj4,-1);\nif(!x270.valid){\ncontinue;\n}\nif( IKabs((x267*(x269.value)*(x270.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x267)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x267*(x269.value)*(x270.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4))))))+IKsqr(((-1.0)*new_r20*x267))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2((x267*(x269.value)*(x270.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4))))), ((-1.0)*new_r20*x267));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[12];\nIkReal x271=IKsin(j5);\nIkReal x272=IKcos(j5);\nIkReal x273=(cj3*new_r00);\nIkReal x274=(cj3*cj4);\nIkReal x275=(cj4*sj3);\nIkReal x276=((1.0)*sj3);\nIkReal x277=((1.0)*sj4);\nIkReal x278=((1.0)*x272);\nIkReal x279=(sj3*x271);\nIkReal x280=((1.0)*x271);\nevalcond[0]=(new_r20+((sj4*x272)));\nevalcond[1]=((((-1.0)*x271*x277))+new_r21);\nevalcond[2]=(((cj4*x271))+((new_r11*sj3))+((cj3*new_r01)));\nevalcond[3]=((((-1.0)*new_r00*x276))+((cj3*new_r10))+(((-1.0)*x280)));\nevalcond[4]=((((-1.0)*new_r01*x276))+((cj3*new_r11))+(((-1.0)*x278)));\nevalcond[5]=(((x271*x274))+((sj3*x272))+new_r01);\nevalcond[6]=((((-1.0)*cj4*x278))+((new_r10*sj3))+x273);\nevalcond[7]=((((-1.0)*x274*x278))+x279+new_r00);\nevalcond[8]=(((x271*x275))+(((-1.0)*cj3*x278))+new_r11);\nevalcond[9]=((((-1.0)*cj3*x280))+(((-1.0)*x275*x278))+new_r10);\nevalcond[10]=((((-1.0)*new_r21*x277))+x271+((new_r01*x274))+((new_r11*x275)));\nevalcond[11]=(((cj4*x273))+(((-1.0)*new_r20*x277))+(((-1.0)*x278))+((new_r10*x275)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x282=IKPowWithIntegerCheck(sj4,-1);\nif(!x282.valid){\ncontinue;\n}\nIkReal x281=x282.value;\nCheckValue<IkReal> x283=IKPowWithIntegerCheck(sj3,-1);\nif(!x283.valid){\ncontinue;\n}\nif( IKabs((x281*(x283.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x281)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x281*(x283.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))))+IKsqr(((-1.0)*new_r20*x281))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2((x281*(x283.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))), ((-1.0)*new_r20*x281));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[12];\nIkReal x284=IKsin(j5);\nIkReal x285=IKcos(j5);\nIkReal x286=(cj3*new_r00);\nIkReal x287=(cj3*cj4);\nIkReal x288=(cj4*sj3);\nIkReal x289=((1.0)*sj3);\nIkReal x290=((1.0)*sj4);\nIkReal x291=((1.0)*x285);\nIkReal x292=(sj3*x284);\nIkReal x293=((1.0)*x284);\nevalcond[0]=(new_r20+((sj4*x285)));\nevalcond[1]=((((-1.0)*x284*x290))+new_r21);\nevalcond[2]=(((new_r11*sj3))+((cj3*new_r01))+((cj4*x284)));\nevalcond[3]=((((-1.0)*x293))+(((-1.0)*new_r00*x289))+((cj3*new_r10)));\nevalcond[4]=((((-1.0)*x291))+(((-1.0)*new_r01*x289))+((cj3*new_r11)));\nevalcond[5]=(((x284*x287))+((sj3*x285))+new_r01);\nevalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x291))+x286);\nevalcond[7]=(x292+(((-1.0)*x287*x291))+new_r00);\nevalcond[8]=(((x284*x288))+(((-1.0)*cj3*x291))+new_r11);\nevalcond[9]=((((-1.0)*cj3*x293))+(((-1.0)*x288*x291))+new_r10);\nevalcond[10]=((((-1.0)*new_r21*x290))+x284+((new_r11*x288))+((new_r01*x287)));\nevalcond[11]=((((-1.0)*new_r20*x290))+(((-1.0)*x291))+((cj4*x286))+((new_r10*x288)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x294=IKPowWithIntegerCheck(IKsign(sj4),-1);\nif(!x294.valid){\ncontinue;\n}\nCheckValue<IkReal> x295 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);\nif(!x295.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x294.value)))+(x295.value));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[12];\nIkReal x296=IKsin(j5);\nIkReal x297=IKcos(j5);\nIkReal x298=(cj3*new_r00);\nIkReal x299=(cj3*cj4);\nIkReal x300=(cj4*sj3);\nIkReal x301=((1.0)*sj3);\nIkReal x302=((1.0)*sj4);\nIkReal x303=((1.0)*x297);\nIkReal x304=(sj3*x296);\nIkReal x305=((1.0)*x296);\nevalcond[0]=(((sj4*x297))+new_r20);\nevalcond[1]=((((-1.0)*x296*x302))+new_r21);\nevalcond[2]=(((new_r11*sj3))+((cj4*x296))+((cj3*new_r01)));\nevalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x301))+(((-1.0)*x305)));\nevalcond[4]=((((-1.0)*new_r01*x301))+((cj3*new_r11))+(((-1.0)*x303)));\nevalcond[5]=(((x296*x299))+new_r01+((sj3*x297)));\nevalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x303))+x298);\nevalcond[7]=(x304+(((-1.0)*x299*x303))+new_r00);\nevalcond[8]=((((-1.0)*cj3*x303))+((x296*x300))+new_r11);\nevalcond[9]=((((-1.0)*cj3*x305))+new_r10+(((-1.0)*x300*x303)));\nevalcond[10]=(((new_r11*x300))+(((-1.0)*new_r21*x302))+x296+((new_r01*x299)));\nevalcond[11]=(((new_r10*x300))+((cj4*x298))+(((-1.0)*new_r20*x302))+(((-1.0)*x303)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j3array[1], cj3array[1], sj3array[1];\nbool j3valid[1]={false};\n_nj3 = 1;\nCheckValue<IkReal> x306=IKPowWithIntegerCheck(IKsign(sj4),-1);\nif(!x306.valid){\ncontinue;\n}\nCheckValue<IkReal> x307 = IKatan2WithCheck(IkReal(new_r12),new_r02,IKFAST_ATAN2_MAGTHRESH);\nif(!x307.valid){\ncontinue;\n}\nj3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x306.value)))+(x307.value));\nsj3array[0]=IKsin(j3array[0]);\ncj3array[0]=IKcos(j3array[0]);\nif( j3array[0] > IKPI )\n{\n    j3array[0]-=IK2PI;\n}\nelse if( j3array[0] < -IKPI )\n{    j3array[0]+=IK2PI;\n}\nj3valid[0] = true;\nfor(int ij3 = 0; ij3 < 1; ++ij3)\n{\nif( !j3valid[ij3] )\n{\n    continue;\n}\n_ij3[0] = ij3; _ij3[1] = -1;\nfor(int iij3 = ij3+1; iij3 < 1; ++iij3)\n{\nif( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )\n{\n    j3valid[iij3]=false; _ij3[1] = iij3; break; \n}\n}\nj3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];\n{\nIkReal evalcond[8];\nIkReal x308=IKcos(j3);\nIkReal x309=IKsin(j3);\nIkReal x310=((1.0)*sj4);\nIkReal x311=((1.0)*cj4);\nIkReal x312=(new_r02*x308);\nIkReal x313=(new_r12*x309);\nevalcond[0]=((((-1.0)*x308*x310))+new_r02);\nevalcond[1]=(new_r12+(((-1.0)*x309*x310)));\nevalcond[2]=((((-1.0)*new_r02*x309))+((new_r12*x308)));\nevalcond[3]=(x313+x312+(((-1.0)*x310)));\nevalcond[4]=(((cj4*x312))+((cj4*x313))+(((-1.0)*new_r22*x310)));\nevalcond[5]=((((-1.0)*new_r10*x309*x310))+(((-1.0)*new_r00*x308*x310))+(((-1.0)*new_r20*x311)));\nevalcond[6]=((((-1.0)*new_r21*x311))+(((-1.0)*new_r11*x309*x310))+(((-1.0)*new_r01*x308*x310)));\nevalcond[7]=((1.0)+(((-1.0)*x310*x313))+(((-1.0)*x310*x312))+(((-1.0)*new_r22*x311)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nIkReal j5eval[2];\nIkReal x314=(cj0*r00);\nIkReal x315=(cj0*r01);\nIkReal x316=((1.0)*sj1);\nIkReal x317=((1.0)*sj0);\nIkReal x318=(r11*sj0);\nIkReal x319=(cj1*sj2);\nIkReal x320=(cj0*r02);\nIkReal x321=x90;\nIkReal x322=(((cj2*sj1))+x319);\nIkReal x323=(cj0*x321);\nIkReal x324=(sj0*x321);\nIkReal x325=(sj0*x322);\nIkReal x326=x95;\nnew_r00=(((r20*x326))+((r10*x324))+((x314*x321)));\nnew_r01=(((x318*x321))+((r21*x326))+((x315*x321)));\nnew_r02=(((r12*x324))+((x320*x321))+((r22*x326)));\nnew_r10=((((-1.0)*r00*x317))+((cj0*r10)));\nnew_r11=((((-1.0)*r01*x317))+((cj0*r11)));\nnew_r12=((((-1.0)*r02*x317))+((cj0*r12)));\nnew_r20=(((r20*x321))+((r10*x325))+((x314*x322)));\nnew_r21=(((x318*x322))+((r21*x321))+((x315*x322)));\nnew_r22=(((r12*x325))+((x320*x322))+((r22*x321)));\nj5eval[0]=sj4;\nj5eval[1]=IKsign(sj4);\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j5eval[2];\nIkReal x327=(cj0*r00);\nIkReal x328=(cj0*r01);\nIkReal x329=((1.0)*sj1);\nIkReal x330=((1.0)*sj0);\nIkReal x331=(r11*sj0);\nIkReal x332=(cj1*sj2);\nIkReal x333=(cj0*r02);\nIkReal x334=x90;\nIkReal x335=(((cj2*sj1))+x332);\nIkReal x336=(cj0*x334);\nIkReal x337=(sj0*x334);\nIkReal x338=(sj0*x335);\nIkReal x339=x95;\nnew_r00=(((r20*x339))+((x327*x334))+((r10*x337)));\nnew_r01=(((x331*x334))+((r21*x339))+((x328*x334)));\nnew_r02=(((r22*x339))+((r12*x337))+((x333*x334)));\nnew_r10=((((-1.0)*r00*x330))+((cj0*r10)));\nnew_r11=((((-1.0)*r01*x330))+((cj0*r11)));\nnew_r12=((((-1.0)*r02*x330))+((cj0*r12)));\nnew_r20=(((r20*x334))+((x327*x335))+((r10*x338)));\nnew_r21=(((x331*x335))+((r21*x334))+((x328*x335)));\nnew_r22=(((r22*x334))+((r12*x338))+((x333*x335)));\nj5eval[0]=sj3;\nj5eval[1]=sj4;\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j5eval[3];\nIkReal x340=(cj0*r00);\nIkReal x341=(cj0*r01);\nIkReal x342=((1.0)*sj1);\nIkReal x343=((1.0)*sj0);\nIkReal x344=(r11*sj0);\nIkReal x345=(cj1*sj2);\nIkReal x346=(cj0*r02);\nIkReal x347=x90;\nIkReal x348=(((cj2*sj1))+x345);\nIkReal x349=(cj0*x347);\nIkReal x350=(sj0*x347);\nIkReal x351=(sj0*x348);\nIkReal x352=x95;\nnew_r00=(((r10*x350))+((x340*x347))+((r20*x352)));\nnew_r01=(((r21*x352))+((x344*x347))+((x341*x347)));\nnew_r02=(((r12*x350))+((r22*x352))+((x346*x347)));\nnew_r10=((((-1.0)*r00*x343))+((cj0*r10)));\nnew_r11=((((-1.0)*r01*x343))+((cj0*r11)));\nnew_r12=((((-1.0)*r02*x343))+((cj0*r12)));\nnew_r20=(((r10*x351))+((r20*x347))+((x340*x348)));\nnew_r21=(((r21*x347))+((x344*x348))+((x341*x348)));\nnew_r22=(((r12*x351))+((r22*x347))+((x346*x348)));\nj5eval[0]=cj3;\nj5eval[1]=cj4;\nj5eval[2]=sj4;\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[12];\nbool bgotonextstatement = true;\ndo\n{\nIkReal x353=(new_r22+(((-1.0)*cj4)));\nIkReal x354=((((-1.0)*sj4))+new_r12);\nIkReal x355=((1.0)*cj4);\nIkReal x356=((1.0)*sj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));\nevalcond[1]=x353;\nevalcond[2]=x353;\nevalcond[3]=new_r02;\nevalcond[4]=x354;\nevalcond[5]=x354;\nevalcond[6]=((((-1.0)*new_r22*x356))+((cj4*new_r12)));\nevalcond[7]=((((-1.0)*new_r10*x356))+(((-1.0)*new_r20*x355)));\nevalcond[8]=((((-1.0)*new_r11*x356))+(((-1.0)*new_r21*x355)));\nevalcond[9]=((1.0)+(((-1.0)*new_r22*x355))+(((-1.0)*new_r12*x356)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x357 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);\nif(!x357.valid){\ncontinue;\n}\nCheckValue<IkReal> x358=IKPowWithIntegerCheck(IKsign(new_r12),-1);\nif(!x358.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(x357.value)+(((1.5707963267949)*(x358.value))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x359=IKsin(j5);\nIkReal x360=IKcos(j5);\nIkReal x361=((1.0)*new_r12);\nIkReal x362=((1.0)*x360);\nIkReal x363=((1.0)*x359);\nevalcond[0]=(new_r20+((new_r12*x360)));\nevalcond[1]=(((new_r22*x359))+new_r11);\nevalcond[2]=((((-1.0)*x359*x361))+new_r21);\nevalcond[3]=((((-1.0)*new_r22*x362))+new_r10);\nevalcond[4]=((((-1.0)*x363))+(((-1.0)*new_r00)));\nevalcond[5]=((((-1.0)*x362))+(((-1.0)*new_r01)));\nevalcond[6]=(x359+((new_r11*new_r22))+(((-1.0)*new_r21*x361)));\nevalcond[7]=((((-1.0)*new_r20*x361))+(((-1.0)*x362))+((new_r10*new_r22)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x364=(new_r22+(((-1.0)*cj4)));\nIkReal x365=((1.0)*cj4);\nIkReal x366=((1.0)*sj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));\nevalcond[1]=x364;\nevalcond[2]=x364;\nevalcond[3]=new_r02;\nevalcond[4]=(sj4+new_r12);\nevalcond[5]=((((-1.0)*x366))+(((-1.0)*new_r12)));\nevalcond[6]=((((-1.0)*new_r22*x366))+(((-1.0)*new_r12*x365)));\nevalcond[7]=((((-1.0)*new_r20*x365))+((new_r10*sj4)));\nevalcond[8]=(((new_r11*sj4))+(((-1.0)*new_r21*x365)));\nevalcond[9]=((1.0)+((new_r12*sj4))+(((-1.0)*new_r22*x365)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(new_r00, new_r01);\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x367=IKsin(j5);\nIkReal x368=IKcos(j5);\nIkReal x369=((1.0)*new_r11);\nIkReal x370=((1.0)*new_r10);\nIkReal x371=((1.0)*x368);\nevalcond[0]=(new_r21+((new_r12*x367)));\nevalcond[1]=((((-1.0)*x367))+new_r00);\nevalcond[2]=((((-1.0)*x371))+new_r01);\nevalcond[3]=((((-1.0)*new_r12*x371))+new_r20);\nevalcond[4]=(((new_r22*x367))+(((-1.0)*x369)));\nevalcond[5]=((((-1.0)*x370))+(((-1.0)*new_r22*x371)));\nevalcond[6]=((((-1.0)*new_r22*x369))+x367+((new_r12*new_r21)));\nevalcond[7]=((((-1.0)*x371))+(((-1.0)*new_r22*x370))+((new_r12*new_r20)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x372=(new_r12*sj3);\nIkReal x373=(new_r11*sj3);\nIkReal x374=((1.0)*sj3);\nIkReal x375=((1.0)*cj3);\nIkReal x376=(((cj3*new_r12))+(((-1.0)*new_r02*x374)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));\nevalcond[1]=new_r22;\nevalcond[2]=((((-1.0)*x375))+new_r02);\nevalcond[3]=((((-1.0)*x374))+new_r12);\nevalcond[4]=x376;\nevalcond[5]=x376;\nevalcond[6]=((-1.0)+x372+((cj3*new_r02)));\nevalcond[7]=(x373+((cj3*new_r01)));\nevalcond[8]=(((new_r10*sj3))+((cj3*new_r00)));\nevalcond[9]=((((-1.0)*new_r00*x375))+(((-1.0)*new_r10*x374)));\nevalcond[10]=((((-1.0)*x373))+(((-1.0)*new_r01*x375)));\nevalcond[11]=((1.0)+(((-1.0)*x372))+(((-1.0)*new_r02*x375)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(new_r21, ((-1.0)*new_r20));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x377=IKcos(j5);\nIkReal x378=IKsin(j5);\nIkReal x379=((1.0)*new_r12);\nIkReal x380=((1.0)*x378);\nIkReal x381=((1.0)*x377);\nevalcond[0]=(x377+new_r20);\nevalcond[1]=((((-1.0)*x380))+new_r21);\nevalcond[2]=(((new_r12*x377))+new_r01);\nevalcond[3]=(((new_r12*x378))+new_r00);\nevalcond[4]=((((-1.0)*new_r02*x381))+new_r11);\nevalcond[5]=((((-1.0)*new_r02*x380))+new_r10);\nevalcond[6]=((((-1.0)*new_r00*x379))+(((-1.0)*x380))+((new_r02*new_r10)));\nevalcond[7]=((((-1.0)*x381))+((new_r02*new_r11))+(((-1.0)*new_r01*x379)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x382=((((-1.0)*new_r02*sj3))+((cj3*new_r12)));\nIkReal x383=(((new_r10*sj3))+((cj3*new_r00)));\nIkReal x384=(((new_r11*sj3))+((cj3*new_r01)));\nIkReal x385=((1.0)+((new_r12*sj3))+((cj3*new_r02)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));\nevalcond[1]=new_r22;\nevalcond[2]=(cj3+new_r02);\nevalcond[3]=(sj3+new_r12);\nevalcond[4]=x382;\nevalcond[5]=x382;\nevalcond[6]=x385;\nevalcond[7]=x384;\nevalcond[8]=x383;\nevalcond[9]=x383;\nevalcond[10]=x384;\nevalcond[11]=x385;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((-1.0)*new_r21), new_r20);\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x386=IKcos(j5);\nIkReal x387=IKsin(j5);\nIkReal x388=((1.0)*new_r02);\nIkReal x389=((1.0)*x386);\nIkReal x390=((1.0)*x387);\nevalcond[0]=(x387+new_r21);\nevalcond[1]=((((-1.0)*x389))+new_r20);\nevalcond[2]=(((new_r02*x386))+new_r11);\nevalcond[3]=(((new_r02*x387))+new_r10);\nevalcond[4]=((((-1.0)*new_r12*x389))+new_r01);\nevalcond[5]=((((-1.0)*new_r12*x390))+new_r00);\nevalcond[6]=((((-1.0)*new_r10*x388))+(((-1.0)*x390))+((new_r00*new_r12)));\nevalcond[7]=((((-1.0)*new_r11*x388))+((new_r01*new_r12))+(((-1.0)*x389)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x391=((((-1.0)*new_r02*sj3))+((cj3*new_r12)));\nIkReal x392=(((new_r12*sj3))+((cj3*new_r02)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));\nevalcond[1]=((-1.0)+new_r22);\nevalcond[2]=new_r20;\nevalcond[3]=new_r02;\nevalcond[4]=new_r12;\nevalcond[5]=new_r21;\nevalcond[6]=x391;\nevalcond[7]=x391;\nevalcond[8]=x392;\nevalcond[9]=x392;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x393=((1.0)*new_r01);\nif( IKabs(((((-1.0)*cj3*x393))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x393))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x393))+(((-1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x393))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((((-1.0)*cj3*x393))+(((-1.0)*new_r00*sj3))), ((((-1.0)*sj3*x393))+((cj3*new_r00))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x394=IKsin(j5);\nIkReal x395=IKcos(j5);\nIkReal x396=((1.0)*sj3);\nIkReal x397=((1.0)*x395);\nIkReal x398=(sj3*x394);\nIkReal x399=((1.0)*x394);\nIkReal x400=(cj3*x397);\nevalcond[0]=(((new_r11*sj3))+x394+((cj3*new_r01)));\nevalcond[1]=(((sj3*x395))+((cj3*x394))+new_r01);\nevalcond[2]=((((-1.0)*x397))+((new_r10*sj3))+((cj3*new_r00)));\nevalcond[3]=((((-1.0)*x399))+((cj3*new_r10))+(((-1.0)*new_r00*x396)));\nevalcond[4]=((((-1.0)*new_r01*x396))+(((-1.0)*x397))+((cj3*new_r11)));\nevalcond[5]=(x398+new_r00+(((-1.0)*x400)));\nevalcond[6]=(x398+new_r11+(((-1.0)*x400)));\nevalcond[7]=((((-1.0)*x395*x396))+(((-1.0)*cj3*x399))+new_r10);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x401=(new_r12*sj3);\nIkReal x402=((1.0)*new_r02);\nIkReal x403=(((cj3*new_r12))+(((-1.0)*sj3*x402)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));\nevalcond[1]=((1.0)+new_r22);\nevalcond[2]=new_r20;\nevalcond[3]=new_r02;\nevalcond[4]=new_r12;\nevalcond[5]=new_r21;\nevalcond[6]=x403;\nevalcond[7]=x403;\nevalcond[8]=(x401+((cj3*new_r02)));\nevalcond[9]=((((-1.0)*cj3*x402))+(((-1.0)*x401)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x404=((1.0)*sj3);\nif( IKabs(((((-1.0)*new_r00*x404))+((cj3*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x404)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x404))+((cj3*new_r01))))+IKsqr(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x404))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((((-1.0)*new_r00*x404))+((cj3*new_r01))), ((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x404))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x405=IKsin(j5);\nIkReal x406=IKcos(j5);\nIkReal x407=((1.0)*sj3);\nIkReal x408=((1.0)*x405);\nIkReal x409=(sj3*x406);\nIkReal x410=((1.0)*x406);\nIkReal x411=(cj3*x408);\nevalcond[0]=(((new_r10*sj3))+x406+((cj3*new_r00)));\nevalcond[1]=(((new_r11*sj3))+((cj3*new_r01))+(((-1.0)*x408)));\nevalcond[2]=(((sj3*x405))+new_r00+((cj3*x406)));\nevalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x407))+(((-1.0)*x408)));\nevalcond[4]=(((cj3*new_r11))+(((-1.0)*x410))+(((-1.0)*new_r01*x407)));\nevalcond[5]=(x409+new_r01+(((-1.0)*x411)));\nevalcond[6]=(x409+new_r10+(((-1.0)*x411)));\nevalcond[7]=((((-1.0)*cj3*x410))+new_r11+(((-1.0)*x405*x407)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x412=(new_r22+(((-1.0)*cj4)));\nIkReal x413=((((-1.0)*sj4))+new_r02);\nIkReal x414=((1.0)*cj4);\nIkReal x415=((1.0)*sj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));\nevalcond[1]=x412;\nevalcond[2]=x412;\nevalcond[3]=x413;\nevalcond[4]=new_r12;\nevalcond[5]=x413;\nevalcond[6]=(((cj4*new_r02))+(((-1.0)*new_r22*x415)));\nevalcond[7]=((((-1.0)*new_r20*x414))+(((-1.0)*new_r00*x415)));\nevalcond[8]=((((-1.0)*new_r21*x414))+(((-1.0)*new_r01*x415)));\nevalcond[9]=((1.0)+(((-1.0)*new_r02*x415))+(((-1.0)*new_r22*x414)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nif( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(new_r10, new_r11);\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x416=IKcos(j5);\nIkReal x417=IKsin(j5);\nIkReal x418=((1.0)*new_r02);\nIkReal x419=((1.0)*x416);\nevalcond[0]=(new_r20+((new_r02*x416)));\nevalcond[1]=(new_r10+(((-1.0)*x417)));\nevalcond[2]=(new_r11+(((-1.0)*x419)));\nevalcond[3]=(((new_r22*x417))+new_r01);\nevalcond[4]=((((-1.0)*x417*x418))+new_r21);\nevalcond[5]=(new_r00+(((-1.0)*new_r22*x419)));\nevalcond[6]=(((new_r01*new_r22))+x417+(((-1.0)*new_r21*x418)));\nevalcond[7]=(((new_r00*new_r22))+(((-1.0)*new_r20*x418))+(((-1.0)*x419)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x420=(new_r22+(((-1.0)*cj4)));\nIkReal x421=((1.0)*cj4);\nIkReal x422=((1.0)*sj4);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));\nevalcond[1]=x420;\nevalcond[2]=x420;\nevalcond[3]=(sj4+new_r02);\nevalcond[4]=new_r12;\nevalcond[5]=((((-1.0)*x422))+(((-1.0)*new_r02)));\nevalcond[6]=((((-1.0)*new_r22*x422))+(((-1.0)*new_r02*x421)));\nevalcond[7]=(((new_r00*sj4))+(((-1.0)*new_r20*x421)));\nevalcond[8]=(((new_r01*sj4))+(((-1.0)*new_r21*x421)));\nevalcond[9]=((1.0)+((new_r02*sj4))+(((-1.0)*new_r22*x421)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x423 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);\nif(!x423.valid){\ncontinue;\n}\nCheckValue<IkReal> x424=IKPowWithIntegerCheck(IKsign(new_r02),-1);\nif(!x424.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(x423.value)+(((1.5707963267949)*(x424.value))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[8];\nIkReal x425=IKsin(j5);\nIkReal x426=IKcos(j5);\nIkReal x427=((1.0)*new_r00);\nIkReal x428=((1.0)*new_r01);\nIkReal x429=((1.0)*x426);\nevalcond[0]=(new_r21+((new_r02*x425)));\nevalcond[1]=((((-1.0)*new_r02*x429))+new_r20);\nevalcond[2]=((((-1.0)*x425))+(((-1.0)*new_r10)));\nevalcond[3]=((((-1.0)*x429))+(((-1.0)*new_r11)));\nevalcond[4]=(((new_r22*x425))+(((-1.0)*x428)));\nevalcond[5]=((((-1.0)*new_r22*x429))+(((-1.0)*x427)));\nevalcond[6]=((((-1.0)*new_r22*x428))+x425+((new_r02*new_r21)));\nevalcond[7]=((((-1.0)*new_r22*x427))+(((-1.0)*x429))+((new_r02*new_r20)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j5]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x431=IKPowWithIntegerCheck(sj4,-1);\nif(!x431.valid){\ncontinue;\n}\nIkReal x430=x431.value;\nCheckValue<IkReal> x432=IKPowWithIntegerCheck(cj3,-1);\nif(!x432.valid){\ncontinue;\n}\nCheckValue<IkReal> x433=IKPowWithIntegerCheck(cj4,-1);\nif(!x433.valid){\ncontinue;\n}\nif( IKabs((x430*(x432.value)*(x433.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x430)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x430*(x432.value)*(x433.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4))))))+IKsqr(((-1.0)*new_r20*x430))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2((x430*(x432.value)*(x433.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4))))), ((-1.0)*new_r20*x430));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[12];\nIkReal x434=IKsin(j5);\nIkReal x435=IKcos(j5);\nIkReal x436=(cj3*new_r00);\nIkReal x437=(cj3*cj4);\nIkReal x438=(cj4*sj3);\nIkReal x439=((1.0)*sj3);\nIkReal x440=((1.0)*sj4);\nIkReal x441=((1.0)*x435);\nIkReal x442=(sj3*x434);\nIkReal x443=((1.0)*x434);\nevalcond[0]=(((sj4*x435))+new_r20);\nevalcond[1]=((((-1.0)*x434*x440))+new_r21);\nevalcond[2]=(((new_r11*sj3))+((cj4*x434))+((cj3*new_r01)));\nevalcond[3]=((((-1.0)*new_r00*x439))+(((-1.0)*x443))+((cj3*new_r10)));\nevalcond[4]=((((-1.0)*x441))+(((-1.0)*new_r01*x439))+((cj3*new_r11)));\nevalcond[5]=(((x434*x437))+((sj3*x435))+new_r01);\nevalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x441))+x436);\nevalcond[7]=((((-1.0)*x437*x441))+x442+new_r00);\nevalcond[8]=((((-1.0)*cj3*x441))+((x434*x438))+new_r11);\nevalcond[9]=((((-1.0)*x438*x441))+(((-1.0)*cj3*x443))+new_r10);\nevalcond[10]=(((new_r01*x437))+((new_r11*x438))+x434+(((-1.0)*new_r21*x440)));\nevalcond[11]=((((-1.0)*x441))+((cj4*x436))+((new_r10*x438))+(((-1.0)*new_r20*x440)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x445=IKPowWithIntegerCheck(sj4,-1);\nif(!x445.valid){\ncontinue;\n}\nIkReal x444=x445.value;\nCheckValue<IkReal> x446=IKPowWithIntegerCheck(sj3,-1);\nif(!x446.valid){\ncontinue;\n}\nif( IKabs((x444*(x446.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x444)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x444*(x446.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))))+IKsqr(((-1.0)*new_r20*x444))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2((x444*(x446.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))), ((-1.0)*new_r20*x444));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[12];\nIkReal x447=IKsin(j5);\nIkReal x448=IKcos(j5);\nIkReal x449=(cj3*new_r00);\nIkReal x450=(cj3*cj4);\nIkReal x451=(cj4*sj3);\nIkReal x452=((1.0)*sj3);\nIkReal x453=((1.0)*sj4);\nIkReal x454=((1.0)*x448);\nIkReal x455=(sj3*x447);\nIkReal x456=((1.0)*x447);\nevalcond[0]=(((sj4*x448))+new_r20);\nevalcond[1]=((((-1.0)*x447*x453))+new_r21);\nevalcond[2]=(((cj4*x447))+((new_r11*sj3))+((cj3*new_r01)));\nevalcond[3]=((((-1.0)*new_r00*x452))+(((-1.0)*x456))+((cj3*new_r10)));\nevalcond[4]=((((-1.0)*new_r01*x452))+(((-1.0)*x454))+((cj3*new_r11)));\nevalcond[5]=(((x447*x450))+((sj3*x448))+new_r01);\nevalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x454))+x449);\nevalcond[7]=(x455+(((-1.0)*x450*x454))+new_r00);\nevalcond[8]=(((x447*x451))+new_r11+(((-1.0)*cj3*x454)));\nevalcond[9]=((((-1.0)*x451*x454))+new_r10+(((-1.0)*cj3*x456)));\nevalcond[10]=((((-1.0)*new_r21*x453))+((new_r11*x451))+((new_r01*x450))+x447);\nevalcond[11]=(((new_r10*x451))+(((-1.0)*new_r20*x453))+((cj4*x449))+(((-1.0)*x454)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nCheckValue<IkReal> x457=IKPowWithIntegerCheck(IKsign(sj4),-1);\nif(!x457.valid){\ncontinue;\n}\nCheckValue<IkReal> x458 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);\nif(!x458.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x457.value)))+(x458.value));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[12];\nIkReal x459=IKsin(j5);\nIkReal x460=IKcos(j5);\nIkReal x461=(cj3*new_r00);\nIkReal x462=(cj3*cj4);\nIkReal x463=(cj4*sj3);\nIkReal x464=((1.0)*sj3);\nIkReal x465=((1.0)*sj4);\nIkReal x466=((1.0)*x460);\nIkReal x467=(sj3*x459);\nIkReal x468=((1.0)*x459);\nevalcond[0]=(((sj4*x460))+new_r20);\nevalcond[1]=((((-1.0)*x459*x465))+new_r21);\nevalcond[2]=(((cj4*x459))+((new_r11*sj3))+((cj3*new_r01)));\nevalcond[3]=((((-1.0)*x468))+(((-1.0)*new_r00*x464))+((cj3*new_r10)));\nevalcond[4]=((((-1.0)*new_r01*x464))+(((-1.0)*x466))+((cj3*new_r11)));\nevalcond[5]=(((sj3*x460))+((x459*x462))+new_r01);\nevalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x466))+x461);\nevalcond[7]=((((-1.0)*x462*x466))+x467+new_r00);\nevalcond[8]=(((x459*x463))+new_r11+(((-1.0)*cj3*x466)));\nevalcond[9]=((((-1.0)*x463*x466))+new_r10+(((-1.0)*cj3*x468)));\nevalcond[10]=((((-1.0)*new_r21*x465))+((new_r11*x463))+((new_r01*x462))+x459);\nevalcond[11]=(((cj4*x461))+((new_r10*x463))+(((-1.0)*new_r20*x465))+(((-1.0)*x466)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j0;\nvinfos[0].indices[0] = _ij0[0];\nvinfos[0].indices[1] = _ij0[1];\nvinfos[0].maxsolutions = _nj0;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j1;\nvinfos[1].indices[0] = _ij1[0];\nvinfos[1].indices[1] = _ij1[1];\nvinfos[1].maxsolutions = _nj1;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j2;\nvinfos[2].indices[0] = _ij2[0];\nvinfos[2].indices[1] = _ij2[1];\nvinfos[2].maxsolutions = _nj2;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j3;\nvinfos[3].indices[0] = _ij3[0];\nvinfos[3].indices[1] = _ij3[1];\nvinfos[3].maxsolutions = _nj3;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j4;\nvinfos[4].indices[0] = _ij4[0];\nvinfos[4].indices[1] = _ij4[1];\nvinfos[4].maxsolutions = _nj4;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j5;\nvinfos[5].indices[0] = _ij5[0];\nvinfos[5].indices[1] = _ij5[1];\nvinfos[5].maxsolutions = _nj5;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n}\n}\n\n}\n\n}\n}\n}\n}\n}};\n\n\n/// solves the inverse kinematics equations.\n/// \\param pfree is an array specifying the free joints of the chain.\nIKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {\nIKSolver solver;\nreturn solver.ComputeIk(eetrans,eerot,pfree,solutions);\n}\n\nIKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {\nIKSolver solver;\nreturn solver.ComputeIk(eetrans,eerot,pfree,solutions);\n}\n\nIKFAST_API const char* GetKinematicsHash() { return \"a6c70e6dd694838553470dde754d5825\"; }\n\nIKFAST_API const char* GetIkFastVersion() { return \"0x10000048\"; }\n\n#ifdef IKFAST_NAMESPACE\n} // end namespace\n#endif\n\n#ifndef IKFAST_NO_MAIN\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef IKFAST_NAMESPACE\nusing namespace IKFAST_NAMESPACE;\n#endif\nint main(int argc, char** argv)\n{\n    if( argc != 12+GetNumFreeParameters()+1 ) {\n        printf(\"\\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\\n\\n\"\n               \"Returns the ik solutions given the transformation of the end effector specified by\\n\"\n               \"a 3x3 rotation R (rXX), and a 3x1 translation (tX).\\n\"\n               \"There are %d free parameters that have to be specified.\\n\\n\",GetNumFreeParameters());\n        return 1;\n    }\n\n    IkSolutionList<IkReal> solutions;\n    std::vector<IkReal> vfree(GetNumFreeParameters());\n    IkReal eerot[9],eetrans[3];\n    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);\n    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);\n    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);\n    for(std::size_t i = 0; i < vfree.size(); ++i)\n        vfree[i] = atof(argv[13+i]);\n    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);\n\n    if( !bSuccess ) {\n        fprintf(stderr,\"Failed to get ik solution\\n\");\n        return -1;\n    }\n\n    printf(\"Found %d ik solutions:\\n\", (int)solutions.GetNumSolutions());\n    std::vector<IkReal> solvalues(GetNumJoints());\n    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {\n        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);\n        printf(\"sol%d (free=%d): \", (int)i, (int)sol.GetFree().size());\n        std::vector<IkReal> vsolfree(sol.GetFree().size());\n        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);\n        for( std::size_t j = 0; j < solvalues.size(); ++j)\n            printf(\"%.15f, \", solvalues[j]);\n        printf(\"\\n\");\n    }\n    return 0;\n}\n\n#endif\n\nchar* ComputeFkWrapper(const IkReal* j) {\n    IkReal eetrans[3] = {0};\n    IkReal eerot[9] = {0};\n    char buffer [256] = {0};\n    ComputeFk(j, eetrans, eerot);\n    for(int i = 0; i < 3; ++i)\n        sprintf(buffer + strlen(buffer), \"%.15f,\", eetrans[i]);\n    for(int i = 0; i < 9 - 1; ++i)\n        sprintf(buffer + strlen(buffer), \"%.15f,\", eerot[i]);\n    sprintf(buffer + strlen(buffer), \"%.15f\", eerot[9 - 1]);\n    return buffer;\n}\n\nstd::vector<IkReal> TrueComputeIk(int argc, char** argv)\n{\n    std::vector<IkReal> solvalues(GetNumJoints());\n    if( argc != 12+GetNumFreeParameters()+1 ) {\n        printf(\"\\nKAKAKAK Usage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\\n\\n\"\n               \"Returns the ik solutions given the transformation of the end effector specified by\\n\"\n               \"a 3x3 rotation R (rXX), and a 3x1 translation (tX).\\n\"\n               \"There are %d free parameters that have to be specified.\\n\\n\",GetNumFreeParameters());\n    }\n\n    IkSolutionList<IkReal> solutions;\n    std::vector<IkReal> vfree(GetNumFreeParameters());\n    IkReal eerot[9],eetrans[3];\n    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);\n    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);\n    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);\n    for(std::size_t i = 0; i < vfree.size(); ++i)\n        vfree[i] = atof(argv[13+i]);\n    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);\n\n    if( !bSuccess ) {\n        fprintf(stderr,\"Failed to get ik solution\\n\");\n    }\n\n    printf(\"Found %d ik solutions:\\n\", (int)solutions.GetNumSolutions());\n    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {\n        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);\n        printf(\"sol%d (free=%d): \", (int)i, (int)sol.GetFree().size());\n        std::vector<IkReal> vsolfree(sol.GetFree().size());\n        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);\n        for( std::size_t j = 0; j < solvalues.size(); ++j)\n            printf(\"%.15f, \", solvalues[j]);\n        printf(\"\\n\");\n    }\n    return solvalues;\n}\n"]}