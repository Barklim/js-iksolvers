/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-05-22 07:20:15.541882
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKsin(j[6]);
x11=IKsin(j[5]);
x12=IKcos(j[5]);
x13=IKcos(j[6]);
x14=((0.06)*x5);
x15=((0.045)*x1);
x16=((1.0)*x5);
x17=((0.06)*x9);
x18=((0.3)*x1);
x19=((0.06)*x6);
x20=((1.0)*x11);
x21=((0.045)*x5);
x22=((1.0)*x1);
x23=((1.0)*x12);
x24=((0.06)*x8);
x25=((1.0)*x6);
x26=(x0*x4);
x27=(x0*x2);
x28=(x2*x7);
x29=(x3*x4);
x30=(x0*x7);
x31=(x2*x3);
x32=(x3*x7);
x33=((1.0)*x29);
x34=((0.045)*x29);
x35=((0.045)*x26);
x36=(x22*x6);
x37=(x32*x6);
x38=(x4*x7*x9);
x39=(x16*x30);
x40=(x25*x30);
x41=(x15*x27);
x42=(x16*x32);
x43=(x25*x32);
x44=(x15*x31);
x45=((((-1.0)*x33))+((x1*x27)));
x46=(x26+((x1*x31)));
x47=(x27+(((-1.0)*x22*x29)));
x48=((((-1.0)*x36))+((x28*x5)));
x49=(x33+(((-1.0)*x22*x27)));
x50=((((-1.0)*x31))+(((-1.0)*x22*x26)));
x51=((((-1.0)*x26))+(((-1.0)*x22*x31)));
x52=(((x1*x16))+((x25*x28)));
x53=((-1.0)*x52);
x54=(x35+x44);
x55=(x46*x6);
x56=(x11*x48);
x57=(x45*x6);
x58=(x5*x51);
x59=(x50*x9);
x60=(x53*x8);
x61=((((-1.0)*x39))+x57);
x62=((((-1.0)*x42))+x55);
x63=((((-1.0)*x40))+((x49*x5)));
x64=((((-1.0)*x43))+x58);
x65=(((x4*x7*x8))+((x52*x9)));
x66=(x38+x60);
x67=(x61*x8);
x68=(x11*x64);
x69=(((x47*x9))+((x62*x8)));
x70=(((x47*x8))+((x9*(((((-1.0)*x25*x46))+x42)))));
x71=(x59+x67);
x72=(x12*x69);
x73=(((x50*x8))+((x9*((x39+(((-1.0)*x57)))))));
eerot[0]=(((x10*x73))+((x13*((((x11*x63))+((x12*x71)))))));
eerot[1]=(((x10*(((((-1.0)*x20*x63))+(((-1.0)*x23*x71))))))+((x13*x73)));
eerot[2]=(((x12*(((((-1.0)*x16*x49))+x40))))+((x11*x71)));
eetrans[0]=((0.22)+(((-1.0)*x34))+((x12*((((x19*x30))+(((-1.0)*x14*x49))))))+((x11*((((x17*x50))+((x24*x61))))))+((x21*x30))+(((0.3)*x30*x6))+(((0.55)*x30))+x41+((x5*((((x18*x27))+(((-0.3)*x29))))))+((x6*(((((-1.0)*x41))+x34)))));
eerot[3]=(((x10*x70))+((x13*((x72+x68)))));
eerot[4]=(((x10*(((((-1.0)*x20*x64))+(((-1.0)*x23*x69))))))+((x13*x70)));
eerot[5]=(((x11*x69))+((x12*((x43+(((-1.0)*x16*x51)))))));
eetrans[1]=((0.14)+((x5*((((x18*x31))+(((0.3)*x26))))))+(((-1.0)*x54*x6))+((x21*x32))+(((0.55)*x32))+x54+((x12*((((x19*x32))+(((-1.0)*x14*x51))))))+((x11*((((x17*x47))+((x24*x62))))))+(((0.3)*x37)));
eerot[6]=(((x13*((((x12*x66))+x56))))+((x10*x65)));
eerot[7]=(((x13*x65))+((x10*(((((-1.0)*x20*x48))+(((-1.0)*x23*x66)))))));
eerot[8]=(((x11*x66))+((x12*(((((-1.0)*x16*x28))+x36)))));
IkReal x74=((0.045)*x28);
eetrans[2]=((0.346)+((x18*x6))+((x11*((((x24*x53))+((x17*x4*x7))))))+(((-0.3)*x28*x5))+(((-1.0)*x74))+((x12*((((x1*x19))+(((-1.0)*x14*x28))))))+((x6*x74))+(((0.55)*x1))+((x15*x5)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij2[2], _nj2;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]), htj2=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((-0.22)+(((-0.06)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((-0.14)+py+(((-0.06)*r12)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.346)+(((-0.06)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x75=((1.0)*px);
IkReal x76=((1.0)*pz);
IkReal x77=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x77))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x76)));
rxp0_2=((((-1.0)*r10*x75))+((py*r00)));
rxp1_0=((((-1.0)*r21*x77))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x76)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x75)));
rxp2_0=((((-1.0)*r22*x77))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x76)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x75)));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( (((1.18441410190393)+(((-2.9867963734811)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((1.18441410190393)+(((-2.9867963734811)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x78=IKasin(((1.18441410190393)+(((-2.9867963734811)*pp))));
j3array[0]=((-1.34027003705633)+(((-1.0)*x78)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((1.80132261653346)+x78);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal j0eval[2];
j0eval[0]=((px*px)+(py*py));
j0eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x79=cj2*cj2;
IkReal x80=sj3*sj3;
IkReal x81=cj3*cj3;
IkReal x82=((3.0)*cj2);
IkReal x83=((13.3333333333333)*cj3*sj3);
j1eval[0]=((IKabs(((((20.0)*cj2*sj3))+x82+(((-1.0)*cj3*x82)))))+(((66.6666666666667)*(IKabs(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))))));
j1eval[1]=((149.382716049383)+((x79*x81))+(((24.4444444444444)*sj3))+(((13.3333333333333)*sj3*x79))+(((-1.0)*x79*x83))+(((-2.0)*cj3*x79))+(((44.4444444444444)*x79*x80))+x79+x83+x80+(((44.4444444444444)*x81))+(((162.962962962963)*cj3)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x84=cj2*cj2;
IkReal x85=sj2*sj2;
IkReal x86=px*px;
IkReal x87=py*py;
IkReal x88=py*py*py*py;
IkReal x89=sj2*sj2*sj2*sj2;
IkReal x90=cj2*cj2*cj2*cj2;
IkReal x91=((1.0)*px*py);
IkReal x92=(x86*x87);
IkReal x93=((2.0)*x84*x85);
j0eval[0]=(((x89*x92))+((x92*x93))+((x90*x92))+((x88*x93))+((x88*x90))+((x88*x89)));
j0eval[1]=((IKabs((((x84*x87))+((x85*x87)))))+(IKabs(((((-1.0)*x84*x91))+(((-1.0)*x85*x91))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x94=cj2*cj2;
IkReal x95=py*py;
IkReal x96=sj2*sj2;
IkReal x97=((0.045)*py*sj2);
IkReal x98=((1.0)*px*py);
IkReal x99=(((x95*x96))+((x94*x95)));
IkReal x100=((((-1.0)*x94*x98))+(((-1.0)*x96*x98)));
CheckValue<IkReal> x103 = IKatan2WithCheck(IkReal(x99),x100,IKFAST_ATAN2_MAGTHRESH);
if(!x103.valid){
continue;
}
IkReal x101=((1.0)*(x103.value));
if((((x99*x99)+(x100*x100))) < -0.00001)
continue;
CheckValue<IkReal> x104=IKPowWithIntegerCheck(IKabs(IKsqrt(((x99*x99)+(x100*x100)))),-1);
if(!x104.valid){
continue;
}
if( (((x104.value)*(((((-0.3)*py*sj2*sj3))+((cj3*x97))+(((-1.0)*x97)))))) < -1-IKFAST_SINCOS_THRESH || (((x104.value)*(((((-0.3)*py*sj2*sj3))+((cj3*x97))+(((-1.0)*x97)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x102=IKasin(((x104.value)*(((((-0.3)*py*sj2*sj3))+((cj3*x97))+(((-1.0)*x97))))));
j0array[0]=((((-1.0)*x101))+(((-1.0)*x102)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x101))+x102);
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x105=sj2*sj2;
IkReal x106=cj2*cj2;
IkReal x107=px*px;
IkReal x108=IKsin(j0);
IkReal x109=IKcos(j0);
IkReal x110=(px*py);
IkReal x111=((0.045)*sj2);
IkReal x112=((1.0)*x107);
IkReal x113=((0.3)*sj2*sj3);
evalcond[0]=(((x108*(((((-1.0)*x106*x112))+(((-1.0)*x105*x112))))))+(((-1.0)*px*x113))+(((-1.0)*px*x111))+((x109*((((x106*x110))+((x105*x110))))))+((cj3*px*x111)));
evalcond[1]=((((-1.0)*cj3*x111))+x113+x111+((px*x108))+(((-1.0)*py*x109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
IkReal x114=(py*sj0);
IkReal x115=((0.3)*cj3);
IkReal x116=((0.045)*sj3);
IkReal x117=(cj2*pz);
IkReal x118=((6.66666666666667)*cj3);
IkReal x119=(cj0*px);
IkReal x120=((1.0)*sj3);
j1eval[0]=((((-1.0)*x119*x120))+((cj3*x117))+(((-1.0)*x118*x119))+(((-6.66666666666667)*sj3*x117))+(((-12.2222222222222)*x119))+(((-12.2222222222222)*x114))+(((-1.0)*x114*x118))+(((-1.0)*x114*x120))+(((-1.0)*x117)));
j1eval[1]=IKsign(((((-0.55)*x119))+(((-0.55)*x114))+(((-1.0)*x116*x119))+(((-1.0)*x115*x119))+(((-1.0)*x114*x116))+(((-1.0)*x114*x115))+(((-0.3)*sj3*x117))+(((0.045)*cj3*x117))+(((-0.045)*x117))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x121=cj0*cj0;
IkReal x122=py*py;
IkReal x123=(sj2*x121);
IkReal x124=(((x123*(px*px)))+((sj2*x122))+(((-1.0)*x122*x123))+((sj2*(pz*pz)))+(((2.0)*cj0*px*py*sj0*sj2)));
j1eval[0]=x124;
j1eval[1]=IKsign(x124);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x125=(pz*sj2);
IkReal x126=(py*sj0);
IkReal x127=(cj0*px);
IkReal x128=(cj2*sj2);
IkReal x129=((1.0)*cj3);
IkReal x130=((0.045)*x128);
IkReal x131=(sj3*x128);
IkReal x132=(x126*x131);
j1eval[0]=((((-12.2222222222222)*x125))+(((6.66666666666667)*x132))+(((-6.66666666666667)*cj3*x125))+(((-1.0)*x126*x128*x129))+(((6.66666666666667)*x127*x131))+(((-1.0)*x127*x128*x129))+((x126*x128))+(((-1.0)*sj3*x125))+((x127*x128)));
j1eval[1]=IKsign((((x127*x130))+(((-0.55)*x125))+(((-1.0)*cj3*x126*x130))+(((-0.3)*cj3*x125))+(((0.3)*x132))+(((-1.0)*cj3*x127*x130))+((x126*x130))+(((0.3)*x127*x131))+(((-0.045)*sj3*x125))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x133=(((px*sj0))+(((-1.0)*cj0*py)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x133;
evalcond[3]=x133;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x134=(cj0*px);
IkReal x135=((0.310561435803037)*sj3);
IkReal x136=(pp*pz);
IkReal x137=(py*sj0);
IkReal x138=((0.138057984353428)*pp);
IkReal x139=((12.2222222222222)*sj3);
IkReal x140=((5.4333061668025)*pp);
IkReal x141=(pz*sj3);
j1eval[0]=((((7.28153581454315)*pz))+(((-1.0)*x134*x139))+((x137*x140))+(((-1.0)*x137*x139))+(((-1.0)*x141))+(((36.2220411120167)*x136))+((x134*x140))+(((-3.92556370551481)*x134))+(((-3.92556370551481)*x137)));
j1eval[1]=IKsign(((((-1.0)*x135*x137))+(((-1.0)*x134*x135))+((x137*x138))+(((0.185020708697653)*pz))+((x134*x138))+(((-0.099746893695352)*x137))+(((-0.099746893695352)*x134))+(((-0.0254095720202485)*x141))+(((0.92038656235619)*x136))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x142=(cj0*px);
IkReal x143=(py*sj0);
IkReal x144=((0.3)*sj3);
IkReal x145=((0.045)*cj3);
IkReal x146=(pz*sj3);
IkReal x147=((6.66666666666667)*sj3);
IkReal x148=((1.0)*cj3);
IkReal x149=(cj3*pz);
j1eval[0]=(((x142*x147))+(((-1.0)*x143*x148))+(((-1.0)*x142*x148))+(((-6.66666666666667)*x149))+x142+x143+(((-1.0)*x146))+(((-12.2222222222222)*pz))+((x143*x147)));
j1eval[1]=IKsign(((((-0.55)*pz))+(((-0.3)*x149))+((x142*x144))+(((-1.0)*x143*x145))+(((-1.0)*x142*x145))+(((-0.045)*x146))+(((0.045)*x143))+(((0.045)*x142))+((x143*x144))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x150=(py*sj0);
IkReal x151=(cj0*px);
IkReal x152=(pp*pz);
IkReal x153=((0.92038656235619)*pp);
IkReal x154=(pz*sj3);
IkReal x155=((36.2220411120167)*pp);
IkReal x156=((0.0254095720202485)*sj3);
j1eval[0]=((((-1.0)*x151*x155))+(((-1.0)*x150*x155))+(((-3.92556370551481)*pz))+(((5.4333061668025)*x152))+((sj3*x150))+((sj3*x151))+(((-7.28153581454315)*x150))+(((-7.28153581454315)*x151))+(((-12.2222222222222)*x154)));
j1eval[1]=IKsign(((((-0.310561435803037)*x154))+(((-0.099746893695352)*pz))+(((-1.0)*x151*x153))+((x150*x156))+(((-1.0)*x150*x153))+((x151*x156))+(((0.138057984353428)*x152))+(((-0.185020708697653)*x151))+(((-0.185020708697653)*x150))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x157=x133;
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x157;
evalcond[3]=x157;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x158=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x158);
rxp0_1=(px*r20);
rxp1_0=(r21*x158);
rxp1_1=(px*r21);
rxp2_0=(r22*x158);
rxp2_1=(px*r22);
j1eval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0.7225;
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=-0.935;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp1_0=0;
rxp1_1=0;
rxp2_0=0;
rxp2_1=0;
px=0;
py=0;
rxp0_2=0;
rxp1_2=0;
rxp2_2=0;
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
evalcond[1]=((0.7225)+(((-1.0)*(py*py))));
evalcond[2]=-0.85;
evalcond[3]=((-1.0)*py);
evalcond[4]=0;
evalcond[5]=-0.935;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x594=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x594);
rxp0_1=0;
rxp1_0=(r21*x594);
rxp1_1=0;
rxp2_0=(r22*x594);
rxp2_1=0;
px=0;
j0=0;
sj0=0;
cj0=1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*(py*py))));
evalcond[2]=-0.85;
evalcond[3]=py;
evalcond[4]=0;
evalcond[5]=-0.935;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x595=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x595);
rxp0_1=0;
rxp1_0=(r21*x595);
rxp1_1=0;
rxp2_0=(r22*x595);
rxp2_1=0;
px=0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*(px*px))));
evalcond[2]=-0.85;
evalcond[3]=px;
evalcond[4]=0;
evalcond[5]=-0.935;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x596=((-1.0)*px);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
rxp0_2=(r10*x596);
rxp1_2=(r11*x596);
rxp2_2=(r12*x596);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*(px*px))));
evalcond[2]=-0.85;
evalcond[3]=((-1.0)*px);
evalcond[4]=0;
evalcond[5]=-0.935;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x597=((-1.0)*px);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
rxp0_2=(r10*x597);
rxp1_2=(r11*x597);
rxp2_2=(r12*x597);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x598=py*py;
IkReal x599=cj0*cj0;
IkReal x600=(cj0*px);
IkReal x601=(py*sj0);
IkReal x602=((4400.0)*x598);
CheckValue<IkReal> x603=IKPowWithIntegerCheck(((((306.0)*x601))+(((306.0)*x600))),-1);
if(!x603.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x600))+(((1.17647058823529)*x601)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x603.value)*(((3179.0)+(((-4400.0)*x599*(px*px)))+(((-8800.0)*x600*x601))+(((-1.0)*x602))+((x599*x602)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x600))+(((1.17647058823529)*x601))))+IKsqr(((x603.value)*(((3179.0)+(((-4400.0)*x599*(px*px)))+(((-8800.0)*x600*x601))+(((-1.0)*x602))+((x599*x602))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x600))+(((1.17647058823529)*x601))), ((x603.value)*(((3179.0)+(((-4400.0)*x599*(px*px)))+(((-8800.0)*x600*x601))+(((-1.0)*x602))+((x599*x602))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x604=IKsin(j1);
IkReal x605=IKcos(j1);
IkReal x606=(py*sj0);
IkReal x607=(cj0*px);
IkReal x608=((0.09)*x605);
IkReal x609=((1.0)*x605);
IkReal x610=((1.1)*x604);
evalcond[0]=((-0.85)*x605);
evalcond[1]=((-0.85)+((x604*x606))+((x604*x607)));
evalcond[2]=((((0.85)*x604))+(((-1.0)*x607))+(((-1.0)*x606)));
evalcond[3]=((((-1.0)*x606*x609))+(((-1.0)*x607*x609)));
evalcond[4]=((-0.935)+((x607*x608))+((x606*x608))+((x606*x610))+((x607*x610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x611=cj3*cj3;
IkReal x612=(cj3*sj3);
IkReal x613=(cj0*px);
IkReal x614=((0.92038656235619)*pp);
IkReal x615=((0.0254095720202485)*sj3);
IkReal x616=(py*sj0);
IkReal x617=(pp*sj3);
IkReal x618=((1.0)*pz);
IkReal x619=(cj3*pp);
CheckValue<IkReal> x620 = IKatan2WithCheck(IkReal(((-0.100617959042798)+(((-0.0414173953060285)*x617))+(((0.00762287160607455)*x612))+(pz*pz)+(((-0.00114343074091118)*x611))+(((-0.506212609295904)*pp))+(((0.00564933271974229)*sj3))+(((-0.276115968706857)*x619))+(((-0.0555062126092959)*cj3)))),((-0.0688360561435803)+(((0.00621260929590428)*x617))+(((-0.0299240681086056)*cj3))+(((-0.0931684307409112)*x612))+(((0.0759318913943856)*pp))+(((0.0139752646111367)*x611))+(((-0.175297399907961)*sj3))+(((-1.0)*x613*x618))+(((-1.0)*x616*x618))+(((0.0414173953060285)*x619))),IKFAST_ATAN2_MAGTHRESH);
if(!x620.valid){
continue;
}
CheckValue<IkReal> x621=IKPowWithIntegerCheck(IKsign(((((-1.0)*x614*x616))+(((-0.099746893695352)*pz))+(((-0.310561435803037)*pz*sj3))+(((-0.185020708697653)*x613))+(((-0.185020708697653)*x616))+((x613*x615))+((x615*x616))+(((-1.0)*x613*x614))+(((0.138057984353428)*pp*pz)))),-1);
if(!x621.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x620.value)+(((1.5707963267949)*(x621.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x622=IKsin(j1);
IkReal x623=IKcos(j1);
IkReal x624=((0.045)*sj3);
IkReal x625=((0.3)*cj3);
IkReal x626=((0.045)*cj3);
IkReal x627=(cj0*px);
IkReal x628=(py*sj0);
IkReal x629=((1.0)*x623);
IkReal x630=(sj3*x623);
IkReal x631=(pz*x622);
IkReal x632=(pz*x623);
IkReal x633=((0.09)*x623);
IkReal x634=((1.1)*x622);
evalcond[0]=((-0.55)+(((-1.0)*x624))+(((-1.0)*x625))+x632+((x622*x627))+((x622*x628)));
evalcond[1]=((0.045)+(((-1.0)*x628*x629))+(((-1.0)*x626))+(((-1.0)*x627*x629))+x631+(((0.3)*sj3)));
evalcond[2]=((((-0.185020708697653)*x623))+(((0.0254095720202485)*x630))+(((0.310561435803037)*sj3*x622))+(((0.099746893695352)*x622))+(((-0.138057984353428)*pp*x622))+(((-0.92038656235619)*pp*x623))+pz);
evalcond[3]=((((-1.0)*x623*x626))+(((0.3)*x630))+(((-1.0)*x628))+(((-1.0)*x627))+(((0.55)*x622))+(((0.045)*x623))+((x622*x624))+((x622*x625)));
evalcond[4]=((-0.2125)+((x628*x634))+((x628*x633))+(((1.1)*x632))+(((-0.09)*x631))+(((-1.0)*pp))+((x627*x634))+((x627*x633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x635=cj0*cj0;
IkReal x636=py*py;
IkReal x637=cj3*cj3;
IkReal x638=(py*sj0);
IkReal x639=((0.3)*sj3);
IkReal x640=((0.045)*cj3);
IkReal x641=(cj0*px);
IkReal x642=(cj3*sj3);
IkReal x643=((1.0)*pz);
CheckValue<IkReal> x644=IKPowWithIntegerCheck(IKsign(((((-0.55)*pz))+(((-0.3)*cj3*pz))+((x639*x641))+(((-1.0)*x640*x641))+(((-0.045)*pz*sj3))+((x638*x639))+(((0.045)*x641))+(((-1.0)*x638*x640))+(((0.045)*x638)))),-1);
if(!x644.valid){
continue;
}
CheckValue<IkReal> x645 = IKatan2WithCheck(IkReal(((0.03825)+(((0.087975)*x642))+(((-0.01125)*cj3))+(((-1.0)*x641*x643))+(((-0.027)*x637))+(((0.167025)*sj3))+(((-1.0)*x638*x643)))),((-0.304525)+(((2.0)*x638*x641))+(((-0.0495)*sj3))+(((-1.0)*x635*x636))+(((-0.027)*x642))+((x635*(px*px)))+(((-0.087975)*x637))+x636+(((-0.33)*cj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x645.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x644.value)))+(x645.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x646=IKsin(j1);
IkReal x647=IKcos(j1);
IkReal x648=((0.045)*sj3);
IkReal x649=((0.3)*cj3);
IkReal x650=((0.045)*cj3);
IkReal x651=(cj0*px);
IkReal x652=(py*sj0);
IkReal x653=((1.0)*x647);
IkReal x654=(sj3*x647);
IkReal x655=(pz*x646);
IkReal x656=(pz*x647);
IkReal x657=((0.09)*x647);
IkReal x658=((1.1)*x646);
evalcond[0]=((-0.55)+((x646*x652))+((x646*x651))+(((-1.0)*x648))+(((-1.0)*x649))+x656);
evalcond[1]=((0.045)+(((-1.0)*x651*x653))+(((-1.0)*x650))+x655+(((0.3)*sj3))+(((-1.0)*x652*x653)));
evalcond[2]=((((0.310561435803037)*sj3*x646))+(((0.0254095720202485)*x654))+(((-0.138057984353428)*pp*x646))+(((0.099746893695352)*x646))+pz+(((-0.92038656235619)*pp*x647))+(((-0.185020708697653)*x647)));
evalcond[3]=((((0.55)*x646))+(((-1.0)*x651))+(((-1.0)*x652))+(((-1.0)*x647*x650))+(((0.045)*x647))+(((0.3)*x654))+((x646*x648))+((x646*x649)));
evalcond[4]=((-0.2125)+(((-0.09)*x655))+((x652*x658))+((x652*x657))+((x651*x657))+((x651*x658))+(((-1.0)*pp))+(((1.1)*x656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x659=cj3*cj3;
IkReal x660=(cj0*px);
IkReal x661=((0.00621260929590428)*pp);
IkReal x662=(cj3*sj3);
IkReal x663=(py*sj0);
IkReal x664=((0.138057984353428)*pp);
IkReal x665=((0.0414173953060285)*pp);
IkReal x666=((0.310561435803037)*sj3);
CheckValue<IkReal> x667=IKPowWithIntegerCheck(IKsign(((((-0.0254095720202485)*pz*sj3))+(((-1.0)*x663*x666))+(((-1.0)*x660*x666))+((x663*x664))+(((-0.099746893695352)*x660))+(((-0.099746893695352)*x663))+(((0.185020708697653)*pz))+((x660*x664))+(((0.92038656235619)*pp*pz)))),-1);
if(!x667.valid){
continue;
}
CheckValue<IkReal> x668 = IKatan2WithCheck(IkReal(((-0.000703060285319834)+((cj3*x665))+(((-0.276115968706857)*pp*sj3))+(((-0.00762287160607455)*x659))+(((-1.0)*x665))+((pz*x663))+((pz*x660))+(((-0.00114343074091118)*x662))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3)))),((-0.097657040957202)+(((-1.0)*cj3*x661))+(((0.0931684307409112)*x659))+(pz*pz)+(((0.00448861021629084)*cj3))+(((0.0139752646111367)*x662))+x661+((sj3*x665))+(((-0.0438993327197423)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x668.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x667.value)))+(x668.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x669=IKsin(j1);
IkReal x670=IKcos(j1);
IkReal x671=((0.045)*sj3);
IkReal x672=((0.3)*cj3);
IkReal x673=((0.045)*cj3);
IkReal x674=(cj0*px);
IkReal x675=(py*sj0);
IkReal x676=((1.0)*x670);
IkReal x677=(sj3*x670);
IkReal x678=(pz*x669);
IkReal x679=(pz*x670);
IkReal x680=((0.09)*x670);
IkReal x681=((1.1)*x669);
evalcond[0]=((-0.55)+((x669*x675))+((x669*x674))+x679+(((-1.0)*x671))+(((-1.0)*x672)));
evalcond[1]=((0.045)+(((-1.0)*x675*x676))+x678+(((0.3)*sj3))+(((-1.0)*x674*x676))+(((-1.0)*x673)));
evalcond[2]=((((-0.138057984353428)*pp*x669))+(((-0.92038656235619)*pp*x670))+(((-0.185020708697653)*x670))+(((0.0254095720202485)*x677))+pz+(((0.099746893695352)*x669))+(((0.310561435803037)*sj3*x669)));
evalcond[3]=((((0.045)*x670))+(((0.55)*x669))+(((0.3)*x677))+((x669*x671))+((x669*x672))+(((-1.0)*x670*x673))+(((-1.0)*x674))+(((-1.0)*x675)));
evalcond[4]=((-0.2125)+((x674*x681))+((x674*x680))+(((1.1)*x679))+(((-1.0)*pp))+(((-0.09)*x678))+((x675*x681))+((x675*x680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x682=(px*sj0);
IkReal x683=(cj0*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=(x682+(((-1.0)*x683)));
evalcond[3]=(x683+(((-1.0)*x682)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x684=cj0*cj0;
IkReal x685=py*py;
IkReal x686=((((-1.0)*x684*x685))+((x684*(px*px)))+(pz*pz)+x685+(((2.0)*cj0*px*py*sj0)));
j1eval[0]=x686;
j1eval[1]=IKsign(x686);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x687=(py*sj0);
IkReal x688=((0.3)*sj3);
IkReal x689=(cj0*px);
IkReal x690=((6.66666666666667)*sj3);
IkReal x691=(pz*sj3);
IkReal x692=(cj3*pz);
IkReal x693=((0.045)*x689);
j1eval[0]=((((-1.0)*x687*x690))+(((-6.66666666666667)*x692))+(((-12.2222222222222)*pz))+(((-1.0)*x689*x690))+(((-1.0)*x687))+(((-1.0)*x689))+((cj3*x689))+((cj3*x687))+(((-1.0)*x691)));
j1eval[1]=IKsign(((((-0.55)*pz))+(((-1.0)*x687*x688))+(((-1.0)*x688*x689))+(((-0.045)*x687))+((cj3*x693))+(((-1.0)*x693))+(((-0.045)*x691))+(((0.045)*cj3*x687))+(((-0.3)*x692))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x694=(py*sj0);
IkReal x695=(cj0*px);
IkReal x696=(pp*pz);
IkReal x697=((0.92038656235619)*pp);
IkReal x698=(pz*sj3);
IkReal x699=((36.2220411120167)*pp);
IkReal x700=((0.0254095720202485)*sj3);
j1eval[0]=((((-5.4333061668025)*x696))+(((12.2222222222222)*x698))+(((-7.28153581454315)*x695))+(((-7.28153581454315)*x694))+(((3.92556370551481)*pz))+(((-1.0)*x695*x699))+(((-1.0)*x694*x699))+((sj3*x695))+((sj3*x694)));
j1eval[1]=IKsign(((((0.310561435803037)*x698))+((x694*x700))+((x695*x700))+(((0.099746893695352)*pz))+(((-1.0)*x695*x697))+(((-0.138057984353428)*x696))+(((-1.0)*x694*x697))+(((-0.185020708697653)*x694))+(((-0.185020708697653)*x695))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x701=(px*sj0);
IkReal x702=(cj0*py);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((((-1.0)*x702))+x701);
evalcond[3]=((((-1.0)*x701))+x702);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x703=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x703);
rxp0_1=(px*r20);
rxp1_0=(r21*x703);
rxp1_1=(px*r21);
rxp2_0=(r22*x703);
rxp2_1=(px*r22);
j1eval[0]=((((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0.7225;
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=-0.935;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp1_0=0;
rxp1_1=0;
rxp2_0=0;
rxp2_1=0;
px=0;
py=0;
rxp0_2=0;
rxp1_2=0;
rxp2_2=0;
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
evalcond[1]=((0.7225)+(((-1.0)*(py*py))));
evalcond[2]=-0.85;
evalcond[3]=((-1.0)*py);
evalcond[4]=0;
evalcond[5]=-0.935;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x704=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x704);
rxp0_1=0;
rxp1_0=(r21*x704);
rxp1_1=0;
rxp2_0=(r22*x704);
rxp2_1=0;
px=0;
j0=0;
sj0=0;
cj0=1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*(py*py))));
evalcond[2]=-0.85;
evalcond[3]=py;
evalcond[4]=0;
evalcond[5]=-0.935;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x705=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x705);
rxp0_1=0;
rxp1_0=(r21*x705);
rxp1_1=0;
rxp2_0=(r22*x705);
rxp2_1=0;
px=0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*(px*px))));
evalcond[2]=-0.85;
evalcond[3]=px;
evalcond[4]=0;
evalcond[5]=-0.935;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x706=((-1.0)*px);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
rxp0_2=(r10*x706);
rxp1_2=(r11*x706);
rxp2_2=(r12*x706);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*(px*px))));
evalcond[2]=-0.85;
evalcond[3]=((-1.0)*px);
evalcond[4]=0;
evalcond[5]=-0.935;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x707=((-1.0)*px);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
rxp0_2=(r10*x707);
rxp1_2=(r11*x707);
rxp2_2=(r12*x707);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x708=py*py;
IkReal x709=cj0*cj0;
IkReal x710=(cj0*px);
IkReal x711=(py*sj0);
IkReal x712=((4400.0)*x708);
CheckValue<IkReal> x713=IKPowWithIntegerCheck(((((-306.0)*x711))+(((-306.0)*x710))),-1);
if(!x713.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x710))+(((1.17647058823529)*x711)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x713.value)*(((3179.0)+(((-4400.0)*x709*(px*px)))+((x709*x712))+(((-1.0)*x712))+(((-8800.0)*x710*x711)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x710))+(((1.17647058823529)*x711))))+IKsqr(((x713.value)*(((3179.0)+(((-4400.0)*x709*(px*px)))+((x709*x712))+(((-1.0)*x712))+(((-8800.0)*x710*x711))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x710))+(((1.17647058823529)*x711))), ((x713.value)*(((3179.0)+(((-4400.0)*x709*(px*px)))+((x709*x712))+(((-1.0)*x712))+(((-8800.0)*x710*x711))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x714=IKcos(j1);
IkReal x715=IKsin(j1);
IkReal x716=(py*sj0);
IkReal x717=(cj0*px);
IkReal x718=((0.09)*x714);
IkReal x719=(x715*x716);
evalcond[0]=((-0.85)*x714);
evalcond[1]=(((x714*x717))+((x714*x716)));
evalcond[2]=((-0.85)+((x715*x717))+x719);
evalcond[3]=((((-1.0)*x717))+(((-1.0)*x716))+(((0.85)*x715)));
evalcond[4]=((-0.935)+(((1.1)*x719))+(((1.1)*x715*x717))+(((-1.0)*x717*x718))+(((-1.0)*x716*x718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x720=cj3*cj3;
IkReal x721=(cj3*sj3);
IkReal x722=(cj0*px);
IkReal x723=((0.92038656235619)*pp);
IkReal x724=((0.0254095720202485)*sj3);
IkReal x725=(py*sj0);
IkReal x726=((0.0414173953060285)*pp);
IkReal x727=((1.0)*pz);
CheckValue<IkReal> x728 = IKatan2WithCheck(IkReal(((-0.100617959042798)+(((0.00762287160607455)*x721))+(((-0.276115968706857)*cj3*pp))+(pz*pz)+(((-0.506212609295904)*pp))+(((0.00564933271974229)*sj3))+(((-0.00114343074091118)*x720))+(((-1.0)*sj3*x726))+(((-0.0555062126092959)*cj3)))),((0.0688360561435803)+(((0.175297399907961)*sj3))+(((-1.0)*cj3*x726))+(((-1.0)*x722*x727))+(((0.0931684307409112)*x721))+(((-1.0)*x725*x727))+(((-0.00621260929590428)*pp*sj3))+(((-0.0139752646111367)*x720))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x728.valid){
continue;
}
CheckValue<IkReal> x729=IKPowWithIntegerCheck(IKsign(((((-0.138057984353428)*pp*pz))+(((-1.0)*x723*x725))+(((0.310561435803037)*pz*sj3))+(((-1.0)*x722*x723))+((x722*x724))+(((0.099746893695352)*pz))+(((-0.185020708697653)*x722))+(((-0.185020708697653)*x725))+((x724*x725)))),-1);
if(!x729.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x728.value)+(((1.5707963267949)*(x729.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x730=IKsin(j1);
IkReal x731=IKcos(j1);
IkReal x732=((0.045)*sj3);
IkReal x733=((0.3)*cj3);
IkReal x734=((0.045)*cj3);
IkReal x735=(cj0*px);
IkReal x736=(py*sj0);
IkReal x737=(sj3*x731);
IkReal x738=(pz*x730);
IkReal x739=(pz*x731);
IkReal x740=((0.09)*x731);
IkReal x741=((1.1)*x730);
evalcond[0]=((-0.55)+(((-1.0)*x733))+(((-1.0)*x732))+x739+((x730*x735))+((x730*x736)));
evalcond[1]=((0.045)+((x731*x736))+((x731*x735))+(((-1.0)*x738))+(((-1.0)*x734))+(((0.3)*sj3)));
evalcond[2]=((((0.138057984353428)*pp*x730))+(((0.0254095720202485)*x737))+(((-0.099746893695352)*x730))+(((-0.310561435803037)*sj3*x730))+pz+(((-0.185020708697653)*x731))+(((-0.92038656235619)*pp*x731)));
evalcond[3]=(((x731*x734))+(((0.55)*x730))+(((-0.045)*x731))+(((-1.0)*x736))+(((-1.0)*x735))+(((-0.3)*x737))+((x730*x732))+((x730*x733)));
evalcond[4]=((-0.2125)+(((1.1)*x739))+(((0.09)*x738))+(((-1.0)*pp))+(((-1.0)*x735*x740))+(((-1.0)*x736*x740))+((x735*x741))+((x736*x741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x742=cj0*cj0;
IkReal x743=py*py;
IkReal x744=cj3*cj3;
IkReal x745=(py*sj0);
IkReal x746=((0.3)*sj3);
IkReal x747=((0.045)*cj3);
IkReal x748=(cj0*px);
IkReal x749=(cj3*sj3);
IkReal x750=((1.0)*pz);
CheckValue<IkReal> x751 = IKatan2WithCheck(IkReal(((-0.03825)+(((0.027)*x744))+(((0.01125)*cj3))+(((-1.0)*x745*x750))+(((-0.167025)*sj3))+(((-0.087975)*x749))+(((-1.0)*x748*x750)))),((-0.304525)+(((-0.0495)*sj3))+((x742*(px*px)))+(((-1.0)*x742*x743))+(((2.0)*x745*x748))+(((-0.087975)*x744))+x743+(((-0.027)*x749))+(((-0.33)*cj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x751.valid){
continue;
}
CheckValue<IkReal> x752=IKPowWithIntegerCheck(IKsign(((((-0.55)*pz))+(((-0.3)*cj3*pz))+((x745*x747))+(((-1.0)*x745*x746))+(((-1.0)*x746*x748))+(((-0.045)*pz*sj3))+((x747*x748))+(((-0.045)*x748))+(((-0.045)*x745)))),-1);
if(!x752.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x751.value)+(((1.5707963267949)*(x752.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x753=IKsin(j1);
IkReal x754=IKcos(j1);
IkReal x755=((0.045)*sj3);
IkReal x756=((0.3)*cj3);
IkReal x757=((0.045)*cj3);
IkReal x758=(cj0*px);
IkReal x759=(py*sj0);
IkReal x760=(sj3*x754);
IkReal x761=(pz*x753);
IkReal x762=(pz*x754);
IkReal x763=((0.09)*x754);
IkReal x764=((1.1)*x753);
evalcond[0]=((-0.55)+x762+((x753*x759))+((x753*x758))+(((-1.0)*x756))+(((-1.0)*x755)));
evalcond[1]=((0.045)+(((-1.0)*x761))+(((0.3)*sj3))+(((-1.0)*x757))+((x754*x758))+((x754*x759)));
evalcond[2]=((((-0.92038656235619)*pp*x754))+(((-0.310561435803037)*sj3*x753))+(((-0.185020708697653)*x754))+pz+(((-0.099746893695352)*x753))+(((0.0254095720202485)*x760))+(((0.138057984353428)*pp*x753)));
evalcond[3]=((((0.55)*x753))+(((-0.3)*x760))+(((-1.0)*x759))+(((-1.0)*x758))+(((-0.045)*x754))+((x753*x756))+((x753*x755))+((x754*x757)));
evalcond[4]=((-0.2125)+(((-1.0)*x758*x763))+(((0.09)*x761))+(((1.1)*x762))+((x759*x764))+((x758*x764))+(((-1.0)*pp))+(((-1.0)*x759*x763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x765=cj0*cj0;
IkReal x766=py*py;
IkReal x767=(pz*sj3);
IkReal x768=(py*sj0);
IkReal x769=((0.3)*cj3);
IkReal x770=((0.045)*sj3);
IkReal x771=((0.045)*cj3);
IkReal x772=(cj0*px);
IkReal x773=((0.3)*sj3);
CheckValue<IkReal> x774=IKPowWithIntegerCheck(IKsign(((pz*pz)+(((2.0)*x768*x772))+(((-1.0)*x765*x766))+x766+((x765*(px*px))))),-1);
if(!x774.valid){
continue;
}
CheckValue<IkReal> x775 = IKatan2WithCheck(IkReal((((x770*x772))+((x768*x769))+(((0.045)*pz))+((x769*x772))+(((-1.0)*pz*x771))+(((0.55)*x772))+(((0.3)*x767))+(((0.55)*x768))+((x768*x770)))),((((-1.0)*x768*x773))+((x771*x772))+(((-0.045)*x768))+(((0.045)*x767))+((pz*x769))+(((-0.045)*x772))+(((-1.0)*x772*x773))+(((0.55)*pz))+((x768*x771))),IKFAST_ATAN2_MAGTHRESH);
if(!x775.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x774.value)))+(x775.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x776=IKsin(j1);
IkReal x777=IKcos(j1);
IkReal x778=((0.045)*sj3);
IkReal x779=((0.3)*cj3);
IkReal x780=((0.045)*cj3);
IkReal x781=(cj0*px);
IkReal x782=(py*sj0);
IkReal x783=(sj3*x777);
IkReal x784=(pz*x776);
IkReal x785=(pz*x777);
IkReal x786=((0.09)*x777);
IkReal x787=((1.1)*x776);
evalcond[0]=((-0.55)+x785+(((-1.0)*x778))+(((-1.0)*x779))+((x776*x781))+((x776*x782)));
evalcond[1]=((0.045)+(((-1.0)*x780))+(((0.3)*sj3))+(((-1.0)*x784))+((x777*x781))+((x777*x782)));
evalcond[2]=((((-0.185020708697653)*x777))+(((-0.099746893695352)*x776))+pz+(((-0.310561435803037)*sj3*x776))+(((0.138057984353428)*pp*x776))+(((0.0254095720202485)*x783))+(((-0.92038656235619)*pp*x777)));
evalcond[3]=(((x776*x778))+((x776*x779))+(((-0.045)*x777))+(((0.55)*x776))+(((-1.0)*x781))+(((-1.0)*x782))+(((-0.3)*x783))+((x777*x780)));
evalcond[4]=((-0.2125)+((x781*x787))+(((0.09)*x784))+(((1.1)*x785))+((x782*x787))+(((-1.0)*x781*x786))+(((-1.0)*pp))+(((-1.0)*x782*x786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x788=cj2*cj2;
IkReal x789=((0.045)*px);
IkReal x790=(sj0*sj2);
IkReal x791=(pz*sj2);
IkReal x792=(cj0*cj3);
IkReal x793=((0.55)*cj2);
IkReal x794=(px*sj0);
IkReal x795=(cj0*py);
IkReal x796=((0.3)*cj3);
IkReal x797=((0.3)*sj3);
IkReal x798=((0.045)*sj3);
IkReal x799=(sj0*x788);
IkReal x800=(cj0*cj2*sj2);
IkReal x801=((0.3)*cj2*py);
IkReal x802=((0.045)*x788);
IkReal x803=((0.045)*cj2*py);
CheckValue<IkReal> x804 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*px*x791))+((x793*x795))+(((-1.0)*x793*x794))+((cj2*x795*x798))+(((-1.0)*cj2*x794*x796))+((x792*x801))+(((-1.0)*py*pz*x790))+(((-1.0)*cj2*sj0*sj3*x789)))),((((-1.0)*x788*x794*x797))+((cj3*x789*x799))+((x795*x802))+(((-1.0)*pz*x791))+(((-1.0)*x789*x799))+(((-1.0)*py*x792*x802))+((x788*x795*x797))),IKFAST_ATAN2_MAGTHRESH);
if(!x804.valid){
continue;
}
CheckValue<IkReal> x805=IKPowWithIntegerCheck(IKsign(((((-0.55)*x791))+((x790*x803))+((px*x797*x800))+((x789*x800))+(((-1.0)*x791*x798))+(((-1.0)*x791*x796))+(((-1.0)*cj2*sj2*x789*x792))+(((-1.0)*cj3*x790*x803))+((cj2*py*x790*x797)))),-1);
if(!x805.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x804.value)+(((1.5707963267949)*(x805.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x806=IKsin(j1);
IkReal x807=IKcos(j1);
IkReal x808=(px*sj2);
IkReal x809=((0.3)*sj3);
IkReal x810=((0.09)*sj0);
IkReal x811=(cj2*px);
IkReal x812=((0.045)*cj3);
IkReal x813=((0.045)*cj2);
IkReal x814=(py*sj0);
IkReal x815=((0.045)*sj3);
IkReal x816=((1.0)*cj0);
IkReal x817=((0.3)*cj3);
IkReal x818=(py*sj2);
IkReal x819=(cj0*x807);
IkReal x820=(cj3*x806);
IkReal x821=(cj2*x807);
IkReal x822=(cj2*x806);
IkReal x823=(pz*x807);
IkReal x824=(cj0*px*x806);
evalcond[0]=((-0.55)+(((-1.0)*x815))+(((-1.0)*x817))+((x806*x814))+x823+x824);
evalcond[1]=((((-1.0)*pz*sj2*x806))+((sj0*x811))+((sj2*x807*x814))+((x808*x819))+(((-1.0)*cj2*py*x816)));
evalcond[2]=(((x809*x822))+(((-1.0)*x812*x822))+(((-0.55)*x807))+pz+(((-1.0)*x807*x815))+(((-1.0)*x807*x817))+((x806*x813)));
evalcond[3]=((0.045)+((pz*x822))+(((-1.0)*x814*x821))+(((-1.0)*x816*x818))+(((-1.0)*x812))+(((-1.0)*x807*x811*x816))+((sj0*x808))+x809);
evalcond[4]=(((x809*x821))+(((-1.0)*x812*x821))+(((-1.0)*x814))+((x807*x813))+(((-1.0)*px*x816))+((x806*x817))+((x806*x815))+(((0.55)*x806)));
evalcond[5]=((-0.2125)+(((-0.09)*pz*x822))+((py*x810*x821))+(((-1.0)*x808*x810))+(((0.09)*x811*x819))+(((0.09)*cj0*x818))+(((-1.0)*pp))+(((1.1)*x824))+(((1.1)*x823))+(((1.1)*x806*x814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x825=cj0*cj0;
IkReal x826=py*py;
IkReal x827=px*px;
IkReal x828=(px*py);
IkReal x829=((1.0)*cj2);
IkReal x830=(cj0*sj2);
IkReal x831=(cj2*sj0);
IkReal x832=((0.3)*cj3);
IkReal x833=(pz*sj2);
IkReal x834=((0.045)*sj3);
IkReal x835=(sj2*x826);
IkReal x836=(py*sj0*sj2);
CheckValue<IkReal> x837 = IKatan2WithCheck(IkReal((((x832*x836))+(((0.55)*x836))+((x834*x836))+(((-1.0)*cj0*py*pz*x829))+((px*pz*x831))+(((0.55)*px*x830))+((px*x830*x834))+((px*x830*x832)))),((((-1.0)*x828*x829))+((x832*x833))+((x833*x834))+(((0.55)*x833))+(((2.0)*cj2*x825*x828))+((cj0*x826*x831))+(((-1.0)*cj0*sj0*x827*x829))),IKFAST_ATAN2_MAGTHRESH);
if(!x837.valid){
continue;
}
CheckValue<IkReal> x838=IKPowWithIntegerCheck(IKsign((((sj2*x825*x827))+(((2.0)*sj0*x828*x830))+((pz*x833))+x835+(((-1.0)*x825*x835)))),-1);
if(!x838.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x837.value)+(((1.5707963267949)*(x838.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x839=IKsin(j1);
IkReal x840=IKcos(j1);
IkReal x841=(px*sj2);
IkReal x842=((0.3)*sj3);
IkReal x843=((0.09)*sj0);
IkReal x844=(cj2*px);
IkReal x845=((0.045)*cj3);
IkReal x846=((0.045)*cj2);
IkReal x847=(py*sj0);
IkReal x848=((0.045)*sj3);
IkReal x849=((1.0)*cj0);
IkReal x850=((0.3)*cj3);
IkReal x851=(py*sj2);
IkReal x852=(cj0*x840);
IkReal x853=(cj3*x839);
IkReal x854=(cj2*x840);
IkReal x855=(cj2*x839);
IkReal x856=(pz*x840);
IkReal x857=(cj0*px*x839);
evalcond[0]=((-0.55)+(((-1.0)*x850))+((x839*x847))+(((-1.0)*x848))+x856+x857);
evalcond[1]=((((-1.0)*pz*sj2*x839))+((x841*x852))+(((-1.0)*cj2*py*x849))+((sj2*x840*x847))+((sj0*x844)));
evalcond[2]=(((x842*x855))+((x839*x846))+(((-1.0)*x845*x855))+(((-1.0)*x840*x848))+pz+(((-1.0)*x840*x850))+(((-0.55)*x840)));
evalcond[3]=((0.045)+(((-1.0)*x847*x854))+(((-1.0)*x849*x851))+(((-1.0)*x845))+(((-1.0)*x840*x844*x849))+x842+((sj0*x841))+((pz*x855)));
evalcond[4]=(((x842*x854))+((x840*x846))+((x839*x848))+(((-1.0)*x845*x854))+(((-1.0)*px*x849))+(((0.55)*x839))+(((-1.0)*x847))+((x839*x850)));
evalcond[5]=((-0.2125)+(((-1.0)*x841*x843))+(((0.09)*cj0*x851))+((py*x843*x854))+(((1.1)*x856))+(((1.1)*x857))+(((0.09)*x844*x852))+(((1.1)*x839*x847))+(((-0.09)*pz*x855))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x858=cj3*cj3;
IkReal x859=(cj2*sj3);
IkReal x860=(py*sj0);
IkReal x861=((0.3)*cj3);
IkReal x862=((0.045)*sj3);
IkReal x863=(cj0*px);
IkReal x864=(cj2*cj3);
IkReal x865=((0.045)*pz);
IkReal x866=((1.0)*pz);
CheckValue<IkReal> x867=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*x865))+(((-0.3)*pz*x859))+(((-1.0)*x862*x863))+(((-1.0)*x861*x863))+(((-1.0)*x860*x861))+(((-1.0)*x860*x862))+(((-0.55)*x863))+(((-0.55)*x860))+((x864*x865)))),-1);
if(!x867.valid){
continue;
}
CheckValue<IkReal> x868 = IKatan2WithCheck(IkReal(((-0.304525)+(((-0.087975)*x858))+(((-0.0495)*sj3))+(((-0.027)*cj3*sj3))+(pz*pz)+(((-0.33)*cj3)))),((((-0.167025)*x859))+(((-0.087975)*cj3*x859))+(((-1.0)*x860*x866))+(((0.027)*cj2*x858))+(((0.01125)*x864))+(((-0.03825)*cj2))+(((-1.0)*x863*x866))),IKFAST_ATAN2_MAGTHRESH);
if(!x868.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x867.value)))+(x868.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x869=IKsin(j1);
IkReal x870=IKcos(j1);
IkReal x871=(px*sj2);
IkReal x872=((0.3)*sj3);
IkReal x873=((0.09)*sj0);
IkReal x874=(cj2*px);
IkReal x875=((0.045)*cj3);
IkReal x876=((0.045)*cj2);
IkReal x877=(py*sj0);
IkReal x878=((0.045)*sj3);
IkReal x879=((1.0)*cj0);
IkReal x880=((0.3)*cj3);
IkReal x881=(py*sj2);
IkReal x882=(cj0*x870);
IkReal x883=(cj3*x869);
IkReal x884=(cj2*x870);
IkReal x885=(cj2*x869);
IkReal x886=(pz*x870);
IkReal x887=(cj0*px*x869);
evalcond[0]=((-0.55)+(((-1.0)*x880))+((x869*x877))+x887+x886+(((-1.0)*x878)));
evalcond[1]=(((sj2*x870*x877))+(((-1.0)*cj2*py*x879))+((sj0*x874))+((x871*x882))+(((-1.0)*pz*sj2*x869)));
evalcond[2]=((((-1.0)*x870*x880))+pz+(((-0.55)*x870))+(((-1.0)*x870*x878))+((x869*x876))+((x872*x885))+(((-1.0)*x875*x885)));
evalcond[3]=((0.045)+(((-1.0)*x879*x881))+((pz*x885))+(((-1.0)*x870*x874*x879))+((sj0*x871))+(((-1.0)*x877*x884))+x872+(((-1.0)*x875)));
evalcond[4]=(((x870*x876))+(((0.55)*x869))+(((-1.0)*x877))+((x869*x880))+((x869*x878))+(((-1.0)*px*x879))+((x872*x884))+(((-1.0)*x875*x884)));
evalcond[5]=((-0.2125)+(((1.1)*x887))+(((1.1)*x886))+(((1.1)*x869*x877))+(((0.09)*x874*x882))+(((-1.0)*x871*x873))+((py*x873*x884))+(((-1.0)*pp))+(((0.09)*cj0*x881))+(((-0.09)*pz*x885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x888=((0.045)*cj2);
IkReal x889=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)));
IkReal x890=((((-1.0)*cj3*x888))+(((0.3)*cj2*sj3))+x888);
CheckValue<IkReal> x893 = IKatan2WithCheck(IkReal(x889),x890,IKFAST_ATAN2_MAGTHRESH);
if(!x893.valid){
continue;
}
IkReal x891=((1.0)*(x893.value));
if((((x889*x889)+(x890*x890))) < -0.00001)
continue;
CheckValue<IkReal> x894=IKPowWithIntegerCheck(IKabs(IKsqrt(((x889*x889)+(x890*x890)))),-1);
if(!x894.valid){
continue;
}
if( ((pz*(x894.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x894.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x892=IKasin((pz*(x894.value)));
j1array[0]=((((-1.0)*x891))+(((-1.0)*x892)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x891))+x892);
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j0eval[2];
IkReal x895=(((pp*sj1))+(((-1.0)*sj1*(pz*pz))));
j0eval[0]=x895;
j0eval[1]=IKsign(x895);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x896=(cj2*sj1);
IkReal x897=(((x896*(pz*pz)))+(((-1.0)*pp*x896)));
j0eval[0]=x897;
j0eval[1]=IKsign(x897);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x898=(pp+(((-1.0)*(pz*pz))));
j0eval[0]=x898;
j0eval[1]=IKsign(x898);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-0.045)*cj1*sj3))+(((-0.55)*cj1))+pz+(((-0.3)*cj1*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x899=(cj1*px);
IkReal x900=((0.3)*sj3);
IkReal x901=(cj1*py);
IkReal x902=(pz*sj1);
IkReal x903=((0.045)*cj3);
IkReal x904=(((cj1*pp))+(((-1.0)*cj1*(pz*pz))));
j0eval[0]=x904;
j0eval[1]=((IKabs((((px*x902))+((x900*x901))+(((0.045)*x901))+(((-1.0)*x901*x903)))))+(IKabs(((((-0.045)*x899))+((x899*x903))+(((-1.0)*x899*x900))+((py*x902))))));
j0eval[2]=IKsign(x904);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x905=pz*pz;
IkReal x906=((1.1)*pz);
IkReal x907=(cj1*pp);
IkReal x908=((0.2125)*cj1);
IkReal x909=(cj1*x905);
IkReal x910=((0.09)*pz*sj1);
j0eval[0]=((((-1.0)*x909))+x907);
j0eval[1]=((IKabs(((((-1.0)*px*x908))+((px*x906))+(((-1.0)*px*x907))+((py*x910)))))+(IKabs((((px*x910))+(((-1.0)*py*x906))+((py*x907))+((py*x908))))));
j0eval[2]=IKsign(((((0.09)*x907))+(((-0.09)*x909))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x911=((0.3)*sj3);
IkReal x912=(py*sj1);
IkReal x913=((0.3)*cj3);
IkReal x914=(px*sj1);
IkReal x915=((0.045)*sj3);
IkReal x916=((0.045)*px);
IkReal x917=((0.045)*py);
IkReal x918=(pp+(((-1.0)*(pz*pz))));
j0eval[0]=x918;
j0eval[1]=((IKabs(((((-1.0)*px*x911))+(((-1.0)*x916))+((cj3*x916))+(((0.55)*x912))+((x912*x915))+((x912*x913)))))+(IKabs(((((-1.0)*cj3*x917))+((x914*x915))+(((0.55)*x914))+((x913*x914))+x917+((py*x911))))));
j0eval[2]=IKsign(x918);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-1.0)*pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x919=pz*pz;
IkReal x920=sj3*sj3;
IkReal x921=cj3*cj3;
IkReal x922=((4.26078431372549)*cj3);
IkReal x923=((((-1.0)*pp))+x919);
IkReal x924=((1.20294117647059)*x921);
IkReal x925=((1.20294117647059)*x920);
j0eval[0]=x923;
j0eval[1]=((((-3.98071895424837)*x919))+(((-1.0)*sj3*x919))+((pp*sj3))+((pp*x925))+((pp*x922))+((pp*x924))+(((-1.0)*x919*x925))+(((-1.0)*x919*x922))+(((-1.0)*x919*x924))+(((3.98071895424837)*pp)));
j0eval[2]=IKsign(x923);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x926=pz*pz;
IkReal x927=((0.00405)*sj3);
IkReal x928=((0.33)*cj3);
IkReal x929=((0.027)*cj3);
IkReal x930=((0.0495)*sj3);
j0eval[0]=((((-1.0)*x926))+pp);
j0eval[1]=IKsign(((((-0.09)*x926))+(((0.09)*pp))));
j0eval[2]=((IKabs(((((0.0495)*px))+(((-1.0)*py*x928))+(((-1.0)*py*x930))+((px*x927))+((px*x929))+(((-0.3925)*py))+((pp*py)))))+(IKabs(((((-1.0)*pp*px))+(((0.0495)*py))+((py*x929))+((py*x927))+((px*x928))+((px*x930))+(((0.3925)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x931=pz*pz;
IkReal x932=(cj3*py);
IkReal x933=(py*sj3);
IkReal x934=((1.0)*pp);
IkReal x935=(cj3*px);
IkReal x936=(px*sj3);
j0eval[0]=(x931+(((-1.0)*x934)));
j0eval[1]=IKsign(((((1.1)*x931))+(((-1.1)*pp))));
j0eval[2]=((IKabs(((((0.33)*x936))+(((0.0495)*px))+(((-0.0495)*x935))+(((0.027)*x933))+(((-1.0)*py*x934))+(((-0.00405)*x932))+(((-0.20845)*py)))))+(IKabs(((((0.0495)*x932))+(((-1.0)*px*x934))+(((-0.0495)*py))+(((-0.33)*x933))+(((0.027)*x936))+(((-0.00405)*x935))+(((-0.20845)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x937=(cj3*py);
IkReal x938=(py*sj3);
IkReal x939=((1.0)*pp);
IkReal x940=(cj3*px);
IkReal x941=(px*sj3);
CheckValue<IkReal> x942=IKPowWithIntegerCheck(IKsign(((((-1.1)*pp))+(((1.1)*(pz*pz))))),-1);
if(!x942.valid){
continue;
}
CheckValue<IkReal> x943 = IKatan2WithCheck(IkReal(((((0.0495)*px))+(((0.33)*x941))+(((-0.0495)*x940))+(((0.027)*x938))+(((-1.0)*py*x939))+(((-0.00405)*x937))+(((-0.20845)*py)))),((((0.0495)*x937))+(((-0.00405)*x940))+(((-1.0)*px*x939))+(((-0.0495)*py))+(((0.027)*x941))+(((-0.33)*x938))+(((-0.20845)*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x943.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x942.value)))+(x943.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x944=IKsin(j0);
IkReal x945=IKcos(j0);
IkReal x946=(px*x944);
IkReal x947=(py*x945);
IkReal x948=(px*x945);
IkReal x949=(py*x944);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x948+x949);
evalcond[1]=((0.045)+(((-1.0)*x947))+(((-0.045)*cj3))+(((0.3)*sj3))+x946);
evalcond[2]=((-0.2125)+(((0.09)*x947))+(((-1.0)*pp))+(((1.1)*x948))+(((1.1)*x949))+(((-0.09)*x946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x950=((0.33)*cj3);
IkReal x951=((0.027)*cj3);
IkReal x952=((0.00405)*sj3);
IkReal x953=((0.0495)*sj3);
CheckValue<IkReal> x954=IKPowWithIntegerCheck(IKsign(((((-0.09)*(pz*pz)))+(((0.09)*pp)))),-1);
if(!x954.valid){
continue;
}
CheckValue<IkReal> x955 = IKatan2WithCheck(IkReal((((px*x953))+((px*x950))+(((-1.0)*pp*px))+(((0.0495)*py))+((py*x951))+((py*x952))+(((0.3925)*px)))),((((-1.0)*py*x950))+(((-1.0)*py*x953))+((px*x951))+((px*x952))+(((0.0495)*px))+(((-0.3925)*py))+((pp*py))),IKFAST_ATAN2_MAGTHRESH);
if(!x955.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x954.value)))+(x955.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x956=IKsin(j0);
IkReal x957=IKcos(j0);
IkReal x958=(px*x956);
IkReal x959=(py*x957);
IkReal x960=(px*x957);
IkReal x961=(py*x956);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x960+x961);
evalcond[1]=((0.045)+(((-1.0)*x959))+(((-0.045)*cj3))+(((0.3)*sj3))+x958);
evalcond[2]=((-0.2125)+(((-0.09)*x958))+(((0.09)*x959))+(((-1.0)*pp))+(((1.1)*x960))+(((1.1)*x961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x962=((0.3)*py);
IkReal x963=((0.045)*px);
IkReal x964=((0.045)*py);
IkReal x965=((0.3)*px);
CheckValue<IkReal> x966=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x966.valid){
continue;
}
CheckValue<IkReal> x967 = IKatan2WithCheck(IkReal(((((-0.55)*py))+(((-1.0)*cj3*x963))+(((-1.0)*cj3*x962))+(((-1.0)*sj3*x964))+((sj3*x965))+x963)),((((-0.55)*px))+(((-1.0)*cj3*x965))+(((-1.0)*sj3*x963))+(((-1.0)*sj3*x962))+((cj3*x964))+(((-1.0)*x964))),IKFAST_ATAN2_MAGTHRESH);
if(!x967.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x966.value)))+(x967.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x968=IKsin(j0);
IkReal x969=IKcos(j0);
IkReal x970=(px*x968);
IkReal x971=(py*x969);
IkReal x972=(px*x969);
IkReal x973=(py*x968);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x973+x972);
evalcond[1]=((0.045)+(((-1.0)*x971))+(((-0.045)*cj3))+(((0.3)*sj3))+x970);
evalcond[2]=((-0.2125)+(((-0.09)*x970))+(((0.09)*x971))+(((-1.0)*pp))+(((1.1)*x973))+(((1.1)*x972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x974=pz*pz;
IkReal x975=sj3*sj3;
IkReal x976=cj3*cj3;
IkReal x977=((4.26078431372549)*cj3);
IkReal x978=((((-1.0)*x974))+pp);
IkReal x979=((1.20294117647059)*x976);
IkReal x980=((1.0)*x974);
IkReal x981=((1.20294117647059)*x975);
j0eval[0]=x978;
j0eval[1]=(((pp*x981))+(((-1.0)*x974*x981))+((pp*sj3))+((pp*x977))+((pp*x979))+(((-1.0)*x974*x977))+(((-1.0)*x974*x979))+(((-3.98071895424837)*x974))+(((3.98071895424837)*pp))+(((-1.0)*sj3*x980)));
j0eval[2]=IKsign(x978);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x982=pz*pz;
IkReal x983=((0.00405)*sj3);
IkReal x984=((0.33)*cj3);
IkReal x985=((0.027)*cj3);
IkReal x986=((0.0495)*sj3);
j0eval[0]=((((-1.0)*x982))+pp);
j0eval[1]=IKsign(((((-0.09)*x982))+(((0.09)*pp))));
j0eval[2]=((IKabs(((((-1.0)*pp*px))+(((-1.0)*py*x983))+(((-1.0)*py*x985))+(((-0.0495)*py))+(((0.3925)*px))+((px*x986))+((px*x984)))))+(IKabs(((((-1.0)*px*x983))+(((-1.0)*px*x985))+(((-1.0)*py*x986))+(((-1.0)*py*x984))+(((-0.0495)*px))+(((-0.3925)*py))+((pp*py))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x987=pz*pz;
IkReal x988=(cj3*py);
IkReal x989=(py*sj3);
IkReal x990=((1.0)*pp);
IkReal x991=(cj3*px);
IkReal x992=(px*sj3);
j0eval[0]=((((-1.0)*x987))+pp);
j0eval[1]=IKsign(((((-1.1)*x987))+(((1.1)*pp))));
j0eval[2]=((IKabs(((((-1.0)*px*x990))+(((0.0495)*py))+(((-0.00405)*x991))+(((0.33)*x989))+(((-0.0495)*x988))+(((0.027)*x992))+(((-0.20845)*px)))))+(IKabs(((((-0.33)*x992))+(((-1.0)*py*x990))+(((0.0495)*x991))+(((0.027)*x989))+(((-0.0495)*px))+(((-0.00405)*x988))+(((-0.20845)*py))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x993=(cj3*py);
IkReal x994=(py*sj3);
IkReal x995=((1.0)*pp);
IkReal x996=(cj3*px);
IkReal x997=(px*sj3);
CheckValue<IkReal> x998 = IKatan2WithCheck(IkReal(((((-0.33)*x997))+(((-1.0)*py*x995))+(((0.0495)*x996))+(((-0.00405)*x993))+(((-0.0495)*px))+(((0.027)*x994))+(((-0.20845)*py)))),((((-1.0)*px*x995))+(((0.0495)*py))+(((-0.00405)*x996))+(((0.33)*x994))+(((0.027)*x997))+(((-0.0495)*x993))+(((-0.20845)*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x998.valid){
continue;
}
CheckValue<IkReal> x999=IKPowWithIntegerCheck(IKsign(((((-1.1)*(pz*pz)))+(((1.1)*pp)))),-1);
if(!x999.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x998.value)+(((1.5707963267949)*(x999.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1000=IKcos(j0);
IkReal x1001=IKsin(j0);
IkReal x1002=(px*x1001);
IkReal x1003=((1.0)*x1000);
IkReal x1004=(py*x1001);
evalcond[0]=((0.045)+x1002+(((-1.0)*py*x1003))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x1004))+(((-0.3)*cj3))+(((-1.0)*px*x1003)));
evalcond[2]=((-0.2125)+(((-1.1)*px*x1000))+(((-1.1)*x1004))+(((0.09)*py*x1000))+(((-1.0)*pp))+(((-0.09)*x1002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1005=((0.00405)*sj3);
IkReal x1006=((0.33)*cj3);
IkReal x1007=((0.027)*cj3);
IkReal x1008=((0.0495)*sj3);
CheckValue<IkReal> x1009 = IKatan2WithCheck(IkReal((((px*x1008))+((px*x1006))+(((-1.0)*pp*px))+(((-1.0)*py*x1005))+(((-1.0)*py*x1007))+(((-0.0495)*py))+(((0.3925)*px)))),((((-1.0)*py*x1008))+(((-1.0)*py*x1006))+(((-0.0495)*px))+(((-0.3925)*py))+(((-1.0)*px*x1007))+(((-1.0)*px*x1005))+((pp*py))),IKFAST_ATAN2_MAGTHRESH);
if(!x1009.valid){
continue;
}
CheckValue<IkReal> x1010=IKPowWithIntegerCheck(IKsign(((((-0.09)*(pz*pz)))+(((0.09)*pp)))),-1);
if(!x1010.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1009.value)+(((1.5707963267949)*(x1010.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1011=IKcos(j0);
IkReal x1012=IKsin(j0);
IkReal x1013=(px*x1012);
IkReal x1014=((1.0)*x1011);
IkReal x1015=(py*x1012);
evalcond[0]=((0.045)+x1013+(((-1.0)*py*x1014))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*px*x1014))+(((-0.3)*cj3))+(((-1.0)*x1015)));
evalcond[2]=((-0.2125)+(((-1.1)*px*x1011))+(((0.09)*py*x1011))+(((-1.1)*x1015))+(((-0.09)*x1013))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1016=((0.3)*py);
IkReal x1017=((0.045)*px);
IkReal x1018=((0.045)*py);
IkReal x1019=((0.3)*px);
CheckValue<IkReal> x1020=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1020.valid){
continue;
}
CheckValue<IkReal> x1021 = IKatan2WithCheck(IkReal(((((-0.55)*py))+(((-1.0)*x1017))+((cj3*x1017))+(((-1.0)*cj3*x1016))+(((-1.0)*sj3*x1019))+(((-1.0)*sj3*x1018)))),((((-0.55)*px))+x1018+((sj3*x1016))+(((-1.0)*cj3*x1018))+(((-1.0)*cj3*x1019))+(((-1.0)*sj3*x1017))),IKFAST_ATAN2_MAGTHRESH);
if(!x1021.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1020.value)))+(x1021.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1022=IKcos(j0);
IkReal x1023=IKsin(j0);
IkReal x1024=(px*x1023);
IkReal x1025=((1.0)*x1022);
IkReal x1026=(py*x1023);
evalcond[0]=((0.045)+x1024+(((-1.0)*py*x1025))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*x1026))+(((-0.3)*cj3))+(((-1.0)*px*x1025)));
evalcond[2]=((-0.2125)+(((-1.1)*x1026))+(((-1.1)*px*x1022))+(((-0.09)*x1024))+(((-1.0)*pp))+(((0.09)*py*x1022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-0.85)*cj1);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x1027=((-1.0)*py);
sj2=1.0;
cj2=0;
j2=1.5707963267949;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1027);
rxp0_1=(px*r20);
rxp1_0=(r21*x1027);
rxp1_1=(px*r21);
rxp2_0=(r22*x1027);
rxp2_1=(px*r22);
IkReal x1028=px*px;
IkReal x1029=py*py;
IkReal x1030=(sj1*x1028);
IkReal x1031=(sj1*x1029);
j0eval[0]=(x1030+x1031);
j0eval[1]=IKsign(((((20.0)*x1031))+(((20.0)*x1030))));
j0eval[2]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[4];
IkReal x1032=((-1.0)*py);
sj2=1.0;
cj2=0;
j2=1.5707963267949;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1032);
rxp0_1=(px*r20);
rxp1_0=(r21*x1032);
rxp1_1=(px*r21);
rxp2_0=(r22*x1032);
rxp2_1=(px*r22);
IkReal x1033=px*px;
IkReal x1034=py*py;
j0eval[0]=(x1033+x1034);
j0eval[1]=289.0;
j0eval[2]=sj1;
j0eval[3]=IKsign(((((20.0)*x1033))+(((20.0)*x1034))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*(px*px)))+(((-1.0)*(py*py))));
evalcond[2]=-0.85;
evalcond[3]=-0.85;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x1035=((-1.0)*py);
sj2=1.0;
cj2=0;
j2=1.5707963267949;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1035);
rxp0_1=(px*r20);
rxp1_0=(r21*x1035);
rxp1_1=(px*r21);
rxp2_0=(r22*x1035);
rxp2_1=(px*r22);
sj1=0;
cj1=1.0;
j1=0;
IkReal x1036=py*py;
IkReal x1037=px*px;
j0eval[0]=((((-1.0)*x1037))+(((-1.0)*x1036)));
j0eval[1]=((IKabs(px))+(IKabs(py)));
j0eval[2]=IKsign(((((-18.0)*x1036))+(((-18.0)*x1037))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1038=IKPowWithIntegerCheck(IKsign(((((-18.0)*(px*px)))+(((-18.0)*(py*py))))),-1);
if(!x1038.valid){
continue;
}
CheckValue<IkReal> x1039 = IKatan2WithCheck(IkReal(((187.0)*px)),((-187.0)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x1039.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1038.value)))+(x1039.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1040=IKcos(j0);
IkReal x1041=IKsin(j0);
IkReal x1042=(px*x1041);
IkReal x1043=((1.0)*x1040);
evalcond[0]=(x1042+(((-1.0)*py*x1043)));
evalcond[1]=((((-1.0)*py*x1041))+(((-1.0)*px*x1043)));
evalcond[2]=((-0.935)+(((0.09)*py*x1040))+(((-0.09)*x1042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*(px*px)))+(((-1.0)*(py*py))));
evalcond[2]=-0.85;
evalcond[3]=0.85;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x1044=((-1.0)*py);
sj2=1.0;
cj2=0;
j2=1.5707963267949;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1044);
rxp0_1=(px*r20);
rxp1_0=(r21*x1044);
rxp1_1=(px*r21);
rxp2_0=(r22*x1044);
rxp2_1=(px*r22);
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x1045=py*py;
IkReal x1046=px*px;
j0eval[0]=((((-1.0)*x1046))+(((-1.0)*x1045)));
j0eval[1]=((IKabs(px))+(IKabs(py)));
j0eval[2]=IKsign(((((-18.0)*x1045))+(((-18.0)*x1046))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1047=IKPowWithIntegerCheck(IKsign(((((-18.0)*(px*px)))+(((-18.0)*(py*py))))),-1);
if(!x1047.valid){
continue;
}
CheckValue<IkReal> x1048 = IKatan2WithCheck(IkReal(((187.0)*px)),((-187.0)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x1048.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1047.value)))+(x1048.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1049=IKcos(j0);
IkReal x1050=IKsin(j0);
IkReal x1051=(px*x1050);
IkReal x1052=((1.0)*x1049);
evalcond[0]=(x1051+(((-1.0)*py*x1052)));
evalcond[1]=((((-1.0)*py*x1050))+(((-1.0)*px*x1052)));
evalcond[2]=((-0.935)+(((0.09)*py*x1049))+(((-0.09)*x1051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1053=((17.0)*sj1);
CheckValue<IkReal> x1054=IKPowWithIntegerCheck(IKsign(((((20.0)*(px*px)))+(((20.0)*(py*py))))),-1);
if(!x1054.valid){
continue;
}
CheckValue<IkReal> x1055 = IKatan2WithCheck(IkReal((py*x1053)),(px*x1053),IKFAST_ATAN2_MAGTHRESH);
if(!x1055.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1054.value)))+(x1055.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1056=IKcos(j0);
IkReal x1057=IKsin(j0);
IkReal x1058=((1.0)*py);
IkReal x1059=((1.1)*sj1);
IkReal x1060=(px*x1057);
IkReal x1061=(px*x1056);
IkReal x1062=(py*x1057);
evalcond[0]=(x1060+(((-1.0)*x1056*x1058)));
evalcond[1]=((-0.85)+((sj1*x1062))+((sj1*x1061)));
evalcond[2]=((((0.85)*sj1))+(((-1.0)*x1057*x1058))+(((-1.0)*x1061)));
evalcond[3]=((-0.935)+(((0.09)*py*x1056))+((x1059*x1062))+((x1059*x1061))+(((-0.09)*x1060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1063=((20.0)*sj1);
CheckValue<IkReal> x1064 = IKatan2WithCheck(IkReal(((17.0)*py)),((17.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x1064.valid){
continue;
}
CheckValue<IkReal> x1065=IKPowWithIntegerCheck(IKsign((((x1063*(py*py)))+((x1063*(px*px))))),-1);
if(!x1065.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1064.value)+(((1.5707963267949)*(x1065.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1066=IKcos(j0);
IkReal x1067=IKsin(j0);
IkReal x1068=((1.0)*py);
IkReal x1069=((1.1)*sj1);
IkReal x1070=(px*x1067);
IkReal x1071=(px*x1066);
IkReal x1072=(py*x1067);
evalcond[0]=(x1070+(((-1.0)*x1066*x1068)));
evalcond[1]=((-0.85)+((sj1*x1071))+((sj1*x1072)));
evalcond[2]=((((0.85)*sj1))+(((-1.0)*x1071))+(((-1.0)*x1067*x1068)));
evalcond[3]=((-0.935)+((x1069*x1072))+((x1069*x1071))+(((0.09)*py*x1066))+(((-0.09)*x1070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-0.85)+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3=0;
sj3=0;
cj3=1.0;
j1=0;
sj1=0;
cj1=1.0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3=0;
sj3=0;
cj3=1.0;
j1=0;
sj1=0;
cj1=1.0;
j0eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1074 = IKatan2WithCheck(IkReal(((0.09)*py)),((-0.09)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x1074.valid){
continue;
}
IkReal x1073=x1074.value;
j0array[0]=((-1.0)*x1073);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1073)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1075=IKsin(j0);
IkReal x1076=IKcos(j0);
evalcond[0]=(((px*x1076))+((py*x1075)));
evalcond[1]=((((-1.0)*py*x1076))+((px*x1075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1078 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1078.valid){
continue;
}
IkReal x1077=x1078.value;
j0array[0]=((-1.0)*x1077);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1077)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1079=IKcos(j0);
IkReal x1080=IKsin(j0);
IkReal x1081=(px*x1080);
IkReal x1082=(py*x1079);
evalcond[0]=(x1081+(((-1.0)*x1082)));
evalcond[1]=((((-0.09)*x1081))+(((0.09)*x1082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-0.85)+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3=0;
sj3=0;
cj3=1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3=0;
sj3=0;
cj3=1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j0eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1084 = IKatan2WithCheck(IkReal(((0.09)*py)),((-0.09)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x1084.valid){
continue;
}
IkReal x1083=x1084.value;
j0array[0]=((-1.0)*x1083);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1083)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1085=IKcos(j0);
IkReal x1086=IKsin(j0);
IkReal x1087=((1.0)*x1085);
evalcond[0]=((((-1.0)*py*x1087))+((px*x1086)));
evalcond[1]=((((-1.0)*py*x1086))+(((-1.0)*px*x1087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1089 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x1089.valid){
continue;
}
IkReal x1088=x1089.value;
j0array[0]=((-1.0)*x1088);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1088)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1090=IKcos(j0);
IkReal x1091=IKsin(j0);
evalcond[0]=((((-1.0)*px*x1090))+(((-1.0)*py*x1091)));
evalcond[1]=((((0.09)*py*x1090))+(((-0.09)*px*x1091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1092=((0.3)*py);
IkReal x1093=(cj3*sj1);
IkReal x1094=(px*sj1);
IkReal x1095=((0.3)*px);
IkReal x1096=((0.045)*py);
IkReal x1097=((0.045)*px);
CheckValue<IkReal> x1098 = IKatan2WithCheck(IkReal(((((0.55)*py*sj1))+(((-1.0)*x1097))+((sj1*sj3*x1096))+((x1092*x1093))+(((-1.0)*sj3*x1095))+((cj3*x1097)))),(x1096+(((-1.0)*cj3*x1096))+(((0.045)*sj3*x1094))+((x1093*x1095))+((sj3*x1092))+(((0.55)*x1094))),IKFAST_ATAN2_MAGTHRESH);
if(!x1098.valid){
continue;
}
CheckValue<IkReal> x1099=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1099.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1098.value)+(((1.5707963267949)*(x1099.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1100=IKsin(j0);
IkReal x1101=IKcos(j0);
IkReal x1102=((0.3)*cj3);
IkReal x1103=((0.045)*sj3);
IkReal x1104=(cj1*pz);
IkReal x1105=(px*x1100);
IkReal x1106=(px*x1101);
IkReal x1107=(py*x1100);
IkReal x1108=(py*x1101);
IkReal x1109=(sj1*x1107);
evalcond[0]=(((cj1*x1106))+((cj1*x1107))+(((-1.0)*pz*sj1)));
evalcond[1]=((0.045)+x1105+(((-1.0)*x1108))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.55)+x1104+x1109+((sj1*x1106))+(((-1.0)*x1103))+(((-1.0)*x1102)));
evalcond[3]=((((-1.0)*x1106))+(((-1.0)*x1107))+((sj1*x1103))+((sj1*x1102))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((0.09)*x1108))+(((-1.0)*pp))+(((1.1)*x1109))+(((1.1)*x1104))+(((-0.09)*x1105))+(((1.1)*sj1*x1106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1110=((1.1)*pz);
IkReal x1111=((0.09)*cj1);
IkReal x1112=((0.2125)*cj1);
IkReal x1113=(cj1*pp);
IkReal x1114=((0.09)*pz*sj1);
CheckValue<IkReal> x1115=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1111*(pz*pz)))+((pp*x1111)))),-1);
if(!x1115.valid){
continue;
}
CheckValue<IkReal> x1116 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1112))+((py*x1114))+(((-1.0)*px*x1113))+((px*x1110)))),((((-1.0)*py*x1110))+((py*x1112))+((py*x1113))+((px*x1114))),IKFAST_ATAN2_MAGTHRESH);
if(!x1116.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1115.value)))+(x1116.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1117=IKsin(j0);
IkReal x1118=IKcos(j0);
IkReal x1119=((0.3)*cj3);
IkReal x1120=((0.045)*sj3);
IkReal x1121=(cj1*pz);
IkReal x1122=(px*x1117);
IkReal x1123=(px*x1118);
IkReal x1124=(py*x1117);
IkReal x1125=(py*x1118);
IkReal x1126=(sj1*x1124);
evalcond[0]=((((-1.0)*pz*sj1))+((cj1*x1124))+((cj1*x1123)));
evalcond[1]=((0.045)+x1122+(((-0.045)*cj3))+(((-1.0)*x1125))+(((0.3)*sj3)));
evalcond[2]=((-0.55)+x1121+x1126+((sj1*x1123))+(((-1.0)*x1120))+(((-1.0)*x1119)));
evalcond[3]=(((sj1*x1120))+(((-1.0)*x1124))+(((-1.0)*x1123))+((sj1*x1119))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((1.1)*sj1*x1123))+(((0.09)*x1125))+(((-1.0)*pp))+(((1.1)*x1121))+(((1.1)*x1126))+(((-0.09)*x1122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1127=((0.045)*cj1);
IkReal x1128=(pz*sj1);
IkReal x1129=((0.3)*cj1*sj3);
CheckValue<IkReal> x1130=IKPowWithIntegerCheck(IKsign((((cj1*pp))+(((-1.0)*cj1*(pz*pz))))),-1);
if(!x1130.valid){
continue;
}
CheckValue<IkReal> x1131 = IKatan2WithCheck(IkReal((((cj3*px*x1127))+((py*x1128))+(((-1.0)*px*x1127))+(((-1.0)*px*x1129)))),(((px*x1128))+((py*x1129))+((py*x1127))+(((-1.0)*cj3*py*x1127))),IKFAST_ATAN2_MAGTHRESH);
if(!x1131.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1130.value)))+(x1131.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1132=IKsin(j0);
IkReal x1133=IKcos(j0);
IkReal x1134=((0.3)*cj3);
IkReal x1135=((0.045)*sj3);
IkReal x1136=(cj1*pz);
IkReal x1137=(px*x1132);
IkReal x1138=(px*x1133);
IkReal x1139=(py*x1132);
IkReal x1140=(py*x1133);
IkReal x1141=(sj1*x1139);
evalcond[0]=((((-1.0)*pz*sj1))+((cj1*x1139))+((cj1*x1138)));
evalcond[1]=((0.045)+x1137+(((-1.0)*x1140))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.55)+x1141+x1136+((sj1*x1138))+(((-1.0)*x1134))+(((-1.0)*x1135)));
evalcond[3]=(((sj1*x1134))+((sj1*x1135))+(((-1.0)*x1139))+(((-1.0)*x1138))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((1.1)*x1141))+(((1.1)*sj1*x1138))+(((-1.0)*pp))+(((-0.09)*x1137))+(((0.09)*x1140))+(((1.1)*x1136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((((-0.045)*cj1*sj3))+(((-0.55)*cj1))+pz+(((-0.3)*cj1*cj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1142=((0.045)*cj1);
IkReal x1143=(pz*sj1);
IkReal x1144=((0.3)*cj1*sj3);
IkReal x1145=(((cj1*pp))+(((-1.0)*cj1*(pz*pz))));
j0eval[0]=x1145;
j0eval[1]=IKsign(x1145);
j0eval[2]=((IKabs((((cj3*py*x1142))+((px*x1143))+(((-1.0)*py*x1144))+(((-1.0)*py*x1142)))))+(IKabs((((py*x1143))+(((-1.0)*cj3*px*x1142))+((px*x1142))+((px*x1144))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1146=pz*pz;
IkReal x1147=(cj1*pp);
IkReal x1148=((1.1)*pz);
IkReal x1149=((0.2125)*cj1);
IkReal x1150=(cj1*x1146);
IkReal x1151=((0.09)*pz*sj1);
j0eval[0]=(x1150+(((-1.0)*x1147)));
j0eval[1]=((IKabs(((((-1.0)*px*x1149))+(((-1.0)*py*x1151))+(((-1.0)*px*x1147))+((px*x1148)))))+(IKabs(((((-1.0)*px*x1151))+((py*x1147))+((py*x1149))+(((-1.0)*py*x1148))))));
j0eval[2]=IKsign(((((-0.09)*x1147))+(((0.09)*x1150))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1152=((0.3)*py);
IkReal x1153=(cj3*sj1);
IkReal x1154=((0.55)*sj1);
IkReal x1155=((0.3)*px);
IkReal x1156=((0.045)*py);
IkReal x1157=(sj1*sj3);
IkReal x1158=((0.045)*px);
IkReal x1159=(pp+(((-1.0)*(pz*pz))));
j0eval[0]=x1159;
j0eval[1]=((IKabs(((((-1.0)*x1156))+((cj3*x1156))+((x1153*x1155))+(((-1.0)*sj3*x1152))+((px*x1154))+((x1157*x1158)))))+(IKabs((x1158+((sj3*x1155))+((x1152*x1153))+(((-1.0)*cj3*x1158))+((x1156*x1157))+((py*x1154))))));
j0eval[2]=IKsign(x1159);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=pz;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x1160=pz*pz;
IkReal x1161=sj3*sj3;
IkReal x1162=cj3*cj3;
IkReal x1163=((4.26078431372549)*cj3);
IkReal x1164=(x1160+(((-1.0)*pp)));
IkReal x1165=((1.20294117647059)*x1162);
IkReal x1166=((1.20294117647059)*x1161);
j0eval[0]=x1164;
j0eval[1]=(((pp*sj3))+(((-1.0)*sj3*x1160))+(((3.98071895424837)*pp))+((pp*x1163))+((pp*x1165))+((pp*x1166))+(((-1.0)*x1160*x1163))+(((-1.0)*x1160*x1165))+(((-1.0)*x1160*x1166))+(((-3.98071895424837)*x1160)));
j0eval[2]=IKsign(x1164);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x1167=pz*pz;
IkReal x1168=((0.33)*cj3);
IkReal x1169=((1.0)*pp);
IkReal x1170=((0.027)*cj3);
IkReal x1171=((0.00405)*sj3);
IkReal x1172=((0.0495)*sj3);
j0eval[0]=(x1167+(((-1.0)*x1169)));
j0eval[1]=((IKabs(((((-1.0)*py*x1172))+(((-1.0)*py*x1168))+(((-0.0495)*px))+(((-1.0)*px*x1170))+(((-1.0)*px*x1171))+(((-0.3925)*py))+((pp*py)))))+(IKabs((((px*x1168))+((px*x1172))+(((-1.0)*py*x1171))+(((-1.0)*py*x1170))+(((-0.0495)*py))+(((-1.0)*px*x1169))+(((0.3925)*px))))));
j0eval[2]=IKsign(((((-0.09)*pp))+(((0.09)*x1167))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x1173=pz*pz;
IkReal x1174=(cj3*py);
IkReal x1175=(py*sj3);
IkReal x1176=((1.0)*pp);
IkReal x1177=(cj3*px);
IkReal x1178=(px*sj3);
j0eval[0]=(x1173+(((-1.0)*x1176)));
j0eval[1]=IKsign(((((-1.1)*pp))+(((1.1)*x1173))));
j0eval[2]=((IKabs(((((-0.33)*x1178))+(((0.027)*x1175))+(((-0.00405)*x1174))+(((0.0495)*x1177))+(((-1.0)*py*x1176))+(((-0.0495)*px))+(((-0.20845)*py)))))+(IKabs(((((0.0495)*py))+(((0.027)*x1178))+(((-0.00405)*x1177))+(((-0.0495)*x1174))+(((-1.0)*px*x1176))+(((0.33)*x1175))+(((-0.20845)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1179=(cj3*py);
IkReal x1180=(py*sj3);
IkReal x1181=((1.0)*pp);
IkReal x1182=(cj3*px);
IkReal x1183=(px*sj3);
CheckValue<IkReal> x1184=IKPowWithIntegerCheck(IKsign(((((-1.1)*pp))+(((1.1)*(pz*pz))))),-1);
if(!x1184.valid){
continue;
}
CheckValue<IkReal> x1185 = IKatan2WithCheck(IkReal(((((0.027)*x1180))+(((0.0495)*x1182))+(((-0.33)*x1183))+(((-0.00405)*x1179))+(((-1.0)*py*x1181))+(((-0.0495)*px))+(((-0.20845)*py)))),((((0.027)*x1183))+(((0.33)*x1180))+(((0.0495)*py))+(((-0.0495)*x1179))+(((-1.0)*px*x1181))+(((-0.00405)*x1182))+(((-0.20845)*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x1185.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1184.value)))+(x1185.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1186=IKsin(j0);
IkReal x1187=IKcos(j0);
IkReal x1188=(px*x1186);
IkReal x1189=(py*x1187);
IkReal x1190=(px*x1187);
IkReal x1191=(py*x1186);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1191+x1190+(((-0.3)*cj3)));
evalcond[1]=((-0.045)+x1188+(((0.045)*cj3))+(((-1.0)*x1189))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x1189))+(((0.09)*x1188))+(((-1.0)*pp))+(((1.1)*x1191))+(((1.1)*x1190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1192=((0.00405)*sj3);
IkReal x1193=((0.33)*cj3);
IkReal x1194=((0.027)*cj3);
IkReal x1195=((0.0495)*sj3);
CheckValue<IkReal> x1196=IKPowWithIntegerCheck(IKsign(((((-0.09)*pp))+(((0.09)*(pz*pz))))),-1);
if(!x1196.valid){
continue;
}
CheckValue<IkReal> x1197 = IKatan2WithCheck(IkReal(((((-1.0)*pp*px))+(((-1.0)*py*x1192))+(((-1.0)*py*x1194))+(((-0.0495)*py))+((px*x1195))+((px*x1193))+(((0.3925)*px)))),((((-1.0)*py*x1193))+(((-1.0)*py*x1195))+(((-0.0495)*px))+(((-1.0)*px*x1194))+(((-1.0)*px*x1192))+(((-0.3925)*py))+((pp*py))),IKFAST_ATAN2_MAGTHRESH);
if(!x1197.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1196.value)))+(x1197.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1198=IKsin(j0);
IkReal x1199=IKcos(j0);
IkReal x1200=(px*x1198);
IkReal x1201=(py*x1199);
IkReal x1202=(px*x1199);
IkReal x1203=(py*x1198);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1203+x1202+(((-0.3)*cj3)));
evalcond[1]=((-0.045)+x1200+(((0.045)*cj3))+(((-1.0)*x1201))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1200))+(((-1.0)*pp))+(((-0.09)*x1201))+(((1.1)*x1203))+(((1.1)*x1202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1204=((0.3)*py);
IkReal x1205=((0.045)*px);
IkReal x1206=((0.045)*py);
IkReal x1207=((0.3)*px);
CheckValue<IkReal> x1208=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1208.valid){
continue;
}
CheckValue<IkReal> x1209 = IKatan2WithCheck(IkReal(((((-0.55)*py))+(((-1.0)*sj3*x1206))+(((-1.0)*sj3*x1207))+(((-1.0)*cj3*x1204))+((cj3*x1205))+(((-1.0)*x1205)))),((((-0.55)*px))+x1206+(((-1.0)*sj3*x1205))+(((-1.0)*cj3*x1207))+(((-1.0)*cj3*x1206))+((sj3*x1204))),IKFAST_ATAN2_MAGTHRESH);
if(!x1209.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1208.value)))+(x1209.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1210=IKsin(j0);
IkReal x1211=IKcos(j0);
IkReal x1212=(px*x1210);
IkReal x1213=(py*x1211);
IkReal x1214=(px*x1211);
IkReal x1215=(py*x1210);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+x1214+x1215+(((-0.3)*cj3)));
evalcond[1]=((-0.045)+x1212+(((0.045)*cj3))+(((-0.3)*sj3))+(((-1.0)*x1213)));
evalcond[2]=((-0.2125)+(((-0.09)*x1213))+(((0.09)*x1212))+(((-1.0)*pp))+(((1.1)*x1215))+(((1.1)*x1214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-1.0)*pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x1216=pz*pz;
IkReal x1217=sj3*sj3;
IkReal x1218=cj3*cj3;
IkReal x1219=((4.26078431372549)*cj3);
IkReal x1220=(pp+(((-1.0)*x1216)));
IkReal x1221=((1.20294117647059)*x1218);
IkReal x1222=((1.0)*x1216);
IkReal x1223=((1.20294117647059)*x1217);
j0eval[0]=x1220;
j0eval[1]=(((pp*x1219))+(((-1.0)*x1216*x1219))+((pp*sj3))+((pp*x1221))+((pp*x1223))+(((3.98071895424837)*pp))+(((-3.98071895424837)*x1216))+(((-1.0)*x1216*x1223))+(((-1.0)*x1216*x1221))+(((-1.0)*sj3*x1222)));
j0eval[2]=IKsign(x1220);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x1224=pz*pz;
IkReal x1225=((0.33)*cj3);
IkReal x1226=((1.0)*pp);
IkReal x1227=((0.027)*cj3);
IkReal x1228=((0.00405)*sj3);
IkReal x1229=((0.0495)*sj3);
j0eval[0]=(x1224+(((-1.0)*x1226)));
j0eval[1]=((IKabs(((((0.0495)*px))+(((-1.0)*py*x1229))+(((-1.0)*py*x1225))+((px*x1228))+((px*x1227))+(((-0.3925)*py))+((pp*py)))))+(IKabs(((((-1.0)*px*x1226))+((py*x1228))+((py*x1227))+(((0.0495)*py))+((px*x1225))+((px*x1229))+(((0.3925)*px))))));
j0eval[2]=IKsign(((((-0.09)*pp))+(((0.09)*x1224))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x1230=pz*pz;
IkReal x1231=(cj3*py);
IkReal x1232=(py*sj3);
IkReal x1233=((1.0)*pp);
IkReal x1234=(cj3*px);
IkReal x1235=(px*sj3);
j0eval[0]=((((-1.0)*x1230))+pp);
j0eval[1]=((IKabs(((((0.0495)*px))+(((-0.0495)*x1234))+(((0.027)*x1232))+(((-1.0)*py*x1233))+(((-0.00405)*x1231))+(((0.33)*x1235))+(((-0.20845)*py)))))+(IKabs(((((-1.0)*px*x1233))+(((0.0495)*x1231))+(((-0.0495)*py))+(((0.027)*x1235))+(((-0.00405)*x1234))+(((-0.33)*x1232))+(((-0.20845)*px))))));
j0eval[2]=IKsign(((((1.1)*pp))+(((-1.1)*x1230))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1236=(cj3*py);
IkReal x1237=(py*sj3);
IkReal x1238=((1.0)*pp);
IkReal x1239=(cj3*px);
IkReal x1240=(px*sj3);
CheckValue<IkReal> x1241 = IKatan2WithCheck(IkReal(((((0.0495)*px))+(((-0.0495)*x1239))+(((0.027)*x1237))+(((0.33)*x1240))+(((-1.0)*py*x1238))+(((-0.00405)*x1236))+(((-0.20845)*py)))),((((-1.0)*px*x1238))+(((0.0495)*x1236))+(((-0.0495)*py))+(((-0.00405)*x1239))+(((0.027)*x1240))+(((-0.33)*x1237))+(((-0.20845)*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x1241.valid){
continue;
}
CheckValue<IkReal> x1242=IKPowWithIntegerCheck(IKsign(((((-1.1)*(pz*pz)))+(((1.1)*pp)))),-1);
if(!x1242.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1241.value)+(((1.5707963267949)*(x1242.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1243=IKcos(j0);
IkReal x1244=IKsin(j0);
IkReal x1245=(px*x1244);
IkReal x1246=((1.0)*x1243);
IkReal x1247=(py*x1244);
evalcond[0]=((-0.045)+x1245+(((0.045)*cj3))+(((-1.0)*py*x1246))+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-1.0)*px*x1246))+(((-0.3)*cj3))+(((-1.0)*x1247)));
evalcond[2]=((-0.2125)+(((0.09)*x1245))+(((-0.09)*py*x1243))+(((-1.1)*x1247))+(((-1.0)*pp))+(((-1.1)*px*x1243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1248=((0.33)*cj3);
IkReal x1249=((0.027)*cj3);
IkReal x1250=((0.00405)*sj3);
IkReal x1251=((0.0495)*sj3);
CheckValue<IkReal> x1252=IKPowWithIntegerCheck(IKsign(((((-0.09)*pp))+(((0.09)*(pz*pz))))),-1);
if(!x1252.valid){
continue;
}
CheckValue<IkReal> x1253 = IKatan2WithCheck(IkReal(((((-1.0)*pp*px))+(((0.0495)*py))+((py*x1249))+((px*x1248))+(((0.3925)*px))+((px*x1251))+((py*x1250)))),((((-1.0)*py*x1248))+(((0.0495)*px))+((px*x1249))+(((-1.0)*py*x1251))+((px*x1250))+(((-0.3925)*py))+((pp*py))),IKFAST_ATAN2_MAGTHRESH);
if(!x1253.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1252.value)))+(x1253.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1254=IKcos(j0);
IkReal x1255=IKsin(j0);
IkReal x1256=(px*x1255);
IkReal x1257=((1.0)*x1254);
IkReal x1258=(py*x1255);
evalcond[0]=((-0.045)+x1256+(((0.045)*cj3))+(((-1.0)*py*x1257))+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*px*x1257))+(((-1.0)*x1258)));
evalcond[2]=((-0.2125)+(((-1.1)*px*x1254))+(((-1.0)*pp))+(((0.09)*x1256))+(((-0.09)*py*x1254))+(((-1.1)*x1258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1259=((0.3)*py);
IkReal x1260=((0.045)*px);
IkReal x1261=((0.045)*py);
IkReal x1262=((0.3)*px);
CheckValue<IkReal> x1263=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1263.valid){
continue;
}
CheckValue<IkReal> x1264 = IKatan2WithCheck(IkReal(((((-0.55)*py))+x1260+(((-1.0)*cj3*x1260))+(((-1.0)*cj3*x1259))+(((-1.0)*sj3*x1261))+((sj3*x1262)))),((((-0.55)*px))+(((-1.0)*cj3*x1262))+((cj3*x1261))+(((-1.0)*sj3*x1259))+(((-1.0)*sj3*x1260))+(((-1.0)*x1261))),IKFAST_ATAN2_MAGTHRESH);
if(!x1264.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1263.value)))+(x1264.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1265=IKcos(j0);
IkReal x1266=IKsin(j0);
IkReal x1267=(px*x1266);
IkReal x1268=((1.0)*x1265);
IkReal x1269=(py*x1266);
evalcond[0]=((-0.045)+x1267+(((0.045)*cj3))+(((-1.0)*py*x1268))+(((-0.3)*sj3)));
evalcond[1]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+(((-1.0)*px*x1268))+(((-1.0)*x1269)));
evalcond[2]=((-0.2125)+(((-1.1)*px*x1265))+(((-1.0)*pp))+(((0.09)*x1267))+(((-0.09)*py*x1265))+(((-1.1)*x1269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-0.85)*cj1);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x1270=((-1.0)*py);
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1270);
rxp0_1=(px*r20);
rxp1_0=(r21*x1270);
rxp1_1=(px*r21);
rxp2_0=(r22*x1270);
rxp2_1=(px*r22);
IkReal x1271=px*px;
IkReal x1272=py*py;
IkReal x1273=(sj1*x1271);
IkReal x1274=(sj1*x1272);
j0eval[0]=(x1273+x1274);
j0eval[1]=IKsign(((((20.0)*x1274))+(((20.0)*x1273))));
j0eval[2]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[4];
IkReal x1275=((-1.0)*py);
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1275);
rxp0_1=(px*r20);
rxp1_0=(r21*x1275);
rxp1_1=(px*r21);
rxp2_0=(r22*x1275);
rxp2_1=(px*r22);
IkReal x1276=px*px;
IkReal x1277=py*py;
j0eval[0]=(x1276+x1277);
j0eval[1]=289.0;
j0eval[2]=sj1;
j0eval[3]=IKsign(((((20.0)*x1277))+(((20.0)*x1276))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*(px*px)))+(((-1.0)*(py*py))));
evalcond[2]=-0.85;
evalcond[3]=-0.85;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x1278=((-1.0)*py);
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1278);
rxp0_1=(px*r20);
rxp1_0=(r21*x1278);
rxp1_1=(px*r21);
rxp2_0=(r22*x1278);
rxp2_1=(px*r22);
sj1=0;
cj1=1.0;
j1=0;
IkReal x1279=py*py;
IkReal x1280=px*px;
j0eval[0]=(x1279+x1280);
j0eval[1]=IKsign(((((18.0)*x1279))+(((18.0)*x1280))));
j0eval[2]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1281=IKPowWithIntegerCheck(IKsign(((((18.0)*(py*py)))+(((18.0)*(px*px))))),-1);
if(!x1281.valid){
continue;
}
CheckValue<IkReal> x1282 = IKatan2WithCheck(IkReal(((187.0)*px)),((-187.0)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x1282.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1281.value)))+(x1282.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1283=IKcos(j0);
IkReal x1284=IKsin(j0);
IkReal x1285=(px*x1284);
IkReal x1286=((1.0)*x1283);
evalcond[0]=(x1285+(((-1.0)*py*x1286)));
evalcond[1]=((((-1.0)*py*x1284))+(((-1.0)*px*x1286)));
evalcond[2]=((-0.935)+(((0.09)*x1285))+(((-0.09)*py*x1283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*(px*px)))+(((-1.0)*(py*py))));
evalcond[2]=-0.85;
evalcond[3]=0.85;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x1287=((-1.0)*py);
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1287);
rxp0_1=(px*r20);
rxp1_0=(r21*x1287);
rxp1_1=(px*r21);
rxp2_0=(r22*x1287);
rxp2_1=(px*r22);
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x1288=py*py;
IkReal x1289=px*px;
j0eval[0]=(x1289+x1288);
j0eval[1]=IKsign(((((18.0)*x1288))+(((18.0)*x1289))));
j0eval[2]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1290=IKPowWithIntegerCheck(IKsign(((((18.0)*(py*py)))+(((18.0)*(px*px))))),-1);
if(!x1290.valid){
continue;
}
CheckValue<IkReal> x1291 = IKatan2WithCheck(IkReal(((187.0)*px)),((-187.0)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x1291.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1290.value)))+(x1291.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1292=IKcos(j0);
IkReal x1293=IKsin(j0);
IkReal x1294=(px*x1293);
IkReal x1295=((1.0)*x1292);
evalcond[0]=(x1294+(((-1.0)*py*x1295)));
evalcond[1]=((((-1.0)*py*x1293))+(((-1.0)*px*x1295)));
evalcond[2]=((-0.935)+(((-0.09)*py*x1292))+(((0.09)*x1294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1296=((17.0)*sj1);
CheckValue<IkReal> x1297 = IKatan2WithCheck(IkReal((py*x1296)),(px*x1296),IKFAST_ATAN2_MAGTHRESH);
if(!x1297.valid){
continue;
}
CheckValue<IkReal> x1298=IKPowWithIntegerCheck(IKsign(((((20.0)*(px*px)))+(((20.0)*(py*py))))),-1);
if(!x1298.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1297.value)+(((1.5707963267949)*(x1298.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1299=IKcos(j0);
IkReal x1300=IKsin(j0);
IkReal x1301=((1.0)*py);
IkReal x1302=((1.1)*sj1);
IkReal x1303=(px*x1300);
IkReal x1304=(px*x1299);
IkReal x1305=(py*x1300);
evalcond[0]=(x1303+(((-1.0)*x1299*x1301)));
evalcond[1]=((-0.85)+((sj1*x1305))+((sj1*x1304)));
evalcond[2]=((((-1.0)*x1304))+(((-1.0)*x1300*x1301))+(((0.85)*sj1)));
evalcond[3]=((-0.935)+(((0.09)*x1303))+(((-0.09)*py*x1299))+((x1302*x1305))+((x1302*x1304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1306=((20.0)*sj1);
CheckValue<IkReal> x1307 = IKatan2WithCheck(IkReal(((17.0)*py)),((17.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x1307.valid){
continue;
}
CheckValue<IkReal> x1308=IKPowWithIntegerCheck(IKsign((((x1306*(px*px)))+((x1306*(py*py))))),-1);
if(!x1308.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1307.value)+(((1.5707963267949)*(x1308.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1309=IKcos(j0);
IkReal x1310=IKsin(j0);
IkReal x1311=((1.0)*py);
IkReal x1312=((1.1)*sj1);
IkReal x1313=(px*x1310);
IkReal x1314=(px*x1309);
IkReal x1315=(py*x1310);
evalcond[0]=(x1313+(((-1.0)*x1309*x1311)));
evalcond[1]=((-0.85)+((sj1*x1314))+((sj1*x1315)));
evalcond[2]=((((-1.0)*x1314))+(((0.85)*sj1))+(((-1.0)*x1310*x1311)));
evalcond[3]=((-0.935)+(((0.09)*x1313))+(((-0.09)*py*x1309))+((x1312*x1315))+((x1312*x1314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-0.85)+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3=0;
sj3=0;
cj3=1.0;
j1=0;
sj1=0;
cj1=1.0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3=0;
sj3=0;
cj3=1.0;
j1=0;
sj1=0;
cj1=1.0;
j0eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1317 = IKatan2WithCheck(IkReal(((-0.09)*py)),((0.09)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x1317.valid){
continue;
}
IkReal x1316=x1317.value;
j0array[0]=((-1.0)*x1316);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1316)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1318=IKcos(j0);
IkReal x1319=IKsin(j0);
IkReal x1320=((1.0)*x1318);
evalcond[0]=(((px*x1319))+(((-1.0)*py*x1320)));
evalcond[1]=((((-1.0)*py*x1319))+(((-1.0)*px*x1320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1322 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x1322.valid){
continue;
}
IkReal x1321=x1322.value;
j0array[0]=((-1.0)*x1321);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1321)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1323=IKsin(j0);
IkReal x1324=IKcos(j0);
evalcond[0]=((((-1.0)*px*x1324))+(((-1.0)*py*x1323)));
evalcond[1]=((((0.09)*px*x1323))+(((-0.09)*py*x1324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-0.85)+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3=0;
sj3=0;
cj3=1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3=0;
sj3=0;
cj3=1.0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j0eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1326 = IKatan2WithCheck(IkReal(((-0.09)*py)),((0.09)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x1326.valid){
continue;
}
IkReal x1325=x1326.value;
j0array[0]=((-1.0)*x1325);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1325)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1327=IKsin(j0);
IkReal x1328=IKcos(j0);
evalcond[0]=(((py*x1327))+((px*x1328)));
evalcond[1]=(((px*x1327))+(((-1.0)*py*x1328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1330 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1330.valid){
continue;
}
IkReal x1329=x1330.value;
j0array[0]=((-1.0)*x1329);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1329)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1331=IKsin(j0);
IkReal x1332=IKcos(j0);
IkReal x1333=(px*x1331);
IkReal x1334=(py*x1332);
evalcond[0]=(x1333+(((-1.0)*x1334)));
evalcond[1]=((((-0.09)*x1334))+(((0.09)*x1333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1335=((0.3)*py);
IkReal x1336=(cj3*sj1);
IkReal x1337=((0.55)*sj1);
IkReal x1338=((0.3)*px);
IkReal x1339=((0.045)*py);
IkReal x1340=(sj1*sj3);
IkReal x1341=((0.045)*px);
CheckValue<IkReal> x1342=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1342.valid){
continue;
}
CheckValue<IkReal> x1343 = IKatan2WithCheck(IkReal((x1341+((x1339*x1340))+((x1335*x1336))+((py*x1337))+(((-1.0)*cj3*x1341))+((sj3*x1338)))),(((px*x1337))+((x1336*x1338))+((x1340*x1341))+((cj3*x1339))+(((-1.0)*sj3*x1335))+(((-1.0)*x1339))),IKFAST_ATAN2_MAGTHRESH);
if(!x1343.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1342.value)))+(x1343.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1344=IKsin(j0);
IkReal x1345=IKcos(j0);
IkReal x1346=((1.1)*sj1);
IkReal x1347=((0.3)*cj3);
IkReal x1348=((0.045)*sj3);
IkReal x1349=((1.0)*cj1);
IkReal x1350=(cj1*pz);
IkReal x1351=(px*x1344);
IkReal x1352=(px*x1345);
IkReal x1353=(py*x1344);
IkReal x1354=(py*x1345);
evalcond[0]=(((pz*sj1))+(((-1.0)*x1349*x1353))+(((-1.0)*x1349*x1352)));
evalcond[1]=((-0.045)+x1351+(((-1.0)*x1354))+(((0.045)*cj3))+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+x1350+((sj1*x1352))+((sj1*x1353))+(((-1.0)*x1348))+(((-1.0)*x1347)));
evalcond[3]=((((-1.0)*x1353))+(((-1.0)*x1352))+((sj1*x1348))+((sj1*x1347))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((-0.09)*x1354))+(((0.09)*x1351))+(((-1.0)*pp))+((x1346*x1353))+((x1346*x1352))+(((1.1)*x1350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1355=((1.1)*pz);
IkReal x1356=((0.2125)*cj1);
IkReal x1357=((0.09)*cj1);
IkReal x1358=(cj1*pp);
IkReal x1359=((0.09)*pz*sj1);
CheckValue<IkReal> x1360 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1358))+(((-1.0)*px*x1356))+((px*x1355))+(((-1.0)*py*x1359)))),((((-1.0)*px*x1359))+((py*x1358))+((py*x1356))+(((-1.0)*py*x1355))),IKFAST_ATAN2_MAGTHRESH);
if(!x1360.valid){
continue;
}
CheckValue<IkReal> x1361=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*x1357))+((x1357*(pz*pz))))),-1);
if(!x1361.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1360.value)+(((1.5707963267949)*(x1361.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1362=IKsin(j0);
IkReal x1363=IKcos(j0);
IkReal x1364=((1.1)*sj1);
IkReal x1365=((0.3)*cj3);
IkReal x1366=((0.045)*sj3);
IkReal x1367=((1.0)*cj1);
IkReal x1368=(cj1*pz);
IkReal x1369=(px*x1362);
IkReal x1370=(px*x1363);
IkReal x1371=(py*x1362);
IkReal x1372=(py*x1363);
evalcond[0]=((((-1.0)*x1367*x1371))+(((-1.0)*x1367*x1370))+((pz*sj1)));
evalcond[1]=((-0.045)+x1369+(((0.045)*cj3))+(((-1.0)*x1372))+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+x1368+((sj1*x1370))+((sj1*x1371))+(((-1.0)*x1366))+(((-1.0)*x1365)));
evalcond[3]=((((-1.0)*x1371))+(((-1.0)*x1370))+((sj1*x1366))+((sj1*x1365))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+(((1.1)*x1368))+(((0.09)*x1369))+(((-1.0)*pp))+(((-0.09)*x1372))+((x1364*x1371))+((x1364*x1370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1373=((0.045)*cj1);
IkReal x1374=(pz*sj1);
IkReal x1375=((0.3)*cj1*sj3);
CheckValue<IkReal> x1376=IKPowWithIntegerCheck(IKsign((((cj1*pp))+(((-1.0)*cj1*(pz*pz))))),-1);
if(!x1376.valid){
continue;
}
CheckValue<IkReal> x1377 = IKatan2WithCheck(IkReal((((px*x1375))+((px*x1373))+((py*x1374))+(((-1.0)*cj3*px*x1373)))),(((px*x1374))+((cj3*py*x1373))+(((-1.0)*py*x1375))+(((-1.0)*py*x1373))),IKFAST_ATAN2_MAGTHRESH);
if(!x1377.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1376.value)))+(x1377.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1378=IKsin(j0);
IkReal x1379=IKcos(j0);
IkReal x1380=((1.1)*sj1);
IkReal x1381=((0.3)*cj3);
IkReal x1382=((0.045)*sj3);
IkReal x1383=((1.0)*cj1);
IkReal x1384=(cj1*pz);
IkReal x1385=(px*x1378);
IkReal x1386=(px*x1379);
IkReal x1387=(py*x1378);
IkReal x1388=(py*x1379);
evalcond[0]=((((-1.0)*x1383*x1387))+(((-1.0)*x1383*x1386))+((pz*sj1)));
evalcond[1]=((-0.045)+x1385+(((0.045)*cj3))+(((-1.0)*x1388))+(((-0.3)*sj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1382))+(((-1.0)*x1381))+x1384+((sj1*x1387))+((sj1*x1386)));
evalcond[3]=(((sj1*x1382))+((sj1*x1381))+(((-1.0)*x1386))+(((-1.0)*x1387))+(((0.55)*sj1)));
evalcond[4]=((-0.2125)+((x1380*x1386))+((x1380*x1387))+(((-0.09)*x1388))+(((1.1)*x1384))+(((-1.0)*pp))+(((0.09)*x1385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1389=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+pz);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1389;
evalcond[3]=x1389;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
IkReal x1390=((0.3)*sj3);
IkReal x1391=(px*sj2);
IkReal x1392=((0.045)*py);
IkReal x1393=(pp+(((-1.0)*(pz*pz))));
IkReal x1394=(cj3*x1392);
IkReal x1395=((0.045)*cj2*px);
j0eval[0]=x1393;
j0eval[1]=((IKabs((((cj2*x1392))+(((-1.0)*x1390*x1391))+(((0.045)*cj3*x1391))+(((-1.0)*cj2*x1394))+(((-0.045)*x1391))+((cj2*py*x1390)))))+(IKabs((x1395+((py*sj2*x1390))+((sj2*x1392))+(((-1.0)*cj3*x1395))+((cj2*px*x1390))+(((-1.0)*sj2*x1394))))));
j0eval[2]=IKsign(x1393);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj1=0;
cj1=1.0;
j1=0;
IkReal x1396=((((-1.0)*cj2*pp))+((cj2*(pz*pz))));
j0eval[0]=x1396;
j0eval[1]=IKsign(x1396);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj1=0;
cj1=1.0;
j1=0;
IkReal x1397=((((-1.0)*pp*sj2))+((sj2*(pz*pz))));
j0eval[0]=x1397;
j0eval[1]=IKsign(x1397);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1398=x1389;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1398;
evalcond[3]=x1398;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=1.0;
j2=0;
IkReal x1399=((20.0)*sj3);
IkReal x1400=((3.0)*px);
IkReal x1401=((3.0)*py);
IkReal x1402=(pp+(((-1.0)*(pz*pz))));
j0eval[0]=x1402;
j0eval[1]=((IKabs(((((-1.0)*cj3*x1401))+((py*x1399))+x1401)))+(IKabs((((px*x1399))+(((-1.0)*cj3*x1400))+x1400))));
j0eval[2]=IKsign(x1402);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=1.0;
j2=0;
IkReal x1403=pz*pz;
IkReal x1404=((80.0)*pp);
IkReal x1405=((88.0)*pz);
j0eval[0]=((((-1.0)*pp))+x1403);
j0eval[1]=IKsign(((((-9.0)*pp))+(((9.0)*x1403))));
j0eval[2]=((IKabs((((py*x1405))+(((-17.0)*py))+(((-1.0)*py*x1404)))))+(IKabs((((px*x1405))+(((-1.0)*px*x1404))+(((-17.0)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-0.85)+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=1.0;
j2=0;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=1.0;
j2=0;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1407 = IKatan2WithCheck(IkReal(((0.09)*px)),((0.09)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x1407.valid){
continue;
}
IkReal x1406=x1407.value;
j0array[0]=((-1.0)*x1406);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1406)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1408=IKcos(j0);
IkReal x1409=IKsin(j0);
IkReal x1410=((1.0)*x1408);
evalcond[0]=(((px*x1409))+(((-1.0)*py*x1410)));
evalcond[1]=((((-1.0)*py*x1409))+(((-1.0)*px*x1410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1412 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x1412.valid){
continue;
}
IkReal x1411=x1412.value;
j0array[0]=((-1.0)*x1411);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1411)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1413=IKcos(j0);
IkReal x1414=IKsin(j0);
IkReal x1415=(py*x1414);
IkReal x1416=(px*x1413);
evalcond[0]=((((-1.0)*x1416))+(((-1.0)*x1415)));
evalcond[1]=((((0.09)*x1416))+(((0.09)*x1415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1417=((110.0)*pz);
IkReal x1418=((100.0)*pp);
CheckValue<IkReal> x1419=IKPowWithIntegerCheck(IKsign(((((-9.0)*pp))+(((9.0)*(pz*pz))))),-1);
if(!x1419.valid){
continue;
}
CheckValue<IkReal> x1420 = IKatan2WithCheck(IkReal((((py*x1417))+(((-21.25)*py))+(((-1.0)*py*x1418)))),(((px*x1417))+(((-21.25)*px))+(((-1.0)*px*x1418))),IKFAST_ATAN2_MAGTHRESH);
if(!x1420.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1419.value)))+(x1420.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1421=IKcos(j0);
IkReal x1422=IKsin(j0);
IkReal x1423=((1.0)*py);
IkReal x1424=(px*x1421);
evalcond[0]=((((-1.0)*x1421*x1423))+((px*x1422)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+(((-1.0)*x1424))+(((-1.0)*x1422*x1423))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*py*x1422))+(((-1.0)*pp))+(((1.1)*pz))+(((0.09)*x1424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1425=((0.3)*sj3);
IkReal x1426=((0.045)*px);
IkReal x1427=((0.045)*py);
CheckValue<IkReal> x1428=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1428.valid){
continue;
}
CheckValue<IkReal> x1429 = IKatan2WithCheck(IkReal((x1427+(((-1.0)*cj3*x1427))+((py*x1425)))),(x1426+((px*x1425))+(((-1.0)*cj3*x1426))),IKFAST_ATAN2_MAGTHRESH);
if(!x1429.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1428.value)))+(x1429.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1430=IKcos(j0);
IkReal x1431=IKsin(j0);
IkReal x1432=((1.0)*py);
IkReal x1433=(px*x1430);
evalcond[0]=(((px*x1431))+(((-1.0)*x1430*x1432)));
evalcond[1]=((0.045)+(((-1.0)*x1433))+(((-1.0)*x1431*x1432))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1433))+(((-1.0)*pp))+(((1.1)*pz))+(((0.09)*py*x1431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1434=x1389;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1434;
evalcond[3]=x1434;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1435=((20.0)*sj3);
IkReal x1436=((3.0)*px);
IkReal x1437=((3.0)*py);
IkReal x1438=((((-1.0)*pp))+(pz*pz));
j0eval[0]=x1438;
j0eval[1]=((IKabs(((((-1.0)*cj3*x1437))+((py*x1435))+x1437)))+(IKabs((((px*x1435))+(((-1.0)*cj3*x1436))+x1436))));
j0eval[2]=IKsign(x1438);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1439=pz*pz;
IkReal x1440=((80.0)*pp);
IkReal x1441=((88.0)*pz);
j0eval[0]=((((-1.0)*x1439))+pp);
j0eval[1]=IKsign(((((-9.0)*x1439))+(((9.0)*pp))));
j0eval[2]=((IKabs(((((-1.0)*py*x1440))+((py*x1441))+(((-17.0)*py)))))+(IKabs(((((-1.0)*px*x1440))+((px*x1441))+(((-17.0)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-0.85)+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1443 = IKatan2WithCheck(IkReal(((-0.09)*px)),((-0.09)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x1443.valid){
continue;
}
IkReal x1442=x1443.value;
j0array[0]=((-1.0)*x1442);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1442)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1444=IKsin(j0);
IkReal x1445=IKcos(j0);
evalcond[0]=(((py*x1444))+((px*x1445)));
evalcond[1]=((((-1.0)*py*x1445))+((px*x1444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1447 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1447.valid){
continue;
}
IkReal x1446=x1447.value;
j0array[0]=((-1.0)*x1446);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1446)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1448=IKcos(j0);
IkReal x1449=IKsin(j0);
evalcond[0]=((((-1.0)*py*x1448))+((px*x1449)));
evalcond[1]=((((-0.09)*py*x1449))+(((-0.09)*px*x1448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1450=((110.0)*pz);
IkReal x1451=((100.0)*pp);
CheckValue<IkReal> x1452 = IKatan2WithCheck(IkReal((((py*x1450))+(((-21.25)*py))+(((-1.0)*py*x1451)))),(((px*x1450))+(((-1.0)*px*x1451))+(((-21.25)*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x1452.valid){
continue;
}
CheckValue<IkReal> x1453=IKPowWithIntegerCheck(IKsign(((((9.0)*pp))+(((-9.0)*(pz*pz))))),-1);
if(!x1453.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1452.value)+(((1.5707963267949)*(x1453.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1454=IKsin(j0);
IkReal x1455=IKcos(j0);
IkReal x1456=(px*x1455);
IkReal x1457=(py*x1454);
evalcond[0]=(((px*x1454))+(((-1.0)*py*x1455)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+x1456+x1457+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-0.09)*x1457))+(((-0.09)*x1456))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1458=((0.3)*sj3);
IkReal x1459=((0.045)*px);
IkReal x1460=((0.045)*py);
CheckValue<IkReal> x1461 = IKatan2WithCheck(IkReal((((py*x1458))+(((-1.0)*cj3*x1460))+x1460)),((((-1.0)*cj3*x1459))+((px*x1458))+x1459),IKFAST_ATAN2_MAGTHRESH);
if(!x1461.valid){
continue;
}
CheckValue<IkReal> x1462=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1462.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1461.value)+(((1.5707963267949)*(x1462.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1463=IKsin(j0);
IkReal x1464=IKcos(j0);
IkReal x1465=(px*x1464);
IkReal x1466=(py*x1463);
evalcond[0]=((((-1.0)*py*x1464))+((px*x1463)));
evalcond[1]=((0.045)+(((-0.045)*cj3))+x1465+x1466+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz))+(((-0.09)*x1465))+(((-0.09)*x1466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1467=x1389;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1467;
evalcond[3]=x1467;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x1468=((20.0)*sj3);
IkReal x1469=((3.0)*px);
IkReal x1470=((3.0)*py);
IkReal x1471=((((-1.0)*pp))+(pz*pz));
j0eval[0]=x1471;
j0eval[1]=((IKabs(((((-1.0)*py*x1468))+((cj3*x1470))+(((-1.0)*x1470)))))+(IKabs(((((-1.0)*cj3*x1469))+((px*x1468))+x1469))));
j0eval[2]=IKsign(x1471);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x1472=pz*pz;
IkReal x1473=((80.0)*pp);
IkReal x1474=((88.0)*pz);
j0eval[0]=((((-1.0)*x1472))+pp);
j0eval[1]=IKsign(((((-9.0)*x1472))+(((9.0)*pp))));
j0eval[2]=((IKabs(((((17.0)*py))+(((-1.0)*py*x1474))+((py*x1473)))))+(IKabs(((((-1.0)*px*x1473))+(((-17.0)*px))+((px*x1474))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-0.85)+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1476 = IKatan2WithCheck(IkReal(((0.09)*py)),((-0.09)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x1476.valid){
continue;
}
IkReal x1475=x1476.value;
j0array[0]=((-1.0)*x1475);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1475)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1477=IKsin(j0);
IkReal x1478=IKcos(j0);
evalcond[0]=(((py*x1477))+((px*x1478)));
evalcond[1]=((((-1.0)*py*x1478))+((px*x1477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1480 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1480.valid){
continue;
}
IkReal x1479=x1480.value;
j0array[0]=((-1.0)*x1479);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1479)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1481=IKcos(j0);
IkReal x1482=IKsin(j0);
IkReal x1483=(px*x1482);
IkReal x1484=(py*x1481);
evalcond[0]=((((-1.0)*x1484))+x1483);
evalcond[1]=((((0.09)*x1484))+(((-0.09)*x1483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1485=((110.0)*pz);
IkReal x1486=((100.0)*pp);
CheckValue<IkReal> x1487 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1486))+(((-21.25)*px))+((px*x1485)))),(((py*x1486))+(((21.25)*py))+(((-1.0)*py*x1485))),IKFAST_ATAN2_MAGTHRESH);
if(!x1487.valid){
continue;
}
CheckValue<IkReal> x1488=IKPowWithIntegerCheck(IKsign(((((9.0)*pp))+(((-9.0)*(pz*pz))))),-1);
if(!x1488.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1487.value)+(((1.5707963267949)*(x1488.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1489=IKsin(j0);
IkReal x1490=IKcos(j0);
IkReal x1491=(px*x1489);
IkReal x1492=(py*x1490);
evalcond[0]=(((py*x1489))+((px*x1490)));
evalcond[1]=((0.045)+(((-1.0)*x1492))+(((-0.045)*cj3))+x1491+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1492))+(((-0.09)*x1491))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1493=((0.3)*sj3);
IkReal x1494=((0.045)*px);
IkReal x1495=((0.045)*py);
CheckValue<IkReal> x1496 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x1494))+x1494+((px*x1493)))),(((cj3*x1495))+(((-1.0)*x1495))+(((-1.0)*py*x1493))),IKFAST_ATAN2_MAGTHRESH);
if(!x1496.valid){
continue;
}
CheckValue<IkReal> x1497=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1497.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1496.value)+(((1.5707963267949)*(x1497.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1498=IKsin(j0);
IkReal x1499=IKcos(j0);
IkReal x1500=(px*x1498);
IkReal x1501=(py*x1499);
evalcond[0]=(((py*x1498))+((px*x1499)));
evalcond[1]=((0.045)+(((-1.0)*x1501))+(((-0.045)*cj3))+x1500+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x1500))+(((0.09)*x1501))+(((-1.0)*pp))+(((1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1502=x1389;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1502;
evalcond[3]=x1502;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1503=((20.0)*sj3);
IkReal x1504=((3.0)*px);
IkReal x1505=((3.0)*py);
IkReal x1506=((((-1.0)*pp))+(pz*pz));
j0eval[0]=x1506;
j0eval[1]=((IKabs((x1505+(((-1.0)*cj3*x1505))+((py*x1503)))))+(IKabs(((((-1.0)*x1504))+((cj3*x1504))+(((-1.0)*px*x1503))))));
j0eval[2]=IKsign(x1506);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1507=pz*pz;
IkReal x1508=((80.0)*pp);
IkReal x1509=((88.0)*pz);
j0eval[0]=((((-1.0)*pp))+x1507);
j0eval[1]=IKsign(((((-9.0)*pp))+(((9.0)*x1507))));
j0eval[2]=((IKabs(((((17.0)*py))+((py*x1508))+(((-1.0)*py*x1509)))))+(IKabs(((((-1.0)*px*x1508))+((px*x1509))+(((-17.0)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-0.85)+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1511 = IKatan2WithCheck(IkReal(((-0.09)*py)),((0.09)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x1511.valid){
continue;
}
IkReal x1510=x1511.value;
j0array[0]=((-1.0)*x1510);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1510)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1512=IKcos(j0);
IkReal x1513=IKsin(j0);
IkReal x1514=((1.0)*x1512);
evalcond[0]=((((-1.0)*py*x1514))+((px*x1513)));
evalcond[1]=((((-1.0)*py*x1513))+(((-1.0)*px*x1514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1516 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x1516.valid){
continue;
}
IkReal x1515=x1516.value;
j0array[0]=((-1.0)*x1515);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1515)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1517=IKsin(j0);
IkReal x1518=IKcos(j0);
evalcond[0]=((((-1.0)*py*x1517))+(((-1.0)*px*x1518)));
evalcond[1]=((((-0.09)*py*x1518))+(((0.09)*px*x1517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1519=((110.0)*pz);
IkReal x1520=((100.0)*pp);
CheckValue<IkReal> x1521=IKPowWithIntegerCheck(IKsign(((((-9.0)*pp))+(((9.0)*(pz*pz))))),-1);
if(!x1521.valid){
continue;
}
CheckValue<IkReal> x1522 = IKatan2WithCheck(IkReal(((((-21.25)*px))+(((-1.0)*px*x1520))+((px*x1519)))),((((21.25)*py))+(((-1.0)*py*x1519))+((py*x1520))),IKFAST_ATAN2_MAGTHRESH);
if(!x1522.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1521.value)))+(x1522.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1523=IKsin(j0);
IkReal x1524=IKcos(j0);
IkReal x1525=(px*x1523);
IkReal x1526=((1.0)*x1524);
evalcond[0]=((((-1.0)*px*x1526))+(((-1.0)*py*x1523)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+x1525+(((-1.0)*py*x1526))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1525))+(((-1.0)*pp))+(((1.1)*pz))+(((-0.09)*py*x1524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1527=((0.3)*sj3);
IkReal x1528=((0.045)*px);
IkReal x1529=((0.045)*py);
CheckValue<IkReal> x1530=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1530.valid){
continue;
}
CheckValue<IkReal> x1531 = IKatan2WithCheck(IkReal(((((-1.0)*x1528))+((cj3*x1528))+(((-1.0)*px*x1527)))),(x1529+(((-1.0)*cj3*x1529))+((py*x1527))),IKFAST_ATAN2_MAGTHRESH);
if(!x1531.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1530.value)))+(x1531.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1532=IKsin(j0);
IkReal x1533=IKcos(j0);
IkReal x1534=(px*x1532);
IkReal x1535=((1.0)*x1533);
evalcond[0]=((((-1.0)*px*x1535))+(((-1.0)*py*x1532)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+x1534+(((-1.0)*py*x1535))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1534))+(((-1.0)*pp))+(((1.1)*pz))+(((-0.09)*py*x1533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-0.85)+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(((((-1.0)*cj2*py))+((px*sj2)))))+(IKabs((((cj2*px))+((py*sj2))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x1536=((1.0)*py);
j0eval[0]=((IKabs(((((-1.0)*sj2*x1536))+(((-1.0)*cj2*px)))))+(IKabs((((px*sj2))+(((-1.0)*cj2*x1536))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1537=((1.0)*cj2);
CheckValue<IkReal> x1539 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1537))+(((-1.0)*py*sj2)))),(((px*sj2))+(((-1.0)*py*x1537))),IKFAST_ATAN2_MAGTHRESH);
if(!x1539.valid){
continue;
}
IkReal x1538=x1539.value;
j0array[0]=((-1.0)*x1538);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1538)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1540=IKcos(j0);
IkReal x1541=IKsin(j0);
IkReal x1542=((0.09)*py);
IkReal x1543=(px*x1541);
IkReal x1544=((1.0)*x1540);
IkReal x1545=(sj2*x1540);
IkReal x1546=(py*x1541);
evalcond[0]=((((-1.0)*py*x1544))+x1543);
evalcond[1]=((((-1.0)*x1546))+(((-1.0)*px*x1544)));
evalcond[2]=((((-1.0)*cj2*py*x1544))+((cj2*x1543))+((px*x1545))+((sj2*x1546)));
evalcond[3]=(((cj2*x1541*x1542))+(((-0.09)*sj2*x1543))+(((0.09)*cj2*px*x1540))+((x1542*x1545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1548 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*py))+((px*sj2)))),(((cj2*px))+((py*sj2))),IKFAST_ATAN2_MAGTHRESH);
if(!x1548.valid){
continue;
}
IkReal x1547=x1548.value;
j0array[0]=((-1.0)*x1547);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1547)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1549=IKcos(j0);
IkReal x1550=IKsin(j0);
IkReal x1551=((0.09)*sj2);
IkReal x1552=(cj2*px);
IkReal x1553=(px*x1550);
IkReal x1554=((1.0)*x1549);
IkReal x1555=(py*x1550);
evalcond[0]=((((-1.0)*py*x1554))+x1553);
evalcond[1]=((((-1.0)*x1555))+(((-1.0)*px*x1554)));
evalcond[2]=((((-1.0)*x1552*x1554))+(((-1.0)*cj2*x1555))+(((-1.0)*py*sj2*x1554))+((sj2*x1553)));
evalcond[3]=(((py*x1549*x1551))+(((0.09)*x1549*x1552))+(((0.09)*cj2*x1555))+(((-1.0)*x1551*x1553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1557 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x1557.valid){
continue;
}
IkReal x1556=x1557.value;
j0array[0]=((-1.0)*x1556);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1556)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1558=IKcos(j0);
IkReal x1559=IKsin(j0);
IkReal x1560=(py*sj2);
IkReal x1561=(px*sj2);
IkReal x1562=(cj2*px);
IkReal x1563=((1.0)*x1558);
IkReal x1564=((0.09)*x1558);
IkReal x1565=(py*x1559);
evalcond[0]=((((-1.0)*px*x1563))+(((-1.0)*x1565)));
evalcond[1]=((((-1.0)*cj2*py*x1563))+((x1559*x1560))+((x1559*x1562))+((x1558*x1561)));
evalcond[2]=((((-1.0)*x1560*x1563))+(((-1.0)*x1562*x1563))+(((-1.0)*cj2*x1565))+((x1559*x1561)));
evalcond[3]=(((x1560*x1564))+(((-0.09)*x1559*x1561))+((x1562*x1564))+(((0.09)*cj2*x1565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1566=cj2*cj2;
IkReal x1567=((0.045)*px);
IkReal x1568=(cj2*sj2);
IkReal x1569=((0.3)*sj3);
IkReal x1570=((0.045)*cj3);
IkReal x1571=((0.045)*py);
IkReal x1572=(py*x1566);
CheckValue<IkReal> x1573=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*sj2))+((sj2*(pz*pz))))),-1);
if(!x1573.valid){
continue;
}
CheckValue<IkReal> x1574 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1566*x1569))+(((-1.0)*x1566*x1567))+((cj3*x1566*x1567))+(((-1.0)*x1568*x1571))+x1567+((px*x1569))+((py*x1568*x1570))+(((-1.0)*cj3*x1567))+(((-1.0)*py*x1568*x1569)))),(((x1566*x1571))+((x1569*x1572))+(((-1.0)*x1570*x1572))+(((-1.0)*x1567*x1568))+(((-1.0)*py*x1569))+(((-1.0)*px*x1568*x1569))+((cj3*x1567*x1568))+((py*x1570))+(((-1.0)*x1571))),IKFAST_ATAN2_MAGTHRESH);
if(!x1574.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1573.value)))+(x1574.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1575=IKcos(j0);
IkReal x1576=IKsin(j0);
IkReal x1577=((0.045)*cj2);
IkReal x1578=((0.09)*sj2);
IkReal x1579=((0.3)*sj3);
IkReal x1580=((0.045)*cj3);
IkReal x1581=((0.09)*cj2);
IkReal x1582=((1.0)*cj2);
IkReal x1583=(px*x1576);
IkReal x1584=(px*x1575);
IkReal x1585=(py*x1575);
IkReal x1586=(py*x1576);
evalcond[0]=((((0.045)*sj2))+x1583+(((-1.0)*x1585))+(((-1.0)*sj2*x1580))+((sj2*x1579)));
evalcond[1]=(((cj2*x1579))+x1577+(((-1.0)*x1586))+(((-1.0)*x1584))+(((-1.0)*cj3*x1577)));
evalcond[2]=(((sj2*x1586))+((sj2*x1584))+((cj2*x1583))+(((-1.0)*x1582*x1585)));
evalcond[3]=((0.045)+(((-1.0)*x1580))+((sj2*x1583))+x1579+(((-1.0)*sj2*x1585))+(((-1.0)*x1582*x1586))+(((-1.0)*x1582*x1584)));
evalcond[4]=((-0.2125)+(((-1.0)*x1578*x1583))+(((-1.0)*pp))+(((1.1)*pz))+((x1578*x1585))+((x1581*x1584))+((x1581*x1586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1587=cj2*cj2;
IkReal x1588=((0.045)*px);
IkReal x1589=(cj2*sj2);
IkReal x1590=((0.045)*cj3);
IkReal x1591=((0.3)*sj3);
IkReal x1592=(py*x1587);
CheckValue<IkReal> x1593=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*pp))+((cj2*(pz*pz))))),-1);
if(!x1593.valid){
continue;
}
CheckValue<IkReal> x1594 = IKatan2WithCheck(IkReal((((px*x1589*x1591))+((x1590*x1592))+(((-1.0)*cj3*x1588*x1589))+(((-0.045)*x1592))+((x1588*x1589))+(((-1.0)*x1591*x1592)))),(((py*x1589*x1590))+(((-1.0)*px*x1587*x1591))+((cj3*x1587*x1588))+(((-1.0)*py*x1589*x1591))+(((-1.0)*x1587*x1588))+(((-0.045)*py*x1589))),IKFAST_ATAN2_MAGTHRESH);
if(!x1594.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1593.value)))+(x1594.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1595=IKcos(j0);
IkReal x1596=IKsin(j0);
IkReal x1597=((0.045)*cj2);
IkReal x1598=((0.09)*sj2);
IkReal x1599=((0.3)*sj3);
IkReal x1600=((0.045)*cj3);
IkReal x1601=((0.09)*cj2);
IkReal x1602=((1.0)*cj2);
IkReal x1603=(px*x1596);
IkReal x1604=(px*x1595);
IkReal x1605=(py*x1595);
IkReal x1606=(py*x1596);
evalcond[0]=(((sj2*x1599))+(((-1.0)*x1605))+x1603+(((0.045)*sj2))+(((-1.0)*sj2*x1600)));
evalcond[1]=((((-1.0)*cj3*x1597))+(((-1.0)*x1606))+(((-1.0)*x1604))+x1597+((cj2*x1599)));
evalcond[2]=(((sj2*x1606))+((sj2*x1604))+((cj2*x1603))+(((-1.0)*x1602*x1605)));
evalcond[3]=((0.045)+((sj2*x1603))+(((-1.0)*x1600))+x1599+(((-1.0)*sj2*x1605))+(((-1.0)*x1602*x1606))+(((-1.0)*x1602*x1604)));
evalcond[4]=((-0.2125)+((x1601*x1606))+((x1601*x1604))+(((-1.0)*pp))+((x1598*x1605))+(((1.1)*pz))+(((-1.0)*x1598*x1603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1607=(px*sj2);
IkReal x1608=((0.3)*sj3);
IkReal x1609=(cj2*py);
IkReal x1610=(py*sj2);
IkReal x1611=((0.045)*cj3*py);
IkReal x1612=((0.045)*cj2*px);
CheckValue<IkReal> x1613 = IKatan2WithCheck(IkReal(((((-1.0)*x1607*x1608))+(((-0.045)*x1607))+(((0.045)*cj3*x1607))+((x1608*x1609))+(((0.045)*x1609))+(((-0.045)*cj3*x1609)))),((((-0.045)*cj3*x1610))+(((-1.0)*cj3*x1612))+x1612+((cj2*px*x1608))+((x1608*x1610))+(((0.045)*x1610))),IKFAST_ATAN2_MAGTHRESH);
if(!x1613.valid){
continue;
}
CheckValue<IkReal> x1614=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1614.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1613.value)+(((1.5707963267949)*(x1614.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1615=IKcos(j0);
IkReal x1616=IKsin(j0);
IkReal x1617=((0.045)*cj2);
IkReal x1618=((0.09)*sj2);
IkReal x1619=((0.3)*sj3);
IkReal x1620=((0.045)*cj3);
IkReal x1621=((0.09)*cj2);
IkReal x1622=((1.0)*cj2);
IkReal x1623=(px*x1616);
IkReal x1624=(px*x1615);
IkReal x1625=(py*x1615);
IkReal x1626=(py*x1616);
evalcond[0]=((((-1.0)*x1625))+((sj2*x1619))+x1623+(((0.045)*sj2))+(((-1.0)*sj2*x1620)));
evalcond[1]=((((-1.0)*cj3*x1617))+(((-1.0)*x1624))+(((-1.0)*x1626))+x1617+((cj2*x1619)));
evalcond[2]=(((sj2*x1624))+((sj2*x1626))+(((-1.0)*x1622*x1625))+((cj2*x1623)));
evalcond[3]=((0.045)+((sj2*x1623))+x1619+(((-1.0)*x1620))+(((-1.0)*x1622*x1624))+(((-1.0)*x1622*x1626))+(((-1.0)*sj2*x1625)));
evalcond[4]=((-0.2125)+(((-1.0)*pp))+(((1.1)*pz))+((x1618*x1625))+(((-1.0)*x1618*x1623))+((x1621*x1624))+((x1621*x1626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1627=((0.045)*sj3);
IkReal x1628=((0.3)*cj3);
IkReal x1629=(x1627+x1628);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1629))+(((-1.0)*pz)));
evalcond[3]=((0.55)+x1629+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x1630=((0.3)*sj3);
IkReal x1631=(px*sj2);
IkReal x1632=((0.045)*py);
IkReal x1633=(pp+(((-1.0)*(pz*pz))));
IkReal x1634=(cj3*x1632);
IkReal x1635=((0.045)*cj2*px);
j0eval[0]=x1633;
j0eval[1]=((IKabs(((((0.045)*cj3*x1631))+((cj2*x1634))+(((-1.0)*cj2*x1632))+(((-0.045)*x1631))+(((-1.0)*x1630*x1631))+(((-1.0)*cj2*py*x1630)))))+(IKabs(((((-1.0)*sj2*x1634))+((cj3*x1635))+((sj2*x1632))+(((-1.0)*x1635))+((py*sj2*x1630))+(((-1.0)*cj2*px*x1630))))));
j0eval[2]=IKsign(x1633);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x1636=((((-1.0)*cj2*pp))+((cj2*(pz*pz))));
j0eval[0]=x1636;
j0eval[1]=IKsign(x1636);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x1637=((((-1.0)*sj2*(pz*pz)))+((pp*sj2)));
j0eval[0]=x1637;
j0eval[1]=IKsign(x1637);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1638=((0.045)*sj3);
IkReal x1639=((0.3)*cj3);
IkReal x1640=(x1638+x1639);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1640))+(((-1.0)*pz)));
evalcond[3]=((0.55)+x1640+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x1641=((20.0)*sj3);
IkReal x1642=((3.0)*px);
IkReal x1643=((3.0)*py);
IkReal x1644=((((-1.0)*pp))+(pz*pz));
j0eval[0]=x1644;
j0eval[1]=((IKabs((x1643+((py*x1641))+(((-1.0)*cj3*x1643)))))+(IKabs((x1642+((px*x1641))+(((-1.0)*cj3*x1642))))));
j0eval[2]=IKsign(x1644);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x1645=pz*pz;
IkReal x1646=((80.0)*pp);
IkReal x1647=((88.0)*pz);
j0eval[0]=((((-1.0)*x1645))+pp);
j0eval[1]=IKsign(((((-9.0)*x1645))+(((9.0)*pp))));
j0eval[2]=((IKabs(((((-1.0)*py*x1646))+(((-1.0)*py*x1647))+(((-17.0)*py)))))+(IKabs(((((-1.0)*px*x1647))+(((-1.0)*px*x1646))+(((-17.0)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-0.85)+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1649 = IKatan2WithCheck(IkReal(((-0.09)*px)),((-0.09)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x1649.valid){
continue;
}
IkReal x1648=x1649.value;
j0array[0]=((-1.0)*x1648);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1648)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1650=IKsin(j0);
IkReal x1651=IKcos(j0);
evalcond[0]=(((px*x1651))+((py*x1650)));
evalcond[1]=((((-1.0)*py*x1651))+((px*x1650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1653 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1653.valid){
continue;
}
IkReal x1652=x1653.value;
j0array[0]=((-1.0)*x1652);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1652)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1654=IKcos(j0);
IkReal x1655=IKsin(j0);
evalcond[0]=((((-1.0)*py*x1654))+((px*x1655)));
evalcond[1]=((((-0.09)*px*x1654))+(((-0.09)*py*x1655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1656=((110.0)*pz);
IkReal x1657=((100.0)*pp);
CheckValue<IkReal> x1658 = IKatan2WithCheck(IkReal(((((-1.0)*py*x1657))+(((-1.0)*py*x1656))+(((-21.25)*py)))),((((-1.0)*px*x1656))+(((-1.0)*px*x1657))+(((-21.25)*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x1658.valid){
continue;
}
CheckValue<IkReal> x1659=IKPowWithIntegerCheck(IKsign(((((9.0)*pp))+(((-9.0)*(pz*pz))))),-1);
if(!x1659.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1658.value)+(((1.5707963267949)*(x1659.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1660=IKsin(j0);
IkReal x1661=IKcos(j0);
IkReal x1662=(px*x1661);
IkReal x1663=(py*x1660);
evalcond[0]=((((-1.0)*py*x1661))+((px*x1660)));
evalcond[1]=((0.045)+x1663+x1662+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x1663))+(((-0.09)*x1662))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1664=((0.3)*sj3);
IkReal x1665=((0.045)*px);
IkReal x1666=((0.045)*py);
CheckValue<IkReal> x1667 = IKatan2WithCheck(IkReal((x1666+((py*x1664))+(((-1.0)*cj3*x1666)))),(x1665+((px*x1664))+(((-1.0)*cj3*x1665))),IKFAST_ATAN2_MAGTHRESH);
if(!x1667.valid){
continue;
}
CheckValue<IkReal> x1668=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1668.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1667.value)+(((1.5707963267949)*(x1668.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1669=IKsin(j0);
IkReal x1670=IKcos(j0);
IkReal x1671=(px*x1670);
IkReal x1672=(py*x1669);
evalcond[0]=(((px*x1669))+(((-1.0)*py*x1670)));
evalcond[1]=((0.045)+x1671+x1672+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x1672))+(((-0.09)*x1671))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1673=((0.045)*sj3);
IkReal x1674=((0.3)*cj3);
IkReal x1675=(x1674+x1673);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*pz))+(((-1.0)*x1675)));
evalcond[3]=((0.55)+x1675+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1676=((20.0)*sj3);
IkReal x1677=((3.0)*px);
IkReal x1678=((3.0)*py);
IkReal x1679=(pp+(((-1.0)*(pz*pz))));
j0eval[0]=x1679;
j0eval[1]=((IKabs((x1677+((px*x1676))+(((-1.0)*cj3*x1677)))))+(IKabs((x1678+((py*x1676))+(((-1.0)*cj3*x1678))))));
j0eval[2]=IKsign(x1679);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1680=pz*pz;
IkReal x1681=((80.0)*pp);
IkReal x1682=((88.0)*pz);
j0eval[0]=(x1680+(((-1.0)*pp)));
j0eval[1]=IKsign(((((-9.0)*pp))+(((9.0)*x1680))));
j0eval[2]=((IKabs(((((-1.0)*py*x1681))+(((-1.0)*py*x1682))+(((-17.0)*py)))))+(IKabs(((((-17.0)*px))+(((-1.0)*px*x1682))+(((-1.0)*px*x1681))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-0.85)+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1684 = IKatan2WithCheck(IkReal(((0.09)*px)),((0.09)*py),IKFAST_ATAN2_MAGTHRESH);
if(!x1684.valid){
continue;
}
IkReal x1683=x1684.value;
j0array[0]=((-1.0)*x1683);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1683)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1685=IKcos(j0);
IkReal x1686=IKsin(j0);
IkReal x1687=((1.0)*x1685);
evalcond[0]=((((-1.0)*py*x1687))+((px*x1686)));
evalcond[1]=((((-1.0)*py*x1686))+(((-1.0)*px*x1687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1689 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x1689.valid){
continue;
}
IkReal x1688=x1689.value;
j0array[0]=((-1.0)*x1688);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1688)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1690=IKcos(j0);
IkReal x1691=IKsin(j0);
IkReal x1692=(py*x1691);
IkReal x1693=(px*x1690);
evalcond[0]=((((-1.0)*x1692))+(((-1.0)*x1693)));
evalcond[1]=((((0.09)*x1692))+(((0.09)*x1693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1694=((110.0)*pz);
IkReal x1695=((100.0)*pp);
CheckValue<IkReal> x1696=IKPowWithIntegerCheck(IKsign(((((-9.0)*pp))+(((9.0)*(pz*pz))))),-1);
if(!x1696.valid){
continue;
}
CheckValue<IkReal> x1697 = IKatan2WithCheck(IkReal(((((-1.0)*py*x1694))+(((-1.0)*py*x1695))+(((-21.25)*py)))),((((-21.25)*px))+(((-1.0)*px*x1695))+(((-1.0)*px*x1694))),IKFAST_ATAN2_MAGTHRESH);
if(!x1697.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1696.value)))+(x1697.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1698=IKcos(j0);
IkReal x1699=IKsin(j0);
IkReal x1700=((1.0)*py);
IkReal x1701=(px*x1698);
evalcond[0]=((((-1.0)*x1698*x1700))+((px*x1699)));
evalcond[1]=((0.045)+(((-1.0)*x1701))+(((-1.0)*x1699*x1700))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*x1701))+(((0.09)*py*x1699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1702=((0.3)*sj3);
IkReal x1703=((0.045)*px);
IkReal x1704=((0.045)*py);
CheckValue<IkReal> x1705 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x1704))+x1704+((py*x1702)))),((((-1.0)*cj3*x1703))+x1703+((px*x1702))),IKFAST_ATAN2_MAGTHRESH);
if(!x1705.valid){
continue;
}
CheckValue<IkReal> x1706=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1706.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1705.value)+(((1.5707963267949)*(x1706.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1707=IKcos(j0);
IkReal x1708=IKsin(j0);
IkReal x1709=((1.0)*py);
IkReal x1710=(px*x1707);
evalcond[0]=((((-1.0)*x1707*x1709))+((px*x1708)));
evalcond[1]=((0.045)+(((-1.0)*x1708*x1709))+(((-1.0)*x1710))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*x1710))+(((0.09)*py*x1708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1711=((0.045)*sj3);
IkReal x1712=((0.3)*cj3);
IkReal x1713=(x1712+x1711);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*x1713))+(((-1.0)*pz)));
evalcond[3]=((0.55)+x1713+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x1714=((20.0)*sj3);
IkReal x1715=((3.0)*px);
IkReal x1716=((3.0)*py);
IkReal x1717=((((-1.0)*pp))+(pz*pz));
j0eval[0]=x1717;
j0eval[1]=((IKabs(((((-1.0)*x1716))+((cj3*x1716))+(((-1.0)*py*x1714)))))+(IKabs(((((-1.0)*cj3*x1715))+x1715+((px*x1714))))));
j0eval[2]=IKsign(x1717);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x1718=pz*pz;
IkReal x1719=((80.0)*pp);
IkReal x1720=((88.0)*pz);
j0eval[0]=((((-1.0)*x1718))+pp);
j0eval[1]=((IKabs(((((-1.0)*px*x1719))+(((-1.0)*px*x1720))+(((-17.0)*px)))))+(IKabs((((py*x1720))+(((17.0)*py))+((py*x1719))))));
j0eval[2]=IKsign(((((-9.0)*x1718))+(((9.0)*pp))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-0.85)+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1722 = IKatan2WithCheck(IkReal(((0.09)*py)),((-0.09)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x1722.valid){
continue;
}
IkReal x1721=x1722.value;
j0array[0]=((-1.0)*x1721);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1721)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1723=IKcos(j0);
IkReal x1724=IKsin(j0);
IkReal x1725=((1.0)*x1723);
evalcond[0]=(((px*x1724))+(((-1.0)*py*x1725)));
evalcond[1]=((((-1.0)*py*x1724))+(((-1.0)*px*x1725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1727 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x1727.valid){
continue;
}
IkReal x1726=x1727.value;
j0array[0]=((-1.0)*x1726);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1726)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1728=IKcos(j0);
IkReal x1729=IKsin(j0);
evalcond[0]=((((-1.0)*py*x1729))+(((-1.0)*px*x1728)));
evalcond[1]=((((0.09)*py*x1728))+(((-0.09)*px*x1729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1730=((110.0)*pz);
IkReal x1731=((100.0)*pp);
CheckValue<IkReal> x1732 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1730))+(((-1.0)*px*x1731))+(((-21.25)*px)))),(((py*x1730))+((py*x1731))+(((21.25)*py))),IKFAST_ATAN2_MAGTHRESH);
if(!x1732.valid){
continue;
}
CheckValue<IkReal> x1733=IKPowWithIntegerCheck(IKsign(((((9.0)*pp))+(((-9.0)*(pz*pz))))),-1);
if(!x1733.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1732.value)+(((1.5707963267949)*(x1733.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1734=IKsin(j0);
IkReal x1735=IKcos(j0);
IkReal x1736=(px*x1734);
IkReal x1737=((1.0)*x1735);
evalcond[0]=((((-1.0)*px*x1737))+(((-1.0)*py*x1734)));
evalcond[1]=((0.045)+x1736+(((-1.0)*py*x1737))+(((-0.045)*cj3))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*py*x1735))+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*x1736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1738=((0.3)*sj3);
IkReal x1739=((0.045)*px);
IkReal x1740=((0.045)*py);
CheckValue<IkReal> x1741=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1741.valid){
continue;
}
CheckValue<IkReal> x1742 = IKatan2WithCheck(IkReal((((px*x1738))+x1739+(((-1.0)*cj3*x1739)))),((((-1.0)*py*x1738))+((cj3*x1740))+(((-1.0)*x1740))),IKFAST_ATAN2_MAGTHRESH);
if(!x1742.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1741.value)))+(x1742.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1743=IKsin(j0);
IkReal x1744=IKcos(j0);
IkReal x1745=(px*x1743);
IkReal x1746=((1.0)*x1744);
evalcond[0]=((((-1.0)*py*x1743))+(((-1.0)*px*x1746)));
evalcond[1]=((0.045)+x1745+(((-0.045)*cj3))+(((-1.0)*py*x1746))+(((0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*py*x1744))+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*x1745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1747=((0.045)*sj3);
IkReal x1748=((0.3)*cj3);
IkReal x1749=(x1748+x1747);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=((-0.55)+(((-1.0)*pz))+(((-1.0)*x1749)));
evalcond[3]=((0.55)+x1749+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1750=((20.0)*sj3);
IkReal x1751=((3.0)*px);
IkReal x1752=((3.0)*py);
IkReal x1753=((((-1.0)*pp))+(pz*pz));
j0eval[0]=x1753;
j0eval[1]=((IKabs((x1752+(((-1.0)*cj3*x1752))+((py*x1750)))))+(IKabs((((cj3*x1751))+(((-1.0)*x1751))+(((-1.0)*px*x1750))))));
j0eval[2]=IKsign(x1753);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1754=pz*pz;
IkReal x1755=((80.0)*pp);
IkReal x1756=((88.0)*pz);
j0eval[0]=(x1754+(((-1.0)*pp)));
j0eval[1]=IKsign(((((-9.0)*pp))+(((9.0)*x1754))));
j0eval[2]=((IKabs(((((-1.0)*px*x1755))+(((-1.0)*px*x1756))+(((-17.0)*px)))))+(IKabs(((((17.0)*py))+((py*x1755))+((py*x1756))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-0.85)+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1758 = IKatan2WithCheck(IkReal(((-0.09)*py)),((0.09)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x1758.valid){
continue;
}
IkReal x1757=x1758.value;
j0array[0]=((-1.0)*x1757);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1757)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1759=IKsin(j0);
IkReal x1760=IKcos(j0);
evalcond[0]=(((px*x1760))+((py*x1759)));
evalcond[1]=(((px*x1759))+(((-1.0)*py*x1760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1762 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1762.valid){
continue;
}
IkReal x1761=x1762.value;
j0array[0]=((-1.0)*x1761);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1761)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1763=IKsin(j0);
IkReal x1764=IKcos(j0);
IkReal x1765=(px*x1763);
IkReal x1766=(py*x1764);
evalcond[0]=((((-1.0)*x1766))+x1765);
evalcond[1]=((((-0.09)*x1766))+(((0.09)*x1765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1767=((110.0)*pz);
IkReal x1768=((100.0)*pp);
CheckValue<IkReal> x1769=IKPowWithIntegerCheck(IKsign(((((-9.0)*pp))+(((9.0)*(pz*pz))))),-1);
if(!x1769.valid){
continue;
}
CheckValue<IkReal> x1770 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1768))+(((-1.0)*px*x1767))+(((-21.25)*px)))),((((21.25)*py))+((py*x1768))+((py*x1767))),IKFAST_ATAN2_MAGTHRESH);
if(!x1770.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1769.value)))+(x1770.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1771=IKsin(j0);
IkReal x1772=IKcos(j0);
IkReal x1773=(px*x1771);
IkReal x1774=(py*x1772);
evalcond[0]=(((px*x1772))+((py*x1771)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+(((-1.0)*x1774))+x1773+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((-0.09)*x1774))+(((-1.0)*pp))+(((-1.1)*pz))+(((0.09)*x1773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1775=((0.3)*sj3);
IkReal x1776=((0.045)*px);
IkReal x1777=((0.045)*py);
CheckValue<IkReal> x1778=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1778.valid){
continue;
}
CheckValue<IkReal> x1779 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1775))+(((-1.0)*x1776))+((cj3*x1776)))),((((-1.0)*cj3*x1777))+x1777+((py*x1775))),IKFAST_ATAN2_MAGTHRESH);
if(!x1779.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1778.value)))+(x1779.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x1780=IKsin(j0);
IkReal x1781=IKcos(j0);
IkReal x1782=(px*x1780);
IkReal x1783=(py*x1781);
evalcond[0]=(((py*x1780))+((px*x1781)));
evalcond[1]=((-0.045)+(((0.045)*cj3))+x1782+(((-1.0)*x1783))+(((-0.3)*sj3)));
evalcond[2]=((-0.2125)+(((0.09)*x1782))+(((-1.0)*pp))+(((-1.1)*pz))+(((-0.09)*x1783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=((-0.85)+(((-1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs((((cj2*px))+(((-1.0)*py*sj2)))))+(IKabs((((cj2*py))+((px*sj2))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal x1784=((1.0)*sj2);
j0eval[0]=((IKabs(((((-1.0)*py*x1784))+((cj2*px)))))+(IKabs(((((-1.0)*cj2*py))+(((-1.0)*px*x1784))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1785=((1.0)*py);
CheckValue<IkReal> x1787 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*x1785))+(((-1.0)*px*sj2)))),(((cj2*px))+(((-1.0)*sj2*x1785))),IKFAST_ATAN2_MAGTHRESH);
if(!x1787.valid){
continue;
}
IkReal x1786=x1787.value;
j0array[0]=((-1.0)*x1786);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1786)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1788=IKcos(j0);
IkReal x1789=IKsin(j0);
IkReal x1790=((0.09)*sj2);
IkReal x1791=(px*x1789);
IkReal x1792=((1.0)*x1788);
IkReal x1793=(py*x1789);
IkReal x1794=(cj2*px*x1788);
evalcond[0]=(x1791+(((-1.0)*py*x1792)));
evalcond[1]=((((-1.0)*x1793))+(((-1.0)*px*x1792)));
evalcond[2]=(((sj2*x1791))+x1794+((cj2*x1793))+(((-1.0)*py*sj2*x1792)));
evalcond[3]=((((-1.0)*x1790*x1791))+((py*x1788*x1790))+(((-0.09)*x1794))+(((-0.09)*cj2*x1793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1796 = IKatan2WithCheck(IkReal((((cj2*px))+(((-1.0)*py*sj2)))),(((cj2*py))+((px*sj2))),IKFAST_ATAN2_MAGTHRESH);
if(!x1796.valid){
continue;
}
IkReal x1795=x1796.value;
j0array[0]=((-1.0)*x1795);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1795)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1797=IKcos(j0);
IkReal x1798=IKsin(j0);
IkReal x1799=((0.09)*sj2);
IkReal x1800=(cj2*py);
IkReal x1801=(px*x1798);
IkReal x1802=((1.0)*x1797);
IkReal x1803=((1.0)*py*x1798);
evalcond[0]=((((-1.0)*py*x1802))+x1801);
evalcond[1]=((((-1.0)*x1803))+(((-1.0)*px*x1802)));
evalcond[2]=(((cj2*x1801))+(((-1.0)*x1800*x1802))+(((-1.0)*px*sj2*x1802))+(((-1.0)*sj2*x1803)));
evalcond[3]=((((-1.0)*x1799*x1801))+((py*x1797*x1799))+(((-0.09)*cj2*px*x1797))+(((-0.09)*x1798*x1800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1805 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x1805.valid){
continue;
}
IkReal x1804=x1805.value;
j0array[0]=((-1.0)*x1804);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1804)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1806=IKsin(j0);
IkReal x1807=IKcos(j0);
IkReal x1808=(py*sj2);
IkReal x1809=(cj2*px);
IkReal x1810=((1.0)*x1807);
IkReal x1811=((0.09)*x1807);
IkReal x1812=(py*x1806);
IkReal x1813=(px*sj2*x1806);
evalcond[0]=((((-1.0)*px*x1810))+(((-1.0)*x1812)));
evalcond[1]=(((cj2*x1812))+(((-1.0)*x1808*x1810))+x1813+((x1807*x1809)));
evalcond[2]=((((-1.0)*px*sj2*x1810))+((x1806*x1809))+(((-1.0)*x1806*x1808))+(((-1.0)*cj2*py*x1810)));
evalcond[3]=((((-1.0)*x1809*x1811))+(((-0.09)*cj2*x1812))+((x1808*x1811))+(((-0.09)*x1813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1814=cj2*cj2;
IkReal x1815=((0.045)*px);
IkReal x1816=(cj2*sj2);
IkReal x1817=((0.3)*sj3);
IkReal x1818=((0.045)*py);
IkReal x1819=(cj3*x1818);
IkReal x1820=(py*x1814);
CheckValue<IkReal> x1821=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj2*(pz*pz)))+((pp*sj2)))),-1);
if(!x1821.valid){
continue;
}
CheckValue<IkReal> x1822 = IKatan2WithCheck(IkReal(((((-1.0)*x1815))+(((-1.0)*py*x1816*x1817))+(((-1.0)*cj3*x1814*x1815))+((cj3*x1815))+((x1816*x1819))+(((-1.0)*x1816*x1818))+((x1814*x1815))+((px*x1814*x1817))+(((-1.0)*px*x1817)))),((((-1.0)*x1819))+(((-1.0)*x1817*x1820))+(((-1.0)*px*x1816*x1817))+((py*x1817))+((x1814*x1819))+(((-1.0)*x1814*x1818))+x1818+(((-1.0)*x1815*x1816))+((cj3*x1815*x1816))),IKFAST_ATAN2_MAGTHRESH);
if(!x1822.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1821.value)))+(x1822.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1823=IKcos(j0);
IkReal x1824=IKsin(j0);
IkReal x1825=((0.045)*cj2);
IkReal x1826=((0.09)*sj2);
IkReal x1827=((0.3)*sj3);
IkReal x1828=((0.045)*cj3);
IkReal x1829=((1.0)*sj2);
IkReal x1830=((0.09)*cj2);
IkReal x1831=(px*x1824);
IkReal x1832=(px*x1823);
IkReal x1833=(py*x1823);
IkReal x1834=(py*x1824);
evalcond[0]=((((-1.0)*x1833))+(((0.045)*sj2))+x1831+((sj2*x1827))+(((-1.0)*sj2*x1828)));
evalcond[1]=((((-1.0)*x1825))+(((-1.0)*x1834))+(((-1.0)*x1832))+(((-1.0)*cj2*x1827))+((cj3*x1825)));
evalcond[2]=(((cj2*x1831))+(((-1.0)*x1829*x1832))+(((-1.0)*x1829*x1834))+(((-1.0)*cj2*x1833)));
evalcond[3]=((0.045)+(((-1.0)*x1828))+((cj2*x1834))+((cj2*x1832))+((sj2*x1831))+x1827+(((-1.0)*x1829*x1833)));
evalcond[4]=((-0.2125)+((x1826*x1833))+(((-1.0)*pp))+(((-1.1)*pz))+(((-1.0)*x1826*x1831))+(((-1.0)*x1830*x1832))+(((-1.0)*x1830*x1834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1835=cj2*cj2;
IkReal x1836=((0.045)*px);
IkReal x1837=((0.045)*py);
IkReal x1838=(cj2*sj2);
IkReal x1839=(cj3*x1838);
IkReal x1840=(cj3*x1835);
IkReal x1841=((0.3)*py*sj3);
IkReal x1842=((0.3)*px*sj3);
CheckValue<IkReal> x1843=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*pp))+((cj2*(pz*pz))))),-1);
if(!x1843.valid){
continue;
}
CheckValue<IkReal> x1844 = IKatan2WithCheck(IkReal((((x1838*x1842))+(((-1.0)*x1836*x1839))+((x1835*x1837))+(((-1.0)*x1837*x1840))+((x1835*x1841))+((x1836*x1838)))),((((-1.0)*x1837*x1838))+((x1835*x1836))+(((-1.0)*x1836*x1840))+((x1837*x1839))+(((-1.0)*x1838*x1841))+((x1835*x1842))),IKFAST_ATAN2_MAGTHRESH);
if(!x1844.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1843.value)))+(x1844.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1845=IKcos(j0);
IkReal x1846=IKsin(j0);
IkReal x1847=((0.045)*cj2);
IkReal x1848=((0.09)*sj2);
IkReal x1849=((0.3)*sj3);
IkReal x1850=((0.045)*cj3);
IkReal x1851=((1.0)*sj2);
IkReal x1852=((0.09)*cj2);
IkReal x1853=(px*x1846);
IkReal x1854=(px*x1845);
IkReal x1855=(py*x1845);
IkReal x1856=(py*x1846);
evalcond[0]=((((-1.0)*x1855))+((sj2*x1849))+(((0.045)*sj2))+x1853+(((-1.0)*sj2*x1850)));
evalcond[1]=((((-1.0)*x1847))+(((-1.0)*x1856))+(((-1.0)*x1854))+((cj3*x1847))+(((-1.0)*cj2*x1849)));
evalcond[2]=((((-1.0)*cj2*x1855))+(((-1.0)*x1851*x1854))+(((-1.0)*x1851*x1856))+((cj2*x1853)));
evalcond[3]=((0.045)+(((-1.0)*x1851*x1855))+((cj2*x1854))+((cj2*x1856))+x1849+((sj2*x1853))+(((-1.0)*x1850)));
evalcond[4]=((-0.2125)+(((-1.0)*x1848*x1853))+((x1848*x1855))+(((-1.0)*x1852*x1856))+(((-1.0)*x1852*x1854))+(((-1.0)*pp))+(((-1.1)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1857=(px*sj2);
IkReal x1858=((0.3)*sj3);
IkReal x1859=(cj2*py);
IkReal x1860=(py*sj2);
IkReal x1861=((0.045)*cj3*py);
IkReal x1862=((0.045)*cj2*px);
CheckValue<IkReal> x1863=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1863.valid){
continue;
}
CheckValue<IkReal> x1864 = IKatan2WithCheck(IkReal(((((-1.0)*x1858*x1859))+(((-0.045)*x1859))+(((-0.045)*x1857))+(((-1.0)*x1857*x1858))+(((0.045)*cj3*x1859))+(((0.045)*cj3*x1857)))),(((cj3*x1862))+(((0.045)*x1860))+(((-1.0)*cj2*px*x1858))+((x1858*x1860))+(((-1.0)*x1862))+(((-0.045)*cj3*x1860))),IKFAST_ATAN2_MAGTHRESH);
if(!x1864.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1863.value)))+(x1864.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1865=IKcos(j0);
IkReal x1866=IKsin(j0);
IkReal x1867=((0.045)*cj2);
IkReal x1868=((0.09)*sj2);
IkReal x1869=((0.3)*sj3);
IkReal x1870=((0.045)*cj3);
IkReal x1871=((1.0)*sj2);
IkReal x1872=((0.09)*cj2);
IkReal x1873=(px*x1866);
IkReal x1874=(px*x1865);
IkReal x1875=(py*x1865);
IkReal x1876=(py*x1866);
evalcond[0]=((((0.045)*sj2))+(((-1.0)*sj2*x1870))+x1873+((sj2*x1869))+(((-1.0)*x1875)));
evalcond[1]=(((cj3*x1867))+(((-1.0)*cj2*x1869))+(((-1.0)*x1876))+(((-1.0)*x1874))+(((-1.0)*x1867)));
evalcond[2]=(((cj2*x1873))+(((-1.0)*x1871*x1876))+(((-1.0)*x1871*x1874))+(((-1.0)*cj2*x1875)));
evalcond[3]=((0.045)+(((-1.0)*x1870))+((sj2*x1873))+((cj2*x1876))+((cj2*x1874))+x1869+(((-1.0)*x1871*x1875)));
evalcond[4]=((-0.2125)+(((-1.0)*x1872*x1874))+(((-1.0)*x1872*x1876))+(((-1.0)*x1868*x1873))+(((-1.0)*pp))+(((-1.1)*pz))+((x1868*x1875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1877=(cj3*py);
IkReal x1878=((0.3)*sj1);
IkReal x1879=((0.045)*sj2);
IkReal x1880=(cj3*px);
IkReal x1881=(px*sj1);
IkReal x1882=((0.3)*sj3);
IkReal x1883=((0.045)*sj3);
IkReal x1884=(py*sj1);
IkReal x1885=(cj1*cj2);
IkReal x1886=((0.045)*x1885);
CheckValue<IkReal> x1887 = IKatan2WithCheck(IkReal(((((0.55)*x1884))+((x1879*x1880))+(((-1.0)*px*x1879))+((x1883*x1884))+((x1877*x1878))+((py*x1886))+(((-1.0)*px*sj2*x1882))+((py*x1882*x1885))+(((-1.0)*x1877*x1886)))),((((0.55)*x1881))+((x1881*x1883))+(((-1.0)*x1880*x1886))+((py*sj2*x1882))+((px*x1882*x1885))+(((-1.0)*x1877*x1879))+((x1878*x1880))+((px*x1886))+((py*x1879))),IKFAST_ATAN2_MAGTHRESH);
if(!x1887.valid){
continue;
}
CheckValue<IkReal> x1888=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1888.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1887.value)+(((1.5707963267949)*(x1888.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1889=IKsin(j0);
IkReal x1890=IKcos(j0);
IkReal x1891=(cj1*sj2);
IkReal x1892=((0.09)*sj2);
IkReal x1893=((0.3)*sj3);
IkReal x1894=((0.045)*cj3);
IkReal x1895=((1.1)*sj1);
IkReal x1896=((0.3)*cj3);
IkReal x1897=(cj1*cj2);
IkReal x1898=((0.045)*sj3);
IkReal x1899=((1.0)*sj2);
IkReal x1900=(cj1*pz);
IkReal x1901=(px*x1889);
IkReal x1902=(px*x1890);
IkReal x1903=(py*x1890);
IkReal x1904=(py*x1889);
IkReal x1905=(cj2*pz*sj1);
evalcond[0]=((-0.55)+x1900+((sj1*x1902))+((sj1*x1904))+(((-1.0)*x1898))+(((-1.0)*x1896)));
evalcond[1]=(((sj2*x1893))+(((-1.0)*sj2*x1894))+(((0.045)*sj2))+(((-1.0)*x1903))+x1901);
evalcond[2]=((((-1.0)*pz*sj1*x1899))+(((-1.0)*cj2*x1903))+((cj2*x1901))+((x1891*x1902))+((x1891*x1904)));
evalcond[3]=((((0.045)*x1897))+((x1893*x1897))+(((-1.0)*x1904))+(((-1.0)*x1902))+(((-1.0)*x1894*x1897))+((sj1*x1896))+((sj1*x1898))+(((0.55)*sj1)));
evalcond[4]=((0.045)+(((-1.0)*x1899*x1903))+(((-1.0)*x1897*x1902))+(((-1.0)*x1897*x1904))+x1905+x1893+(((-1.0)*x1894))+((sj2*x1901)));
evalcond[5]=((-0.2125)+((x1892*x1903))+(((1.1)*x1900))+(((-1.0)*x1892*x1901))+(((-1.0)*pp))+((x1895*x1902))+((x1895*x1904))+(((0.09)*x1897*x1904))+(((0.09)*x1897*x1902))+(((-0.09)*x1905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1906=((0.55)*cj2);
IkReal x1907=(cj2*sj1);
IkReal x1908=(py*sj2);
IkReal x1909=((0.045)*sj3);
IkReal x1910=(px*pz);
IkReal x1911=(cj2*px);
IkReal x1912=(cj1*cj2);
IkReal x1913=(cj2*py);
IkReal x1914=((0.3)*cj3);
IkReal x1915=((0.55)*cj1*sj2);
IkReal x1916=(cj1*px*sj2);
CheckValue<IkReal> x1917 = IKatan2WithCheck(IkReal(((((-1.0)*py*x1906))+((x1914*x1916))+(((-1.0)*sj2*x1910))+((px*x1915))+((x1909*x1916))+(((-1.0)*x1913*x1914))+(((-1.0)*x1909*x1913))+((py*pz*x1912)))),((((-1.0)*x1911*x1914))+(((-1.0)*cj1*x1908*x1909))+(((-1.0)*px*x1906))+((x1910*x1912))+(((-1.0)*cj1*x1908*x1914))+((pz*x1908))+(((-0.55)*cj1*x1908))+(((-1.0)*x1909*x1911))),IKFAST_ATAN2_MAGTHRESH);
if(!x1917.valid){
continue;
}
CheckValue<IkReal> x1918=IKPowWithIntegerCheck(IKsign((((x1907*(pz*pz)))+(((-1.0)*pp*x1907)))),-1);
if(!x1918.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1917.value)+(((1.5707963267949)*(x1918.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1919=IKsin(j0);
IkReal x1920=IKcos(j0);
IkReal x1921=(cj1*sj2);
IkReal x1922=((0.09)*sj2);
IkReal x1923=((0.3)*sj3);
IkReal x1924=((0.045)*cj3);
IkReal x1925=((1.1)*sj1);
IkReal x1926=((0.3)*cj3);
IkReal x1927=(cj1*cj2);
IkReal x1928=((0.045)*sj3);
IkReal x1929=((1.0)*sj2);
IkReal x1930=(cj1*pz);
IkReal x1931=(px*x1919);
IkReal x1932=(px*x1920);
IkReal x1933=(py*x1920);
IkReal x1934=(py*x1919);
IkReal x1935=(cj2*pz*sj1);
evalcond[0]=((-0.55)+(((-1.0)*x1926))+(((-1.0)*x1928))+((sj1*x1934))+((sj1*x1932))+x1930);
evalcond[1]=((((-1.0)*x1933))+(((0.045)*sj2))+((sj2*x1923))+x1931+(((-1.0)*sj2*x1924)));
evalcond[2]=(((x1921*x1934))+((x1921*x1932))+(((-1.0)*cj2*x1933))+((cj2*x1931))+(((-1.0)*pz*sj1*x1929)));
evalcond[3]=((((-1.0)*x1934))+(((-1.0)*x1932))+(((0.045)*x1927))+((x1923*x1927))+(((-1.0)*x1924*x1927))+(((0.55)*sj1))+((sj1*x1928))+((sj1*x1926)));
evalcond[4]=((0.045)+((sj2*x1931))+(((-1.0)*x1927*x1934))+(((-1.0)*x1927*x1932))+(((-1.0)*x1924))+x1923+x1935+(((-1.0)*x1929*x1933)));
evalcond[5]=((-0.2125)+(((1.1)*x1930))+((x1922*x1933))+((x1925*x1934))+((x1925*x1932))+(((-1.0)*pp))+(((0.09)*x1927*x1934))+(((0.09)*x1927*x1932))+(((-1.0)*x1922*x1931))+(((-0.09)*x1935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1936=((0.045)*px);
IkReal x1937=((0.3)*sj3);
IkReal x1938=(sj1*sj2);
IkReal x1939=((0.3)*cj3);
IkReal x1940=(py*x1938);
IkReal x1941=((1.0)*cj1*pz);
CheckValue<IkReal> x1942 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1937*x1938))+(((0.045)*py*sj3))+((py*x1939))+(((-1.0)*py*x1941))+((cj3*x1936*x1938))+(((0.55)*py))+(((-1.0)*x1936*x1938)))),((((0.045)*x1940))+((x1937*x1940))+((px*x1939))+(((-1.0)*px*x1941))+(((-0.045)*cj3*x1940))+(((0.55)*px))+((sj3*x1936))),IKFAST_ATAN2_MAGTHRESH);
if(!x1942.valid){
continue;
}
CheckValue<IkReal> x1943=IKPowWithIntegerCheck(IKsign((((pp*sj1))+(((-1.0)*sj1*(pz*pz))))),-1);
if(!x1943.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1942.value)+(((1.5707963267949)*(x1943.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1944=IKsin(j0);
IkReal x1945=IKcos(j0);
IkReal x1946=(cj1*sj2);
IkReal x1947=((0.09)*sj2);
IkReal x1948=((0.3)*sj3);
IkReal x1949=((0.045)*cj3);
IkReal x1950=((1.1)*sj1);
IkReal x1951=((0.3)*cj3);
IkReal x1952=(cj1*cj2);
IkReal x1953=((0.045)*sj3);
IkReal x1954=((1.0)*sj2);
IkReal x1955=(cj1*pz);
IkReal x1956=(px*x1944);
IkReal x1957=(px*x1945);
IkReal x1958=(py*x1945);
IkReal x1959=(py*x1944);
IkReal x1960=(cj2*pz*sj1);
evalcond[0]=((-0.55)+(((-1.0)*x1953))+(((-1.0)*x1951))+((sj1*x1957))+((sj1*x1959))+x1955);
evalcond[1]=(((sj2*x1948))+(((-1.0)*sj2*x1949))+(((0.045)*sj2))+x1956+(((-1.0)*x1958)));
evalcond[2]=(((cj2*x1956))+((x1946*x1957))+((x1946*x1959))+(((-1.0)*cj2*x1958))+(((-1.0)*pz*sj1*x1954)));
evalcond[3]=((((-1.0)*x1949*x1952))+(((0.045)*x1952))+((sj1*x1953))+((sj1*x1951))+(((-1.0)*x1957))+(((-1.0)*x1959))+((x1948*x1952))+(((0.55)*sj1)));
evalcond[4]=((0.045)+((sj2*x1956))+(((-1.0)*x1954*x1958))+(((-1.0)*x1949))+x1960+x1948+(((-1.0)*x1952*x1957))+(((-1.0)*x1952*x1959)));
evalcond[5]=((-0.2125)+(((1.1)*x1955))+((x1950*x1957))+((x1950*x1959))+(((-1.0)*x1947*x1956))+(((0.09)*x1952*x1957))+(((0.09)*x1952*x1959))+(((-1.0)*pp))+(((-0.09)*x1960))+((x1947*x1958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1961=((0.045)*sj2);
CheckValue<IkReal> x1964 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x1964.valid){
continue;
}
IkReal x1962=((1.0)*(x1964.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x1965=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x1965.valid){
continue;
}
if( (((x1965.value)*(((((0.3)*sj2*sj3))+x1961+(((-1.0)*cj3*x1961)))))) < -1-IKFAST_SINCOS_THRESH || (((x1965.value)*(((((0.3)*sj2*sj3))+x1961+(((-1.0)*cj3*x1961)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1963=IKasin(((x1965.value)*(((((0.3)*sj2*sj3))+x1961+(((-1.0)*cj3*x1961))))));
j0array[0]=((((-1.0)*x1962))+(((-1.0)*x1963)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1962))+x1963);
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1eval[2];
IkReal x1966=(py*sj0);
IkReal x1967=((0.3)*cj3);
IkReal x1968=((0.045)*sj3);
IkReal x1969=(cj2*pz);
IkReal x1970=((6.66666666666667)*cj3);
IkReal x1971=(cj0*px);
IkReal x1972=((1.0)*sj3);
j1eval[0]=(((cj3*x1969))+(((-1.0)*x1969))+(((-1.0)*x1966*x1972))+(((-1.0)*x1966*x1970))+(((-1.0)*x1971*x1972))+(((-1.0)*x1970*x1971))+(((-6.66666666666667)*sj3*x1969))+(((-12.2222222222222)*x1971))+(((-12.2222222222222)*x1966)));
j1eval[1]=IKsign(((((0.045)*cj3*x1969))+(((-1.0)*x1966*x1967))+(((-1.0)*x1966*x1968))+(((-1.0)*x1968*x1971))+(((-0.3)*sj3*x1969))+(((-0.55)*x1971))+(((-0.55)*x1966))+(((-0.045)*x1969))+(((-1.0)*x1967*x1971))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1973=cj0*cj0;
IkReal x1974=py*py;
IkReal x1975=(sj2*x1973);
IkReal x1976=(((sj2*x1974))+(((-1.0)*x1974*x1975))+((sj2*(pz*pz)))+((x1975*(px*px)))+(((2.0)*cj0*px*py*sj0*sj2)));
j1eval[0]=x1976;
j1eval[1]=IKsign(x1976);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1977=(pz*sj2);
IkReal x1978=(py*sj0);
IkReal x1979=(cj0*px);
IkReal x1980=(cj2*sj2);
IkReal x1981=((1.0)*cj3);
IkReal x1982=((0.045)*x1980);
IkReal x1983=(sj3*x1980);
IkReal x1984=(x1978*x1983);
j1eval[0]=((((6.66666666666667)*x1984))+(((-6.66666666666667)*cj3*x1977))+((x1978*x1980))+((x1979*x1980))+(((-1.0)*x1978*x1980*x1981))+(((-1.0)*x1979*x1980*x1981))+(((-12.2222222222222)*x1977))+(((6.66666666666667)*x1979*x1983))+(((-1.0)*sj3*x1977)));
j1eval[1]=IKsign(((((-1.0)*cj3*x1979*x1982))+(((-0.045)*sj3*x1977))+(((-1.0)*cj3*x1978*x1982))+(((-0.3)*cj3*x1977))+((x1978*x1982))+(((0.3)*x1979*x1983))+((x1979*x1982))+(((0.3)*x1984))+(((-0.55)*x1977))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1985=(((px*sj0))+(((-1.0)*cj0*py)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=x1985;
evalcond[3]=x1985;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x1986=(cj0*px);
IkReal x1987=((0.310561435803037)*sj3);
IkReal x1988=(pp*pz);
IkReal x1989=(py*sj0);
IkReal x1990=((0.138057984353428)*pp);
IkReal x1991=((12.2222222222222)*sj3);
IkReal x1992=((5.4333061668025)*pp);
IkReal x1993=(pz*sj3);
j1eval[0]=((((7.28153581454315)*pz))+(((-1.0)*x1986*x1991))+((x1986*x1992))+(((-1.0)*x1989*x1991))+(((-3.92556370551481)*x1989))+(((-3.92556370551481)*x1986))+((x1989*x1992))+(((-1.0)*x1993))+(((36.2220411120167)*x1988)));
j1eval[1]=IKsign(((((-1.0)*x1986*x1987))+((x1986*x1990))+(((-1.0)*x1987*x1989))+(((0.185020708697653)*pz))+(((-0.0254095720202485)*x1993))+(((-0.099746893695352)*x1989))+(((-0.099746893695352)*x1986))+((x1989*x1990))+(((0.92038656235619)*x1988))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x1994=(cj0*px);
IkReal x1995=(py*sj0);
IkReal x1996=((0.3)*sj3);
IkReal x1997=((0.045)*cj3);
IkReal x1998=(pz*sj3);
IkReal x1999=((6.66666666666667)*sj3);
IkReal x2000=((1.0)*cj3);
IkReal x2001=(cj3*pz);
j1eval[0]=((((-1.0)*x1994*x2000))+(((-1.0)*x1995*x2000))+((x1995*x1999))+((x1994*x1999))+x1995+x1994+(((-6.66666666666667)*x2001))+(((-12.2222222222222)*pz))+(((-1.0)*x1998)));
j1eval[1]=IKsign(((((-0.55)*pz))+(((-0.045)*x1998))+((x1995*x1996))+((x1994*x1996))+(((0.045)*x1994))+(((0.045)*x1995))+(((-1.0)*x1995*x1997))+(((-1.0)*x1994*x1997))+(((-0.3)*x2001))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x2002=(py*sj0);
IkReal x2003=(cj0*px);
IkReal x2004=(pp*pz);
IkReal x2005=((0.92038656235619)*pp);
IkReal x2006=(pz*sj3);
IkReal x2007=((36.2220411120167)*pp);
IkReal x2008=((0.0254095720202485)*sj3);
j1eval[0]=((((-12.2222222222222)*x2006))+(((-1.0)*x2003*x2007))+((sj3*x2003))+((sj3*x2002))+(((-1.0)*x2002*x2007))+(((-3.92556370551481)*pz))+(((5.4333061668025)*x2004))+(((-7.28153581454315)*x2003))+(((-7.28153581454315)*x2002)));
j1eval[1]=IKsign((((x2002*x2008))+(((-0.099746893695352)*pz))+(((-1.0)*x2003*x2005))+(((-0.310561435803037)*x2006))+(((-1.0)*x2002*x2005))+(((-0.185020708697653)*x2002))+(((-0.185020708697653)*x2003))+(((0.138057984353428)*x2004))+((x2003*x2008))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x2009=x1985;
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=x2009;
evalcond[3]=x2009;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2010=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2010);
rxp0_1=(px*r20);
rxp1_0=(r21*x2010);
rxp1_1=(px*r21);
rxp2_0=(r22*x2010);
rxp2_1=(px*r22);
j1eval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0.7225;
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=-0.935;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp1_0=0;
rxp1_1=0;
rxp2_0=0;
rxp2_1=0;
px=0;
py=0;
rxp0_2=0;
rxp1_2=0;
rxp2_2=0;
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
evalcond[1]=((0.7225)+(((-1.0)*(py*py))));
evalcond[2]=-0.85;
evalcond[3]=((-1.0)*py);
evalcond[4]=0;
evalcond[5]=-0.935;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2011=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x2011);
rxp0_1=0;
rxp1_0=(r21*x2011);
rxp1_1=0;
rxp2_0=(r22*x2011);
rxp2_1=0;
px=0;
j0=0;
sj0=0;
cj0=1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*(py*py))));
evalcond[2]=-0.85;
evalcond[3]=py;
evalcond[4]=0;
evalcond[5]=-0.935;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2012=((-1.0)*py);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x2012);
rxp0_1=0;
rxp1_0=(r21*x2012);
rxp1_1=0;
rxp2_0=(r22*x2012);
rxp2_1=0;
px=0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*(px*px))));
evalcond[2]=-0.85;
evalcond[3]=px;
evalcond[4]=0;
evalcond[5]=-0.935;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2013=((-1.0)*px);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
rxp0_2=(r10*x2013);
rxp1_2=(r11*x2013);
rxp2_2=(r12*x2013);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*(px*px))));
evalcond[2]=-0.85;
evalcond[3]=((-1.0)*px);
evalcond[4]=0;
evalcond[5]=-0.935;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2014=((-1.0)*px);
sj2=0;
cj2=1.0;
j2=0;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
rxp0_2=(r10*x2014);
rxp1_2=(r11*x2014);
rxp2_2=(r12*x2014);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2015=py*py;
IkReal x2016=cj0*cj0;
IkReal x2017=(cj0*px);
IkReal x2018=(py*sj0);
IkReal x2019=((4400.0)*x2015);
CheckValue<IkReal> x2020=IKPowWithIntegerCheck(((((306.0)*x2018))+(((306.0)*x2017))),-1);
if(!x2020.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x2017))+(((1.17647058823529)*x2018)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2020.value)*(((3179.0)+(((-1.0)*x2019))+((x2016*x2019))+(((-8800.0)*x2017*x2018))+(((-4400.0)*x2016*(px*px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x2017))+(((1.17647058823529)*x2018))))+IKsqr(((x2020.value)*(((3179.0)+(((-1.0)*x2019))+((x2016*x2019))+(((-8800.0)*x2017*x2018))+(((-4400.0)*x2016*(px*px)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x2017))+(((1.17647058823529)*x2018))), ((x2020.value)*(((3179.0)+(((-1.0)*x2019))+((x2016*x2019))+(((-8800.0)*x2017*x2018))+(((-4400.0)*x2016*(px*px)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2021=IKsin(j1);
IkReal x2022=IKcos(j1);
IkReal x2023=(py*sj0);
IkReal x2024=(cj0*px);
IkReal x2025=((0.09)*x2022);
IkReal x2026=((1.0)*x2022);
IkReal x2027=((1.1)*x2021);
evalcond[0]=((-0.85)*x2022);
evalcond[1]=((-0.85)+((x2021*x2024))+((x2021*x2023)));
evalcond[2]=((((0.85)*x2021))+(((-1.0)*x2023))+(((-1.0)*x2024)));
evalcond[3]=((((-1.0)*x2023*x2026))+(((-1.0)*x2024*x2026)));
evalcond[4]=((-0.935)+((x2024*x2025))+((x2024*x2027))+((x2023*x2025))+((x2023*x2027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2028=cj3*cj3;
IkReal x2029=(cj3*sj3);
IkReal x2030=(cj0*px);
IkReal x2031=((0.92038656235619)*pp);
IkReal x2032=((0.0254095720202485)*sj3);
IkReal x2033=(py*sj0);
IkReal x2034=(pp*sj3);
IkReal x2035=((1.0)*pz);
IkReal x2036=(cj3*pp);
CheckValue<IkReal> x2037 = IKatan2WithCheck(IkReal(((-0.100617959042798)+(((-0.0414173953060285)*x2034))+(((-0.276115968706857)*x2036))+(((-0.00114343074091118)*x2028))+(pz*pz)+(((-0.506212609295904)*pp))+(((0.00564933271974229)*sj3))+(((-0.0555062126092959)*cj3))+(((0.00762287160607455)*x2029)))),((-0.0688360561435803)+(((0.0414173953060285)*x2036))+(((0.0139752646111367)*x2028))+(((-0.0299240681086056)*cj3))+(((0.0759318913943856)*pp))+(((-0.175297399907961)*sj3))+(((-0.0931684307409112)*x2029))+(((-1.0)*x2030*x2035))+(((0.00621260929590428)*x2034))+(((-1.0)*x2033*x2035))),IKFAST_ATAN2_MAGTHRESH);
if(!x2037.valid){
continue;
}
CheckValue<IkReal> x2038=IKPowWithIntegerCheck(IKsign(((((-0.099746893695352)*pz))+((x2030*x2032))+(((-0.185020708697653)*x2033))+(((-0.185020708697653)*x2030))+(((-0.310561435803037)*pz*sj3))+((x2032*x2033))+(((-1.0)*x2030*x2031))+(((0.138057984353428)*pp*pz))+(((-1.0)*x2031*x2033)))),-1);
if(!x2038.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2037.value)+(((1.5707963267949)*(x2038.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2039=IKsin(j1);
IkReal x2040=IKcos(j1);
IkReal x2041=((0.045)*sj3);
IkReal x2042=((0.3)*cj3);
IkReal x2043=((0.045)*cj3);
IkReal x2044=(cj0*px);
IkReal x2045=(py*sj0);
IkReal x2046=((1.0)*x2040);
IkReal x2047=(sj3*x2040);
IkReal x2048=(pz*x2039);
IkReal x2049=(pz*x2040);
IkReal x2050=((0.09)*x2040);
IkReal x2051=((1.1)*x2039);
evalcond[0]=((-0.55)+(((-1.0)*x2041))+(((-1.0)*x2042))+x2049+((x2039*x2044))+((x2039*x2045)));
evalcond[1]=((0.045)+(((-1.0)*x2043))+x2048+(((-1.0)*x2045*x2046))+(((-1.0)*x2044*x2046))+(((0.3)*sj3)));
evalcond[2]=((((-0.92038656235619)*pp*x2040))+pz+(((0.310561435803037)*sj3*x2039))+(((-0.185020708697653)*x2040))+(((0.0254095720202485)*x2047))+(((-0.138057984353428)*pp*x2039))+(((0.099746893695352)*x2039)));
evalcond[3]=((((0.045)*x2040))+(((0.55)*x2039))+(((0.3)*x2047))+((x2039*x2041))+((x2039*x2042))+(((-1.0)*x2044))+(((-1.0)*x2045))+(((-1.0)*x2040*x2043)));
evalcond[4]=((-0.2125)+(((1.1)*x2049))+((x2044*x2050))+((x2044*x2051))+(((-1.0)*pp))+((x2045*x2050))+((x2045*x2051))+(((-0.09)*x2048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2052=cj0*cj0;
IkReal x2053=py*py;
IkReal x2054=cj3*cj3;
IkReal x2055=(py*sj0);
IkReal x2056=((0.3)*sj3);
IkReal x2057=((0.045)*cj3);
IkReal x2058=(cj0*px);
IkReal x2059=(cj3*sj3);
IkReal x2060=((1.0)*pz);
CheckValue<IkReal> x2061 = IKatan2WithCheck(IkReal(((0.03825)+(((-0.01125)*cj3))+(((-1.0)*x2058*x2060))+(((-0.027)*x2054))+(((-1.0)*x2055*x2060))+(((0.167025)*sj3))+(((0.087975)*x2059)))),((-0.304525)+(((-0.027)*x2059))+x2053+(((-0.0495)*sj3))+(((-1.0)*x2052*x2053))+(((2.0)*x2055*x2058))+(((-0.087975)*x2054))+((x2052*(px*px)))+(((-0.33)*cj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2061.valid){
continue;
}
CheckValue<IkReal> x2062=IKPowWithIntegerCheck(IKsign(((((-0.55)*pz))+(((-0.3)*cj3*pz))+((x2055*x2056))+(((-0.045)*pz*sj3))+(((-1.0)*x2057*x2058))+(((0.045)*x2055))+(((0.045)*x2058))+((x2056*x2058))+(((-1.0)*x2055*x2057)))),-1);
if(!x2062.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2061.value)+(((1.5707963267949)*(x2062.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2063=IKsin(j1);
IkReal x2064=IKcos(j1);
IkReal x2065=((0.045)*sj3);
IkReal x2066=((0.3)*cj3);
IkReal x2067=((0.045)*cj3);
IkReal x2068=(cj0*px);
IkReal x2069=(py*sj0);
IkReal x2070=((1.0)*x2064);
IkReal x2071=(sj3*x2064);
IkReal x2072=(pz*x2063);
IkReal x2073=(pz*x2064);
IkReal x2074=((0.09)*x2064);
IkReal x2075=((1.1)*x2063);
evalcond[0]=((-0.55)+x2073+(((-1.0)*x2066))+(((-1.0)*x2065))+((x2063*x2069))+((x2063*x2068)));
evalcond[1]=((0.045)+x2072+(((-1.0)*x2067))+(((-1.0)*x2069*x2070))+(((0.3)*sj3))+(((-1.0)*x2068*x2070)));
evalcond[2]=((((0.099746893695352)*x2063))+(((-0.138057984353428)*pp*x2063))+(((-0.92038656235619)*pp*x2064))+pz+(((0.0254095720202485)*x2071))+(((0.310561435803037)*sj3*x2063))+(((-0.185020708697653)*x2064)));
evalcond[3]=((((-1.0)*x2064*x2067))+(((0.3)*x2071))+(((-1.0)*x2068))+(((-1.0)*x2069))+(((0.55)*x2063))+((x2063*x2065))+((x2063*x2066))+(((0.045)*x2064)));
evalcond[4]=((-0.2125)+((x2069*x2074))+((x2069*x2075))+((x2068*x2075))+((x2068*x2074))+(((1.1)*x2073))+(((-1.0)*pp))+(((-0.09)*x2072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2076=cj3*cj3;
IkReal x2077=(cj0*px);
IkReal x2078=((0.00621260929590428)*pp);
IkReal x2079=(cj3*sj3);
IkReal x2080=(py*sj0);
IkReal x2081=((0.138057984353428)*pp);
IkReal x2082=((0.0414173953060285)*pp);
IkReal x2083=((0.310561435803037)*sj3);
CheckValue<IkReal> x2084=IKPowWithIntegerCheck(IKsign(((((-0.099746893695352)*x2080))+(((-0.0254095720202485)*pz*sj3))+(((-0.099746893695352)*x2077))+(((-1.0)*x2077*x2083))+(((0.185020708697653)*pz))+((x2077*x2081))+(((0.92038656235619)*pp*pz))+(((-1.0)*x2080*x2083))+((x2080*x2081)))),-1);
if(!x2084.valid){
continue;
}
CheckValue<IkReal> x2085 = IKatan2WithCheck(IkReal(((-0.000703060285319834)+(((-1.0)*x2082))+((pz*x2080))+(((-0.276115968706857)*pp*sj3))+(((-0.00762287160607455)*x2076))+(((-0.00114343074091118)*x2079))+((pz*x2077))+(((-0.0543627818683847)*sj3))+(((0.00832593189139439)*cj3))+((cj3*x2082)))),((-0.097657040957202)+x2078+(((-1.0)*cj3*x2078))+(((0.0139752646111367)*x2079))+(pz*pz)+(((0.0931684307409112)*x2076))+(((0.00448861021629084)*cj3))+((sj3*x2082))+(((-0.0438993327197423)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x2085.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2084.value)))+(x2085.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2086=IKsin(j1);
IkReal x2087=IKcos(j1);
IkReal x2088=((0.045)*sj3);
IkReal x2089=((0.3)*cj3);
IkReal x2090=((0.045)*cj3);
IkReal x2091=(cj0*px);
IkReal x2092=(py*sj0);
IkReal x2093=((1.0)*x2087);
IkReal x2094=(sj3*x2087);
IkReal x2095=(pz*x2086);
IkReal x2096=(pz*x2087);
IkReal x2097=((0.09)*x2087);
IkReal x2098=((1.1)*x2086);
evalcond[0]=((-0.55)+x2096+(((-1.0)*x2089))+(((-1.0)*x2088))+((x2086*x2091))+((x2086*x2092)));
evalcond[1]=((0.045)+(((-1.0)*x2090))+(((-1.0)*x2091*x2093))+x2095+(((-1.0)*x2092*x2093))+(((0.3)*sj3)));
evalcond[2]=((((-0.138057984353428)*pp*x2086))+(((-0.185020708697653)*x2087))+(((0.099746893695352)*x2086))+pz+(((0.310561435803037)*sj3*x2086))+(((-0.92038656235619)*pp*x2087))+(((0.0254095720202485)*x2094)));
evalcond[3]=((((0.045)*x2087))+((x2086*x2088))+((x2086*x2089))+(((-1.0)*x2087*x2090))+(((-1.0)*x2092))+(((-1.0)*x2091))+(((0.55)*x2086))+(((0.3)*x2094)));
evalcond[4]=((-0.2125)+(((-0.09)*x2095))+(((1.1)*x2096))+((x2091*x2098))+((x2091*x2097))+(((-1.0)*pp))+((x2092*x2098))+((x2092*x2097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2099=(px*sj0);
IkReal x2100=(cj0*py);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((0.39655)+(((0.0765)*sj3))+(((-1.0)*pp))+(((0.32595)*cj3)));
evalcond[2]=(x2099+(((-1.0)*x2100)));
evalcond[3]=(x2100+(((-1.0)*x2099)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x2101=cj0*cj0;
IkReal x2102=py*py;
IkReal x2103=(((x2101*(px*px)))+x2102+(pz*pz)+(((2.0)*cj0*px*py*sj0))+(((-1.0)*x2101*x2102)));
j1eval[0]=x2103;
j1eval[1]=IKsign(x2103);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x2104=(py*sj0);
IkReal x2105=((0.3)*sj3);
IkReal x2106=(cj0*px);
IkReal x2107=((6.66666666666667)*sj3);
IkReal x2108=(pz*sj3);
IkReal x2109=(cj3*pz);
IkReal x2110=((0.045)*x2106);
j1eval[0]=((((-1.0)*x2106*x2107))+((cj3*x2106))+((cj3*x2104))+(((-1.0)*x2104))+(((-1.0)*x2106))+(((-1.0)*x2108))+(((-12.2222222222222)*pz))+(((-1.0)*x2104*x2107))+(((-6.66666666666667)*x2109)));
j1eval[1]=IKsign(((((-0.55)*pz))+(((0.045)*cj3*x2104))+(((-0.045)*x2104))+(((-0.045)*x2108))+(((-1.0)*x2105*x2106))+(((-0.3)*x2109))+(((-1.0)*x2110))+(((-1.0)*x2104*x2105))+((cj3*x2110))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x2111=(py*sj0);
IkReal x2112=(cj0*px);
IkReal x2113=(pp*pz);
IkReal x2114=((0.92038656235619)*pp);
IkReal x2115=(pz*sj3);
IkReal x2116=((36.2220411120167)*pp);
IkReal x2117=((0.0254095720202485)*sj3);
j1eval[0]=((((-5.4333061668025)*x2113))+(((-1.0)*x2112*x2116))+(((12.2222222222222)*x2115))+((sj3*x2111))+((sj3*x2112))+(((-1.0)*x2111*x2116))+(((3.92556370551481)*pz))+(((-7.28153581454315)*x2111))+(((-7.28153581454315)*x2112)));
j1eval[1]=IKsign(((((0.310561435803037)*x2115))+(((-1.0)*x2112*x2114))+((x2111*x2117))+(((-1.0)*x2111*x2114))+(((0.099746893695352)*pz))+(((-0.138057984353428)*x2113))+(((-0.185020708697653)*x2111))+(((-0.185020708697653)*x2112))+((x2112*x2117))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x2118=(px*sj0);
IkReal x2119=(cj0*py);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*pp)));
evalcond[2]=(x2118+(((-1.0)*x2119)));
evalcond[3]=(x2119+(((-1.0)*x2118)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2120=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x2120);
rxp0_1=(px*r20);
rxp1_0=(r21*x2120);
rxp1_1=(px*r21);
rxp2_0=(r22*x2120);
rxp2_1=(px*r22);
j1eval[0]=((((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
evalcond[1]=0.7225;
evalcond[2]=-0.85;
evalcond[3]=0;
evalcond[4]=-0.935;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=0;
npx=0;
npy=0;
npz=0;
rxp0_0=0;
rxp0_1=0;
rxp1_0=0;
rxp1_1=0;
rxp2_0=0;
rxp2_1=0;
px=0;
py=0;
rxp0_2=0;
rxp1_2=0;
rxp2_2=0;
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
evalcond[1]=((0.7225)+(((-1.0)*(py*py))));
evalcond[2]=-0.85;
evalcond[3]=((-1.0)*py);
evalcond[4]=0;
evalcond[5]=-0.935;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2121=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x2121);
rxp0_1=0;
rxp1_0=(r21*x2121);
rxp1_1=0;
rxp2_0=(r22*x2121);
rxp2_1=0;
px=0;
j0=0;
sj0=0;
cj0=1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*(py*py))));
evalcond[2]=-0.85;
evalcond[3]=py;
evalcond[4]=0;
evalcond[5]=-0.935;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2122=((-1.0)*py);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=py*py;
npx=(py*r10);
npy=(py*r11);
npz=(py*r12);
rxp0_0=(r20*x2122);
rxp0_1=0;
rxp1_0=(r21*x2122);
rxp1_1=0;
rxp2_0=(r22*x2122);
rxp2_1=0;
px=0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
rxp0_2=(py*r00);
rxp1_2=(py*r01);
rxp2_2=(py*r02);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*(px*px))));
evalcond[2]=-0.85;
evalcond[3]=px;
evalcond[4]=0;
evalcond[5]=-0.935;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2123=((-1.0)*px);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
rxp0_2=(r10*x2123);
rxp1_2=(r11*x2123);
rxp2_2=(r12*x2123);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
evalcond[1]=((0.7225)+(((-1.0)*(px*px))));
evalcond[2]=-0.85;
evalcond[3]=((-1.0)*px);
evalcond[4]=0;
evalcond[5]=-0.935;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2124=((-1.0)*px);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
pz=0;
j3=0;
sj3=0;
cj3=1.0;
pp=px*px;
npx=(px*r00);
npy=(px*r01);
npz=(px*r02);
rxp0_0=0;
rxp0_1=(px*r20);
rxp1_0=0;
rxp1_1=(px*r21);
rxp2_0=0;
rxp2_1=(px*r22);
py=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
rxp0_2=(r10*x2124);
rxp1_2=(r11*x2124);
rxp2_2=(r12*x2124);
j1eval[0]=1.0;
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j1array[2], cj1array[2], sj1array[2], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[2]={true,true};
_nj1 = 2;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2125=py*py;
IkReal x2126=cj0*cj0;
IkReal x2127=(cj0*px);
IkReal x2128=(py*sj0);
IkReal x2129=((4400.0)*x2125);
CheckValue<IkReal> x2130=IKPowWithIntegerCheck(((((-306.0)*x2128))+(((-306.0)*x2127))),-1);
if(!x2130.valid){
continue;
}
if( IKabs(((((1.17647058823529)*x2128))+(((1.17647058823529)*x2127)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2130.value)*(((3179.0)+(((-4400.0)*x2126*(px*px)))+(((-1.0)*x2129))+((x2126*x2129))+(((-8800.0)*x2127*x2128)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.17647058823529)*x2128))+(((1.17647058823529)*x2127))))+IKsqr(((x2130.value)*(((3179.0)+(((-4400.0)*x2126*(px*px)))+(((-1.0)*x2129))+((x2126*x2129))+(((-8800.0)*x2127*x2128))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.17647058823529)*x2128))+(((1.17647058823529)*x2127))), ((x2130.value)*(((3179.0)+(((-4400.0)*x2126*(px*px)))+(((-1.0)*x2129))+((x2126*x2129))+(((-8800.0)*x2127*x2128))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2131=IKcos(j1);
IkReal x2132=IKsin(j1);
IkReal x2133=(py*sj0);
IkReal x2134=(cj0*px);
IkReal x2135=((0.09)*x2131);
IkReal x2136=(x2132*x2133);
evalcond[0]=((-0.85)*x2131);
evalcond[1]=(((x2131*x2134))+((x2131*x2133)));
evalcond[2]=((-0.85)+x2136+((x2132*x2134)));
evalcond[3]=((((0.85)*x2132))+(((-1.0)*x2134))+(((-1.0)*x2133)));
evalcond[4]=((-0.935)+(((1.1)*x2136))+(((-1.0)*x2134*x2135))+(((1.1)*x2132*x2134))+(((-1.0)*x2133*x2135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2137=cj3*cj3;
IkReal x2138=(cj3*sj3);
IkReal x2139=(cj0*px);
IkReal x2140=((0.92038656235619)*pp);
IkReal x2141=((0.0254095720202485)*sj3);
IkReal x2142=(py*sj0);
IkReal x2143=((0.0414173953060285)*pp);
IkReal x2144=((1.0)*pz);
CheckValue<IkReal> x2145 = IKatan2WithCheck(IkReal(((-0.100617959042798)+(((0.00762287160607455)*x2138))+(((-0.276115968706857)*cj3*pp))+(((-0.00114343074091118)*x2137))+(((-1.0)*sj3*x2143))+(pz*pz)+(((-0.506212609295904)*pp))+(((0.00564933271974229)*sj3))+(((-0.0555062126092959)*cj3)))),((0.0688360561435803)+(((0.175297399907961)*sj3))+(((-1.0)*x2142*x2144))+(((0.0931684307409112)*x2138))+(((-0.00621260929590428)*pp*sj3))+(((-0.0139752646111367)*x2137))+(((-0.0759318913943856)*pp))+(((0.0299240681086056)*cj3))+(((-1.0)*cj3*x2143))+(((-1.0)*x2139*x2144))),IKFAST_ATAN2_MAGTHRESH);
if(!x2145.valid){
continue;
}
CheckValue<IkReal> x2146=IKPowWithIntegerCheck(IKsign(((((-0.185020708697653)*x2139))+(((-0.138057984353428)*pp*pz))+(((0.310561435803037)*pz*sj3))+(((-1.0)*x2140*x2142))+((x2141*x2142))+(((0.099746893695352)*pz))+(((-0.185020708697653)*x2142))+(((-1.0)*x2139*x2140))+((x2139*x2141)))),-1);
if(!x2146.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2145.value)+(((1.5707963267949)*(x2146.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2147=IKsin(j1);
IkReal x2148=IKcos(j1);
IkReal x2149=((0.045)*sj3);
IkReal x2150=((0.3)*cj3);
IkReal x2151=((0.045)*cj3);
IkReal x2152=(cj0*px);
IkReal x2153=(py*sj0);
IkReal x2154=(sj3*x2148);
IkReal x2155=(pz*x2147);
IkReal x2156=(pz*x2148);
IkReal x2157=((0.09)*x2148);
IkReal x2158=((1.1)*x2147);
evalcond[0]=((-0.55)+((x2147*x2152))+((x2147*x2153))+x2156+(((-1.0)*x2149))+(((-1.0)*x2150)));
evalcond[1]=((0.045)+(((-1.0)*x2151))+((x2148*x2153))+((x2148*x2152))+(((0.3)*sj3))+(((-1.0)*x2155)));
evalcond[2]=((((-0.310561435803037)*sj3*x2147))+(((-0.099746893695352)*x2147))+pz+(((0.0254095720202485)*x2154))+(((0.138057984353428)*pp*x2147))+(((-0.185020708697653)*x2148))+(((-0.92038656235619)*pp*x2148)));
evalcond[3]=(((x2147*x2150))+(((-0.3)*x2154))+(((-0.045)*x2148))+((x2148*x2151))+(((0.55)*x2147))+(((-1.0)*x2152))+(((-1.0)*x2153))+((x2147*x2149)));
evalcond[4]=((-0.2125)+((x2152*x2158))+(((-1.0)*x2152*x2157))+(((-1.0)*x2153*x2157))+(((-1.0)*pp))+(((0.09)*x2155))+(((1.1)*x2156))+((x2153*x2158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2159=cj0*cj0;
IkReal x2160=py*py;
IkReal x2161=cj3*cj3;
IkReal x2162=(py*sj0);
IkReal x2163=((0.3)*sj3);
IkReal x2164=((0.045)*cj3);
IkReal x2165=(cj0*px);
IkReal x2166=(cj3*sj3);
IkReal x2167=((1.0)*pz);
CheckValue<IkReal> x2168=IKPowWithIntegerCheck(IKsign(((((-0.55)*pz))+(((-0.3)*cj3*pz))+(((-1.0)*x2163*x2165))+((x2164*x2165))+(((-0.045)*pz*sj3))+(((-0.045)*x2165))+(((-0.045)*x2162))+((x2162*x2164))+(((-1.0)*x2162*x2163)))),-1);
if(!x2168.valid){
continue;
}
CheckValue<IkReal> x2169 = IKatan2WithCheck(IkReal(((-0.03825)+(((0.01125)*cj3))+(((-0.167025)*sj3))+(((0.027)*x2161))+(((-1.0)*x2165*x2167))+(((-0.087975)*x2166))+(((-1.0)*x2162*x2167)))),((-0.304525)+(((2.0)*x2162*x2165))+((x2159*(px*px)))+(((-0.0495)*sj3))+x2160+(((-0.027)*x2166))+(((-0.087975)*x2161))+(((-0.33)*cj3))+(((-1.0)*x2159*x2160))),IKFAST_ATAN2_MAGTHRESH);
if(!x2169.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2168.value)))+(x2169.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2170=IKsin(j1);
IkReal x2171=IKcos(j1);
IkReal x2172=((0.045)*sj3);
IkReal x2173=((0.3)*cj3);
IkReal x2174=((0.045)*cj3);
IkReal x2175=(cj0*px);
IkReal x2176=(py*sj0);
IkReal x2177=(sj3*x2171);
IkReal x2178=(pz*x2170);
IkReal x2179=(pz*x2171);
IkReal x2180=((0.09)*x2171);
IkReal x2181=((1.1)*x2170);
evalcond[0]=((-0.55)+((x2170*x2176))+((x2170*x2175))+x2179+(((-1.0)*x2173))+(((-1.0)*x2172)));
evalcond[1]=((0.045)+((x2171*x2176))+((x2171*x2175))+(((-1.0)*x2178))+(((0.3)*sj3))+(((-1.0)*x2174)));
evalcond[2]=((((-0.310561435803037)*sj3*x2170))+(((0.138057984353428)*pp*x2170))+pz+(((-0.099746893695352)*x2170))+(((0.0254095720202485)*x2177))+(((-0.92038656235619)*pp*x2171))+(((-0.185020708697653)*x2171)));
evalcond[3]=((((0.55)*x2170))+((x2170*x2172))+((x2170*x2173))+(((-0.3)*x2177))+((x2171*x2174))+(((-0.045)*x2171))+(((-1.0)*x2176))+(((-1.0)*x2175)));
evalcond[4]=((-0.2125)+(((-1.0)*x2175*x2180))+(((-1.0)*pp))+((x2176*x2181))+(((1.1)*x2179))+(((-1.0)*x2176*x2180))+((x2175*x2181))+(((0.09)*x2178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2182=cj0*cj0;
IkReal x2183=py*py;
IkReal x2184=(pz*sj3);
IkReal x2185=(py*sj0);
IkReal x2186=((0.3)*cj3);
IkReal x2187=((0.045)*sj3);
IkReal x2188=((0.045)*cj3);
IkReal x2189=(cj0*px);
IkReal x2190=((0.3)*sj3);
CheckValue<IkReal> x2191=IKPowWithIntegerCheck(IKsign(((((2.0)*x2185*x2189))+x2183+((x2182*(px*px)))+(pz*pz)+(((-1.0)*x2182*x2183)))),-1);
if(!x2191.valid){
continue;
}
CheckValue<IkReal> x2192 = IKatan2WithCheck(IkReal(((((0.3)*x2184))+(((0.045)*pz))+((x2186*x2189))+(((-1.0)*pz*x2188))+((x2187*x2189))+(((0.55)*x2185))+(((0.55)*x2189))+((x2185*x2186))+((x2185*x2187)))),(((pz*x2186))+(((-1.0)*x2189*x2190))+(((-1.0)*x2185*x2190))+(((-0.045)*x2189))+(((-0.045)*x2185))+((x2188*x2189))+(((0.045)*x2184))+(((0.55)*pz))+((x2185*x2188))),IKFAST_ATAN2_MAGTHRESH);
if(!x2192.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2191.value)))+(x2192.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2193=IKsin(j1);
IkReal x2194=IKcos(j1);
IkReal x2195=((0.045)*sj3);
IkReal x2196=((0.3)*cj3);
IkReal x2197=((0.045)*cj3);
IkReal x2198=(cj0*px);
IkReal x2199=(py*sj0);
IkReal x2200=(sj3*x2194);
IkReal x2201=(pz*x2193);
IkReal x2202=(pz*x2194);
IkReal x2203=((0.09)*x2194);
IkReal x2204=((1.1)*x2193);
evalcond[0]=((-0.55)+x2202+((x2193*x2198))+((x2193*x2199))+(((-1.0)*x2196))+(((-1.0)*x2195)));
evalcond[1]=((0.045)+(((-1.0)*x2201))+((x2194*x2198))+((x2194*x2199))+(((-1.0)*x2197))+(((0.3)*sj3)));
evalcond[2]=((((-0.92038656235619)*pp*x2194))+(((0.0254095720202485)*x2200))+(((-0.310561435803037)*sj3*x2193))+(((-0.185020708697653)*x2194))+(((0.138057984353428)*pp*x2193))+pz+(((-0.099746893695352)*x2193)));
evalcond[3]=((((-0.3)*x2200))+((x2193*x2195))+((x2193*x2196))+((x2194*x2197))+(((-1.0)*x2198))+(((-1.0)*x2199))+(((-0.045)*x2194))+(((0.55)*x2193)));
evalcond[4]=((-0.2125)+((x2198*x2204))+(((0.09)*x2201))+(((-1.0)*pp))+(((-1.0)*x2198*x2203))+(((-1.0)*x2199*x2203))+((x2199*x2204))+(((1.1)*x2202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2205=cj2*cj2;
IkReal x2206=((0.045)*px);
IkReal x2207=(sj0*sj2);
IkReal x2208=(pz*sj2);
IkReal x2209=(cj0*cj3);
IkReal x2210=((0.55)*cj2);
IkReal x2211=(px*sj0);
IkReal x2212=(cj0*py);
IkReal x2213=((0.3)*cj3);
IkReal x2214=((0.3)*sj3);
IkReal x2215=((0.045)*sj3);
IkReal x2216=(sj0*x2205);
IkReal x2217=(cj0*cj2*sj2);
IkReal x2218=((0.3)*cj2*py);
IkReal x2219=((0.045)*x2205);
IkReal x2220=((0.045)*cj2*py);
CheckValue<IkReal> x2221=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2208*x2213))+(((-1.0)*x2208*x2215))+(((-1.0)*cj2*sj2*x2206*x2209))+((x2206*x2217))+((px*x2214*x2217))+(((-1.0)*cj3*x2207*x2220))+(((-0.55)*x2208))+((x2207*x2220))+((cj2*py*x2207*x2214)))),-1);
if(!x2221.valid){
continue;
}
CheckValue<IkReal> x2222 = IKatan2WithCheck(IkReal(((((-1.0)*x2210*x2211))+((cj2*x2212*x2215))+((x2210*x2212))+(((-1.0)*py*pz*x2207))+(((-1.0)*cj0*px*x2208))+(((-1.0)*cj2*x2211*x2213))+(((-1.0)*cj2*sj0*sj3*x2206))+((x2209*x2218)))),(((cj3*x2206*x2216))+(((-1.0)*x2205*x2211*x2214))+(((-1.0)*pz*x2208))+((x2205*x2212*x2214))+((x2212*x2219))+(((-1.0)*py*x2209*x2219))+(((-1.0)*x2206*x2216))),IKFAST_ATAN2_MAGTHRESH);
if(!x2222.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2221.value)))+(x2222.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2223=IKsin(j1);
IkReal x2224=IKcos(j1);
IkReal x2225=(px*sj2);
IkReal x2226=((0.3)*sj3);
IkReal x2227=((0.09)*sj0);
IkReal x2228=(cj2*px);
IkReal x2229=((0.045)*cj3);
IkReal x2230=((0.045)*cj2);
IkReal x2231=(py*sj0);
IkReal x2232=((0.045)*sj3);
IkReal x2233=((1.0)*cj0);
IkReal x2234=((0.3)*cj3);
IkReal x2235=(py*sj2);
IkReal x2236=(cj0*x2224);
IkReal x2237=(cj3*x2223);
IkReal x2238=(cj2*x2224);
IkReal x2239=(cj2*x2223);
IkReal x2240=(pz*x2224);
IkReal x2241=(cj0*px*x2223);
evalcond[0]=((-0.55)+x2240+x2241+(((-1.0)*x2234))+(((-1.0)*x2232))+((x2223*x2231)));
evalcond[1]=((((-1.0)*cj2*py*x2233))+((sj0*x2228))+((x2225*x2236))+((sj2*x2224*x2231))+(((-1.0)*pz*sj2*x2223)));
evalcond[2]=((((-0.55)*x2224))+((x2226*x2239))+(((-1.0)*x2224*x2234))+(((-1.0)*x2224*x2232))+(((-1.0)*x2229*x2239))+pz+((x2223*x2230)));
evalcond[3]=((0.045)+((pz*x2239))+x2226+(((-1.0)*x2231*x2238))+((sj0*x2225))+(((-1.0)*x2224*x2228*x2233))+(((-1.0)*x2229))+(((-1.0)*x2233*x2235)));
evalcond[4]=(((x2226*x2238))+(((-1.0)*x2229*x2238))+((x2224*x2230))+(((-1.0)*x2231))+(((-1.0)*px*x2233))+((x2223*x2232))+((x2223*x2234))+(((0.55)*x2223)));
evalcond[5]=((-0.2125)+(((-1.0)*x2225*x2227))+((py*x2227*x2238))+(((-1.0)*pp))+(((0.09)*cj0*x2235))+(((-0.09)*pz*x2239))+(((1.1)*x2240))+(((1.1)*x2241))+(((1.1)*x2223*x2231))+(((0.09)*x2228*x2236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2242=cj0*cj0;
IkReal x2243=py*py;
IkReal x2244=px*px;
IkReal x2245=(px*py);
IkReal x2246=((1.0)*cj2);
IkReal x2247=(cj0*sj2);
IkReal x2248=(cj2*sj0);
IkReal x2249=((0.3)*cj3);
IkReal x2250=(pz*sj2);
IkReal x2251=((0.045)*sj3);
IkReal x2252=(sj2*x2243);
IkReal x2253=(py*sj0*sj2);
CheckValue<IkReal> x2254 = IKatan2WithCheck(IkReal(((((0.55)*px*x2247))+((px*x2247*x2251))+((px*x2247*x2249))+((px*pz*x2248))+((x2249*x2253))+(((0.55)*x2253))+((x2251*x2253))+(((-1.0)*cj0*py*pz*x2246)))),(((x2249*x2250))+(((2.0)*cj2*x2242*x2245))+(((0.55)*x2250))+((cj0*x2243*x2248))+((x2250*x2251))+(((-1.0)*x2245*x2246))+(((-1.0)*cj0*sj0*x2244*x2246))),IKFAST_ATAN2_MAGTHRESH);
if(!x2254.valid){
continue;
}
CheckValue<IkReal> x2255=IKPowWithIntegerCheck(IKsign((x2252+((sj2*x2242*x2244))+(((-1.0)*x2242*x2252))+(((2.0)*sj0*x2245*x2247))+((pz*x2250)))),-1);
if(!x2255.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2254.value)+(((1.5707963267949)*(x2255.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2256=IKsin(j1);
IkReal x2257=IKcos(j1);
IkReal x2258=(px*sj2);
IkReal x2259=((0.3)*sj3);
IkReal x2260=((0.09)*sj0);
IkReal x2261=(cj2*px);
IkReal x2262=((0.045)*cj3);
IkReal x2263=((0.045)*cj2);
IkReal x2264=(py*sj0);
IkReal x2265=((0.045)*sj3);
IkReal x2266=((1.0)*cj0);
IkReal x2267=((0.3)*cj3);
IkReal x2268=(py*sj2);
IkReal x2269=(cj0*x2257);
IkReal x2270=(cj3*x2256);
IkReal x2271=(cj2*x2257);
IkReal x2272=(cj2*x2256);
IkReal x2273=(pz*x2257);
IkReal x2274=(cj0*px*x2256);
evalcond[0]=((-0.55)+((x2256*x2264))+x2274+x2273+(((-1.0)*x2267))+(((-1.0)*x2265)));
evalcond[1]=((((-1.0)*pz*sj2*x2256))+((x2258*x2269))+((sj0*x2261))+(((-1.0)*cj2*py*x2266))+((sj2*x2257*x2264)));
evalcond[2]=(((x2256*x2263))+((x2259*x2272))+(((-1.0)*x2257*x2267))+(((-1.0)*x2257*x2265))+pz+(((-0.55)*x2257))+(((-1.0)*x2262*x2272)));
evalcond[3]=((0.045)+x2259+(((-1.0)*x2257*x2261*x2266))+((pz*x2272))+((sj0*x2258))+(((-1.0)*x2262))+(((-1.0)*x2264*x2271))+(((-1.0)*x2266*x2268)));
evalcond[4]=(((x2256*x2265))+((x2256*x2267))+((x2257*x2263))+((x2259*x2271))+(((-1.0)*px*x2266))+(((0.55)*x2256))+(((-1.0)*x2262*x2271))+(((-1.0)*x2264)));
evalcond[5]=((-0.2125)+(((1.1)*x2273))+(((1.1)*x2274))+(((1.1)*x2256*x2264))+(((-0.09)*pz*x2272))+(((0.09)*x2261*x2269))+(((-1.0)*x2258*x2260))+(((-1.0)*pp))+(((0.09)*cj0*x2268))+((py*x2260*x2271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2275=cj3*cj3;
IkReal x2276=(cj2*sj3);
IkReal x2277=(py*sj0);
IkReal x2278=((0.3)*cj3);
IkReal x2279=((0.045)*sj3);
IkReal x2280=(cj0*px);
IkReal x2281=(cj2*cj3);
IkReal x2282=((0.045)*pz);
IkReal x2283=((1.0)*pz);
CheckValue<IkReal> x2284=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*x2282))+((x2281*x2282))+(((-0.55)*x2277))+(((-1.0)*x2278*x2280))+(((-1.0)*x2279*x2280))+(((-1.0)*x2277*x2279))+(((-1.0)*x2277*x2278))+(((-0.55)*x2280))+(((-0.3)*pz*x2276)))),-1);
if(!x2284.valid){
continue;
}
CheckValue<IkReal> x2285 = IKatan2WithCheck(IkReal(((-0.304525)+(((-0.0495)*sj3))+(((-0.027)*cj3*sj3))+(pz*pz)+(((-0.087975)*x2275))+(((-0.33)*cj3)))),((((-1.0)*x2280*x2283))+(((-1.0)*x2277*x2283))+(((0.01125)*x2281))+(((-0.087975)*cj3*x2276))+(((-0.167025)*x2276))+(((0.027)*cj2*x2275))+(((-0.03825)*cj2))),IKFAST_ATAN2_MAGTHRESH);
if(!x2285.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2284.value)))+(x2285.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2286=IKsin(j1);
IkReal x2287=IKcos(j1);
IkReal x2288=(px*sj2);
IkReal x2289=((0.3)*sj3);
IkReal x2290=((0.09)*sj0);
IkReal x2291=(cj2*px);
IkReal x2292=((0.045)*cj3);
IkReal x2293=((0.045)*cj2);
IkReal x2294=(py*sj0);
IkReal x2295=((0.045)*sj3);
IkReal x2296=((1.0)*cj0);
IkReal x2297=((0.3)*cj3);
IkReal x2298=(py*sj2);
IkReal x2299=(cj0*x2287);
IkReal x2300=(cj3*x2286);
IkReal x2301=(cj2*x2287);
IkReal x2302=(cj2*x2286);
IkReal x2303=(pz*x2287);
IkReal x2304=(cj0*px*x2286);
evalcond[0]=((-0.55)+x2303+x2304+((x2286*x2294))+(((-1.0)*x2297))+(((-1.0)*x2295)));
evalcond[1]=(((sj0*x2291))+((sj2*x2287*x2294))+(((-1.0)*cj2*py*x2296))+(((-1.0)*pz*sj2*x2286))+((x2288*x2299)));
evalcond[2]=((((-1.0)*x2292*x2302))+(((-1.0)*x2287*x2295))+(((-1.0)*x2287*x2297))+pz+((x2286*x2293))+(((-0.55)*x2287))+((x2289*x2302)));
evalcond[3]=((0.045)+x2289+((pz*x2302))+((sj0*x2288))+(((-1.0)*x2296*x2298))+(((-1.0)*x2292))+(((-1.0)*x2294*x2301))+(((-1.0)*x2287*x2291*x2296)));
evalcond[4]=((((-1.0)*x2292*x2301))+(((-1.0)*x2294))+((x2287*x2293))+(((0.55)*x2286))+((x2286*x2295))+((x2286*x2297))+(((-1.0)*px*x2296))+((x2289*x2301)));
evalcond[5]=((-0.2125)+(((-0.09)*pz*x2302))+(((1.1)*x2304))+(((1.1)*x2303))+(((0.09)*cj0*x2298))+(((-1.0)*pp))+(((-1.0)*x2288*x2290))+(((0.09)*x2291*x2299))+((py*x2290*x2301))+(((1.1)*x2286*x2294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x159=((1.0)*cj3);
IkReal x160=(sj0*sj2);
IkReal x161=(cj2*sj1);
IkReal x162=((1.0)*sj3);
IkReal x163=(cj1*cj2);
IkReal x164=(sj1*sj2);
IkReal x165=(cj0*sj2);
IkReal x166=((1.0)*cj1);
IkReal x167=(((cj3*x163))+(((-1.0)*sj1*x162)));
IkReal x168=((((-1.0)*x160*x166))+((cj0*cj2)));
IkReal x169=(((sj3*x163))+((cj3*sj1)));
IkReal x170=((((-1.0)*x161*x162))+((cj1*cj3)));
IkReal x171=(cj0*x167);
IkReal x172=((((-1.0)*x159*x161))+(((-1.0)*cj1*x162)));
IkReal x173=((((-1.0)*cj2*sj0))+(((-1.0)*x165*x166)));
IkReal x174=(((sj0*x167))+((cj3*x165)));
IkReal x175=(((cj0*x169))+(((-1.0)*x160*x162)));
IkReal x176=(((sj3*x165))+((sj0*x169)));
IkReal x177=((((-1.0)*cj3*x160))+x171);
new_r00=(((r20*x172))+((r00*(((((-1.0)*x159*x160))+x171))))+((r10*x174)));
new_r01=(((r01*x177))+((r21*x172))+((r11*x174)));
new_r02=(((r22*x172))+((r12*x174))+((r02*x177)));
new_r10=(((r00*x173))+((r20*x164))+((r10*x168)));
new_r11=(((r01*x173))+((r21*x164))+((r11*x168)));
new_r12=(((r22*x164))+((r12*x168))+((r02*x173)));
new_r20=(((r00*x175))+((r20*x170))+((r10*x176)));
new_r21=(((r01*x175))+((r21*x170))+((r11*x176)));
new_r22=(((r22*x170))+((r12*x176))+((r02*x175)));
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
cj5array[0]=new_r22;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x178=((1.0)*cj3);
IkReal x179=(sj0*sj2);
IkReal x180=(cj2*sj1);
IkReal x181=((1.0)*sj3);
IkReal x182=(cj1*cj2);
IkReal x183=(sj1*sj2);
IkReal x184=(cj0*sj2);
IkReal x185=((1.0)*cj1);
IkReal x186=x167;
IkReal x187=x168;
IkReal x188=x169;
IkReal x189=x170;
IkReal x190=(cj0*x186);
IkReal x191=x172;
IkReal x192=x173;
IkReal x193=(((sj0*x186))+((cj3*x184)));
IkReal x194=(((cj0*x188))+(((-1.0)*x179*x181)));
IkReal x195=(((sj3*x184))+((sj0*x188)));
IkReal x196=(x190+(((-1.0)*cj3*x179)));
new_r00=(((r20*x191))+((r10*x193))+((r00*((x190+(((-1.0)*x178*x179)))))));
new_r01=(((r01*x196))+((r21*x191))+((r11*x193)));
new_r02=(((r12*x193))+((r22*x191))+((r02*x196)));
new_r10=(((r00*x192))+((r20*x183))+((r10*x187)));
new_r11=(((r01*x192))+((r21*x183))+((r11*x187)));
new_r12=(((r12*x187))+((r02*x192))+((r22*x183)));
new_r20=(((r00*x194))+((r20*x189))+((r10*x195)));
new_r21=(((r01*x194))+((r21*x189))+((r11*x195)));
new_r22=(((r12*x195))+((r02*x194))+((r22*x189)));
j4eval[0]=sj5;
j4eval[1]=IKsign(sj5);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x197=((1.0)*cj3);
IkReal x198=(sj0*sj2);
IkReal x199=(cj2*sj1);
IkReal x200=((1.0)*sj3);
IkReal x201=(cj1*cj2);
IkReal x202=(sj1*sj2);
IkReal x203=(cj0*sj2);
IkReal x204=((1.0)*cj1);
IkReal x205=x167;
IkReal x206=x168;
IkReal x207=x169;
IkReal x208=x170;
IkReal x209=(cj0*x205);
IkReal x210=x172;
IkReal x211=x173;
IkReal x212=(((sj0*x205))+((cj3*x203)));
IkReal x213=((((-1.0)*x198*x200))+((cj0*x207)));
IkReal x214=(((sj3*x203))+((sj0*x207)));
IkReal x215=((((-1.0)*cj3*x198))+x209);
new_r00=(((r00*(((((-1.0)*x197*x198))+x209))))+((r10*x212))+((r20*x210)));
new_r01=(((r21*x210))+((r11*x212))+((r01*x215)));
new_r02=(((r12*x212))+((r02*x215))+((r22*x210)));
new_r10=(((r10*x206))+((r20*x202))+((r00*x211)));
new_r11=(((r11*x206))+((r21*x202))+((r01*x211)));
new_r12=(((r22*x202))+((r02*x211))+((r12*x206)));
new_r20=(((r20*x208))+((r00*x213))+((r10*x214)));
new_r21=(((r11*x214))+((r21*x208))+((r01*x213)));
new_r22=(((r22*x208))+((r12*x214))+((r02*x213)));
j4eval[0]=sj5;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x217 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x217.valid){
continue;
}
IkReal x216=x217.value;
j4array[0]=((-1.0)*x216);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x216)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(((new_r12*(IKcos(j4))))+(((-1.0)*new_r02*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x218=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj4*x218))+(((-1.0)*new_r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*new_r00))+(((-1.0)*sj4*x218)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x218))+(((-1.0)*new_r00*sj4))))+IKsqr((((cj4*new_r00))+(((-1.0)*sj4*x218))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj4*x218))+(((-1.0)*new_r00*sj4))), (((cj4*new_r00))+(((-1.0)*sj4*x218))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x219=IKsin(j6);
IkReal x220=IKcos(j6);
IkReal x221=((1.0)*sj4);
IkReal x222=((1.0)*x220);
IkReal x223=(sj4*x219);
IkReal x224=(sj4*x220);
IkReal x225=(cj4*x219);
IkReal x226=(cj4*x222);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x219);
evalcond[1]=(x225+x224+new_r01);
evalcond[2]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x222)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x219))+(((-1.0)*new_r00*x221)));
evalcond[4]=((((-1.0)*new_r01*x221))+((cj4*new_r11))+(((-1.0)*x222)));
evalcond[5]=(x223+new_r00+(((-1.0)*x226)));
evalcond[6]=(x223+new_r11+(((-1.0)*x226)));
evalcond[7]=((((-1.0)*x220*x221))+new_r10+(((-1.0)*x225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x228 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x228.valid){
continue;
}
IkReal x227=x228.value;
j4array[0]=((-1.0)*x227);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x227)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(((new_r12*(IKcos(j4))))+(((-1.0)*new_r02*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x229=((1.0)*new_r00);
if( IKabs((((cj4*new_r01))+(((-1.0)*sj4*x229)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*x229))+(((-1.0)*new_r01*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*new_r01))+(((-1.0)*sj4*x229))))+IKsqr(((((-1.0)*cj4*x229))+(((-1.0)*new_r01*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((cj4*new_r01))+(((-1.0)*sj4*x229))), ((((-1.0)*cj4*x229))+(((-1.0)*new_r01*sj4))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x230=IKcos(j6);
IkReal x231=IKsin(j6);
IkReal x232=((1.0)*sj4);
IkReal x233=((1.0)*x231);
IkReal x234=(sj4*x230);
IkReal x235=((1.0)*x230);
IkReal x236=(cj4*x233);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x230);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x233)));
evalcond[2]=(((sj4*x231))+((cj4*x230))+new_r00);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x233))+(((-1.0)*new_r00*x232)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x235))+(((-1.0)*new_r01*x232)));
evalcond[5]=((((-1.0)*x236))+x234+new_r01);
evalcond[6]=((((-1.0)*x236))+x234+new_r10);
evalcond[7]=((((-1.0)*cj4*x235))+(((-1.0)*x231*x232))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x238=IKPowWithIntegerCheck(sj5,-1);
if(!x238.valid){
continue;
}
IkReal x237=x238.value;
CheckValue<IkReal> x239=IKPowWithIntegerCheck(new_r12,-1);
if(!x239.valid){
continue;
}
if( IKabs((x237*(x239.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj5*cj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x237)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x237*(x239.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj5*cj5)))))))+IKsqr((new_r02*x237))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x237*(x239.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj5*cj5)))))), (new_r02*x237));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x240=IKcos(j4);
IkReal x241=IKsin(j4);
IkReal x242=((1.0)*sj5);
IkReal x243=((1.0)*cj5);
IkReal x244=(new_r12*x241);
IkReal x245=(new_r02*x240);
evalcond[0]=((((-1.0)*x240*x242))+new_r02);
evalcond[1]=((((-1.0)*x241*x242))+new_r12);
evalcond[2]=(((new_r12*x240))+(((-1.0)*new_r02*x241)));
evalcond[3]=(x245+x244+(((-1.0)*x242)));
evalcond[4]=(((cj5*x244))+((cj5*x245))+(((-1.0)*new_r22*x242)));
evalcond[5]=((((-1.0)*new_r10*x241*x242))+(((-1.0)*new_r00*x240*x242))+(((-1.0)*new_r20*x243)));
evalcond[6]=((((-1.0)*new_r11*x241*x242))+(((-1.0)*new_r01*x240*x242))+(((-1.0)*new_r21*x243)));
evalcond[7]=((1.0)+(((-1.0)*x242*x244))+(((-1.0)*x242*x245))+(((-1.0)*new_r22*x243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[2];
IkReal x246=((1.0)*cj3);
IkReal x247=(sj0*sj2);
IkReal x248=(cj2*sj1);
IkReal x249=((1.0)*sj3);
IkReal x250=(cj1*cj2);
IkReal x251=(sj1*sj2);
IkReal x252=(cj0*sj2);
IkReal x253=((1.0)*cj1);
IkReal x254=x167;
IkReal x255=x168;
IkReal x256=x169;
IkReal x257=x170;
IkReal x258=(cj0*x254);
IkReal x259=x172;
IkReal x260=x173;
IkReal x261=(((cj3*x252))+((sj0*x254)));
IkReal x262=(((cj0*x256))+(((-1.0)*x247*x249)));
IkReal x263=(((sj0*x256))+((sj3*x252)));
IkReal x264=(x258+(((-1.0)*cj3*x247)));
new_r00=(((r20*x259))+((r10*x261))+((r00*((x258+(((-1.0)*x246*x247)))))));
new_r01=(((r21*x259))+((r11*x261))+((r01*x264)));
new_r02=(((r02*x264))+((r12*x261))+((r22*x259)));
new_r10=(((r20*x251))+((r10*x255))+((r00*x260)));
new_r11=(((r21*x251))+((r11*x255))+((r01*x260)));
new_r12=(((r02*x260))+((r12*x255))+((r22*x251)));
new_r20=(((r20*x257))+((r00*x262))+((r10*x263)));
new_r21=(((r21*x257))+((r11*x263))+((r01*x262)));
new_r22=(((r02*x262))+((r12*x263))+((r22*x257)));
j6eval[0]=sj5;
j6eval[1]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x265=((1.0)*cj3);
IkReal x266=(sj0*sj2);
IkReal x267=(cj2*sj1);
IkReal x268=((1.0)*sj3);
IkReal x269=(cj1*cj2);
IkReal x270=(sj1*sj2);
IkReal x271=(cj0*sj2);
IkReal x272=((1.0)*cj1);
IkReal x273=x167;
IkReal x274=x168;
IkReal x275=x169;
IkReal x276=x170;
IkReal x277=(cj0*x273);
IkReal x278=x172;
IkReal x279=x173;
IkReal x280=(((sj0*x273))+((cj3*x271)));
IkReal x281=((((-1.0)*x266*x268))+((cj0*x275)));
IkReal x282=(((sj3*x271))+((sj0*x275)));
IkReal x283=((((-1.0)*cj3*x266))+x277);
new_r00=(((r00*((x277+(((-1.0)*x265*x266))))))+((r10*x280))+((r20*x278)));
new_r01=(((r01*x283))+((r11*x280))+((r21*x278)));
new_r02=(((r22*x278))+((r02*x283))+((r12*x280)));
new_r10=(((r00*x279))+((r10*x274))+((r20*x270)));
new_r11=(((r21*x270))+((r01*x279))+((r11*x274)));
new_r12=(((r02*x279))+((r22*x270))+((r12*x274)));
new_r20=(((r00*x281))+((r10*x282))+((r20*x276)));
new_r21=(((r01*x281))+((r11*x282))+((r21*x276)));
new_r22=(((r22*x276))+((r02*x281))+((r12*x282)));
j6eval[0]=sj4;
j6eval[1]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
IkReal x284=((1.0)*cj3);
IkReal x285=(sj0*sj2);
IkReal x286=(cj2*sj1);
IkReal x287=((1.0)*sj3);
IkReal x288=(cj1*cj2);
IkReal x289=(sj1*sj2);
IkReal x290=(cj0*sj2);
IkReal x291=((1.0)*cj1);
IkReal x292=x167;
IkReal x293=x168;
IkReal x294=x169;
IkReal x295=x170;
IkReal x296=(cj0*x292);
IkReal x297=x172;
IkReal x298=x173;
IkReal x299=(((cj3*x290))+((sj0*x292)));
IkReal x300=((((-1.0)*x285*x287))+((cj0*x294)));
IkReal x301=(((sj0*x294))+((sj3*x290)));
IkReal x302=((((-1.0)*cj3*x285))+x296);
new_r00=(((r20*x297))+((r10*x299))+((r00*((x296+(((-1.0)*x284*x285)))))));
new_r01=(((r01*x302))+((r21*x297))+((r11*x299)));
new_r02=(((r12*x299))+((r02*x302))+((r22*x297)));
new_r10=(((r00*x298))+((r10*x293))+((r20*x289)));
new_r11=(((r21*x289))+((r01*x298))+((r11*x293)));
new_r12=(((r12*x293))+((r22*x289))+((r02*x298)));
new_r20=(((r20*x295))+((r10*x301))+((r00*x300)));
new_r21=(((r11*x301))+((r01*x300))+((r21*x295)));
new_r22=(((r02*x300))+((r22*x295))+((r12*x301)));
j6eval[0]=cj4;
j6eval[1]=cj5;
j6eval[2]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x303=(new_r22+(((-1.0)*cj5)));
IkReal x304=((((-1.0)*sj5))+new_r12);
IkReal x305=((1.0)*cj5);
IkReal x306=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=x303;
evalcond[2]=x303;
evalcond[3]=new_r02;
evalcond[4]=x304;
evalcond[5]=x304;
evalcond[6]=((((-1.0)*new_r22*x306))+((cj5*new_r12)));
evalcond[7]=((((-1.0)*new_r20*x305))+(((-1.0)*new_r10*x306)));
evalcond[8]=((((-1.0)*new_r21*x305))+(((-1.0)*new_r11*x306)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x305))+(((-1.0)*new_r12*x306)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x307 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x307.valid){
continue;
}
CheckValue<IkReal> x308=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x308.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x307.value)+(((1.5707963267949)*(x308.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x309=IKsin(j6);
IkReal x310=IKcos(j6);
IkReal x311=((1.0)*new_r12);
IkReal x312=((1.0)*x310);
evalcond[0]=(((new_r12*x310))+new_r20);
evalcond[1]=(((new_r22*x309))+new_r11);
evalcond[2]=(new_r21+(((-1.0)*x309*x311)));
evalcond[3]=((((-1.0)*new_r22*x312))+new_r10);
evalcond[4]=((((-1.0)*x309))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x312))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x311))+x309+((new_r11*new_r22)));
evalcond[7]=((((-1.0)*new_r20*x311))+(((-1.0)*x312))+((new_r10*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x313=(new_r22+(((-1.0)*cj5)));
IkReal x314=((1.0)*cj5);
IkReal x315=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=x313;
evalcond[2]=x313;
evalcond[3]=new_r02;
evalcond[4]=(sj5+new_r12);
evalcond[5]=((((-1.0)*x315))+(((-1.0)*new_r12)));
evalcond[6]=((((-1.0)*new_r22*x315))+(((-1.0)*new_r12*x314)));
evalcond[7]=(((new_r10*sj5))+(((-1.0)*new_r20*x314)));
evalcond[8]=((((-1.0)*new_r21*x314))+((new_r11*sj5)));
evalcond[9]=((1.0)+((new_r12*sj5))+(((-1.0)*new_r22*x314)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x316=IKsin(j6);
IkReal x317=IKcos(j6);
IkReal x318=((1.0)*new_r22);
IkReal x319=((1.0)*x317);
evalcond[0]=(((new_r12*x316))+new_r21);
evalcond[1]=((((-1.0)*x316))+new_r00);
evalcond[2]=((((-1.0)*x319))+new_r01);
evalcond[3]=((((-1.0)*new_r12*x319))+new_r20);
evalcond[4]=((((-1.0)*new_r11))+((new_r22*x316)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x317*x318)));
evalcond[6]=((((-1.0)*new_r11*x318))+x316+((new_r12*new_r21)));
evalcond[7]=(((new_r12*new_r20))+(((-1.0)*new_r10*x318))+(((-1.0)*x319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x320=((1.0)*cj4);
IkReal x321=((1.0)*sj4);
IkReal x322=(((cj4*new_r12))+(((-1.0)*new_r02*x321)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x320))+new_r02);
evalcond[3]=((((-1.0)*x321))+new_r12);
evalcond[4]=x322;
evalcond[5]=x322;
evalcond[6]=((-1.0)+((new_r12*sj4))+((cj4*new_r02)));
evalcond[7]=(((cj4*new_r01))+((new_r11*sj4)));
evalcond[8]=(((cj4*new_r00))+((new_r10*sj4)));
evalcond[9]=((((-1.0)*new_r00*x320))+(((-1.0)*new_r10*x321)));
evalcond[10]=((((-1.0)*new_r01*x320))+(((-1.0)*new_r11*x321)));
evalcond[11]=((1.0)+(((-1.0)*new_r12*x321))+(((-1.0)*new_r02*x320)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x323=IKcos(j6);
IkReal x324=IKsin(j6);
IkReal x325=((1.0)*new_r12);
IkReal x326=((1.0)*x324);
IkReal x327=((1.0)*x323);
evalcond[0]=(x323+new_r20);
evalcond[1]=((((-1.0)*x326))+new_r21);
evalcond[2]=(((new_r12*x323))+new_r01);
evalcond[3]=(((new_r12*x324))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x327))+new_r11);
evalcond[5]=((((-1.0)*new_r02*x326))+new_r10);
evalcond[6]=((((-1.0)*x326))+(((-1.0)*new_r00*x325))+((new_r02*new_r10)));
evalcond[7]=((((-1.0)*x327))+(((-1.0)*new_r01*x325))+((new_r02*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x328=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
IkReal x329=(((cj4*new_r00))+((new_r10*sj4)));
IkReal x330=(((cj4*new_r01))+((new_r11*sj4)));
IkReal x331=((1.0)+((new_r12*sj4))+((cj4*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj4+new_r02);
evalcond[3]=(sj4+new_r12);
evalcond[4]=x328;
evalcond[5]=x328;
evalcond[6]=x331;
evalcond[7]=x330;
evalcond[8]=x329;
evalcond[9]=x329;
evalcond[10]=x330;
evalcond[11]=x331;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x332=IKcos(j6);
IkReal x333=IKsin(j6);
IkReal x334=((1.0)*new_r02);
IkReal x335=((1.0)*new_r12);
IkReal x336=((1.0)*x332);
evalcond[0]=(x333+new_r21);
evalcond[1]=((((-1.0)*x336))+new_r20);
evalcond[2]=(((new_r02*x332))+new_r11);
evalcond[3]=(((new_r02*x333))+new_r10);
evalcond[4]=((((-1.0)*x332*x335))+new_r01);
evalcond[5]=((((-1.0)*x333*x335))+new_r00);
evalcond[6]=((((-1.0)*new_r10*x334))+((new_r00*new_r12))+(((-1.0)*x333)));
evalcond[7]=((((-1.0)*new_r11*x334))+((new_r01*new_r12))+(((-1.0)*x336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x337=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
IkReal x338=(((new_r12*sj4))+((cj4*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x337;
evalcond[7]=x337;
evalcond[8]=x338;
evalcond[9]=x338;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x339=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj4*x339))+(((-1.0)*new_r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x339))+((cj4*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x339))+(((-1.0)*new_r00*sj4))))+IKsqr(((((-1.0)*sj4*x339))+((cj4*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj4*x339))+(((-1.0)*new_r00*sj4))), ((((-1.0)*sj4*x339))+((cj4*new_r00))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x340=IKsin(j6);
IkReal x341=IKcos(j6);
IkReal x342=((1.0)*sj4);
IkReal x343=((1.0)*x341);
IkReal x344=(sj4*x340);
IkReal x345=(sj4*x341);
IkReal x346=(cj4*x340);
IkReal x347=(cj4*x343);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x340);
evalcond[1]=(x346+x345+new_r01);
evalcond[2]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x343)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x342))+(((-1.0)*x340)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*new_r01*x342))+(((-1.0)*x343)));
evalcond[5]=(x344+new_r00+(((-1.0)*x347)));
evalcond[6]=(x344+new_r11+(((-1.0)*x347)));
evalcond[7]=((((-1.0)*x341*x342))+new_r10+(((-1.0)*x346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x348=(cj4*new_r02);
IkReal x349=(new_r12*sj4);
IkReal x350=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x350;
evalcond[7]=x350;
evalcond[8]=(x348+x349);
evalcond[9]=((((-1.0)*x348))+(((-1.0)*x349)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x351=((1.0)*new_r00);
if( IKabs((((cj4*new_r01))+(((-1.0)*sj4*x351)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x351)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*new_r01))+(((-1.0)*sj4*x351))))+IKsqr(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x351))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((cj4*new_r01))+(((-1.0)*sj4*x351))), ((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x351))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x352=IKcos(j6);
IkReal x353=IKsin(j6);
IkReal x354=((1.0)*sj4);
IkReal x355=((1.0)*x353);
IkReal x356=(sj4*x352);
IkReal x357=((1.0)*x352);
IkReal x358=(cj4*x355);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x352);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x355)));
evalcond[2]=(((sj4*x353))+((cj4*x352))+new_r00);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x355))+(((-1.0)*new_r00*x354)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x357))+(((-1.0)*new_r01*x354)));
evalcond[5]=((((-1.0)*x358))+x356+new_r01);
evalcond[6]=((((-1.0)*x358))+x356+new_r10);
evalcond[7]=((((-1.0)*cj4*x357))+(((-1.0)*x353*x354))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x359=(new_r22+(((-1.0)*cj5)));
IkReal x360=((((-1.0)*sj5))+new_r02);
IkReal x361=((1.0)*cj5);
IkReal x362=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=x359;
evalcond[2]=x359;
evalcond[3]=x360;
evalcond[4]=new_r12;
evalcond[5]=x360;
evalcond[6]=(((cj5*new_r02))+(((-1.0)*new_r22*x362)));
evalcond[7]=((((-1.0)*new_r00*x362))+(((-1.0)*new_r20*x361)));
evalcond[8]=((((-1.0)*new_r01*x362))+(((-1.0)*new_r21*x361)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x361))+(((-1.0)*new_r02*x362)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x363=IKcos(j6);
IkReal x364=IKsin(j6);
IkReal x365=((1.0)*new_r02);
IkReal x366=((1.0)*x363);
evalcond[0]=(new_r20+((new_r02*x363)));
evalcond[1]=((((-1.0)*x364))+new_r10);
evalcond[2]=((((-1.0)*x366))+new_r11);
evalcond[3]=(((new_r22*x364))+new_r01);
evalcond[4]=((((-1.0)*x364*x365))+new_r21);
evalcond[5]=((((-1.0)*new_r22*x366))+new_r00);
evalcond[6]=(((new_r01*new_r22))+x364+(((-1.0)*new_r21*x365)));
evalcond[7]=((((-1.0)*new_r20*x365))+((new_r00*new_r22))+(((-1.0)*x366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x367=(new_r22+(((-1.0)*cj5)));
IkReal x368=((1.0)*cj5);
IkReal x369=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=x367;
evalcond[2]=x367;
evalcond[3]=(sj5+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*x369))+(((-1.0)*new_r02)));
evalcond[6]=((((-1.0)*new_r22*x369))+(((-1.0)*new_r02*x368)));
evalcond[7]=((((-1.0)*new_r20*x368))+((new_r00*sj5)));
evalcond[8]=(((new_r01*sj5))+(((-1.0)*new_r21*x368)));
evalcond[9]=((1.0)+((new_r02*sj5))+(((-1.0)*new_r22*x368)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x370 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x370.valid){
continue;
}
CheckValue<IkReal> x371=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x371.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x370.value)+(((1.5707963267949)*(x371.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x372=IKsin(j6);
IkReal x373=IKcos(j6);
IkReal x374=((1.0)*new_r01);
IkReal x375=((1.0)*new_r00);
IkReal x376=((1.0)*x373);
evalcond[0]=(new_r21+((new_r02*x372)));
evalcond[1]=(new_r20+(((-1.0)*new_r02*x376)));
evalcond[2]=((((-1.0)*x372))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x376))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*x374))+((new_r22*x372)));
evalcond[5]=((((-1.0)*x375))+(((-1.0)*new_r22*x376)));
evalcond[6]=((((-1.0)*new_r22*x374))+x372+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*x376))+(((-1.0)*new_r22*x375))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x378=IKPowWithIntegerCheck(sj5,-1);
if(!x378.valid){
continue;
}
IkReal x377=x378.value;
CheckValue<IkReal> x379=IKPowWithIntegerCheck(cj4,-1);
if(!x379.valid){
continue;
}
CheckValue<IkReal> x380=IKPowWithIntegerCheck(cj5,-1);
if(!x380.valid){
continue;
}
if( IKabs((x377*(x379.value)*(x380.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x377)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x377*(x379.value)*(x380.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))))+IKsqr(((-1.0)*new_r20*x377))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x377*(x379.value)*(x380.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))), ((-1.0)*new_r20*x377));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x381=IKsin(j6);
IkReal x382=IKcos(j6);
IkReal x383=((1.0)*sj5);
IkReal x384=((1.0)*sj4);
IkReal x385=(cj5*sj4);
IkReal x386=(cj4*new_r01);
IkReal x387=(cj4*new_r00);
IkReal x388=((1.0)*x382);
IkReal x389=(cj5*x381);
IkReal x390=((1.0)*x381);
evalcond[0]=(((sj5*x382))+new_r20);
evalcond[1]=((((-1.0)*x381*x383))+new_r21);
evalcond[2]=(((new_r11*sj4))+x386+x389);
evalcond[3]=((((-1.0)*x390))+((cj4*new_r10))+(((-1.0)*new_r00*x384)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*new_r01*x384))+(((-1.0)*x388)));
evalcond[5]=(((sj4*x382))+new_r01+((cj4*x389)));
evalcond[6]=(((new_r10*sj4))+x387+(((-1.0)*cj5*x388)));
evalcond[7]=((((-1.0)*cj4*cj5*x388))+((sj4*x381))+new_r00);
evalcond[8]=((((-1.0)*cj4*x388))+new_r11+((x381*x385)));
evalcond[9]=((((-1.0)*cj4*x390))+(((-1.0)*cj5*x382*x384))+new_r10);
evalcond[10]=(x381+((new_r11*x385))+(((-1.0)*new_r21*x383))+((cj5*x386)));
evalcond[11]=((((-1.0)*new_r20*x383))+((new_r10*x385))+(((-1.0)*x388))+((cj5*x387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x392=IKPowWithIntegerCheck(sj5,-1);
if(!x392.valid){
continue;
}
IkReal x391=x392.value;
CheckValue<IkReal> x393=IKPowWithIntegerCheck(sj4,-1);
if(!x393.valid){
continue;
}
if( IKabs((x391*(x393.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x391)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x391*(x393.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))))+IKsqr(((-1.0)*new_r20*x391))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x391*(x393.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))), ((-1.0)*new_r20*x391));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x394=IKsin(j6);
IkReal x395=IKcos(j6);
IkReal x396=((1.0)*sj5);
IkReal x397=((1.0)*sj4);
IkReal x398=(cj5*sj4);
IkReal x399=(cj4*new_r01);
IkReal x400=(cj4*new_r00);
IkReal x401=((1.0)*x395);
IkReal x402=(cj5*x394);
IkReal x403=((1.0)*x394);
evalcond[0]=(((sj5*x395))+new_r20);
evalcond[1]=((((-1.0)*x394*x396))+new_r21);
evalcond[2]=(((new_r11*sj4))+x399+x402);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x397))+(((-1.0)*x403)));
evalcond[4]=((((-1.0)*new_r01*x397))+((cj4*new_r11))+(((-1.0)*x401)));
evalcond[5]=(((cj4*x402))+new_r01+((sj4*x395)));
evalcond[6]=(((new_r10*sj4))+x400+(((-1.0)*cj5*x401)));
evalcond[7]=(new_r00+(((-1.0)*cj4*cj5*x401))+((sj4*x394)));
evalcond[8]=(((x394*x398))+new_r11+(((-1.0)*cj4*x401)));
evalcond[9]=(new_r10+(((-1.0)*cj4*x403))+(((-1.0)*cj5*x395*x397)));
evalcond[10]=(((new_r11*x398))+(((-1.0)*new_r21*x396))+((cj5*x399))+x394);
evalcond[11]=(((cj5*x400))+(((-1.0)*x401))+(((-1.0)*new_r20*x396))+((new_r10*x398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x404=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x404.valid){
continue;
}
CheckValue<IkReal> x405 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x405.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x404.value)))+(x405.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x406=IKsin(j6);
IkReal x407=IKcos(j6);
IkReal x408=((1.0)*sj5);
IkReal x409=((1.0)*sj4);
IkReal x410=(cj5*sj4);
IkReal x411=(cj4*new_r01);
IkReal x412=(cj4*new_r00);
IkReal x413=((1.0)*x407);
IkReal x414=(cj5*x406);
IkReal x415=((1.0)*x406);
evalcond[0]=(((sj5*x407))+new_r20);
evalcond[1]=((((-1.0)*x406*x408))+new_r21);
evalcond[2]=(((new_r11*sj4))+x411+x414);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x409))+(((-1.0)*x415)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x413))+(((-1.0)*new_r01*x409)));
evalcond[5]=(((cj4*x414))+new_r01+((sj4*x407)));
evalcond[6]=(((new_r10*sj4))+x412+(((-1.0)*cj5*x413)));
evalcond[7]=((((-1.0)*cj4*cj5*x413))+new_r00+((sj4*x406)));
evalcond[8]=(((x406*x410))+(((-1.0)*cj4*x413))+new_r11);
evalcond[9]=((((-1.0)*cj5*x407*x409))+(((-1.0)*cj4*x415))+new_r10);
evalcond[10]=(((cj5*x411))+x406+(((-1.0)*new_r21*x408))+((new_r11*x410)));
evalcond[11]=((((-1.0)*new_r20*x408))+((cj5*x412))+((new_r10*x410))+(((-1.0)*x413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x416=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x416.valid){
continue;
}
CheckValue<IkReal> x417 = IKatan2WithCheck(IkReal(new_r12),new_r02,IKFAST_ATAN2_MAGTHRESH);
if(!x417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x416.value)))+(x417.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x418=IKcos(j4);
IkReal x419=IKsin(j4);
IkReal x420=((1.0)*sj5);
IkReal x421=((1.0)*cj5);
IkReal x422=(new_r12*x419);
IkReal x423=(new_r02*x418);
evalcond[0]=((((-1.0)*x418*x420))+new_r02);
evalcond[1]=((((-1.0)*x419*x420))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x419))+((new_r12*x418)));
evalcond[3]=((((-1.0)*x420))+x423+x422);
evalcond[4]=((((-1.0)*new_r22*x420))+((cj5*x422))+((cj5*x423)));
evalcond[5]=((((-1.0)*new_r10*x419*x420))+(((-1.0)*new_r00*x418*x420))+(((-1.0)*new_r20*x421)));
evalcond[6]=((((-1.0)*new_r01*x418*x420))+(((-1.0)*new_r11*x419*x420))+(((-1.0)*new_r21*x421)));
evalcond[7]=((1.0)+(((-1.0)*x420*x422))+(((-1.0)*x420*x423))+(((-1.0)*new_r22*x421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[2];
IkReal x424=((1.0)*cj3);
IkReal x425=(sj0*sj2);
IkReal x426=(cj2*sj1);
IkReal x427=((1.0)*sj3);
IkReal x428=(cj1*cj2);
IkReal x429=(sj1*sj2);
IkReal x430=(cj0*sj2);
IkReal x431=((1.0)*cj1);
IkReal x432=x167;
IkReal x433=x168;
IkReal x434=x169;
IkReal x435=x170;
IkReal x436=(cj0*x432);
IkReal x437=x172;
IkReal x438=x173;
IkReal x439=(((sj0*x432))+((cj3*x430)));
IkReal x440=(((cj0*x434))+(((-1.0)*x425*x427)));
IkReal x441=(((sj0*x434))+((sj3*x430)));
IkReal x442=((((-1.0)*cj3*x425))+x436);
new_r00=(((r10*x439))+((r00*((x436+(((-1.0)*x424*x425))))))+((r20*x437)));
new_r01=(((r21*x437))+((r01*x442))+((r11*x439)));
new_r02=(((r12*x439))+((r02*x442))+((r22*x437)));
new_r10=(((r20*x429))+((r00*x438))+((r10*x433)));
new_r11=(((r21*x429))+((r01*x438))+((r11*x433)));
new_r12=(((r12*x433))+((r02*x438))+((r22*x429)));
new_r20=(((r00*x440))+((r10*x441))+((r20*x435)));
new_r21=(((r21*x435))+((r01*x440))+((r11*x441)));
new_r22=(((r02*x440))+((r22*x435))+((r12*x441)));
j6eval[0]=sj5;
j6eval[1]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x443=((1.0)*cj3);
IkReal x444=(sj0*sj2);
IkReal x445=(cj2*sj1);
IkReal x446=((1.0)*sj3);
IkReal x447=(cj1*cj2);
IkReal x448=(sj1*sj2);
IkReal x449=(cj0*sj2);
IkReal x450=((1.0)*cj1);
IkReal x451=x167;
IkReal x452=x168;
IkReal x453=x169;
IkReal x454=x170;
IkReal x455=(cj0*x451);
IkReal x456=x172;
IkReal x457=x173;
IkReal x458=(((sj0*x451))+((cj3*x449)));
IkReal x459=((((-1.0)*x444*x446))+((cj0*x453)));
IkReal x460=(((sj0*x453))+((sj3*x449)));
IkReal x461=((((-1.0)*cj3*x444))+x455);
new_r00=(((r20*x456))+((r00*(((((-1.0)*x443*x444))+x455))))+((r10*x458)));
new_r01=(((r11*x458))+((r01*x461))+((r21*x456)));
new_r02=(((r02*x461))+((r12*x458))+((r22*x456)));
new_r10=(((r00*x457))+((r20*x448))+((r10*x452)));
new_r11=(((r21*x448))+((r11*x452))+((r01*x457)));
new_r12=(((r22*x448))+((r12*x452))+((r02*x457)));
new_r20=(((r20*x454))+((r00*x459))+((r10*x460)));
new_r21=(((r11*x460))+((r01*x459))+((r21*x454)));
new_r22=(((r12*x460))+((r02*x459))+((r22*x454)));
j6eval[0]=sj4;
j6eval[1]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
IkReal x462=((1.0)*cj3);
IkReal x463=(sj0*sj2);
IkReal x464=(cj2*sj1);
IkReal x465=((1.0)*sj3);
IkReal x466=(cj1*cj2);
IkReal x467=(sj1*sj2);
IkReal x468=(cj0*sj2);
IkReal x469=((1.0)*cj1);
IkReal x470=x167;
IkReal x471=x168;
IkReal x472=x169;
IkReal x473=x170;
IkReal x474=(cj0*x470);
IkReal x475=x172;
IkReal x476=x173;
IkReal x477=(((cj3*x468))+((sj0*x470)));
IkReal x478=((((-1.0)*x463*x465))+((cj0*x472)));
IkReal x479=(((sj3*x468))+((sj0*x472)));
IkReal x480=(x474+(((-1.0)*cj3*x463)));
new_r00=(((r10*x477))+((r20*x475))+((r00*(((((-1.0)*x462*x463))+x474)))));
new_r01=(((r21*x475))+((r11*x477))+((r01*x480)));
new_r02=(((r02*x480))+((r12*x477))+((r22*x475)));
new_r10=(((r10*x471))+((r20*x467))+((r00*x476)));
new_r11=(((r11*x471))+((r21*x467))+((r01*x476)));
new_r12=(((r22*x467))+((r02*x476))+((r12*x471)));
new_r20=(((r10*x479))+((r20*x473))+((r00*x478)));
new_r21=(((r21*x473))+((r11*x479))+((r01*x478)));
new_r22=(((r02*x478))+((r12*x479))+((r22*x473)));
j6eval[0]=cj4;
j6eval[1]=cj5;
j6eval[2]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x481=(new_r22+(((-1.0)*cj5)));
IkReal x482=((((-1.0)*sj5))+new_r12);
IkReal x483=((1.0)*cj5);
IkReal x484=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=x481;
evalcond[2]=x481;
evalcond[3]=new_r02;
evalcond[4]=x482;
evalcond[5]=x482;
evalcond[6]=(((cj5*new_r12))+(((-1.0)*new_r22*x484)));
evalcond[7]=((((-1.0)*new_r10*x484))+(((-1.0)*new_r20*x483)));
evalcond[8]=((((-1.0)*new_r21*x483))+(((-1.0)*new_r11*x484)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x483))+(((-1.0)*new_r12*x484)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x485 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x485.valid){
continue;
}
CheckValue<IkReal> x486=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x486.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x485.value)+(((1.5707963267949)*(x486.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x487=IKsin(j6);
IkReal x488=IKcos(j6);
IkReal x489=((1.0)*new_r12);
IkReal x490=((1.0)*x488);
evalcond[0]=(((new_r12*x488))+new_r20);
evalcond[1]=(new_r11+((new_r22*x487)));
evalcond[2]=((((-1.0)*x487*x489))+new_r21);
evalcond[3]=((((-1.0)*new_r22*x490))+new_r10);
evalcond[4]=((((-1.0)*x487))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x490))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x489))+x487+((new_r11*new_r22)));
evalcond[7]=((((-1.0)*x490))+(((-1.0)*new_r20*x489))+((new_r10*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x491=(new_r22+(((-1.0)*cj5)));
IkReal x492=((1.0)*cj5);
IkReal x493=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=x491;
evalcond[2]=x491;
evalcond[3]=new_r02;
evalcond[4]=(sj5+new_r12);
evalcond[5]=((((-1.0)*x493))+(((-1.0)*new_r12)));
evalcond[6]=((((-1.0)*new_r22*x493))+(((-1.0)*new_r12*x492)));
evalcond[7]=((((-1.0)*new_r20*x492))+((new_r10*sj5)));
evalcond[8]=(((new_r11*sj5))+(((-1.0)*new_r21*x492)));
evalcond[9]=((1.0)+((new_r12*sj5))+(((-1.0)*new_r22*x492)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x494=IKsin(j6);
IkReal x495=IKcos(j6);
IkReal x496=((1.0)*new_r22);
IkReal x497=((1.0)*x495);
evalcond[0]=(((new_r12*x494))+new_r21);
evalcond[1]=((((-1.0)*x494))+new_r00);
evalcond[2]=((((-1.0)*x497))+new_r01);
evalcond[3]=(new_r20+(((-1.0)*new_r12*x497)));
evalcond[4]=((((-1.0)*new_r11))+((new_r22*x494)));
evalcond[5]=((((-1.0)*x495*x496))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r11*x496))+((new_r12*new_r21))+x494);
evalcond[7]=((((-1.0)*x497))+(((-1.0)*new_r10*x496))+((new_r12*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x498=((1.0)*cj4);
IkReal x499=((1.0)*sj4);
IkReal x500=(((cj4*new_r12))+(((-1.0)*new_r02*x499)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x498))+new_r02);
evalcond[3]=((((-1.0)*x499))+new_r12);
evalcond[4]=x500;
evalcond[5]=x500;
evalcond[6]=((-1.0)+((new_r12*sj4))+((cj4*new_r02)));
evalcond[7]=(((cj4*new_r01))+((new_r11*sj4)));
evalcond[8]=(((cj4*new_r00))+((new_r10*sj4)));
evalcond[9]=((((-1.0)*new_r00*x498))+(((-1.0)*new_r10*x499)));
evalcond[10]=((((-1.0)*new_r01*x498))+(((-1.0)*new_r11*x499)));
evalcond[11]=((1.0)+(((-1.0)*new_r02*x498))+(((-1.0)*new_r12*x499)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x501=IKcos(j6);
IkReal x502=IKsin(j6);
IkReal x503=((1.0)*new_r12);
IkReal x504=((1.0)*x502);
IkReal x505=((1.0)*x501);
evalcond[0]=(x501+new_r20);
evalcond[1]=((((-1.0)*x504))+new_r21);
evalcond[2]=(((new_r12*x501))+new_r01);
evalcond[3]=(((new_r12*x502))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x505))+new_r11);
evalcond[5]=((((-1.0)*new_r02*x504))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x503))+(((-1.0)*x504))+((new_r02*new_r10)));
evalcond[7]=((((-1.0)*new_r01*x503))+(((-1.0)*x505))+((new_r02*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x506=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
IkReal x507=(((cj4*new_r00))+((new_r10*sj4)));
IkReal x508=(((cj4*new_r01))+((new_r11*sj4)));
IkReal x509=((1.0)+((new_r12*sj4))+((cj4*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj4+new_r02);
evalcond[3]=(sj4+new_r12);
evalcond[4]=x506;
evalcond[5]=x506;
evalcond[6]=x509;
evalcond[7]=x508;
evalcond[8]=x507;
evalcond[9]=x507;
evalcond[10]=x508;
evalcond[11]=x509;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x510=IKcos(j6);
IkReal x511=IKsin(j6);
IkReal x512=((1.0)*new_r02);
IkReal x513=((1.0)*new_r12);
IkReal x514=((1.0)*x510);
evalcond[0]=(x511+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x514)));
evalcond[2]=(((new_r02*x510))+new_r11);
evalcond[3]=(((new_r02*x511))+new_r10);
evalcond[4]=(new_r01+(((-1.0)*x510*x513)));
evalcond[5]=((((-1.0)*x511*x513))+new_r00);
evalcond[6]=((((-1.0)*new_r10*x512))+(((-1.0)*x511))+((new_r00*new_r12)));
evalcond[7]=((((-1.0)*new_r11*x512))+((new_r01*new_r12))+(((-1.0)*x514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x515=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
IkReal x516=(((new_r12*sj4))+((cj4*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x515;
evalcond[7]=x515;
evalcond[8]=x516;
evalcond[9]=x516;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x517=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj4*x517))+(((-1.0)*new_r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*new_r00))+(((-1.0)*sj4*x517)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x517))+(((-1.0)*new_r00*sj4))))+IKsqr((((cj4*new_r00))+(((-1.0)*sj4*x517))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj4*x517))+(((-1.0)*new_r00*sj4))), (((cj4*new_r00))+(((-1.0)*sj4*x517))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x518=IKsin(j6);
IkReal x519=IKcos(j6);
IkReal x520=((1.0)*sj4);
IkReal x521=((1.0)*x519);
IkReal x522=(sj4*x518);
IkReal x523=(sj4*x519);
IkReal x524=(cj4*x518);
IkReal x525=(cj4*x521);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x518);
evalcond[1]=(x523+x524+new_r01);
evalcond[2]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x521)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x518))+(((-1.0)*new_r00*x520)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x521))+(((-1.0)*new_r01*x520)));
evalcond[5]=((((-1.0)*x525))+x522+new_r00);
evalcond[6]=((((-1.0)*x525))+x522+new_r11);
evalcond[7]=((((-1.0)*x524))+new_r10+(((-1.0)*x519*x520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x526=(cj4*new_r02);
IkReal x527=(new_r12*sj4);
IkReal x528=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x528;
evalcond[7]=x528;
evalcond[8]=(x526+x527);
evalcond[9]=((((-1.0)*x527))+(((-1.0)*x526)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x529=((1.0)*new_r00);
if( IKabs((((cj4*new_r01))+(((-1.0)*sj4*x529)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x529)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*new_r01))+(((-1.0)*sj4*x529))))+IKsqr(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x529))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((cj4*new_r01))+(((-1.0)*sj4*x529))), ((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x529))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x530=IKcos(j6);
IkReal x531=IKsin(j6);
IkReal x532=((1.0)*sj4);
IkReal x533=((1.0)*x531);
IkReal x534=(sj4*x530);
IkReal x535=((1.0)*x530);
IkReal x536=(cj4*x533);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x530);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x533)));
evalcond[2]=(((cj4*x530))+new_r00+((sj4*x531)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x532))+(((-1.0)*x533)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x535))+(((-1.0)*new_r01*x532)));
evalcond[5]=((((-1.0)*x536))+x534+new_r01);
evalcond[6]=((((-1.0)*x536))+x534+new_r10);
evalcond[7]=((((-1.0)*x531*x532))+new_r11+(((-1.0)*cj4*x535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x537=(new_r22+(((-1.0)*cj5)));
IkReal x538=((((-1.0)*sj5))+new_r02);
IkReal x539=((1.0)*cj5);
IkReal x540=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=x537;
evalcond[2]=x537;
evalcond[3]=x538;
evalcond[4]=new_r12;
evalcond[5]=x538;
evalcond[6]=((((-1.0)*new_r22*x540))+((cj5*new_r02)));
evalcond[7]=((((-1.0)*new_r00*x540))+(((-1.0)*new_r20*x539)));
evalcond[8]=((((-1.0)*new_r21*x539))+(((-1.0)*new_r01*x540)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x539))+(((-1.0)*new_r02*x540)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x541=IKcos(j6);
IkReal x542=IKsin(j6);
IkReal x543=((1.0)*new_r02);
IkReal x544=((1.0)*x541);
evalcond[0]=(((new_r02*x541))+new_r20);
evalcond[1]=((((-1.0)*x542))+new_r10);
evalcond[2]=((((-1.0)*x544))+new_r11);
evalcond[3]=(((new_r22*x542))+new_r01);
evalcond[4]=((((-1.0)*x542*x543))+new_r21);
evalcond[5]=((((-1.0)*new_r22*x544))+new_r00);
evalcond[6]=(((new_r01*new_r22))+(((-1.0)*new_r21*x543))+x542);
evalcond[7]=(((new_r00*new_r22))+(((-1.0)*new_r20*x543))+(((-1.0)*x544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x545=(new_r22+(((-1.0)*cj5)));
IkReal x546=((1.0)*cj5);
IkReal x547=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=x545;
evalcond[2]=x545;
evalcond[3]=(sj5+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*x547))+(((-1.0)*new_r02)));
evalcond[6]=((((-1.0)*new_r22*x547))+(((-1.0)*new_r02*x546)));
evalcond[7]=((((-1.0)*new_r20*x546))+((new_r00*sj5)));
evalcond[8]=(((new_r01*sj5))+(((-1.0)*new_r21*x546)));
evalcond[9]=((1.0)+((new_r02*sj5))+(((-1.0)*new_r22*x546)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x548 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x548.valid){
continue;
}
CheckValue<IkReal> x549=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x549.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x548.value)+(((1.5707963267949)*(x549.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x550=IKsin(j6);
IkReal x551=IKcos(j6);
IkReal x552=((1.0)*new_r01);
IkReal x553=((1.0)*new_r00);
IkReal x554=((1.0)*x551);
evalcond[0]=(((new_r02*x550))+new_r21);
evalcond[1]=(new_r20+(((-1.0)*new_r02*x554)));
evalcond[2]=((((-1.0)*x550))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x554))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*x552))+((new_r22*x550)));
evalcond[5]=((((-1.0)*new_r22*x554))+(((-1.0)*x553)));
evalcond[6]=((((-1.0)*new_r22*x552))+x550+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*new_r22*x553))+(((-1.0)*x554))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x556=IKPowWithIntegerCheck(sj5,-1);
if(!x556.valid){
continue;
}
IkReal x555=x556.value;
CheckValue<IkReal> x557=IKPowWithIntegerCheck(cj4,-1);
if(!x557.valid){
continue;
}
CheckValue<IkReal> x558=IKPowWithIntegerCheck(cj5,-1);
if(!x558.valid){
continue;
}
if( IKabs((x555*(x557.value)*(x558.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x555)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x555*(x557.value)*(x558.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))))+IKsqr(((-1.0)*new_r20*x555))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x555*(x557.value)*(x558.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))), ((-1.0)*new_r20*x555));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x559=IKsin(j6);
IkReal x560=IKcos(j6);
IkReal x561=((1.0)*sj5);
IkReal x562=((1.0)*sj4);
IkReal x563=(cj5*sj4);
IkReal x564=(cj4*new_r01);
IkReal x565=(cj4*new_r00);
IkReal x566=((1.0)*x560);
IkReal x567=(cj5*x559);
IkReal x568=((1.0)*x559);
evalcond[0]=(new_r20+((sj5*x560)));
evalcond[1]=((((-1.0)*x559*x561))+new_r21);
evalcond[2]=(((new_r11*sj4))+x567+x564);
evalcond[3]=((((-1.0)*new_r00*x562))+((cj4*new_r10))+(((-1.0)*x568)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x566))+(((-1.0)*new_r01*x562)));
evalcond[5]=(((sj4*x560))+new_r01+((cj4*x567)));
evalcond[6]=(((new_r10*sj4))+(((-1.0)*cj5*x566))+x565);
evalcond[7]=(((sj4*x559))+(((-1.0)*cj4*cj5*x566))+new_r00);
evalcond[8]=((((-1.0)*cj4*x566))+new_r11+((x559*x563)));
evalcond[9]=((((-1.0)*cj5*x560*x562))+(((-1.0)*cj4*x568))+new_r10);
evalcond[10]=(x559+((new_r11*x563))+((cj5*x564))+(((-1.0)*new_r21*x561)));
evalcond[11]=((((-1.0)*new_r20*x561))+((new_r10*x563))+((cj5*x565))+(((-1.0)*x566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x570=IKPowWithIntegerCheck(sj5,-1);
if(!x570.valid){
continue;
}
IkReal x569=x570.value;
CheckValue<IkReal> x571=IKPowWithIntegerCheck(sj4,-1);
if(!x571.valid){
continue;
}
if( IKabs((x569*(x571.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x569)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x569*(x571.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))))+IKsqr(((-1.0)*new_r20*x569))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x569*(x571.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))), ((-1.0)*new_r20*x569));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x572=IKsin(j6);
IkReal x573=IKcos(j6);
IkReal x574=((1.0)*sj5);
IkReal x575=((1.0)*sj4);
IkReal x576=(cj5*sj4);
IkReal x577=(cj4*new_r01);
IkReal x578=(cj4*new_r00);
IkReal x579=((1.0)*x573);
IkReal x580=(cj5*x572);
IkReal x581=((1.0)*x572);
evalcond[0]=(((sj5*x573))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x572*x574)));
evalcond[2]=(((new_r11*sj4))+x577+x580);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x575))+(((-1.0)*x581)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x579))+(((-1.0)*new_r01*x575)));
evalcond[5]=(((sj4*x573))+((cj4*x580))+new_r01);
evalcond[6]=(((new_r10*sj4))+(((-1.0)*cj5*x579))+x578);
evalcond[7]=(((sj4*x572))+(((-1.0)*cj4*cj5*x579))+new_r00);
evalcond[8]=((((-1.0)*cj4*x579))+new_r11+((x572*x576)));
evalcond[9]=((((-1.0)*cj5*x573*x575))+(((-1.0)*cj4*x581))+new_r10);
evalcond[10]=(((cj5*x577))+((new_r11*x576))+x572+(((-1.0)*new_r21*x574)));
evalcond[11]=(((cj5*x578))+((new_r10*x576))+(((-1.0)*x579))+(((-1.0)*new_r20*x574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x582=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x582.valid){
continue;
}
CheckValue<IkReal> x583 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x583.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x582.value)))+(x583.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x584=IKsin(j6);
IkReal x585=IKcos(j6);
IkReal x586=((1.0)*sj5);
IkReal x587=((1.0)*sj4);
IkReal x588=(cj5*sj4);
IkReal x589=(cj4*new_r01);
IkReal x590=(cj4*new_r00);
IkReal x591=((1.0)*x585);
IkReal x592=(cj5*x584);
IkReal x593=((1.0)*x584);
evalcond[0]=(((sj5*x585))+new_r20);
evalcond[1]=((((-1.0)*x584*x586))+new_r21);
evalcond[2]=(((new_r11*sj4))+x589+x592);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x593))+(((-1.0)*new_r00*x587)));
evalcond[4]=((((-1.0)*new_r01*x587))+((cj4*new_r11))+(((-1.0)*x591)));
evalcond[5]=(((sj4*x585))+new_r01+((cj4*x592)));
evalcond[6]=((((-1.0)*cj5*x591))+((new_r10*sj4))+x590);
evalcond[7]=((((-1.0)*cj4*cj5*x591))+((sj4*x584))+new_r00);
evalcond[8]=(((x584*x588))+(((-1.0)*cj4*x591))+new_r11);
evalcond[9]=((((-1.0)*cj4*x593))+(((-1.0)*cj5*x585*x587))+new_r10);
evalcond[10]=((((-1.0)*new_r21*x586))+((cj5*x589))+x584+((new_r11*x588)));
evalcond[11]=((((-1.0)*new_r20*x586))+(((-1.0)*x591))+((cj5*x590))+((new_r10*x588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "e9a051e4825529aa31892beb41684ca4"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
