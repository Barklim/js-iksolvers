{"version":3,"file":"./solvers/darpa_arm_robot_rightarm.html","sources":["./solvers/darpa_arm_robot_rightarm.tmp.cpp"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4SA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;AAhMA;AAAA;AAAA;;;;;;;;AAFA;AAAA;AAAA;;;;;AAsMA;;;;;AAw1dA;AAAA;;;;;;;;;;;;;;;AAIA;AACA;AACA;AACA;AAAA;AACA;;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAEA;;AAAA;AAAA;AACA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AACA","sourcesContent":["/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE\n/// \\author Rosen Diankov\n///\n/// Licensed under the Apache License, Version 2.0 (the \"License\");\n/// you may not use this file except in compliance with the License.\n/// You may obtain a copy of the License at\n///     http://www.apache.org/licenses/LICENSE-2.0\n/// \n/// Unless required by applicable law or agreed to in writing, software\n/// distributed under the License is distributed on an \"AS IS\" BASIS,\n/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n/// See the License for the specific language governing permissions and\n/// limitations under the License.\n///\n/// ikfast version 0x10000048 generated on 2015-05-22 19:40:45.616683\n/// To compile with gcc:\n///     gcc -lstdc++ ik.cpp\n/// To compile without any main function as a shared object (might need -llapack):\n///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp\n#define IKFAST_HAS_LIBRARY\n#include \"ikfast.h\" // found inside share/openrave-X.Y/python/ikfast.h\nusing namespace ikfast;\n\n// check if the included ikfast version matches what this file was compiled with\n#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]\nIKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);\n\n#include <cmath>\n#include <vector>\n#include <limits>\n#include <algorithm>\n#include <complex>\n\n#ifndef IKFAST_ASSERT\n#include <stdexcept>\n#include <sstream>\n#include <iostream>\n\n#ifdef _MSC_VER\n#ifndef __PRETTY_FUNCTION__\n#define __PRETTY_FUNCTION__ __FUNCDNAME__\n#endif\n#endif\n\n#ifndef __PRETTY_FUNCTION__\n#define __PRETTY_FUNCTION__ __func__\n#endif\n\n#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << \"ikfast exception: \" << __FILE__ << \":\" << __LINE__ << \": \" <<__PRETTY_FUNCTION__ << \": Assertion '\" << #b << \"' failed\"; throw std::runtime_error(ss.str()); } }\n\n#endif\n\n#if defined(_MSC_VER)\n#define IKFAST_ALIGNED16(x) __declspec(align(16)) x\n#else\n#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))\n#endif\n\n#define IK2PI  ((IkReal)6.28318530717959)\n#define IKPI  ((IkReal)3.14159265358979)\n#define IKPI_2  ((IkReal)1.57079632679490)\n\n#ifdef _MSC_VER\n#ifndef isnan\n#define isnan _isnan\n#endif\n#ifndef isinf\n#define isinf _isinf\n#endif\n//#ifndef isfinite\n//#define isfinite _isfinite\n//#endif\n#endif // _MSC_VER\n\n// lapack routines\nextern \"C\" {\n  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);\n  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);\n  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);\n  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);\n  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);\n  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);\n}\n\nusing namespace std; // necessary to get std math routines\n\n#ifdef IKFAST_NAMESPACE\nnamespace IKFAST_NAMESPACE {\n#endif\n\ninline float IKabs(float f) { return fabsf(f); }\ninline double IKabs(double f) { return fabs(f); }\n\ninline float IKsqr(float f) { return f*f; }\ninline double IKsqr(double f) { return f*f; }\n\ninline float IKlog(float f) { return logf(f); }\ninline double IKlog(double f) { return log(f); }\n\n// allows asin and acos to exceed 1\n#ifndef IKFAST_SINCOS_THRESH\n#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)\n#endif\n\n// used to check input to atan2 for degenerate cases\n#ifndef IKFAST_ATAN2_MAGTHRESH\n#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)\n#endif\n\n// minimum distance of separate solutions\n#ifndef IKFAST_SOLUTION_THRESH\n#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)\n#endif\n\n// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate\n#ifndef IKFAST_EVALCOND_THRESH\n#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)\n#endif\n\n\ninline float IKasin(float f)\n{\nIKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver\nif( f <= -1 ) return float(-IKPI_2);\nelse if( f >= 1 ) return float(IKPI_2);\nreturn asinf(f);\n}\ninline double IKasin(double f)\n{\nIKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver\nif( f <= -1 ) return -IKPI_2;\nelse if( f >= 1 ) return IKPI_2;\nreturn asin(f);\n}\n\n// return positive value in [0,y)\ninline float IKfmod(float x, float y)\n{\n    while(x < 0) {\n        x += y;\n    }\n    return fmodf(x,y);\n}\n\n// return positive value in [0,y)\ninline double IKfmod(double x, double y)\n{\n    while(x < 0) {\n        x += y;\n    }\n    return fmod(x,y);\n}\n\ninline float IKacos(float f)\n{\nIKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver\nif( f <= -1 ) return float(IKPI);\nelse if( f >= 1 ) return float(0);\nreturn acosf(f);\n}\ninline double IKacos(double f)\n{\nIKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver\nif( f <= -1 ) return IKPI;\nelse if( f >= 1 ) return 0;\nreturn acos(f);\n}\ninline float IKsin(float f) { return sinf(f); }\ninline double IKsin(double f) { return sin(f); }\ninline float IKcos(float f) { return cosf(f); }\ninline double IKcos(double f) { return cos(f); }\ninline float IKtan(float f) { return tanf(f); }\ninline double IKtan(double f) { return tan(f); }\ninline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }\ninline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }\ninline float IKatan2Simple(float fy, float fx) {\n    return atan2f(fy,fx);\n}\ninline float IKatan2(float fy, float fx) {\n    if( isnan(fy) ) {\n        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned\n        return float(IKPI_2);\n    }\n    else if( isnan(fx) ) {\n        return 0;\n    }\n    return atan2f(fy,fx);\n}\ninline double IKatan2Simple(double fy, double fx) {\n    return atan2(fy,fx);\n}\ninline double IKatan2(double fy, double fx) {\n    if( isnan(fy) ) {\n        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned\n        return IKPI_2;\n    }\n    else if( isnan(fx) ) {\n        return 0;\n    }\n    return atan2(fy,fx);\n}\n\ntemplate <typename T>\nstruct CheckValue\n{\n    T value;\n    bool valid;\n};\n\ntemplate <typename T>\ninline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)\n{\n    CheckValue<T> ret;\n    ret.valid = false;\n    ret.value = 0;\n    if( !isnan(fy) && !isnan(fx) ) {\n        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {\n            ret.value = IKatan2Simple(fy,fx);\n            ret.valid = true;\n        }\n    }\n    return ret;\n}\n\ninline float IKsign(float f) {\n    if( f > 0 ) {\n        return float(1);\n    }\n    else if( f < 0 ) {\n        return float(-1);\n    }\n    return 0;\n}\n\ninline double IKsign(double f) {\n    if( f > 0 ) {\n        return 1.0;\n    }\n    else if( f < 0 ) {\n        return -1.0;\n    }\n    return 0;\n}\n\ntemplate <typename T>\ninline CheckValue<T> IKPowWithIntegerCheck(T f, int n)\n{\n    CheckValue<T> ret;\n    ret.valid = true;\n    if( n == 0 ) {\n        ret.value = 1.0;\n        return ret;\n    }\n    else if( n == 1 )\n    {\n        ret.value = f;\n        return ret;\n    }\n    else if( n < 0 )\n    {\n        if( f == 0 )\n        {\n            ret.valid = false;\n            ret.value = (T)1.0e30;\n            return ret;\n        }\n        if( n == -1 ) {\n            ret.value = T(1.0)/f;\n            return ret;\n        }\n    }\n\n    int num = n > 0 ? n : -n;\n    if( num == 2 ) {\n        ret.value = f*f;\n    }\n    else if( num == 3 ) {\n        ret.value = f*f*f;\n    }\n    else {\n        ret.value = 1.0;\n        while(num>0) {\n            if( num & 1 ) {\n                ret.value *= f;\n            }\n            num >>= 1;\n            f *= f;\n        }\n    }\n    \n    if( n < 0 ) {\n        ret.value = T(1.0)/ret.value;\n    }\n    return ret;\n}\n\n/// solves the forward kinematics equations.\n/// \\param pfree is an array specifying the free joints of the chain.\nIKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {\nIkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44;\nx0=IKcos(j[1]);\nx1=IKcos(j[2]);\nx2=IKsin(j[2]);\nx3=IKsin(j[3]);\nx4=IKcos(j[3]);\nx5=IKsin(j[1]);\nx6=IKcos(j[5]);\nx7=IKsin(j[5]);\nx8=IKsin(j[4]);\nx9=IKcos(j[4]);\nx10=((0.707106781186548)*(IKcos(j[0])));\nx11=((0.707106781186548)*(IKsin(j[0])));\nx12=((0.707106781186548)*x7);\nx13=((0.707106781186548)*x6);\nx14=((0.5)*x3);\nx15=((0.5)*x9);\nx16=((1.0)*x1);\nx17=((0.5)*x8);\nx18=((1.0)*x2);\nx19=((1.0)*x3);\nx20=(x0*x2);\nx21=(x0*x1);\nx22=((-0.5)*x8);\nx23=(x4*x5);\nx24=((-1.0)*x2);\nx25=(x3*x5);\nx26=((-0.5)*x9);\nx27=((-0.5)*x3);\nx28=((((-1.0)*x11))+x10);\nx29=((((-1.0)*x10))+x11);\nx30=(x11+x10);\nx31=((-1.0)*x30);\nx32=((1.0)*x31);\nx33=(x2*x31);\nx34=(x31*x5);\nx35=(((x1*x31))+((x20*x29)));\nx36=(((x20*x31))+((x1*x28)));\nx37=((((-1.0)*x18*x28))+(((-1.0)*x0*x16*x30)));\nx38=(x36*x8);\nx39=((((-1.0)*x21*x28))+((x24*x31)));\nx40=(x3*x37);\nx41=(((x25*x29))+((x4*((((x21*x28))+x33)))));\nx42=(((x25*x31))+((x4*((((x21*x30))+((x2*x28)))))));\nx43=(x42*x9);\nIkReal x45=((1.0)*x16);\nIkReal x46=((1.0)*x0);\nx44=(((x12*((((x9*(((((-1.0)*x23*x45))+(((-1.0)*x19*x46))))))+((x2*x5*x8))))))+((x13*(((((-1.0)*x25*x45))+((x4*x46)))))));\neerot[0]=((((((((((((-0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((-0.5)*(((((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((((((-0.5)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((-0.5)*(((((((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((((((((((0.5)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((0.5)*(((((((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((0.5)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((0.5)*(((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((((((((((-0.5)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((((((-0.5)*(((((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[6]))))+(((((((0.707106781186548)*(IKcos(j[4]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.707106781186548)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKsin(j[4]))))))*(IKcos(j[6]))))+(((((((-0.707106781186548)*(((((IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[4]))))+(((((((-1.0)*(IKcos(j[1]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((-0.707106781186548)*(((((IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[1]))*(IKcos(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((((((((((0.5)*(((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((0.5)*(((((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKcos(j[4]))))))*(IKcos(j[6])))));\neerot[1]=((((((((-0.707106781186548)*(((((IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[4]))))+(((((((-1.0)*(IKcos(j[1]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((-0.707106781186548)*(((((IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[1]))*(IKcos(j[3]))))))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((((((((((0.5)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((0.5)*(((((((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((0.5)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((0.5)*(((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((((((((((-0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((-0.5)*(((((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((((((-0.5)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((-0.5)*(((((((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((((((-0.707106781186548)*(IKcos(j[4]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.707106781186548)*(((((1.0)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((1.0)*(IKcos(j[1]))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKsin(j[6]))))+(((((((((((0.5)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((((((0.5)*(((((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKsin(j[6]))))+(((((((((((-0.5)*(((((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.5)*(((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((-0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))))*(IKsin(j[6])))));\nIkReal x47=((0.5)*x23);\neerot[2]=(((x7*((((x26*x42))+((x22*x36))))))+((x6*((((x14*x37))+((x31*x47))))))+(((-1.0)*x44))+((x7*((((x17*x35))+((x15*x41))))))+((x6*(((((-1.0)*x29*x47))+((x27*x39)))))));\neetrans[0]=((-0.350177)+(((((((((((0.0159099025766973)*(IKcos(j[0]))))+(((0.0159099025766973)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.0159099025766973)*(IKcos(j[0]))))+(((0.0159099025766973)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.194454364826301)*(IKsin(j[0]))))+(((-0.194454364826301)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.0318198051533946)*(IKcos(j[1]))*(IKsin(j[3]))))+(((((((-0.194454364826301)*(IKsin(j[0]))))+(((0.194454364826301)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.388908729652601)*(IKcos(j[1]))))+(((((((-0.106066017177982)*(IKsin(j[0]))))+(((-0.106066017177982)*(IKcos(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((((((((((0.0159099025766973)*(IKcos(j[0]))))+(((-0.0159099025766973)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.0159099025766973)*(IKcos(j[0]))))+(((0.0159099025766973)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((((((-0.023975)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((-0.023975)*(((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.0169528850789475)*(IKcos(j[0]))))+(((-0.0169528850789475)*(IKsin(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[5]))))+(((((((-0.106066017177982)*(IKsin(j[0]))))+(((0.106066017177982)*(IKcos(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((((((((((0.023975)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.023975)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.0169528850789475)*(IKcos(j[0]))))+(((-0.0169528850789475)*(IKsin(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[5]))))+(((((((0.0159099025766973)*(IKcos(j[0]))))+(((-0.0159099025766973)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((-0.0159099025766973)*(IKcos(j[0]))))+(((-0.0159099025766973)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((0.212132034355964)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-0.0318198051533946)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((((((0.0159099025766973)*(IKcos(j[0]))))+(((-0.0159099025766973)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((((((-0.0159099025766973)*(IKcos(j[0]))))+(((-0.0159099025766973)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.0159099025766973)*(IKcos(j[0]))))+(((0.0159099025766973)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0318198051533946)*(IKcos(j[2]))*(IKsin(j[1]))))+(((((((((((-0.023975)*(((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.023975)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((-0.023975)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.023975)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((((-0.0159099025766973)*(IKcos(j[0]))))+(((-0.0159099025766973)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((((((0.023975)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((0.023975)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((((((0.023975)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.023975)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((-0.707106781186548)*(((((-0.04795)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((-0.04795)*(IKcos(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.033905770157895)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((((0.033905770157895)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-0.033905770157895)*(IKcos(j[1]))*(IKcos(j[3]))))))*(IKcos(j[5]))))+(((-0.212132034355964)*(IKcos(j[1]))*(IKcos(j[3]))))+(((((((((((0.106066017177982)*(IKsin(j[0]))))+(((-0.106066017177982)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.106066017177982)*(IKsin(j[0]))))+(((-0.106066017177982)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((((((-0.106066017177982)*(IKsin(j[0]))))+(((0.106066017177982)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((-0.106066017177982)*(IKsin(j[0]))))+(((-0.106066017177982)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3])))));\neerot[3]=((((((((((((0.5)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((((((0.5)*(((((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[6]))))+(((((((((((0.5)*(((((((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((0.5)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((0.5)*(((((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((((((0.707106781186548)*(IKcos(j[4]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.707106781186548)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKsin(j[4]))))))*(IKcos(j[6]))))+(((((((((((-0.5)*(((((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.5)*(((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((-0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))))*(IKcos(j[6]))))+(((((((-0.707106781186548)*(((((IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[4]))))+(((((((-1.0)*(IKcos(j[1]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((-0.707106781186548)*(((((IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[1]))*(IKcos(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((((((((((-0.5)*(((((((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.5)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((-0.5)*(((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.5)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKsin(j[5]))))))*(IKsin(j[6])))));\neerot[4]=((((((((-0.707106781186548)*(((((IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[4]))))+(((((((-1.0)*(IKcos(j[1]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((-0.707106781186548)*(((((IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[1]))*(IKcos(j[3]))))))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((((((((((0.5)*(((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((0.5)*(((((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKcos(j[4]))))))*(IKsin(j[6]))))+(((((((((((0.5)*(((((((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((0.5)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((0.5)*(((((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((((((-0.707106781186548)*(IKcos(j[4]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.707106781186548)*(((((1.0)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((1.0)*(IKcos(j[1]))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKsin(j[6]))))+(((((((((((-0.5)*(((((((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.5)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((-0.5)*(((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.5)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((((((((((-0.5)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((((((-0.5)*(((((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.5)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKsin(j[6])))));\nIkReal x48=((0.5)*x23);\neerot[5]=((((-1.0)*x44))+((x7*((((x17*x36))+((x15*x42))))))+((x6*(((((-1.0)*x31*x48))+((x27*(((((-1.0)*x21*x30))+((x24*x28))))))))))+((x6*((((x29*x48))+((x14*(((((-1.0)*x18*x31))+(((-1.0)*x0*x16*x28))))))))))+((x7*((((x26*x41))+((x22*x35)))))));\neetrans[1]=((-0.350177)+(((((((0.0159099025766973)*(IKcos(j[0]))))+(((0.0159099025766973)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.0318198051533946)*(IKcos(j[1]))*(IKsin(j[3]))))+(((-0.388908729652601)*(IKcos(j[1]))))+(((((((0.106066017177982)*(IKsin(j[0]))))+(((-0.106066017177982)*(IKcos(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((((((((((0.0159099025766973)*(IKcos(j[0]))))+(((-0.0159099025766973)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((-0.0159099025766973)*(IKcos(j[0]))))+(((-0.0159099025766973)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((((((0.023975)*(((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.023975)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.0169528850789475)*(IKcos(j[0]))))+(((0.0169528850789475)*(IKsin(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[5]))))+(((((((0.194454364826301)*(IKsin(j[0]))))+(((-0.194454364826301)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.0159099025766973)*(IKcos(j[0]))))+(((0.0159099025766973)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((((((0.0169528850789475)*(IKcos(j[0]))))+(((0.0169528850789475)*(IKsin(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((((((-0.023975)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.023975)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((((((((((-0.0159099025766973)*(IKcos(j[0]))))+(((0.0159099025766973)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.0159099025766973)*(IKcos(j[0]))))+(((-0.0159099025766973)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((((((0.106066017177982)*(IKsin(j[0]))))+(((0.106066017177982)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((-0.106066017177982)*(IKsin(j[0]))))+(((0.106066017177982)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.0159099025766973)*(IKcos(j[0]))))+(((-0.0159099025766973)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((((((0.023975)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((0.023975)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((((((0.023975)*(((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.023975)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((0.0159099025766973)*(IKcos(j[0]))))+(((0.0159099025766973)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((((((-0.023975)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.023975)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((-0.023975)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((-0.023975)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((0.212132034355964)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-0.0318198051533946)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((((((-0.0159099025766973)*(IKcos(j[0]))))+(((0.0159099025766973)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((0.0318198051533946)*(IKcos(j[2]))*(IKsin(j[1]))))+(((((((-0.707106781186548)*(((((-0.04795)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((-0.04795)*(IKcos(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.033905770157895)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((((0.0159099025766973)*(IKcos(j[0]))))+(((0.0159099025766973)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((((((((((0.106066017177982)*(IKsin(j[0]))))+(((-0.106066017177982)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((0.106066017177982)*(IKsin(j[0]))))+(((0.106066017177982)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.033905770157895)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-0.033905770157895)*(IKcos(j[1]))*(IKcos(j[3]))))))*(IKcos(j[5]))))+(((-0.212132034355964)*(IKcos(j[1]))*(IKcos(j[3]))))+(((((((0.194454364826301)*(IKcos(j[0]))))+(((0.194454364826301)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((0.106066017177982)*(IKsin(j[0]))))+(((0.106066017177982)*(IKcos(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1])))));\neerot[6]=((((((((0.707106781186548)*(((((((((((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((0.707106781186548)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((((((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((((((0.707106781186548)*(((((-1.0)*(((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-1.0)*(((((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.707106781186548)*(((((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))))*(IKcos(j[6]))))+(((((((0.707106781186548)*(((((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((0.707106781186548)*(((((((((((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((((((0.707106781186548)*(((((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-1.0)*(((((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.707106781186548)*(((((-1.0)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))))*(IKcos(j[6])))));\neerot[7]=((((((((0.707106781186548)*(((((((((((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((0.707106781186548)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((((((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((((((0.707106781186548)*(((((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((0.707106781186548)*(((((((((((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((((((0.707106781186548)*(((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((((((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.707106781186548)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))))*(IKsin(j[6]))))+(((((((0.707106781186548)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((0.707106781186548)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((((((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((-1.0)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKsin(j[6])))));\nIkReal x49=((1.0)*x23);\neerot[8]=(((x12*((((x41*x9))+((x35*x8))))))+((x13*(((((-1.0)*x29*x49))+(((-1.0)*x3*x39))))))+((x13*(((((-1.0)*x32*x49))+(((-1.0)*x19*x37))))))+((x12*((x38+x43)))));\neetrans[2]=((0.378361)+(((((((0.707106781186548)*(((((-0.0318198051533946)*(IKcos(j[0]))))+(((-0.0318198051533946)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.707106781186548)*(((((-0.0318198051533946)*(IKcos(j[0]))))+(((0.0318198051533946)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((0.707106781186548)*(((((0.04795)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((0.04795)*(((((((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.707106781186548)*(((((0.04795)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((0.04795)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((((0.0225)*(IKcos(j[0]))))+(((-0.0225)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.0225)*(IKcos(j[0]))))+(((-0.0225)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.275)*(IKcos(j[0]))))+(((0.275)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((0.707106781186548)*(((((0.033905770157895)*(IKcos(j[0]))))+(((-0.033905770157895)*(IKsin(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((0.707106781186548)*(((((-0.04795)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((-0.04795)*(((((0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((((((0.15)*(IKcos(j[0]))))+(((0.15)*(IKsin(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((((((0.0225)*(IKcos(j[0]))))+(((-0.0225)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((((((0.707106781186548)*(((((0.0318198051533946)*(IKcos(j[0]))))+(((0.0318198051533946)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.707106781186548)*(((((-0.0318198051533946)*(IKcos(j[0]))))+(((0.0318198051533946)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.0225)*(IKsin(j[0]))))+(((0.0225)*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((((((0.0225)*(IKsin(j[0]))))+(((0.0225)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((0.707106781186548)*(((((0.212132034355964)*(IKcos(j[0]))))+(((-0.212132034355964)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.707106781186548)*(((((-0.212132034355964)*(IKcos(j[0]))))+(((-0.212132034355964)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.707106781186548)*(((((0.033905770157895)*(IKcos(j[0]))))+(((0.033905770157895)*(IKsin(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((0.707106781186548)*(((((-0.04795)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.04795)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((((((0.707106781186548)*(((((0.212132034355964)*(IKcos(j[0]))))+(((0.212132034355964)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((0.707106781186548)*(((((0.212132034355964)*(IKcos(j[0]))))+(((-0.212132034355964)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.0225)*(IKcos(j[0]))))+(((-0.0225)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((0.707106781186548)*(((((0.04795)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((0.04795)*(((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((0.707106781186548)*(((((0.04795)*(((((((((-0.707106781186548)*(IKsin(j[0]))))+(((-0.707106781186548)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.707106781186548)*(IKsin(j[0]))))+(((0.707106781186548)*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.04795)*(((((-0.707106781186548)*(IKcos(j[0]))))+(((0.707106781186548)*(IKsin(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((-0.275)*(IKsin(j[0]))))+(((0.275)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.15)*(IKsin(j[0]))))+(((0.15)*(IKcos(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1])))));\n}\n\nIKFAST_API int GetNumFreeParameters() { return 1; }\nIKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }\nIKFAST_API int GetNumJoints() { return 7; }\n\nIKFAST_API int GetIkRealSize() { return sizeof(IkReal); }\n\nIKFAST_API int GetIkType() { return 0x67000001; }\n\nclass IKSolver {\npublic:\nIkReal j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,j9,cj9,sj9,htj9,j9mul,j10,cj10,sj10,htj10,j10mul,j6,cj6,sj6,htj6,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;\nunsigned char _ij4[2], _nj4,_ij5[2], _nj5,_ij7[2], _nj7,_ij8[2], _nj8,_ij9[2], _nj9,_ij10[2], _nj10,_ij6[2], _nj6;\n\nIkReal j100, cj100, sj100;\nunsigned char _ij100[2], _nj100;\nbool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {\nj4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; j9=numeric_limits<IkReal>::quiet_NaN(); _ij9[0] = -1; _ij9[1] = -1; _nj9 = -1; j10=numeric_limits<IkReal>::quiet_NaN(); _ij10[0] = -1; _ij10[1] = -1; _nj10 = -1;  _ij6[0] = -1; _ij6[1] = -1; _nj6 = 0; \nfor(int dummyiter = 0; dummyiter < 1; ++dummyiter) {\n    solutions.Clear();\nj6=pfree[0]; cj6=cos(pfree[0]); sj6=sin(pfree[0]), htj6=tan(pfree[0]*0.5);\nr00 = eerot[0*3+0];\nr01 = eerot[0*3+1];\nr02 = eerot[0*3+2];\nr10 = eerot[1*3+0];\nr11 = eerot[1*3+1];\nr12 = eerot[1*3+2];\nr20 = eerot[2*3+0];\nr21 = eerot[2*3+1];\nr22 = eerot[2*3+2];\npx = eetrans[0]; py = eetrans[1]; pz = eetrans[2];\n\nnew_r00=((((-0.5)*r11))+(((0.5)*r01))+(((0.707106781186548)*r21)));\nnew_r01=((((-0.707106781186548)*r20))+(((0.5)*r10))+(((-0.5)*r00)));\nnew_r02=((((-0.5)*r12))+(((0.5)*r02))+(((0.707106781186548)*r22)));\nnew_px=((-0.267541628836523)+(((-0.033905770157895)*r22))+(((0.707106781186548)*pz))+(((0.023975)*r12))+(((0.5)*px))+(((-0.023975)*r02))+(((-0.5)*py)));\nnew_r10=((((0.5)*r11))+(((-0.5)*r01))+(((0.707106781186548)*r21)));\nnew_r11=((((-0.707106781186548)*r20))+(((-0.5)*r10))+(((0.5)*r00)));\nnew_r12=((((0.5)*r12))+(((-0.5)*r02))+(((0.707106781186548)*r22)));\nnew_py=((-0.267541628836523)+(((-0.033905770157895)*r22))+(((0.023975)*r02))+(((0.707106781186548)*pz))+(((0.5)*py))+(((-0.5)*px))+(((-0.023975)*r12)));\nnew_r20=((((-0.707106781186548)*r01))+(((-0.707106781186548)*r11)));\nnew_r21=((((0.707106781186548)*r10))+(((0.707106781186548)*r00)));\nnew_r22=((((-0.707106781186548)*r02))+(((-0.707106781186548)*r12)));\nnew_pz=((-0.495225062631123)+(((0.033905770157895)*r02))+(((0.033905770157895)*r12))+(((-0.707106781186548)*py))+(((-0.707106781186548)*px)));\nr00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;\nIkReal x50=((1.0)*px);\nIkReal x51=((1.0)*pz);\nIkReal x52=((1.0)*py);\npp=((px*px)+(py*py)+(pz*pz));\nnpx=(((px*r00))+((py*r10))+((pz*r20)));\nnpy=(((px*r01))+((py*r11))+((pz*r21)));\nnpz=(((px*r02))+((py*r12))+((pz*r22)));\nrxp0_0=((((-1.0)*r20*x52))+((pz*r10)));\nrxp0_1=(((px*r20))+(((-1.0)*r00*x51)));\nrxp0_2=((((-1.0)*r10*x50))+((py*r00)));\nrxp1_0=((((-1.0)*r21*x52))+((pz*r11)));\nrxp1_1=(((px*r21))+(((-1.0)*r01*x51)));\nrxp1_2=((((-1.0)*r11*x50))+((py*r01)));\nrxp2_0=(((pz*r12))+(((-1.0)*r22*x52)));\nrxp2_1=(((px*r22))+(((-1.0)*r02*x51)));\nrxp2_2=((((-1.0)*r12*x50))+((py*r02)));\n{\nIkReal j7array[2], cj7array[2], sj7array[2];\nbool j7valid[2]={false};\n_nj7 = 2;\nif( (((1.18441410190393)+(((-2.9867963734811)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((1.18441410190393)+(((-2.9867963734811)*pp)))) > 1+IKFAST_SINCOS_THRESH )\n    continue;\nIkReal x53=IKasin(((1.18441410190393)+(((-2.9867963734811)*pp))));\nj7array[0]=((-1.34027003705633)+(((-1.0)*x53)));\nsj7array[0]=IKsin(j7array[0]);\ncj7array[0]=IKcos(j7array[0]);\nj7array[1]=((1.80132261653346)+x53);\nsj7array[1]=IKsin(j7array[1]);\ncj7array[1]=IKcos(j7array[1]);\nif( j7array[0] > IKPI )\n{\n    j7array[0]-=IK2PI;\n}\nelse if( j7array[0] < -IKPI )\n{    j7array[0]+=IK2PI;\n}\nj7valid[0] = true;\nif( j7array[1] > IKPI )\n{\n    j7array[1]-=IK2PI;\n}\nelse if( j7array[1] < -IKPI )\n{    j7array[1]+=IK2PI;\n}\nj7valid[1] = true;\nfor(int ij7 = 0; ij7 < 2; ++ij7)\n{\nif( !j7valid[ij7] )\n{\n    continue;\n}\n_ij7[0] = ij7; _ij7[1] = -1;\nfor(int iij7 = ij7+1; iij7 < 2; ++iij7)\n{\nif( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )\n{\n    j7valid[iij7]=false; _ij7[1] = iij7; break; \n}\n}\nj7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];\n\n{\nIkReal j5eval[2];\nIkReal x54=cj6*cj6;\nIkReal x55=sj7*sj7;\nIkReal x56=cj7*cj7;\nIkReal x57=((3.0)*cj6);\nIkReal x58=((13.3333333333333)*sj7*x54);\nj5eval[0]=((149.382716049383)+(((44.4444444444444)*x54*x55))+(((-2.0)*cj7*x54))+(((24.4444444444444)*sj7))+(((-1.0)*cj7*x58))+x58+x55+x54+(((13.3333333333333)*cj7*sj7))+(((44.4444444444444)*x56))+(((162.962962962963)*cj7))+((x54*x56)));\nj5eval[1]=((IKabs(((((-1.0)*cj7*x57))+(((20.0)*cj6*sj7))+x57)))+(((66.6666666666667)*(IKabs(((-0.55)+(((-0.045)*sj7))+(((-0.3)*cj7))))))));\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j4eval[2];\nj4eval[0]=((px*px)+(py*py));\nj4eval[1]=(pp+(((-1.0)*(pz*pz))));\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j4eval[1];\nIkReal x59=px*px;\nIkReal x60=py*py;\nIkReal x61=cj6*cj6;\nIkReal x62=sj6*sj6;\nIkReal x63=px*px*px*px;\nIkReal x64=sj6*sj6*sj6*sj6;\nIkReal x65=cj6*cj6*cj6*cj6;\nIkReal x66=py*py*py*py;\nIkReal x67=py*py*py;\nIkReal x68=px*px*px;\nIkReal x69=((2.0)*x65);\nIkReal x70=((2.0)*x64);\nIkReal x71=(py*x68);\nIkReal x72=((2.0)*px*x67);\nIkReal x73=(x59*x60);\nIkReal x74=((2.0)*x61*x62);\nIkReal x75=((4.0)*x61*x62);\nj4eval[0]=((((-1.0)*px*x67*x70))+(((-1.0)*px*x67*x75))+(((-1.0)*x70*x71))+(((-1.0)*px*x67*x69))+((x69*x73))+(((-1.0)*x71*x75))+((x63*x64))+((x63*x65))+((x63*x74))+((x70*x73))+(((-1.0)*x69*x71))+((x73*x75))+((x66*x74))+((x64*x66))+((x65*x66)));\nif( IKabs(j4eval[0]) < 0.0000010000000000  )\n{\ncontinue; // no branches [j4, j5]\n\n} else\n{\n{\nIkReal j4array[2], cj4array[2], sj4array[2];\nbool j4valid[2]={false};\n_nj4 = 2;\nIkReal x76=px*px;\nIkReal x77=cj6*cj6;\nIkReal x78=py*py;\nIkReal x79=sj6*sj6;\nIkReal x80=((0.0318198051533946)*py*sj6);\nIkReal x81=((0.5)*x77);\nIkReal x82=((1.0)*px*py);\nIkReal x83=((0.212132034355964)*sj6*sj7);\nIkReal x84=((0.5)*x79);\nIkReal x85=((0.0318198051533946)*px*sj6);\nIkReal x86=(x78*x81);\nIkReal x87=(x76*x81);\nIkReal x88=(x78*x84);\nIkReal x89=(x76*x84);\nIkReal x90=(x88+x86);\nIkReal x91=(x89+x87);\nIkReal x92=(x91+(((-1.0)*x90)));\nIkReal x93=((((-1.0)*x77*x82))+(((-1.0)*x79*x82))+x91+x90);\nCheckValue<IkReal> x96 = IKatan2WithCheck(IkReal(x93),x92,IKFAST_ATAN2_MAGTHRESH);\nif(!x96.valid){\ncontinue;\n}\nIkReal x94=((1.0)*(x96.value));\nif((((x93*x93)+(x92*x92))) < -0.00001)\ncontinue;\nCheckValue<IkReal> x97=IKPowWithIntegerCheck(IKabs(IKsqrt(((x93*x93)+(x92*x92)))),-1);\nif(!x97.valid){\ncontinue;\n}\nif( (((x97.value)*(((((-1.0)*py*x83))+(((-1.0)*cj7*x85))+x85+((px*x83))+((cj7*x80))+(((-1.0)*x80)))))) < -1-IKFAST_SINCOS_THRESH || (((x97.value)*(((((-1.0)*py*x83))+(((-1.0)*cj7*x85))+x85+((px*x83))+((cj7*x80))+(((-1.0)*x80)))))) > 1+IKFAST_SINCOS_THRESH )\n    continue;\nIkReal x95=IKasin(((x97.value)*(((((-1.0)*py*x83))+(((-1.0)*cj7*x85))+x85+((px*x83))+((cj7*x80))+(((-1.0)*x80))))));\nj4array[0]=((((-1.0)*x95))+(((-1.0)*x94)));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nj4array[1]=((3.14159265358979)+x95+(((-1.0)*x94)));\nsj4array[1]=IKsin(j4array[1]);\ncj4array[1]=IKcos(j4array[1]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nif( j4array[1] > IKPI )\n{\n    j4array[1]-=IK2PI;\n}\nelse if( j4array[1] < -IKPI )\n{    j4array[1]+=IK2PI;\n}\nj4valid[1] = true;\nfor(int ij4 = 0; ij4 < 2; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 2; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[2];\nIkReal x98=((0.707106781186548)*py);\nIkReal x99=((0.707106781186548)*px);\nIkReal x100=IKcos(j4);\nIkReal x101=py*py;\nIkReal x102=cj6*cj6;\nIkReal x103=px*px;\nIkReal x104=sj6*sj6;\nIkReal x105=IKsin(j4);\nIkReal x106=(sj6*sj7);\nIkReal x107=((0.045)*sj6);\nIkReal x108=((0.5)*x103);\nIkReal x109=((0.0318198051533946)*py*sj6);\nIkReal x110=((0.5)*x101);\nIkReal x111=((0.0318198051533946)*px*sj6);\nIkReal x112=((1.0)*px*py);\nIkReal x113=(x102*x110);\nIkReal x114=(x102*x108);\nIkReal x115=(x104*x110);\nIkReal x116=(x104*x108);\nIkReal x117=(x113+x115);\nIkReal x118=(x116+x114);\nevalcond[0]=((((0.3)*x106))+x107+(((-1.0)*cj7*x107))+((x100*((x99+(((-1.0)*x98))))))+((x105*((x99+x98)))));\nevalcond[1]=((((-0.212132034355964)*px*x106))+((x100*(((((-1.0)*x118))+x117))))+((cj7*x109))+(((-1.0)*x109))+((cj7*x111))+(((-1.0)*x111))+(((-0.212132034355964)*py*x106))+((x105*(((((-1.0)*x117))+(((-1.0)*x118))+(((-1.0)*x102*x112))+(((-1.0)*x104*x112)))))));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nIkReal j5eval[2];\nIkReal x119=(py*sj7);\nIkReal x120=((1.0)*cj4);\nIkReal x121=((0.0318198051533946)*sj4);\nIkReal x122=(cj7*sj4);\nIkReal x123=((6.66666666666667)*px);\nIkReal x124=((0.388908729652601)*sj4);\nIkReal x125=((0.212132034355964)*py);\nIkReal x126=((0.0318198051533946)*cj4);\nIkReal x127=(px*sj7);\nIkReal x128=((12.2222222222222)*sj4);\nIkReal x129=((6.66666666666667)*py);\nIkReal x130=(cj4*cj7);\nIkReal x131=(cj4*py);\nIkReal x132=(cj6*pz);\nIkReal x133=((0.212132034355964)*px);\nIkReal x134=(cj4*px);\nj5eval[0]=((((-1.0)*x119*x120))+(((-1.0)*x123*x130))+(((-1.0)*x120*x127))+(((-1.0)*py*x128))+(((-12.2222222222222)*x131))+(((-12.2222222222222)*x134))+(((-1.0)*sj4*x119))+(((1.4142135623731)*cj7*x132))+((px*x128))+((x122*x123))+(((-1.4142135623731)*x132))+(((-9.42809041582063)*sj7*x132))+((sj4*x127))+(((-1.0)*x129*x130))+(((-1.0)*x122*x129)));\nj5eval[1]=IKsign(((((-0.045)*x132))+(((-1.0)*x119*x121))+(((-1.0)*x119*x126))+(((0.045)*cj7*x132))+(((-1.0)*py*x124))+((x121*x127))+(((-1.0)*x126*x127))+((x122*x133))+((px*x124))+(((-1.0)*x125*x130))+(((-0.3)*sj7*x132))+(((-0.388908729652601)*x134))+(((-0.388908729652601)*x131))+(((-1.0)*x130*x133))+(((-1.0)*x122*x125))));\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j5eval[2];\nIkReal x135=(py*sj4);\nIkReal x136=(pz*sj7);\nIkReal x137=(cj7*pz);\nIkReal x138=(cj4*px);\nIkReal x139=((0.212132034355964)*sj7);\nIkReal x140=((0.0318198051533946)*cj7);\nIkReal x141=((1.0)*cj7);\nIkReal x142=((0.0318198051533946)*cj6);\nIkReal x143=((6.66666666666667)*cj6*sj7);\nIkReal x144=(cj4*cj6*py);\nIkReal x145=(cj6*px*sj4);\nj5eval[0]=(((cj7*x145))+((cj6*x138))+((cj6*x135))+((cj4*py*x143))+((x138*x143))+(((-1.0)*px*sj4*x143))+(((-1.4142135623731)*x136))+((x135*x143))+x144+(((-9.42809041582063)*x137))+(((-1.0)*x145))+(((-1.0)*x141*x144))+(((-1.0)*cj6*x138*x141))+(((-1.0)*cj6*x135*x141))+(((-17.2848324290045)*pz)));\nj5eval[1]=IKsign(((((-0.045)*x136))+(((-0.55)*pz))+((cj6*x135*x139))+((x140*x145))+((cj4*py*x142))+(((-1.0)*x140*x144))+((x138*x142))+(((-1.0)*px*sj4*x142))+((x135*x142))+(((-1.0)*x139*x145))+(((-0.3)*x137))+((cj6*x138*x139))+(((-1.0)*cj6*x138*x140))+(((-1.0)*cj6*x135*x140))+((x139*x144))));\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j5eval[2];\nIkReal x146=cj6*cj6;\nIkReal x147=cj7*cj7;\nIkReal x148=(cj7*sj7);\nIkReal x149=((0.087975)*x147);\nIkReal x150=((21.7222222222222)*x147);\nIkReal x151=((0.027)*x146);\nIkReal x152=(cj7*x146);\nIkReal x153=((6.66666666666667)*x146);\nj5eval[0]=((-75.1913580246914)+(((-22.7222222222222)*x146))+(((-1.0)*x150))+(((-12.2222222222222)*sj7))+(((-6.66666666666667)*x148))+x152+((x146*x150))+((x148*x153))+(((-1.0)*sj7*x153))+(((-81.4814814814815)*cj7)));\nj5eval[1]=IKsign(((-0.304525)+(((-1.0)*x149))+(((0.00405)*x152))+(((-0.0495)*sj7))+(((-0.027)*x148))+((x146*x149))+((x148*x151))+(((-1.0)*sj7*x151))+(((-0.092025)*x146))+(((-0.33)*cj7))));\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[4];\nbool bgotonextstatement = true;\ndo\n{\nIkReal x154=((0.707106781186548)*py);\nIkReal x155=((0.707106781186548)*px);\nIkReal x156=((0.045)+((cj4*x155))+((sj4*x154))+((sj4*x155))+(((-0.045)*cj7))+(((0.3)*sj7))+(((-1.0)*cj4*x154)));\nevalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j6), 6.28318530717959))))));\nevalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));\nevalcond[2]=x156;\nevalcond[3]=x156;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5eval[1];\nIkReal x157=((-1.0)*py);\npz=0;\nj6=1.5707963267949;\nsj6=1.0;\ncj6=0;\npp=((px*px)+(py*py));\nnpx=(((px*r00))+((py*r10)));\nnpy=(((px*r01))+((py*r11)));\nnpz=(((px*r02))+((py*r12)));\nrxp0_0=(r20*x157);\nrxp0_1=(px*r20);\nrxp1_0=(r21*x157);\nrxp1_1=(px*r21);\nrxp2_0=(r22*x157);\nrxp2_1=(px*r22);\nj5eval[0]=(((cj4*py))+((cj4*px))+(((-1.0)*px*sj4))+((py*sj4)));\nif( IKabs(j5eval[0]) < 0.0000010000000000  )\n{\n{\nIkReal j5eval[1];\nIkReal x158=((-1.0)*py);\npz=0;\nj6=1.5707963267949;\nsj6=1.0;\ncj6=0;\npp=((px*px)+(py*py));\nnpx=(((px*r00))+((py*r10)));\nnpy=(((px*r01))+((py*r11)));\nnpz=(((px*r02))+((py*r12)));\nrxp0_0=(r20*x158);\nrxp0_1=(px*r20);\nrxp1_0=(r21*x158);\nrxp1_1=(px*r21);\nrxp2_0=(r22*x158);\nrxp2_1=(px*r22);\nj5eval[0]=((12.2222222222222)+sj7+(((6.66666666666667)*cj7)));\nif( IKabs(j5eval[0]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[7];\nbool bgotonextstatement = true;\ndo\n{\nIkReal x159=(py+px);\nIkReal x160=((((-1.0)*px))+py);\nIkReal x162 = ((x160*x160)+(x159*x159));\nif(IKabs(x162)==0){\ncontinue;\n}\nIkReal x161=pow(x162,-0.5);\nCheckValue<IkReal> x163 = IKatan2WithCheck(IkReal(x159),x160,IKFAST_ATAN2_MAGTHRESH);\nif(!x163.valid){\ncontinue;\n}\nIkReal gconst0=((-1.0)*(x163.value));\nIkReal gconst1=((-1.0)*x159*x161);\nIkReal gconst2=(x160*x161);\nIkReal x164=j4;\nIkReal x165=((0.707106781186548)*gconst2);\nIkReal x166=((0.707106781186548)*gconst1);\nCheckValue<IkReal> x170 = IKatan2WithCheck(IkReal((py+px)),((((-1.0)*px))+py),IKFAST_ATAN2_MAGTHRESH);\nif(!x170.valid){\ncontinue;\n}\nIkReal x167=x170.value;\nIkReal x168=x167;\nIkReal x169=((0.045)+((py*x166))+(((-1.0)*py*x165))+(((-0.045)*cj7))+((px*x165))+((px*x166))+(((0.3)*sj7)));\nif(((((x164*x167))+((x167*x168))+((j4*x168))+((j4*x164)))) < -0.00001)\ncontinue;\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((x164*x167))+((x167*x168))+((j4*x168))+((j4*x164)))))), 6.28318530717959)));\nevalcond[1]=((0.39655)+(((-1.0)*(px*px)))+(((0.0765)*sj7))+(((-1.0)*(py*py)))+(((0.32595)*cj7)));\nevalcond[2]=x169;\nevalcond[3]=x169;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[2], cj5array[2], sj5array[2];\nbool j5valid[2]={false};\n_nj5 = 2;\nIkReal x171=((0.707106781186548)*px);\nIkReal x172=((0.707106781186548)*py);\nCheckValue<IkReal> x174=IKPowWithIntegerCheck(((((-1.0)*gconst1*x171))+((gconst1*x172))+((gconst2*x171))+((gconst2*x172))),-1);\nif(!x174.valid){\ncontinue;\n}\nIkReal x173=x174.value;\nsj5array[0]=((((0.55)*x173))+(((0.045)*sj7*x173))+(((0.3)*cj7*x173)));\nif( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j5valid[0] = j5valid[1] = true;\n    j5array[0] = IKasin(sj5array[0]);\n    cj5array[0] = IKcos(j5array[0]);\n    sj5array[1] = sj5array[0];\n    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);\n    cj5array[1] = -cj5array[0];\n}\nelse if( isnan(sj5array[0]) )\n{\n    // probably any value will work\n    j5valid[0] = true;\n    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;\n}\nfor(int ij5 = 0; ij5 < 2; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 2; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[4];\nIkReal x175=IKcos(j5);\nIkReal x176=IKsin(j5);\nIkReal x177=px*px;\nIkReal x178=py*py;\nIkReal x179=(gconst2*px);\nIkReal x180=(gconst2*py);\nIkReal x181=(gconst1*px);\nIkReal x182=(gconst1*py);\nIkReal x183=((0.777817459305202)*x176);\nIkReal x184=((0.707106781186548)*x175);\nIkReal x185=((0.588235294117647)*x175);\nevalcond[0]=((((-1.0)*x178*x185))+(((-0.316735294117647)*x175))+(((-1.0)*x177*x185))+(((-0.108264705882353)*cj7*x175)));\nevalcond[1]=(((x180*x184))+((x179*x184))+((x182*x184))+(((-1.0)*x181*x184)));\nevalcond[2]=((((-0.707106781186548)*x180))+(((-0.707106781186548)*x182))+(((0.55)*x176))+(((0.045)*sj7*x176))+(((-0.707106781186548)*x179))+(((0.3)*cj7*x176))+(((0.707106781186548)*x181)));\nevalcond[3]=((-0.2125)+((x180*x183))+((x179*x183))+(((-1.0)*x178))+(((-1.0)*x177))+(((0.0636396103067893)*x180))+(((-0.0636396103067893)*x181))+(((-0.0636396103067893)*x182))+(((-0.0636396103067893)*x179))+((x182*x183))+(((-1.0)*x181*x183)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x763=(py+px);\nIkReal x764=((((-1.0)*px))+py);\nIkReal x766 = ((x764*x764)+(x763*x763));\nif(IKabs(x766)==0){\ncontinue;\n}\nIkReal x765=pow(x766,-0.5);\nCheckValue<IkReal> x767 = IKatan2WithCheck(IkReal(x763),x764,IKFAST_ATAN2_MAGTHRESH);\nif(!x767.valid){\ncontinue;\n}\nIkReal gconst3=((3.14159265358979)+(((-1.0)*(x767.value))));\nIkReal gconst4=((1.0)*x763*x765);\nIkReal gconst5=((-1.0)*x764*x765);\nIkReal x768=j4;\nIkReal x769=((0.707106781186548)*gconst5);\nIkReal x770=((0.707106781186548)*gconst4);\nCheckValue<IkReal> x774 = IKatan2WithCheck(IkReal((py+px)),((((-1.0)*px))+py),IKFAST_ATAN2_MAGTHRESH);\nif(!x774.valid){\ncontinue;\n}\nIkReal x771=x774.value;\nIkReal x772=x771;\nIkReal x773=((0.045)+(((-1.0)*py*x769))+((px*x769))+((px*x770))+(((-0.045)*cj7))+(((0.3)*sj7))+((py*x770)));\nif((((9.86960440108936)+((x771*x772))+(((-3.14159265358979)*x768))+(((-3.14159265358979)*x771))+(((-3.14159265358979)*x772))+((j4*x768))+(((-3.14159265358979)*j4))+((j4*x772))+((x768*x771)))) < -0.00001)\ncontinue;\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+((x771*x772))+(((-3.14159265358979)*x768))+(((-3.14159265358979)*x771))+(((-3.14159265358979)*x772))+((j4*x768))+(((-3.14159265358979)*j4))+((j4*x772))+((x768*x771)))))), 6.28318530717959)));\nevalcond[1]=((0.39655)+(((-1.0)*(px*px)))+(((0.0765)*sj7))+(((-1.0)*(py*py)))+(((0.32595)*cj7)));\nevalcond[2]=x773;\nevalcond[3]=x773;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[2], cj5array[2], sj5array[2];\nbool j5valid[2]={false};\n_nj5 = 2;\nIkReal x775=((0.707106781186548)*gconst5);\nIkReal x776=((0.707106781186548)*gconst4);\nCheckValue<IkReal> x778=IKPowWithIntegerCheck(((((-1.0)*px*x776))+((px*x775))+((py*x775))+((py*x776))),-1);\nif(!x778.valid){\ncontinue;\n}\nIkReal x777=x778.value;\nsj5array[0]=((((0.045)*sj7*x777))+(((0.3)*cj7*x777))+(((0.55)*x777)));\nif( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j5valid[0] = j5valid[1] = true;\n    j5array[0] = IKasin(sj5array[0]);\n    cj5array[0] = IKcos(j5array[0]);\n    sj5array[1] = sj5array[0];\n    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);\n    cj5array[1] = -cj5array[0];\n}\nelse if( isnan(sj5array[0]) )\n{\n    // probably any value will work\n    j5valid[0] = true;\n    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;\n}\nfor(int ij5 = 0; ij5 < 2; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 2; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[4];\nIkReal x779=IKcos(j5);\nIkReal x780=IKsin(j5);\nIkReal x781=px*px;\nIkReal x782=py*py;\nIkReal x783=((0.0636396103067893)*py);\nIkReal x784=(gconst4*px);\nIkReal x785=(gconst5*py);\nIkReal x786=(gconst4*py);\nIkReal x787=(gconst5*px);\nIkReal x788=((0.707106781186548)*x779);\nIkReal x789=((0.777817459305202)*x780);\nIkReal x790=((0.588235294117647)*x779);\nIkReal x791=(gconst5*x789);\nevalcond[0]=((((-0.316735294117647)*x779))+(((-0.108264705882353)*cj7*x779))+(((-1.0)*x781*x790))+(((-1.0)*x782*x790)));\nevalcond[1]=(((x786*x788))+((x785*x788))+((x787*x788))+(((-1.0)*x784*x788)));\nevalcond[2]=((((-0.707106781186548)*x786))+(((-0.707106781186548)*x787))+(((-0.707106781186548)*x785))+(((0.55)*x780))+(((0.3)*cj7*x780))+(((0.045)*sj7*x780))+(((0.707106781186548)*x784)));\nevalcond[3]=((-0.2125)+((x786*x789))+(((-1.0)*gconst4*x783))+((x785*x789))+((x787*x789))+(((-0.0636396103067893)*x787))+(((-0.0636396103067893)*x784))+(((-1.0)*x784*x789))+(((-1.0)*x781))+(((-1.0)*x782))+((gconst5*x783)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x792=((0.045)+(((-0.045)*cj7))+(((0.3)*sj7)));\nevalcond[0]=((IKabs(px))+(IKabs(py)));\nevalcond[1]=((0.39655)+(((0.0765)*sj7))+(((0.32595)*cj7)));\nevalcond[2]=x792;\nevalcond[3]=((-0.55)+(((-0.045)*sj7))+(((-0.3)*cj7)));\nevalcond[4]=0;\nevalcond[5]=x792;\nevalcond[6]=-0.2125;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5eval[1];\npz=0;\nj6=1.5707963267949;\nsj6=1.0;\ncj6=0;\npp=0;\nnpx=0;\nnpy=0;\nnpz=0;\nrxp0_0=0;\nrxp0_1=0;\nrxp1_0=0;\nrxp1_1=0;\nrxp2_0=0;\nrxp2_1=0;\npx=0;\npy=0;\nrxp0_2=0;\nrxp1_2=0;\nrxp2_2=0;\nj5eval[0]=IKabs(((2.92556370551481)+cj7));\nif( IKabs(j5eval[0]) < 0.0000000100000000  )\n{\ncontinue; // no branches [j5]\n\n} else\n{\nIkReal op[2+1], zeror[2];\nint numroots;\nop[0]=((2.92556370551481)+cj7);\nop[1]=0;\nop[2]=((-2.92556370551481)+(((-1.0)*cj7)));\npolyroots2(op,zeror,numroots);\nIkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];\nint numsolutions = 0;\nfor(int ij5 = 0; ij5 < numroots; ++ij5)\n{\nIkReal htj5 = zeror[ij5];\ntempj5array[0]=((2.0)*(atan(htj5)));\nfor(int kj5 = 0; kj5 < 1; ++kj5)\n{\nj5array[numsolutions] = tempj5array[kj5];\nif( j5array[numsolutions] > IKPI )\n{\n    j5array[numsolutions]-=IK2PI;\n}\nelse if( j5array[numsolutions] < -IKPI )\n{\n    j5array[numsolutions]+=IK2PI;\n}\nsj5array[numsolutions] = IKsin(j5array[numsolutions]);\ncj5array[numsolutions] = IKcos(j5array[numsolutions]);\nnumsolutions++;\n}\n}\nbool j5valid[2]={true,true};\n_nj5 = 2;\nfor(int ij5 = 0; ij5 < numsolutions; ++ij5)\n    {\nif( !j5valid[ij5] )\n{\n    continue;\n}\n    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\nhtj5 = IKtan(j5/2);\n\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nrotationfunction0(solutions);\n    }\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j5]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j5array[2], cj5array[2], sj5array[2];\nbool j5valid[2]={false};\n_nj5 = 2;\nCheckValue<IkReal> x796=IKPowWithIntegerCheck(((0.55)+(((0.045)*sj7))+(((0.3)*cj7))),-1);\nif(!x796.valid){\ncontinue;\n}\nIkReal x793=x796.value;\nIkReal x794=((0.707106781186548)*sj4*x793);\nIkReal x795=((0.707106781186548)*cj4*x793);\nsj5array[0]=((((-1.0)*px*x794))+((px*x795))+((py*x795))+((py*x794)));\nif( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j5valid[0] = j5valid[1] = true;\n    j5array[0] = IKasin(sj5array[0]);\n    cj5array[0] = IKcos(j5array[0]);\n    sj5array[1] = sj5array[0];\n    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);\n    cj5array[1] = -cj5array[0];\n}\nelse if( isnan(sj5array[0]) )\n{\n    // probably any value will work\n    j5valid[0] = true;\n    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;\n}\nfor(int ij5 = 0; ij5 < 2; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 2; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[4];\nIkReal x797=IKcos(j5);\nIkReal x798=IKsin(j5);\nIkReal x799=px*px;\nIkReal x800=py*py;\nIkReal x801=((0.707106781186548)*sj4);\nIkReal x802=(cj4*py);\nIkReal x803=((0.777817459305202)*sj4);\nIkReal x804=((0.0636396103067893)*sj4);\nIkReal x805=((0.707106781186548)*cj4);\nIkReal x806=(px*x797);\nIkReal x807=(py*x798);\nIkReal x808=(px*x798);\nIkReal x809=((0.588235294117647)*x797);\nIkReal x810=(x798*x802);\nevalcond[0]=((((-0.316735294117647)*x797))+(((-1.0)*x799*x809))+(((-1.0)*x800*x809))+(((-0.108264705882353)*cj7*x797)));\nevalcond[1]=(((x805*x806))+((py*x797*x801))+(((0.707106781186548)*x797*x802))+(((-1.0)*x801*x806)));\nevalcond[2]=((-0.55)+(((-0.045)*sj7))+(((-0.3)*cj7))+(((0.707106781186548)*x810))+((x805*x808))+((x801*x807))+(((-1.0)*x801*x808)));\nevalcond[3]=((-0.2125)+(((-1.0)*x800))+(((0.777817459305202)*x810))+(((0.777817459305202)*cj4*x808))+(((-1.0)*px*x804))+((x803*x807))+(((-1.0)*x803*x808))+(((-0.0636396103067893)*cj4*px))+(((0.0636396103067893)*x802))+(((-1.0)*x799))+(((-1.0)*py*x804)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[2], cj5array[2], sj5array[2];\nbool j5valid[2]={false};\n_nj5 = 2;\nIkReal x811=((0.707106781186548)*sj4);\nIkReal x812=((0.707106781186548)*cj4);\nCheckValue<IkReal> x814=IKPowWithIntegerCheck((((py*x811))+((py*x812))+((px*x812))+(((-1.0)*px*x811))),-1);\nif(!x814.valid){\ncontinue;\n}\nIkReal x813=x814.value;\nsj5array[0]=((((0.3)*cj7*x813))+(((0.045)*sj7*x813))+(((0.55)*x813)));\nif( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j5valid[0] = j5valid[1] = true;\n    j5array[0] = IKasin(sj5array[0]);\n    cj5array[0] = IKcos(j5array[0]);\n    sj5array[1] = sj5array[0];\n    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);\n    cj5array[1] = -cj5array[0];\n}\nelse if( isnan(sj5array[0]) )\n{\n    // probably any value will work\n    j5valid[0] = true;\n    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;\n}\nfor(int ij5 = 0; ij5 < 2; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 2; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[4];\nIkReal x815=IKcos(j5);\nIkReal x816=IKsin(j5);\nIkReal x817=px*px;\nIkReal x818=py*py;\nIkReal x819=(cj4*py);\nIkReal x820=(px*sj4);\nIkReal x821=(py*sj4);\nIkReal x822=(cj4*px);\nIkReal x823=((0.777817459305202)*x816);\nIkReal x824=((0.707106781186548)*x815);\nIkReal x825=((0.588235294117647)*x815);\nevalcond[0]=((((-1.0)*x818*x825))+(((-1.0)*x817*x825))+(((-0.108264705882353)*cj7*x815))+(((-0.316735294117647)*x815)));\nevalcond[1]=(((x821*x824))+((x819*x824))+((x822*x824))+(((-1.0)*x820*x824)));\nevalcond[2]=((((0.3)*cj7*x816))+(((0.045)*sj7*x816))+(((-0.707106781186548)*x822))+(((-0.707106781186548)*x821))+(((-0.707106781186548)*x819))+(((0.55)*x816))+(((0.707106781186548)*x820)));\nevalcond[3]=((-0.2125)+((x821*x823))+(((0.0636396103067893)*x819))+((x819*x823))+(((-1.0)*x817))+(((-1.0)*x818))+((x822*x823))+(((-1.0)*x820*x823))+(((-0.0636396103067893)*x821))+(((-0.0636396103067893)*x820))+(((-0.0636396103067893)*x822)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x826=((0.3)*sj7);\nIkReal x827=((0.045)*cj7);\nIkReal x828=((0.707106781186548)*py);\nIkReal x829=((0.707106781186548)*px);\nIkReal x830=(cj4*x828);\nIkReal x831=(cj4*x829);\nIkReal x832=(sj4*x828);\nIkReal x833=(sj4*x829);\nIkReal x834=(x826+x830);\nIkReal x835=(x827+x831+x832+x833);\nevalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j6), 6.28318530717959))))));\nevalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));\nevalcond[2]=((-0.045)+(((-1.0)*x834))+x835);\nevalcond[3]=((0.045)+(((-1.0)*x835))+x834);\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5eval[1];\nIkReal x836=((-1.0)*py);\npz=0;\nj6=-1.5707963267949;\nsj6=-1.0;\ncj6=0;\npp=((px*px)+(py*py));\nnpx=(((px*r00))+((py*r10)));\nnpy=(((px*r01))+((py*r11)));\nnpz=(((px*r02))+((py*r12)));\nrxp0_0=(r20*x836);\nrxp0_1=(px*r20);\nrxp1_0=(r21*x836);\nrxp1_1=(px*r21);\nrxp2_0=(r22*x836);\nrxp2_1=(px*r22);\nj5eval[0]=(((cj4*py))+((cj4*px))+(((-1.0)*px*sj4))+((py*sj4)));\nif( IKabs(j5eval[0]) < 0.0000010000000000  )\n{\n{\nIkReal j5eval[1];\nIkReal x837=((-1.0)*py);\npz=0;\nj6=-1.5707963267949;\nsj6=-1.0;\ncj6=0;\npp=((px*px)+(py*py));\nnpx=(((px*r00))+((py*r10)));\nnpy=(((px*r01))+((py*r11)));\nnpz=(((px*r02))+((py*r12)));\nrxp0_0=(r20*x837);\nrxp0_1=(px*r20);\nrxp1_0=(r21*x837);\nrxp1_1=(px*r21);\nrxp2_0=(r22*x837);\nrxp2_1=(px*r22);\nj5eval[0]=((12.2222222222222)+sj7+(((6.66666666666667)*cj7)));\nif( IKabs(j5eval[0]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[7];\nbool bgotonextstatement = true;\ndo\n{\nIkReal x838=(py+px);\nIkReal x839=((((-1.0)*px))+py);\nIkReal x841 = ((x838*x838)+(x839*x839));\nif(IKabs(x841)==0){\ncontinue;\n}\nIkReal x840=pow(x841,-0.5);\nCheckValue<IkReal> x842 = IKatan2WithCheck(IkReal(x838),x839,IKFAST_ATAN2_MAGTHRESH);\nif(!x842.valid){\ncontinue;\n}\nIkReal gconst6=((-1.0)*(x842.value));\nIkReal gconst7=((-1.0)*x838*x840);\nIkReal gconst8=(x839*x840);\nIkReal x843=j4;\nIkReal x844=((0.3)*sj7);\nIkReal x845=((0.045)*cj7);\nIkReal x846=((0.707106781186548)*gconst8);\nIkReal x847=((0.707106781186548)*gconst7);\nIkReal x848=(py*x846);\nIkReal x849=(px*x846);\nIkReal x850=(py*x847);\nIkReal x851=(px*x847);\nCheckValue<IkReal> x856 = IKatan2WithCheck(IkReal((py+px)),((((-1.0)*px))+py),IKFAST_ATAN2_MAGTHRESH);\nif(!x856.valid){\ncontinue;\n}\nIkReal x852=x856.value;\nIkReal x853=x852;\nIkReal x854=(x844+x848);\nIkReal x855=(x850+x851+x845+x849);\nif(((((j4*x853))+((j4*x843))+((x852*x853))+((x843*x852)))) < -0.00001)\ncontinue;\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((j4*x853))+((j4*x843))+((x852*x853))+((x843*x852)))))), 6.28318530717959)));\nevalcond[1]=((0.39655)+(((-1.0)*(px*px)))+(((0.0765)*sj7))+(((-1.0)*(py*py)))+(((0.32595)*cj7)));\nevalcond[2]=((-0.045)+(((-1.0)*x854))+x855);\nevalcond[3]=((0.045)+(((-1.0)*x855))+x854);\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[2], cj5array[2], sj5array[2];\nbool j5valid[2]={false};\n_nj5 = 2;\nIkReal x857=((0.707106781186548)*px);\nIkReal x858=((0.707106781186548)*py);\nCheckValue<IkReal> x860=IKPowWithIntegerCheck((((gconst8*x858))+((gconst8*x857))+((gconst7*x858))+(((-1.0)*gconst7*x857))),-1);\nif(!x860.valid){\ncontinue;\n}\nIkReal x859=x860.value;\nsj5array[0]=((((0.55)*x859))+(((0.3)*cj7*x859))+(((0.045)*sj7*x859)));\nif( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j5valid[0] = j5valid[1] = true;\n    j5array[0] = IKasin(sj5array[0]);\n    cj5array[0] = IKcos(j5array[0]);\n    sj5array[1] = sj5array[0];\n    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);\n    cj5array[1] = -cj5array[0];\n}\nelse if( isnan(sj5array[0]) )\n{\n    // probably any value will work\n    j5valid[0] = true;\n    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;\n}\nfor(int ij5 = 0; ij5 < 2; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 2; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[4];\nIkReal x861=IKcos(j5);\nIkReal x862=IKsin(j5);\nIkReal x863=px*px;\nIkReal x864=py*py;\nIkReal x865=(gconst7*px);\nIkReal x866=((0.0636396103067893)*py);\nIkReal x867=(gconst8*px);\nIkReal x868=((0.707106781186548)*py);\nIkReal x869=((0.777817459305202)*x862);\nIkReal x870=((0.707106781186548)*x861);\nIkReal x871=((0.588235294117647)*x861);\nIkReal x872=(py*x869);\nIkReal x873=(x861*x868);\nevalcond[0]=((((-0.108264705882353)*cj7*x861))+(((-0.316735294117647)*x861))+(((-1.0)*x864*x871))+(((-1.0)*x863*x871)));\nevalcond[1]=((((-1.0)*gconst8*x873))+(((-1.0)*gconst7*x873))+(((-1.0)*x867*x870))+((x865*x870)));\nevalcond[2]=((((0.55)*x862))+(((-1.0)*gconst8*x868))+(((0.3)*cj7*x862))+(((-0.707106781186548)*x867))+(((-1.0)*gconst7*x868))+(((0.045)*sj7*x862))+(((0.707106781186548)*x865)));\nevalcond[3]=((-0.2125)+(((-1.0)*x865*x869))+((x867*x869))+(((-1.0)*x863))+(((-1.0)*x864))+(((-1.0)*gconst8*x866))+((gconst8*x872))+((gconst7*x872))+((gconst7*x866))+(((0.0636396103067893)*x865))+(((0.0636396103067893)*x867)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x874=(py+px);\nIkReal x875=((((-1.0)*px))+py);\nIkReal x877 = ((x874*x874)+(x875*x875));\nif(IKabs(x877)==0){\ncontinue;\n}\nIkReal x876=pow(x877,-0.5);\nCheckValue<IkReal> x878 = IKatan2WithCheck(IkReal(x874),x875,IKFAST_ATAN2_MAGTHRESH);\nif(!x878.valid){\ncontinue;\n}\nIkReal gconst9=((3.14159265358979)+(((-1.0)*(x878.value))));\nIkReal gconst10=((1.0)*x874*x876);\nIkReal gconst11=((-1.0)*x875*x876);\nIkReal x879=j4;\nIkReal x880=((0.3)*sj7);\nIkReal x881=((0.045)*cj7);\nIkReal x882=((0.707106781186548)*gconst11);\nIkReal x883=((0.707106781186548)*gconst10);\nIkReal x884=(py*x882);\nIkReal x885=(px*x882);\nIkReal x886=(px*x883);\nIkReal x887=(py*x883);\nCheckValue<IkReal> x892 = IKatan2WithCheck(IkReal((py+px)),((((-1.0)*px))+py),IKFAST_ATAN2_MAGTHRESH);\nif(!x892.valid){\ncontinue;\n}\nIkReal x888=x892.value;\nIkReal x889=x888;\nIkReal x890=(x884+x880);\nIkReal x891=(x885+x887+x886+x881);\nif((((9.86960440108936)+((x879*x888))+((j4*x879))+(((-3.14159265358979)*x879))+(((-3.14159265358979)*j4))+((j4*x889))+(((-3.14159265358979)*x889))+(((-3.14159265358979)*x888))+((x888*x889)))) < -0.00001)\ncontinue;\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+((x879*x888))+((j4*x879))+(((-3.14159265358979)*x879))+(((-3.14159265358979)*j4))+((j4*x889))+(((-3.14159265358979)*x889))+(((-3.14159265358979)*x888))+((x888*x889)))))), 6.28318530717959)));\nevalcond[1]=((0.39655)+(((-1.0)*(px*px)))+(((0.0765)*sj7))+(((-1.0)*(py*py)))+(((0.32595)*cj7)));\nevalcond[2]=((-0.045)+(((-1.0)*x890))+x891);\nevalcond[3]=((0.045)+(((-1.0)*x891))+x890);\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[2], cj5array[2], sj5array[2];\nbool j5valid[2]={false};\n_nj5 = 2;\nIkReal x893=((0.707106781186548)*py);\nIkReal x894=((0.707106781186548)*px);\nCheckValue<IkReal> x896=IKPowWithIntegerCheck((((gconst11*x893))+((gconst11*x894))+(((-1.0)*gconst10*x894))+((gconst10*x893))),-1);\nif(!x896.valid){\ncontinue;\n}\nIkReal x895=x896.value;\nsj5array[0]=((((0.3)*cj7*x895))+(((0.045)*sj7*x895))+(((0.55)*x895)));\nif( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j5valid[0] = j5valid[1] = true;\n    j5array[0] = IKasin(sj5array[0]);\n    cj5array[0] = IKcos(j5array[0]);\n    sj5array[1] = sj5array[0];\n    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);\n    cj5array[1] = -cj5array[0];\n}\nelse if( isnan(sj5array[0]) )\n{\n    // probably any value will work\n    j5valid[0] = true;\n    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;\n}\nfor(int ij5 = 0; ij5 < 2; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 2; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[4];\nIkReal x897=IKcos(j5);\nIkReal x898=IKsin(j5);\nIkReal x899=px*px;\nIkReal x900=py*py;\nIkReal x901=(gconst11*py);\nIkReal x902=(gconst10*px);\nIkReal x903=(gconst11*px);\nIkReal x904=(gconst10*py);\nIkReal x905=((0.707106781186548)*x897);\nIkReal x906=((0.777817459305202)*x898);\nIkReal x907=((0.588235294117647)*x897);\nevalcond[0]=((((-1.0)*x900*x907))+(((-0.316735294117647)*x897))+(((-0.108264705882353)*cj7*x897))+(((-1.0)*x899*x907)));\nevalcond[1]=((((-1.0)*x903*x905))+((x902*x905))+(((-1.0)*x901*x905))+(((-1.0)*x904*x905)));\nevalcond[2]=((((0.3)*cj7*x898))+(((0.045)*sj7*x898))+(((-0.707106781186548)*x904))+(((-0.707106781186548)*x901))+(((-0.707106781186548)*x903))+(((0.707106781186548)*x902))+(((0.55)*x898)));\nevalcond[3]=((-0.2125)+((x903*x906))+(((-1.0)*x902*x906))+((x901*x906))+(((-1.0)*x899))+(((-0.0636396103067893)*x901))+(((0.0636396103067893)*x903))+(((0.0636396103067893)*x902))+(((0.0636396103067893)*x904))+(((-1.0)*x900))+((x904*x906)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x908=((0.3)*sj7);\nIkReal x909=((0.045)*cj7);\nevalcond[0]=((IKabs(px))+(IKabs(py)));\nevalcond[1]=((0.39655)+(((0.0765)*sj7))+(((0.32595)*cj7)));\nevalcond[2]=((-0.045)+(((-1.0)*x908))+x909);\nevalcond[3]=((-0.55)+(((-0.045)*sj7))+(((-0.3)*cj7)));\nevalcond[4]=0;\nevalcond[5]=((0.045)+(((-1.0)*x909))+x908);\nevalcond[6]=-0.2125;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5eval[1];\npz=0;\nj6=-1.5707963267949;\nsj6=-1.0;\ncj6=0;\npp=0;\nnpx=0;\nnpy=0;\nnpz=0;\nrxp0_0=0;\nrxp0_1=0;\nrxp1_0=0;\nrxp1_1=0;\nrxp2_0=0;\nrxp2_1=0;\npx=0;\npy=0;\nrxp0_2=0;\nrxp1_2=0;\nrxp2_2=0;\nj5eval[0]=IKabs(((2.92556370551481)+cj7));\nif( IKabs(j5eval[0]) < 0.0000000100000000  )\n{\ncontinue; // no branches [j5]\n\n} else\n{\nIkReal op[2+1], zeror[2];\nint numroots;\nop[0]=((2.92556370551481)+cj7);\nop[1]=0;\nop[2]=((-2.92556370551481)+(((-1.0)*cj7)));\npolyroots2(op,zeror,numroots);\nIkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];\nint numsolutions = 0;\nfor(int ij5 = 0; ij5 < numroots; ++ij5)\n{\nIkReal htj5 = zeror[ij5];\ntempj5array[0]=((2.0)*(atan(htj5)));\nfor(int kj5 = 0; kj5 < 1; ++kj5)\n{\nj5array[numsolutions] = tempj5array[kj5];\nif( j5array[numsolutions] > IKPI )\n{\n    j5array[numsolutions]-=IK2PI;\n}\nelse if( j5array[numsolutions] < -IKPI )\n{\n    j5array[numsolutions]+=IK2PI;\n}\nsj5array[numsolutions] = IKsin(j5array[numsolutions]);\ncj5array[numsolutions] = IKcos(j5array[numsolutions]);\nnumsolutions++;\n}\n}\nbool j5valid[2]={true,true};\n_nj5 = 2;\nfor(int ij5 = 0; ij5 < numsolutions; ++ij5)\n    {\nif( !j5valid[ij5] )\n{\n    continue;\n}\n    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\nhtj5 = IKtan(j5/2);\n\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nrotationfunction0(solutions);\n    }\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j5]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j5array[2], cj5array[2], sj5array[2];\nbool j5valid[2]={false};\n_nj5 = 2;\nCheckValue<IkReal> x913=IKPowWithIntegerCheck(((0.55)+(((0.045)*sj7))+(((0.3)*cj7))),-1);\nif(!x913.valid){\ncontinue;\n}\nIkReal x910=x913.value;\nIkReal x911=((0.707106781186548)*sj4*x910);\nIkReal x912=((0.707106781186548)*cj4*x910);\nsj5array[0]=((((-1.0)*px*x911))+((px*x912))+((py*x912))+((py*x911)));\nif( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j5valid[0] = j5valid[1] = true;\n    j5array[0] = IKasin(sj5array[0]);\n    cj5array[0] = IKcos(j5array[0]);\n    sj5array[1] = sj5array[0];\n    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);\n    cj5array[1] = -cj5array[0];\n}\nelse if( isnan(sj5array[0]) )\n{\n    // probably any value will work\n    j5valid[0] = true;\n    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;\n}\nfor(int ij5 = 0; ij5 < 2; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 2; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[4];\nIkReal x914=IKcos(j5);\nIkReal x915=IKsin(j5);\nIkReal x916=px*px;\nIkReal x917=py*py;\nIkReal x918=((0.707106781186548)*sj4);\nIkReal x919=(cj4*py);\nIkReal x920=((0.777817459305202)*sj4);\nIkReal x921=((0.0636396103067893)*sj4);\nIkReal x922=((0.707106781186548)*cj4);\nIkReal x923=(px*x914);\nIkReal x924=(py*x915);\nIkReal x925=(px*x915);\nIkReal x926=((0.588235294117647)*x914);\nIkReal x927=(x915*x919);\nevalcond[0]=((((-0.316735294117647)*x914))+(((-0.108264705882353)*cj7*x914))+(((-1.0)*x916*x926))+(((-1.0)*x917*x926)));\nevalcond[1]=(((x918*x923))+(((-0.707106781186548)*x914*x919))+(((-1.0)*py*x914*x918))+(((-1.0)*x922*x923)));\nevalcond[2]=((-0.55)+(((-0.045)*sj7))+((x918*x924))+(((-0.3)*cj7))+(((0.707106781186548)*x927))+(((-1.0)*x918*x925))+((x922*x925)));\nevalcond[3]=((-0.2125)+((x920*x924))+(((-0.0636396103067893)*x919))+(((-1.0)*x920*x925))+((py*x921))+(((0.0636396103067893)*cj4*px))+(((0.777817459305202)*x927))+(((-1.0)*x917))+(((-1.0)*x916))+(((0.777817459305202)*cj4*x925))+((px*x921)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[2], cj5array[2], sj5array[2];\nbool j5valid[2]={false};\n_nj5 = 2;\nIkReal x928=((0.707106781186548)*sj4);\nIkReal x929=((0.707106781186548)*cj4);\nCheckValue<IkReal> x931=IKPowWithIntegerCheck(((((-1.0)*px*x928))+((py*x929))+((py*x928))+((px*x929))),-1);\nif(!x931.valid){\ncontinue;\n}\nIkReal x930=x931.value;\nsj5array[0]=((((0.045)*sj7*x930))+(((0.55)*x930))+(((0.3)*cj7*x930)));\nif( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j5valid[0] = j5valid[1] = true;\n    j5array[0] = IKasin(sj5array[0]);\n    cj5array[0] = IKcos(j5array[0]);\n    sj5array[1] = sj5array[0];\n    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);\n    cj5array[1] = -cj5array[0];\n}\nelse if( isnan(sj5array[0]) )\n{\n    // probably any value will work\n    j5valid[0] = true;\n    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;\n}\nfor(int ij5 = 0; ij5 < 2; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 2; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[4];\nIkReal x932=IKcos(j5);\nIkReal x933=IKsin(j5);\nIkReal x934=px*px;\nIkReal x935=py*py;\nIkReal x936=(cj4*py);\nIkReal x937=(px*sj4);\nIkReal x938=(py*sj4);\nIkReal x939=(cj4*px);\nIkReal x940=((0.777817459305202)*x933);\nIkReal x941=((0.707106781186548)*x932);\nIkReal x942=((0.588235294117647)*x932);\nevalcond[0]=((((-0.108264705882353)*cj7*x932))+(((-0.316735294117647)*x932))+(((-1.0)*x935*x942))+(((-1.0)*x934*x942)));\nevalcond[1]=((((-1.0)*x939*x941))+((x937*x941))+(((-1.0)*x938*x941))+(((-1.0)*x936*x941)));\nevalcond[2]=((((0.045)*sj7*x933))+(((0.55)*x933))+(((0.707106781186548)*x937))+(((0.3)*cj7*x933))+(((-0.707106781186548)*x939))+(((-0.707106781186548)*x938))+(((-0.707106781186548)*x936)));\nevalcond[3]=((-0.2125)+(((-0.0636396103067893)*x936))+((x936*x940))+((x938*x940))+((x939*x940))+(((-1.0)*x935))+(((-1.0)*x934))+(((0.0636396103067893)*x937))+(((0.0636396103067893)*x939))+(((0.0636396103067893)*x938))+(((-1.0)*x937*x940)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x943=((0.707106781186548)*cj4);\nIkReal x944=((0.707106781186548)*sj4);\nevalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959)))))+(IKabs(pz)));\nevalcond[1]=((0.7225)+(((-1.0)*pp)));\nevalcond[2]=((((-1.0)*py*x943))+((px*x944))+((px*x943))+((py*x944)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5eval[1];\nIkReal x945=((-1.0)*py);\npz=0;\nj7=0;\nsj7=0;\ncj7=1.0;\npp=((px*px)+(py*py));\nnpx=(((px*r00))+((py*r10)));\nnpy=(((px*r01))+((py*r11)));\nnpz=(((px*r02))+((py*r12)));\nrxp0_0=(r20*x945);\nrxp0_1=(px*r20);\nrxp1_0=(r21*x945);\nrxp1_1=(px*r21);\nrxp2_0=(r22*x945);\nrxp2_1=(px*r22);\nIkReal x946=(px*sj6);\nIkReal x947=(py*sj6);\nj5eval[0]=((((-1.0)*sj4*x946))+((sj4*x947))+((cj4*x947))+((cj4*x946)));\nif( IKabs(j5eval[0]) < 0.0000010000000000  )\n{\n{\nIkReal j5eval[1];\nIkReal x948=((-1.0)*py);\npz=0;\nj7=0;\nsj7=0;\ncj7=1.0;\npp=((px*px)+(py*py));\nnpx=(((px*r00))+((py*r10)));\nnpy=(((px*r01))+((py*r11)));\nnpz=(((px*r02))+((py*r12)));\nrxp0_0=(r20*x948);\nrxp0_1=(px*r20);\nrxp1_0=(r21*x948);\nrxp1_1=(px*r21);\nrxp2_0=(r22*x948);\nrxp2_1=(px*r22);\nIkReal x949=(cj6*px);\nIkReal x950=((1.0)*cj4);\nIkReal x951=(cj6*py);\nj5eval[0]=((((-1.0)*sj4*x951))+((sj4*x949))+(((-1.0)*x950*x951))+(((-1.0)*x949*x950)));\nif( IKabs(j5eval[0]) < 0.0000010000000000  )\n{\n{\nIkReal j5eval[2];\nIkReal x952=((-1.0)*py);\npz=0;\nj7=0;\nsj7=0;\ncj7=1.0;\npp=((px*px)+(py*py));\nnpx=(((px*r00))+((py*r10)));\nnpy=(((px*r01))+((py*r11)));\nnpz=(((px*r02))+((py*r12)));\nrxp0_0=(r20*x952);\nrxp0_1=(px*r20);\nrxp1_0=(r21*x952);\nrxp1_1=(px*r21);\nrxp2_0=(r22*x952);\nrxp2_1=(px*r22);\nIkReal x953=(px*sj6);\nIkReal x954=((1.0)*sj4);\nIkReal x955=(py*sj4);\nIkReal x956=(cj4*py);\nj5eval[0]=(((cj4*px))+(((-1.0)*px*x954))+x956+x955);\nj5eval[1]=(((sj6*x956))+((sj6*x955))+(((-1.0)*x953*x954))+((cj4*x953)));\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[5];\nbool bgotonextstatement = true;\ndo\n{\nIkReal x957=(py+px);\nIkReal x958=((((-1.0)*px))+py);\nIkReal x960 = ((x957*x957)+(x958*x958));\nif(IKabs(x960)==0){\ncontinue;\n}\nIkReal x959=pow(x960,-0.5);\nCheckValue<IkReal> x961 = IKatan2WithCheck(IkReal(x957),x958,IKFAST_ATAN2_MAGTHRESH);\nif(!x961.valid){\ncontinue;\n}\nIkReal gconst12=((-1.0)*(x961.value));\nIkReal gconst13=((-1.0)*x957*x959);\nIkReal gconst14=(x958*x959);\nIkReal x962=j4;\nIkReal x963=((0.707106781186548)*py);\nIkReal x964=((0.707106781186548)*px);\nCheckValue<IkReal> x967 = IKatan2WithCheck(IkReal((py+px)),((((-1.0)*px))+py),IKFAST_ATAN2_MAGTHRESH);\nif(!x967.valid){\ncontinue;\n}\nIkReal x965=x967.value;\nIkReal x966=x965;\nif(((((x962*x965))+((j4*x962))+((j4*x966))+((x965*x966)))) < -0.00001)\ncontinue;\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((x962*x965))+((j4*x962))+((j4*x966))+((x965*x966)))))), 6.28318530717959)));\nevalcond[1]=((0.7225)+(((-1.0)*(px*px)))+(((-1.0)*(py*py))));\nevalcond[2]=((((-1.0)*gconst14*x963))+((gconst14*x964))+((gconst13*x963))+((gconst13*x964)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[2], cj5array[2], sj5array[2];\nbool j5valid[2]={false};\n_nj5 = 2;\nIkReal x968=((0.831890330807703)*py);\nIkReal x969=((0.831890330807703)*px);\nsj5array[0]=(((gconst14*x969))+((gconst14*x968))+(((-1.0)*gconst13*x969))+((gconst13*x968)));\nif( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j5valid[0] = j5valid[1] = true;\n    j5array[0] = IKasin(sj5array[0]);\n    cj5array[0] = IKcos(j5array[0]);\n    sj5array[1] = sj5array[0];\n    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);\n    cj5array[1] = -cj5array[0];\n}\nelse if( isnan(sj5array[0]) )\n{\n    // probably any value will work\n    j5valid[0] = true;\n    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;\n}\nfor(int ij5 = 0; ij5 < 2; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 2; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[5];\nIkReal x970=IKsin(j5);\nIkReal x971=IKcos(j5);\nIkReal x972=((0.707106781186548)*sj6);\nIkReal x973=(gconst13*py);\nIkReal x974=(gconst14*px);\nIkReal x975=((0.707106781186548)*cj6);\nIkReal x976=(gconst13*px);\nIkReal x977=((0.0636396103067893)*sj6);\nIkReal x978=(gconst14*py);\nIkReal x979=((0.777817459305202)*x970);\nIkReal x980=((0.707106781186548)*x970);\nIkReal x981=((0.0636396103067893)*cj6*x971);\nevalcond[0]=((-0.85)*x971);\nevalcond[1]=((-0.85)+((x973*x980))+((x974*x980))+(((-1.0)*x976*x980))+((x978*x980)));\nevalcond[2]=(((x975*x976))+((x971*x972*x978))+((x971*x972*x974))+((x971*x972*x973))+((x973*x975))+((x974*x975))+(((-1.0)*x971*x972*x976))+(((-1.0)*x975*x978)));\nevalcond[3]=((((-1.0)*x971*x973*x975))+((x971*x975*x976))+(((-1.0)*x972*x978))+(((-1.0)*x971*x974*x975))+(((-1.0)*x971*x975*x978))+((x972*x973))+((x972*x974))+((x972*x976)));\nevalcond[4]=((-0.935)+((x978*x979))+((x977*x978))+((x973*x981))+(((-1.0)*x974*x977))+((x973*x979))+((x974*x981))+(((-1.0)*x976*x977))+(((-1.0)*x976*x979))+((x974*x979))+(((-1.0)*x976*x981))+(((-1.0)*x973*x977))+((x978*x981)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x982=(py+px);\nIkReal x983=((((-1.0)*px))+py);\nIkReal x985 = ((x983*x983)+(x982*x982));\nif(IKabs(x985)==0){\ncontinue;\n}\nIkReal x984=pow(x985,-0.5);\nCheckValue<IkReal> x986 = IKatan2WithCheck(IkReal(x982),x983,IKFAST_ATAN2_MAGTHRESH);\nif(!x986.valid){\ncontinue;\n}\nIkReal gconst15=((3.14159265358979)+(((-1.0)*(x986.value))));\nIkReal gconst16=((1.0)*x982*x984);\nIkReal gconst17=((-1.0)*x983*x984);\nIkReal x987=j4;\nIkReal x988=((0.707106781186548)*gconst16);\nIkReal x989=((0.707106781186548)*gconst17);\nCheckValue<IkReal> x992 = IKatan2WithCheck(IkReal((py+px)),((((-1.0)*px))+py),IKFAST_ATAN2_MAGTHRESH);\nif(!x992.valid){\ncontinue;\n}\nIkReal x990=x992.value;\nIkReal x991=x990;\nif((((9.86960440108936)+(((-3.14159265358979)*x991))+(((-3.14159265358979)*x990))+((x990*x991))+((j4*x987))+(((-3.14159265358979)*x987))+(((-3.14159265358979)*j4))+((x987*x990))+((j4*x991)))) < -0.00001)\ncontinue;\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+(((-3.14159265358979)*x991))+(((-3.14159265358979)*x990))+((x990*x991))+((j4*x987))+(((-3.14159265358979)*x987))+(((-3.14159265358979)*j4))+((x987*x990))+((j4*x991)))))), 6.28318530717959)));\nevalcond[1]=((0.7225)+(((-1.0)*(px*px)))+(((-1.0)*(py*py))));\nevalcond[2]=((((-1.0)*py*x989))+((py*x988))+((px*x989))+((px*x988)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x993=((0.831890330807703)*px);\nIkReal x994=((0.831890330807703)*py);\nIkReal x995=((0.707106781186548)*cj6*gconst17);\nIkReal x996=((0.707106781186548)*px*sj6);\nIkReal x997=((0.707106781186548)*cj6*gconst16);\nIkReal x998=((0.707106781186548)*py*sj6);\nCheckValue<IkReal> x999=IKPowWithIntegerCheck((((gconst16*x998))+(((-1.0)*gconst16*x996))+((gconst17*x996))+((gconst17*x998))),-1);\nif(!x999.valid){\ncontinue;\n}\nif( IKabs((((gconst16*x994))+(((-1.0)*gconst16*x993))+((gconst17*x994))+((gconst17*x993)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x999.value)*(((((-1.0)*px*x997))+(((-1.0)*px*x995))+((py*x995))+(((-1.0)*py*x997)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst16*x994))+(((-1.0)*gconst16*x993))+((gconst17*x994))+((gconst17*x993))))+IKsqr(((x999.value)*(((((-1.0)*px*x997))+(((-1.0)*px*x995))+((py*x995))+(((-1.0)*py*x997))))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2((((gconst16*x994))+(((-1.0)*gconst16*x993))+((gconst17*x994))+((gconst17*x993))), ((x999.value)*(((((-1.0)*px*x997))+(((-1.0)*px*x995))+((py*x995))+(((-1.0)*py*x997))))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[6];\nIkReal x1000=IKsin(j5);\nIkReal x1001=IKcos(j5);\nIkReal x1002=(gconst17*py);\nIkReal x1003=((0.707106781186548)*px);\nIkReal x1004=(gconst16*sj6);\nIkReal x1005=((0.0636396103067893)*sj6);\nIkReal x1006=(cj6*gconst16);\nIkReal x1007=((0.707106781186548)*py);\nIkReal x1008=(gconst17*px);\nIkReal x1009=(gconst17*sj6);\nIkReal x1010=((0.707106781186548)*sj6);\nIkReal x1011=((0.0636396103067893)*px);\nIkReal x1012=((0.0636396103067893)*gconst16*py);\nIkReal x1013=(cj6*x1001);\nIkReal x1014=((0.777817459305202)*x1000);\nIkReal x1015=(gconst16*x1000);\nevalcond[0]=((-0.85)*x1001);\nevalcond[1]=((((-0.707106781186548)*x1002))+(((0.85)*x1000))+(((-1.0)*gconst17*x1003))+((gconst16*x1003))+(((-1.0)*gconst16*x1007)));\nevalcond[2]=((-0.85)+((gconst17*x1000*x1003))+(((-1.0)*x1003*x1015))+((x1007*x1015))+(((0.707106781186548)*x1000*x1002)));\nevalcond[3]=(((cj6*gconst17*x1003))+(((-1.0)*x1001*x1003*x1004))+((x1001*x1004*x1007))+((x1001*x1003*x1009))+((x1001*x1002*x1010))+((x1006*x1007))+(((-0.707106781186548)*cj6*x1002))+((x1003*x1006)));\nevalcond[4]=((((-1.0)*gconst17*x1003*x1013))+(((-1.0)*x1001*x1006*x1007))+((x1001*x1003*x1006))+((x1004*x1007))+(((-0.707106781186548)*x1002*x1013))+(((-1.0)*x1002*x1010))+((x1003*x1004))+((x1003*x1009)));\nevalcond[5]=((-0.935)+(((0.0636396103067893)*py*x1001*x1006))+(((-1.0)*x1004*x1011))+(((-1.0)*gconst16*px*x1014))+(((0.0636396103067893)*x1002*x1013))+(((-1.0)*x1005*x1008))+((gconst16*py*x1014))+(((-1.0)*x1001*x1006*x1011))+((x1002*x1014))+((x1002*x1005))+((x1008*x1014))+(((-0.0636396103067893)*py*x1004))+(((0.0636396103067893)*x1008*x1013)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x1016=((0.707106781186548)*sj4);\nIkReal x1017=((0.707106781186548)*cj4);\nIkReal x1018=((((-1.0)*py*x1017))+((py*x1016))+((px*x1017))+((px*x1016)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));\nevalcond[1]=((0.7225)+(((-1.0)*(px*px)))+(((-1.0)*(py*py))));\nevalcond[2]=x1018;\nevalcond[3]=x1018;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5eval[1];\nIkReal x1019=((-1.0)*py);\npz=0;\nj7=0;\nsj7=0;\ncj7=1.0;\npp=((px*px)+(py*py));\nnpx=(((px*r00))+((py*r10)));\nnpy=(((px*r01))+((py*r11)));\nnpz=(((px*r02))+((py*r12)));\nrxp0_0=(r20*x1019);\nrxp0_1=(px*r20);\nrxp1_0=(r21*x1019);\nrxp1_1=(px*r21);\nrxp2_0=(r22*x1019);\nrxp2_1=(px*r22);\nsj6=0;\ncj6=1.0;\nj6=0;\nj5eval[0]=(((cj4*py))+((cj4*px))+(((-1.0)*px*sj4))+((py*sj4)));\nif( IKabs(j5eval[0]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[5];\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((IKabs(px))+(IKabs(py)));\nevalcond[1]=0.7225;\nevalcond[2]=0;\nevalcond[3]=-0.85;\nevalcond[4]=-0.935;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5eval[1];\npz=0;\nj7=0;\nsj7=0;\ncj7=1.0;\npp=0;\nnpx=0;\nnpy=0;\nnpz=0;\nrxp0_0=0;\nrxp0_1=0;\nrxp1_0=0;\nrxp1_1=0;\nrxp2_0=0;\nrxp2_1=0;\nsj6=0;\ncj6=1.0;\nj6=0;\npx=0;\npy=0;\nrxp0_2=0;\nrxp1_2=0;\nrxp2_2=0;\nj5eval[0]=1.0;\nif( IKabs(j5eval[0]) < 0.0000000100000000  )\n{\ncontinue; // 3 cases reached\n\n} else\n{\nIkReal op[2+1], zeror[2];\nint numroots;\nop[0]=1.0;\nop[1]=0;\nop[2]=-1.0;\npolyroots2(op,zeror,numroots);\nIkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];\nint numsolutions = 0;\nfor(int ij5 = 0; ij5 < numroots; ++ij5)\n{\nIkReal htj5 = zeror[ij5];\ntempj5array[0]=((2.0)*(atan(htj5)));\nfor(int kj5 = 0; kj5 < 1; ++kj5)\n{\nj5array[numsolutions] = tempj5array[kj5];\nif( j5array[numsolutions] > IKPI )\n{\n    j5array[numsolutions]-=IK2PI;\n}\nelse if( j5array[numsolutions] < -IKPI )\n{\n    j5array[numsolutions]+=IK2PI;\n}\nsj5array[numsolutions] = IKsin(j5array[numsolutions]);\ncj5array[numsolutions] = IKcos(j5array[numsolutions]);\nnumsolutions++;\n}\n}\nbool j5valid[2]={true,true};\n_nj5 = 2;\nfor(int ij5 = 0; ij5 < numsolutions; ++ij5)\n    {\nif( !j5valid[ij5] )\n{\n    continue;\n}\n    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\nhtj5 = IKtan(j5/2);\n\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nrotationfunction0(solutions);\n    }\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j5]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x1020=py*py;\nIkReal x1021=px*px;\nIkReal x1022=((216.374675043084)*px);\nIkReal x1023=(px*py);\nIkReal x1024=((216.374675043084)*py);\nIkReal x1025=((0.831890330807703)*py);\nIkReal x1026=((0.831890330807703)*px);\nIkReal x1027=((4400.0)*cj4*sj4);\nCheckValue<IkReal> x1028=IKPowWithIntegerCheck(((((-1.0)*sj4*x1022))+((sj4*x1024))+((cj4*x1022))+((cj4*x1024))),-1);\nif(!x1028.valid){\ncontinue;\n}\nif( IKabs(((((-1.0)*sj4*x1026))+((sj4*x1025))+((cj4*x1026))+((cj4*x1025)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1028.value)*(((3179.0)+(((-8800.0)*x1023*(cj4*cj4)))+(((-2200.0)*x1021))+(((-2200.0)*x1020))+(((-1.0)*x1020*x1027))+((x1021*x1027))+(((4400.0)*x1023)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x1026))+((sj4*x1025))+((cj4*x1026))+((cj4*x1025))))+IKsqr(((x1028.value)*(((3179.0)+(((-8800.0)*x1023*(cj4*cj4)))+(((-2200.0)*x1021))+(((-2200.0)*x1020))+(((-1.0)*x1020*x1027))+((x1021*x1027))+(((4400.0)*x1023))))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((((-1.0)*sj4*x1026))+((sj4*x1025))+((cj4*x1026))+((cj4*x1025))), ((x1028.value)*(((3179.0)+(((-8800.0)*x1023*(cj4*cj4)))+(((-2200.0)*x1021))+(((-2200.0)*x1020))+(((-1.0)*x1020*x1027))+((x1021*x1027))+(((4400.0)*x1023))))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[5];\nIkReal x1029=IKcos(j5);\nIkReal x1030=IKsin(j5);\nIkReal x1031=(cj4*py);\nIkReal x1032=(px*sj4);\nIkReal x1033=(py*sj4);\nIkReal x1034=(cj4*px);\nIkReal x1035=((0.0636396103067893)*x1029);\nIkReal x1036=((0.707106781186548)*x1030);\nIkReal x1037=((0.777817459305202)*x1030);\nIkReal x1038=((0.707106781186548)*x1029);\nevalcond[0]=((-0.85)*x1029);\nevalcond[1]=((((0.85)*x1030))+(((-0.707106781186548)*x1034))+(((-0.707106781186548)*x1033))+(((-0.707106781186548)*x1031))+(((0.707106781186548)*x1032)));\nevalcond[2]=((((-1.0)*x1033*x1038))+(((-1.0)*x1034*x1038))+(((-1.0)*x1031*x1038))+((x1032*x1038)));\nevalcond[3]=((-0.85)+((x1031*x1036))+(((-1.0)*x1032*x1036))+((x1034*x1036))+((x1033*x1036)));\nevalcond[4]=((-0.935)+((x1031*x1037))+((x1031*x1035))+(((-1.0)*x1032*x1037))+(((-1.0)*x1032*x1035))+((x1034*x1037))+((x1034*x1035))+((x1033*x1035))+((x1033*x1037)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x1039=((0.707106781186548)*sj4);\nIkReal x1040=((0.707106781186548)*cj4);\nIkReal x1041=(py*x1040);\nIkReal x1042=(((px*x1039))+((px*x1040))+((py*x1039)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));\nevalcond[1]=((0.7225)+(((-1.0)*(px*px)))+(((-1.0)*(py*py))));\nevalcond[2]=(x1042+(((-1.0)*x1041)));\nevalcond[3]=(x1041+(((-1.0)*x1042)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5eval[1];\nIkReal x1043=((-1.0)*py);\npz=0;\nj7=0;\nsj7=0;\ncj7=1.0;\npp=((px*px)+(py*py));\nnpx=(((px*r00))+((py*r10)));\nnpy=(((px*r01))+((py*r11)));\nnpz=(((px*r02))+((py*r12)));\nrxp0_0=(r20*x1043);\nrxp0_1=(px*r20);\nrxp1_0=(r21*x1043);\nrxp1_1=(px*r21);\nrxp2_0=(r22*x1043);\nrxp2_1=(px*r22);\nsj6=0;\ncj6=-1.0;\nj6=3.14159265358979;\nIkReal x1044=((1.0)*cj4);\nj5eval[0]=((((-1.0)*px*x1044))+(((-1.0)*py*x1044))+(((-1.0)*py*sj4))+((px*sj4)));\nif( IKabs(j5eval[0]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[5];\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((IKabs(px))+(IKabs(py)));\nevalcond[1]=0.7225;\nevalcond[2]=0;\nevalcond[3]=-0.85;\nevalcond[4]=-0.935;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5eval[1];\npz=0;\nj7=0;\nsj7=0;\ncj7=1.0;\npp=0;\nnpx=0;\nnpy=0;\nnpz=0;\nrxp0_0=0;\nrxp0_1=0;\nrxp1_0=0;\nrxp1_1=0;\nrxp2_0=0;\nrxp2_1=0;\nsj6=0;\ncj6=-1.0;\nj6=3.14159265358979;\npx=0;\npy=0;\nrxp0_2=0;\nrxp1_2=0;\nrxp2_2=0;\nj5eval[0]=1.0;\nif( IKabs(j5eval[0]) < 0.0000000100000000  )\n{\ncontinue; // 3 cases reached\n\n} else\n{\nIkReal op[2+1], zeror[2];\nint numroots;\nop[0]=1.0;\nop[1]=0;\nop[2]=-1.0;\npolyroots2(op,zeror,numroots);\nIkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];\nint numsolutions = 0;\nfor(int ij5 = 0; ij5 < numroots; ++ij5)\n{\nIkReal htj5 = zeror[ij5];\ntempj5array[0]=((2.0)*(atan(htj5)));\nfor(int kj5 = 0; kj5 < 1; ++kj5)\n{\nj5array[numsolutions] = tempj5array[kj5];\nif( j5array[numsolutions] > IKPI )\n{\n    j5array[numsolutions]-=IK2PI;\n}\nelse if( j5array[numsolutions] < -IKPI )\n{\n    j5array[numsolutions]+=IK2PI;\n}\nsj5array[numsolutions] = IKsin(j5array[numsolutions]);\ncj5array[numsolutions] = IKcos(j5array[numsolutions]);\nnumsolutions++;\n}\n}\nbool j5valid[2]={true,true};\n_nj5 = 2;\nfor(int ij5 = 0; ij5 < numsolutions; ++ij5)\n    {\nif( !j5valid[ij5] )\n{\n    continue;\n}\n    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\nhtj5 = IKtan(j5/2);\n\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nrotationfunction0(solutions);\n    }\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j5]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x1045=py*py;\nIkReal x1046=px*px;\nIkReal x1047=((216.374675043084)*px);\nIkReal x1048=((216.374675043084)*py);\nIkReal x1049=(px*py);\nIkReal x1050=((0.831890330807703)*py);\nIkReal x1051=((0.831890330807703)*px);\nIkReal x1052=((4400.0)*cj4*sj4);\nCheckValue<IkReal> x1053=IKPowWithIntegerCheck(((((-1.0)*cj4*x1048))+(((-1.0)*cj4*x1047))+(((-1.0)*sj4*x1048))+((sj4*x1047))),-1);\nif(!x1053.valid){\ncontinue;\n}\nif( IKabs(((((-1.0)*sj4*x1051))+((sj4*x1050))+((cj4*x1051))+((cj4*x1050)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1053.value)*(((3179.0)+(((-2200.0)*x1046))+(((-2200.0)*x1045))+(((-8800.0)*x1049*(cj4*cj4)))+(((-1.0)*x1045*x1052))+(((4400.0)*x1049))+((x1046*x1052)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x1051))+((sj4*x1050))+((cj4*x1051))+((cj4*x1050))))+IKsqr(((x1053.value)*(((3179.0)+(((-2200.0)*x1046))+(((-2200.0)*x1045))+(((-8800.0)*x1049*(cj4*cj4)))+(((-1.0)*x1045*x1052))+(((4400.0)*x1049))+((x1046*x1052))))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((((-1.0)*sj4*x1051))+((sj4*x1050))+((cj4*x1051))+((cj4*x1050))), ((x1053.value)*(((3179.0)+(((-2200.0)*x1046))+(((-2200.0)*x1045))+(((-8800.0)*x1049*(cj4*cj4)))+(((-1.0)*x1045*x1052))+(((4400.0)*x1049))+((x1046*x1052))))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[5];\nIkReal x1054=IKcos(j5);\nIkReal x1055=IKsin(j5);\nIkReal x1056=(cj4*py);\nIkReal x1057=(px*sj4);\nIkReal x1058=(py*sj4);\nIkReal x1059=(cj4*px);\nIkReal x1060=((0.0636396103067893)*x1054);\nIkReal x1061=((0.707106781186548)*x1055);\nIkReal x1062=((0.777817459305202)*x1055);\nIkReal x1063=((0.707106781186548)*x1054);\nevalcond[0]=((-0.85)*x1054);\nevalcond[1]=((((-0.707106781186548)*x1056))+(((-0.707106781186548)*x1058))+(((-0.707106781186548)*x1059))+(((0.85)*x1055))+(((0.707106781186548)*x1057)));\nevalcond[2]=(((x1056*x1063))+(((-1.0)*x1057*x1063))+((x1059*x1063))+((x1058*x1063)));\nevalcond[3]=((-0.85)+((x1056*x1061))+(((-1.0)*x1057*x1061))+((x1059*x1061))+((x1058*x1061)));\nevalcond[4]=((-0.935)+((x1056*x1062))+(((-1.0)*x1059*x1060))+(((-1.0)*x1058*x1060))+((x1057*x1060))+(((-1.0)*x1057*x1062))+(((-1.0)*x1056*x1060))+((x1059*x1062))+((x1058*x1062)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x1064=((0.707106781186548)*sj4);\nIkReal x1065=((0.707106781186548)*cj4);\nIkReal x1066=(((py*x1064))+(((-1.0)*py*x1065))+((px*x1064))+((px*x1065)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));\nevalcond[1]=((0.7225)+(((-1.0)*(px*px)))+(((-1.0)*(py*py))));\nevalcond[2]=x1066;\nevalcond[3]=x1066;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[2], cj5array[2], sj5array[2];\nbool j5valid[2]={false};\n_nj5 = 2;\nIkReal x1067=((0.831890330807703)*py);\nIkReal x1068=((0.831890330807703)*px);\nsj5array[0]=((((-1.0)*sj4*x1068))+((cj4*x1067))+((cj4*x1068))+((sj4*x1067)));\nif( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j5valid[0] = j5valid[1] = true;\n    j5array[0] = IKasin(sj5array[0]);\n    cj5array[0] = IKcos(j5array[0]);\n    sj5array[1] = sj5array[0];\n    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);\n    cj5array[1] = -cj5array[0];\n}\nelse if( isnan(sj5array[0]) )\n{\n    // probably any value will work\n    j5valid[0] = true;\n    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;\n}\nfor(int ij5 = 0; ij5 < 2; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 2; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[4];\nIkReal x1069=IKcos(j5);\nIkReal x1070=IKsin(j5);\nIkReal x1071=(cj4*px);\nIkReal x1072=(cj4*py);\nIkReal x1073=(px*sj4);\nIkReal x1074=(py*sj4);\nIkReal x1075=((0.777817459305202)*x1070);\nIkReal x1076=((0.707106781186548)*x1070);\nIkReal x1077=((0.707106781186548)*x1069);\nevalcond[0]=((-0.85)*x1069);\nevalcond[1]=(((x1074*x1077))+(((-1.0)*x1073*x1077))+((x1071*x1077))+((x1072*x1077)));\nevalcond[2]=((-0.85)+((x1074*x1076))+(((-1.0)*x1073*x1076))+((x1071*x1076))+((x1072*x1076)));\nevalcond[3]=((-0.935)+((x1074*x1075))+(((-0.0636396103067893)*x1071))+(((-0.0636396103067893)*x1073))+(((-0.0636396103067893)*x1074))+(((-1.0)*x1073*x1075))+((x1071*x1075))+(((0.0636396103067893)*x1072))+((x1072*x1075)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x1078=((0.707106781186548)*sj4);\nIkReal x1079=((0.707106781186548)*cj4);\nIkReal x1080=(py*x1079);\nIkReal x1081=(((px*x1079))+((px*x1078))+((py*x1078)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));\nevalcond[1]=((0.7225)+(((-1.0)*(px*px)))+(((-1.0)*(py*py))));\nevalcond[2]=(x1081+(((-1.0)*x1080)));\nevalcond[3]=(x1080+(((-1.0)*x1081)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[2], cj5array[2], sj5array[2];\nbool j5valid[2]={false};\n_nj5 = 2;\nIkReal x1082=((0.831890330807703)*py);\nIkReal x1083=((0.831890330807703)*px);\nsj5array[0]=(((cj4*x1082))+((cj4*x1083))+(((-1.0)*sj4*x1083))+((sj4*x1082)));\nif( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j5valid[0] = j5valid[1] = true;\n    j5array[0] = IKasin(sj5array[0]);\n    cj5array[0] = IKcos(j5array[0]);\n    sj5array[1] = sj5array[0];\n    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);\n    cj5array[1] = -cj5array[0];\n}\nelse if( isnan(sj5array[0]) )\n{\n    // probably any value will work\n    j5valid[0] = true;\n    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;\n}\nfor(int ij5 = 0; ij5 < 2; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 2; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[4];\nIkReal x1084=IKcos(j5);\nIkReal x1085=IKsin(j5);\nIkReal x1086=(cj4*px);\nIkReal x1087=(cj4*py);\nIkReal x1088=(px*sj4);\nIkReal x1089=(py*sj4);\nIkReal x1090=((0.777817459305202)*x1085);\nIkReal x1091=((0.707106781186548)*x1085);\nIkReal x1092=((0.707106781186548)*x1084);\nevalcond[0]=((-0.85)*x1084);\nevalcond[1]=((((-1.0)*x1086*x1092))+(((-1.0)*x1089*x1092))+((x1088*x1092))+(((-1.0)*x1087*x1092)));\nevalcond[2]=((-0.85)+((x1087*x1091))+(((-1.0)*x1088*x1091))+((x1089*x1091))+((x1086*x1091)));\nevalcond[3]=((-0.935)+((x1087*x1090))+(((-1.0)*x1088*x1090))+((x1089*x1090))+((x1086*x1090))+(((0.0636396103067893)*x1088))+(((0.0636396103067893)*x1089))+(((0.0636396103067893)*x1086))+(((-0.0636396103067893)*x1087)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((IKabs(px))+(IKabs(py)));\nevalcond[1]=0.7225;\nevalcond[2]=0;\nevalcond[3]=-0.85;\nevalcond[4]=-0.935;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5eval[1];\npz=0;\nj7=0;\nsj7=0;\ncj7=1.0;\npp=0;\nnpx=0;\nnpy=0;\nnpz=0;\nrxp0_0=0;\nrxp0_1=0;\nrxp1_0=0;\nrxp1_1=0;\nrxp2_0=0;\nrxp2_1=0;\npx=0;\npy=0;\nrxp0_2=0;\nrxp1_2=0;\nrxp2_2=0;\nj5eval[0]=1.0;\nif( IKabs(j5eval[0]) < 0.0000000100000000  )\n{\ncontinue; // no branches [j5]\n\n} else\n{\nIkReal op[2+1], zeror[2];\nint numroots;\nop[0]=1.0;\nop[1]=0;\nop[2]=-1.0;\npolyroots2(op,zeror,numroots);\nIkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];\nint numsolutions = 0;\nfor(int ij5 = 0; ij5 < numroots; ++ij5)\n{\nIkReal htj5 = zeror[ij5];\ntempj5array[0]=((2.0)*(atan(htj5)));\nfor(int kj5 = 0; kj5 < 1; ++kj5)\n{\nj5array[numsolutions] = tempj5array[kj5];\nif( j5array[numsolutions] > IKPI )\n{\n    j5array[numsolutions]-=IK2PI;\n}\nelse if( j5array[numsolutions] < -IKPI )\n{\n    j5array[numsolutions]+=IK2PI;\n}\nsj5array[numsolutions] = IKsin(j5array[numsolutions]);\ncj5array[numsolutions] = IKcos(j5array[numsolutions]);\nnumsolutions++;\n}\n}\nbool j5valid[2]={true,true};\n_nj5 = 2;\nfor(int ij5 = 0; ij5 < numsolutions; ++ij5)\n    {\nif( !j5valid[ij5] )\n{\n    continue;\n}\n    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\nhtj5 = IKtan(j5/2);\n\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nrotationfunction0(solutions);\n    }\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j5]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n}\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x1093=(py*sj4);\nIkReal x1094=((0.707106781186548)*cj6);\nIkReal x1095=(cj4*py);\nIkReal x1096=(cj4*px);\nIkReal x1097=(px*sj4);\nIkReal x1098=((0.707106781186548)*sj6);\nIkReal x1099=(sj4*x1098);\nCheckValue<IkReal> x1100=IKPowWithIntegerCheck(((((-14.142135623731)*x1097))+(((14.142135623731)*x1096))+(((14.142135623731)*x1095))+(((14.142135623731)*x1093))),-1);\nif(!x1100.valid){\ncontinue;\n}\nCheckValue<IkReal> x1101=IKPowWithIntegerCheck(((((-1.0)*x1097*x1098))+((x1095*x1098))+((x1093*x1098))+((x1096*x1098))),-1);\nif(!x1101.valid){\ncontinue;\n}\nif( IKabs(((17.0)*(x1100.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1101.value)*((((x1094*x1095))+(((-1.0)*x1094*x1096))+(((-1.0)*x1094*x1097))+(((-1.0)*x1093*x1094)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x1100.value)))+IKsqr(((x1101.value)*((((x1094*x1095))+(((-1.0)*x1094*x1096))+(((-1.0)*x1094*x1097))+(((-1.0)*x1093*x1094))))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((17.0)*(x1100.value)), ((x1101.value)*((((x1094*x1095))+(((-1.0)*x1094*x1096))+(((-1.0)*x1094*x1097))+(((-1.0)*x1093*x1094))))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[6];\nIkReal x1102=IKsin(j5);\nIkReal x1103=IKcos(j5);\nIkReal x1104=(cj4*px);\nIkReal x1105=(px*sj4);\nIkReal x1106=((0.707106781186548)*sj6);\nIkReal x1107=((0.0636396103067893)*sj6);\nIkReal x1108=(cj4*py);\nIkReal x1109=(py*sj4);\nIkReal x1110=((0.707106781186548)*x1108);\nIkReal x1111=(cj6*x1105);\nIkReal x1112=((0.0636396103067893)*x1103);\nIkReal x1113=(sj6*x1103);\nIkReal x1114=((0.707106781186548)*x1103);\nIkReal x1115=((0.777817459305202)*x1102);\nIkReal x1116=((0.707106781186548)*x1102);\nIkReal x1117=(x1102*x1108);\nIkReal x1118=((0.707106781186548)*cj6*x1109);\nIkReal x1119=(x1102*x1109);\nevalcond[0]=((-0.85)*x1103);\nevalcond[1]=((((0.85)*x1102))+(((-1.0)*x1110))+(((0.707106781186548)*x1105))+(((-0.707106781186548)*x1104))+(((-0.707106781186548)*x1109)));\nevalcond[2]=((-0.85)+((x1109*x1116))+((x1102*x1110))+((x1104*x1116))+(((-1.0)*x1105*x1116)));\nevalcond[3]=(((x1103*x1106*x1109))+((x1103*x1106*x1108))+x1118+(((0.707106781186548)*cj6*x1104))+(((-1.0)*x1103*x1105*x1106))+(((-1.0)*cj6*x1110))+((x1103*x1104*x1106))+(((0.707106781186548)*x1111)));\nevalcond[4]=(((x1111*x1114))+(((-1.0)*cj6*x1103*x1110))+((x1105*x1106))+((x1104*x1106))+(((-1.0)*cj6*x1109*x1114))+(((-1.0)*x1106*x1108))+(((-1.0)*cj6*x1104*x1114))+((x1106*x1109)));\nevalcond[5]=((-0.935)+((x1109*x1115))+((x1108*x1115))+((cj6*x1109*x1112))+((cj6*x1108*x1112))+((x1104*x1115))+(((-1.0)*x1107*x1109))+(((-1.0)*x1104*x1107))+((x1107*x1108))+(((-1.0)*x1111*x1112))+((cj6*x1104*x1112))+(((-1.0)*x1105*x1115))+(((-1.0)*x1105*x1107)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x1120=((0.707106781186548)*py);\nIkReal x1121=(cj6*sj4);\nIkReal x1122=(cj4*sj6);\nIkReal x1123=(cj4*cj6);\nIkReal x1124=((0.707106781186548)*px);\nIkReal x1125=((0.831890330807703)*py);\nIkReal x1126=((0.831890330807703)*px);\nIkReal x1127=((0.707106781186548)*sj4*sj6);\nCheckValue<IkReal> x1128=IKPowWithIntegerCheck((((x1121*x1124))+(((-1.0)*x1123*x1124))+(((-1.0)*x1120*x1121))+(((-1.0)*x1120*x1123))),-1);\nif(!x1128.valid){\ncontinue;\n}\nif( IKabs((((sj4*x1125))+((cj4*x1126))+((cj4*x1125))+(((-1.0)*sj4*x1126)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1128.value)*((((x1120*x1122))+(((-1.0)*x1122*x1124))+(((-1.0)*sj4*sj6*x1120))+(((-1.0)*sj4*sj6*x1124)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x1125))+((cj4*x1126))+((cj4*x1125))+(((-1.0)*sj4*x1126))))+IKsqr(((x1128.value)*((((x1120*x1122))+(((-1.0)*x1122*x1124))+(((-1.0)*sj4*sj6*x1120))+(((-1.0)*sj4*sj6*x1124))))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2((((sj4*x1125))+((cj4*x1126))+((cj4*x1125))+(((-1.0)*sj4*x1126))), ((x1128.value)*((((x1120*x1122))+(((-1.0)*x1122*x1124))+(((-1.0)*sj4*sj6*x1120))+(((-1.0)*sj4*sj6*x1124))))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[6];\nIkReal x1129=IKsin(j5);\nIkReal x1130=IKcos(j5);\nIkReal x1131=(cj4*px);\nIkReal x1132=(px*sj4);\nIkReal x1133=((0.707106781186548)*sj6);\nIkReal x1134=((0.0636396103067893)*sj6);\nIkReal x1135=(cj4*py);\nIkReal x1136=(py*sj4);\nIkReal x1137=((0.707106781186548)*x1135);\nIkReal x1138=(cj6*x1132);\nIkReal x1139=((0.0636396103067893)*x1130);\nIkReal x1140=(sj6*x1130);\nIkReal x1141=((0.707106781186548)*x1130);\nIkReal x1142=((0.777817459305202)*x1129);\nIkReal x1143=((0.707106781186548)*x1129);\nIkReal x1144=(x1129*x1135);\nIkReal x1145=((0.707106781186548)*cj6*x1136);\nIkReal x1146=(x1129*x1136);\nevalcond[0]=((-0.85)*x1130);\nevalcond[1]=((((0.707106781186548)*x1132))+(((-0.707106781186548)*x1131))+(((-0.707106781186548)*x1136))+(((-1.0)*x1137))+(((0.85)*x1129)));\nevalcond[2]=((-0.85)+((x1129*x1137))+(((-1.0)*x1132*x1143))+((x1131*x1143))+((x1136*x1143)));\nevalcond[3]=(x1145+(((-1.0)*x1130*x1132*x1133))+(((0.707106781186548)*cj6*x1131))+((x1130*x1131*x1133))+(((0.707106781186548)*x1138))+(((-1.0)*cj6*x1137))+((x1130*x1133*x1136))+((x1130*x1133*x1135)));\nevalcond[4]=(((x1131*x1133))+(((-1.0)*cj6*x1136*x1141))+(((-1.0)*cj6*x1130*x1137))+((x1133*x1136))+(((-1.0)*cj6*x1131*x1141))+((x1138*x1141))+(((-1.0)*x1133*x1135))+((x1132*x1133)));\nevalcond[5]=((-0.935)+(((-1.0)*x1131*x1134))+(((-1.0)*x1132*x1142))+((cj6*x1136*x1139))+((x1134*x1135))+((x1131*x1142))+(((-1.0)*x1134*x1136))+(((-1.0)*x1138*x1139))+(((-1.0)*x1132*x1134))+((cj6*x1135*x1139))+((cj6*x1131*x1139))+((x1135*x1142))+((x1136*x1142)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x1147=((0.707106781186548)*py);\nIkReal x1148=(cj6*sj4);\nIkReal x1149=(cj4*sj6);\nIkReal x1150=(cj4*cj6);\nIkReal x1151=((0.707106781186548)*px);\nIkReal x1152=((0.831890330807703)*py);\nIkReal x1153=((0.831890330807703)*px);\nIkReal x1154=((0.707106781186548)*sj4*sj6);\nCheckValue<IkReal> x1155=IKPowWithIntegerCheck(((((-1.0)*sj4*sj6*x1151))+((x1149*x1151))+((sj4*sj6*x1147))+((x1147*x1149))),-1);\nif(!x1155.valid){\ncontinue;\n}\nif( IKabs(((((-1.0)*sj4*x1153))+((cj4*x1153))+((cj4*x1152))+((sj4*x1152)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1155.value)*((((x1147*x1150))+(((-1.0)*x1147*x1148))+(((-1.0)*x1148*x1151))+(((-1.0)*x1150*x1151)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x1153))+((cj4*x1153))+((cj4*x1152))+((sj4*x1152))))+IKsqr(((x1155.value)*((((x1147*x1150))+(((-1.0)*x1147*x1148))+(((-1.0)*x1148*x1151))+(((-1.0)*x1150*x1151))))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((((-1.0)*sj4*x1153))+((cj4*x1153))+((cj4*x1152))+((sj4*x1152))), ((x1155.value)*((((x1147*x1150))+(((-1.0)*x1147*x1148))+(((-1.0)*x1148*x1151))+(((-1.0)*x1150*x1151))))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[6];\nIkReal x1156=IKsin(j5);\nIkReal x1157=IKcos(j5);\nIkReal x1158=(cj4*px);\nIkReal x1159=(px*sj4);\nIkReal x1160=((0.707106781186548)*sj6);\nIkReal x1161=((0.0636396103067893)*sj6);\nIkReal x1162=(cj4*py);\nIkReal x1163=(py*sj4);\nIkReal x1164=((0.707106781186548)*x1162);\nIkReal x1165=(cj6*x1159);\nIkReal x1166=((0.0636396103067893)*x1157);\nIkReal x1167=(sj6*x1157);\nIkReal x1168=((0.707106781186548)*x1157);\nIkReal x1169=((0.777817459305202)*x1156);\nIkReal x1170=((0.707106781186548)*x1156);\nIkReal x1171=(x1156*x1162);\nIkReal x1172=((0.707106781186548)*cj6*x1163);\nIkReal x1173=(x1156*x1163);\nevalcond[0]=((-0.85)*x1157);\nevalcond[1]=((((0.85)*x1156))+(((-0.707106781186548)*x1163))+(((-0.707106781186548)*x1158))+(((-1.0)*x1164))+(((0.707106781186548)*x1159)));\nevalcond[2]=((-0.85)+(((-1.0)*x1159*x1170))+((x1163*x1170))+((x1156*x1164))+((x1158*x1170)));\nevalcond[3]=((((-1.0)*x1157*x1159*x1160))+x1172+((x1157*x1158*x1160))+(((0.707106781186548)*x1165))+(((-1.0)*cj6*x1164))+(((0.707106781186548)*cj6*x1158))+((x1157*x1160*x1163))+((x1157*x1160*x1162)));\nevalcond[4]=(((x1159*x1160))+((x1165*x1168))+(((-1.0)*cj6*x1157*x1164))+(((-1.0)*cj6*x1158*x1168))+(((-1.0)*cj6*x1163*x1168))+((x1158*x1160))+(((-1.0)*x1160*x1162))+((x1160*x1163)));\nevalcond[5]=((-0.935)+(((-1.0)*x1159*x1169))+(((-1.0)*x1159*x1161))+((x1163*x1169))+(((-1.0)*x1158*x1161))+((x1162*x1169))+((cj6*x1163*x1166))+((cj6*x1158*x1166))+((cj6*x1162*x1166))+((x1158*x1169))+(((-1.0)*x1161*x1163))+(((-1.0)*x1165*x1166))+((x1161*x1162)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j5]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x1174=cj6*cj6;\nIkReal x1175=cj7*cj7;\nIkReal x1176=((0.045)*pz);\nIkReal x1177=((0.3)*pz);\nIkReal x1178=((0.0318198051533946)*py);\nIkReal x1179=(sj4*sj7);\nIkReal x1180=(cj4*cj6);\nIkReal x1181=((0.027)*sj7);\nIkReal x1182=(py*sj4);\nIkReal x1183=((0.212132034355964)*cj7);\nIkReal x1184=(cj6*sj4);\nIkReal x1185=((0.0318198051533946)*px);\nIkReal x1186=((0.212132034355964)*sj7);\nIkReal x1187=(cj4*py);\nIkReal x1188=(cj4*sj7);\nIkReal x1189=(px*sj4);\nIkReal x1190=((0.212132034355964)*cj6);\nIkReal x1191=(cj4*px);\nIkReal x1192=((0.087975)*x1175);\nIkReal x1193=(cj7*x1174);\nCheckValue<IkReal> x1194=IKPowWithIntegerCheck(IKsign(((-0.304525)+(((0.00405)*x1193))+(((-0.0495)*sj7))+((x1174*x1192))+(((-0.092025)*x1174))+(((-1.0)*x1192))+((x1181*x1193))+(((-1.0)*cj7*x1181))+(((-1.0)*x1174*x1181))+(((-0.33)*cj7)))),-1);\nif(!x1194.valid){\ncontinue;\n}\nCheckValue<IkReal> x1195 = IKatan2WithCheck(IkReal(((((-0.388908729652601)*x1191))+(((0.388908729652601)*x1189))+((x1183*x1189))+((cj6*sj7*x1177))+((x1179*x1185))+(((-1.0)*x1178*x1188))+(((-1.0)*x1178*x1179))+(((-1.0)*cj6*cj7*x1176))+((cj6*x1176))+(((-1.0)*x1185*x1188))+(((-1.0)*x1183*x1191))+(((-1.0)*x1183*x1187))+(((-1.0)*x1182*x1183))+(((-0.388908729652601)*x1187))+(((-0.388908729652601)*x1182)))),((((-0.55)*pz))+((px*x1179*x1190))+((x1184*x1185))+(((-1.0)*py*x1179*x1190))+((cj7*x1178*x1180))+((cj7*x1178*x1184))+(((-1.0)*cj7*x1177))+(((-1.0)*cj7*x1184*x1185))+(((-1.0)*x1178*x1180))+(((-1.0)*x1178*x1184))+(((-1.0)*x1180*x1185))+(((-1.0)*px*x1180*x1186))+(((-1.0)*py*x1180*x1186))+(((-1.0)*sj7*x1176))+((cj7*x1180*x1185))),IKFAST_ATAN2_MAGTHRESH);\nif(!x1195.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1194.value)))+(x1195.value));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[6];\nIkReal x1196=IKsin(j5);\nIkReal x1197=IKcos(j5);\nIkReal x1198=((0.045)*cj7);\nIkReal x1199=((0.707106781186548)*cj4);\nIkReal x1200=(cj6*py);\nIkReal x1201=(py*sj6);\nIkReal x1202=(cj6*sj4);\nIkReal x1203=((0.707106781186548)*px);\nIkReal x1204=(sj4*sj6);\nIkReal x1205=((0.3)*cj7);\nIkReal x1206=((0.3)*sj7);\nIkReal x1207=((0.045)*sj7);\nIkReal x1208=((0.0636396103067893)*px);\nIkReal x1209=((0.707106781186548)*sj4);\nIkReal x1210=((0.0636396103067893)*cj4);\nIkReal x1211=(cj6*x1196);\nIkReal x1212=(px*x1197);\nIkReal x1213=(cj6*x1197);\nIkReal x1214=(sj4*x1197);\nIkReal x1215=(pz*x1197);\nIkReal x1216=(cj4*py*x1196);\nIkReal x1217=(x1200*x1209);\nIkReal x1218=(py*sj4*x1196);\nIkReal x1219=((0.777817459305202)*px*x1196);\nevalcond[0]=((((-1.0)*x1198*x1211))+(((0.045)*x1211))+((x1206*x1211))+pz+(((-0.55)*x1197))+(((-1.0)*x1197*x1207))+(((-1.0)*x1197*x1205)));\nevalcond[1]=((-0.55)+x1215+((py*x1196*x1199))+((py*x1196*x1209))+(((-1.0)*x1207))+(((-1.0)*x1205))+(((-1.0)*sj4*x1196*x1203))+((px*x1196*x1199)));\nevalcond[2]=(((sj4*x1203))+(((-1.0)*py*x1199))+(((-1.0)*x1198*x1213))+(((0.045)*x1213))+((x1206*x1213))+(((-1.0)*px*x1199))+(((0.55)*x1196))+(((-1.0)*py*x1209))+((x1196*x1205))+((x1196*x1207)));\nevalcond[3]=((((-1.0)*x1199*x1200))+x1217+(((-1.0)*x1197*x1203*x1204))+((x1197*x1201*x1209))+((sj6*x1199*x1212))+((x1202*x1203))+((x1197*x1199*x1201))+(((-1.0)*pz*sj6*x1196))+((cj6*px*x1199)));\nevalcond[4]=((0.045)+((px*sj6*x1199))+(((-1.0)*x1199*x1201))+x1206+(((-1.0)*x1197*x1217))+(((-1.0)*x1198))+((x1203*x1204))+((x1197*x1202*x1203))+((x1201*x1209))+((pz*x1211))+(((-1.0)*x1197*x1199*x1200))+(((-1.0)*cj6*x1199*x1212)));\nevalcond[5]=((-0.2125)+(((-1.0)*x1204*x1208))+(((0.777817459305202)*x1216))+(((0.777817459305202)*x1218))+(((-1.0)*x1197*x1202*x1208))+((cj4*x1219))+(((-1.0)*pp))+((x1201*x1210))+(((-1.0)*cj4*sj6*x1208))+((cj4*x1208*x1213))+(((-1.0)*sj4*x1219))+((x1197*x1200*x1210))+(((-0.09)*pz*x1211))+(((0.0636396103067893)*x1200*x1214))+(((1.1)*x1215))+(((-0.0636396103067893)*sj4*x1201)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x1220=py*py;\nIkReal x1221=cj7*cj7;\nIkReal x1222=px*px;\nIkReal x1223=(cj6*sj7);\nIkReal x1224=(cj4*py);\nIkReal x1225=(cj6*cj7);\nIkReal x1226=(px*sj4);\nIkReal x1227=((0.707106781186548)*pz);\nIkReal x1228=(cj4*px);\nIkReal x1229=(px*py);\nIkReal x1230=(py*sj4);\nIkReal x1231=((0.0318198051533946)*cj6);\nIkReal x1232=(cj4*sj4);\nCheckValue<IkReal> x1233 = IKatan2WithCheck(IkReal(((((-1.0)*x1224*x1227))+(((0.087975)*cj7*x1223))+(((-1.0)*x1227*x1228))+(((-1.0)*x1227*x1230))+(((-0.01125)*x1225))+(((-0.027)*cj6*x1221))+((x1226*x1227))+(((0.167025)*x1223))+(((0.03825)*cj6)))),((-0.304525)+(((-0.027)*cj7*sj7))+(((-1.0)*x1229))+(((-0.0495)*sj7))+(((0.5)*x1220))+(((0.5)*x1222))+(((-1.0)*x1222*x1232))+((x1220*x1232))+(((2.0)*x1224*x1228))+(((-0.087975)*x1221))+(((-0.33)*cj7))),IKFAST_ATAN2_MAGTHRESH);\nif(!x1233.valid){\ncontinue;\n}\nCheckValue<IkReal> x1234=IKPowWithIntegerCheck(IKsign(((((-0.0318198051533946)*x1225*x1228))+(((-0.55)*pz))+(((-0.0318198051533946)*x1224*x1225))+(((-0.212132034355964)*x1223*x1226))+(((-0.3)*cj7*pz))+(((-0.045)*pz*sj7))+(((-1.0)*x1226*x1231))+((x1224*x1231))+(((0.212132034355964)*x1223*x1228))+(((0.212132034355964)*x1223*x1224))+(((0.0318198051533946)*x1225*x1226))+(((0.212132034355964)*x1223*x1230))+((x1228*x1231))+((x1230*x1231))+(((-0.0318198051533946)*x1225*x1230)))),-1);\nif(!x1234.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(x1233.value)+(((1.5707963267949)*(x1234.value))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[6];\nIkReal x1235=IKsin(j5);\nIkReal x1236=IKcos(j5);\nIkReal x1237=((0.045)*cj7);\nIkReal x1238=((0.707106781186548)*cj4);\nIkReal x1239=(cj6*py);\nIkReal x1240=(py*sj6);\nIkReal x1241=(cj6*sj4);\nIkReal x1242=((0.707106781186548)*px);\nIkReal x1243=(sj4*sj6);\nIkReal x1244=((0.3)*cj7);\nIkReal x1245=((0.3)*sj7);\nIkReal x1246=((0.045)*sj7);\nIkReal x1247=((0.0636396103067893)*px);\nIkReal x1248=((0.707106781186548)*sj4);\nIkReal x1249=((0.0636396103067893)*cj4);\nIkReal x1250=(cj6*x1235);\nIkReal x1251=(px*x1236);\nIkReal x1252=(cj6*x1236);\nIkReal x1253=(sj4*x1236);\nIkReal x1254=(pz*x1236);\nIkReal x1255=(cj4*py*x1235);\nIkReal x1256=(x1239*x1248);\nIkReal x1257=(py*sj4*x1235);\nIkReal x1258=((0.777817459305202)*px*x1235);\nevalcond[0]=((((-1.0)*x1237*x1250))+((x1245*x1250))+(((-1.0)*x1236*x1246))+(((-1.0)*x1236*x1244))+(((0.045)*x1250))+pz+(((-0.55)*x1236)));\nevalcond[1]=((-0.55)+x1254+((py*x1235*x1248))+((py*x1235*x1238))+(((-1.0)*x1246))+(((-1.0)*x1244))+((px*x1235*x1238))+(((-1.0)*sj4*x1235*x1242)));\nevalcond[2]=((((-1.0)*x1237*x1252))+(((-1.0)*py*x1248))+(((-1.0)*px*x1238))+((x1245*x1252))+(((0.045)*x1252))+(((-1.0)*py*x1238))+(((0.55)*x1235))+((x1235*x1246))+((x1235*x1244))+((sj4*x1242)));\nevalcond[3]=(x1256+((cj6*px*x1238))+(((-1.0)*x1238*x1239))+((sj6*x1238*x1251))+((x1241*x1242))+((x1236*x1240*x1248))+((x1236*x1238*x1240))+(((-1.0)*pz*sj6*x1235))+(((-1.0)*x1236*x1242*x1243)));\nevalcond[4]=((0.045)+x1245+(((-1.0)*x1237))+((x1240*x1248))+(((-1.0)*x1236*x1238*x1239))+((x1236*x1241*x1242))+(((-1.0)*x1238*x1240))+((x1242*x1243))+(((-1.0)*cj6*x1238*x1251))+((px*sj6*x1238))+(((-1.0)*x1236*x1256))+((pz*x1250)));\nevalcond[5]=((-0.2125)+(((-0.09)*pz*x1250))+(((-0.0636396103067893)*sj4*x1240))+((cj4*x1247*x1252))+(((-1.0)*cj4*sj6*x1247))+((x1240*x1249))+(((-1.0)*x1236*x1241*x1247))+(((0.0636396103067893)*x1239*x1253))+(((-1.0)*x1243*x1247))+(((-1.0)*pp))+(((1.1)*x1254))+(((-1.0)*sj4*x1258))+(((0.777817459305202)*x1257))+(((0.777817459305202)*x1255))+((x1236*x1239*x1249))+((cj4*x1258)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x1259=cj7*cj7;\nIkReal x1260=(cj6*sj7);\nIkReal x1261=(py*sj4);\nIkReal x1262=((0.212132034355964)*cj7);\nIkReal x1263=(px*sj4);\nIkReal x1264=((0.707106781186548)*pz);\nIkReal x1265=(cj6*cj7);\nIkReal x1266=(cj4*px);\nIkReal x1267=((0.0318198051533946)*sj7);\nIkReal x1268=((0.045)*pz);\nIkReal x1269=(cj4*py);\nIkReal x1270=(py*x1267);\nIkReal x1271=(cj4*x1264);\nCheckValue<IkReal> x1272=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1261*x1262))+(((-1.0)*x1261*x1267))+(((-0.3)*pz*x1260))+(((0.388908729652601)*x1263))+(((-1.0)*cj6*x1268))+(((-1.0)*x1267*x1269))+(((-1.0)*x1266*x1267))+(((-1.0)*x1262*x1269))+(((-1.0)*x1262*x1266))+((x1262*x1263))+((x1263*x1267))+(((-0.388908729652601)*x1261))+(((-0.388908729652601)*x1266))+(((-0.388908729652601)*x1269))+((x1265*x1268)))),-1);\nif(!x1272.valid){\ncontinue;\n}\nCheckValue<IkReal> x1273 = IKatan2WithCheck(IkReal(((-0.304525)+(((-0.027)*cj7*sj7))+(((-0.087975)*x1259))+(((-0.0495)*sj7))+(pz*pz)+(((-0.33)*cj7)))),((((0.01125)*x1265))+(((-0.167025)*x1260))+(((-1.0)*x1264*x1266))+(((-1.0)*x1264*x1269))+(((-1.0)*x1261*x1264))+(((-0.087975)*cj7*x1260))+((x1263*x1264))+(((0.027)*cj6*x1259))+(((-0.03825)*cj6))),IKFAST_ATAN2_MAGTHRESH);\nif(!x1273.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1272.value)))+(x1273.value));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[6];\nIkReal x1274=IKsin(j5);\nIkReal x1275=IKcos(j5);\nIkReal x1276=((0.045)*cj7);\nIkReal x1277=((0.707106781186548)*cj4);\nIkReal x1278=(cj6*py);\nIkReal x1279=(py*sj6);\nIkReal x1280=(cj6*sj4);\nIkReal x1281=((0.707106781186548)*px);\nIkReal x1282=(sj4*sj6);\nIkReal x1283=((0.3)*cj7);\nIkReal x1284=((0.3)*sj7);\nIkReal x1285=((0.045)*sj7);\nIkReal x1286=((0.0636396103067893)*px);\nIkReal x1287=((0.707106781186548)*sj4);\nIkReal x1288=((0.0636396103067893)*cj4);\nIkReal x1289=(cj6*x1274);\nIkReal x1290=(px*x1275);\nIkReal x1291=(cj6*x1275);\nIkReal x1292=(sj4*x1275);\nIkReal x1293=(pz*x1275);\nIkReal x1294=(cj4*py*x1274);\nIkReal x1295=(x1278*x1287);\nIkReal x1296=(py*sj4*x1274);\nIkReal x1297=((0.777817459305202)*px*x1274);\nevalcond[0]=((((-1.0)*x1276*x1289))+(((-1.0)*x1275*x1285))+(((-1.0)*x1275*x1283))+((x1284*x1289))+(((0.045)*x1289))+(((-0.55)*x1275))+pz);\nevalcond[1]=((-0.55)+x1293+(((-1.0)*sj4*x1274*x1281))+((py*x1274*x1287))+((px*x1274*x1277))+((py*x1274*x1277))+(((-1.0)*x1285))+(((-1.0)*x1283)));\nevalcond[2]=((((0.045)*x1291))+(((-1.0)*py*x1277))+((sj4*x1281))+(((0.55)*x1274))+(((-1.0)*px*x1277))+((x1284*x1291))+(((-1.0)*x1276*x1291))+((x1274*x1285))+((x1274*x1283))+(((-1.0)*py*x1287)));\nevalcond[3]=(x1295+((x1275*x1277*x1279))+(((-1.0)*x1277*x1278))+((cj6*px*x1277))+((x1275*x1279*x1287))+(((-1.0)*x1275*x1281*x1282))+((x1280*x1281))+(((-1.0)*pz*sj6*x1274))+((sj6*x1277*x1290)));\nevalcond[4]=((0.045)+((x1279*x1287))+x1284+(((-1.0)*cj6*x1277*x1290))+(((-1.0)*x1276))+((px*sj6*x1277))+(((-1.0)*x1277*x1279))+(((-1.0)*x1275*x1295))+((x1275*x1280*x1281))+((x1281*x1282))+(((-1.0)*x1275*x1277*x1278))+((pz*x1289)));\nevalcond[5]=((-0.2125)+((x1275*x1278*x1288))+(((0.0636396103067893)*x1278*x1292))+((x1279*x1288))+(((-1.0)*sj4*x1297))+(((-1.0)*cj4*sj6*x1286))+((cj4*x1286*x1291))+(((1.1)*x1293))+(((-1.0)*pp))+(((-0.09)*pz*x1289))+(((0.777817459305202)*x1296))+(((0.777817459305202)*x1294))+(((-0.0636396103067893)*sj4*x1279))+((cj4*x1297))+(((-1.0)*x1275*x1280*x1286))+(((-1.0)*x1282*x1286)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j4array[2], cj4array[2], sj4array[2];\nbool j4valid[2]={false};\n_nj4 = 2;\nIkReal x1298=((0.707106781186548)*py);\nIkReal x1299=((0.707106781186548)*px);\nIkReal x1300=((0.045)*sj6);\nIkReal x1301=(x1299+(((-1.0)*x1298)));\nIkReal x1302=(x1298+x1299);\nCheckValue<IkReal> x1305 = IKatan2WithCheck(IkReal(x1301),x1302,IKFAST_ATAN2_MAGTHRESH);\nif(!x1305.valid){\ncontinue;\n}\nIkReal x1303=((1.0)*(x1305.value));\nif((((x1302*x1302)+(x1301*x1301))) < -0.00001)\ncontinue;\nCheckValue<IkReal> x1306=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1302*x1302)+(x1301*x1301)))),-1);\nif(!x1306.valid){\ncontinue;\n}\nif( (((x1306.value)*((x1300+(((-1.0)*cj7*x1300))+(((0.3)*sj6*sj7)))))) < -1-IKFAST_SINCOS_THRESH || (((x1306.value)*((x1300+(((-1.0)*cj7*x1300))+(((0.3)*sj6*sj7)))))) > 1+IKFAST_SINCOS_THRESH )\n    continue;\nIkReal x1304=IKasin(((x1306.value)*((x1300+(((-1.0)*cj7*x1300))+(((0.3)*sj6*sj7))))));\nj4array[0]=((((-1.0)*x1304))+(((-1.0)*x1303)));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nj4array[1]=((3.14159265358979)+x1304+(((-1.0)*x1303)));\nsj4array[1]=IKsin(j4array[1]);\ncj4array[1]=IKcos(j4array[1]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nif( j4array[1] > IKPI )\n{\n    j4array[1]-=IK2PI;\n}\nelse if( j4array[1] < -IKPI )\n{    j4array[1]+=IK2PI;\n}\nj4valid[1] = true;\nfor(int ij4 = 0; ij4 < 2; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 2; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n\n{\nIkReal j5eval[2];\nIkReal x1307=(py*sj7);\nIkReal x1308=((1.0)*cj4);\nIkReal x1309=((0.0318198051533946)*sj4);\nIkReal x1310=(cj7*sj4);\nIkReal x1311=((6.66666666666667)*px);\nIkReal x1312=((0.388908729652601)*sj4);\nIkReal x1313=((0.212132034355964)*py);\nIkReal x1314=((0.0318198051533946)*cj4);\nIkReal x1315=(px*sj7);\nIkReal x1316=((12.2222222222222)*sj4);\nIkReal x1317=((6.66666666666667)*py);\nIkReal x1318=(cj4*cj7);\nIkReal x1319=(cj4*py);\nIkReal x1320=(cj6*pz);\nIkReal x1321=((0.212132034355964)*px);\nIkReal x1322=(cj4*px);\nj5eval[0]=((((-1.0)*x1311*x1318))+((x1310*x1311))+(((-1.0)*x1317*x1318))+(((-1.0)*x1307*x1308))+(((-1.0)*x1308*x1315))+((px*x1316))+(((1.4142135623731)*cj7*x1320))+((sj4*x1315))+(((-9.42809041582063)*sj7*x1320))+(((-1.4142135623731)*x1320))+(((-1.0)*sj4*x1307))+(((-1.0)*py*x1316))+(((-1.0)*x1310*x1317))+(((-12.2222222222222)*x1322))+(((-12.2222222222222)*x1319)));\nj5eval[1]=IKsign(((((-1.0)*x1307*x1309))+(((-1.0)*x1313*x1318))+(((-0.045)*x1320))+((px*x1312))+(((-1.0)*x1307*x1314))+((x1309*x1315))+(((-1.0)*x1314*x1315))+(((-0.388908729652601)*x1319))+(((-0.3)*sj7*x1320))+(((-0.388908729652601)*x1322))+(((-1.0)*py*x1312))+(((-1.0)*x1310*x1313))+(((0.045)*cj7*x1320))+((x1310*x1321))+(((-1.0)*x1318*x1321))));\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j5eval[2];\nIkReal x1323=(py*sj4);\nIkReal x1324=(pz*sj7);\nIkReal x1325=(cj7*pz);\nIkReal x1326=(cj4*px);\nIkReal x1327=((0.212132034355964)*sj7);\nIkReal x1328=((0.0318198051533946)*cj7);\nIkReal x1329=((1.0)*cj7);\nIkReal x1330=((0.0318198051533946)*cj6);\nIkReal x1331=((6.66666666666667)*cj6*sj7);\nIkReal x1332=(cj4*cj6*py);\nIkReal x1333=(cj6*px*sj4);\nj5eval[0]=(x1332+(((-9.42809041582063)*x1325))+(((-1.0)*cj6*x1326*x1329))+(((-1.0)*x1333))+((cj7*x1333))+(((-1.0)*px*sj4*x1331))+((cj4*py*x1331))+(((-1.4142135623731)*x1324))+(((-1.0)*x1329*x1332))+((x1326*x1331))+((cj6*x1326))+((cj6*x1323))+(((-1.0)*cj6*x1323*x1329))+((x1323*x1331))+(((-17.2848324290045)*pz)));\nj5eval[1]=IKsign(((((-0.55)*pz))+(((-1.0)*x1327*x1333))+(((-1.0)*cj6*x1326*x1328))+((cj6*x1323*x1327))+(((-0.045)*x1324))+(((-1.0)*x1328*x1332))+(((-1.0)*px*sj4*x1330))+((cj4*py*x1330))+((x1328*x1333))+((x1326*x1330))+((x1327*x1332))+(((-0.3)*x1325))+(((-1.0)*cj6*x1323*x1328))+((cj6*x1326*x1327))+((x1323*x1330))));\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j5eval[2];\nIkReal x1334=cj6*cj6;\nIkReal x1335=cj7*cj7;\nIkReal x1336=(cj7*sj7);\nIkReal x1337=((0.087975)*x1335);\nIkReal x1338=((21.7222222222222)*x1335);\nIkReal x1339=((0.027)*x1334);\nIkReal x1340=(cj7*x1334);\nIkReal x1341=((6.66666666666667)*x1334);\nj5eval[0]=((-75.1913580246914)+x1340+(((-1.0)*sj7*x1341))+(((-22.7222222222222)*x1334))+(((-12.2222222222222)*sj7))+((x1336*x1341))+(((-81.4814814814815)*cj7))+(((-1.0)*x1338))+(((-6.66666666666667)*x1336))+((x1334*x1338)));\nj5eval[1]=IKsign(((-0.304525)+(((-0.092025)*x1334))+((x1336*x1339))+(((-0.0495)*sj7))+(((-1.0)*sj7*x1339))+(((-0.027)*x1336))+(((0.00405)*x1340))+(((-1.0)*x1337))+((x1334*x1337))+(((-0.33)*cj7))));\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[4];\nbool bgotonextstatement = true;\ndo\n{\nIkReal x1342=((0.707106781186548)*py);\nIkReal x1343=((0.707106781186548)*px);\nIkReal x1344=((0.045)+((sj4*x1342))+((sj4*x1343))+(((-0.045)*cj7))+((cj4*x1343))+(((0.3)*sj7))+(((-1.0)*cj4*x1342)));\nevalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j6), 6.28318530717959))))));\nevalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));\nevalcond[2]=x1344;\nevalcond[3]=x1344;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5eval[1];\nIkReal x1345=((-1.0)*py);\npz=0;\nj6=1.5707963267949;\nsj6=1.0;\ncj6=0;\npp=((px*px)+(py*py));\nnpx=(((px*r00))+((py*r10)));\nnpy=(((px*r01))+((py*r11)));\nnpz=(((px*r02))+((py*r12)));\nrxp0_0=(r20*x1345);\nrxp0_1=(px*r20);\nrxp1_0=(r21*x1345);\nrxp1_1=(px*r21);\nrxp2_0=(r22*x1345);\nrxp2_1=(px*r22);\nj5eval[0]=(((cj4*py))+((cj4*px))+(((-1.0)*px*sj4))+((py*sj4)));\nif( IKabs(j5eval[0]) < 0.0000010000000000  )\n{\n{\nIkReal j5eval[1];\nIkReal x1346=((-1.0)*py);\npz=0;\nj6=1.5707963267949;\nsj6=1.0;\ncj6=0;\npp=((px*px)+(py*py));\nnpx=(((px*r00))+((py*r10)));\nnpy=(((px*r01))+((py*r11)));\nnpz=(((px*r02))+((py*r12)));\nrxp0_0=(r20*x1346);\nrxp0_1=(px*r20);\nrxp1_0=(r21*x1346);\nrxp1_1=(px*r21);\nrxp2_0=(r22*x1346);\nrxp2_1=(px*r22);\nj5eval[0]=((12.2222222222222)+sj7+(((6.66666666666667)*cj7)));\nif( IKabs(j5eval[0]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[7];\nbool bgotonextstatement = true;\ndo\n{\nIkReal x1347=(py+px);\nIkReal x1348=((((-1.0)*px))+py);\nIkReal x1350 = ((x1347*x1347)+(x1348*x1348));\nif(IKabs(x1350)==0){\ncontinue;\n}\nIkReal x1349=pow(x1350,-0.5);\nCheckValue<IkReal> x1351 = IKatan2WithCheck(IkReal(x1347),x1348,IKFAST_ATAN2_MAGTHRESH);\nif(!x1351.valid){\ncontinue;\n}\nIkReal gconst0=((-1.0)*(x1351.value));\nIkReal gconst1=((-1.0)*x1347*x1349);\nIkReal gconst2=(x1348*x1349);\nIkReal x1352=j4;\nIkReal x1353=((0.707106781186548)*gconst2);\nIkReal x1354=((0.707106781186548)*gconst1);\nCheckValue<IkReal> x1358 = IKatan2WithCheck(IkReal((py+px)),((((-1.0)*px))+py),IKFAST_ATAN2_MAGTHRESH);\nif(!x1358.valid){\ncontinue;\n}\nIkReal x1355=x1358.value;\nIkReal x1356=x1355;\nIkReal x1357=((0.045)+(((-0.045)*cj7))+((px*x1353))+((px*x1354))+(((0.3)*sj7))+((py*x1354))+(((-1.0)*py*x1353)));\nif(((((x1355*x1356))+((j4*x1352))+((j4*x1356))+((x1352*x1355)))) < -0.00001)\ncontinue;\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((x1355*x1356))+((j4*x1352))+((j4*x1356))+((x1352*x1355)))))), 6.28318530717959)));\nevalcond[1]=((0.39655)+(((-1.0)*(px*px)))+(((0.0765)*sj7))+(((-1.0)*(py*py)))+(((0.32595)*cj7)));\nevalcond[2]=x1357;\nevalcond[3]=x1357;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[2], cj5array[2], sj5array[2];\nbool j5valid[2]={false};\n_nj5 = 2;\nIkReal x1359=((0.707106781186548)*px);\nIkReal x1360=((0.707106781186548)*py);\nCheckValue<IkReal> x1362=IKPowWithIntegerCheck(((((-1.0)*gconst1*x1359))+((gconst1*x1360))+((gconst2*x1360))+((gconst2*x1359))),-1);\nif(!x1362.valid){\ncontinue;\n}\nIkReal x1361=x1362.value;\nsj5array[0]=((((0.045)*sj7*x1361))+(((0.3)*cj7*x1361))+(((0.55)*x1361)));\nif( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j5valid[0] = j5valid[1] = true;\n    j5array[0] = IKasin(sj5array[0]);\n    cj5array[0] = IKcos(j5array[0]);\n    sj5array[1] = sj5array[0];\n    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);\n    cj5array[1] = -cj5array[0];\n}\nelse if( isnan(sj5array[0]) )\n{\n    // probably any value will work\n    j5valid[0] = true;\n    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;\n}\nfor(int ij5 = 0; ij5 < 2; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 2; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[4];\nIkReal x1363=IKcos(j5);\nIkReal x1364=IKsin(j5);\nIkReal x1365=px*px;\nIkReal x1366=py*py;\nIkReal x1367=(gconst2*px);\nIkReal x1368=(gconst2*py);\nIkReal x1369=(gconst1*px);\nIkReal x1370=(gconst1*py);\nIkReal x1371=((0.777817459305202)*x1364);\nIkReal x1372=((0.707106781186548)*x1363);\nIkReal x1373=((0.588235294117647)*x1363);\nevalcond[0]=((((-1.0)*x1365*x1373))+(((-0.108264705882353)*cj7*x1363))+(((-1.0)*x1366*x1373))+(((-0.316735294117647)*x1363)));\nevalcond[1]=(((x1367*x1372))+((x1370*x1372))+((x1368*x1372))+(((-1.0)*x1369*x1372)));\nevalcond[2]=((((0.045)*sj7*x1364))+(((0.3)*cj7*x1364))+(((-0.707106781186548)*x1370))+(((-0.707106781186548)*x1367))+(((-0.707106781186548)*x1368))+(((0.55)*x1364))+(((0.707106781186548)*x1369)));\nevalcond[3]=((-0.2125)+(((-0.0636396103067893)*x1369))+(((-0.0636396103067893)*x1367))+(((-1.0)*x1366))+(((-1.0)*x1365))+(((0.0636396103067893)*x1368))+(((-0.0636396103067893)*x1370))+((x1367*x1371))+((x1370*x1371))+((x1368*x1371))+(((-1.0)*x1369*x1371)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x1374=(py+px);\nIkReal x1375=((((-1.0)*px))+py);\nIkReal x1377 = ((x1375*x1375)+(x1374*x1374));\nif(IKabs(x1377)==0){\ncontinue;\n}\nIkReal x1376=pow(x1377,-0.5);\nCheckValue<IkReal> x1378 = IKatan2WithCheck(IkReal(x1374),x1375,IKFAST_ATAN2_MAGTHRESH);\nif(!x1378.valid){\ncontinue;\n}\nIkReal gconst3=((3.14159265358979)+(((-1.0)*(x1378.value))));\nIkReal gconst4=((1.0)*x1374*x1376);\nIkReal gconst5=((-1.0)*x1375*x1376);\nIkReal x1379=j4;\nIkReal x1380=((0.707106781186548)*gconst5);\nIkReal x1381=((0.707106781186548)*gconst4);\nCheckValue<IkReal> x1385 = IKatan2WithCheck(IkReal((py+px)),((((-1.0)*px))+py),IKFAST_ATAN2_MAGTHRESH);\nif(!x1385.valid){\ncontinue;\n}\nIkReal x1382=x1385.value;\nIkReal x1383=x1382;\nIkReal x1384=((0.045)+((py*x1381))+(((-0.045)*cj7))+(((0.3)*sj7))+(((-1.0)*py*x1380))+((px*x1381))+((px*x1380)));\nif((((9.86960440108936)+(((-3.14159265358979)*x1379))+((j4*x1383))+(((-3.14159265358979)*j4))+((x1379*x1382))+(((-3.14159265358979)*x1383))+(((-3.14159265358979)*x1382))+((j4*x1379))+((x1382*x1383)))) < -0.00001)\ncontinue;\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+(((-3.14159265358979)*x1379))+((j4*x1383))+(((-3.14159265358979)*j4))+((x1379*x1382))+(((-3.14159265358979)*x1383))+(((-3.14159265358979)*x1382))+((j4*x1379))+((x1382*x1383)))))), 6.28318530717959)));\nevalcond[1]=((0.39655)+(((-1.0)*(px*px)))+(((0.0765)*sj7))+(((-1.0)*(py*py)))+(((0.32595)*cj7)));\nevalcond[2]=x1384;\nevalcond[3]=x1384;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[2], cj5array[2], sj5array[2];\nbool j5valid[2]={false};\n_nj5 = 2;\nIkReal x1386=((0.707106781186548)*gconst5);\nIkReal x1387=((0.707106781186548)*gconst4);\nCheckValue<IkReal> x1389=IKPowWithIntegerCheck((((py*x1387))+((py*x1386))+(((-1.0)*px*x1387))+((px*x1386))),-1);\nif(!x1389.valid){\ncontinue;\n}\nIkReal x1388=x1389.value;\nsj5array[0]=((((0.045)*sj7*x1388))+(((0.3)*cj7*x1388))+(((0.55)*x1388)));\nif( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j5valid[0] = j5valid[1] = true;\n    j5array[0] = IKasin(sj5array[0]);\n    cj5array[0] = IKcos(j5array[0]);\n    sj5array[1] = sj5array[0];\n    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);\n    cj5array[1] = -cj5array[0];\n}\nelse if( isnan(sj5array[0]) )\n{\n    // probably any value will work\n    j5valid[0] = true;\n    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;\n}\nfor(int ij5 = 0; ij5 < 2; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 2; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[4];\nIkReal x1390=IKcos(j5);\nIkReal x1391=IKsin(j5);\nIkReal x1392=px*px;\nIkReal x1393=py*py;\nIkReal x1394=((0.0636396103067893)*py);\nIkReal x1395=(gconst4*px);\nIkReal x1396=(gconst5*py);\nIkReal x1397=(gconst4*py);\nIkReal x1398=(gconst5*px);\nIkReal x1399=((0.707106781186548)*x1390);\nIkReal x1400=((0.777817459305202)*x1391);\nIkReal x1401=((0.588235294117647)*x1390);\nIkReal x1402=(gconst5*x1400);\nevalcond[0]=((((-0.316735294117647)*x1390))+(((-1.0)*x1393*x1401))+(((-1.0)*x1392*x1401))+(((-0.108264705882353)*cj7*x1390)));\nevalcond[1]=(((x1398*x1399))+(((-1.0)*x1395*x1399))+((x1396*x1399))+((x1397*x1399)));\nevalcond[2]=((((0.3)*cj7*x1391))+(((0.707106781186548)*x1395))+(((0.55)*x1391))+(((-0.707106781186548)*x1398))+(((-0.707106781186548)*x1396))+(((-0.707106781186548)*x1397))+(((0.045)*sj7*x1391)));\nevalcond[3]=((-0.2125)+((gconst5*x1394))+((x1397*x1400))+((x1396*x1400))+(((-1.0)*gconst4*x1394))+((x1398*x1400))+(((-1.0)*x1393))+(((-1.0)*x1392))+(((-1.0)*x1395*x1400))+(((-0.0636396103067893)*x1395))+(((-0.0636396103067893)*x1398)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x1403=((0.045)+(((-0.045)*cj7))+(((0.3)*sj7)));\nevalcond[0]=((IKabs(px))+(IKabs(py)));\nevalcond[1]=((0.39655)+(((0.0765)*sj7))+(((0.32595)*cj7)));\nevalcond[2]=x1403;\nevalcond[3]=((-0.55)+(((-0.045)*sj7))+(((-0.3)*cj7)));\nevalcond[4]=0;\nevalcond[5]=x1403;\nevalcond[6]=-0.2125;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5eval[1];\npz=0;\nj6=1.5707963267949;\nsj6=1.0;\ncj6=0;\npp=0;\nnpx=0;\nnpy=0;\nnpz=0;\nrxp0_0=0;\nrxp0_1=0;\nrxp1_0=0;\nrxp1_1=0;\nrxp2_0=0;\nrxp2_1=0;\npx=0;\npy=0;\nrxp0_2=0;\nrxp1_2=0;\nrxp2_2=0;\nj5eval[0]=IKabs(((2.92556370551481)+cj7));\nif( IKabs(j5eval[0]) < 0.0000000100000000  )\n{\ncontinue; // no branches [j5]\n\n} else\n{\nIkReal op[2+1], zeror[2];\nint numroots;\nop[0]=((2.92556370551481)+cj7);\nop[1]=0;\nop[2]=((-2.92556370551481)+(((-1.0)*cj7)));\npolyroots2(op,zeror,numroots);\nIkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];\nint numsolutions = 0;\nfor(int ij5 = 0; ij5 < numroots; ++ij5)\n{\nIkReal htj5 = zeror[ij5];\ntempj5array[0]=((2.0)*(atan(htj5)));\nfor(int kj5 = 0; kj5 < 1; ++kj5)\n{\nj5array[numsolutions] = tempj5array[kj5];\nif( j5array[numsolutions] > IKPI )\n{\n    j5array[numsolutions]-=IK2PI;\n}\nelse if( j5array[numsolutions] < -IKPI )\n{\n    j5array[numsolutions]+=IK2PI;\n}\nsj5array[numsolutions] = IKsin(j5array[numsolutions]);\ncj5array[numsolutions] = IKcos(j5array[numsolutions]);\nnumsolutions++;\n}\n}\nbool j5valid[2]={true,true};\n_nj5 = 2;\nfor(int ij5 = 0; ij5 < numsolutions; ++ij5)\n    {\nif( !j5valid[ij5] )\n{\n    continue;\n}\n    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\nhtj5 = IKtan(j5/2);\n\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nrotationfunction0(solutions);\n    }\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j5]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j5array[2], cj5array[2], sj5array[2];\nbool j5valid[2]={false};\n_nj5 = 2;\nCheckValue<IkReal> x1407=IKPowWithIntegerCheck(((0.55)+(((0.045)*sj7))+(((0.3)*cj7))),-1);\nif(!x1407.valid){\ncontinue;\n}\nIkReal x1404=x1407.value;\nIkReal x1405=((0.707106781186548)*sj4*x1404);\nIkReal x1406=((0.707106781186548)*cj4*x1404);\nsj5array[0]=(((px*x1406))+((py*x1405))+((py*x1406))+(((-1.0)*px*x1405)));\nif( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j5valid[0] = j5valid[1] = true;\n    j5array[0] = IKasin(sj5array[0]);\n    cj5array[0] = IKcos(j5array[0]);\n    sj5array[1] = sj5array[0];\n    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);\n    cj5array[1] = -cj5array[0];\n}\nelse if( isnan(sj5array[0]) )\n{\n    // probably any value will work\n    j5valid[0] = true;\n    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;\n}\nfor(int ij5 = 0; ij5 < 2; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 2; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[4];\nIkReal x1408=IKcos(j5);\nIkReal x1409=IKsin(j5);\nIkReal x1410=px*px;\nIkReal x1411=py*py;\nIkReal x1412=((0.707106781186548)*sj4);\nIkReal x1413=(cj4*py);\nIkReal x1414=((0.777817459305202)*sj4);\nIkReal x1415=((0.0636396103067893)*sj4);\nIkReal x1416=((0.707106781186548)*cj4);\nIkReal x1417=(px*x1408);\nIkReal x1418=(py*x1409);\nIkReal x1419=(px*x1409);\nIkReal x1420=((0.588235294117647)*x1408);\nIkReal x1421=(x1409*x1413);\nevalcond[0]=((((-0.316735294117647)*x1408))+(((-0.108264705882353)*cj7*x1408))+(((-1.0)*x1410*x1420))+(((-1.0)*x1411*x1420)));\nevalcond[1]=((((-1.0)*x1412*x1417))+((py*x1408*x1412))+((x1416*x1417))+(((0.707106781186548)*x1408*x1413)));\nevalcond[2]=((-0.55)+(((-0.045)*sj7))+((x1412*x1418))+(((-1.0)*x1412*x1419))+(((-0.3)*cj7))+((x1416*x1419))+(((0.707106781186548)*x1421)));\nevalcond[3]=((-0.2125)+(((0.777817459305202)*cj4*x1419))+(((-1.0)*x1414*x1419))+(((0.0636396103067893)*x1413))+(((-1.0)*px*x1415))+(((-0.0636396103067893)*cj4*px))+(((0.777817459305202)*x1421))+((x1414*x1418))+(((-1.0)*py*x1415))+(((-1.0)*x1410))+(((-1.0)*x1411)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[2], cj5array[2], sj5array[2];\nbool j5valid[2]={false};\n_nj5 = 2;\nIkReal x1422=((0.707106781186548)*sj4);\nIkReal x1423=((0.707106781186548)*cj4);\nCheckValue<IkReal> x1425=IKPowWithIntegerCheck(((((-1.0)*px*x1422))+((px*x1423))+((py*x1422))+((py*x1423))),-1);\nif(!x1425.valid){\ncontinue;\n}\nIkReal x1424=x1425.value;\nsj5array[0]=((((0.3)*cj7*x1424))+(((0.55)*x1424))+(((0.045)*sj7*x1424)));\nif( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j5valid[0] = j5valid[1] = true;\n    j5array[0] = IKasin(sj5array[0]);\n    cj5array[0] = IKcos(j5array[0]);\n    sj5array[1] = sj5array[0];\n    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);\n    cj5array[1] = -cj5array[0];\n}\nelse if( isnan(sj5array[0]) )\n{\n    // probably any value will work\n    j5valid[0] = true;\n    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;\n}\nfor(int ij5 = 0; ij5 < 2; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 2; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[4];\nIkReal x1426=IKcos(j5);\nIkReal x1427=IKsin(j5);\nIkReal x1428=px*px;\nIkReal x1429=py*py;\nIkReal x1430=(cj4*py);\nIkReal x1431=(px*sj4);\nIkReal x1432=(py*sj4);\nIkReal x1433=(cj4*px);\nIkReal x1434=((0.777817459305202)*x1427);\nIkReal x1435=((0.707106781186548)*x1426);\nIkReal x1436=((0.588235294117647)*x1426);\nevalcond[0]=((((-0.108264705882353)*cj7*x1426))+(((-1.0)*x1429*x1436))+(((-1.0)*x1428*x1436))+(((-0.316735294117647)*x1426)));\nevalcond[1]=(((x1432*x1435))+((x1430*x1435))+((x1433*x1435))+(((-1.0)*x1431*x1435)));\nevalcond[2]=((((-0.707106781186548)*x1432))+(((-0.707106781186548)*x1430))+(((-0.707106781186548)*x1433))+(((0.3)*cj7*x1427))+(((0.707106781186548)*x1431))+(((0.55)*x1427))+(((0.045)*sj7*x1427)));\nevalcond[3]=((-0.2125)+((x1432*x1434))+(((0.0636396103067893)*x1430))+((x1430*x1434))+((x1433*x1434))+(((-1.0)*x1431*x1434))+(((-1.0)*x1429))+(((-1.0)*x1428))+(((-0.0636396103067893)*x1431))+(((-0.0636396103067893)*x1432))+(((-0.0636396103067893)*x1433)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x1437=((0.3)*sj7);\nIkReal x1438=((0.045)*cj7);\nIkReal x1439=((0.707106781186548)*py);\nIkReal x1440=((0.707106781186548)*px);\nIkReal x1441=(cj4*x1439);\nIkReal x1442=(cj4*x1440);\nIkReal x1443=(sj4*x1439);\nIkReal x1444=(sj4*x1440);\nIkReal x1445=(x1437+x1441);\nIkReal x1446=(x1438+x1444+x1443+x1442);\nevalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j6), 6.28318530717959))))));\nevalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));\nevalcond[2]=((-0.045)+x1446+(((-1.0)*x1445)));\nevalcond[3]=((0.045)+x1445+(((-1.0)*x1446)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5eval[1];\nIkReal x1447=((-1.0)*py);\npz=0;\nj6=-1.5707963267949;\nsj6=-1.0;\ncj6=0;\npp=((px*px)+(py*py));\nnpx=(((px*r00))+((py*r10)));\nnpy=(((px*r01))+((py*r11)));\nnpz=(((px*r02))+((py*r12)));\nrxp0_0=(r20*x1447);\nrxp0_1=(px*r20);\nrxp1_0=(r21*x1447);\nrxp1_1=(px*r21);\nrxp2_0=(r22*x1447);\nrxp2_1=(px*r22);\nj5eval[0]=(((cj4*py))+((cj4*px))+(((-1.0)*px*sj4))+((py*sj4)));\nif( IKabs(j5eval[0]) < 0.0000010000000000  )\n{\n{\nIkReal j5eval[1];\nIkReal x1448=((-1.0)*py);\npz=0;\nj6=-1.5707963267949;\nsj6=-1.0;\ncj6=0;\npp=((px*px)+(py*py));\nnpx=(((px*r00))+((py*r10)));\nnpy=(((px*r01))+((py*r11)));\nnpz=(((px*r02))+((py*r12)));\nrxp0_0=(r20*x1448);\nrxp0_1=(px*r20);\nrxp1_0=(r21*x1448);\nrxp1_1=(px*r21);\nrxp2_0=(r22*x1448);\nrxp2_1=(px*r22);\nj5eval[0]=((12.2222222222222)+sj7+(((6.66666666666667)*cj7)));\nif( IKabs(j5eval[0]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[7];\nbool bgotonextstatement = true;\ndo\n{\nIkReal x1449=(py+px);\nIkReal x1450=((((-1.0)*px))+py);\nIkReal x1452 = ((x1450*x1450)+(x1449*x1449));\nif(IKabs(x1452)==0){\ncontinue;\n}\nIkReal x1451=pow(x1452,-0.5);\nCheckValue<IkReal> x1453 = IKatan2WithCheck(IkReal(x1449),x1450,IKFAST_ATAN2_MAGTHRESH);\nif(!x1453.valid){\ncontinue;\n}\nIkReal gconst6=((-1.0)*(x1453.value));\nIkReal gconst7=((-1.0)*x1449*x1451);\nIkReal gconst8=(x1450*x1451);\nIkReal x1454=j4;\nIkReal x1455=((0.3)*sj7);\nIkReal x1456=((0.045)*cj7);\nIkReal x1457=((0.707106781186548)*gconst8);\nIkReal x1458=((0.707106781186548)*gconst7);\nIkReal x1459=(py*x1457);\nIkReal x1460=(px*x1457);\nIkReal x1461=(py*x1458);\nIkReal x1462=(px*x1458);\nCheckValue<IkReal> x1467 = IKatan2WithCheck(IkReal((py+px)),((((-1.0)*px))+py),IKFAST_ATAN2_MAGTHRESH);\nif(!x1467.valid){\ncontinue;\n}\nIkReal x1463=x1467.value;\nIkReal x1464=x1463;\nIkReal x1465=(x1455+x1459);\nIkReal x1466=(x1461+x1460+x1462+x1456);\nif(((((j4*x1454))+((x1463*x1464))+((j4*x1464))+((x1454*x1463)))) < -0.00001)\ncontinue;\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((j4*x1454))+((x1463*x1464))+((j4*x1464))+((x1454*x1463)))))), 6.28318530717959)));\nevalcond[1]=((0.39655)+(((-1.0)*(px*px)))+(((0.0765)*sj7))+(((-1.0)*(py*py)))+(((0.32595)*cj7)));\nevalcond[2]=((-0.045)+(((-1.0)*x1465))+x1466);\nevalcond[3]=((0.045)+(((-1.0)*x1466))+x1465);\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[2], cj5array[2], sj5array[2];\nbool j5valid[2]={false};\n_nj5 = 2;\nIkReal x1468=((0.707106781186548)*px);\nIkReal x1469=((0.707106781186548)*py);\nCheckValue<IkReal> x1471=IKPowWithIntegerCheck((((gconst7*x1469))+(((-1.0)*gconst7*x1468))+((gconst8*x1469))+((gconst8*x1468))),-1);\nif(!x1471.valid){\ncontinue;\n}\nIkReal x1470=x1471.value;\nsj5array[0]=((((0.3)*cj7*x1470))+(((0.55)*x1470))+(((0.045)*sj7*x1470)));\nif( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j5valid[0] = j5valid[1] = true;\n    j5array[0] = IKasin(sj5array[0]);\n    cj5array[0] = IKcos(j5array[0]);\n    sj5array[1] = sj5array[0];\n    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);\n    cj5array[1] = -cj5array[0];\n}\nelse if( isnan(sj5array[0]) )\n{\n    // probably any value will work\n    j5valid[0] = true;\n    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;\n}\nfor(int ij5 = 0; ij5 < 2; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 2; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[4];\nIkReal x1472=IKcos(j5);\nIkReal x1473=IKsin(j5);\nIkReal x1474=px*px;\nIkReal x1475=py*py;\nIkReal x1476=(gconst7*px);\nIkReal x1477=((0.0636396103067893)*py);\nIkReal x1478=(gconst8*px);\nIkReal x1479=((0.707106781186548)*py);\nIkReal x1480=((0.777817459305202)*x1473);\nIkReal x1481=((0.707106781186548)*x1472);\nIkReal x1482=((0.588235294117647)*x1472);\nIkReal x1483=(py*x1480);\nIkReal x1484=(x1472*x1479);\nevalcond[0]=((((-0.108264705882353)*cj7*x1472))+(((-1.0)*x1474*x1482))+(((-1.0)*x1475*x1482))+(((-0.316735294117647)*x1472)));\nevalcond[1]=(((x1476*x1481))+(((-1.0)*gconst8*x1484))+(((-1.0)*gconst7*x1484))+(((-1.0)*x1478*x1481)));\nevalcond[2]=((((0.3)*cj7*x1473))+(((-1.0)*gconst7*x1479))+(((0.55)*x1473))+(((-1.0)*gconst8*x1479))+(((0.045)*sj7*x1473))+(((-0.707106781186548)*x1478))+(((0.707106781186548)*x1476)));\nevalcond[3]=((-0.2125)+((gconst8*x1483))+((gconst7*x1483))+(((-1.0)*x1474))+(((-1.0)*x1475))+(((-1.0)*gconst8*x1477))+(((0.0636396103067893)*x1476))+(((0.0636396103067893)*x1478))+((x1478*x1480))+((gconst7*x1477))+(((-1.0)*x1476*x1480)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x1485=(py+px);\nIkReal x1486=((((-1.0)*px))+py);\nIkReal x1488 = ((x1486*x1486)+(x1485*x1485));\nif(IKabs(x1488)==0){\ncontinue;\n}\nIkReal x1487=pow(x1488,-0.5);\nCheckValue<IkReal> x1489 = IKatan2WithCheck(IkReal(x1485),x1486,IKFAST_ATAN2_MAGTHRESH);\nif(!x1489.valid){\ncontinue;\n}\nIkReal gconst9=((3.14159265358979)+(((-1.0)*(x1489.value))));\nIkReal gconst10=((1.0)*x1485*x1487);\nIkReal gconst11=((-1.0)*x1486*x1487);\nIkReal x1490=j4;\nIkReal x1491=((0.3)*sj7);\nIkReal x1492=((0.045)*cj7);\nIkReal x1493=((0.707106781186548)*gconst11);\nIkReal x1494=((0.707106781186548)*gconst10);\nIkReal x1495=(py*x1493);\nIkReal x1496=(px*x1493);\nIkReal x1497=(px*x1494);\nIkReal x1498=(py*x1494);\nCheckValue<IkReal> x1503 = IKatan2WithCheck(IkReal((py+px)),((((-1.0)*px))+py),IKFAST_ATAN2_MAGTHRESH);\nif(!x1503.valid){\ncontinue;\n}\nIkReal x1499=x1503.value;\nIkReal x1500=x1499;\nIkReal x1501=(x1491+x1495);\nIkReal x1502=(x1492+x1496+x1497+x1498);\nif((((9.86960440108936)+((x1499*x1500))+(((-3.14159265358979)*x1500))+((j4*x1500))+(((-3.14159265358979)*j4))+((j4*x1490))+((x1490*x1499))+(((-3.14159265358979)*x1490))+(((-3.14159265358979)*x1499)))) < -0.00001)\ncontinue;\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+((x1499*x1500))+(((-3.14159265358979)*x1500))+((j4*x1500))+(((-3.14159265358979)*j4))+((j4*x1490))+((x1490*x1499))+(((-3.14159265358979)*x1490))+(((-3.14159265358979)*x1499)))))), 6.28318530717959)));\nevalcond[1]=((0.39655)+(((-1.0)*(px*px)))+(((0.0765)*sj7))+(((-1.0)*(py*py)))+(((0.32595)*cj7)));\nevalcond[2]=((-0.045)+(((-1.0)*x1501))+x1502);\nevalcond[3]=((0.045)+(((-1.0)*x1502))+x1501);\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[2], cj5array[2], sj5array[2];\nbool j5valid[2]={false};\n_nj5 = 2;\nIkReal x1504=((0.707106781186548)*py);\nIkReal x1505=((0.707106781186548)*px);\nCheckValue<IkReal> x1507=IKPowWithIntegerCheck((((gconst10*x1504))+(((-1.0)*gconst10*x1505))+((gconst11*x1504))+((gconst11*x1505))),-1);\nif(!x1507.valid){\ncontinue;\n}\nIkReal x1506=x1507.value;\nsj5array[0]=((((0.55)*x1506))+(((0.3)*cj7*x1506))+(((0.045)*sj7*x1506)));\nif( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j5valid[0] = j5valid[1] = true;\n    j5array[0] = IKasin(sj5array[0]);\n    cj5array[0] = IKcos(j5array[0]);\n    sj5array[1] = sj5array[0];\n    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);\n    cj5array[1] = -cj5array[0];\n}\nelse if( isnan(sj5array[0]) )\n{\n    // probably any value will work\n    j5valid[0] = true;\n    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;\n}\nfor(int ij5 = 0; ij5 < 2; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 2; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[4];\nIkReal x1508=IKcos(j5);\nIkReal x1509=IKsin(j5);\nIkReal x1510=px*px;\nIkReal x1511=py*py;\nIkReal x1512=(gconst11*py);\nIkReal x1513=(gconst10*px);\nIkReal x1514=(gconst11*px);\nIkReal x1515=(gconst10*py);\nIkReal x1516=((0.707106781186548)*x1508);\nIkReal x1517=((0.777817459305202)*x1509);\nIkReal x1518=((0.588235294117647)*x1508);\nevalcond[0]=((((-0.316735294117647)*x1508))+(((-1.0)*x1510*x1518))+(((-0.108264705882353)*cj7*x1508))+(((-1.0)*x1511*x1518)));\nevalcond[1]=(((x1513*x1516))+(((-1.0)*x1515*x1516))+(((-1.0)*x1514*x1516))+(((-1.0)*x1512*x1516)));\nevalcond[2]=((((0.55)*x1509))+(((-0.707106781186548)*x1514))+(((-0.707106781186548)*x1515))+(((-0.707106781186548)*x1512))+(((0.3)*cj7*x1509))+(((0.707106781186548)*x1513))+(((0.045)*sj7*x1509)));\nevalcond[3]=((-0.2125)+((x1514*x1517))+(((-1.0)*x1510))+(((-1.0)*x1511))+(((-1.0)*x1513*x1517))+(((0.0636396103067893)*x1513))+(((0.0636396103067893)*x1514))+(((0.0636396103067893)*x1515))+((x1515*x1517))+(((-0.0636396103067893)*x1512))+((x1512*x1517)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x1519=((0.3)*sj7);\nIkReal x1520=((0.045)*cj7);\nevalcond[0]=((IKabs(px))+(IKabs(py)));\nevalcond[1]=((0.39655)+(((0.0765)*sj7))+(((0.32595)*cj7)));\nevalcond[2]=((-0.045)+(((-1.0)*x1519))+x1520);\nevalcond[3]=((-0.55)+(((-0.045)*sj7))+(((-0.3)*cj7)));\nevalcond[4]=0;\nevalcond[5]=((0.045)+(((-1.0)*x1520))+x1519);\nevalcond[6]=-0.2125;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5eval[1];\npz=0;\nj6=-1.5707963267949;\nsj6=-1.0;\ncj6=0;\npp=0;\nnpx=0;\nnpy=0;\nnpz=0;\nrxp0_0=0;\nrxp0_1=0;\nrxp1_0=0;\nrxp1_1=0;\nrxp2_0=0;\nrxp2_1=0;\npx=0;\npy=0;\nrxp0_2=0;\nrxp1_2=0;\nrxp2_2=0;\nj5eval[0]=IKabs(((2.92556370551481)+cj7));\nif( IKabs(j5eval[0]) < 0.0000000100000000  )\n{\ncontinue; // no branches [j5]\n\n} else\n{\nIkReal op[2+1], zeror[2];\nint numroots;\nop[0]=((2.92556370551481)+cj7);\nop[1]=0;\nop[2]=((-2.92556370551481)+(((-1.0)*cj7)));\npolyroots2(op,zeror,numroots);\nIkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];\nint numsolutions = 0;\nfor(int ij5 = 0; ij5 < numroots; ++ij5)\n{\nIkReal htj5 = zeror[ij5];\ntempj5array[0]=((2.0)*(atan(htj5)));\nfor(int kj5 = 0; kj5 < 1; ++kj5)\n{\nj5array[numsolutions] = tempj5array[kj5];\nif( j5array[numsolutions] > IKPI )\n{\n    j5array[numsolutions]-=IK2PI;\n}\nelse if( j5array[numsolutions] < -IKPI )\n{\n    j5array[numsolutions]+=IK2PI;\n}\nsj5array[numsolutions] = IKsin(j5array[numsolutions]);\ncj5array[numsolutions] = IKcos(j5array[numsolutions]);\nnumsolutions++;\n}\n}\nbool j5valid[2]={true,true};\n_nj5 = 2;\nfor(int ij5 = 0; ij5 < numsolutions; ++ij5)\n    {\nif( !j5valid[ij5] )\n{\n    continue;\n}\n    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\nhtj5 = IKtan(j5/2);\n\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nrotationfunction0(solutions);\n    }\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j5]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j5array[2], cj5array[2], sj5array[2];\nbool j5valid[2]={false};\n_nj5 = 2;\nCheckValue<IkReal> x1524=IKPowWithIntegerCheck(((0.55)+(((0.045)*sj7))+(((0.3)*cj7))),-1);\nif(!x1524.valid){\ncontinue;\n}\nIkReal x1521=x1524.value;\nIkReal x1522=((0.707106781186548)*sj4*x1521);\nIkReal x1523=((0.707106781186548)*cj4*x1521);\nsj5array[0]=(((px*x1523))+(((-1.0)*px*x1522))+((py*x1523))+((py*x1522)));\nif( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j5valid[0] = j5valid[1] = true;\n    j5array[0] = IKasin(sj5array[0]);\n    cj5array[0] = IKcos(j5array[0]);\n    sj5array[1] = sj5array[0];\n    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);\n    cj5array[1] = -cj5array[0];\n}\nelse if( isnan(sj5array[0]) )\n{\n    // probably any value will work\n    j5valid[0] = true;\n    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;\n}\nfor(int ij5 = 0; ij5 < 2; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 2; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[4];\nIkReal x1525=IKcos(j5);\nIkReal x1526=IKsin(j5);\nIkReal x1527=px*px;\nIkReal x1528=py*py;\nIkReal x1529=((0.707106781186548)*sj4);\nIkReal x1530=(cj4*py);\nIkReal x1531=((0.777817459305202)*sj4);\nIkReal x1532=((0.0636396103067893)*sj4);\nIkReal x1533=((0.707106781186548)*cj4);\nIkReal x1534=(px*x1525);\nIkReal x1535=(py*x1526);\nIkReal x1536=(px*x1526);\nIkReal x1537=((0.588235294117647)*x1525);\nIkReal x1538=(x1526*x1530);\nevalcond[0]=((((-0.316735294117647)*x1525))+(((-0.108264705882353)*cj7*x1525))+(((-1.0)*x1528*x1537))+(((-1.0)*x1527*x1537)));\nevalcond[1]=((((-1.0)*py*x1525*x1529))+((x1529*x1534))+(((-0.707106781186548)*x1525*x1530))+(((-1.0)*x1533*x1534)));\nevalcond[2]=((-0.55)+(((-0.045)*sj7))+(((-1.0)*x1529*x1536))+(((-0.3)*cj7))+((x1529*x1535))+(((0.707106781186548)*x1538))+((x1533*x1536)));\nevalcond[3]=((-0.2125)+(((0.777817459305202)*x1538))+(((-1.0)*x1531*x1536))+(((0.777817459305202)*cj4*x1536))+((x1531*x1535))+(((0.0636396103067893)*cj4*px))+(((-0.0636396103067893)*x1530))+((px*x1532))+((py*x1532))+(((-1.0)*x1528))+(((-1.0)*x1527)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[2], cj5array[2], sj5array[2];\nbool j5valid[2]={false};\n_nj5 = 2;\nIkReal x1539=((0.707106781186548)*sj4);\nIkReal x1540=((0.707106781186548)*cj4);\nCheckValue<IkReal> x1542=IKPowWithIntegerCheck(((((-1.0)*px*x1539))+((py*x1540))+((px*x1540))+((py*x1539))),-1);\nif(!x1542.valid){\ncontinue;\n}\nIkReal x1541=x1542.value;\nsj5array[0]=((((0.045)*sj7*x1541))+(((0.55)*x1541))+(((0.3)*cj7*x1541)));\nif( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j5valid[0] = j5valid[1] = true;\n    j5array[0] = IKasin(sj5array[0]);\n    cj5array[0] = IKcos(j5array[0]);\n    sj5array[1] = sj5array[0];\n    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);\n    cj5array[1] = -cj5array[0];\n}\nelse if( isnan(sj5array[0]) )\n{\n    // probably any value will work\n    j5valid[0] = true;\n    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;\n}\nfor(int ij5 = 0; ij5 < 2; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 2; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[4];\nIkReal x1543=IKcos(j5);\nIkReal x1544=IKsin(j5);\nIkReal x1545=px*px;\nIkReal x1546=py*py;\nIkReal x1547=(cj4*py);\nIkReal x1548=(px*sj4);\nIkReal x1549=(py*sj4);\nIkReal x1550=(cj4*px);\nIkReal x1551=((0.777817459305202)*x1544);\nIkReal x1552=((0.707106781186548)*x1543);\nIkReal x1553=((0.588235294117647)*x1543);\nevalcond[0]=((((-1.0)*x1546*x1553))+(((-0.108264705882353)*cj7*x1543))+(((-0.316735294117647)*x1543))+(((-1.0)*x1545*x1553)));\nevalcond[1]=((((-1.0)*x1549*x1552))+(((-1.0)*x1550*x1552))+((x1548*x1552))+(((-1.0)*x1547*x1552)));\nevalcond[2]=((((0.045)*sj7*x1544))+(((0.55)*x1544))+(((0.3)*cj7*x1544))+(((-0.707106781186548)*x1550))+(((0.707106781186548)*x1548))+(((-0.707106781186548)*x1547))+(((-0.707106781186548)*x1549)));\nevalcond[3]=((-0.2125)+(((-1.0)*x1545))+(((-1.0)*x1546))+((x1547*x1551))+(((-0.0636396103067893)*x1547))+((x1550*x1551))+(((0.0636396103067893)*x1549))+(((0.0636396103067893)*x1548))+(((-1.0)*x1548*x1551))+((x1549*x1551))+(((0.0636396103067893)*x1550)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x1554=((0.707106781186548)*cj4);\nIkReal x1555=((0.707106781186548)*sj4);\nevalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959)))))+(IKabs(pz)));\nevalcond[1]=((0.7225)+(((-1.0)*pp)));\nevalcond[2]=((((-1.0)*py*x1554))+((py*x1555))+((px*x1555))+((px*x1554)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5eval[1];\nIkReal x1556=((-1.0)*py);\npz=0;\nj7=0;\nsj7=0;\ncj7=1.0;\npp=((px*px)+(py*py));\nnpx=(((px*r00))+((py*r10)));\nnpy=(((px*r01))+((py*r11)));\nnpz=(((px*r02))+((py*r12)));\nrxp0_0=(r20*x1556);\nrxp0_1=(px*r20);\nrxp1_0=(r21*x1556);\nrxp1_1=(px*r21);\nrxp2_0=(r22*x1556);\nrxp2_1=(px*r22);\nIkReal x1557=(px*sj6);\nIkReal x1558=(py*sj6);\nj5eval[0]=(((sj4*x1558))+(((-1.0)*sj4*x1557))+((cj4*x1558))+((cj4*x1557)));\nif( IKabs(j5eval[0]) < 0.0000010000000000  )\n{\n{\nIkReal j5eval[1];\nIkReal x1559=((-1.0)*py);\npz=0;\nj7=0;\nsj7=0;\ncj7=1.0;\npp=((px*px)+(py*py));\nnpx=(((px*r00))+((py*r10)));\nnpy=(((px*r01))+((py*r11)));\nnpz=(((px*r02))+((py*r12)));\nrxp0_0=(r20*x1559);\nrxp0_1=(px*r20);\nrxp1_0=(r21*x1559);\nrxp1_1=(px*r21);\nrxp2_0=(r22*x1559);\nrxp2_1=(px*r22);\nIkReal x1560=(cj6*px);\nIkReal x1561=((1.0)*cj4);\nIkReal x1562=(cj6*py);\nj5eval[0]=(((sj4*x1560))+(((-1.0)*x1560*x1561))+(((-1.0)*sj4*x1562))+(((-1.0)*x1561*x1562)));\nif( IKabs(j5eval[0]) < 0.0000010000000000  )\n{\n{\nIkReal j5eval[2];\nIkReal x1563=((-1.0)*py);\npz=0;\nj7=0;\nsj7=0;\ncj7=1.0;\npp=((px*px)+(py*py));\nnpx=(((px*r00))+((py*r10)));\nnpy=(((px*r01))+((py*r11)));\nnpz=(((px*r02))+((py*r12)));\nrxp0_0=(r20*x1563);\nrxp0_1=(px*r20);\nrxp1_0=(r21*x1563);\nrxp1_1=(px*r21);\nrxp2_0=(r22*x1563);\nrxp2_1=(px*r22);\nIkReal x1564=(px*sj6);\nIkReal x1565=((1.0)*sj4);\nIkReal x1566=(py*sj4);\nIkReal x1567=(cj4*py);\nj5eval[0]=(((cj4*px))+x1566+x1567+(((-1.0)*px*x1565)));\nj5eval[1]=(((sj6*x1566))+((sj6*x1567))+((cj4*x1564))+(((-1.0)*x1564*x1565)));\nif( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[5];\nbool bgotonextstatement = true;\ndo\n{\nIkReal x1568=(py+px);\nIkReal x1569=((((-1.0)*px))+py);\nIkReal x1571 = ((x1569*x1569)+(x1568*x1568));\nif(IKabs(x1571)==0){\ncontinue;\n}\nIkReal x1570=pow(x1571,-0.5);\nCheckValue<IkReal> x1572 = IKatan2WithCheck(IkReal(x1568),x1569,IKFAST_ATAN2_MAGTHRESH);\nif(!x1572.valid){\ncontinue;\n}\nIkReal gconst12=((-1.0)*(x1572.value));\nIkReal gconst13=((-1.0)*x1568*x1570);\nIkReal gconst14=(x1569*x1570);\nIkReal x1573=j4;\nIkReal x1574=((0.707106781186548)*py);\nIkReal x1575=((0.707106781186548)*px);\nCheckValue<IkReal> x1578 = IKatan2WithCheck(IkReal((py+px)),((((-1.0)*px))+py),IKFAST_ATAN2_MAGTHRESH);\nif(!x1578.valid){\ncontinue;\n}\nIkReal x1576=x1578.value;\nIkReal x1577=x1576;\nif(((((x1576*x1577))+((x1573*x1576))+((j4*x1573))+((j4*x1577)))) < -0.00001)\ncontinue;\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((x1576*x1577))+((x1573*x1576))+((j4*x1573))+((j4*x1577)))))), 6.28318530717959)));\nevalcond[1]=((0.7225)+(((-1.0)*(px*px)))+(((-1.0)*(py*py))));\nevalcond[2]=(((gconst14*x1575))+((gconst13*x1575))+((gconst13*x1574))+(((-1.0)*gconst14*x1574)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[2], cj5array[2], sj5array[2];\nbool j5valid[2]={false};\n_nj5 = 2;\nIkReal x1579=((0.831890330807703)*py);\nIkReal x1580=((0.831890330807703)*px);\nsj5array[0]=(((gconst14*x1580))+((gconst14*x1579))+((gconst13*x1579))+(((-1.0)*gconst13*x1580)));\nif( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j5valid[0] = j5valid[1] = true;\n    j5array[0] = IKasin(sj5array[0]);\n    cj5array[0] = IKcos(j5array[0]);\n    sj5array[1] = sj5array[0];\n    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);\n    cj5array[1] = -cj5array[0];\n}\nelse if( isnan(sj5array[0]) )\n{\n    // probably any value will work\n    j5valid[0] = true;\n    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;\n}\nfor(int ij5 = 0; ij5 < 2; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 2; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[5];\nIkReal x1581=IKsin(j5);\nIkReal x1582=IKcos(j5);\nIkReal x1583=((0.707106781186548)*sj6);\nIkReal x1584=(gconst13*py);\nIkReal x1585=(gconst14*px);\nIkReal x1586=((0.707106781186548)*cj6);\nIkReal x1587=(gconst13*px);\nIkReal x1588=((0.0636396103067893)*sj6);\nIkReal x1589=(gconst14*py);\nIkReal x1590=((0.777817459305202)*x1581);\nIkReal x1591=((0.707106781186548)*x1581);\nIkReal x1592=((0.0636396103067893)*cj6*x1582);\nevalcond[0]=((-0.85)*x1582);\nevalcond[1]=((-0.85)+((x1584*x1591))+((x1589*x1591))+((x1585*x1591))+(((-1.0)*x1587*x1591)));\nevalcond[2]=(((x1586*x1587))+((x1584*x1586))+(((-1.0)*x1582*x1583*x1587))+(((-1.0)*x1586*x1589))+((x1585*x1586))+((x1582*x1583*x1584))+((x1582*x1583*x1585))+((x1582*x1583*x1589)));\nevalcond[3]=((((-1.0)*x1582*x1586*x1589))+((x1583*x1587))+((x1583*x1584))+((x1583*x1585))+(((-1.0)*x1582*x1584*x1586))+((x1582*x1586*x1587))+(((-1.0)*x1582*x1585*x1586))+(((-1.0)*x1583*x1589)));\nevalcond[4]=((-0.935)+(((-1.0)*x1585*x1588))+((x1584*x1590))+((x1584*x1592))+((x1588*x1589))+((x1589*x1592))+((x1589*x1590))+(((-1.0)*x1584*x1588))+((x1585*x1590))+((x1585*x1592))+(((-1.0)*x1587*x1588))+(((-1.0)*x1587*x1590))+(((-1.0)*x1587*x1592)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x1593=(py+px);\nIkReal x1594=((((-1.0)*px))+py);\nIkReal x1596 = ((x1594*x1594)+(x1593*x1593));\nif(IKabs(x1596)==0){\ncontinue;\n}\nIkReal x1595=pow(x1596,-0.5);\nCheckValue<IkReal> x1597 = IKatan2WithCheck(IkReal(x1593),x1594,IKFAST_ATAN2_MAGTHRESH);\nif(!x1597.valid){\ncontinue;\n}\nIkReal gconst15=((3.14159265358979)+(((-1.0)*(x1597.value))));\nIkReal gconst16=((1.0)*x1593*x1595);\nIkReal gconst17=((-1.0)*x1594*x1595);\nIkReal x1598=j4;\nIkReal x1599=((0.707106781186548)*gconst16);\nIkReal x1600=((0.707106781186548)*gconst17);\nCheckValue<IkReal> x1603 = IKatan2WithCheck(IkReal((py+px)),((((-1.0)*px))+py),IKFAST_ATAN2_MAGTHRESH);\nif(!x1603.valid){\ncontinue;\n}\nIkReal x1601=x1603.value;\nIkReal x1602=x1601;\nif((((9.86960440108936)+(((-3.14159265358979)*x1598))+((x1601*x1602))+((j4*x1598))+(((-3.14159265358979)*x1601))+(((-3.14159265358979)*x1602))+((j4*x1602))+(((-3.14159265358979)*j4))+((x1598*x1601)))) < -0.00001)\ncontinue;\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+(((-3.14159265358979)*x1598))+((x1601*x1602))+((j4*x1598))+(((-3.14159265358979)*x1601))+(((-3.14159265358979)*x1602))+((j4*x1602))+(((-3.14159265358979)*j4))+((x1598*x1601)))))), 6.28318530717959)));\nevalcond[1]=((0.7225)+(((-1.0)*(px*px)))+(((-1.0)*(py*py))));\nevalcond[2]=((((-1.0)*py*x1600))+((py*x1599))+((px*x1600))+((px*x1599)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x1604=((0.831890330807703)*px);\nIkReal x1605=((0.831890330807703)*py);\nIkReal x1606=((0.707106781186548)*cj6*gconst17);\nIkReal x1607=((0.707106781186548)*px*sj6);\nIkReal x1608=((0.707106781186548)*cj6*gconst16);\nIkReal x1609=((0.707106781186548)*py*sj6);\nCheckValue<IkReal> x1610=IKPowWithIntegerCheck((((gconst16*x1609))+((gconst17*x1607))+((gconst17*x1609))+(((-1.0)*gconst16*x1607))),-1);\nif(!x1610.valid){\ncontinue;\n}\nif( IKabs((((gconst16*x1605))+((gconst17*x1605))+((gconst17*x1604))+(((-1.0)*gconst16*x1604)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1610.value)*((((py*x1606))+(((-1.0)*py*x1608))+(((-1.0)*px*x1608))+(((-1.0)*px*x1606)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst16*x1605))+((gconst17*x1605))+((gconst17*x1604))+(((-1.0)*gconst16*x1604))))+IKsqr(((x1610.value)*((((py*x1606))+(((-1.0)*py*x1608))+(((-1.0)*px*x1608))+(((-1.0)*px*x1606))))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2((((gconst16*x1605))+((gconst17*x1605))+((gconst17*x1604))+(((-1.0)*gconst16*x1604))), ((x1610.value)*((((py*x1606))+(((-1.0)*py*x1608))+(((-1.0)*px*x1608))+(((-1.0)*px*x1606))))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[6];\nIkReal x1611=IKsin(j5);\nIkReal x1612=IKcos(j5);\nIkReal x1613=(gconst17*py);\nIkReal x1614=((0.707106781186548)*px);\nIkReal x1615=(gconst16*sj6);\nIkReal x1616=((0.0636396103067893)*sj6);\nIkReal x1617=(cj6*gconst16);\nIkReal x1618=((0.707106781186548)*py);\nIkReal x1619=(gconst17*px);\nIkReal x1620=(gconst17*sj6);\nIkReal x1621=((0.707106781186548)*sj6);\nIkReal x1622=((0.0636396103067893)*px);\nIkReal x1623=((0.0636396103067893)*gconst16*py);\nIkReal x1624=(cj6*x1612);\nIkReal x1625=((0.777817459305202)*x1611);\nIkReal x1626=(gconst16*x1611);\nevalcond[0]=((-0.85)*x1612);\nevalcond[1]=(((gconst16*x1614))+(((0.85)*x1611))+(((-1.0)*gconst17*x1614))+(((-0.707106781186548)*x1613))+(((-1.0)*gconst16*x1618)));\nevalcond[2]=((-0.85)+(((0.707106781186548)*x1611*x1613))+((gconst17*x1611*x1614))+(((-1.0)*x1614*x1626))+((x1618*x1626)));\nevalcond[3]=((((-1.0)*x1612*x1614*x1615))+((x1617*x1618))+((x1612*x1614*x1620))+((x1612*x1615*x1618))+((x1614*x1617))+((x1612*x1613*x1621))+(((-0.707106781186548)*cj6*x1613))+((cj6*gconst17*x1614)));\nevalcond[4]=((((-1.0)*x1612*x1617*x1618))+(((-0.707106781186548)*x1613*x1624))+((x1612*x1614*x1617))+((x1614*x1620))+((x1614*x1615))+((x1615*x1618))+(((-1.0)*gconst17*x1614*x1624))+(((-1.0)*x1613*x1621)));\nevalcond[5]=((-0.935)+(((0.0636396103067893)*x1613*x1624))+(((-1.0)*x1612*x1617*x1622))+(((-1.0)*x1616*x1619))+(((0.0636396103067893)*x1619*x1624))+((gconst16*py*x1625))+(((0.0636396103067893)*py*x1612*x1617))+((x1619*x1625))+(((-1.0)*x1615*x1622))+(((-0.0636396103067893)*py*x1615))+((x1613*x1625))+(((-1.0)*gconst16*px*x1625))+((x1613*x1616)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x1627=((0.707106781186548)*sj4);\nIkReal x1628=((0.707106781186548)*cj4);\nIkReal x1629=(((py*x1627))+(((-1.0)*py*x1628))+((px*x1627))+((px*x1628)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));\nevalcond[1]=((0.7225)+(((-1.0)*(px*px)))+(((-1.0)*(py*py))));\nevalcond[2]=x1629;\nevalcond[3]=x1629;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5eval[1];\nIkReal x1630=((-1.0)*py);\npz=0;\nj7=0;\nsj7=0;\ncj7=1.0;\npp=((px*px)+(py*py));\nnpx=(((px*r00))+((py*r10)));\nnpy=(((px*r01))+((py*r11)));\nnpz=(((px*r02))+((py*r12)));\nrxp0_0=(r20*x1630);\nrxp0_1=(px*r20);\nrxp1_0=(r21*x1630);\nrxp1_1=(px*r21);\nrxp2_0=(r22*x1630);\nrxp2_1=(px*r22);\nsj6=0;\ncj6=1.0;\nj6=0;\nj5eval[0]=(((cj4*py))+((cj4*px))+(((-1.0)*px*sj4))+((py*sj4)));\nif( IKabs(j5eval[0]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[5];\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((IKabs(px))+(IKabs(py)));\nevalcond[1]=0.7225;\nevalcond[2]=0;\nevalcond[3]=-0.85;\nevalcond[4]=-0.935;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5eval[1];\npz=0;\nj7=0;\nsj7=0;\ncj7=1.0;\npp=0;\nnpx=0;\nnpy=0;\nnpz=0;\nrxp0_0=0;\nrxp0_1=0;\nrxp1_0=0;\nrxp1_1=0;\nrxp2_0=0;\nrxp2_1=0;\nsj6=0;\ncj6=1.0;\nj6=0;\npx=0;\npy=0;\nrxp0_2=0;\nrxp1_2=0;\nrxp2_2=0;\nj5eval[0]=1.0;\nif( IKabs(j5eval[0]) < 0.0000000100000000  )\n{\ncontinue; // 3 cases reached\n\n} else\n{\nIkReal op[2+1], zeror[2];\nint numroots;\nop[0]=1.0;\nop[1]=0;\nop[2]=-1.0;\npolyroots2(op,zeror,numroots);\nIkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];\nint numsolutions = 0;\nfor(int ij5 = 0; ij5 < numroots; ++ij5)\n{\nIkReal htj5 = zeror[ij5];\ntempj5array[0]=((2.0)*(atan(htj5)));\nfor(int kj5 = 0; kj5 < 1; ++kj5)\n{\nj5array[numsolutions] = tempj5array[kj5];\nif( j5array[numsolutions] > IKPI )\n{\n    j5array[numsolutions]-=IK2PI;\n}\nelse if( j5array[numsolutions] < -IKPI )\n{\n    j5array[numsolutions]+=IK2PI;\n}\nsj5array[numsolutions] = IKsin(j5array[numsolutions]);\ncj5array[numsolutions] = IKcos(j5array[numsolutions]);\nnumsolutions++;\n}\n}\nbool j5valid[2]={true,true};\n_nj5 = 2;\nfor(int ij5 = 0; ij5 < numsolutions; ++ij5)\n    {\nif( !j5valid[ij5] )\n{\n    continue;\n}\n    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\nhtj5 = IKtan(j5/2);\n\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nrotationfunction0(solutions);\n    }\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j5]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x1631=py*py;\nIkReal x1632=px*px;\nIkReal x1633=((216.374675043084)*px);\nIkReal x1634=(px*py);\nIkReal x1635=((216.374675043084)*py);\nIkReal x1636=((0.831890330807703)*py);\nIkReal x1637=((0.831890330807703)*px);\nIkReal x1638=((4400.0)*cj4*sj4);\nCheckValue<IkReal> x1639=IKPowWithIntegerCheck(((((-1.0)*sj4*x1633))+((sj4*x1635))+((cj4*x1635))+((cj4*x1633))),-1);\nif(!x1639.valid){\ncontinue;\n}\nif( IKabs(((((-1.0)*sj4*x1637))+((sj4*x1636))+((cj4*x1637))+((cj4*x1636)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1639.value)*(((3179.0)+(((-2200.0)*x1632))+(((-2200.0)*x1631))+(((4400.0)*x1634))+(((-8800.0)*x1634*(cj4*cj4)))+((x1632*x1638))+(((-1.0)*x1631*x1638)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x1637))+((sj4*x1636))+((cj4*x1637))+((cj4*x1636))))+IKsqr(((x1639.value)*(((3179.0)+(((-2200.0)*x1632))+(((-2200.0)*x1631))+(((4400.0)*x1634))+(((-8800.0)*x1634*(cj4*cj4)))+((x1632*x1638))+(((-1.0)*x1631*x1638))))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((((-1.0)*sj4*x1637))+((sj4*x1636))+((cj4*x1637))+((cj4*x1636))), ((x1639.value)*(((3179.0)+(((-2200.0)*x1632))+(((-2200.0)*x1631))+(((4400.0)*x1634))+(((-8800.0)*x1634*(cj4*cj4)))+((x1632*x1638))+(((-1.0)*x1631*x1638))))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[5];\nIkReal x1640=IKcos(j5);\nIkReal x1641=IKsin(j5);\nIkReal x1642=(cj4*py);\nIkReal x1643=(px*sj4);\nIkReal x1644=(py*sj4);\nIkReal x1645=(cj4*px);\nIkReal x1646=((0.0636396103067893)*x1640);\nIkReal x1647=((0.707106781186548)*x1641);\nIkReal x1648=((0.777817459305202)*x1641);\nIkReal x1649=((0.707106781186548)*x1640);\nevalcond[0]=((-0.85)*x1640);\nevalcond[1]=((((-0.707106781186548)*x1645))+(((-0.707106781186548)*x1644))+(((-0.707106781186548)*x1642))+(((0.707106781186548)*x1643))+(((0.85)*x1641)));\nevalcond[2]=((((-1.0)*x1644*x1649))+(((-1.0)*x1645*x1649))+(((-1.0)*x1642*x1649))+((x1643*x1649)));\nevalcond[3]=((-0.85)+((x1645*x1647))+((x1644*x1647))+(((-1.0)*x1643*x1647))+((x1642*x1647)));\nevalcond[4]=((-0.935)+((x1645*x1646))+((x1645*x1648))+((x1644*x1646))+((x1644*x1648))+(((-1.0)*x1643*x1646))+(((-1.0)*x1643*x1648))+((x1642*x1648))+((x1642*x1646)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x1650=((0.707106781186548)*sj4);\nIkReal x1651=((0.707106781186548)*cj4);\nIkReal x1652=(py*x1651);\nIkReal x1653=(((px*x1651))+((px*x1650))+((py*x1650)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));\nevalcond[1]=((0.7225)+(((-1.0)*(px*px)))+(((-1.0)*(py*py))));\nevalcond[2]=(x1653+(((-1.0)*x1652)));\nevalcond[3]=(x1652+(((-1.0)*x1653)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5eval[1];\nIkReal x1654=((-1.0)*py);\npz=0;\nj7=0;\nsj7=0;\ncj7=1.0;\npp=((px*px)+(py*py));\nnpx=(((px*r00))+((py*r10)));\nnpy=(((px*r01))+((py*r11)));\nnpz=(((px*r02))+((py*r12)));\nrxp0_0=(r20*x1654);\nrxp0_1=(px*r20);\nrxp1_0=(r21*x1654);\nrxp1_1=(px*r21);\nrxp2_0=(r22*x1654);\nrxp2_1=(px*r22);\nsj6=0;\ncj6=-1.0;\nj6=3.14159265358979;\nIkReal x1655=((1.0)*cj4);\nj5eval[0]=((((-1.0)*py*x1655))+(((-1.0)*px*x1655))+(((-1.0)*py*sj4))+((px*sj4)));\nif( IKabs(j5eval[0]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[5];\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((IKabs(px))+(IKabs(py)));\nevalcond[1]=0.7225;\nevalcond[2]=0;\nevalcond[3]=-0.85;\nevalcond[4]=-0.935;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5eval[1];\npz=0;\nj7=0;\nsj7=0;\ncj7=1.0;\npp=0;\nnpx=0;\nnpy=0;\nnpz=0;\nrxp0_0=0;\nrxp0_1=0;\nrxp1_0=0;\nrxp1_1=0;\nrxp2_0=0;\nrxp2_1=0;\nsj6=0;\ncj6=-1.0;\nj6=3.14159265358979;\npx=0;\npy=0;\nrxp0_2=0;\nrxp1_2=0;\nrxp2_2=0;\nj5eval[0]=1.0;\nif( IKabs(j5eval[0]) < 0.0000000100000000  )\n{\ncontinue; // 3 cases reached\n\n} else\n{\nIkReal op[2+1], zeror[2];\nint numroots;\nop[0]=1.0;\nop[1]=0;\nop[2]=-1.0;\npolyroots2(op,zeror,numroots);\nIkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];\nint numsolutions = 0;\nfor(int ij5 = 0; ij5 < numroots; ++ij5)\n{\nIkReal htj5 = zeror[ij5];\ntempj5array[0]=((2.0)*(atan(htj5)));\nfor(int kj5 = 0; kj5 < 1; ++kj5)\n{\nj5array[numsolutions] = tempj5array[kj5];\nif( j5array[numsolutions] > IKPI )\n{\n    j5array[numsolutions]-=IK2PI;\n}\nelse if( j5array[numsolutions] < -IKPI )\n{\n    j5array[numsolutions]+=IK2PI;\n}\nsj5array[numsolutions] = IKsin(j5array[numsolutions]);\ncj5array[numsolutions] = IKcos(j5array[numsolutions]);\nnumsolutions++;\n}\n}\nbool j5valid[2]={true,true};\n_nj5 = 2;\nfor(int ij5 = 0; ij5 < numsolutions; ++ij5)\n    {\nif( !j5valid[ij5] )\n{\n    continue;\n}\n    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\nhtj5 = IKtan(j5/2);\n\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nrotationfunction0(solutions);\n    }\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j5]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x1656=py*py;\nIkReal x1657=px*px;\nIkReal x1658=((216.374675043084)*px);\nIkReal x1659=((216.374675043084)*py);\nIkReal x1660=(px*py);\nIkReal x1661=((0.831890330807703)*py);\nIkReal x1662=((0.831890330807703)*px);\nIkReal x1663=((4400.0)*cj4*sj4);\nCheckValue<IkReal> x1664=IKPowWithIntegerCheck(((((-1.0)*cj4*x1659))+(((-1.0)*cj4*x1658))+(((-1.0)*sj4*x1659))+((sj4*x1658))),-1);\nif(!x1664.valid){\ncontinue;\n}\nif( IKabs((((cj4*x1661))+((cj4*x1662))+(((-1.0)*sj4*x1662))+((sj4*x1661)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1664.value)*(((3179.0)+(((-1.0)*x1656*x1663))+(((-2200.0)*x1656))+(((-2200.0)*x1657))+((x1657*x1663))+(((-8800.0)*x1660*(cj4*cj4)))+(((4400.0)*x1660)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x1661))+((cj4*x1662))+(((-1.0)*sj4*x1662))+((sj4*x1661))))+IKsqr(((x1664.value)*(((3179.0)+(((-1.0)*x1656*x1663))+(((-2200.0)*x1656))+(((-2200.0)*x1657))+((x1657*x1663))+(((-8800.0)*x1660*(cj4*cj4)))+(((4400.0)*x1660))))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2((((cj4*x1661))+((cj4*x1662))+(((-1.0)*sj4*x1662))+((sj4*x1661))), ((x1664.value)*(((3179.0)+(((-1.0)*x1656*x1663))+(((-2200.0)*x1656))+(((-2200.0)*x1657))+((x1657*x1663))+(((-8800.0)*x1660*(cj4*cj4)))+(((4400.0)*x1660))))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[5];\nIkReal x1665=IKcos(j5);\nIkReal x1666=IKsin(j5);\nIkReal x1667=(cj4*py);\nIkReal x1668=(px*sj4);\nIkReal x1669=(py*sj4);\nIkReal x1670=(cj4*px);\nIkReal x1671=((0.0636396103067893)*x1665);\nIkReal x1672=((0.707106781186548)*x1666);\nIkReal x1673=((0.777817459305202)*x1666);\nIkReal x1674=((0.707106781186548)*x1665);\nevalcond[0]=((-0.85)*x1665);\nevalcond[1]=((((0.85)*x1666))+(((-0.707106781186548)*x1670))+(((-0.707106781186548)*x1669))+(((-0.707106781186548)*x1667))+(((0.707106781186548)*x1668)));\nevalcond[2]=((((-1.0)*x1668*x1674))+((x1667*x1674))+((x1669*x1674))+((x1670*x1674)));\nevalcond[3]=((-0.85)+(((-1.0)*x1668*x1672))+((x1667*x1672))+((x1669*x1672))+((x1670*x1672)));\nevalcond[4]=((-0.935)+(((-1.0)*x1667*x1671))+(((-1.0)*x1668*x1673))+((x1667*x1673))+(((-1.0)*x1669*x1671))+((x1668*x1671))+((x1669*x1673))+(((-1.0)*x1670*x1671))+((x1670*x1673)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x1675=((0.707106781186548)*sj4);\nIkReal x1676=((0.707106781186548)*cj4);\nIkReal x1677=(((py*x1675))+((px*x1676))+((px*x1675))+(((-1.0)*py*x1676)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));\nevalcond[1]=((0.7225)+(((-1.0)*(px*px)))+(((-1.0)*(py*py))));\nevalcond[2]=x1677;\nevalcond[3]=x1677;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[2], cj5array[2], sj5array[2];\nbool j5valid[2]={false};\n_nj5 = 2;\nIkReal x1678=((0.831890330807703)*py);\nIkReal x1679=((0.831890330807703)*px);\nsj5array[0]=(((sj4*x1678))+(((-1.0)*sj4*x1679))+((cj4*x1679))+((cj4*x1678)));\nif( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j5valid[0] = j5valid[1] = true;\n    j5array[0] = IKasin(sj5array[0]);\n    cj5array[0] = IKcos(j5array[0]);\n    sj5array[1] = sj5array[0];\n    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);\n    cj5array[1] = -cj5array[0];\n}\nelse if( isnan(sj5array[0]) )\n{\n    // probably any value will work\n    j5valid[0] = true;\n    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;\n}\nfor(int ij5 = 0; ij5 < 2; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 2; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[4];\nIkReal x1680=IKcos(j5);\nIkReal x1681=IKsin(j5);\nIkReal x1682=(cj4*px);\nIkReal x1683=(cj4*py);\nIkReal x1684=(px*sj4);\nIkReal x1685=(py*sj4);\nIkReal x1686=((0.777817459305202)*x1681);\nIkReal x1687=((0.707106781186548)*x1681);\nIkReal x1688=((0.707106781186548)*x1680);\nevalcond[0]=((-0.85)*x1680);\nevalcond[1]=(((x1682*x1688))+((x1685*x1688))+((x1683*x1688))+(((-1.0)*x1684*x1688)));\nevalcond[2]=((-0.85)+((x1682*x1687))+((x1685*x1687))+((x1683*x1687))+(((-1.0)*x1684*x1687)));\nevalcond[3]=((-0.935)+(((0.0636396103067893)*x1683))+(((-0.0636396103067893)*x1682))+(((-0.0636396103067893)*x1685))+(((-0.0636396103067893)*x1684))+((x1682*x1686))+((x1685*x1686))+((x1683*x1686))+(((-1.0)*x1684*x1686)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x1689=((0.707106781186548)*sj4);\nIkReal x1690=((0.707106781186548)*cj4);\nIkReal x1691=(py*x1690);\nIkReal x1692=(((px*x1690))+((px*x1689))+((py*x1689)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));\nevalcond[1]=((0.7225)+(((-1.0)*(px*px)))+(((-1.0)*(py*py))));\nevalcond[2]=((((-1.0)*x1691))+x1692);\nevalcond[3]=((((-1.0)*x1692))+x1691);\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5array[2], cj5array[2], sj5array[2];\nbool j5valid[2]={false};\n_nj5 = 2;\nIkReal x1693=((0.831890330807703)*py);\nIkReal x1694=((0.831890330807703)*px);\nsj5array[0]=(((cj4*x1694))+((cj4*x1693))+((sj4*x1693))+(((-1.0)*sj4*x1694)));\nif( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j5valid[0] = j5valid[1] = true;\n    j5array[0] = IKasin(sj5array[0]);\n    cj5array[0] = IKcos(j5array[0]);\n    sj5array[1] = sj5array[0];\n    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);\n    cj5array[1] = -cj5array[0];\n}\nelse if( isnan(sj5array[0]) )\n{\n    // probably any value will work\n    j5valid[0] = true;\n    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;\n}\nfor(int ij5 = 0; ij5 < 2; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 2; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[4];\nIkReal x1695=IKcos(j5);\nIkReal x1696=IKsin(j5);\nIkReal x1697=(cj4*px);\nIkReal x1698=(cj4*py);\nIkReal x1699=(px*sj4);\nIkReal x1700=(py*sj4);\nIkReal x1701=((0.777817459305202)*x1696);\nIkReal x1702=((0.707106781186548)*x1696);\nIkReal x1703=((0.707106781186548)*x1695);\nevalcond[0]=((-0.85)*x1695);\nevalcond[1]=((((-1.0)*x1698*x1703))+(((-1.0)*x1700*x1703))+((x1699*x1703))+(((-1.0)*x1697*x1703)));\nevalcond[2]=((-0.85)+((x1697*x1702))+(((-1.0)*x1699*x1702))+((x1700*x1702))+((x1698*x1702)));\nevalcond[3]=((-0.935)+((x1697*x1701))+(((0.0636396103067893)*x1699))+(((0.0636396103067893)*x1697))+(((-0.0636396103067893)*x1698))+(((-1.0)*x1699*x1701))+((x1700*x1701))+(((0.0636396103067893)*x1700))+((x1698*x1701)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((IKabs(px))+(IKabs(py)));\nevalcond[1]=0.7225;\nevalcond[2]=0;\nevalcond[3]=-0.85;\nevalcond[4]=-0.935;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j5eval[1];\npz=0;\nj7=0;\nsj7=0;\ncj7=1.0;\npp=0;\nnpx=0;\nnpy=0;\nnpz=0;\nrxp0_0=0;\nrxp0_1=0;\nrxp1_0=0;\nrxp1_1=0;\nrxp2_0=0;\nrxp2_1=0;\npx=0;\npy=0;\nrxp0_2=0;\nrxp1_2=0;\nrxp2_2=0;\nj5eval[0]=1.0;\nif( IKabs(j5eval[0]) < 0.0000000100000000  )\n{\ncontinue; // no branches [j5]\n\n} else\n{\nIkReal op[2+1], zeror[2];\nint numroots;\nop[0]=1.0;\nop[1]=0;\nop[2]=-1.0;\npolyroots2(op,zeror,numroots);\nIkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];\nint numsolutions = 0;\nfor(int ij5 = 0; ij5 < numroots; ++ij5)\n{\nIkReal htj5 = zeror[ij5];\ntempj5array[0]=((2.0)*(atan(htj5)));\nfor(int kj5 = 0; kj5 < 1; ++kj5)\n{\nj5array[numsolutions] = tempj5array[kj5];\nif( j5array[numsolutions] > IKPI )\n{\n    j5array[numsolutions]-=IK2PI;\n}\nelse if( j5array[numsolutions] < -IKPI )\n{\n    j5array[numsolutions]+=IK2PI;\n}\nsj5array[numsolutions] = IKsin(j5array[numsolutions]);\ncj5array[numsolutions] = IKcos(j5array[numsolutions]);\nnumsolutions++;\n}\n}\nbool j5valid[2]={true,true};\n_nj5 = 2;\nfor(int ij5 = 0; ij5 < numsolutions; ++ij5)\n    {\nif( !j5valid[ij5] )\n{\n    continue;\n}\n    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\nhtj5 = IKtan(j5/2);\n\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nrotationfunction0(solutions);\n    }\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j5]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n}\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x1704=(py*sj4);\nIkReal x1705=((0.707106781186548)*cj6);\nIkReal x1706=(cj4*py);\nIkReal x1707=(cj4*px);\nIkReal x1708=(px*sj4);\nIkReal x1709=((0.707106781186548)*sj6);\nIkReal x1710=(sj4*x1709);\nCheckValue<IkReal> x1711=IKPowWithIntegerCheck(((((-14.142135623731)*x1708))+(((14.142135623731)*x1707))+(((14.142135623731)*x1706))+(((14.142135623731)*x1704))),-1);\nif(!x1711.valid){\ncontinue;\n}\nCheckValue<IkReal> x1712=IKPowWithIntegerCheck(((((-1.0)*x1708*x1709))+((x1706*x1709))+((x1704*x1709))+((x1707*x1709))),-1);\nif(!x1712.valid){\ncontinue;\n}\nif( IKabs(((17.0)*(x1711.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1712.value)*((((x1705*x1706))+(((-1.0)*x1704*x1705))+(((-1.0)*x1705*x1708))+(((-1.0)*x1705*x1707)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.0)*(x1711.value)))+IKsqr(((x1712.value)*((((x1705*x1706))+(((-1.0)*x1704*x1705))+(((-1.0)*x1705*x1708))+(((-1.0)*x1705*x1707))))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2(((17.0)*(x1711.value)), ((x1712.value)*((((x1705*x1706))+(((-1.0)*x1704*x1705))+(((-1.0)*x1705*x1708))+(((-1.0)*x1705*x1707))))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[6];\nIkReal x1713=IKsin(j5);\nIkReal x1714=IKcos(j5);\nIkReal x1715=(cj4*px);\nIkReal x1716=(px*sj4);\nIkReal x1717=((0.707106781186548)*sj6);\nIkReal x1718=((0.0636396103067893)*sj6);\nIkReal x1719=(cj4*py);\nIkReal x1720=(py*sj4);\nIkReal x1721=((0.707106781186548)*x1719);\nIkReal x1722=(cj6*x1716);\nIkReal x1723=((0.0636396103067893)*x1714);\nIkReal x1724=(sj6*x1714);\nIkReal x1725=((0.707106781186548)*x1714);\nIkReal x1726=((0.777817459305202)*x1713);\nIkReal x1727=((0.707106781186548)*x1713);\nIkReal x1728=(x1713*x1719);\nIkReal x1729=((0.707106781186548)*cj6*x1720);\nIkReal x1730=(x1713*x1720);\nevalcond[0]=((-0.85)*x1714);\nevalcond[1]=((((0.85)*x1713))+(((-0.707106781186548)*x1715))+(((0.707106781186548)*x1716))+(((-0.707106781186548)*x1720))+(((-1.0)*x1721)));\nevalcond[2]=((-0.85)+((x1715*x1727))+((x1720*x1727))+((x1713*x1721))+(((-1.0)*x1716*x1727)));\nevalcond[3]=(x1729+(((0.707106781186548)*cj6*x1715))+((x1714*x1717*x1720))+(((-1.0)*x1714*x1716*x1717))+(((-1.0)*cj6*x1721))+(((0.707106781186548)*x1722))+((x1714*x1715*x1717))+((x1714*x1717*x1719)));\nevalcond[4]=(((x1722*x1725))+(((-1.0)*cj6*x1715*x1725))+((x1716*x1717))+(((-1.0)*cj6*x1714*x1721))+((x1717*x1720))+((x1715*x1717))+(((-1.0)*cj6*x1720*x1725))+(((-1.0)*x1717*x1719)));\nevalcond[5]=((-0.935)+((cj6*x1719*x1723))+((cj6*x1720*x1723))+((x1715*x1726))+(((-1.0)*x1722*x1723))+(((-1.0)*x1716*x1718))+((x1720*x1726))+((cj6*x1715*x1723))+(((-1.0)*x1715*x1718))+(((-1.0)*x1718*x1720))+((x1719*x1726))+(((-1.0)*x1716*x1726))+((x1718*x1719)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x1731=((0.707106781186548)*py);\nIkReal x1732=(cj6*sj4);\nIkReal x1733=(cj4*sj6);\nIkReal x1734=(cj4*cj6);\nIkReal x1735=((0.707106781186548)*px);\nIkReal x1736=((0.831890330807703)*py);\nIkReal x1737=((0.831890330807703)*px);\nIkReal x1738=((0.707106781186548)*sj4*sj6);\nCheckValue<IkReal> x1739=IKPowWithIntegerCheck(((((-1.0)*x1731*x1732))+(((-1.0)*x1731*x1734))+((x1732*x1735))+(((-1.0)*x1734*x1735))),-1);\nif(!x1739.valid){\ncontinue;\n}\nif( IKabs((((sj4*x1736))+(((-1.0)*sj4*x1737))+((cj4*x1736))+((cj4*x1737)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1739.value)*(((((-1.0)*x1733*x1735))+(((-1.0)*sj4*sj6*x1735))+(((-1.0)*sj4*sj6*x1731))+((x1731*x1733)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x1736))+(((-1.0)*sj4*x1737))+((cj4*x1736))+((cj4*x1737))))+IKsqr(((x1739.value)*(((((-1.0)*x1733*x1735))+(((-1.0)*sj4*sj6*x1735))+(((-1.0)*sj4*sj6*x1731))+((x1731*x1733))))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2((((sj4*x1736))+(((-1.0)*sj4*x1737))+((cj4*x1736))+((cj4*x1737))), ((x1739.value)*(((((-1.0)*x1733*x1735))+(((-1.0)*sj4*sj6*x1735))+(((-1.0)*sj4*sj6*x1731))+((x1731*x1733))))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[6];\nIkReal x1740=IKsin(j5);\nIkReal x1741=IKcos(j5);\nIkReal x1742=(cj4*px);\nIkReal x1743=(px*sj4);\nIkReal x1744=((0.707106781186548)*sj6);\nIkReal x1745=((0.0636396103067893)*sj6);\nIkReal x1746=(cj4*py);\nIkReal x1747=(py*sj4);\nIkReal x1748=((0.707106781186548)*x1746);\nIkReal x1749=(cj6*x1743);\nIkReal x1750=((0.0636396103067893)*x1741);\nIkReal x1751=(sj6*x1741);\nIkReal x1752=((0.707106781186548)*x1741);\nIkReal x1753=((0.777817459305202)*x1740);\nIkReal x1754=((0.707106781186548)*x1740);\nIkReal x1755=(x1740*x1746);\nIkReal x1756=((0.707106781186548)*cj6*x1747);\nIkReal x1757=(x1740*x1747);\nevalcond[0]=((-0.85)*x1741);\nevalcond[1]=((((0.707106781186548)*x1743))+(((-1.0)*x1748))+(((0.85)*x1740))+(((-0.707106781186548)*x1747))+(((-0.707106781186548)*x1742)));\nevalcond[2]=((-0.85)+((x1747*x1754))+((x1742*x1754))+((x1740*x1748))+(((-1.0)*x1743*x1754)));\nevalcond[3]=((((0.707106781186548)*cj6*x1742))+(((0.707106781186548)*x1749))+x1756+((x1741*x1742*x1744))+(((-1.0)*cj6*x1748))+(((-1.0)*x1741*x1743*x1744))+((x1741*x1744*x1746))+((x1741*x1744*x1747)));\nevalcond[4]=(((x1749*x1752))+((x1744*x1747))+(((-1.0)*cj6*x1747*x1752))+(((-1.0)*cj6*x1742*x1752))+(((-1.0)*cj6*x1741*x1748))+((x1742*x1744))+(((-1.0)*x1744*x1746))+((x1743*x1744)));\nevalcond[5]=((-0.935)+((x1746*x1753))+((x1747*x1753))+((x1745*x1746))+(((-1.0)*x1749*x1750))+(((-1.0)*x1745*x1747))+((cj6*x1742*x1750))+((x1742*x1753))+((cj6*x1746*x1750))+((cj6*x1747*x1750))+(((-1.0)*x1743*x1753))+(((-1.0)*x1742*x1745))+(((-1.0)*x1743*x1745)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x1758=((0.707106781186548)*py);\nIkReal x1759=(cj6*sj4);\nIkReal x1760=(cj4*sj6);\nIkReal x1761=(cj4*cj6);\nIkReal x1762=((0.707106781186548)*px);\nIkReal x1763=((0.831890330807703)*py);\nIkReal x1764=((0.831890330807703)*px);\nIkReal x1765=((0.707106781186548)*sj4*sj6);\nCheckValue<IkReal> x1766=IKPowWithIntegerCheck(((((-1.0)*sj4*sj6*x1762))+((x1758*x1760))+((sj4*sj6*x1758))+((x1760*x1762))),-1);\nif(!x1766.valid){\ncontinue;\n}\nif( IKabs((((cj4*x1764))+((cj4*x1763))+((sj4*x1763))+(((-1.0)*sj4*x1764)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1766.value)*(((((-1.0)*x1758*x1759))+(((-1.0)*x1759*x1762))+(((-1.0)*x1761*x1762))+((x1758*x1761)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x1764))+((cj4*x1763))+((sj4*x1763))+(((-1.0)*sj4*x1764))))+IKsqr(((x1766.value)*(((((-1.0)*x1758*x1759))+(((-1.0)*x1759*x1762))+(((-1.0)*x1761*x1762))+((x1758*x1761))))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj5array[0]=IKatan2((((cj4*x1764))+((cj4*x1763))+((sj4*x1763))+(((-1.0)*sj4*x1764))), ((x1766.value)*(((((-1.0)*x1758*x1759))+(((-1.0)*x1759*x1762))+(((-1.0)*x1761*x1762))+((x1758*x1761))))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[6];\nIkReal x1767=IKsin(j5);\nIkReal x1768=IKcos(j5);\nIkReal x1769=(cj4*px);\nIkReal x1770=(px*sj4);\nIkReal x1771=((0.707106781186548)*sj6);\nIkReal x1772=((0.0636396103067893)*sj6);\nIkReal x1773=(cj4*py);\nIkReal x1774=(py*sj4);\nIkReal x1775=((0.707106781186548)*x1773);\nIkReal x1776=(cj6*x1770);\nIkReal x1777=((0.0636396103067893)*x1768);\nIkReal x1778=(sj6*x1768);\nIkReal x1779=((0.707106781186548)*x1768);\nIkReal x1780=((0.777817459305202)*x1767);\nIkReal x1781=((0.707106781186548)*x1767);\nIkReal x1782=(x1767*x1773);\nIkReal x1783=((0.707106781186548)*cj6*x1774);\nIkReal x1784=(x1767*x1774);\nevalcond[0]=((-0.85)*x1768);\nevalcond[1]=((((0.85)*x1767))+(((0.707106781186548)*x1770))+(((-0.707106781186548)*x1774))+(((-0.707106781186548)*x1769))+(((-1.0)*x1775)));\nevalcond[2]=((-0.85)+(((-1.0)*x1770*x1781))+((x1767*x1775))+((x1774*x1781))+((x1769*x1781)));\nevalcond[3]=(x1783+(((0.707106781186548)*x1776))+((x1768*x1769*x1771))+(((-1.0)*x1768*x1770*x1771))+(((0.707106781186548)*cj6*x1769))+((x1768*x1771*x1773))+((x1768*x1771*x1774))+(((-1.0)*cj6*x1775)));\nevalcond[4]=(((x1771*x1774))+((x1776*x1779))+((x1770*x1771))+(((-1.0)*x1771*x1773))+(((-1.0)*cj6*x1769*x1779))+(((-1.0)*cj6*x1768*x1775))+(((-1.0)*cj6*x1774*x1779))+((x1769*x1771)));\nevalcond[5]=((-0.935)+(((-1.0)*x1770*x1780))+(((-1.0)*x1772*x1774))+((x1774*x1780))+(((-1.0)*x1776*x1777))+((cj6*x1769*x1777))+((cj6*x1774*x1777))+((x1769*x1780))+(((-1.0)*x1770*x1772))+((cj6*x1773*x1777))+((x1772*x1773))+((x1773*x1780))+(((-1.0)*x1769*x1772)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j5]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x1785=cj6*cj6;\nIkReal x1786=cj7*cj7;\nIkReal x1787=((0.045)*pz);\nIkReal x1788=((0.3)*pz);\nIkReal x1789=((0.0318198051533946)*py);\nIkReal x1790=(sj4*sj7);\nIkReal x1791=(cj4*cj6);\nIkReal x1792=((0.027)*sj7);\nIkReal x1793=(py*sj4);\nIkReal x1794=((0.212132034355964)*cj7);\nIkReal x1795=(cj6*sj4);\nIkReal x1796=((0.0318198051533946)*px);\nIkReal x1797=((0.212132034355964)*sj7);\nIkReal x1798=(cj4*py);\nIkReal x1799=(cj4*sj7);\nIkReal x1800=(px*sj4);\nIkReal x1801=((0.212132034355964)*cj6);\nIkReal x1802=(cj4*px);\nIkReal x1803=((0.087975)*x1786);\nIkReal x1804=(cj7*x1785);\nCheckValue<IkReal> x1805=IKPowWithIntegerCheck(IKsign(((-0.304525)+((x1785*x1803))+(((-1.0)*cj7*x1792))+(((-0.0495)*sj7))+((x1792*x1804))+(((-1.0)*x1785*x1792))+(((-1.0)*x1803))+(((0.00405)*x1804))+(((-0.092025)*x1785))+(((-0.33)*cj7)))),-1);\nif(!x1805.valid){\ncontinue;\n}\nCheckValue<IkReal> x1806 = IKatan2WithCheck(IkReal(((((-1.0)*x1796*x1799))+((cj6*x1787))+(((-1.0)*cj6*cj7*x1787))+((x1794*x1800))+(((-1.0)*x1794*x1802))+(((-1.0)*x1793*x1794))+(((-1.0)*x1789*x1790))+(((-1.0)*x1789*x1799))+((cj6*sj7*x1788))+(((-0.388908729652601)*x1802))+((x1790*x1796))+(((0.388908729652601)*x1800))+(((-0.388908729652601)*x1798))+(((-0.388908729652601)*x1793))+(((-1.0)*x1794*x1798)))),(((px*x1790*x1801))+(((-0.55)*pz))+(((-1.0)*cj7*x1788))+(((-1.0)*px*x1791*x1797))+((cj7*x1791*x1796))+(((-1.0)*py*x1791*x1797))+(((-1.0)*x1789*x1795))+(((-1.0)*x1789*x1791))+(((-1.0)*sj7*x1787))+(((-1.0)*cj7*x1795*x1796))+(((-1.0)*py*x1790*x1801))+((x1795*x1796))+((cj7*x1789*x1795))+((cj7*x1789*x1791))+(((-1.0)*x1791*x1796))),IKFAST_ATAN2_MAGTHRESH);\nif(!x1806.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1805.value)))+(x1806.value));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[6];\nIkReal x1807=IKsin(j5);\nIkReal x1808=IKcos(j5);\nIkReal x1809=((0.045)*cj7);\nIkReal x1810=((0.707106781186548)*cj4);\nIkReal x1811=(cj6*py);\nIkReal x1812=(py*sj6);\nIkReal x1813=(cj6*sj4);\nIkReal x1814=((0.707106781186548)*px);\nIkReal x1815=(sj4*sj6);\nIkReal x1816=((0.3)*cj7);\nIkReal x1817=((0.3)*sj7);\nIkReal x1818=((0.045)*sj7);\nIkReal x1819=((0.0636396103067893)*px);\nIkReal x1820=((0.707106781186548)*sj4);\nIkReal x1821=((0.0636396103067893)*cj4);\nIkReal x1822=(cj6*x1807);\nIkReal x1823=(px*x1808);\nIkReal x1824=(cj6*x1808);\nIkReal x1825=(sj4*x1808);\nIkReal x1826=(pz*x1808);\nIkReal x1827=(cj4*py*x1807);\nIkReal x1828=(x1811*x1820);\nIkReal x1829=(py*sj4*x1807);\nIkReal x1830=((0.777817459305202)*px*x1807);\nevalcond[0]=((((-1.0)*x1808*x1818))+(((-1.0)*x1808*x1816))+(((-1.0)*x1809*x1822))+pz+((x1817*x1822))+(((-0.55)*x1808))+(((0.045)*x1822)));\nevalcond[1]=((-0.55)+(((-1.0)*x1818))+(((-1.0)*x1816))+((py*x1807*x1810))+((py*x1807*x1820))+((px*x1807*x1810))+x1826+(((-1.0)*sj4*x1807*x1814)));\nevalcond[2]=((((-1.0)*py*x1820))+(((-1.0)*x1809*x1824))+(((0.55)*x1807))+((x1807*x1816))+((x1807*x1818))+(((-1.0)*py*x1810))+((sj4*x1814))+((x1817*x1824))+(((0.045)*x1824))+(((-1.0)*px*x1810)));\nevalcond[3]=((((-1.0)*pz*sj6*x1807))+((sj6*x1810*x1823))+(((-1.0)*x1808*x1814*x1815))+((x1813*x1814))+(((-1.0)*x1810*x1811))+((cj6*px*x1810))+((x1808*x1812*x1820))+x1828+((x1808*x1810*x1812)));\nevalcond[4]=((0.045)+((pz*x1822))+((x1812*x1820))+((x1808*x1813*x1814))+(((-1.0)*x1810*x1812))+(((-1.0)*x1809))+(((-1.0)*cj6*x1810*x1823))+((x1814*x1815))+x1817+(((-1.0)*x1808*x1810*x1811))+(((-1.0)*x1808*x1828))+((px*sj6*x1810)));\nevalcond[5]=((-0.2125)+(((-1.0)*sj4*x1830))+(((-0.0636396103067893)*sj4*x1812))+(((-1.0)*cj4*sj6*x1819))+((x1812*x1821))+((cj4*x1819*x1824))+(((-0.09)*pz*x1822))+(((-1.0)*x1808*x1813*x1819))+(((0.0636396103067893)*x1811*x1825))+((x1808*x1811*x1821))+(((-1.0)*pp))+((cj4*x1830))+(((-1.0)*x1815*x1819))+(((0.777817459305202)*x1829))+(((0.777817459305202)*x1827))+(((1.1)*x1826)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x1831=py*py;\nIkReal x1832=cj7*cj7;\nIkReal x1833=px*px;\nIkReal x1834=(cj6*sj7);\nIkReal x1835=(cj4*py);\nIkReal x1836=(cj6*cj7);\nIkReal x1837=(px*sj4);\nIkReal x1838=((0.707106781186548)*pz);\nIkReal x1839=(cj4*px);\nIkReal x1840=(px*py);\nIkReal x1841=(py*sj4);\nIkReal x1842=((0.0318198051533946)*cj6);\nIkReal x1843=(cj4*sj4);\nCheckValue<IkReal> x1844=IKPowWithIntegerCheck(IKsign(((((-0.212132034355964)*x1834*x1837))+(((-0.55)*pz))+(((-0.0318198051533946)*x1835*x1836))+(((-0.0318198051533946)*x1836*x1841))+(((0.0318198051533946)*x1836*x1837))+(((-0.3)*cj7*pz))+(((-0.045)*pz*sj7))+(((0.212132034355964)*x1834*x1835))+(((0.212132034355964)*x1834*x1839))+((x1839*x1842))+(((-0.0318198051533946)*x1836*x1839))+(((-1.0)*x1837*x1842))+(((0.212132034355964)*x1834*x1841))+((x1841*x1842))+((x1835*x1842)))),-1);\nif(!x1844.valid){\ncontinue;\n}\nCheckValue<IkReal> x1845 = IKatan2WithCheck(IkReal(((((-1.0)*x1838*x1839))+(((0.167025)*x1834))+(((-0.01125)*x1836))+(((-1.0)*x1835*x1838))+(((-0.027)*cj6*x1832))+((x1837*x1838))+(((-1.0)*x1838*x1841))+(((0.087975)*cj7*x1834))+(((0.03825)*cj6)))),((-0.304525)+(((-0.027)*cj7*sj7))+(((0.5)*x1831))+(((0.5)*x1833))+(((-0.0495)*sj7))+((x1831*x1843))+(((2.0)*x1835*x1839))+(((-1.0)*x1833*x1843))+(((-1.0)*x1840))+(((-0.087975)*x1832))+(((-0.33)*cj7))),IKFAST_ATAN2_MAGTHRESH);\nif(!x1845.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1844.value)))+(x1845.value));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[6];\nIkReal x1846=IKsin(j5);\nIkReal x1847=IKcos(j5);\nIkReal x1848=((0.045)*cj7);\nIkReal x1849=((0.707106781186548)*cj4);\nIkReal x1850=(cj6*py);\nIkReal x1851=(py*sj6);\nIkReal x1852=(cj6*sj4);\nIkReal x1853=((0.707106781186548)*px);\nIkReal x1854=(sj4*sj6);\nIkReal x1855=((0.3)*cj7);\nIkReal x1856=((0.3)*sj7);\nIkReal x1857=((0.045)*sj7);\nIkReal x1858=((0.0636396103067893)*px);\nIkReal x1859=((0.707106781186548)*sj4);\nIkReal x1860=((0.0636396103067893)*cj4);\nIkReal x1861=(cj6*x1846);\nIkReal x1862=(px*x1847);\nIkReal x1863=(cj6*x1847);\nIkReal x1864=(sj4*x1847);\nIkReal x1865=(pz*x1847);\nIkReal x1866=(cj4*py*x1846);\nIkReal x1867=(x1850*x1859);\nIkReal x1868=(py*sj4*x1846);\nIkReal x1869=((0.777817459305202)*px*x1846);\nevalcond[0]=((((0.045)*x1861))+((x1856*x1861))+(((-1.0)*x1848*x1861))+(((-0.55)*x1847))+pz+(((-1.0)*x1847*x1855))+(((-1.0)*x1847*x1857)));\nevalcond[1]=((-0.55)+((py*x1846*x1859))+(((-1.0)*sj4*x1846*x1853))+((px*x1846*x1849))+x1865+((py*x1846*x1849))+(((-1.0)*x1855))+(((-1.0)*x1857)));\nevalcond[2]=((((0.045)*x1863))+(((-1.0)*px*x1849))+(((0.55)*x1846))+((sj4*x1853))+((x1846*x1855))+((x1846*x1857))+(((-1.0)*py*x1859))+((x1856*x1863))+(((-1.0)*x1848*x1863))+(((-1.0)*py*x1849)));\nevalcond[3]=((((-1.0)*x1847*x1853*x1854))+((x1852*x1853))+(((-1.0)*x1849*x1850))+((x1847*x1851*x1859))+((x1847*x1849*x1851))+x1867+(((-1.0)*pz*sj6*x1846))+((cj6*px*x1849))+((sj6*x1849*x1862)));\nevalcond[4]=((0.045)+(((-1.0)*cj6*x1849*x1862))+((pz*x1861))+(((-1.0)*x1849*x1851))+((x1851*x1859))+((px*sj6*x1849))+(((-1.0)*x1848))+((x1847*x1852*x1853))+(((-1.0)*x1847*x1867))+((x1853*x1854))+x1856+(((-1.0)*x1847*x1849*x1850)));\nevalcond[5]=((-0.2125)+((x1851*x1860))+(((-1.0)*sj4*x1869))+(((1.1)*x1865))+(((-1.0)*cj4*sj6*x1858))+((cj4*x1869))+((cj4*x1858*x1863))+(((-1.0)*pp))+(((-1.0)*x1847*x1852*x1858))+(((0.0636396103067893)*x1850*x1864))+(((0.777817459305202)*x1868))+(((0.777817459305202)*x1866))+(((-0.0636396103067893)*sj4*x1851))+(((-0.09)*pz*x1861))+((x1847*x1850*x1860))+(((-1.0)*x1854*x1858)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[1], cj5array[1], sj5array[1];\nbool j5valid[1]={false};\n_nj5 = 1;\nIkReal x1870=cj7*cj7;\nIkReal x1871=(cj6*sj7);\nIkReal x1872=(py*sj4);\nIkReal x1873=((0.212132034355964)*cj7);\nIkReal x1874=(px*sj4);\nIkReal x1875=((0.707106781186548)*pz);\nIkReal x1876=(cj6*cj7);\nIkReal x1877=(cj4*px);\nIkReal x1878=((0.0318198051533946)*sj7);\nIkReal x1879=((0.045)*pz);\nIkReal x1880=(cj4*py);\nIkReal x1881=(py*x1878);\nIkReal x1882=(cj4*x1875);\nCheckValue<IkReal> x1883 = IKatan2WithCheck(IkReal(((-0.304525)+(((-0.027)*cj7*sj7))+(((-0.0495)*sj7))+(((-0.087975)*x1870))+(pz*pz)+(((-0.33)*cj7)))),((((-1.0)*x1872*x1875))+(((-0.087975)*cj7*x1871))+((x1874*x1875))+(((-1.0)*x1875*x1880))+(((0.01125)*x1876))+(((-0.167025)*x1871))+(((-1.0)*x1875*x1877))+(((0.027)*cj6*x1870))+(((-0.03825)*cj6))),IKFAST_ATAN2_MAGTHRESH);\nif(!x1883.valid){\ncontinue;\n}\nCheckValue<IkReal> x1884=IKPowWithIntegerCheck(IKsign(((((0.388908729652601)*x1874))+(((-1.0)*x1873*x1877))+(((-1.0)*x1873*x1880))+(((-1.0)*x1872*x1873))+(((-1.0)*x1872*x1878))+((x1876*x1879))+((x1874*x1878))+(((-1.0)*cj6*x1879))+(((-1.0)*x1877*x1878))+(((-1.0)*x1878*x1880))+(((-0.388908729652601)*x1880))+(((-0.3)*pz*x1871))+(((-0.388908729652601)*x1877))+(((-0.388908729652601)*x1872))+((x1873*x1874)))),-1);\nif(!x1884.valid){\ncontinue;\n}\nj5array[0]=((-1.5707963267949)+(x1883.value)+(((1.5707963267949)*(x1884.value))));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nfor(int ij5 = 0; ij5 < 1; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 1; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n{\nIkReal evalcond[6];\nIkReal x1885=IKsin(j5);\nIkReal x1886=IKcos(j5);\nIkReal x1887=((0.045)*cj7);\nIkReal x1888=((0.707106781186548)*cj4);\nIkReal x1889=(cj6*py);\nIkReal x1890=(py*sj6);\nIkReal x1891=(cj6*sj4);\nIkReal x1892=((0.707106781186548)*px);\nIkReal x1893=(sj4*sj6);\nIkReal x1894=((0.3)*cj7);\nIkReal x1895=((0.3)*sj7);\nIkReal x1896=((0.045)*sj7);\nIkReal x1897=((0.0636396103067893)*px);\nIkReal x1898=((0.707106781186548)*sj4);\nIkReal x1899=((0.0636396103067893)*cj4);\nIkReal x1900=(cj6*x1885);\nIkReal x1901=(px*x1886);\nIkReal x1902=(cj6*x1886);\nIkReal x1903=(sj4*x1886);\nIkReal x1904=(pz*x1886);\nIkReal x1905=(cj4*py*x1885);\nIkReal x1906=(x1889*x1898);\nIkReal x1907=(py*sj4*x1885);\nIkReal x1908=((0.777817459305202)*px*x1885);\nevalcond[0]=((((0.045)*x1900))+(((-0.55)*x1886))+(((-1.0)*x1887*x1900))+(((-1.0)*x1886*x1894))+(((-1.0)*x1886*x1896))+((x1895*x1900))+pz);\nevalcond[1]=((-0.55)+((px*x1885*x1888))+((py*x1885*x1888))+x1904+((py*x1885*x1898))+(((-1.0)*x1896))+(((-1.0)*x1894))+(((-1.0)*sj4*x1885*x1892)));\nevalcond[2]=((((0.55)*x1885))+(((-1.0)*px*x1888))+((x1885*x1896))+((x1885*x1894))+(((0.045)*x1902))+(((-1.0)*x1887*x1902))+((x1895*x1902))+((sj4*x1892))+(((-1.0)*py*x1888))+(((-1.0)*py*x1898)));\nevalcond[3]=(((sj6*x1888*x1901))+(((-1.0)*pz*sj6*x1885))+(((-1.0)*x1888*x1889))+((x1886*x1888*x1890))+((x1891*x1892))+x1906+((cj6*px*x1888))+(((-1.0)*x1886*x1892*x1893))+((x1886*x1890*x1898)));\nevalcond[4]=((0.045)+(((-1.0)*x1886*x1888*x1889))+((px*sj6*x1888))+((x1892*x1893))+(((-1.0)*cj6*x1888*x1901))+(((-1.0)*x1886*x1906))+(((-1.0)*x1888*x1890))+((pz*x1900))+x1895+(((-1.0)*x1887))+((x1886*x1891*x1892))+((x1890*x1898)));\nevalcond[5]=((-0.2125)+(((-1.0)*x1893*x1897))+((cj4*x1908))+((cj4*x1897*x1902))+(((-1.0)*cj4*sj6*x1897))+(((1.1)*x1904))+(((-0.0636396103067893)*sj4*x1890))+(((-0.09)*pz*x1900))+((x1886*x1889*x1899))+(((-1.0)*pp))+(((0.777817459305202)*x1907))+(((0.777817459305202)*x1905))+(((0.0636396103067893)*x1889*x1903))+(((-1.0)*x1886*x1891*x1897))+(((-1.0)*sj4*x1908))+((x1890*x1899)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j5array[2], cj5array[2], sj5array[2];\nbool j5valid[2]={false};\n_nj5 = 2;\nIkReal x1909=((0.045)*cj6);\nIkReal x1910=((-0.55)+(((-0.045)*sj7))+(((-0.3)*cj7)));\nIkReal x1911=((((-1.0)*cj7*x1909))+(((0.3)*cj6*sj7))+x1909);\nCheckValue<IkReal> x1914 = IKatan2WithCheck(IkReal(x1910),x1911,IKFAST_ATAN2_MAGTHRESH);\nif(!x1914.valid){\ncontinue;\n}\nIkReal x1912=((1.0)*(x1914.value));\nif((((x1910*x1910)+(x1911*x1911))) < -0.00001)\ncontinue;\nCheckValue<IkReal> x1915=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1910*x1910)+(x1911*x1911)))),-1);\nif(!x1915.valid){\ncontinue;\n}\nif( ((pz*(x1915.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x1915.value))) > 1+IKFAST_SINCOS_THRESH )\n    continue;\nIkReal x1913=IKasin((pz*(x1915.value)));\nj5array[0]=((((-1.0)*x1913))+(((-1.0)*x1912)));\nsj5array[0]=IKsin(j5array[0]);\ncj5array[0]=IKcos(j5array[0]);\nj5array[1]=((3.14159265358979)+x1913+(((-1.0)*x1912)));\nsj5array[1]=IKsin(j5array[1]);\ncj5array[1]=IKcos(j5array[1]);\nif( j5array[0] > IKPI )\n{\n    j5array[0]-=IK2PI;\n}\nelse if( j5array[0] < -IKPI )\n{    j5array[0]+=IK2PI;\n}\nj5valid[0] = true;\nif( j5array[1] > IKPI )\n{\n    j5array[1]-=IK2PI;\n}\nelse if( j5array[1] < -IKPI )\n{    j5array[1]+=IK2PI;\n}\nj5valid[1] = true;\nfor(int ij5 = 0; ij5 < 2; ++ij5)\n{\nif( !j5valid[ij5] )\n{\n    continue;\n}\n_ij5[0] = ij5; _ij5[1] = -1;\nfor(int iij5 = ij5+1; iij5 < 2; ++iij5)\n{\nif( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )\n{\n    j5valid[iij5]=false; _ij5[1] = iij5; break; \n}\n}\nj5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];\n\n{\nIkReal j4eval[2];\nIkReal x1916=((((-1.0)*pp*sj5))+((sj5*(pz*pz))));\nj4eval[0]=x1916;\nj4eval[1]=IKsign(x1916);\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j4eval[2];\nIkReal x1917=(cj6*sj5);\nIkReal x1918=((((-1.0)*x1917*(pz*pz)))+((pp*x1917)));\nj4eval[0]=x1918;\nj4eval[1]=IKsign(x1918);\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j4eval[2];\nIkReal x1919=(pp+(((-1.0)*(pz*pz))));\nj4eval[0]=x1919;\nj4eval[1]=IKsign(x1919);\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[4];\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));\nevalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));\nevalcond[2]=((((-0.55)*cj5))+(((-0.3)*cj5*cj7))+(((-0.045)*cj5*sj7))+pz);\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j4eval[2];\nsj6=1.0;\ncj6=0;\nj6=1.5707963267949;\nIkReal x1920=pz*pz;\nIkReal x1921=(cj5*pp);\nIkReal x1922=(cj5*x1920);\nj4eval[0]=((((-1.0)*x1922))+x1921);\nj4eval[1]=IKsign(((((0.09)*x1921))+(((-0.09)*x1922))));\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j4eval[2];\nsj6=1.0;\ncj6=0;\nj6=1.5707963267949;\nIkReal x1923=(pp+(((-1.0)*(pz*pz))));\nj4eval[0]=x1923;\nj4eval[1]=IKsign(x1923);\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j4eval[2];\nsj6=1.0;\ncj6=0;\nj6=1.5707963267949;\nIkReal x1924=((((-1.0)*pp*sj5))+((sj5*(pz*pz))));\nj4eval[0]=x1924;\nj4eval[1]=IKsign(x1924);\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[4];\nbool bgotonextstatement = true;\ndo\n{\nIkReal x1925=((-0.55)+(((-0.045)*sj7))+(((-0.3)*cj7))+pz);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));\nevalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));\nevalcond[2]=x1925;\nevalcond[3]=x1925;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j4eval[3];\nsj6=1.0;\ncj6=0;\nj6=1.5707963267949;\nsj5=0;\ncj5=1.0;\nj5=0;\nIkReal x1926=pz*pz;\nIkReal x1927=cj7*cj7;\nIkReal x1928=sj7*sj7;\nIkReal x1929=((2.0)*cj7);\nIkReal x1930=((1.0)*x1926);\nIkReal x1931=(pp+(((-1.0)*x1930)));\nIkReal x1932=((44.4444444444444)*x1928);\nIkReal x1933=((13.3333333333333)*pp*sj7);\nIkReal x1934=((13.3333333333333)*sj7*x1926);\nj4eval[0]=x1931;\nj4eval[1]=((((-1.0)*cj7*x1933))+((pp*x1927))+(((-1.0)*x1926*x1932))+x1933+(((-1.0)*pp*x1929))+pp+((cj7*x1934))+((x1926*x1929))+((pp*x1932))+(((-1.0)*x1927*x1930))+(((-1.0)*x1934))+(((-1.0)*x1930)));\nj4eval[2]=IKsign(x1931);\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal j4eval[3];\nsj6=1.0;\ncj6=0;\nj6=1.5707963267949;\nsj5=0;\ncj5=1.0;\nj5=0;\nIkReal x1935=pz*pz;\nIkReal x1936=pz*pz*pz;\nIkReal x1937=pp*pp;\nj4eval[0]=((((-1.0)*pp))+x1935);\nj4eval[1]=IKsign(((((-0.09)*pp))+(((0.09)*x1935))));\nj4eval[2]=((((-22.1453287197232)*x1935*x1937))+(((48.719723183391)*pp*x1936))+(((-1.0)*x1935))+(((17.3840830449827)*pp*x1935))+(((22.1453287197232)*(pp*pp*pp)))+(((9.41176470588235)*x1937))+(((-10.3529411764706)*pp*pz))+pp+(((-48.719723183391)*pz*x1937))+(((10.3529411764706)*x1936))+(((-26.7958477508651)*(x1935*x1935))));\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[3];\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));\nevalcond[1]=((0.7225)+(((-1.0)*pp)));\nevalcond[2]=((-0.85)+pz);\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j4eval[1];\nsj6=1.0;\ncj6=0;\nj6=1.5707963267949;\nsj5=0;\ncj5=1.0;\nj5=0;\nsj7=0;\ncj7=1.0;\nj7=0;\nj4eval[0]=(pp+(((-1.0)*(pz*pz))));\nif( IKabs(j4eval[0]) < 0.0000010000000000  )\n{\ncontinue; // 3 cases reached\n\n} else\n{\n{\nIkReal j4array[2], cj4array[2], sj4array[2];\nbool j4valid[2]={false};\n_nj4 = 2;\nIkReal x1938=((0.707106781186548)*py);\nIkReal x1939=((0.707106781186548)*px);\nCheckValue<IkReal> x1941 = IKatan2WithCheck(IkReal((x1939+(((-1.0)*x1938)))),(x1939+x1938),IKFAST_ATAN2_MAGTHRESH);\nif(!x1941.valid){\ncontinue;\n}\nIkReal x1940=x1941.value;\nj4array[0]=((-1.0)*x1940);\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nj4array[1]=((3.14159265358979)+(((-1.0)*x1940)));\nsj4array[1]=IKsin(j4array[1]);\ncj4array[1]=IKcos(j4array[1]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nif( j4array[1] > IKPI )\n{\n    j4array[1]-=IK2PI;\n}\nelse if( j4array[1] < -IKPI )\n{    j4array[1]+=IK2PI;\n}\nj4valid[1] = true;\nfor(int ij4 = 0; ij4 < 2; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 2; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[2];\nIkReal x1942=IKcos(j4);\nIkReal x1943=IKsin(j4);\nIkReal x1944=((0.707106781186548)*py);\nIkReal x1945=((0.707106781186548)*px);\nIkReal x1946=((0.0636396103067893)*x1943);\nIkReal x1947=((0.0636396103067893)*x1942);\nevalcond[0]=(((x1943*x1945))+(((-1.0)*x1943*x1944))+(((-1.0)*x1942*x1945))+(((-1.0)*x1942*x1944)));\nevalcond[1]=(((py*x1947))+(((-1.0)*px*x1947))+(((-1.0)*px*x1946))+(((-1.0)*py*x1946)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j4]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x1948=((0.150260191002141)*px);\nIkReal x1949=((0.150260191002141)*py);\nIkReal x1950=((0.777817459305202)*pz);\nIkReal x1951=((0.707106781186548)*pp);\nIkReal x1952=(px*x1951);\nIkReal x1953=(py*x1950);\nIkReal x1954=(py*x1951);\nIkReal x1955=(px*x1950);\nIkReal x1956=(x1948+x1952);\nIkReal x1957=(x1949+x1954);\nCheckValue<IkReal> x1958=IKPowWithIntegerCheck(IKsign(((((-0.09)*pp))+(((0.09)*(pz*pz))))),-1);\nif(!x1958.valid){\ncontinue;\n}\nCheckValue<IkReal> x1959 = IKatan2WithCheck(IkReal(((((-1.0)*x1955))+(((-1.0)*x1953))+x1957+x1956)),((((-1.0)*x1957))+(((-1.0)*x1955))+x1956+x1953),IKFAST_ATAN2_MAGTHRESH);\nif(!x1959.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1958.value)))+(x1959.value));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[3];\nIkReal x1960=IKcos(j4);\nIkReal x1961=IKsin(j4);\nIkReal x1962=((0.707106781186548)*py);\nIkReal x1963=((0.0636396103067893)*px);\nIkReal x1964=((0.0636396103067893)*py);\nIkReal x1965=((0.707106781186548)*px);\nIkReal x1966=(x1960*x1965);\nIkReal x1967=(x1961*x1965);\nIkReal x1968=(x1961*x1962);\nIkReal x1969=(x1960*x1962);\nIkReal x1970=(x1968+x1966);\nevalcond[0]=((((-1.0)*x1969))+(((-1.0)*x1970))+x1967);\nevalcond[1]=((0.045)+(((-1.0)*x1969))+(((-0.045)*cj7))+x1967+x1970+(((0.3)*sj7)));\nevalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.0)*x1961*x1963))+(((-1.0)*x1961*x1964))+(((-1.0)*x1960*x1963))+((x1960*x1964))+(((1.1)*pz)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x1971=((0.0318198051533946)*py);\nIkReal x1972=((0.0318198051533946)*px);\nIkReal x1973=((0.212132034355964)*sj7);\nIkReal x1974=((0.0318198051533946)*cj7);\nIkReal x1975=(cj7*x1972);\nIkReal x1976=(py*x1973);\nIkReal x1977=(cj7*x1971);\nIkReal x1978=(px*x1973);\nIkReal x1979=(x1976+x1971);\nIkReal x1980=(x1978+x1972);\nCheckValue<IkReal> x1981=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);\nif(!x1981.valid){\ncontinue;\n}\nCheckValue<IkReal> x1982 = IKatan2WithCheck(IkReal(((((-1.0)*x1980))+(((-1.0)*x1979))+x1977+x1975)),((((-1.0)*x1980))+(((-1.0)*x1977))+x1979+x1975),IKFAST_ATAN2_MAGTHRESH);\nif(!x1982.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1981.value)))+(x1982.value));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[3];\nIkReal x1983=IKcos(j4);\nIkReal x1984=IKsin(j4);\nIkReal x1985=((0.707106781186548)*py);\nIkReal x1986=((0.0636396103067893)*px);\nIkReal x1987=((0.0636396103067893)*py);\nIkReal x1988=((0.707106781186548)*px);\nIkReal x1989=(x1983*x1988);\nIkReal x1990=(x1984*x1988);\nIkReal x1991=(x1984*x1985);\nIkReal x1992=(x1983*x1985);\nIkReal x1993=(x1989+x1991);\nevalcond[0]=(x1990+(((-1.0)*x1992))+(((-1.0)*x1993)));\nevalcond[1]=((0.045)+(((-0.045)*cj7))+x1990+x1993+(((-1.0)*x1992))+(((0.3)*sj7)));\nevalcond[2]=((-0.2125)+(((-1.0)*x1983*x1986))+(((-1.0)*x1984*x1987))+(((-1.0)*x1984*x1986))+(((-1.0)*pp))+(((1.1)*pz))+((x1983*x1987)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x1994=((0.045)*sj7);\nIkReal x1995=((0.3)*cj7);\nIkReal x1996=(x1995+x1994);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));\nevalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));\nevalcond[2]=((0.55)+x1996+pz);\nevalcond[3]=((-0.55)+(((-1.0)*pz))+(((-1.0)*x1996)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j4eval[3];\nsj6=1.0;\ncj6=0;\nj6=1.5707963267949;\nsj5=0;\ncj5=-1.0;\nj5=3.14159265358979;\nIkReal x1997=pz*pz;\nIkReal x1998=cj7*cj7;\nIkReal x1999=sj7*sj7;\nIkReal x2000=((2.0)*cj7);\nIkReal x2001=((1.0)*x1997);\nIkReal x2002=(pp+(((-1.0)*x2001)));\nIkReal x2003=((44.4444444444444)*x1999);\nIkReal x2004=((13.3333333333333)*pp*sj7);\nIkReal x2005=((13.3333333333333)*sj7*x1997);\nj4eval[0]=x2002;\nj4eval[1]=(((x1997*x2000))+(((-1.0)*x1998*x2001))+x2004+((pp*x1998))+((cj7*x2005))+((pp*x2003))+(((-1.0)*cj7*x2004))+pp+(((-1.0)*x2001))+(((-1.0)*x2005))+(((-1.0)*pp*x2000))+(((-1.0)*x1997*x2003)));\nj4eval[2]=IKsign(x2002);\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal j4eval[3];\nsj6=1.0;\ncj6=0;\nj6=1.5707963267949;\nsj5=0;\ncj5=-1.0;\nj5=3.14159265358979;\nIkReal x2006=pz*pz;\nIkReal x2007=pp*pp;\nIkReal x2008=pz*pz*pz;\nj4eval[0]=(x2006+(((-1.0)*pp)));\nj4eval[1]=IKsign(((((-0.09)*pp))+(((0.09)*x2006))));\nj4eval[2]=((((-22.1453287197232)*x2006*x2007))+(((9.41176470588235)*x2007))+(((-10.3529411764706)*x2008))+(((-26.7958477508651)*(x2006*x2006)))+(((22.1453287197232)*(pp*pp*pp)))+(((17.3840830449827)*pp*x2006))+pp+(((-1.0)*x2006))+(((-48.719723183391)*pp*x2008))+(((10.3529411764706)*pp*pz))+(((48.719723183391)*pz*x2007)));\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[3];\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));\nevalcond[1]=((0.7225)+(((-1.0)*pp)));\nevalcond[2]=((0.85)+pz);\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j4eval[1];\nsj6=1.0;\ncj6=0;\nj6=1.5707963267949;\nsj5=0;\ncj5=-1.0;\nj5=3.14159265358979;\nsj7=0;\ncj7=1.0;\nj7=0;\nj4eval[0]=(pp+(((-1.0)*(pz*pz))));\nif( IKabs(j4eval[0]) < 0.0000010000000000  )\n{\ncontinue; // 3 cases reached\n\n} else\n{\n{\nIkReal j4array[2], cj4array[2], sj4array[2];\nbool j4valid[2]={false};\n_nj4 = 2;\nIkReal x2009=((0.707106781186548)*py);\nIkReal x2010=((0.707106781186548)*px);\nCheckValue<IkReal> x2012 = IKatan2WithCheck(IkReal((x2010+(((-1.0)*x2009)))),(x2009+x2010),IKFAST_ATAN2_MAGTHRESH);\nif(!x2012.valid){\ncontinue;\n}\nIkReal x2011=x2012.value;\nj4array[0]=((-1.0)*x2011);\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nj4array[1]=((3.14159265358979)+(((-1.0)*x2011)));\nsj4array[1]=IKsin(j4array[1]);\ncj4array[1]=IKcos(j4array[1]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nif( j4array[1] > IKPI )\n{\n    j4array[1]-=IK2PI;\n}\nelse if( j4array[1] < -IKPI )\n{    j4array[1]+=IK2PI;\n}\nj4valid[1] = true;\nfor(int ij4 = 0; ij4 < 2; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 2; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[2];\nIkReal x2013=IKcos(j4);\nIkReal x2014=IKsin(j4);\nIkReal x2015=((0.707106781186548)*py);\nIkReal x2016=((0.707106781186548)*px);\nIkReal x2017=((0.0636396103067893)*x2014);\nIkReal x2018=((0.0636396103067893)*x2013);\nevalcond[0]=((((-1.0)*x2013*x2016))+(((-1.0)*x2013*x2015))+((x2014*x2016))+(((-1.0)*x2014*x2015)));\nevalcond[1]=(((py*x2018))+(((-1.0)*py*x2017))+(((-1.0)*px*x2017))+(((-1.0)*px*x2018)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j4]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2019=((0.150260191002141)*px);\nIkReal x2020=((0.150260191002141)*py);\nIkReal x2021=((0.777817459305202)*pz);\nIkReal x2022=((0.707106781186548)*pp);\nIkReal x2023=(px*x2022);\nIkReal x2024=(px*x2021);\nIkReal x2025=(py*x2022);\nIkReal x2026=(py*x2021);\nIkReal x2027=(x2025+x2026+x2020);\nIkReal x2028=(x2024+x2023+x2019);\nCheckValue<IkReal> x2029=IKPowWithIntegerCheck(IKsign(((((-0.09)*pp))+(((0.09)*(pz*pz))))),-1);\nif(!x2029.valid){\ncontinue;\n}\nCheckValue<IkReal> x2030 = IKatan2WithCheck(IkReal((x2027+x2028)),(x2028+(((-1.0)*x2027))),IKFAST_ATAN2_MAGTHRESH);\nif(!x2030.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2029.value)))+(x2030.value));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[3];\nIkReal x2031=IKcos(j4);\nIkReal x2032=IKsin(j4);\nIkReal x2033=((0.707106781186548)*py);\nIkReal x2034=((0.0636396103067893)*px);\nIkReal x2035=((0.0636396103067893)*py);\nIkReal x2036=((0.707106781186548)*px);\nIkReal x2037=(x2031*x2036);\nIkReal x2038=(x2032*x2036);\nIkReal x2039=(x2032*x2033);\nIkReal x2040=(x2031*x2033);\nIkReal x2041=(x2037+x2039);\nevalcond[0]=((((-1.0)*x2041))+(((-1.0)*x2040))+x2038);\nevalcond[1]=((0.045)+(((-1.0)*x2040))+x2041+x2038+(((-0.045)*cj7))+(((0.3)*sj7)));\nevalcond[2]=((-0.2125)+((x2031*x2035))+(((-1.0)*pp))+(((-1.1)*pz))+(((-1.0)*x2032*x2034))+(((-1.0)*x2032*x2035))+(((-1.0)*x2031*x2034)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2042=((0.0318198051533946)*py);\nIkReal x2043=((0.0318198051533946)*px);\nIkReal x2044=((0.212132034355964)*sj7);\nIkReal x2045=((0.0318198051533946)*cj7);\nIkReal x2046=(cj7*x2043);\nIkReal x2047=(py*x2044);\nIkReal x2048=(cj7*x2042);\nIkReal x2049=(px*x2044);\nIkReal x2050=(x2047+x2042);\nIkReal x2051=(x2043+x2049);\nCheckValue<IkReal> x2052 = IKatan2WithCheck(IkReal((x2046+x2048+(((-1.0)*x2050))+(((-1.0)*x2051)))),((((-1.0)*x2048))+x2046+x2050+(((-1.0)*x2051))),IKFAST_ATAN2_MAGTHRESH);\nif(!x2052.valid){\ncontinue;\n}\nCheckValue<IkReal> x2053=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);\nif(!x2053.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(x2052.value)+(((1.5707963267949)*(x2053.value))));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[3];\nIkReal x2054=IKcos(j4);\nIkReal x2055=IKsin(j4);\nIkReal x2056=((0.707106781186548)*py);\nIkReal x2057=((0.0636396103067893)*px);\nIkReal x2058=((0.0636396103067893)*py);\nIkReal x2059=((0.707106781186548)*px);\nIkReal x2060=(x2054*x2059);\nIkReal x2061=(x2055*x2059);\nIkReal x2062=(x2055*x2056);\nIkReal x2063=(x2054*x2056);\nIkReal x2064=(x2060+x2062);\nevalcond[0]=(x2061+(((-1.0)*x2064))+(((-1.0)*x2063)));\nevalcond[1]=((0.045)+x2061+x2064+(((-1.0)*x2063))+(((-0.045)*cj7))+(((0.3)*sj7)));\nevalcond[2]=((-0.2125)+(((-1.0)*x2054*x2057))+((x2054*x2058))+(((-1.0)*pp))+(((-1.1)*pz))+(((-1.0)*x2055*x2058))+(((-1.0)*x2055*x2057)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));\nevalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));\nevalcond[2]=pz;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j4eval[3];\nsj6=1.0;\ncj6=0;\nj6=1.5707963267949;\nsj5=1.0;\ncj5=0;\nj5=1.5707963267949;\nIkReal x2065=pz*pz;\nIkReal x2066=sj7*sj7;\nIkReal x2067=cj7*cj7;\nIkReal x2068=((4.26078431372549)*cj7);\nIkReal x2069=(x2065+(((-1.0)*pp)));\nIkReal x2070=((1.20294117647059)*x2066);\nIkReal x2071=((1.20294117647059)*x2067);\nj4eval[0]=x2069;\nj4eval[1]=(((pp*sj7))+(((-3.98071895424837)*x2065))+(((-1.0)*sj7*x2065))+(((-1.0)*x2065*x2068))+((pp*x2068))+(((3.98071895424837)*pp))+(((-1.0)*x2065*x2071))+(((-1.0)*x2065*x2070))+((pp*x2071))+((pp*x2070)));\nj4eval[2]=IKsign(x2069);\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal j4eval[2];\nsj6=1.0;\ncj6=0;\nj6=1.5707963267949;\nsj5=1.0;\ncj5=0;\nj5=1.5707963267949;\nIkReal x2072=pz*pz;\nj4eval[0]=((((-1.0)*x2072))+pp);\nj4eval[1]=IKsign(((((-1.1)*x2072))+(((1.1)*pp))));\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )\n{\ncontinue; // no branches [j4]\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2073=((0.0378655681325396)*cj7);\nIkReal x2074=((0.707106781186548)*pp);\nIkReal x2075=(px*sj7);\nIkReal x2076=((0.0321380032049286)*cj7);\nIkReal x2077=(py*sj7);\nIkReal x2078=(py*x2074);\nIkReal x2079=(px*x2074);\nCheckValue<IkReal> x2080 = IKatan2WithCheck(IkReal(((((0.112394622869602)*py))+x2078+(((-0.252437120883597)*x2077))+(((-1.0)*x2079))+((py*x2073))+((px*x2076))+(((-0.18239819420707)*px))+(((-0.214253354699524)*x2075)))),((((0.214253354699524)*x2077))+(((0.112394622869602)*px))+x2079+x2078+(((-0.252437120883597)*x2075))+((px*x2073))+(((0.18239819420707)*py))+(((-1.0)*py*x2076))),IKFAST_ATAN2_MAGTHRESH);\nif(!x2080.valid){\ncontinue;\n}\nCheckValue<IkReal> x2081=IKPowWithIntegerCheck(IKsign(((((-1.1)*(pz*pz)))+(((1.1)*pp)))),-1);\nif(!x2081.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(x2080.value)+(((1.5707963267949)*(x2081.value))));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[3];\nIkReal x2082=IKcos(j4);\nIkReal x2083=IKsin(j4);\nIkReal x2084=((0.707106781186548)*py);\nIkReal x2085=(px*x2083);\nIkReal x2086=(px*x2082);\nIkReal x2087=((0.707106781186548)*x2086);\nIkReal x2088=(x2082*x2084);\nIkReal x2089=(x2083*x2084);\nIkReal x2090=((0.707106781186548)*x2085);\nIkReal x2091=(x2089+x2087);\nevalcond[0]=((-0.2125)+(((-1.0)*pp))+(((-0.841457069611992)*x2085))+(((0.714177848998413)*py*x2083))+(((0.714177848998413)*x2086))+(((0.841457069611992)*py*x2082)));\nevalcond[1]=((0.045)+x2091+x2090+(((-1.0)*x2088))+(((-0.045)*cj7))+(((0.3)*sj7)));\nevalcond[2]=((-0.55)+(((-0.045)*sj7))+(((-1.0)*x2090))+(((-0.3)*cj7))+x2091+x2088);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2092=((0.243951839509359)*cj7);\nIkReal x2093=(px*sj7);\nIkReal x2094=(py*sj7);\nIkReal x2095=((0.18031222920257)*cj7);\nCheckValue<IkReal> x2096=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);\nif(!x2096.valid){\ncontinue;\n}\nCheckValue<IkReal> x2097 = IKatan2WithCheck(IkReal(((((-1.0)*py*x2092))+(((0.18031222920257)*x2094))+(((0.243951839509359)*x2093))+(((-0.357088924499207)*py))+((px*x2095))+(((0.420728534805996)*px)))),((((-1.0)*py*x2095))+(((0.18031222920257)*x2093))+(((-0.357088924499207)*px))+(((-0.420728534805996)*py))+(((-0.243951839509359)*x2094))+(((-1.0)*px*x2092))),IKFAST_ATAN2_MAGTHRESH);\nif(!x2097.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2096.value)))+(x2097.value));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[3];\nIkReal x2098=IKcos(j4);\nIkReal x2099=IKsin(j4);\nIkReal x2100=((0.707106781186548)*py);\nIkReal x2101=(px*x2099);\nIkReal x2102=(px*x2098);\nIkReal x2103=((0.707106781186548)*x2102);\nIkReal x2104=(x2098*x2100);\nIkReal x2105=(x2099*x2100);\nIkReal x2106=((0.707106781186548)*x2101);\nIkReal x2107=(x2103+x2105);\nevalcond[0]=((-0.2125)+(((-0.841457069611992)*x2101))+(((-1.0)*pp))+(((0.714177848998413)*py*x2099))+(((0.841457069611992)*py*x2098))+(((0.714177848998413)*x2102)));\nevalcond[1]=((0.045)+(((-1.0)*x2104))+x2107+x2106+(((-0.045)*cj7))+(((0.3)*sj7)));\nevalcond[2]=((-0.55)+(((-0.045)*sj7))+(((-0.3)*cj7))+(((-1.0)*x2106))+x2107+x2104);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));\nevalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));\nevalcond[2]=pz;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j4eval[3];\nsj6=1.0;\ncj6=0;\nj6=1.5707963267949;\nsj5=-1.0;\ncj5=0;\nj5=-1.5707963267949;\nIkReal x2108=pz*pz;\nIkReal x2109=sj7*sj7;\nIkReal x2110=cj7*cj7;\nIkReal x2111=((4.26078431372549)*cj7);\nIkReal x2112=(pp+(((-1.0)*x2108)));\nIkReal x2113=((1.20294117647059)*x2109);\nIkReal x2114=((1.0)*x2108);\nIkReal x2115=((1.20294117647059)*x2110);\nj4eval[0]=x2112;\nj4eval[1]=((((-3.98071895424837)*x2108))+((pp*x2113))+((pp*x2115))+((pp*x2111))+((pp*sj7))+(((-1.0)*sj7*x2114))+(((-1.0)*x2108*x2111))+(((-1.0)*x2108*x2115))+(((-1.0)*x2108*x2113))+(((3.98071895424837)*pp)));\nj4eval[2]=IKsign(x2112);\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal j4eval[2];\nsj6=1.0;\ncj6=0;\nj6=1.5707963267949;\nsj5=-1.0;\ncj5=0;\nj5=-1.5707963267949;\nIkReal x2116=pz*pz;\nj4eval[0]=(x2116+(((-1.0)*pp)));\nj4eval[1]=IKsign(((((1.1)*x2116))+(((-1.1)*pp))));\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )\n{\ncontinue; // no branches [j4]\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2117=((0.0378655681325396)*cj7);\nIkReal x2118=(px*sj7);\nIkReal x2119=((0.707106781186548)*pp);\nIkReal x2120=((0.0321380032049286)*cj7);\nIkReal x2121=(py*sj7);\nIkReal x2122=(py*x2119);\nIkReal x2123=(px*x2119);\nCheckValue<IkReal> x2124=IKPowWithIntegerCheck(IKsign(((((-1.1)*pp))+(((1.1)*(pz*pz))))),-1);\nif(!x2124.valid){\ncontinue;\n}\nCheckValue<IkReal> x2125 = IKatan2WithCheck(IkReal((x2122+(((-1.0)*x2123))+(((0.18239819420707)*py))+(((-0.112394622869602)*px))+(((-1.0)*py*x2120))+(((0.214253354699524)*x2121))+(((0.252437120883597)*x2118))+(((-1.0)*px*x2117)))),((((0.112394622869602)*py))+x2123+x2122+(((-0.252437120883597)*x2121))+(((-1.0)*px*x2120))+(((0.18239819420707)*px))+((py*x2117))+(((0.214253354699524)*x2118))),IKFAST_ATAN2_MAGTHRESH);\nif(!x2125.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2124.value)))+(x2125.value));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[3];\nIkReal x2126=IKsin(j4);\nIkReal x2127=IKcos(j4);\nIkReal x2128=((0.707106781186548)*py);\nIkReal x2129=(px*x2126);\nIkReal x2130=(px*x2127);\nIkReal x2131=((0.707106781186548)*x2129);\nIkReal x2132=((0.707106781186548)*x2130);\nIkReal x2133=(x2127*x2128);\nIkReal x2134=(x2126*x2128);\nIkReal x2135=(x2134+x2132);\nevalcond[0]=((-0.2125)+(((-0.841457069611992)*x2130))+(((0.714177848998413)*x2129))+(((-1.0)*pp))+(((-0.841457069611992)*py*x2126))+(((-0.714177848998413)*py*x2127)));\nevalcond[1]=((0.045)+(((-1.0)*x2133))+x2135+x2131+(((-0.045)*cj7))+(((0.3)*sj7)));\nevalcond[2]=((-0.55)+(((-0.045)*sj7))+(((-1.0)*x2133))+(((-1.0)*x2135))+(((-0.3)*cj7))+x2131);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2136=((0.243951839509359)*py);\nIkReal x2137=(px*sj7);\nIkReal x2138=((0.18031222920257)*py);\nIkReal x2139=(cj7*px);\nCheckValue<IkReal> x2140=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);\nif(!x2140.valid){\ncontinue;\n}\nCheckValue<IkReal> x2141 = IKatan2WithCheck(IkReal(((((0.243951839509359)*x2139))+(((-1.0)*sj7*x2136))+(((-0.420728534805996)*py))+(((-0.18031222920257)*x2137))+(((-1.0)*cj7*x2138))+(((0.357088924499207)*px)))),(((sj7*x2138))+(((-0.357088924499207)*py))+(((-0.420728534805996)*px))+(((-0.18031222920257)*x2139))+(((-1.0)*cj7*x2136))+(((-0.243951839509359)*x2137))),IKFAST_ATAN2_MAGTHRESH);\nif(!x2141.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2140.value)))+(x2141.value));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[3];\nIkReal x2142=IKsin(j4);\nIkReal x2143=IKcos(j4);\nIkReal x2144=((0.707106781186548)*py);\nIkReal x2145=(px*x2142);\nIkReal x2146=(px*x2143);\nIkReal x2147=((0.707106781186548)*x2145);\nIkReal x2148=((0.707106781186548)*x2146);\nIkReal x2149=(x2143*x2144);\nIkReal x2150=(x2142*x2144);\nIkReal x2151=(x2150+x2148);\nevalcond[0]=((-0.2125)+(((-1.0)*pp))+(((-0.714177848998413)*py*x2143))+(((0.714177848998413)*x2145))+(((-0.841457069611992)*x2146))+(((-0.841457069611992)*py*x2142)));\nevalcond[1]=((0.045)+x2151+x2147+(((-1.0)*x2149))+(((-0.045)*cj7))+(((0.3)*sj7)));\nevalcond[2]=((-0.55)+(((-0.045)*sj7))+(((-0.3)*cj7))+x2147+(((-1.0)*x2149))+(((-1.0)*x2151)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j4]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2152=((0.388908729652601)*py);\nIkReal x2153=((0.388908729652601)*px);\nIkReal x2154=((0.0318198051533946)*py);\nIkReal x2155=((0.212132034355964)*cj7);\nIkReal x2156=((0.0318198051533946)*px*sj5);\nIkReal x2157=(px*x2155);\nIkReal x2158=(py*x2155);\nIkReal x2159=((0.0318198051533946)*px*sj7);\nIkReal x2160=(sj7*x2154);\nIkReal x2161=(sj5*x2154);\nIkReal x2162=((0.707106781186548)*cj5*pz);\nIkReal x2163=((0.212132034355964)*sj5*sj7);\nIkReal x2164=(cj7*x2161);\nIkReal x2165=(px*x2162);\nIkReal x2166=(px*x2163);\nIkReal x2167=(py*x2162);\nIkReal x2168=(cj7*x2156);\nIkReal x2169=(py*x2163);\nIkReal x2170=(x2165+x2164);\nIkReal x2171=(x2167+x2166+x2156);\nIkReal x2172=(x2168+x2160+x2152+x2158);\nIkReal x2173=(x2169+x2161+x2157+x2153+x2159);\nCheckValue<IkReal> x2174=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*sj5))+((sj5*(pz*pz))))),-1);\nif(!x2174.valid){\ncontinue;\n}\nCheckValue<IkReal> x2175 = IKatan2WithCheck(IkReal((x2173+x2171+(((-1.0)*x2170))+(((-1.0)*x2172)))),(x2170+x2171+(((-1.0)*x2173))+(((-1.0)*x2172))),IKFAST_ATAN2_MAGTHRESH);\nif(!x2175.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2174.value)))+(x2175.value));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[5];\nIkReal x2176=IKsin(j4);\nIkReal x2177=IKcos(j4);\nIkReal x2178=((0.707106781186548)*py);\nIkReal x2179=(cj5*pz);\nIkReal x2180=((0.045)*sj7);\nIkReal x2181=((0.0636396103067893)*py);\nIkReal x2182=((0.707106781186548)*px);\nIkReal x2183=((0.777817459305202)*py);\nIkReal x2184=((0.3)*cj7);\nIkReal x2185=(cj5*x2176);\nIkReal x2186=(px*x2177);\nIkReal x2187=(sj5*x2176);\nIkReal x2188=(sj5*x2177);\nIkReal x2189=(x2176*x2182);\nIkReal x2190=(x2177*x2182);\nIkReal x2191=(x2177*x2178);\nIkReal x2192=(x2176*x2178);\nIkReal x2193=(x2190+x2192);\nevalcond[0]=((0.045)+x2193+x2189+(((-0.045)*cj7))+(((-1.0)*x2191))+(((0.3)*sj7)));\nevalcond[1]=(((x2178*x2185))+((cj5*x2190))+((cj5*x2191))+(((-1.0)*pz*sj5))+(((-1.0)*x2182*x2185)));\nevalcond[2]=(((sj5*x2180))+((sj5*x2184))+x2189+(((-1.0)*x2193))+(((-1.0)*x2191))+(((0.55)*sj5)));\nevalcond[3]=((-0.55)+x2179+((x2178*x2187))+((x2178*x2188))+((x2182*x2188))+(((-1.0)*x2180))+(((-1.0)*x2184))+(((-1.0)*x2182*x2187)));\nevalcond[4]=((-0.2125)+(((-0.777817459305202)*px*x2187))+(((-0.0636396103067893)*x2186))+((x2183*x2187))+((x2183*x2188))+(((-1.0)*pp))+((x2177*x2181))+(((0.777817459305202)*sj5*x2186))+(((1.1)*x2179))+(((-0.0636396103067893)*px*x2176))+(((-1.0)*x2176*x2181)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2194=((0.0318198051533946)*py);\nIkReal x2195=((0.0318198051533946)*px);\nIkReal x2196=(py*sj7);\nIkReal x2197=((0.0318198051533946)*sj5);\nIkReal x2198=((0.388908729652601)*sj5);\nIkReal x2199=((0.0318198051533946)*cj7);\nIkReal x2200=((0.212132034355964)*px);\nIkReal x2201=(cj7*sj5);\nIkReal x2202=(cj7*x2195);\nIkReal x2203=((0.212132034355964)*x2196);\nIkReal x2204=(px*x2198);\nIkReal x2205=(py*x2198);\nIkReal x2206=(cj7*x2194);\nIkReal x2207=(sj7*x2200);\nIkReal x2208=(sj5*sj7*x2195);\nIkReal x2209=(x2200*x2201);\nIkReal x2210=(sj5*sj7*x2194);\nIkReal x2211=((0.212132034355964)*py*x2201);\nIkReal x2212=(x2207+x2195);\nIkReal x2213=(x2202+x2205+x2211+x2210);\nIkReal x2214=(x2203+x2204+x2208+x2209+x2194);\nCheckValue<IkReal> x2215 = IKatan2WithCheck(IkReal((x2206+x2213+(((-1.0)*x2214))+(((-1.0)*x2212)))),(x2213+x2214+(((-1.0)*x2212))+(((-1.0)*x2206))),IKFAST_ATAN2_MAGTHRESH);\nif(!x2215.valid){\ncontinue;\n}\nCheckValue<IkReal> x2216=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);\nif(!x2216.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(x2215.value)+(((1.5707963267949)*(x2216.value))));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[5];\nIkReal x2217=IKsin(j4);\nIkReal x2218=IKcos(j4);\nIkReal x2219=((0.707106781186548)*py);\nIkReal x2220=(cj5*pz);\nIkReal x2221=((0.045)*sj7);\nIkReal x2222=((0.0636396103067893)*py);\nIkReal x2223=((0.707106781186548)*px);\nIkReal x2224=((0.777817459305202)*py);\nIkReal x2225=((0.3)*cj7);\nIkReal x2226=(cj5*x2217);\nIkReal x2227=(px*x2218);\nIkReal x2228=(sj5*x2217);\nIkReal x2229=(sj5*x2218);\nIkReal x2230=(x2217*x2223);\nIkReal x2231=(x2218*x2223);\nIkReal x2232=(x2218*x2219);\nIkReal x2233=(x2217*x2219);\nIkReal x2234=(x2231+x2233);\nevalcond[0]=((0.045)+x2230+x2234+(((-0.045)*cj7))+(((-1.0)*x2232))+(((0.3)*sj7)));\nevalcond[1]=(((cj5*x2231))+((cj5*x2232))+(((-1.0)*x2223*x2226))+(((-1.0)*pz*sj5))+((x2219*x2226)));\nevalcond[2]=(x2230+(((-1.0)*x2234))+(((-1.0)*x2232))+((sj5*x2225))+((sj5*x2221))+(((0.55)*sj5)));\nevalcond[3]=((-0.55)+x2220+(((-1.0)*x2223*x2228))+(((-1.0)*x2221))+(((-1.0)*x2225))+((x2219*x2228))+((x2219*x2229))+((x2223*x2229)));\nevalcond[4]=((-0.2125)+(((-0.0636396103067893)*x2227))+(((-1.0)*x2217*x2222))+(((1.1)*x2220))+(((-0.0636396103067893)*px*x2217))+((x2218*x2222))+((x2224*x2228))+((x2224*x2229))+(((-1.0)*pp))+(((0.777817459305202)*sj5*x2227))+(((-0.777817459305202)*px*x2228)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2235=((0.777817459305202)*pz);\nIkReal x2236=((0.150260191002141)*cj5);\nIkReal x2237=((0.09)*cj5);\nIkReal x2238=(py*x2236);\nIkReal x2239=(px*x2235);\nIkReal x2240=(py*x2235);\nIkReal x2241=(px*x2236);\nIkReal x2242=((0.0636396103067893)*pz*sj5);\nIkReal x2243=((0.707106781186548)*cj5*pp);\nIkReal x2244=(py*x2242);\nIkReal x2245=(px*x2242);\nIkReal x2246=(py*x2243);\nIkReal x2247=(px*x2243);\nIkReal x2248=(x2239+x2244);\nIkReal x2249=(x2247+x2241);\nIkReal x2250=(x2238+x2245+x2246);\nCheckValue<IkReal> x2251 = IKatan2WithCheck(IkReal((x2248+x2240+(((-1.0)*x2250))+(((-1.0)*x2249)))),(x2248+x2250+(((-1.0)*x2249))+(((-1.0)*x2240))),IKFAST_ATAN2_MAGTHRESH);\nif(!x2251.valid){\ncontinue;\n}\nCheckValue<IkReal> x2252=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2237*(pz*pz)))+((pp*x2237)))),-1);\nif(!x2252.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(x2251.value)+(((1.5707963267949)*(x2252.value))));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[5];\nIkReal x2253=IKsin(j4);\nIkReal x2254=IKcos(j4);\nIkReal x2255=((0.707106781186548)*py);\nIkReal x2256=(cj5*pz);\nIkReal x2257=((0.045)*sj7);\nIkReal x2258=((0.0636396103067893)*py);\nIkReal x2259=((0.707106781186548)*px);\nIkReal x2260=((0.777817459305202)*py);\nIkReal x2261=((0.3)*cj7);\nIkReal x2262=(cj5*x2253);\nIkReal x2263=(px*x2254);\nIkReal x2264=(sj5*x2253);\nIkReal x2265=(sj5*x2254);\nIkReal x2266=(x2253*x2259);\nIkReal x2267=(x2254*x2259);\nIkReal x2268=(x2254*x2255);\nIkReal x2269=(x2253*x2255);\nIkReal x2270=(x2269+x2267);\nevalcond[0]=((0.045)+x2266+x2270+(((-0.045)*cj7))+(((0.3)*sj7))+(((-1.0)*x2268)));\nevalcond[1]=(((cj5*x2267))+((cj5*x2268))+((x2255*x2262))+(((-1.0)*x2259*x2262))+(((-1.0)*pz*sj5)));\nevalcond[2]=(x2266+((sj5*x2257))+(((-1.0)*x2270))+(((0.55)*sj5))+(((-1.0)*x2268))+((sj5*x2261)));\nevalcond[3]=((-0.55)+((x2259*x2265))+x2256+((x2255*x2264))+((x2255*x2265))+(((-1.0)*x2259*x2264))+(((-1.0)*x2257))+(((-1.0)*x2261)));\nevalcond[4]=((-0.2125)+((x2260*x2264))+((x2260*x2265))+((x2254*x2258))+(((-0.0636396103067893)*x2263))+(((-1.0)*x2253*x2258))+(((-1.0)*pp))+(((1.1)*x2256))+(((0.777817459305202)*sj5*x2263))+(((-0.777817459305202)*px*x2264))+(((-0.0636396103067893)*px*x2253)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));\nevalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));\nevalcond[2]=((((-0.55)*cj5))+(((-0.3)*cj5*cj7))+(((-0.045)*cj5*sj7))+pz);\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j4eval[2];\nsj6=-1.0;\ncj6=0;\nj6=-1.5707963267949;\nIkReal x2271=pz*pz;\nIkReal x2272=(cj5*pp);\nIkReal x2273=(cj5*x2271);\nj4eval[0]=(x2273+(((-1.0)*x2272)));\nj4eval[1]=IKsign(((((0.09)*x2273))+(((-0.09)*x2272))));\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j4eval[2];\nsj6=-1.0;\ncj6=0;\nj6=-1.5707963267949;\nIkReal x2274=(pp+(((-1.0)*(pz*pz))));\nj4eval[0]=x2274;\nj4eval[1]=IKsign(x2274);\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j4eval[2];\nsj6=-1.0;\ncj6=0;\nj6=-1.5707963267949;\nIkReal x2275=((((-1.0)*pp*sj5))+((sj5*(pz*pz))));\nj4eval[0]=x2275;\nj4eval[1]=IKsign(x2275);\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[4];\nbool bgotonextstatement = true;\ndo\n{\nIkReal x2276=((-0.55)+(((-0.045)*sj7))+(((-0.3)*cj7))+pz);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));\nevalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));\nevalcond[2]=x2276;\nevalcond[3]=x2276;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j4eval[3];\nsj6=-1.0;\ncj6=0;\nj6=-1.5707963267949;\nsj5=0;\ncj5=1.0;\nj5=0;\nIkReal x2277=pz*pz;\nIkReal x2278=cj7*cj7;\nIkReal x2279=sj7*sj7;\nIkReal x2280=((2.0)*cj7);\nIkReal x2281=(pp+(((-1.0)*x2277)));\nIkReal x2282=((1.0)*x2277);\nIkReal x2283=((44.4444444444444)*x2279);\nIkReal x2284=((13.3333333333333)*pp*sj7);\nIkReal x2285=((13.3333333333333)*sj7*x2277);\nj4eval[0]=x2281;\nj4eval[1]=IKsign(x2281);\nj4eval[2]=((((-1.0)*pp*x2280))+x2284+(((-1.0)*x2277*x2283))+(((-1.0)*x2285))+(((-1.0)*x2282))+((x2277*x2280))+((pp*x2278))+(((-1.0)*x2278*x2282))+pp+((cj7*x2285))+((pp*x2283))+(((-1.0)*cj7*x2284)));\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal j4eval[3];\nsj6=-1.0;\ncj6=0;\nj6=-1.5707963267949;\nsj5=0;\ncj5=1.0;\nj5=0;\nIkReal x2286=pz*pz;\nIkReal x2287=pz*pz*pz;\nIkReal x2288=pp*pp;\nIkReal x2289=((1.0)*x2286);\nj4eval[0]=((((-1.0)*x2289))+pp);\nj4eval[1]=IKsign(((((-0.09)*x2286))+(((0.09)*pp))));\nj4eval[2]=((((10.3529411764706)*x2287))+(((-26.7958477508651)*(x2286*x2286)))+(((-1.0)*x2289))+(((17.3840830449827)*pp*x2286))+(((22.1453287197232)*(pp*pp*pp)))+(((-48.719723183391)*pz*x2288))+(((-10.3529411764706)*pp*pz))+(((-22.1453287197232)*x2286*x2288))+pp+(((9.41176470588235)*x2288))+(((48.719723183391)*pp*x2287)));\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[3];\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));\nevalcond[1]=((0.7225)+(((-1.0)*pp)));\nevalcond[2]=((-0.85)+pz);\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j4eval[1];\nsj6=-1.0;\ncj6=0;\nj6=-1.5707963267949;\nsj5=0;\ncj5=1.0;\nj5=0;\nsj7=0;\ncj7=1.0;\nj7=0;\nj4eval[0]=(pp+(((-1.0)*(pz*pz))));\nif( IKabs(j4eval[0]) < 0.0000010000000000  )\n{\ncontinue; // 3 cases reached\n\n} else\n{\n{\nIkReal j4array[2], cj4array[2], sj4array[2];\nbool j4valid[2]={false};\n_nj4 = 2;\nIkReal x2290=((0.707106781186548)*py);\nIkReal x2291=((0.707106781186548)*px);\nCheckValue<IkReal> x2293 = IKatan2WithCheck(IkReal((x2291+(((-1.0)*x2290)))),(x2291+x2290),IKFAST_ATAN2_MAGTHRESH);\nif(!x2293.valid){\ncontinue;\n}\nIkReal x2292=x2293.value;\nj4array[0]=((-1.0)*x2292);\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nj4array[1]=((3.14159265358979)+(((-1.0)*x2292)));\nsj4array[1]=IKsin(j4array[1]);\ncj4array[1]=IKcos(j4array[1]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nif( j4array[1] > IKPI )\n{\n    j4array[1]-=IK2PI;\n}\nelse if( j4array[1] < -IKPI )\n{    j4array[1]+=IK2PI;\n}\nj4valid[1] = true;\nfor(int ij4 = 0; ij4 < 2; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 2; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[2];\nIkReal x2294=IKcos(j4);\nIkReal x2295=IKsin(j4);\nIkReal x2296=((0.707106781186548)*py);\nIkReal x2297=((0.0636396103067893)*py);\nIkReal x2298=(px*x2295);\nIkReal x2299=(px*x2294);\nevalcond[0]=((((-0.707106781186548)*x2299))+(((0.707106781186548)*x2298))+(((-1.0)*x2295*x2296))+(((-1.0)*x2294*x2296)));\nevalcond[1]=(((x2295*x2297))+(((0.0636396103067893)*x2298))+(((0.0636396103067893)*x2299))+(((-1.0)*x2294*x2297)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j4]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2300=((0.150260191002141)*px);\nIkReal x2301=((0.150260191002141)*py);\nIkReal x2302=((0.777817459305202)*pz);\nIkReal x2303=((0.707106781186548)*pp);\nIkReal x2304=(px*x2303);\nIkReal x2305=(py*x2302);\nIkReal x2306=(py*x2303);\nIkReal x2307=(px*x2302);\nIkReal x2308=(x2300+x2304);\nIkReal x2309=(x2301+x2306);\nCheckValue<IkReal> x2310 = IKatan2WithCheck(IkReal((x2309+x2308+(((-1.0)*x2307))+(((-1.0)*x2305)))),(x2308+x2305+(((-1.0)*x2307))+(((-1.0)*x2309))),IKFAST_ATAN2_MAGTHRESH);\nif(!x2310.valid){\ncontinue;\n}\nCheckValue<IkReal> x2311=IKPowWithIntegerCheck(IKsign(((((-0.09)*(pz*pz)))+(((0.09)*pp)))),-1);\nif(!x2311.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(x2310.value)+(((1.5707963267949)*(x2311.value))));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[3];\nIkReal x2312=IKcos(j4);\nIkReal x2313=IKsin(j4);\nIkReal x2314=((0.707106781186548)*py);\nIkReal x2315=((0.0636396103067893)*x2312);\nIkReal x2316=(px*x2313);\nIkReal x2317=((0.707106781186548)*px*x2312);\nIkReal x2318=((0.707106781186548)*x2316);\nIkReal x2319=(x2313*x2314);\nIkReal x2320=(x2312*x2314);\nIkReal x2321=(x2319+x2317);\nevalcond[0]=(x2318+(((-1.0)*x2320))+(((-1.0)*x2321)));\nevalcond[1]=((-0.045)+(((0.045)*cj7))+x2321+x2318+(((-0.3)*sj7))+(((-1.0)*x2320)));\nevalcond[2]=((-0.2125)+(((-1.0)*py*x2315))+(((0.0636396103067893)*x2316))+(((0.0636396103067893)*py*x2313))+(((-1.0)*pp))+(((1.1)*pz))+((px*x2315)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2322=((0.0318198051533946)*px);\nIkReal x2323=((0.0318198051533946)*py);\nIkReal x2324=((0.212132034355964)*sj7);\nIkReal x2325=((0.0318198051533946)*cj7);\nIkReal x2326=(cj7*x2323);\nIkReal x2327=(px*x2324);\nIkReal x2328=(cj7*x2322);\nIkReal x2329=(py*x2324);\nIkReal x2330=(x2322+x2327);\nIkReal x2331=(x2323+x2329);\nCheckValue<IkReal> x2332 = IKatan2WithCheck(IkReal((x2330+x2331+(((-1.0)*x2326))+(((-1.0)*x2328)))),((((-1.0)*x2331))+x2330+x2326+(((-1.0)*x2328))),IKFAST_ATAN2_MAGTHRESH);\nif(!x2332.valid){\ncontinue;\n}\nCheckValue<IkReal> x2333=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);\nif(!x2333.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(x2332.value)+(((1.5707963267949)*(x2333.value))));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[3];\nIkReal x2334=IKcos(j4);\nIkReal x2335=IKsin(j4);\nIkReal x2336=((0.707106781186548)*py);\nIkReal x2337=((0.0636396103067893)*x2334);\nIkReal x2338=(px*x2335);\nIkReal x2339=((0.707106781186548)*px*x2334);\nIkReal x2340=((0.707106781186548)*x2338);\nIkReal x2341=(x2335*x2336);\nIkReal x2342=(x2334*x2336);\nIkReal x2343=(x2339+x2341);\nevalcond[0]=(x2340+(((-1.0)*x2342))+(((-1.0)*x2343)));\nevalcond[1]=((-0.045)+(((0.045)*cj7))+x2340+x2343+(((-1.0)*x2342))+(((-0.3)*sj7)));\nevalcond[2]=((-0.2125)+(((0.0636396103067893)*x2338))+(((-1.0)*py*x2337))+(((0.0636396103067893)*py*x2335))+(((-1.0)*pp))+(((1.1)*pz))+((px*x2337)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x2344=((0.045)*sj7);\nIkReal x2345=((0.3)*cj7);\nIkReal x2346=(x2345+x2344);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));\nevalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));\nevalcond[2]=((0.55)+x2346+pz);\nevalcond[3]=((-0.55)+(((-1.0)*pz))+(((-1.0)*x2346)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j4eval[3];\nsj6=-1.0;\ncj6=0;\nj6=-1.5707963267949;\nsj5=0;\ncj5=-1.0;\nj5=3.14159265358979;\nIkReal x2347=pz*pz;\nIkReal x2348=cj7*cj7;\nIkReal x2349=sj7*sj7;\nIkReal x2350=((2.0)*cj7);\nIkReal x2351=((((-1.0)*x2347))+pp);\nIkReal x2352=((1.0)*x2347);\nIkReal x2353=((44.4444444444444)*x2349);\nIkReal x2354=((13.3333333333333)*pp*sj7);\nIkReal x2355=((13.3333333333333)*sj7*x2347);\nj4eval[0]=x2351;\nj4eval[1]=IKsign(x2351);\nj4eval[2]=((((-1.0)*x2347*x2353))+(((-1.0)*cj7*x2354))+((cj7*x2355))+x2354+(((-1.0)*x2348*x2352))+(((-1.0)*pp*x2350))+((pp*x2353))+((pp*x2348))+pp+((x2347*x2350))+(((-1.0)*x2352))+(((-1.0)*x2355)));\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal j4eval[3];\nsj6=-1.0;\ncj6=0;\nj6=-1.5707963267949;\nsj5=0;\ncj5=-1.0;\nj5=3.14159265358979;\nIkReal x2356=pz*pz;\nIkReal x2357=pp*pp;\nIkReal x2358=pz*pz*pz;\nIkReal x2359=((1.0)*x2356);\nj4eval[0]=(pp+(((-1.0)*x2359)));\nj4eval[1]=IKsign(((((-0.09)*x2356))+(((0.09)*pp))));\nj4eval[2]=((((-26.7958477508651)*(x2356*x2356)))+(((9.41176470588235)*x2357))+(((48.719723183391)*pz*x2357))+(((22.1453287197232)*(pp*pp*pp)))+(((-22.1453287197232)*x2356*x2357))+(((-48.719723183391)*pp*x2358))+pp+(((10.3529411764706)*pp*pz))+(((-10.3529411764706)*x2358))+(((-1.0)*x2359))+(((17.3840830449827)*pp*x2356)));\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[3];\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));\nevalcond[1]=((0.7225)+(((-1.0)*pp)));\nevalcond[2]=((0.85)+pz);\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j4eval[1];\nsj6=-1.0;\ncj6=0;\nj6=-1.5707963267949;\nsj5=0;\ncj5=-1.0;\nj5=3.14159265358979;\nsj7=0;\ncj7=1.0;\nj7=0;\nj4eval[0]=(pp+(((-1.0)*(pz*pz))));\nif( IKabs(j4eval[0]) < 0.0000010000000000  )\n{\ncontinue; // 3 cases reached\n\n} else\n{\n{\nIkReal j4array[2], cj4array[2], sj4array[2];\nbool j4valid[2]={false};\n_nj4 = 2;\nIkReal x2360=((0.707106781186548)*py);\nIkReal x2361=((0.707106781186548)*px);\nCheckValue<IkReal> x2363 = IKatan2WithCheck(IkReal((x2361+(((-1.0)*x2360)))),(x2361+x2360),IKFAST_ATAN2_MAGTHRESH);\nif(!x2363.valid){\ncontinue;\n}\nIkReal x2362=x2363.value;\nj4array[0]=((-1.0)*x2362);\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nj4array[1]=((3.14159265358979)+(((-1.0)*x2362)));\nsj4array[1]=IKsin(j4array[1]);\ncj4array[1]=IKcos(j4array[1]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nif( j4array[1] > IKPI )\n{\n    j4array[1]-=IK2PI;\n}\nelse if( j4array[1] < -IKPI )\n{    j4array[1]+=IK2PI;\n}\nj4valid[1] = true;\nfor(int ij4 = 0; ij4 < 2; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 2; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[2];\nIkReal x2364=IKcos(j4);\nIkReal x2365=IKsin(j4);\nIkReal x2366=((0.707106781186548)*py);\nIkReal x2367=((0.0636396103067893)*py);\nIkReal x2368=(px*x2365);\nIkReal x2369=(px*x2364);\nevalcond[0]=((((-0.707106781186548)*x2369))+(((-1.0)*x2364*x2366))+(((-1.0)*x2365*x2366))+(((0.707106781186548)*x2368)));\nevalcond[1]=(((x2365*x2367))+(((-1.0)*x2364*x2367))+(((0.0636396103067893)*x2369))+(((0.0636396103067893)*x2368)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j4]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2370=((0.150260191002141)*px);\nIkReal x2371=((0.150260191002141)*py);\nIkReal x2372=((0.777817459305202)*pz);\nIkReal x2373=((0.707106781186548)*pp);\nIkReal x2374=(px*x2373);\nIkReal x2375=(px*x2372);\nIkReal x2376=(py*x2373);\nIkReal x2377=(py*x2372);\nIkReal x2378=(x2374+x2375+x2370);\nIkReal x2379=(x2376+x2377+x2371);\nCheckValue<IkReal> x2380 = IKatan2WithCheck(IkReal((x2378+x2379)),(x2378+(((-1.0)*x2379))),IKFAST_ATAN2_MAGTHRESH);\nif(!x2380.valid){\ncontinue;\n}\nCheckValue<IkReal> x2381=IKPowWithIntegerCheck(IKsign(((((-0.09)*(pz*pz)))+(((0.09)*pp)))),-1);\nif(!x2381.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(x2380.value)+(((1.5707963267949)*(x2381.value))));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[3];\nIkReal x2382=IKcos(j4);\nIkReal x2383=IKsin(j4);\nIkReal x2384=((0.707106781186548)*py);\nIkReal x2385=((0.0636396103067893)*x2382);\nIkReal x2386=(px*x2383);\nIkReal x2387=((0.707106781186548)*px*x2382);\nIkReal x2388=((0.707106781186548)*x2386);\nIkReal x2389=(x2383*x2384);\nIkReal x2390=(x2382*x2384);\nIkReal x2391=(x2387+x2389);\nevalcond[0]=(x2388+(((-1.0)*x2390))+(((-1.0)*x2391)));\nevalcond[1]=((-0.045)+(((0.045)*cj7))+x2391+x2388+(((-1.0)*x2390))+(((-0.3)*sj7)));\nevalcond[2]=((-0.2125)+((px*x2385))+(((-1.0)*py*x2385))+(((-1.0)*pp))+(((-1.1)*pz))+(((0.0636396103067893)*x2386))+(((0.0636396103067893)*py*x2383)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2392=((0.0318198051533946)*px);\nIkReal x2393=((0.0318198051533946)*py);\nIkReal x2394=((0.212132034355964)*sj7);\nIkReal x2395=((0.0318198051533946)*cj7);\nIkReal x2396=(cj7*x2393);\nIkReal x2397=(px*x2394);\nIkReal x2398=(cj7*x2392);\nIkReal x2399=(py*x2394);\nIkReal x2400=(x2397+x2392);\nIkReal x2401=(x2393+x2399);\nCheckValue<IkReal> x2402 = IKatan2WithCheck(IkReal((x2400+x2401+(((-1.0)*x2396))+(((-1.0)*x2398)))),(x2400+(((-1.0)*x2401))+x2396+(((-1.0)*x2398))),IKFAST_ATAN2_MAGTHRESH);\nif(!x2402.valid){\ncontinue;\n}\nCheckValue<IkReal> x2403=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);\nif(!x2403.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(x2402.value)+(((1.5707963267949)*(x2403.value))));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[3];\nIkReal x2404=IKcos(j4);\nIkReal x2405=IKsin(j4);\nIkReal x2406=((0.707106781186548)*py);\nIkReal x2407=((0.0636396103067893)*x2404);\nIkReal x2408=(px*x2405);\nIkReal x2409=((0.707106781186548)*px*x2404);\nIkReal x2410=((0.707106781186548)*x2408);\nIkReal x2411=(x2405*x2406);\nIkReal x2412=(x2404*x2406);\nIkReal x2413=(x2409+x2411);\nevalcond[0]=(x2410+(((-1.0)*x2412))+(((-1.0)*x2413)));\nevalcond[1]=((-0.045)+x2410+x2413+(((0.045)*cj7))+(((-1.0)*x2412))+(((-0.3)*sj7)));\nevalcond[2]=((-0.2125)+(((0.0636396103067893)*x2408))+(((0.0636396103067893)*py*x2405))+(((-1.0)*py*x2407))+(((-1.0)*pp))+(((-1.1)*pz))+((px*x2407)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));\nevalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));\nevalcond[2]=pz;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j4eval[3];\nsj6=-1.0;\ncj6=0;\nj6=-1.5707963267949;\nsj5=1.0;\ncj5=0;\nj5=1.5707963267949;\nIkReal x2414=pz*pz;\nIkReal x2415=sj7*sj7;\nIkReal x2416=cj7*cj7;\nIkReal x2417=((4.26078431372549)*cj7);\nIkReal x2418=(x2414+(((-1.0)*pp)));\nIkReal x2419=((1.20294117647059)*x2415);\nIkReal x2420=((1.20294117647059)*x2416);\nj4eval[0]=x2418;\nj4eval[1]=(((pp*x2419))+((pp*x2417))+(((-1.0)*x2414*x2417))+(((-1.0)*x2414*x2419))+((pp*sj7))+(((-3.98071895424837)*x2414))+(((-1.0)*sj7*x2414))+(((3.98071895424837)*pp))+(((-1.0)*x2414*x2420))+((pp*x2420)));\nj4eval[2]=IKsign(x2418);\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal j4eval[2];\nsj6=-1.0;\ncj6=0;\nj6=-1.5707963267949;\nsj5=1.0;\ncj5=0;\nj5=1.5707963267949;\nIkReal x2421=pz*pz;\nj4eval[0]=(pp+(((-1.0)*x2421)));\nj4eval[1]=IKsign(((((-1.1)*x2421))+(((1.1)*pp))));\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )\n{\ncontinue; // no branches [j4]\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2422=((0.0378655681325396)*cj7);\nIkReal x2423=(px*sj7);\nIkReal x2424=((0.707106781186548)*pp);\nIkReal x2425=((0.0321380032049286)*cj7);\nIkReal x2426=(py*sj7);\nIkReal x2427=(py*x2424);\nIkReal x2428=(px*x2424);\nCheckValue<IkReal> x2429 = IKatan2WithCheck(IkReal(((((0.214253354699524)*x2426))+x2427+(((-1.0)*px*x2422))+(((0.18239819420707)*py))+(((0.252437120883597)*x2423))+(((-1.0)*x2428))+(((-0.112394622869602)*px))+(((-1.0)*py*x2425)))),((((0.214253354699524)*x2423))+x2428+x2427+(((0.112394622869602)*py))+((py*x2422))+(((-1.0)*px*x2425))+(((-0.252437120883597)*x2426))+(((0.18239819420707)*px))),IKFAST_ATAN2_MAGTHRESH);\nif(!x2429.valid){\ncontinue;\n}\nCheckValue<IkReal> x2430=IKPowWithIntegerCheck(IKsign(((((-1.1)*(pz*pz)))+(((1.1)*pp)))),-1);\nif(!x2430.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(x2429.value)+(((1.5707963267949)*(x2430.value))));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[3];\nIkReal x2431=IKcos(j4);\nIkReal x2432=IKsin(j4);\nIkReal x2433=((0.707106781186548)*py);\nIkReal x2434=((0.707106781186548)*px);\nIkReal x2435=(x2431*x2434);\nIkReal x2436=(x2431*x2433);\nIkReal x2437=(x2432*x2433);\nIkReal x2438=(x2432*x2434);\nIkReal x2439=(x2437+x2435);\nevalcond[0]=((-0.2125)+(((0.714177848998413)*py*x2431))+(((-1.0)*pp))+(((0.841457069611992)*py*x2432))+(((-0.714177848998413)*px*x2432))+(((0.841457069611992)*px*x2431)));\nevalcond[1]=((-0.045)+x2439+x2438+(((0.045)*cj7))+(((-1.0)*x2436))+(((-0.3)*sj7)));\nevalcond[2]=((-0.55)+(((-0.045)*sj7))+x2439+x2436+(((-0.3)*cj7))+(((-1.0)*x2438)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2440=((0.243951839509359)*cj7);\nIkReal x2441=(px*sj7);\nIkReal x2442=(py*sj7);\nIkReal x2443=((0.18031222920257)*cj7);\nCheckValue<IkReal> x2444 = IKatan2WithCheck(IkReal((((px*x2440))+(((-1.0)*py*x2443))+(((-0.18031222920257)*x2441))+(((-0.243951839509359)*x2442))+(((-0.420728534805996)*py))+(((0.357088924499207)*px)))),((((-1.0)*py*x2440))+(((-0.243951839509359)*x2441))+(((-0.357088924499207)*py))+(((0.18031222920257)*x2442))+(((-0.420728534805996)*px))+(((-1.0)*px*x2443))),IKFAST_ATAN2_MAGTHRESH);\nif(!x2444.valid){\ncontinue;\n}\nCheckValue<IkReal> x2445=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);\nif(!x2445.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(x2444.value)+(((1.5707963267949)*(x2445.value))));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[3];\nIkReal x2446=IKcos(j4);\nIkReal x2447=IKsin(j4);\nIkReal x2448=((0.707106781186548)*py);\nIkReal x2449=((0.707106781186548)*px);\nIkReal x2450=(x2446*x2449);\nIkReal x2451=(x2446*x2448);\nIkReal x2452=(x2447*x2448);\nIkReal x2453=(x2447*x2449);\nIkReal x2454=(x2450+x2452);\nevalcond[0]=((-0.2125)+(((-0.714177848998413)*px*x2447))+(((-1.0)*pp))+(((0.714177848998413)*py*x2446))+(((0.841457069611992)*px*x2446))+(((0.841457069611992)*py*x2447)));\nevalcond[1]=((-0.045)+x2454+x2453+(((0.045)*cj7))+(((-1.0)*x2451))+(((-0.3)*sj7)));\nevalcond[2]=((-0.55)+(((-0.045)*sj7))+x2454+x2451+(((-0.3)*cj7))+(((-1.0)*x2453)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));\nevalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));\nevalcond[2]=pz;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j4eval[3];\nsj6=-1.0;\ncj6=0;\nj6=-1.5707963267949;\nsj5=-1.0;\ncj5=0;\nj5=-1.5707963267949;\nIkReal x2455=pz*pz;\nIkReal x2456=sj7*sj7;\nIkReal x2457=cj7*cj7;\nIkReal x2458=((4.26078431372549)*cj7);\nIkReal x2459=((((-1.0)*x2455))+pp);\nIkReal x2460=((1.20294117647059)*x2456);\nIkReal x2461=((1.0)*x2455);\nIkReal x2462=((1.20294117647059)*x2457);\nj4eval[0]=x2459;\nj4eval[1]=((((-3.98071895424837)*x2455))+((pp*sj7))+((pp*x2460))+((pp*x2462))+(((-1.0)*sj7*x2461))+(((-1.0)*x2455*x2460))+(((-1.0)*x2455*x2462))+(((3.98071895424837)*pp))+(((-1.0)*x2455*x2458))+((pp*x2458)));\nj4eval[2]=IKsign(x2459);\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal j4eval[2];\nsj6=-1.0;\ncj6=0;\nj6=-1.5707963267949;\nsj5=-1.0;\ncj5=0;\nj5=-1.5707963267949;\nIkReal x2463=pz*pz;\nj4eval[0]=(x2463+(((-1.0)*pp)));\nj4eval[1]=IKsign(((((1.1)*x2463))+(((-1.1)*pp))));\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )\n{\ncontinue; // no branches [j4]\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2464=((0.0378655681325396)*cj7);\nIkReal x2465=((0.707106781186548)*pp);\nIkReal x2466=((0.214253354699524)*sj7);\nIkReal x2467=((0.0321380032049286)*cj7);\nIkReal x2468=((0.252437120883597)*sj7);\nIkReal x2469=(py*x2465);\nIkReal x2470=(px*x2465);\nCheckValue<IkReal> x2471 = IKatan2WithCheck(IkReal((x2469+((py*x2464))+(((0.112394622869602)*py))+(((-1.0)*py*x2468))+(((-1.0)*x2470))+(((-0.18239819420707)*px))+((px*x2467))+(((-1.0)*px*x2466)))),(x2469+x2470+((py*x2466))+(((0.112394622869602)*px))+(((-1.0)*py*x2467))+(((0.18239819420707)*py))+((px*x2464))+(((-1.0)*px*x2468))),IKFAST_ATAN2_MAGTHRESH);\nif(!x2471.valid){\ncontinue;\n}\nCheckValue<IkReal> x2472=IKPowWithIntegerCheck(IKsign(((((-1.1)*pp))+(((1.1)*(pz*pz))))),-1);\nif(!x2472.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(x2471.value)+(((1.5707963267949)*(x2472.value))));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[3];\nIkReal x2473=IKsin(j4);\nIkReal x2474=IKcos(j4);\nIkReal x2475=((0.707106781186548)*py);\nIkReal x2476=(px*x2473);\nIkReal x2477=(px*x2474);\nIkReal x2478=((0.707106781186548)*x2476);\nIkReal x2479=((0.707106781186548)*x2477);\nIkReal x2480=(x2474*x2475);\nIkReal x2481=(x2473*x2475);\nIkReal x2482=(x2481+x2479);\nevalcond[0]=((-0.2125)+(((-0.841457069611992)*py*x2474))+(((0.841457069611992)*x2476))+(((-1.0)*pp))+(((-0.714177848998413)*py*x2473))+(((-0.714177848998413)*x2477)));\nevalcond[1]=((-0.045)+x2482+x2478+(((0.045)*cj7))+(((-1.0)*x2480))+(((-0.3)*sj7)));\nevalcond[2]=((-0.55)+(((-0.045)*sj7))+x2478+(((-0.3)*cj7))+(((-1.0)*x2480))+(((-1.0)*x2482)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2483=((0.243951839509359)*cj7);\nIkReal x2484=(px*sj7);\nIkReal x2485=(py*sj7);\nIkReal x2486=((0.18031222920257)*cj7);\nCheckValue<IkReal> x2487=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);\nif(!x2487.valid){\ncontinue;\n}\nCheckValue<IkReal> x2488 = IKatan2WithCheck(IkReal(((((0.18031222920257)*x2485))+(((-0.357088924499207)*py))+(((0.243951839509359)*x2484))+((px*x2486))+(((-1.0)*py*x2483))+(((0.420728534805996)*px)))),((((-1.0)*px*x2483))+(((0.18031222920257)*x2484))+(((-0.357088924499207)*px))+(((-1.0)*py*x2486))+(((-0.243951839509359)*x2485))+(((-0.420728534805996)*py))),IKFAST_ATAN2_MAGTHRESH);\nif(!x2488.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2487.value)))+(x2488.value));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[3];\nIkReal x2489=IKsin(j4);\nIkReal x2490=IKcos(j4);\nIkReal x2491=((0.707106781186548)*py);\nIkReal x2492=(px*x2489);\nIkReal x2493=(px*x2490);\nIkReal x2494=((0.707106781186548)*x2492);\nIkReal x2495=((0.707106781186548)*x2493);\nIkReal x2496=(x2490*x2491);\nIkReal x2497=(x2489*x2491);\nIkReal x2498=(x2495+x2497);\nevalcond[0]=((-0.2125)+(((0.841457069611992)*x2492))+(((-0.714177848998413)*x2493))+(((-0.841457069611992)*py*x2490))+(((-1.0)*pp))+(((-0.714177848998413)*py*x2489)));\nevalcond[1]=((-0.045)+x2498+x2494+(((0.045)*cj7))+(((-1.0)*x2496))+(((-0.3)*sj7)));\nevalcond[2]=((-0.55)+(((-0.045)*sj7))+x2494+(((-0.3)*cj7))+(((-1.0)*x2496))+(((-1.0)*x2498)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j4]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2499=((0.388908729652601)*py);\nIkReal x2500=((0.388908729652601)*px);\nIkReal x2501=((0.0318198051533946)*py);\nIkReal x2502=((0.212132034355964)*cj7);\nIkReal x2503=(sj5*x2501);\nIkReal x2504=(px*x2502);\nIkReal x2505=(py*x2502);\nIkReal x2506=((0.0318198051533946)*px*sj7);\nIkReal x2507=((0.0318198051533946)*px*sj5);\nIkReal x2508=(sj7*x2501);\nIkReal x2509=((0.707106781186548)*cj5*pz);\nIkReal x2510=((0.212132034355964)*sj5*sj7);\nIkReal x2511=(cj7*x2507);\nIkReal x2512=(px*x2509);\nIkReal x2513=(py*x2510);\nIkReal x2514=(py*x2509);\nIkReal x2515=(cj7*x2503);\nIkReal x2516=(px*x2510);\nIkReal x2517=(x2514+x2511);\nIkReal x2518=(x2512+x2513+x2503);\nIkReal x2519=(x2515+x2506+x2504+x2500);\nIkReal x2520=(x2516+x2508+x2507+x2505+x2499);\nCheckValue<IkReal> x2521=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*sj5))+((sj5*(pz*pz))))),-1);\nif(!x2521.valid){\ncontinue;\n}\nCheckValue<IkReal> x2522 = IKatan2WithCheck(IkReal((x2519+x2517+(((-1.0)*x2518))+(((-1.0)*x2520)))),(x2518+x2517+(((-1.0)*x2519))+(((-1.0)*x2520))),IKFAST_ATAN2_MAGTHRESH);\nif(!x2522.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2521.value)))+(x2522.value));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[5];\nIkReal x2523=IKsin(j4);\nIkReal x2524=IKcos(j4);\nIkReal x2525=((0.707106781186548)*py);\nIkReal x2526=(cj5*pz);\nIkReal x2527=((0.045)*sj7);\nIkReal x2528=((0.0636396103067893)*py);\nIkReal x2529=((0.707106781186548)*px);\nIkReal x2530=((0.777817459305202)*py);\nIkReal x2531=((0.3)*cj7);\nIkReal x2532=(cj5*x2523);\nIkReal x2533=(px*x2524);\nIkReal x2534=(sj5*x2523);\nIkReal x2535=(sj5*x2524);\nIkReal x2536=(x2523*x2529);\nIkReal x2537=(x2524*x2529);\nIkReal x2538=(x2524*x2525);\nIkReal x2539=(x2523*x2525);\nIkReal x2540=(x2539+x2537);\nevalcond[0]=((-0.045)+x2540+x2536+(((0.045)*cj7))+(((-1.0)*x2538))+(((-0.3)*sj7)));\nevalcond[1]=((((-1.0)*x2525*x2532))+(((-1.0)*cj5*x2538))+(((-1.0)*cj5*x2537))+((pz*sj5))+((x2529*x2532)));\nevalcond[2]=(x2536+(((-1.0)*x2538))+((sj5*x2527))+(((-1.0)*x2540))+(((0.55)*sj5))+((sj5*x2531)));\nevalcond[3]=((-0.55)+x2526+(((-1.0)*x2531))+((x2525*x2534))+((x2525*x2535))+(((-1.0)*x2527))+((x2529*x2535))+(((-1.0)*x2529*x2534)));\nevalcond[4]=((-0.2125)+(((-1.0)*x2524*x2528))+((x2530*x2535))+((x2530*x2534))+(((0.0636396103067893)*px*x2523))+(((0.0636396103067893)*x2533))+(((-0.777817459305202)*px*x2534))+(((-1.0)*pp))+((x2523*x2528))+(((0.777817459305202)*sj5*x2533))+(((1.1)*x2526)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2541=((0.0318198051533946)*px);\nIkReal x2542=((0.0318198051533946)*py);\nIkReal x2543=(py*sj7);\nIkReal x2544=((0.0318198051533946)*sj5);\nIkReal x2545=((0.388908729652601)*sj5);\nIkReal x2546=(cj7*py);\nIkReal x2547=((0.212132034355964)*sj5);\nIkReal x2548=(px*sj7);\nIkReal x2549=(cj7*x2542);\nIkReal x2550=((0.212132034355964)*x2548);\nIkReal x2551=(px*x2545);\nIkReal x2552=(py*x2545);\nIkReal x2553=(cj7*x2541);\nIkReal x2554=((0.212132034355964)*x2543);\nIkReal x2555=(sj5*sj7*x2541);\nIkReal x2556=(cj7*px*x2547);\nIkReal x2557=(sj5*sj7*x2542);\nIkReal x2558=(x2546*x2547);\nIkReal x2559=(x2554+x2542);\nIkReal x2560=(x2551+x2555+x2556+x2549);\nIkReal x2561=(x2550+x2552+x2557+x2558+x2541);\nCheckValue<IkReal> x2562=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);\nif(!x2562.valid){\ncontinue;\n}\nCheckValue<IkReal> x2563 = IKatan2WithCheck(IkReal((x2561+x2559+(((-1.0)*x2560))+(((-1.0)*x2553)))),(x2561+x2560+(((-1.0)*x2553))+(((-1.0)*x2559))),IKFAST_ATAN2_MAGTHRESH);\nif(!x2563.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2562.value)))+(x2563.value));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[5];\nIkReal x2564=IKsin(j4);\nIkReal x2565=IKcos(j4);\nIkReal x2566=((0.707106781186548)*py);\nIkReal x2567=(cj5*pz);\nIkReal x2568=((0.045)*sj7);\nIkReal x2569=((0.0636396103067893)*py);\nIkReal x2570=((0.707106781186548)*px);\nIkReal x2571=((0.777817459305202)*py);\nIkReal x2572=((0.3)*cj7);\nIkReal x2573=(cj5*x2564);\nIkReal x2574=(px*x2565);\nIkReal x2575=(sj5*x2564);\nIkReal x2576=(sj5*x2565);\nIkReal x2577=(x2564*x2570);\nIkReal x2578=(x2565*x2570);\nIkReal x2579=(x2565*x2566);\nIkReal x2580=(x2564*x2566);\nIkReal x2581=(x2580+x2578);\nevalcond[0]=((-0.045)+x2581+x2577+(((0.045)*cj7))+(((-1.0)*x2579))+(((-0.3)*sj7)));\nevalcond[1]=((((-1.0)*x2566*x2573))+((pz*sj5))+((x2570*x2573))+(((-1.0)*cj5*x2579))+(((-1.0)*cj5*x2578)));\nevalcond[2]=(x2577+((sj5*x2568))+(((-1.0)*x2581))+((sj5*x2572))+(((-1.0)*x2579))+(((0.55)*sj5)));\nevalcond[3]=((-0.55)+x2567+(((-1.0)*x2568))+(((-1.0)*x2570*x2575))+((x2566*x2576))+((x2566*x2575))+(((-1.0)*x2572))+((x2570*x2576)));\nevalcond[4]=((-0.2125)+(((0.0636396103067893)*x2574))+((x2571*x2576))+((x2571*x2575))+(((1.1)*x2567))+(((0.777817459305202)*sj5*x2574))+(((-1.0)*pp))+(((-1.0)*x2565*x2569))+(((-0.777817459305202)*px*x2575))+(((0.0636396103067893)*px*x2564))+((x2564*x2569)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2582=((0.777817459305202)*pz);\nIkReal x2583=((0.150260191002141)*cj5);\nIkReal x2584=((0.09)*cj5);\nIkReal x2585=(py*x2583);\nIkReal x2586=(px*x2582);\nIkReal x2587=(py*x2582);\nIkReal x2588=(px*x2583);\nIkReal x2589=((0.0636396103067893)*pz*sj5);\nIkReal x2590=((0.707106781186548)*cj5*pp);\nIkReal x2591=(py*x2590);\nIkReal x2592=(py*x2589);\nIkReal x2593=(px*x2589);\nIkReal x2594=(px*x2590);\nIkReal x2595=(x2591+x2585);\nIkReal x2596=(x2593+x2587);\nIkReal x2597=(x2594+x2592+x2588);\nCheckValue<IkReal> x2598 = IKatan2WithCheck(IkReal((x2596+x2586+(((-1.0)*x2597))+(((-1.0)*x2595)))),(x2595+x2586+(((-1.0)*x2597))+(((-1.0)*x2596))),IKFAST_ATAN2_MAGTHRESH);\nif(!x2598.valid){\ncontinue;\n}\nCheckValue<IkReal> x2599=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*x2584))+((x2584*(pz*pz))))),-1);\nif(!x2599.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(x2598.value)+(((1.5707963267949)*(x2599.value))));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[5];\nIkReal x2600=IKsin(j4);\nIkReal x2601=IKcos(j4);\nIkReal x2602=((0.707106781186548)*py);\nIkReal x2603=(cj5*pz);\nIkReal x2604=((0.045)*sj7);\nIkReal x2605=((0.0636396103067893)*py);\nIkReal x2606=((0.707106781186548)*px);\nIkReal x2607=((0.777817459305202)*py);\nIkReal x2608=((0.3)*cj7);\nIkReal x2609=(cj5*x2600);\nIkReal x2610=(px*x2601);\nIkReal x2611=(sj5*x2600);\nIkReal x2612=(sj5*x2601);\nIkReal x2613=(x2600*x2606);\nIkReal x2614=(x2601*x2606);\nIkReal x2615=(x2601*x2602);\nIkReal x2616=(x2600*x2602);\nIkReal x2617=(x2616+x2614);\nevalcond[0]=((-0.045)+(((0.045)*cj7))+(((-1.0)*x2615))+(((-0.3)*sj7))+x2617+x2613);\nevalcond[1]=((((-1.0)*cj5*x2614))+(((-1.0)*cj5*x2615))+((x2606*x2609))+((pz*sj5))+(((-1.0)*x2602*x2609)));\nevalcond[2]=((((0.55)*sj5))+(((-1.0)*x2615))+(((-1.0)*x2617))+((sj5*x2604))+((sj5*x2608))+x2613);\nevalcond[3]=((-0.55)+(((-1.0)*x2606*x2611))+((x2602*x2611))+((x2602*x2612))+((x2606*x2612))+(((-1.0)*x2608))+(((-1.0)*x2604))+x2603);\nevalcond[4]=((-0.2125)+(((-1.0)*x2601*x2605))+(((-0.777817459305202)*px*x2611))+(((0.0636396103067893)*x2610))+(((1.1)*x2603))+(((0.777817459305202)*sj5*x2610))+((x2600*x2605))+(((-1.0)*pp))+(((0.0636396103067893)*px*x2600))+((x2607*x2612))+((x2607*x2611)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x2618=((-0.55)+(((-0.045)*sj7))+(((-0.3)*cj7))+pz);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));\nevalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));\nevalcond[2]=x2618;\nevalcond[3]=x2618;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j4eval[2];\nsj5=0;\ncj5=1.0;\nj5=0;\nIkReal x2619=(pp+(((-1.0)*(pz*pz))));\nj4eval[0]=x2619;\nj4eval[1]=IKsign(x2619);\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j4eval[2];\nsj5=0;\ncj5=1.0;\nj5=0;\nIkReal x2620=(((cj6*(pz*pz)))+(((-1.0)*cj6*pp)));\nj4eval[0]=x2620;\nj4eval[1]=IKsign(x2620);\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j4eval[2];\nsj5=0;\ncj5=1.0;\nj5=0;\nIkReal x2621=((((-1.0)*pp*sj6))+((sj6*(pz*pz))));\nj4eval[0]=x2621;\nj4eval[1]=IKsign(x2621);\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[4];\nbool bgotonextstatement = true;\ndo\n{\nIkReal x2622=x2618;\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));\nevalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));\nevalcond[2]=x2622;\nevalcond[3]=x2622;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j4eval[3];\nsj5=0;\ncj5=1.0;\nj5=0;\nsj6=0;\ncj6=1.0;\nj6=0;\nIkReal x2623=pz*pz;\nIkReal x2624=cj7*cj7;\nIkReal x2625=sj7*sj7;\nIkReal x2626=((2.0)*cj7);\nIkReal x2627=((((-1.0)*pp))+x2623);\nIkReal x2628=((44.4444444444444)*x2625);\nIkReal x2629=((1.0)*x2623);\nIkReal x2630=((13.3333333333333)*pp*sj7);\nIkReal x2631=((13.3333333333333)*sj7*x2623);\nj4eval[0]=x2627;\nj4eval[1]=((((-1.0)*x2623*x2628))+((pp*x2628))+((pp*x2624))+((cj7*x2631))+(((-1.0)*x2631))+(((-1.0)*x2624*x2629))+(((-1.0)*pp*x2626))+(((-1.0)*cj7*x2630))+pp+((x2623*x2626))+(((-1.0)*x2629))+x2630);\nj4eval[2]=IKsign(x2627);\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal j4eval[3];\nsj5=0;\ncj5=1.0;\nj5=0;\nsj6=0;\ncj6=1.0;\nj6=0;\nIkReal x2632=pz*pz;\nIkReal x2633=pz*pz*pz;\nIkReal x2634=pp*pp;\nIkReal x2635=((1.0)*x2632);\nj4eval[0]=((((-1.0)*x2635))+pp);\nj4eval[1]=IKsign(((((-0.09)*x2632))+(((0.09)*pp))));\nj4eval[2]=((((-26.7958477508651)*(x2632*x2632)))+(((-22.1453287197232)*x2632*x2634))+(((-1.0)*x2635))+(((17.3840830449827)*pp*x2632))+(((22.1453287197232)*(pp*pp*pp)))+(((-10.3529411764706)*pp*pz))+(((-48.719723183391)*pz*x2634))+pp+(((48.719723183391)*pp*x2633))+(((9.41176470588235)*x2634))+(((10.3529411764706)*x2633)));\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[3];\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));\nevalcond[1]=((0.7225)+(((-1.0)*pp)));\nevalcond[2]=((-0.85)+pz);\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j4eval[1];\nsj5=0;\ncj5=1.0;\nj5=0;\nsj6=0;\ncj6=1.0;\nj6=0;\nsj7=0;\ncj7=1.0;\nj7=0;\nj4eval[0]=(pp+(((-1.0)*(pz*pz))));\nif( IKabs(j4eval[0]) < 0.0000010000000000  )\n{\ncontinue; // 3 cases reached\n\n} else\n{\n{\nIkReal j4array[2], cj4array[2], sj4array[2];\nbool j4valid[2]={false};\n_nj4 = 2;\nIkReal x2636=((0.707106781186548)*py);\nIkReal x2637=((0.707106781186548)*px);\nCheckValue<IkReal> x2639 = IKatan2WithCheck(IkReal(((((-1.0)*x2636))+x2637)),(x2637+x2636),IKFAST_ATAN2_MAGTHRESH);\nif(!x2639.valid){\ncontinue;\n}\nIkReal x2638=x2639.value;\nj4array[0]=((-1.0)*x2638);\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nj4array[1]=((3.14159265358979)+(((-1.0)*x2638)));\nsj4array[1]=IKsin(j4array[1]);\ncj4array[1]=IKcos(j4array[1]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nif( j4array[1] > IKPI )\n{\n    j4array[1]-=IK2PI;\n}\nelse if( j4array[1] < -IKPI )\n{    j4array[1]+=IK2PI;\n}\nj4valid[1] = true;\nfor(int ij4 = 0; ij4 < 2; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 2; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[2];\nIkReal x2640=IKcos(j4);\nIkReal x2641=IKsin(j4);\nIkReal x2642=((0.707106781186548)*py);\nIkReal x2643=((0.707106781186548)*px);\nIkReal x2644=((0.0636396103067893)*x2641);\nIkReal x2645=((0.0636396103067893)*x2640);\nevalcond[0]=((((-1.0)*x2640*x2642))+(((-1.0)*x2640*x2643))+(((-1.0)*x2641*x2642))+((x2641*x2643)));\nevalcond[1]=(((px*x2645))+(((-1.0)*px*x2644))+((py*x2645))+((py*x2644)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j4]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2646=((0.150260191002141)*py);\nIkReal x2647=((0.150260191002141)*px);\nIkReal x2648=((0.777817459305202)*pz);\nIkReal x2649=((0.707106781186548)*pp);\nIkReal x2650=(py*x2649);\nIkReal x2651=(px*x2649);\nIkReal x2652=(py*x2648);\nIkReal x2653=(px*x2648);\nIkReal x2654=(x2647+x2651);\nIkReal x2655=(x2646+x2650);\nCheckValue<IkReal> x2656 = IKatan2WithCheck(IkReal(((((-1.0)*x2654))+(((-1.0)*x2652))+x2653+x2655)),((((-1.0)*x2652))+(((-1.0)*x2653))+x2655+x2654),IKFAST_ATAN2_MAGTHRESH);\nif(!x2656.valid){\ncontinue;\n}\nCheckValue<IkReal> x2657=IKPowWithIntegerCheck(IKsign(((((-0.09)*(pz*pz)))+(((0.09)*pp)))),-1);\nif(!x2657.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(x2656.value)+(((1.5707963267949)*(x2657.value))));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[3];\nIkReal x2658=IKsin(j4);\nIkReal x2659=IKcos(j4);\nIkReal x2660=((0.707106781186548)*py);\nIkReal x2661=((0.0636396103067893)*px);\nIkReal x2662=((0.0636396103067893)*py);\nIkReal x2663=((0.707106781186548)*px);\nIkReal x2664=(x2658*x2663);\nIkReal x2665=(x2659*x2663);\nIkReal x2666=(x2659*x2660);\nIkReal x2667=(x2658*x2660);\nIkReal x2668=(x2667+x2665);\nevalcond[0]=((((-1.0)*x2666))+x2664+x2668);\nevalcond[1]=((0.045)+(((-0.045)*cj7))+(((-1.0)*x2666))+(((-1.0)*x2668))+(((0.3)*sj7))+x2664);\nevalcond[2]=((-0.2125)+((x2659*x2661))+((x2659*x2662))+((x2658*x2662))+(((-1.0)*pp))+(((1.1)*pz))+(((-1.0)*x2658*x2661)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2669=((0.0318198051533946)*py);\nIkReal x2670=((0.0318198051533946)*px);\nIkReal x2671=((0.212132034355964)*sj7);\nIkReal x2672=((0.0318198051533946)*cj7);\nIkReal x2673=(cj7*x2670);\nIkReal x2674=(cj7*x2669);\nIkReal x2675=(py*x2671);\nIkReal x2676=(px*x2671);\nIkReal x2677=(x2670+x2676);\nIkReal x2678=(x2669+x2675);\nCheckValue<IkReal> x2679 = IKatan2WithCheck(IkReal(((((-1.0)*x2673))+(((-1.0)*x2678))+x2674+x2677)),((((-1.0)*x2678))+(((-1.0)*x2677))+x2673+x2674),IKFAST_ATAN2_MAGTHRESH);\nif(!x2679.valid){\ncontinue;\n}\nCheckValue<IkReal> x2680=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);\nif(!x2680.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(x2679.value)+(((1.5707963267949)*(x2680.value))));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[3];\nIkReal x2681=IKsin(j4);\nIkReal x2682=IKcos(j4);\nIkReal x2683=((0.707106781186548)*py);\nIkReal x2684=((0.0636396103067893)*px);\nIkReal x2685=((0.0636396103067893)*py);\nIkReal x2686=((0.707106781186548)*px);\nIkReal x2687=(x2681*x2686);\nIkReal x2688=(x2682*x2686);\nIkReal x2689=(x2682*x2683);\nIkReal x2690=(x2681*x2683);\nIkReal x2691=(x2688+x2690);\nevalcond[0]=((((-1.0)*x2689))+x2687+x2691);\nevalcond[1]=((0.045)+(((-0.045)*cj7))+(((-1.0)*x2691))+(((-1.0)*x2689))+(((0.3)*sj7))+x2687);\nevalcond[2]=((-0.2125)+(((-1.0)*pp))+(((-1.0)*x2681*x2684))+(((1.1)*pz))+((x2681*x2685))+((x2682*x2684))+((x2682*x2685)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x2692=x2618;\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));\nevalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));\nevalcond[2]=x2692;\nevalcond[3]=x2692;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j4eval[3];\nsj5=0;\ncj5=1.0;\nj5=0;\nsj6=0;\ncj6=-1.0;\nj6=3.14159265358979;\nIkReal x2693=pz*pz;\nIkReal x2694=cj7*cj7;\nIkReal x2695=sj7*sj7;\nIkReal x2696=((2.0)*cj7);\nIkReal x2697=((((-1.0)*pp))+x2693);\nIkReal x2698=((44.4444444444444)*x2695);\nIkReal x2699=((1.0)*x2693);\nIkReal x2700=((13.3333333333333)*pp*sj7);\nIkReal x2701=((13.3333333333333)*sj7*x2693);\nj4eval[0]=x2697;\nj4eval[1]=(x2700+(((-1.0)*pp*x2696))+(((-1.0)*cj7*x2700))+((pp*x2694))+((pp*x2698))+(((-1.0)*x2699))+((x2693*x2696))+((cj7*x2701))+pp+(((-1.0)*x2701))+(((-1.0)*x2693*x2698))+(((-1.0)*x2694*x2699)));\nj4eval[2]=IKsign(x2697);\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal j4eval[3];\nsj5=0;\ncj5=1.0;\nj5=0;\nsj6=0;\ncj6=-1.0;\nj6=3.14159265358979;\nIkReal x2702=pz*pz;\nIkReal x2703=pz*pz*pz;\nIkReal x2704=pp*pp;\nj4eval[0]=(x2702+(((-1.0)*pp)));\nj4eval[1]=IKsign(((((-0.09)*pp))+(((0.09)*x2702))));\nj4eval[2]=((((17.3840830449827)*pp*x2702))+(((-48.719723183391)*pz*x2704))+(((-26.7958477508651)*(x2702*x2702)))+(((9.41176470588235)*x2704))+(((22.1453287197232)*(pp*pp*pp)))+(((-10.3529411764706)*pp*pz))+(((-22.1453287197232)*x2702*x2704))+pp+(((48.719723183391)*pp*x2703))+(((10.3529411764706)*x2703))+(((-1.0)*x2702)));\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[3];\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));\nevalcond[1]=((0.7225)+(((-1.0)*pp)));\nevalcond[2]=((-0.85)+pz);\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j4eval[1];\nsj5=0;\ncj5=1.0;\nj5=0;\nsj6=0;\ncj6=-1.0;\nj6=3.14159265358979;\nsj7=0;\ncj7=1.0;\nj7=0;\nj4eval[0]=(pp+(((-1.0)*(pz*pz))));\nif( IKabs(j4eval[0]) < 0.0000010000000000  )\n{\ncontinue; // 3 cases reached\n\n} else\n{\n{\nIkReal j4array[2], cj4array[2], sj4array[2];\nbool j4valid[2]={false};\n_nj4 = 2;\nIkReal x2705=((0.707106781186548)*py);\nIkReal x2706=((0.707106781186548)*px);\nCheckValue<IkReal> x2708 = IKatan2WithCheck(IkReal((x2706+(((-1.0)*x2705)))),(x2705+x2706),IKFAST_ATAN2_MAGTHRESH);\nif(!x2708.valid){\ncontinue;\n}\nIkReal x2707=x2708.value;\nj4array[0]=((-1.0)*x2707);\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nj4array[1]=((3.14159265358979)+(((-1.0)*x2707)));\nsj4array[1]=IKsin(j4array[1]);\ncj4array[1]=IKcos(j4array[1]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nif( j4array[1] > IKPI )\n{\n    j4array[1]-=IK2PI;\n}\nelse if( j4array[1] < -IKPI )\n{    j4array[1]+=IK2PI;\n}\nj4valid[1] = true;\nfor(int ij4 = 0; ij4 < 2; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 2; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[2];\nIkReal x2709=IKcos(j4);\nIkReal x2710=IKsin(j4);\nIkReal x2711=((0.707106781186548)*py);\nIkReal x2712=((0.0636396103067893)*py);\nIkReal x2713=(px*x2710);\nIkReal x2714=(px*x2709);\nevalcond[0]=((((0.707106781186548)*x2713))+(((-0.707106781186548)*x2714))+(((-1.0)*x2709*x2711))+(((-1.0)*x2710*x2711)));\nevalcond[1]=((((0.0636396103067893)*x2713))+(((-0.0636396103067893)*x2714))+(((-1.0)*x2709*x2712))+(((-1.0)*x2710*x2712)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j4]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2715=((0.150260191002141)*py);\nIkReal x2716=((0.150260191002141)*px);\nIkReal x2717=((0.777817459305202)*pz);\nIkReal x2718=((0.707106781186548)*pp);\nIkReal x2719=(py*x2718);\nIkReal x2720=(px*x2718);\nIkReal x2721=(py*x2717);\nIkReal x2722=(px*x2717);\nIkReal x2723=(x2715+x2719);\nIkReal x2724=(x2716+x2720);\nCheckValue<IkReal> x2725=IKPowWithIntegerCheck(IKsign(((((-0.09)*pp))+(((0.09)*(pz*pz))))),-1);\nif(!x2725.valid){\ncontinue;\n}\nCheckValue<IkReal> x2726 = IKatan2WithCheck(IkReal((x2723+x2722+(((-1.0)*x2724))+(((-1.0)*x2721)))),(x2724+x2723+(((-1.0)*x2721))+(((-1.0)*x2722))),IKFAST_ATAN2_MAGTHRESH);\nif(!x2726.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2725.value)))+(x2726.value));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[3];\nIkReal x2727=IKsin(j4);\nIkReal x2728=IKcos(j4);\nIkReal x2729=((0.707106781186548)*py);\nIkReal x2730=((0.0636396103067893)*x2728);\nIkReal x2731=(px*x2727);\nIkReal x2732=((0.707106781186548)*x2731);\nIkReal x2733=((0.707106781186548)*px*x2728);\nIkReal x2734=(x2728*x2729);\nIkReal x2735=(x2727*x2729);\nIkReal x2736=(x2735+x2733);\nevalcond[0]=(x2736+x2732+(((-1.0)*x2734)));\nevalcond[1]=((-0.045)+x2732+(((0.045)*cj7))+(((-1.0)*x2736))+(((-1.0)*x2734))+(((-0.3)*sj7)));\nevalcond[2]=((-0.2125)+(((-1.0)*py*x2730))+(((-0.0636396103067893)*py*x2727))+(((-1.0)*px*x2730))+(((0.0636396103067893)*x2731))+(((-1.0)*pp))+(((1.1)*pz)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2737=((0.0318198051533946)*py);\nIkReal x2738=((0.0318198051533946)*px);\nIkReal x2739=((0.212132034355964)*sj7);\nIkReal x2740=((0.0318198051533946)*cj7);\nIkReal x2741=(py*x2739);\nIkReal x2742=(px*x2739);\nIkReal x2743=(cj7*x2738);\nIkReal x2744=(cj7*x2737);\nIkReal x2745=(x2742+x2738);\nIkReal x2746=(x2741+x2737);\nCheckValue<IkReal> x2747 = IKatan2WithCheck(IkReal((x2743+x2746+(((-1.0)*x2744))+(((-1.0)*x2745)))),(x2745+x2746+(((-1.0)*x2744))+(((-1.0)*x2743))),IKFAST_ATAN2_MAGTHRESH);\nif(!x2747.valid){\ncontinue;\n}\nCheckValue<IkReal> x2748=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);\nif(!x2748.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(x2747.value)+(((1.5707963267949)*(x2748.value))));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[3];\nIkReal x2749=IKsin(j4);\nIkReal x2750=IKcos(j4);\nIkReal x2751=((0.707106781186548)*py);\nIkReal x2752=((0.0636396103067893)*x2750);\nIkReal x2753=(px*x2749);\nIkReal x2754=((0.707106781186548)*x2753);\nIkReal x2755=((0.707106781186548)*px*x2750);\nIkReal x2756=(x2750*x2751);\nIkReal x2757=(x2749*x2751);\nIkReal x2758=(x2757+x2755);\nevalcond[0]=(x2754+x2758+(((-1.0)*x2756)));\nevalcond[1]=((-0.045)+x2754+(((0.045)*cj7))+(((-1.0)*x2756))+(((-1.0)*x2758))+(((-0.3)*sj7)));\nevalcond[2]=((-0.2125)+(((-1.0)*py*x2752))+(((0.0636396103067893)*x2753))+(((-1.0)*pp))+(((1.1)*pz))+(((-1.0)*px*x2752))+(((-0.0636396103067893)*py*x2749)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j4]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2759=cj6*cj6;\nIkReal x2760=((0.0318198051533946)*px);\nIkReal x2761=((0.0318198051533946)*py);\nIkReal x2762=(cj6*sj6);\nIkReal x2763=((0.212132034355964)*sj7);\nIkReal x2764=(cj7*x2761);\nIkReal x2765=(px*x2763);\nIkReal x2766=(cj7*x2760);\nIkReal x2767=(py*x2763);\nIkReal x2768=(x2759*x2761);\nIkReal x2769=(x2759*x2760);\nIkReal x2770=(x2761*x2762);\nIkReal x2771=(x2760*x2762);\nIkReal x2772=(x2759*x2767);\nIkReal x2773=(x2762*x2764);\nIkReal x2774=(x2762*x2766);\nIkReal x2775=(x2759*x2766);\nIkReal x2776=(x2762*x2767);\nIkReal x2777=(x2759*x2764);\nIkReal x2778=(x2762*x2765);\nIkReal x2779=(x2759*x2765);\nIkReal x2780=(x2773+x2775+x2760+x2765);\nIkReal x2781=(x2772+x2774+x2768+x2764);\nIkReal x2782=(x2778+x2771+x2777+x2761+x2767);\nIkReal x2783=(x2779+x2770+x2776+x2769+x2766);\nCheckValue<IkReal> x2784=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*sj6))+((sj6*(pz*pz))))),-1);\nif(!x2784.valid){\ncontinue;\n}\nCheckValue<IkReal> x2785 = IKatan2WithCheck(IkReal(((((-1.0)*x2781))+(((-1.0)*x2783))+x2780+x2782)),((((-1.0)*x2782))+(((-1.0)*x2783))+x2781+x2780),IKFAST_ATAN2_MAGTHRESH);\nif(!x2785.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2784.value)))+(x2785.value));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[5];\nIkReal x2786=IKsin(j4);\nIkReal x2787=IKcos(j4);\nIkReal x2788=((0.045)*cj7);\nIkReal x2789=(px*sj6);\nIkReal x2790=(py*sj6);\nIkReal x2791=((0.3)*sj7);\nIkReal x2792=(cj6*py);\nIkReal x2793=(cj6*px);\nIkReal x2794=((0.707106781186548)*x2787);\nIkReal x2795=((0.0636396103067893)*x2787);\nIkReal x2796=((0.707106781186548)*x2786);\nIkReal x2797=((0.0636396103067893)*x2786);\nIkReal x2798=(px*x2796);\nIkReal x2799=(px*x2794);\nIkReal x2800=(py*x2794);\nIkReal x2801=(py*x2796);\nIkReal x2802=(x2789*x2794);\nIkReal x2803=(x2793*x2796);\nIkReal x2804=(x2789*x2796);\nIkReal x2805=(x2790*x2796);\nIkReal x2806=(x2792*x2794);\nIkReal x2807=(x2790*x2794);\nIkReal x2808=(x2792*x2796);\nIkReal x2809=(x2793*x2794);\nIkReal x2810=(x2799+x2801);\nIkReal x2811=(x2802+x2803+x2805);\nIkReal x2812=(x2808+x2809+x2807);\nevalcond[0]=(x2798+(((-1.0)*x2800))+(((-1.0)*sj6*x2788))+(((0.045)*sj6))+((sj6*x2791))+x2810);\nevalcond[1]=(x2798+(((-1.0)*x2800))+((cj6*x2791))+(((0.045)*cj6))+(((-1.0)*x2810))+(((-1.0)*cj6*x2788)));\nevalcond[2]=((((-1.0)*x2804))+(((-1.0)*x2806))+x2811+x2812);\nevalcond[3]=((0.045)+(((-1.0)*x2788))+x2791+(((-1.0)*x2806))+(((-1.0)*x2812))+x2804+x2811);\nevalcond[4]=((-0.2125)+(((-1.0)*x2790*x2797))+(((-1.0)*x2789*x2797))+(((-1.0)*x2789*x2795))+((x2792*x2797))+((x2792*x2795))+((x2790*x2795))+(((-1.0)*pp))+((x2793*x2795))+(((1.1)*pz))+(((-1.0)*x2793*x2797)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2813=cj6*cj6;\nIkReal x2814=((0.212132034355964)*sj7);\nIkReal x2815=((0.0318198051533946)*cj7);\nIkReal x2816=(cj6*py*sj6);\nIkReal x2817=(px*x2813);\nIkReal x2818=(cj6*px*sj6);\nIkReal x2819=(py*x2813);\nIkReal x2820=((0.0318198051533946)*x2818);\nIkReal x2821=((0.0318198051533946)*x2817);\nIkReal x2822=((0.0318198051533946)*x2816);\nIkReal x2823=((0.0318198051533946)*x2819);\nIkReal x2824=(x2815*x2819);\nIkReal x2825=(x2814*x2818);\nIkReal x2826=(x2815*x2816);\nIkReal x2827=(x2815*x2817);\nIkReal x2828=(x2814*x2816);\nIkReal x2829=(x2814*x2819);\nIkReal x2830=(x2815*x2818);\nIkReal x2831=(x2814*x2817);\nIkReal x2832=(x2826+x2827);\nIkReal x2833=(x2824+x2825+x2820);\nIkReal x2834=(x2830+x2829+x2823);\nIkReal x2835=(x2831+x2828+x2821+x2822);\nCheckValue<IkReal> x2836 = IKatan2WithCheck(IkReal(((((-1.0)*x2832))+(((-1.0)*x2834))+x2835+x2833)),((((-1.0)*x2835))+(((-1.0)*x2834))+x2833+x2832),IKFAST_ATAN2_MAGTHRESH);\nif(!x2836.valid){\ncontinue;\n}\nCheckValue<IkReal> x2837=IKPowWithIntegerCheck(IKsign((((cj6*(pz*pz)))+(((-1.0)*cj6*pp)))),-1);\nif(!x2837.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(x2836.value)+(((1.5707963267949)*(x2837.value))));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[5];\nIkReal x2838=IKsin(j4);\nIkReal x2839=IKcos(j4);\nIkReal x2840=((0.045)*cj7);\nIkReal x2841=(px*sj6);\nIkReal x2842=(py*sj6);\nIkReal x2843=((0.3)*sj7);\nIkReal x2844=(cj6*py);\nIkReal x2845=(cj6*px);\nIkReal x2846=((0.707106781186548)*x2839);\nIkReal x2847=((0.0636396103067893)*x2839);\nIkReal x2848=((0.707106781186548)*x2838);\nIkReal x2849=((0.0636396103067893)*x2838);\nIkReal x2850=(px*x2848);\nIkReal x2851=(px*x2846);\nIkReal x2852=(py*x2846);\nIkReal x2853=(py*x2848);\nIkReal x2854=(x2841*x2846);\nIkReal x2855=(x2845*x2848);\nIkReal x2856=(x2841*x2848);\nIkReal x2857=(x2842*x2848);\nIkReal x2858=(x2844*x2846);\nIkReal x2859=(x2842*x2846);\nIkReal x2860=(x2844*x2848);\nIkReal x2861=(x2845*x2846);\nIkReal x2862=(x2851+x2853);\nIkReal x2863=(x2855+x2854+x2857);\nIkReal x2864=(x2859+x2860+x2861);\nevalcond[0]=((((-1.0)*sj6*x2840))+((sj6*x2843))+(((0.045)*sj6))+x2850+x2862+(((-1.0)*x2852)));\nevalcond[1]=((((-1.0)*cj6*x2840))+(((0.045)*cj6))+((cj6*x2843))+(((-1.0)*x2862))+x2850+(((-1.0)*x2852)));\nevalcond[2]=(x2863+x2864+(((-1.0)*x2858))+(((-1.0)*x2856)));\nevalcond[3]=((0.045)+(((-1.0)*x2864))+x2843+x2856+x2863+(((-1.0)*x2858))+(((-1.0)*x2840)));\nevalcond[4]=((-0.2125)+(((-1.0)*x2842*x2849))+((x2844*x2849))+((x2844*x2847))+(((-1.0)*x2845*x2849))+((x2842*x2847))+(((-1.0)*pp))+((x2845*x2847))+(((-1.0)*x2841*x2847))+(((-1.0)*x2841*x2849))+(((1.1)*pz)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2865=(cj6*px);\nIkReal x2866=((0.0318198051533946)*py);\nIkReal x2867=((0.212132034355964)*sj7);\nIkReal x2868=((0.0318198051533946)*cj7);\nIkReal x2869=(px*sj6);\nIkReal x2870=(sj6*x2866);\nIkReal x2871=((0.0318198051533946)*x2865);\nIkReal x2872=(cj6*x2866);\nIkReal x2873=((0.0318198051533946)*x2869);\nIkReal x2874=(x2868*x2869);\nIkReal x2875=(cj6*py*x2867);\nIkReal x2876=(x2865*x2867);\nIkReal x2877=(py*sj6*x2867);\nIkReal x2878=(cj7*x2870);\nIkReal x2879=(cj7*x2872);\nIkReal x2880=(x2865*x2868);\nIkReal x2881=(x2867*x2869);\nIkReal x2882=(x2880+x2878);\nIkReal x2883=(x2872+x2875+x2874);\nIkReal x2884=(x2881+x2873+x2879);\nIkReal x2885=(x2871+x2870+x2877+x2876);\nCheckValue<IkReal> x2886=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);\nif(!x2886.valid){\ncontinue;\n}\nCheckValue<IkReal> x2887 = IKatan2WithCheck(IkReal(((((-1.0)*x2885))+(((-1.0)*x2884))+x2882+x2883)),((((-1.0)*x2884))+(((-1.0)*x2882))+x2883+x2885),IKFAST_ATAN2_MAGTHRESH);\nif(!x2887.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2886.value)))+(x2887.value));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[5];\nIkReal x2888=IKsin(j4);\nIkReal x2889=IKcos(j4);\nIkReal x2890=((0.045)*cj7);\nIkReal x2891=(px*sj6);\nIkReal x2892=(py*sj6);\nIkReal x2893=((0.3)*sj7);\nIkReal x2894=(cj6*py);\nIkReal x2895=(cj6*px);\nIkReal x2896=((0.707106781186548)*x2889);\nIkReal x2897=((0.0636396103067893)*x2889);\nIkReal x2898=((0.707106781186548)*x2888);\nIkReal x2899=((0.0636396103067893)*x2888);\nIkReal x2900=(px*x2898);\nIkReal x2901=(px*x2896);\nIkReal x2902=(py*x2896);\nIkReal x2903=(py*x2898);\nIkReal x2904=(x2891*x2896);\nIkReal x2905=(x2895*x2898);\nIkReal x2906=(x2891*x2898);\nIkReal x2907=(x2892*x2898);\nIkReal x2908=(x2894*x2896);\nIkReal x2909=(x2892*x2896);\nIkReal x2910=(x2894*x2898);\nIkReal x2911=(x2895*x2896);\nIkReal x2912=(x2903+x2901);\nIkReal x2913=(x2907+x2905+x2904);\nIkReal x2914=(x2910+x2911+x2909);\nevalcond[0]=((((0.045)*sj6))+((sj6*x2893))+(((-1.0)*sj6*x2890))+(((-1.0)*x2902))+x2912+x2900);\nevalcond[1]=((((0.045)*cj6))+(((-1.0)*x2902))+(((-1.0)*cj6*x2890))+((cj6*x2893))+x2900+(((-1.0)*x2912)));\nevalcond[2]=((((-1.0)*x2906))+(((-1.0)*x2908))+x2913+x2914);\nevalcond[3]=((0.045)+(((-1.0)*x2908))+(((-1.0)*x2890))+x2893+x2913+x2906+(((-1.0)*x2914)));\nevalcond[4]=((-0.2125)+(((-1.0)*x2891*x2899))+(((-1.0)*x2891*x2897))+(((-1.0)*x2895*x2899))+((x2895*x2897))+(((-1.0)*x2892*x2899))+((x2892*x2897))+(((-1.0)*pp))+(((1.1)*pz))+((x2894*x2897))+((x2894*x2899)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x2915=((0.045)*sj7);\nIkReal x2916=((0.3)*cj7);\nIkReal x2917=(x2915+x2916);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));\nevalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));\nevalcond[2]=((0.55)+pz+x2917);\nevalcond[3]=((-0.55)+(((-1.0)*pz))+(((-1.0)*x2917)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j4eval[2];\nsj5=0;\ncj5=-1.0;\nj5=3.14159265358979;\nIkReal x2918=(pp+(((-1.0)*(pz*pz))));\nj4eval[0]=x2918;\nj4eval[1]=IKsign(x2918);\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j4eval[2];\nsj5=0;\ncj5=-1.0;\nj5=3.14159265358979;\nIkReal x2919=(((cj6*(pz*pz)))+(((-1.0)*cj6*pp)));\nj4eval[0]=x2919;\nj4eval[1]=IKsign(x2919);\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j4eval[2];\nsj5=0;\ncj5=-1.0;\nj5=3.14159265358979;\nIkReal x2920=((((-1.0)*sj6*(pz*pz)))+((pp*sj6)));\nj4eval[0]=x2920;\nj4eval[1]=IKsign(x2920);\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[4];\nbool bgotonextstatement = true;\ndo\n{\nIkReal x2921=((0.045)*sj7);\nIkReal x2922=((0.3)*cj7);\nIkReal x2923=(x2921+x2922);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));\nevalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));\nevalcond[2]=((0.55)+pz+x2923);\nevalcond[3]=((-0.55)+(((-1.0)*x2923))+(((-1.0)*pz)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j4eval[3];\nsj5=0;\ncj5=-1.0;\nj5=3.14159265358979;\nsj6=0;\ncj6=1.0;\nj6=0;\nIkReal x2924=pz*pz;\nIkReal x2925=cj7*cj7;\nIkReal x2926=sj7*sj7;\nIkReal x2927=((2.0)*cj7);\nIkReal x2928=((((-1.0)*pp))+x2924);\nIkReal x2929=((44.4444444444444)*x2926);\nIkReal x2930=((1.0)*x2924);\nIkReal x2931=((13.3333333333333)*pp*sj7);\nIkReal x2932=((13.3333333333333)*sj7*x2924);\nj4eval[0]=x2928;\nj4eval[1]=((((-1.0)*cj7*x2931))+((x2924*x2927))+((cj7*x2932))+(((-1.0)*x2930))+(((-1.0)*x2932))+(((-1.0)*x2924*x2929))+pp+((pp*x2929))+((pp*x2925))+(((-1.0)*x2925*x2930))+(((-1.0)*pp*x2927))+x2931);\nj4eval[2]=IKsign(x2928);\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal j4eval[3];\nsj5=0;\ncj5=-1.0;\nj5=3.14159265358979;\nsj6=0;\ncj6=1.0;\nj6=0;\nIkReal x2933=pz*pz;\nIkReal x2934=pp*pp;\nIkReal x2935=pz*pz*pz;\nj4eval[0]=((((-1.0)*pp))+x2933);\nj4eval[1]=((((-22.1453287197232)*x2933*x2934))+(((-48.719723183391)*pp*x2935))+(((17.3840830449827)*pp*x2933))+(((22.1453287197232)*(pp*pp*pp)))+(((48.719723183391)*pz*x2934))+pp+(((-26.7958477508651)*(x2933*x2933)))+(((10.3529411764706)*pp*pz))+(((-10.3529411764706)*x2935))+(((-1.0)*x2933))+(((9.41176470588235)*x2934)));\nj4eval[2]=IKsign(((((-0.09)*pp))+(((0.09)*x2933))));\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[3];\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));\nevalcond[1]=((0.7225)+(((-1.0)*pp)));\nevalcond[2]=((0.85)+pz);\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j4eval[1];\nsj5=0;\ncj5=-1.0;\nj5=3.14159265358979;\nsj6=0;\ncj6=1.0;\nj6=0;\nsj7=0;\ncj7=1.0;\nj7=0;\nj4eval[0]=(pp+(((-1.0)*(pz*pz))));\nif( IKabs(j4eval[0]) < 0.0000010000000000  )\n{\ncontinue; // 3 cases reached\n\n} else\n{\n{\nIkReal j4array[2], cj4array[2], sj4array[2];\nbool j4valid[2]={false};\n_nj4 = 2;\nIkReal x2936=((0.707106781186548)*py);\nIkReal x2937=((0.707106781186548)*px);\nCheckValue<IkReal> x2939 = IKatan2WithCheck(IkReal(((((-1.0)*x2936))+x2937)),(x2936+x2937),IKFAST_ATAN2_MAGTHRESH);\nif(!x2939.valid){\ncontinue;\n}\nIkReal x2938=x2939.value;\nj4array[0]=((-1.0)*x2938);\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nj4array[1]=((3.14159265358979)+(((-1.0)*x2938)));\nsj4array[1]=IKsin(j4array[1]);\ncj4array[1]=IKcos(j4array[1]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nif( j4array[1] > IKPI )\n{\n    j4array[1]-=IK2PI;\n}\nelse if( j4array[1] < -IKPI )\n{    j4array[1]+=IK2PI;\n}\nj4valid[1] = true;\nfor(int ij4 = 0; ij4 < 2; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 2; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[2];\nIkReal x2940=IKcos(j4);\nIkReal x2941=IKsin(j4);\nIkReal x2942=((0.707106781186548)*py);\nIkReal x2943=((0.0636396103067893)*py);\nIkReal x2944=(px*x2941);\nIkReal x2945=(px*x2940);\nevalcond[0]=((((-1.0)*x2940*x2942))+(((-0.707106781186548)*x2945))+(((0.707106781186548)*x2944))+(((-1.0)*x2941*x2942)));\nevalcond[1]=((((-1.0)*x2940*x2943))+(((-0.0636396103067893)*x2945))+(((0.0636396103067893)*x2944))+(((-1.0)*x2941*x2943)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j4]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2946=((0.150260191002141)*py);\nIkReal x2947=((0.150260191002141)*px);\nIkReal x2948=((0.777817459305202)*pz);\nIkReal x2949=((0.707106781186548)*pp);\nIkReal x2950=(py*x2949);\nIkReal x2951=(px*x2949);\nIkReal x2952=(py*x2948);\nIkReal x2953=(px*x2948);\nIkReal x2954=(x2950+x2952+x2946);\nIkReal x2955=(x2951+x2953+x2947);\nCheckValue<IkReal> x2956=IKPowWithIntegerCheck(IKsign(((((-0.09)*pp))+(((0.09)*(pz*pz))))),-1);\nif(!x2956.valid){\ncontinue;\n}\nCheckValue<IkReal> x2957 = IKatan2WithCheck(IkReal(((((-1.0)*x2955))+x2954)),(x2954+x2955),IKFAST_ATAN2_MAGTHRESH);\nif(!x2957.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2956.value)))+(x2957.value));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[3];\nIkReal x2958=IKsin(j4);\nIkReal x2959=IKcos(j4);\nIkReal x2960=((0.707106781186548)*py);\nIkReal x2961=((0.0636396103067893)*x2959);\nIkReal x2962=(px*x2958);\nIkReal x2963=((0.707106781186548)*x2962);\nIkReal x2964=((0.707106781186548)*px*x2959);\nIkReal x2965=(x2959*x2960);\nIkReal x2966=(x2958*x2960);\nIkReal x2967=(x2964+x2966);\nevalcond[0]=((((-1.0)*x2965))+x2967+x2963);\nevalcond[1]=((-0.045)+(((0.045)*cj7))+(((-1.0)*x2967))+(((-1.0)*x2965))+x2963+(((-0.3)*sj7)));\nevalcond[2]=((-0.2125)+(((0.0636396103067893)*x2962))+(((-0.0636396103067893)*py*x2958))+(((-1.0)*pp))+(((-1.1)*pz))+(((-1.0)*py*x2961))+(((-1.0)*px*x2961)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x2968=((0.0318198051533946)*py);\nIkReal x2969=((0.0318198051533946)*px);\nIkReal x2970=((0.212132034355964)*sj7);\nIkReal x2971=((0.0318198051533946)*cj7);\nIkReal x2972=(py*x2970);\nIkReal x2973=(px*x2970);\nIkReal x2974=(cj7*x2969);\nIkReal x2975=(cj7*x2968);\nIkReal x2976=(x2973+x2969);\nIkReal x2977=(x2972+x2968);\nCheckValue<IkReal> x2978 = IKatan2WithCheck(IkReal(((((-1.0)*x2975))+(((-1.0)*x2976))+x2977+x2974)),((((-1.0)*x2975))+(((-1.0)*x2974))+x2976+x2977),IKFAST_ATAN2_MAGTHRESH);\nif(!x2978.valid){\ncontinue;\n}\nCheckValue<IkReal> x2979=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);\nif(!x2979.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(x2978.value)+(((1.5707963267949)*(x2979.value))));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[3];\nIkReal x2980=IKsin(j4);\nIkReal x2981=IKcos(j4);\nIkReal x2982=((0.707106781186548)*py);\nIkReal x2983=((0.0636396103067893)*x2981);\nIkReal x2984=(px*x2980);\nIkReal x2985=((0.707106781186548)*x2984);\nIkReal x2986=((0.707106781186548)*px*x2981);\nIkReal x2987=(x2981*x2982);\nIkReal x2988=(x2980*x2982);\nIkReal x2989=(x2988+x2986);\nevalcond[0]=((((-1.0)*x2987))+x2989+x2985);\nevalcond[1]=((-0.045)+(((0.045)*cj7))+(((-1.0)*x2989))+(((-1.0)*x2987))+x2985+(((-0.3)*sj7)));\nevalcond[2]=((-0.2125)+(((-1.0)*py*x2983))+(((-0.0636396103067893)*py*x2980))+(((-1.0)*pp))+(((-1.1)*pz))+(((-1.0)*px*x2983))+(((0.0636396103067893)*x2984)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x2990=((0.045)*sj7);\nIkReal x2991=((0.3)*cj7);\nIkReal x2992=(x2990+x2991);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));\nevalcond[1]=((0.39655)+(((0.0765)*sj7))+(((-1.0)*pp))+(((0.32595)*cj7)));\nevalcond[2]=((0.55)+pz+x2992);\nevalcond[3]=((-0.55)+(((-1.0)*x2992))+(((-1.0)*pz)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j4eval[3];\nsj5=0;\ncj5=-1.0;\nj5=3.14159265358979;\nsj6=0;\ncj6=-1.0;\nj6=3.14159265358979;\nIkReal x2993=pz*pz;\nIkReal x2994=cj7*cj7;\nIkReal x2995=sj7*sj7;\nIkReal x2996=((2.0)*cj7);\nIkReal x2997=((((-1.0)*pp))+x2993);\nIkReal x2998=((44.4444444444444)*x2995);\nIkReal x2999=((1.0)*x2993);\nIkReal x3000=((13.3333333333333)*pp*sj7);\nIkReal x3001=((13.3333333333333)*sj7*x2993);\nj4eval[0]=x2997;\nj4eval[1]=((((-1.0)*x2999))+x3000+((cj7*x3001))+(((-1.0)*cj7*x3000))+(((-1.0)*x3001))+(((-1.0)*x2993*x2998))+(((-1.0)*pp*x2996))+pp+((x2993*x2996))+(((-1.0)*x2994*x2999))+((pp*x2994))+((pp*x2998)));\nj4eval[2]=IKsign(x2997);\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal j4eval[3];\nsj5=0;\ncj5=-1.0;\nj5=3.14159265358979;\nsj6=0;\ncj6=-1.0;\nj6=3.14159265358979;\nIkReal x3002=pz*pz;\nIkReal x3003=pp*pp;\nIkReal x3004=pz*pz*pz;\nIkReal x3005=((1.0)*x3002);\nj4eval[0]=((((-1.0)*x3005))+pp);\nj4eval[1]=IKsign(((((0.09)*pp))+(((-0.09)*x3002))));\nj4eval[2]=((((-26.7958477508651)*(x3002*x3002)))+(((-10.3529411764706)*x3004))+(((-48.719723183391)*pp*x3004))+(((22.1453287197232)*(pp*pp*pp)))+(((-1.0)*x3005))+(((-22.1453287197232)*x3002*x3003))+(((17.3840830449827)*pp*x3002))+pp+(((48.719723183391)*pz*x3003))+(((10.3529411764706)*pp*pz))+(((9.41176470588235)*x3003)));\nif( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[3];\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));\nevalcond[1]=((0.7225)+(((-1.0)*pp)));\nevalcond[2]=((0.85)+pz);\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j4eval[1];\nsj5=0;\ncj5=-1.0;\nj5=3.14159265358979;\nsj6=0;\ncj6=-1.0;\nj6=3.14159265358979;\nsj7=0;\ncj7=1.0;\nj7=0;\nj4eval[0]=(pp+(((-1.0)*(pz*pz))));\nif( IKabs(j4eval[0]) < 0.0000010000000000  )\n{\ncontinue; // 3 cases reached\n\n} else\n{\n{\nIkReal j4array[2], cj4array[2], sj4array[2];\nbool j4valid[2]={false};\n_nj4 = 2;\nIkReal x3006=((0.707106781186548)*py);\nIkReal x3007=((0.707106781186548)*px);\nCheckValue<IkReal> x3009 = IKatan2WithCheck(IkReal((x3007+(((-1.0)*x3006)))),(x3007+x3006),IKFAST_ATAN2_MAGTHRESH);\nif(!x3009.valid){\ncontinue;\n}\nIkReal x3008=x3009.value;\nj4array[0]=((-1.0)*x3008);\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nj4array[1]=((3.14159265358979)+(((-1.0)*x3008)));\nsj4array[1]=IKsin(j4array[1]);\ncj4array[1]=IKcos(j4array[1]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nif( j4array[1] > IKPI )\n{\n    j4array[1]-=IK2PI;\n}\nelse if( j4array[1] < -IKPI )\n{    j4array[1]+=IK2PI;\n}\nj4valid[1] = true;\nfor(int ij4 = 0; ij4 < 2; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 2; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[2];\nIkReal x3010=IKcos(j4);\nIkReal x3011=IKsin(j4);\nIkReal x3012=((0.707106781186548)*py);\nIkReal x3013=((0.707106781186548)*px);\nIkReal x3014=((0.0636396103067893)*x3011);\nIkReal x3015=((0.0636396103067893)*x3010);\nevalcond[0]=(((x3011*x3013))+(((-1.0)*x3010*x3012))+(((-1.0)*x3010*x3013))+(((-1.0)*x3011*x3012)));\nevalcond[1]=(((py*x3014))+((py*x3015))+(((-1.0)*px*x3014))+((px*x3015)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j4]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x3016=((0.150260191002141)*py);\nIkReal x3017=((0.150260191002141)*px);\nIkReal x3018=((0.777817459305202)*pz);\nIkReal x3019=((0.707106781186548)*pp);\nIkReal x3020=(py*x3019);\nIkReal x3021=(px*x3019);\nIkReal x3022=(py*x3018);\nIkReal x3023=(px*x3018);\nIkReal x3024=(x3017+x3023+x3021);\nIkReal x3025=(x3016+x3022+x3020);\nCheckValue<IkReal> x3026=IKPowWithIntegerCheck(IKsign(((((-0.09)*(pz*pz)))+(((0.09)*pp)))),-1);\nif(!x3026.valid){\ncontinue;\n}\nCheckValue<IkReal> x3027 = IKatan2WithCheck(IkReal((x3025+(((-1.0)*x3024)))),(x3025+x3024),IKFAST_ATAN2_MAGTHRESH);\nif(!x3027.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3026.value)))+(x3027.value));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[3];\nIkReal x3028=IKsin(j4);\nIkReal x3029=IKcos(j4);\nIkReal x3030=((0.707106781186548)*py);\nIkReal x3031=((0.0636396103067893)*px);\nIkReal x3032=((0.0636396103067893)*py);\nIkReal x3033=((0.707106781186548)*px);\nIkReal x3034=(x3028*x3033);\nIkReal x3035=(x3029*x3033);\nIkReal x3036=(x3029*x3030);\nIkReal x3037=(x3028*x3030);\nIkReal x3038=(x3035+x3037);\nevalcond[0]=(x3038+x3034+(((-1.0)*x3036)));\nevalcond[1]=((0.045)+x3034+(((-0.045)*cj7))+(((-1.0)*x3038))+(((-1.0)*x3036))+(((0.3)*sj7)));\nevalcond[2]=((-0.2125)+((x3028*x3032))+(((-1.0)*pp))+(((-1.1)*pz))+(((-1.0)*x3028*x3031))+((x3029*x3032))+((x3029*x3031)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x3039=((0.0318198051533946)*py);\nIkReal x3040=((0.0318198051533946)*px);\nIkReal x3041=((0.212132034355964)*sj7);\nIkReal x3042=((0.0318198051533946)*cj7);\nIkReal x3043=(cj7*x3040);\nIkReal x3044=(cj7*x3039);\nIkReal x3045=(py*x3041);\nIkReal x3046=(px*x3041);\nIkReal x3047=(x3040+x3046);\nIkReal x3048=(x3045+x3039);\nCheckValue<IkReal> x3049=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);\nif(!x3049.valid){\ncontinue;\n}\nCheckValue<IkReal> x3050 = IKatan2WithCheck(IkReal((x3044+x3047+(((-1.0)*x3043))+(((-1.0)*x3048)))),(x3043+x3044+(((-1.0)*x3047))+(((-1.0)*x3048))),IKFAST_ATAN2_MAGTHRESH);\nif(!x3050.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3049.value)))+(x3050.value));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[3];\nIkReal x3051=IKsin(j4);\nIkReal x3052=IKcos(j4);\nIkReal x3053=((0.707106781186548)*py);\nIkReal x3054=((0.0636396103067893)*px);\nIkReal x3055=((0.0636396103067893)*py);\nIkReal x3056=((0.707106781186548)*px);\nIkReal x3057=(x3051*x3056);\nIkReal x3058=(x3052*x3056);\nIkReal x3059=(x3052*x3053);\nIkReal x3060=(x3051*x3053);\nIkReal x3061=(x3060+x3058);\nevalcond[0]=(x3061+x3057+(((-1.0)*x3059)));\nevalcond[1]=((0.045)+x3057+(((-1.0)*x3061))+(((-0.045)*cj7))+(((0.3)*sj7))+(((-1.0)*x3059)));\nevalcond[2]=((-0.2125)+(((-1.0)*x3051*x3054))+((x3051*x3055))+(((-1.0)*pp))+(((-1.1)*pz))+((x3052*x3055))+((x3052*x3054)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j4]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x3062=cj6*cj6;\nIkReal x3063=((0.0318198051533946)*py);\nIkReal x3064=((0.0318198051533946)*px);\nIkReal x3065=((0.212132034355964)*sj7);\nIkReal x3066=(cj6*sj6);\nIkReal x3067=(cj7*x3064);\nIkReal x3068=(py*x3065);\nIkReal x3069=(cj7*x3063);\nIkReal x3070=(px*x3065);\nIkReal x3071=(cj7*x3062);\nIkReal x3072=(x3062*x3064);\nIkReal x3073=(x3063*x3066);\nIkReal x3074=(x3064*x3066);\nIkReal x3075=(x3062*x3063);\nIkReal x3076=(x3062*x3069);\nIkReal x3077=(x3066*x3069);\nIkReal x3078=(x3066*x3067);\nIkReal x3079=(x3062*x3070);\nIkReal x3080=(x3066*x3068);\nIkReal x3081=(x3062*x3068);\nIkReal x3082=(x3066*x3070);\nIkReal x3083=(x3062*x3067);\nIkReal x3084=(x3076+x3078+x3063+x3068);\nIkReal x3085=(x3072+x3077+x3079+x3067);\nIkReal x3086=(x3080+x3083+x3070+x3073+x3064);\nIkReal x3087=(x3081+x3082+x3074+x3075+x3069);\nCheckValue<IkReal> x3088=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj6*(pz*pz)))+((pp*sj6)))),-1);\nif(!x3088.valid){\ncontinue;\n}\nCheckValue<IkReal> x3089 = IKatan2WithCheck(IkReal(((((-1.0)*x3086))+(((-1.0)*x3084))+x3085+x3087)),((((-1.0)*x3086))+(((-1.0)*x3087))+x3085+x3084),IKFAST_ATAN2_MAGTHRESH);\nif(!x3089.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3088.value)))+(x3089.value));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[5];\nIkReal x3090=IKsin(j4);\nIkReal x3091=IKcos(j4);\nIkReal x3092=((0.045)*cj7);\nIkReal x3093=(px*sj6);\nIkReal x3094=(cj6*px);\nIkReal x3095=(py*sj6);\nIkReal x3096=((0.3)*sj7);\nIkReal x3097=(cj6*py);\nIkReal x3098=((0.707106781186548)*x3091);\nIkReal x3099=((0.0636396103067893)*x3091);\nIkReal x3100=((0.707106781186548)*x3090);\nIkReal x3101=((0.0636396103067893)*x3090);\nIkReal x3102=(px*x3100);\nIkReal x3103=(px*x3098);\nIkReal x3104=(py*x3098);\nIkReal x3105=(py*x3100);\nIkReal x3106=(x3093*x3098);\nIkReal x3107=(x3097*x3098);\nIkReal x3108=(x3097*x3100);\nIkReal x3109=(x3093*x3100);\nIkReal x3110=(x3095*x3100);\nIkReal x3111=(x3094*x3098);\nIkReal x3112=(x3095*x3098);\nIkReal x3113=(x3094*x3100);\nIkReal x3114=(x3105+x3103);\nIkReal x3115=(x3106+x3107+x3110);\nIkReal x3116=(x3108+x3109+x3111);\nevalcond[0]=(x3102+x3114+((sj6*x3096))+(((0.045)*sj6))+(((-1.0)*x3104))+(((-1.0)*sj6*x3092)));\nevalcond[1]=(x3102+(((-1.0)*x3114))+(((-1.0)*x3104))+(((-0.045)*cj6))+(((-1.0)*cj6*x3096))+((cj6*x3092)));\nevalcond[2]=(x3116+x3113+(((-1.0)*x3112))+(((-1.0)*x3115)));\nevalcond[3]=((0.045)+x3116+x3115+x3096+(((-1.0)*x3092))+(((-1.0)*x3112))+(((-1.0)*x3113)));\nevalcond[4]=((-0.2125)+((x3094*x3101))+(((-1.0)*x3093*x3101))+(((-1.0)*x3095*x3101))+(((-1.0)*pp))+(((-1.1)*pz))+(((-1.0)*x3097*x3101))+(((-1.0)*x3093*x3099))+((x3095*x3099))+(((-1.0)*x3094*x3099))+(((-1.0)*x3097*x3099)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x3117=cj6*cj6;\nIkReal x3118=((0.212132034355964)*sj7);\nIkReal x3119=((0.0318198051533946)*cj7);\nIkReal x3120=(cj6*py*sj6);\nIkReal x3121=(px*x3117);\nIkReal x3122=(cj6*px*sj6);\nIkReal x3123=(py*x3117);\nIkReal x3124=((0.0318198051533946)*x3121);\nIkReal x3125=((0.0318198051533946)*x3122);\nIkReal x3126=((0.0318198051533946)*x3123);\nIkReal x3127=((0.0318198051533946)*x3120);\nIkReal x3128=(x3118*x3123);\nIkReal x3129=(x3118*x3122);\nIkReal x3130=(x3119*x3120);\nIkReal x3131=(x3118*x3121);\nIkReal x3132=(x3118*x3120);\nIkReal x3133=(x3119*x3123);\nIkReal x3134=(x3119*x3122);\nIkReal x3135=(x3119*x3121);\nIkReal x3136=(x3134+x3133);\nIkReal x3137=(x3124+x3131+x3130);\nIkReal x3138=(x3127+x3135+x3132);\nIkReal x3139=(x3128+x3129+x3126+x3125);\nCheckValue<IkReal> x3140 = IKatan2WithCheck(IkReal((x3139+x3138+(((-1.0)*x3136))+(((-1.0)*x3137)))),(x3137+x3139+(((-1.0)*x3138))+(((-1.0)*x3136))),IKFAST_ATAN2_MAGTHRESH);\nif(!x3140.valid){\ncontinue;\n}\nCheckValue<IkReal> x3141=IKPowWithIntegerCheck(IKsign((((cj6*(pz*pz)))+(((-1.0)*cj6*pp)))),-1);\nif(!x3141.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(x3140.value)+(((1.5707963267949)*(x3141.value))));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[5];\nIkReal x3142=IKsin(j4);\nIkReal x3143=IKcos(j4);\nIkReal x3144=((0.045)*cj7);\nIkReal x3145=(px*sj6);\nIkReal x3146=(cj6*px);\nIkReal x3147=(py*sj6);\nIkReal x3148=((0.3)*sj7);\nIkReal x3149=(cj6*py);\nIkReal x3150=((0.707106781186548)*x3143);\nIkReal x3151=((0.0636396103067893)*x3143);\nIkReal x3152=((0.707106781186548)*x3142);\nIkReal x3153=((0.0636396103067893)*x3142);\nIkReal x3154=(px*x3152);\nIkReal x3155=(px*x3150);\nIkReal x3156=(py*x3150);\nIkReal x3157=(py*x3152);\nIkReal x3158=(x3145*x3150);\nIkReal x3159=(x3149*x3150);\nIkReal x3160=(x3149*x3152);\nIkReal x3161=(x3145*x3152);\nIkReal x3162=(x3147*x3152);\nIkReal x3163=(x3146*x3150);\nIkReal x3164=(x3147*x3150);\nIkReal x3165=(x3146*x3152);\nIkReal x3166=(x3157+x3155);\nIkReal x3167=(x3159+x3158+x3162);\nIkReal x3168=(x3163+x3160+x3161);\nevalcond[0]=((((-1.0)*x3156))+x3154+x3166+(((0.045)*sj6))+((sj6*x3148))+(((-1.0)*sj6*x3144)));\nevalcond[1]=((((-1.0)*x3156))+x3154+(((-0.045)*cj6))+((cj6*x3144))+(((-1.0)*cj6*x3148))+(((-1.0)*x3166)));\nevalcond[2]=(x3168+x3165+(((-1.0)*x3164))+(((-1.0)*x3167)));\nevalcond[3]=((0.045)+x3148+x3168+x3167+(((-1.0)*x3144))+(((-1.0)*x3165))+(((-1.0)*x3164)));\nevalcond[4]=((-0.2125)+(((-1.0)*x3145*x3153))+(((-1.0)*x3145*x3151))+(((-1.0)*x3146*x3151))+((x3147*x3151))+(((-1.0)*x3149*x3153))+(((-1.0)*x3149*x3151))+(((-1.0)*pp))+(((-1.1)*pz))+(((-1.0)*x3147*x3153))+((x3146*x3153)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x3169=(cj6*px);\nIkReal x3170=((0.0318198051533946)*py);\nIkReal x3171=((0.212132034355964)*sj7);\nIkReal x3172=((0.0318198051533946)*cj7);\nIkReal x3173=(px*sj6);\nIkReal x3174=(sj6*x3170);\nIkReal x3175=((0.0318198051533946)*x3173);\nIkReal x3176=((0.0318198051533946)*x3169);\nIkReal x3177=(cj6*x3170);\nIkReal x3178=(cj7*x3177);\nIkReal x3179=(x3169*x3172);\nIkReal x3180=(x3172*x3173);\nIkReal x3181=(py*sj6*x3171);\nIkReal x3182=(cj7*x3174);\nIkReal x3183=(cj6*py*x3171);\nIkReal x3184=(x3169*x3171);\nIkReal x3185=(x3171*x3173);\nIkReal x3186=(x3180+x3178);\nIkReal x3187=(x3184+x3182+x3176);\nIkReal x3188=(x3181+x3179+x3174);\nIkReal x3189=(x3185+x3183+x3175+x3177);\nCheckValue<IkReal> x3190 = IKatan2WithCheck(IkReal((x3186+x3187+(((-1.0)*x3188))+(((-1.0)*x3189)))),(x3186+x3188+(((-1.0)*x3189))+(((-1.0)*x3187))),IKFAST_ATAN2_MAGTHRESH);\nif(!x3190.valid){\ncontinue;\n}\nCheckValue<IkReal> x3191=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);\nif(!x3191.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(x3190.value)+(((1.5707963267949)*(x3191.value))));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[5];\nIkReal x3192=IKsin(j4);\nIkReal x3193=IKcos(j4);\nIkReal x3194=((0.045)*cj7);\nIkReal x3195=(px*sj6);\nIkReal x3196=(cj6*px);\nIkReal x3197=(py*sj6);\nIkReal x3198=((0.3)*sj7);\nIkReal x3199=(cj6*py);\nIkReal x3200=((0.707106781186548)*x3193);\nIkReal x3201=((0.0636396103067893)*x3193);\nIkReal x3202=((0.707106781186548)*x3192);\nIkReal x3203=((0.0636396103067893)*x3192);\nIkReal x3204=(px*x3202);\nIkReal x3205=(px*x3200);\nIkReal x3206=(py*x3200);\nIkReal x3207=(py*x3202);\nIkReal x3208=(x3195*x3200);\nIkReal x3209=(x3199*x3200);\nIkReal x3210=(x3199*x3202);\nIkReal x3211=(x3195*x3202);\nIkReal x3212=(x3197*x3202);\nIkReal x3213=(x3196*x3200);\nIkReal x3214=(x3197*x3200);\nIkReal x3215=(x3196*x3202);\nIkReal x3216=(x3207+x3205);\nIkReal x3217=(x3212+x3209+x3208);\nIkReal x3218=(x3210+x3211+x3213);\nevalcond[0]=(x3216+x3204+(((0.045)*sj6))+(((-1.0)*x3206))+(((-1.0)*sj6*x3194))+((sj6*x3198)));\nevalcond[1]=((((-1.0)*cj6*x3198))+x3204+(((-0.045)*cj6))+(((-1.0)*x3206))+(((-1.0)*x3216))+((cj6*x3194)));\nevalcond[2]=(x3215+x3218+(((-1.0)*x3217))+(((-1.0)*x3214)));\nevalcond[3]=((0.045)+x3198+x3217+x3218+(((-1.0)*x3215))+(((-1.0)*x3214))+(((-1.0)*x3194)));\nevalcond[4]=((-0.2125)+((x3197*x3201))+(((-1.0)*x3196*x3201))+((x3196*x3203))+(((-1.0)*x3199*x3203))+(((-1.0)*x3199*x3201))+(((-1.0)*pp))+(((-1.1)*pz))+(((-1.0)*x3197*x3203))+(((-1.0)*x3195*x3203))+(((-1.0)*x3195*x3201)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j4]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x3219=((0.212132034355964)*sj7);\nIkReal x3220=((0.0318198051533946)*cj7);\nIkReal x3221=((0.0318198051533946)*py);\nIkReal x3222=(sj5*sj7);\nIkReal x3223=((0.388908729652601)*sj5);\nIkReal x3224=(cj5*cj6);\nIkReal x3225=(py*sj6);\nIkReal x3226=(px*sj6);\nIkReal x3227=(px*x3223);\nIkReal x3228=(py*x3223);\nIkReal x3229=(sj6*x3221);\nIkReal x3230=((0.0318198051533946)*x3226);\nIkReal x3231=(px*x3224);\nIkReal x3232=((0.212132034355964)*cj7*sj5);\nIkReal x3233=(x3220*x3226);\nIkReal x3234=((0.0318198051533946)*px*x3222);\nIkReal x3235=(px*x3232);\nIkReal x3236=(x3221*x3222);\nIkReal x3237=((0.0318198051533946)*x3231);\nIkReal x3238=(x3221*x3224);\nIkReal x3239=(x3219*x3225);\nIkReal x3240=(py*x3232);\nIkReal x3241=(x3220*x3225);\nIkReal x3242=(x3219*x3226);\nIkReal x3243=(py*x3219*x3224);\nIkReal x3244=(x3219*x3231);\nIkReal x3245=(x3220*x3231);\nIkReal x3246=(py*x3220*x3224);\nIkReal x3247=(x3241+x3245);\nIkReal x3248=(x3242+x3246+x3230);\nIkReal x3249=(x3243+x3240+x3233+x3236+x3238+x3228);\nIkReal x3250=(x3244+x3237+x3234+x3235+x3239+x3229+x3227);\nCheckValue<IkReal> x3251 = IKatan2WithCheck(IkReal((x3249+x3247+(((-1.0)*x3248))+(((-1.0)*x3250)))),(x3249+x3250+(((-1.0)*x3248))+(((-1.0)*x3247))),IKFAST_ATAN2_MAGTHRESH);\nif(!x3251.valid){\ncontinue;\n}\nCheckValue<IkReal> x3252=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);\nif(!x3252.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(x3251.value)+(((1.5707963267949)*(x3252.value))));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[6];\nIkReal x3253=IKsin(j4);\nIkReal x3254=IKcos(j4);\nIkReal x3255=((0.045)*cj7);\nIkReal x3256=((0.707106781186548)*sj6);\nIkReal x3257=((0.777817459305202)*sj5);\nIkReal x3258=((0.3)*sj7);\nIkReal x3259=(cj5*pz);\nIkReal x3260=(cj5*cj6);\nIkReal x3261=((0.045)*sj7);\nIkReal x3262=((0.707106781186548)*sj5);\nIkReal x3263=((0.707106781186548)*cj6);\nIkReal x3264=((0.3)*cj7);\nIkReal x3265=((0.0636396103067893)*px*sj6);\nIkReal x3266=(px*x3253);\nIkReal x3267=(cj6*pz*sj5);\nIkReal x3268=(px*x3254);\nIkReal x3269=(py*x3253);\nIkReal x3270=((0.707106781186548)*x3266);\nIkReal x3271=((0.707106781186548)*x3268);\nIkReal x3272=((0.707106781186548)*py*x3254);\nIkReal x3273=((0.707106781186548)*x3269);\nIkReal x3274=((0.0636396103067893)*py*x3254);\nIkReal x3275=(x3273+x3271);\nevalcond[0]=(x3275+x3270+(((0.045)*sj6))+(((-1.0)*sj6*x3255))+(((-1.0)*x3272))+((sj6*x3258)));\nevalcond[1]=((-0.55)+((x3262*x3269))+((x3262*x3268))+((py*x3254*x3262))+x3259+(((-1.0)*x3264))+(((-1.0)*x3261))+(((-1.0)*x3262*x3266)));\nevalcond[2]=(x3270+((sj5*x3261))+((sj5*x3264))+(((-1.0)*x3272))+(((-1.0)*x3275))+(((-1.0)*x3255*x3260))+(((0.045)*x3260))+((x3258*x3260))+(((0.55)*sj5)));\nevalcond[3]=(((x3263*x3269))+((x3263*x3266))+((x3263*x3268))+(((-1.0)*cj5*x3256*x3266))+((cj5*py*x3254*x3256))+(((-1.0)*py*x3254*x3263))+((cj5*x3256*x3269))+((cj5*x3256*x3268))+(((-1.0)*pz*sj5*sj6)));\nevalcond[4]=((0.045)+(((-1.0)*py*x3254*x3256))+((x3256*x3266))+((x3256*x3269))+((x3256*x3268))+x3267+x3258+((x3260*x3270))+(((-1.0)*x3255))+(((-1.0)*x3260*x3271))+(((-1.0)*x3260*x3273))+(((-1.0)*x3260*x3272)));\nevalcond[5]=((-0.2125)+((sj6*x3274))+(((-1.0)*x3257*x3266))+((x3257*x3268))+((x3257*x3269))+(((-0.0636396103067893)*x3260*x3266))+(((-0.09)*x3267))+(((-1.0)*pp))+(((0.0636396103067893)*x3260*x3269))+(((0.0636396103067893)*x3260*x3268))+(((-1.0)*x3254*x3265))+(((-1.0)*x3253*x3265))+(((-0.0636396103067893)*sj6*x3269))+((x3260*x3274))+(((1.1)*x3259))+((py*x3254*x3257)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x3276=((0.388908729652601)*px);\nIkReal x3277=(cj6*sj5);\nIkReal x3278=(px*sj6);\nIkReal x3279=((0.707106781186548)*pz);\nIkReal x3280=(cj5*sj6);\nIkReal x3281=((0.212132034355964)*cj7);\nIkReal x3282=(cj5*cj6);\nIkReal x3283=(cj6*py);\nIkReal x3284=(cj6*px);\nIkReal x3285=((0.0318198051533946)*sj7);\nIkReal x3286=((0.388908729652601)*x3283);\nIkReal x3287=(cj6*x3276);\nIkReal x3288=(py*x3285);\nIkReal x3289=((0.388908729652601)*py*x3280);\nIkReal x3290=(x3281*x3284);\nIkReal x3291=(x3281*x3283);\nIkReal x3292=(x3283*x3285);\nIkReal x3293=(x3278*x3279);\nIkReal x3294=(x3284*x3285);\nIkReal x3295=(x3276*x3280);\nIkReal x3296=(py*sj6*x3279);\nIkReal x3297=(x3280*x3288);\nIkReal x3298=(py*x3280*x3281);\nIkReal x3299=(cj5*x3278*x3285);\nIkReal x3300=(py*x3279*x3282);\nIkReal x3301=(cj5*x3278*x3281);\nIkReal x3302=(px*x3279*x3282);\nIkReal x3303=(x3302+x3296);\nIkReal x3304=(x3291+x3292+x3293+x3286);\nIkReal x3305=(x3300+x3301+x3299+x3295);\nIkReal x3306=(x3298+x3294+x3297+x3290+x3289+x3287);\nCheckValue<IkReal> x3307 = IKatan2WithCheck(IkReal((x3304+x3303+(((-1.0)*x3305))+(((-1.0)*x3306)))),(x3306+x3304+(((-1.0)*x3305))+(((-1.0)*x3303))),IKFAST_ATAN2_MAGTHRESH);\nif(!x3307.valid){\ncontinue;\n}\nCheckValue<IkReal> x3308=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3277*(pz*pz)))+((pp*x3277)))),-1);\nif(!x3308.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(x3307.value)+(((1.5707963267949)*(x3308.value))));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[6];\nIkReal x3309=IKsin(j4);\nIkReal x3310=IKcos(j4);\nIkReal x3311=((0.045)*cj7);\nIkReal x3312=((0.707106781186548)*sj6);\nIkReal x3313=((0.777817459305202)*sj5);\nIkReal x3314=((0.3)*sj7);\nIkReal x3315=(cj5*pz);\nIkReal x3316=(cj5*cj6);\nIkReal x3317=((0.045)*sj7);\nIkReal x3318=((0.707106781186548)*sj5);\nIkReal x3319=((0.707106781186548)*cj6);\nIkReal x3320=((0.3)*cj7);\nIkReal x3321=((0.0636396103067893)*px*sj6);\nIkReal x3322=(px*x3309);\nIkReal x3323=(cj6*pz*sj5);\nIkReal x3324=(px*x3310);\nIkReal x3325=(py*x3309);\nIkReal x3326=((0.707106781186548)*x3322);\nIkReal x3327=((0.707106781186548)*x3324);\nIkReal x3328=((0.707106781186548)*py*x3310);\nIkReal x3329=((0.707106781186548)*x3325);\nIkReal x3330=((0.0636396103067893)*py*x3310);\nIkReal x3331=(x3327+x3329);\nevalcond[0]=((((-1.0)*x3328))+((sj6*x3314))+x3326+x3331+(((0.045)*sj6))+(((-1.0)*sj6*x3311)));\nevalcond[1]=((-0.55)+(((-1.0)*x3320))+x3315+(((-1.0)*x3317))+(((-1.0)*x3318*x3322))+((py*x3310*x3318))+((x3318*x3325))+((x3318*x3324)));\nevalcond[2]=((((-1.0)*x3328))+x3326+(((-1.0)*x3331))+((sj5*x3317))+((x3314*x3316))+(((0.55)*sj5))+(((-1.0)*x3311*x3316))+(((0.045)*x3316))+((sj5*x3320)));\nevalcond[3]=(((cj5*py*x3310*x3312))+(((-1.0)*cj5*x3312*x3322))+((cj5*x3312*x3325))+((cj5*x3312*x3324))+(((-1.0)*pz*sj5*sj6))+(((-1.0)*py*x3310*x3319))+((x3319*x3322))+((x3319*x3325))+((x3319*x3324)));\nevalcond[4]=((0.045)+x3323+x3314+(((-1.0)*x3311))+((x3316*x3326))+(((-1.0)*x3316*x3327))+(((-1.0)*x3316*x3328))+(((-1.0)*x3316*x3329))+((x3312*x3325))+((x3312*x3324))+((x3312*x3322))+(((-1.0)*py*x3310*x3312)));\nevalcond[5]=((-0.2125)+(((1.1)*x3315))+(((-0.09)*x3323))+(((-1.0)*x3310*x3321))+(((0.0636396103067893)*x3316*x3325))+(((0.0636396103067893)*x3316*x3324))+((x3316*x3330))+((sj6*x3330))+(((-1.0)*pp))+((py*x3310*x3313))+(((-1.0)*x3313*x3322))+(((-0.0636396103067893)*x3316*x3322))+((x3313*x3325))+((x3313*x3324))+(((-0.0636396103067893)*sj6*x3325))+(((-1.0)*x3309*x3321)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j4array[1], cj4array[1], sj4array[1];\nbool j4valid[1]={false};\n_nj4 = 1;\nIkReal x3332=((0.388908729652601)*py);\nIkReal x3333=((0.388908729652601)*px);\nIkReal x3334=(cj7*px);\nIkReal x3335=((0.0318198051533946)*sj7);\nIkReal x3336=((0.212132034355964)*x3334);\nIkReal x3337=((0.212132034355964)*cj7*py);\nIkReal x3338=(px*x3335);\nIkReal x3339=(py*x3335);\nIkReal x3340=((0.707106781186548)*cj5*pz);\nIkReal x3341=((0.0318198051533946)*sj5*sj6);\nIkReal x3342=(px*x3341);\nIkReal x3343=(px*x3340);\nIkReal x3344=(py*x3340);\nIkReal x3345=(py*x3341);\nIkReal x3346=((0.212132034355964)*sj5*sj6*sj7);\nIkReal x3347=(px*x3346);\nIkReal x3348=(cj7*x3345);\nIkReal x3349=(x3334*x3341);\nIkReal x3350=(py*x3346);\nIkReal x3351=(x3348+x3343);\nIkReal x3352=(x3342+x3347+x3344);\nIkReal x3353=(x3349+x3332+x3337+x3339);\nIkReal x3354=(x3345+x3350+x3333+x3336+x3338);\nCheckValue<IkReal> x3355=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*sj5))+((sj5*(pz*pz))))),-1);\nif(!x3355.valid){\ncontinue;\n}\nCheckValue<IkReal> x3356 = IKatan2WithCheck(IkReal(((((-1.0)*x3353))+(((-1.0)*x3351))+x3354+x3352)),((((-1.0)*x3353))+(((-1.0)*x3354))+x3351+x3352),IKFAST_ATAN2_MAGTHRESH);\nif(!x3356.valid){\ncontinue;\n}\nj4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3355.value)))+(x3356.value));\nsj4array[0]=IKsin(j4array[0]);\ncj4array[0]=IKcos(j4array[0]);\nif( j4array[0] > IKPI )\n{\n    j4array[0]-=IK2PI;\n}\nelse if( j4array[0] < -IKPI )\n{    j4array[0]+=IK2PI;\n}\nj4valid[0] = true;\nfor(int ij4 = 0; ij4 < 1; ++ij4)\n{\nif( !j4valid[ij4] )\n{\n    continue;\n}\n_ij4[0] = ij4; _ij4[1] = -1;\nfor(int iij4 = ij4+1; iij4 < 1; ++iij4)\n{\nif( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )\n{\n    j4valid[iij4]=false; _ij4[1] = iij4; break; \n}\n}\nj4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];\n{\nIkReal evalcond[6];\nIkReal x3357=IKsin(j4);\nIkReal x3358=IKcos(j4);\nIkReal x3359=((0.045)*cj7);\nIkReal x3360=((0.707106781186548)*sj6);\nIkReal x3361=((0.777817459305202)*sj5);\nIkReal x3362=((0.3)*sj7);\nIkReal x3363=(cj5*pz);\nIkReal x3364=(cj5*cj6);\nIkReal x3365=((0.045)*sj7);\nIkReal x3366=((0.707106781186548)*sj5);\nIkReal x3367=((0.707106781186548)*cj6);\nIkReal x3368=((0.3)*cj7);\nIkReal x3369=((0.0636396103067893)*px*sj6);\nIkReal x3370=(px*x3357);\nIkReal x3371=(cj6*pz*sj5);\nIkReal x3372=(px*x3358);\nIkReal x3373=(py*x3357);\nIkReal x3374=((0.707106781186548)*x3370);\nIkReal x3375=((0.707106781186548)*x3372);\nIkReal x3376=((0.707106781186548)*py*x3358);\nIkReal x3377=((0.707106781186548)*x3373);\nIkReal x3378=((0.0636396103067893)*py*x3358);\nIkReal x3379=(x3377+x3375);\nevalcond[0]=((((-1.0)*sj6*x3359))+x3379+x3374+(((0.045)*sj6))+((sj6*x3362))+(((-1.0)*x3376)));\nevalcond[1]=((-0.55)+(((-1.0)*x3366*x3370))+x3363+(((-1.0)*x3368))+(((-1.0)*x3365))+((py*x3358*x3366))+((x3366*x3373))+((x3366*x3372)));\nevalcond[2]=((((-1.0)*x3359*x3364))+((x3362*x3364))+((sj5*x3368))+((sj5*x3365))+x3374+(((-1.0)*x3376))+(((-1.0)*x3379))+(((0.55)*sj5))+(((0.045)*x3364)));\nevalcond[3]=(((cj5*py*x3358*x3360))+(((-1.0)*cj5*x3360*x3370))+((cj5*x3360*x3372))+((cj5*x3360*x3373))+((x3367*x3373))+((x3367*x3372))+((x3367*x3370))+(((-1.0)*py*x3358*x3367))+(((-1.0)*pz*sj5*sj6)));\nevalcond[4]=((0.045)+(((-1.0)*x3359))+((x3360*x3370))+((x3360*x3373))+((x3360*x3372))+((x3364*x3374))+x3371+x3362+(((-1.0)*py*x3358*x3360))+(((-1.0)*x3364*x3377))+(((-1.0)*x3364*x3376))+(((-1.0)*x3364*x3375)));\nevalcond[5]=((-0.2125)+(((-0.0636396103067893)*x3364*x3370))+(((0.0636396103067893)*x3364*x3373))+(((0.0636396103067893)*x3364*x3372))+(((1.1)*x3363))+((x3361*x3373))+((x3361*x3372))+((x3364*x3378))+((py*x3358*x3361))+(((-1.0)*x3357*x3369))+(((-1.0)*x3361*x3370))+(((-0.0636396103067893)*sj6*x3373))+(((-1.0)*pp))+(((-0.09)*x3371))+((sj6*x3378))+(((-1.0)*x3358*x3369)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\nrotationfunction0(solutions);\n}\n}\n\n}\n\n}\n}\n}\n\n}\n\n}\n}\n}\n}\nreturn solutions.GetNumSolutions()>0;\n}\ninline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {\nfor(int rotationiter = 0; rotationiter < 1; ++rotationiter) {\nIkReal x186=((0.707106781186548)*cj6);\nIkReal x187=(sj5*sj6);\nIkReal x188=((0.707106781186548)*sj6);\nIkReal x189=(cj5*cj7);\nIkReal x190=(cj7*sj5);\nIkReal x191=((1.0)*cj6);\nIkReal x192=((1.0)*sj4);\nIkReal x193=(cj5*sj7);\nIkReal x194=(sj5*sj7);\nIkReal x195=(cj7*x188);\nIkReal x196=((0.707106781186548)*x194);\nIkReal x197=(cj5*x188);\nIkReal x198=((0.707106781186548)*x190);\nIkReal x199=(sj7*x188);\nIkReal x200=((-1.0)*sj4);\nIkReal x201=(x186*x189);\nIkReal x202=((((-1.0)*x197))+x186);\nIkReal x203=(x186*x193);\nIkReal x204=((((-1.0)*x186))+(((-1.0)*x197)));\nIkReal x205=((((-1.0)*x191*x194))+x189);\nIkReal x206=(cj4*x204);\nIkReal x207=((((-1.0)*x190*x191))+(((-1.0)*x193)));\nIkReal x208=(x198+x203);\nIkReal x209=((((-1.0)*x196))+x195+x201);\nIkReal x210=((((-1.0)*x195))+(((-1.0)*x196))+x201);\nIkReal x211=((((-1.0)*x199))+x208);\nIkReal x212=(x199+x208);\nIkReal x213=(cj4*x211);\nIkReal x214=(((cj4*x202))+((sj4*x204)));\nIkReal x215=((((-1.0)*x192*x202))+x206);\nIkReal x216=(((cj4*x209))+((sj4*x210)));\nIkReal x217=(((cj4*x210))+((x200*x209)));\nIkReal x218=(((cj4*x212))+((sj4*x211)));\nIkReal x219=(x213+((x200*x212)));\nnew_r00=(((r20*x207))+((r00*x217))+((r10*x216)));\nnew_r01=(((r11*x216))+((r21*x207))+((r01*x217)));\nnew_r02=(((r22*x207))+((r12*x216))+((r02*x217)));\nnew_r10=(((r20*x187))+((r00*x215))+((r10*x214)));\nnew_r11=(((r21*x187))+((r11*x214))+((r01*((((x200*x202))+x206)))));\nnew_r12=(((r12*x214))+((r02*x215))+((r22*x187)));\nnew_r20=(((r20*x205))+((r00*x219))+((r10*x218)));\nnew_r21=(((r11*x218))+((r21*x205))+((r01*((x213+(((-1.0)*x192*x212)))))));\nnew_r22=(((r22*x205))+((r12*x218))+((r02*x219)));\n{\nIkReal j9array[2], cj9array[2], sj9array[2];\nbool j9valid[2]={false};\n_nj9 = 2;\ncj9array[0]=new_r22;\nif( cj9array[0] >= -1-IKFAST_SINCOS_THRESH && cj9array[0] <= 1+IKFAST_SINCOS_THRESH )\n{\n    j9valid[0] = j9valid[1] = true;\n    j9array[0] = IKacos(cj9array[0]);\n    sj9array[0] = IKsin(j9array[0]);\n    cj9array[1] = cj9array[0];\n    j9array[1] = -j9array[0];\n    sj9array[1] = -sj9array[0];\n}\nelse if( isnan(cj9array[0]) )\n{\n    // probably any value will work\n    j9valid[0] = true;\n    cj9array[0] = 1; sj9array[0] = 0; j9array[0] = 0;\n}\nfor(int ij9 = 0; ij9 < 2; ++ij9)\n{\nif( !j9valid[ij9] )\n{\n    continue;\n}\n_ij9[0] = ij9; _ij9[1] = -1;\nfor(int iij9 = ij9+1; iij9 < 2; ++iij9)\n{\nif( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )\n{\n    j9valid[iij9]=false; _ij9[1] = iij9; break; \n}\n}\nj9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];\n\n{\nIkReal j8eval[2];\nIkReal x220=((0.707106781186548)*cj6);\nIkReal x221=(sj5*sj6);\nIkReal x222=((0.707106781186548)*sj6);\nIkReal x223=(cj5*cj7);\nIkReal x224=(cj7*sj5);\nIkReal x225=((1.0)*cj6);\nIkReal x226=((1.0)*sj4);\nIkReal x227=(cj5*sj7);\nIkReal x228=(sj5*sj7);\nIkReal x229=(cj7*x222);\nIkReal x230=((0.707106781186548)*x228);\nIkReal x231=(cj5*x222);\nIkReal x232=((0.707106781186548)*x224);\nIkReal x233=(sj7*x222);\nIkReal x234=((-1.0)*sj4);\nIkReal x235=(x220*x223);\nIkReal x236=((((-1.0)*x231))+x220);\nIkReal x237=(x220*x227);\nIkReal x238=((((-1.0)*x231))+(((-1.0)*x220)));\nIkReal x239=((((-1.0)*x225*x228))+x223);\nIkReal x240=(cj4*x238);\nIkReal x241=x207;\nIkReal x242=(x232+x237);\nIkReal x243=((((-1.0)*x230))+x229+x235);\nIkReal x244=((((-1.0)*x230))+x235+(((-1.0)*x229)));\nIkReal x245=((((-1.0)*x233))+x242);\nIkReal x246=(x233+x242);\nIkReal x247=(cj4*x245);\nIkReal x248=(((sj4*x238))+((cj4*x236)));\nIkReal x249=(x240+(((-1.0)*x226*x236)));\nIkReal x250=(((cj4*x243))+((sj4*x244)));\nIkReal x251=(((cj4*x244))+((x234*x243)));\nIkReal x252=(((cj4*x246))+((sj4*x245)));\nIkReal x253=(((x234*x246))+x247);\nnew_r00=(((r00*x251))+((r10*x250))+((r20*x241)));\nnew_r01=(((r11*x250))+((r01*x251))+((r21*x241)));\nnew_r02=(((r22*x241))+((r12*x250))+((r02*x251)));\nnew_r10=(((r20*x221))+((r00*x249))+((r10*x248)));\nnew_r11=(((r01*((((x234*x236))+x240))))+((r11*x248))+((r21*x221)));\nnew_r12=(((r02*x249))+((r12*x248))+((r22*x221)));\nnew_r20=(((r00*x253))+((r10*x252))+((r20*x239)));\nnew_r21=(((r11*x252))+((r01*(((((-1.0)*x226*x246))+x247))))+((r21*x239)));\nnew_r22=(((r12*x252))+((r02*x253))+((r22*x239)));\nj8eval[0]=sj9;\nj8eval[1]=IKsign(sj9);\nif( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j8eval[1];\nIkReal x254=((0.707106781186548)*cj6);\nIkReal x255=(sj5*sj6);\nIkReal x256=((0.707106781186548)*sj6);\nIkReal x257=(cj5*cj7);\nIkReal x258=(cj7*sj5);\nIkReal x259=((1.0)*cj6);\nIkReal x260=((1.0)*sj4);\nIkReal x261=(cj5*sj7);\nIkReal x262=(sj5*sj7);\nIkReal x263=(cj7*x256);\nIkReal x264=((0.707106781186548)*x262);\nIkReal x265=(cj5*x256);\nIkReal x266=((0.707106781186548)*x258);\nIkReal x267=(sj7*x256);\nIkReal x268=((-1.0)*sj4);\nIkReal x269=(x254*x257);\nIkReal x270=(x254+(((-1.0)*x265)));\nIkReal x271=(x254*x261);\nIkReal x272=((((-1.0)*x265))+(((-1.0)*x254)));\nIkReal x273=((((-1.0)*x259*x262))+x257);\nIkReal x274=(cj4*x272);\nIkReal x275=x207;\nIkReal x276=(x266+x271);\nIkReal x277=(x263+x269+(((-1.0)*x264)));\nIkReal x278=(x269+(((-1.0)*x264))+(((-1.0)*x263)));\nIkReal x279=(x276+(((-1.0)*x267)));\nIkReal x280=(x267+x276);\nIkReal x281=(cj4*x279);\nIkReal x282=(((cj4*x270))+((sj4*x272)));\nIkReal x283=(x274+(((-1.0)*x260*x270)));\nIkReal x284=(((cj4*x277))+((sj4*x278)));\nIkReal x285=(((cj4*x278))+((x268*x277)));\nIkReal x286=(((sj4*x279))+((cj4*x280)));\nIkReal x287=(((x268*x280))+x281);\nnew_r00=(((r00*x285))+((r10*x284))+((r20*x275)));\nnew_r01=(((r01*x285))+((r11*x284))+((r21*x275)));\nnew_r02=(((r22*x275))+((r02*x285))+((r12*x284)));\nnew_r10=(((r00*x283))+((r10*x282))+((r20*x255)));\nnew_r11=(((r21*x255))+((r11*x282))+((r01*((x274+((x268*x270)))))));\nnew_r12=(((r02*x283))+((r12*x282))+((r22*x255)));\nnew_r20=(((r00*x287))+((r10*x286))+((r20*x273)));\nnew_r21=(((r11*x286))+((r21*x273))+((r01*(((((-1.0)*x260*x280))+x281)))));\nnew_r22=(((r22*x273))+((r02*x287))+((r12*x286)));\nj8eval[0]=sj9;\nif( IKabs(j8eval[0]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[6];\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));\nevalcond[1]=((-1.0)+new_r22);\nevalcond[2]=new_r20;\nevalcond[3]=new_r02;\nevalcond[4]=new_r12;\nevalcond[5]=new_r21;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j8array[2], cj8array[2], sj8array[2];\nbool j8valid[2]={false};\n_nj8 = 2;\nCheckValue<IkReal> x289 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);\nif(!x289.valid){\ncontinue;\n}\nIkReal x288=x289.value;\nj8array[0]=((-1.0)*x288);\nsj8array[0]=IKsin(j8array[0]);\ncj8array[0]=IKcos(j8array[0]);\nj8array[1]=((3.14159265358979)+(((-1.0)*x288)));\nsj8array[1]=IKsin(j8array[1]);\ncj8array[1]=IKcos(j8array[1]);\nif( j8array[0] > IKPI )\n{\n    j8array[0]-=IK2PI;\n}\nelse if( j8array[0] < -IKPI )\n{    j8array[0]+=IK2PI;\n}\nj8valid[0] = true;\nif( j8array[1] > IKPI )\n{\n    j8array[1]-=IK2PI;\n}\nelse if( j8array[1] < -IKPI )\n{    j8array[1]+=IK2PI;\n}\nj8valid[1] = true;\nfor(int ij8 = 0; ij8 < 2; ++ij8)\n{\nif( !j8valid[ij8] )\n{\n    continue;\n}\n_ij8[0] = ij8; _ij8[1] = -1;\nfor(int iij8 = ij8+1; iij8 < 2; ++iij8)\n{\nif( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )\n{\n    j8valid[iij8]=false; _ij8[1] = iij8; break; \n}\n}\nj8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];\n{\nIkReal evalcond[1];\nevalcond[0]=((((-1.0)*new_r02*(IKsin(j8))))+((new_r12*(IKcos(j8)))));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nIkReal j10array[1], cj10array[1], sj10array[1];\nbool j10valid[1]={false};\n_nj10 = 1;\nIkReal x290=((1.0)*new_r01);\nif( IKabs(((((-1.0)*cj8*x290))+(((-1.0)*new_r00*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj8*new_r00))+(((-1.0)*sj8*x290)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj8*x290))+(((-1.0)*new_r00*sj8))))+IKsqr((((cj8*new_r00))+(((-1.0)*sj8*x290))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj10array[0]=IKatan2(((((-1.0)*cj8*x290))+(((-1.0)*new_r00*sj8))), (((cj8*new_r00))+(((-1.0)*sj8*x290))));\nsj10array[0]=IKsin(j10array[0]);\ncj10array[0]=IKcos(j10array[0]);\nif( j10array[0] > IKPI )\n{\n    j10array[0]-=IK2PI;\n}\nelse if( j10array[0] < -IKPI )\n{    j10array[0]+=IK2PI;\n}\nj10valid[0] = true;\nfor(int ij10 = 0; ij10 < 1; ++ij10)\n{\nif( !j10valid[ij10] )\n{\n    continue;\n}\n_ij10[0] = ij10; _ij10[1] = -1;\nfor(int iij10 = ij10+1; iij10 < 1; ++iij10)\n{\nif( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )\n{\n    j10valid[iij10]=false; _ij10[1] = iij10; break; \n}\n}\nj10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];\n{\nIkReal evalcond[8];\nIkReal x291=IKsin(j10);\nIkReal x292=IKcos(j10);\nIkReal x293=((1.0)*sj8);\nIkReal x294=((1.0)*x292);\nIkReal x295=(sj8*x291);\nIkReal x296=(cj8*x291);\nIkReal x297=(cj8*x294);\nevalcond[0]=(((new_r11*sj8))+x291+((cj8*new_r01)));\nevalcond[1]=(((sj8*x292))+x296+new_r01);\nevalcond[2]=(((new_r10*sj8))+(((-1.0)*x294))+((cj8*new_r00)));\nevalcond[3]=((((-1.0)*x291))+((cj8*new_r10))+(((-1.0)*new_r00*x293)));\nevalcond[4]=((((-1.0)*new_r01*x293))+(((-1.0)*x294))+((cj8*new_r11)));\nevalcond[5]=((((-1.0)*x297))+x295+new_r00);\nevalcond[6]=((((-1.0)*x297))+x295+new_r11);\nevalcond[7]=((((-1.0)*x296))+new_r10+(((-1.0)*x292*x293)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j4;\nvinfos[0].indices[0] = _ij4[0];\nvinfos[0].indices[1] = _ij4[1];\nvinfos[0].maxsolutions = _nj4;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j5;\nvinfos[1].indices[0] = _ij5[0];\nvinfos[1].indices[1] = _ij5[1];\nvinfos[1].maxsolutions = _nj5;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j6;\nvinfos[2].indices[0] = _ij6[0];\nvinfos[2].indices[1] = _ij6[1];\nvinfos[2].maxsolutions = _nj6;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j7;\nvinfos[3].indices[0] = _ij7[0];\nvinfos[3].indices[1] = _ij7[1];\nvinfos[3].maxsolutions = _nj7;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j8;\nvinfos[4].indices[0] = _ij8[0];\nvinfos[4].indices[1] = _ij8[1];\nvinfos[4].maxsolutions = _nj8;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j9;\nvinfos[5].indices[0] = _ij9[0];\nvinfos[5].indices[1] = _ij9[1];\nvinfos[5].maxsolutions = _nj9;\nvinfos[6].jointtype = 1;\nvinfos[6].foffset = j10;\nvinfos[6].indices[0] = _ij10[0];\nvinfos[6].indices[1] = _ij10[1];\nvinfos[6].maxsolutions = _nj10;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));\nevalcond[1]=((1.0)+new_r22);\nevalcond[2]=new_r20;\nevalcond[3]=new_r02;\nevalcond[4]=new_r12;\nevalcond[5]=new_r21;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j8array[2], cj8array[2], sj8array[2];\nbool j8valid[2]={false};\n_nj8 = 2;\nCheckValue<IkReal> x299 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);\nif(!x299.valid){\ncontinue;\n}\nIkReal x298=x299.value;\nj8array[0]=((-1.0)*x298);\nsj8array[0]=IKsin(j8array[0]);\ncj8array[0]=IKcos(j8array[0]);\nj8array[1]=((3.14159265358979)+(((-1.0)*x298)));\nsj8array[1]=IKsin(j8array[1]);\ncj8array[1]=IKcos(j8array[1]);\nif( j8array[0] > IKPI )\n{\n    j8array[0]-=IK2PI;\n}\nelse if( j8array[0] < -IKPI )\n{    j8array[0]+=IK2PI;\n}\nj8valid[0] = true;\nif( j8array[1] > IKPI )\n{\n    j8array[1]-=IK2PI;\n}\nelse if( j8array[1] < -IKPI )\n{    j8array[1]+=IK2PI;\n}\nj8valid[1] = true;\nfor(int ij8 = 0; ij8 < 2; ++ij8)\n{\nif( !j8valid[ij8] )\n{\n    continue;\n}\n_ij8[0] = ij8; _ij8[1] = -1;\nfor(int iij8 = ij8+1; iij8 < 2; ++iij8)\n{\nif( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )\n{\n    j8valid[iij8]=false; _ij8[1] = iij8; break; \n}\n}\nj8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];\n{\nIkReal evalcond[1];\nevalcond[0]=((((-1.0)*new_r02*(IKsin(j8))))+((new_r12*(IKcos(j8)))));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nIkReal j10array[1], cj10array[1], sj10array[1];\nbool j10valid[1]={false};\n_nj10 = 1;\nIkReal x300=((1.0)*new_r00);\nif( IKabs((((cj8*new_r01))+(((-1.0)*sj8*x300)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj8))+(((-1.0)*cj8*x300)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj8*new_r01))+(((-1.0)*sj8*x300))))+IKsqr(((((-1.0)*new_r01*sj8))+(((-1.0)*cj8*x300))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj10array[0]=IKatan2((((cj8*new_r01))+(((-1.0)*sj8*x300))), ((((-1.0)*new_r01*sj8))+(((-1.0)*cj8*x300))));\nsj10array[0]=IKsin(j10array[0]);\ncj10array[0]=IKcos(j10array[0]);\nif( j10array[0] > IKPI )\n{\n    j10array[0]-=IK2PI;\n}\nelse if( j10array[0] < -IKPI )\n{    j10array[0]+=IK2PI;\n}\nj10valid[0] = true;\nfor(int ij10 = 0; ij10 < 1; ++ij10)\n{\nif( !j10valid[ij10] )\n{\n    continue;\n}\n_ij10[0] = ij10; _ij10[1] = -1;\nfor(int iij10 = ij10+1; iij10 < 1; ++iij10)\n{\nif( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )\n{\n    j10valid[iij10]=false; _ij10[1] = iij10; break; \n}\n}\nj10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];\n{\nIkReal evalcond[8];\nIkReal x301=IKsin(j10);\nIkReal x302=IKcos(j10);\nIkReal x303=((1.0)*sj8);\nIkReal x304=((1.0)*x301);\nIkReal x305=(sj8*x302);\nIkReal x306=((1.0)*x302);\nIkReal x307=(cj8*x304);\nevalcond[0]=(((new_r10*sj8))+x302+((cj8*new_r00)));\nevalcond[1]=(((new_r11*sj8))+((cj8*new_r01))+(((-1.0)*x304)));\nevalcond[2]=(((sj8*x301))+((cj8*x302))+new_r00);\nevalcond[3]=(((cj8*new_r10))+(((-1.0)*new_r00*x303))+(((-1.0)*x304)));\nevalcond[4]=(((cj8*new_r11))+(((-1.0)*new_r01*x303))+(((-1.0)*x306)));\nevalcond[5]=(x305+new_r01+(((-1.0)*x307)));\nevalcond[6]=(x305+new_r10+(((-1.0)*x307)));\nevalcond[7]=((((-1.0)*x301*x303))+(((-1.0)*cj8*x306))+new_r11);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j4;\nvinfos[0].indices[0] = _ij4[0];\nvinfos[0].indices[1] = _ij4[1];\nvinfos[0].maxsolutions = _nj4;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j5;\nvinfos[1].indices[0] = _ij5[0];\nvinfos[1].indices[1] = _ij5[1];\nvinfos[1].maxsolutions = _nj5;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j6;\nvinfos[2].indices[0] = _ij6[0];\nvinfos[2].indices[1] = _ij6[1];\nvinfos[2].maxsolutions = _nj6;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j7;\nvinfos[3].indices[0] = _ij7[0];\nvinfos[3].indices[1] = _ij7[1];\nvinfos[3].maxsolutions = _nj7;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j8;\nvinfos[4].indices[0] = _ij8[0];\nvinfos[4].indices[1] = _ij8[1];\nvinfos[4].maxsolutions = _nj8;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j9;\nvinfos[5].indices[0] = _ij9[0];\nvinfos[5].indices[1] = _ij9[1];\nvinfos[5].maxsolutions = _nj9;\nvinfos[6].jointtype = 1;\nvinfos[6].foffset = j10;\nvinfos[6].indices[0] = _ij10[0];\nvinfos[6].indices[1] = _ij10[1];\nvinfos[6].maxsolutions = _nj10;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j8, j10]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j8array[1], cj8array[1], sj8array[1];\nbool j8valid[1]={false};\n_nj8 = 1;\nCheckValue<IkReal> x309=IKPowWithIntegerCheck(sj9,-1);\nif(!x309.valid){\ncontinue;\n}\nIkReal x308=x309.value;\nCheckValue<IkReal> x310=IKPowWithIntegerCheck(new_r12,-1);\nif(!x310.valid){\ncontinue;\n}\nif( IKabs((x308*(x310.value)*(((1.0)+(((-1.0)*(cj9*cj9)))+(((-1.0)*(new_r02*new_r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x308)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x308*(x310.value)*(((1.0)+(((-1.0)*(cj9*cj9)))+(((-1.0)*(new_r02*new_r02)))))))+IKsqr((new_r02*x308))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj8array[0]=IKatan2((x308*(x310.value)*(((1.0)+(((-1.0)*(cj9*cj9)))+(((-1.0)*(new_r02*new_r02)))))), (new_r02*x308));\nsj8array[0]=IKsin(j8array[0]);\ncj8array[0]=IKcos(j8array[0]);\nif( j8array[0] > IKPI )\n{\n    j8array[0]-=IK2PI;\n}\nelse if( j8array[0] < -IKPI )\n{    j8array[0]+=IK2PI;\n}\nj8valid[0] = true;\nfor(int ij8 = 0; ij8 < 1; ++ij8)\n{\nif( !j8valid[ij8] )\n{\n    continue;\n}\n_ij8[0] = ij8; _ij8[1] = -1;\nfor(int iij8 = ij8+1; iij8 < 1; ++iij8)\n{\nif( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )\n{\n    j8valid[iij8]=false; _ij8[1] = iij8; break; \n}\n}\nj8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];\n{\nIkReal evalcond[8];\nIkReal x311=IKcos(j8);\nIkReal x312=IKsin(j8);\nIkReal x313=((1.0)*cj9);\nIkReal x314=((1.0)*sj9);\nIkReal x315=((1.0)*x312);\nIkReal x316=(new_r12*x312);\nIkReal x317=(new_r02*x311);\nevalcond[0]=(new_r02+(((-1.0)*x311*x314)));\nevalcond[1]=((((-1.0)*x312*x314))+new_r12);\nevalcond[2]=((((-1.0)*new_r02*x315))+((new_r12*x311)));\nevalcond[3]=(x317+x316+(((-1.0)*x314)));\nevalcond[4]=(((cj9*x316))+((cj9*x317))+(((-1.0)*new_r22*x314)));\nevalcond[5]=((((-1.0)*new_r20*x313))+(((-1.0)*new_r10*x312*x314))+(((-1.0)*new_r00*x311*x314)));\nevalcond[6]=((((-1.0)*new_r21*x313))+(((-1.0)*new_r01*x311*x314))+(((-1.0)*new_r11*x312*x314)));\nevalcond[7]=((1.0)+(((-1.0)*new_r22*x313))+(((-1.0)*x314*x317))+(((-1.0)*x314*x316)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nIkReal j10eval[2];\nIkReal x318=((0.707106781186548)*cj6);\nIkReal x319=(sj5*sj6);\nIkReal x320=((0.707106781186548)*sj6);\nIkReal x321=(cj5*cj7);\nIkReal x322=(cj7*sj5);\nIkReal x323=((1.0)*cj6);\nIkReal x324=((1.0)*sj4);\nIkReal x325=(cj5*sj7);\nIkReal x326=(sj5*sj7);\nIkReal x327=(cj7*x320);\nIkReal x328=((0.707106781186548)*x326);\nIkReal x329=(cj5*x320);\nIkReal x330=((0.707106781186548)*x322);\nIkReal x331=(sj7*x320);\nIkReal x332=((-1.0)*sj4);\nIkReal x333=(x318*x321);\nIkReal x334=((((-1.0)*x329))+x318);\nIkReal x335=(x318*x325);\nIkReal x336=((((-1.0)*x329))+(((-1.0)*x318)));\nIkReal x337=((((-1.0)*x323*x326))+x321);\nIkReal x338=(cj4*x336);\nIkReal x339=x207;\nIkReal x340=(x330+x335);\nIkReal x341=((((-1.0)*x328))+x333+x327);\nIkReal x342=((((-1.0)*x327))+(((-1.0)*x328))+x333);\nIkReal x343=(x340+(((-1.0)*x331)));\nIkReal x344=(x331+x340);\nIkReal x345=(cj4*x343);\nIkReal x346=(((sj4*x336))+((cj4*x334)));\nIkReal x347=((((-1.0)*x324*x334))+x338);\nIkReal x348=(((cj4*x341))+((sj4*x342)));\nIkReal x349=(((cj4*x342))+((x332*x341)));\nIkReal x350=(((cj4*x344))+((sj4*x343)));\nIkReal x351=(x345+((x332*x344)));\nnew_r00=(((r00*x349))+((r20*x339))+((r10*x348)));\nnew_r01=(((r01*x349))+((r21*x339))+((r11*x348)));\nnew_r02=(((r22*x339))+((r02*x349))+((r12*x348)));\nnew_r10=(((r00*x347))+((r20*x319))+((r10*x346)));\nnew_r11=(((r01*((((x332*x334))+x338))))+((r11*x346))+((r21*x319)));\nnew_r12=(((r02*x347))+((r22*x319))+((r12*x346)));\nnew_r20=(((r00*x351))+((r20*x337))+((r10*x350)));\nnew_r21=(((r01*(((((-1.0)*x324*x344))+x345))))+((r21*x337))+((r11*x350)));\nnew_r22=(((r22*x337))+((r12*x350))+((r02*x351)));\nj10eval[0]=sj9;\nj10eval[1]=IKsign(sj9);\nif( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j10eval[2];\nIkReal x352=((0.707106781186548)*cj6);\nIkReal x353=(sj5*sj6);\nIkReal x354=((0.707106781186548)*sj6);\nIkReal x355=(cj5*cj7);\nIkReal x356=(cj7*sj5);\nIkReal x357=((1.0)*cj6);\nIkReal x358=((1.0)*sj4);\nIkReal x359=(cj5*sj7);\nIkReal x360=(sj5*sj7);\nIkReal x361=(cj7*x354);\nIkReal x362=((0.707106781186548)*x360);\nIkReal x363=(cj5*x354);\nIkReal x364=((0.707106781186548)*x356);\nIkReal x365=(sj7*x354);\nIkReal x366=((-1.0)*sj4);\nIkReal x367=(x352*x355);\nIkReal x368=((((-1.0)*x363))+x352);\nIkReal x369=(x352*x359);\nIkReal x370=((((-1.0)*x363))+(((-1.0)*x352)));\nIkReal x371=(x355+(((-1.0)*x357*x360)));\nIkReal x372=(cj4*x370);\nIkReal x373=x207;\nIkReal x374=(x369+x364);\nIkReal x375=((((-1.0)*x362))+x361+x367);\nIkReal x376=((((-1.0)*x362))+(((-1.0)*x361))+x367);\nIkReal x377=((((-1.0)*x365))+x374);\nIkReal x378=(x374+x365);\nIkReal x379=(cj4*x377);\nIkReal x380=(((sj4*x370))+((cj4*x368)));\nIkReal x381=((((-1.0)*x358*x368))+x372);\nIkReal x382=(((sj4*x376))+((cj4*x375)));\nIkReal x383=(((x366*x375))+((cj4*x376)));\nIkReal x384=(((sj4*x377))+((cj4*x378)));\nIkReal x385=(((x366*x378))+x379);\nnew_r00=(((r20*x373))+((r10*x382))+((r00*x383)));\nnew_r01=(((r11*x382))+((r21*x373))+((r01*x383)));\nnew_r02=(((r12*x382))+((r02*x383))+((r22*x373)));\nnew_r10=(((r10*x380))+((r00*x381))+((r20*x353)));\nnew_r11=(((r11*x380))+((r21*x353))+((r01*((((x366*x368))+x372)))));\nnew_r12=(((r12*x380))+((r02*x381))+((r22*x353)));\nnew_r20=(((r20*x371))+((r10*x384))+((r00*x385)));\nnew_r21=(((r11*x384))+((r01*(((((-1.0)*x358*x378))+x379))))+((r21*x371)));\nnew_r22=(((r12*x384))+((r02*x385))+((r22*x371)));\nj10eval[0]=sj8;\nj10eval[1]=sj9;\nif( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j10eval[3];\nIkReal x386=((0.707106781186548)*cj6);\nIkReal x387=(sj5*sj6);\nIkReal x388=((0.707106781186548)*sj6);\nIkReal x389=(cj5*cj7);\nIkReal x390=(cj7*sj5);\nIkReal x391=((1.0)*cj6);\nIkReal x392=((1.0)*sj4);\nIkReal x393=(cj5*sj7);\nIkReal x394=(sj5*sj7);\nIkReal x395=(cj7*x388);\nIkReal x396=((0.707106781186548)*x394);\nIkReal x397=(cj5*x388);\nIkReal x398=((0.707106781186548)*x390);\nIkReal x399=(sj7*x388);\nIkReal x400=((-1.0)*sj4);\nIkReal x401=(x386*x389);\nIkReal x402=((((-1.0)*x397))+x386);\nIkReal x403=(x386*x393);\nIkReal x404=((((-1.0)*x397))+(((-1.0)*x386)));\nIkReal x405=(x389+(((-1.0)*x391*x394)));\nIkReal x406=(cj4*x404);\nIkReal x407=x207;\nIkReal x408=(x398+x403);\nIkReal x409=((((-1.0)*x396))+x395+x401);\nIkReal x410=((((-1.0)*x395))+(((-1.0)*x396))+x401);\nIkReal x411=((((-1.0)*x399))+x408);\nIkReal x412=(x399+x408);\nIkReal x413=(cj4*x411);\nIkReal x414=(((cj4*x402))+((sj4*x404)));\nIkReal x415=((((-1.0)*x392*x402))+x406);\nIkReal x416=(((cj4*x409))+((sj4*x410)));\nIkReal x417=(((cj4*x410))+((x400*x409)));\nIkReal x418=(((cj4*x412))+((sj4*x411)));\nIkReal x419=(x413+((x400*x412)));\nnew_r00=(((r00*x417))+((r10*x416))+((r20*x407)));\nnew_r01=(((r11*x416))+((r01*x417))+((r21*x407)));\nnew_r02=(((r12*x416))+((r22*x407))+((r02*x417)));\nnew_r10=(((r20*x387))+((r00*x415))+((r10*x414)));\nnew_r11=(((r11*x414))+((r21*x387))+((r01*((x406+((x400*x402)))))));\nnew_r12=(((r22*x387))+((r12*x414))+((r02*x415)));\nnew_r20=(((r00*x419))+((r10*x418))+((r20*x405)));\nnew_r21=(((r01*(((((-1.0)*x392*x412))+x413))))+((r11*x418))+((r21*x405)));\nnew_r22=(((r12*x418))+((r22*x405))+((r02*x419)));\nj10eval[0]=cj8;\nj10eval[1]=cj9;\nj10eval[2]=sj9;\nif( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[12];\nbool bgotonextstatement = true;\ndo\n{\nIkReal x420=(new_r22+(((-1.0)*cj9)));\nIkReal x421=((((-1.0)*sj9))+new_r12);\nIkReal x422=((1.0)*sj9);\nIkReal x423=((1.0)*cj9);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));\nevalcond[1]=x420;\nevalcond[2]=x420;\nevalcond[3]=new_r02;\nevalcond[4]=x421;\nevalcond[5]=x421;\nevalcond[6]=((((-1.0)*new_r22*x422))+((cj9*new_r12)));\nevalcond[7]=((((-1.0)*new_r10*x422))+(((-1.0)*new_r20*x423)));\nevalcond[8]=((((-1.0)*new_r11*x422))+(((-1.0)*new_r21*x423)));\nevalcond[9]=((1.0)+(((-1.0)*new_r22*x423))+(((-1.0)*new_r12*x422)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j10array[1], cj10array[1], sj10array[1];\nbool j10valid[1]={false};\n_nj10 = 1;\nCheckValue<IkReal> x424 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);\nif(!x424.valid){\ncontinue;\n}\nCheckValue<IkReal> x425=IKPowWithIntegerCheck(IKsign(new_r12),-1);\nif(!x425.valid){\ncontinue;\n}\nj10array[0]=((-1.5707963267949)+(x424.value)+(((1.5707963267949)*(x425.value))));\nsj10array[0]=IKsin(j10array[0]);\ncj10array[0]=IKcos(j10array[0]);\nif( j10array[0] > IKPI )\n{\n    j10array[0]-=IK2PI;\n}\nelse if( j10array[0] < -IKPI )\n{    j10array[0]+=IK2PI;\n}\nj10valid[0] = true;\nfor(int ij10 = 0; ij10 < 1; ++ij10)\n{\nif( !j10valid[ij10] )\n{\n    continue;\n}\n_ij10[0] = ij10; _ij10[1] = -1;\nfor(int iij10 = ij10+1; iij10 < 1; ++iij10)\n{\nif( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )\n{\n    j10valid[iij10]=false; _ij10[1] = iij10; break; \n}\n}\nj10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];\n{\nIkReal evalcond[8];\nIkReal x426=IKsin(j10);\nIkReal x427=IKcos(j10);\nIkReal x428=((1.0)*new_r12);\nIkReal x429=((1.0)*x427);\nIkReal x430=((1.0)*x426);\nevalcond[0]=(((new_r12*x427))+new_r20);\nevalcond[1]=(((new_r22*x426))+new_r11);\nevalcond[2]=((((-1.0)*x426*x428))+new_r21);\nevalcond[3]=((((-1.0)*new_r22*x429))+new_r10);\nevalcond[4]=((((-1.0)*x430))+(((-1.0)*new_r00)));\nevalcond[5]=((((-1.0)*x429))+(((-1.0)*new_r01)));\nevalcond[6]=(x426+((new_r11*new_r22))+(((-1.0)*new_r21*x428)));\nevalcond[7]=((((-1.0)*x429))+((new_r10*new_r22))+(((-1.0)*new_r20*x428)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j4;\nvinfos[0].indices[0] = _ij4[0];\nvinfos[0].indices[1] = _ij4[1];\nvinfos[0].maxsolutions = _nj4;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j5;\nvinfos[1].indices[0] = _ij5[0];\nvinfos[1].indices[1] = _ij5[1];\nvinfos[1].maxsolutions = _nj5;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j6;\nvinfos[2].indices[0] = _ij6[0];\nvinfos[2].indices[1] = _ij6[1];\nvinfos[2].maxsolutions = _nj6;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j7;\nvinfos[3].indices[0] = _ij7[0];\nvinfos[3].indices[1] = _ij7[1];\nvinfos[3].maxsolutions = _nj7;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j8;\nvinfos[4].indices[0] = _ij8[0];\nvinfos[4].indices[1] = _ij8[1];\nvinfos[4].maxsolutions = _nj8;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j9;\nvinfos[5].indices[0] = _ij9[0];\nvinfos[5].indices[1] = _ij9[1];\nvinfos[5].maxsolutions = _nj9;\nvinfos[6].jointtype = 1;\nvinfos[6].foffset = j10;\nvinfos[6].indices[0] = _ij10[0];\nvinfos[6].indices[1] = _ij10[1];\nvinfos[6].maxsolutions = _nj10;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x431=(new_r22+(((-1.0)*cj9)));\nIkReal x432=((1.0)*cj9);\nIkReal x433=((1.0)*sj9);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));\nevalcond[1]=x431;\nevalcond[2]=x431;\nevalcond[3]=new_r02;\nevalcond[4]=(sj9+new_r12);\nevalcond[5]=((((-1.0)*x433))+(((-1.0)*new_r12)));\nevalcond[6]=((((-1.0)*new_r12*x432))+(((-1.0)*new_r22*x433)));\nevalcond[7]=(((new_r10*sj9))+(((-1.0)*new_r20*x432)));\nevalcond[8]=(((new_r11*sj9))+(((-1.0)*new_r21*x432)));\nevalcond[9]=((1.0)+((new_r12*sj9))+(((-1.0)*new_r22*x432)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j10array[1], cj10array[1], sj10array[1];\nbool j10valid[1]={false};\n_nj10 = 1;\nif( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj10array[0]=IKatan2(new_r00, new_r01);\nsj10array[0]=IKsin(j10array[0]);\ncj10array[0]=IKcos(j10array[0]);\nif( j10array[0] > IKPI )\n{\n    j10array[0]-=IK2PI;\n}\nelse if( j10array[0] < -IKPI )\n{    j10array[0]+=IK2PI;\n}\nj10valid[0] = true;\nfor(int ij10 = 0; ij10 < 1; ++ij10)\n{\nif( !j10valid[ij10] )\n{\n    continue;\n}\n_ij10[0] = ij10; _ij10[1] = -1;\nfor(int iij10 = ij10+1; iij10 < 1; ++iij10)\n{\nif( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )\n{\n    j10valid[iij10]=false; _ij10[1] = iij10; break; \n}\n}\nj10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];\n{\nIkReal evalcond[8];\nIkReal x434=IKsin(j10);\nIkReal x435=IKcos(j10);\nIkReal x436=((1.0)*new_r11);\nIkReal x437=((1.0)*new_r10);\nIkReal x438=((1.0)*x435);\nevalcond[0]=(((new_r12*x434))+new_r21);\nevalcond[1]=((((-1.0)*x434))+new_r00);\nevalcond[2]=((((-1.0)*x438))+new_r01);\nevalcond[3]=((((-1.0)*new_r12*x438))+new_r20);\nevalcond[4]=((((-1.0)*x436))+((new_r22*x434)));\nevalcond[5]=((((-1.0)*x437))+(((-1.0)*new_r22*x438)));\nevalcond[6]=(((new_r12*new_r21))+x434+(((-1.0)*new_r22*x436)));\nevalcond[7]=((((-1.0)*x438))+((new_r12*new_r20))+(((-1.0)*new_r22*x437)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j4;\nvinfos[0].indices[0] = _ij4[0];\nvinfos[0].indices[1] = _ij4[1];\nvinfos[0].maxsolutions = _nj4;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j5;\nvinfos[1].indices[0] = _ij5[0];\nvinfos[1].indices[1] = _ij5[1];\nvinfos[1].maxsolutions = _nj5;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j6;\nvinfos[2].indices[0] = _ij6[0];\nvinfos[2].indices[1] = _ij6[1];\nvinfos[2].maxsolutions = _nj6;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j7;\nvinfos[3].indices[0] = _ij7[0];\nvinfos[3].indices[1] = _ij7[1];\nvinfos[3].maxsolutions = _nj7;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j8;\nvinfos[4].indices[0] = _ij8[0];\nvinfos[4].indices[1] = _ij8[1];\nvinfos[4].maxsolutions = _nj8;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j9;\nvinfos[5].indices[0] = _ij9[0];\nvinfos[5].indices[1] = _ij9[1];\nvinfos[5].maxsolutions = _nj9;\nvinfos[6].jointtype = 1;\nvinfos[6].foffset = j10;\nvinfos[6].indices[0] = _ij10[0];\nvinfos[6].indices[1] = _ij10[1];\nvinfos[6].maxsolutions = _nj10;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x439=((1.0)*sj8);\nIkReal x440=((1.0)*cj8);\nIkReal x441=(((cj8*new_r12))+(((-1.0)*new_r02*x439)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));\nevalcond[1]=new_r22;\nevalcond[2]=((((-1.0)*x440))+new_r02);\nevalcond[3]=((((-1.0)*x439))+new_r12);\nevalcond[4]=x441;\nevalcond[5]=x441;\nevalcond[6]=((-1.0)+((new_r12*sj8))+((cj8*new_r02)));\nevalcond[7]=(((new_r11*sj8))+((cj8*new_r01)));\nevalcond[8]=(((new_r10*sj8))+((cj8*new_r00)));\nevalcond[9]=((((-1.0)*new_r00*x440))+(((-1.0)*new_r10*x439)));\nevalcond[10]=((((-1.0)*new_r01*x440))+(((-1.0)*new_r11*x439)));\nevalcond[11]=((1.0)+(((-1.0)*new_r02*x440))+(((-1.0)*new_r12*x439)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j10array[1], cj10array[1], sj10array[1];\nbool j10valid[1]={false};\n_nj10 = 1;\nif( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj10array[0]=IKatan2(new_r21, ((-1.0)*new_r20));\nsj10array[0]=IKsin(j10array[0]);\ncj10array[0]=IKcos(j10array[0]);\nif( j10array[0] > IKPI )\n{\n    j10array[0]-=IK2PI;\n}\nelse if( j10array[0] < -IKPI )\n{    j10array[0]+=IK2PI;\n}\nj10valid[0] = true;\nfor(int ij10 = 0; ij10 < 1; ++ij10)\n{\nif( !j10valid[ij10] )\n{\n    continue;\n}\n_ij10[0] = ij10; _ij10[1] = -1;\nfor(int iij10 = ij10+1; iij10 < 1; ++iij10)\n{\nif( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )\n{\n    j10valid[iij10]=false; _ij10[1] = iij10; break; \n}\n}\nj10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];\n{\nIkReal evalcond[8];\nIkReal x442=IKcos(j10);\nIkReal x443=IKsin(j10);\nIkReal x444=((1.0)*new_r12);\nIkReal x445=((1.0)*x443);\nIkReal x446=((1.0)*x442);\nevalcond[0]=(x442+new_r20);\nevalcond[1]=((((-1.0)*x445))+new_r21);\nevalcond[2]=(((new_r12*x442))+new_r01);\nevalcond[3]=(((new_r12*x443))+new_r00);\nevalcond[4]=((((-1.0)*new_r02*x446))+new_r11);\nevalcond[5]=((((-1.0)*new_r02*x445))+new_r10);\nevalcond[6]=((((-1.0)*x445))+(((-1.0)*new_r00*x444))+((new_r02*new_r10)));\nevalcond[7]=((((-1.0)*x446))+(((-1.0)*new_r01*x444))+((new_r02*new_r11)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j4;\nvinfos[0].indices[0] = _ij4[0];\nvinfos[0].indices[1] = _ij4[1];\nvinfos[0].maxsolutions = _nj4;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j5;\nvinfos[1].indices[0] = _ij5[0];\nvinfos[1].indices[1] = _ij5[1];\nvinfos[1].maxsolutions = _nj5;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j6;\nvinfos[2].indices[0] = _ij6[0];\nvinfos[2].indices[1] = _ij6[1];\nvinfos[2].maxsolutions = _nj6;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j7;\nvinfos[3].indices[0] = _ij7[0];\nvinfos[3].indices[1] = _ij7[1];\nvinfos[3].maxsolutions = _nj7;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j8;\nvinfos[4].indices[0] = _ij8[0];\nvinfos[4].indices[1] = _ij8[1];\nvinfos[4].maxsolutions = _nj8;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j9;\nvinfos[5].indices[0] = _ij9[0];\nvinfos[5].indices[1] = _ij9[1];\nvinfos[5].maxsolutions = _nj9;\nvinfos[6].jointtype = 1;\nvinfos[6].foffset = j10;\nvinfos[6].indices[0] = _ij10[0];\nvinfos[6].indices[1] = _ij10[1];\nvinfos[6].maxsolutions = _nj10;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x447=((((-1.0)*new_r02*sj8))+((cj8*new_r12)));\nIkReal x448=(((new_r10*sj8))+((cj8*new_r00)));\nIkReal x449=(((new_r11*sj8))+((cj8*new_r01)));\nIkReal x450=((1.0)+((new_r12*sj8))+((cj8*new_r02)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));\nevalcond[1]=new_r22;\nevalcond[2]=(cj8+new_r02);\nevalcond[3]=(sj8+new_r12);\nevalcond[4]=x447;\nevalcond[5]=x447;\nevalcond[6]=x450;\nevalcond[7]=x449;\nevalcond[8]=x448;\nevalcond[9]=x448;\nevalcond[10]=x449;\nevalcond[11]=x450;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j10array[1], cj10array[1], sj10array[1];\nbool j10valid[1]={false};\n_nj10 = 1;\nif( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj10array[0]=IKatan2(((-1.0)*new_r21), new_r20);\nsj10array[0]=IKsin(j10array[0]);\ncj10array[0]=IKcos(j10array[0]);\nif( j10array[0] > IKPI )\n{\n    j10array[0]-=IK2PI;\n}\nelse if( j10array[0] < -IKPI )\n{    j10array[0]+=IK2PI;\n}\nj10valid[0] = true;\nfor(int ij10 = 0; ij10 < 1; ++ij10)\n{\nif( !j10valid[ij10] )\n{\n    continue;\n}\n_ij10[0] = ij10; _ij10[1] = -1;\nfor(int iij10 = ij10+1; iij10 < 1; ++iij10)\n{\nif( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )\n{\n    j10valid[iij10]=false; _ij10[1] = iij10; break; \n}\n}\nj10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];\n{\nIkReal evalcond[8];\nIkReal x451=IKcos(j10);\nIkReal x452=IKsin(j10);\nIkReal x453=((1.0)*new_r02);\nIkReal x454=((1.0)*x451);\nIkReal x455=((1.0)*x452);\nevalcond[0]=(x452+new_r21);\nevalcond[1]=((((-1.0)*x454))+new_r20);\nevalcond[2]=(((new_r02*x451))+new_r11);\nevalcond[3]=(((new_r02*x452))+new_r10);\nevalcond[4]=(new_r01+(((-1.0)*new_r12*x454)));\nevalcond[5]=(new_r00+(((-1.0)*new_r12*x455)));\nevalcond[6]=((((-1.0)*new_r10*x453))+((new_r00*new_r12))+(((-1.0)*x455)));\nevalcond[7]=((((-1.0)*new_r11*x453))+((new_r01*new_r12))+(((-1.0)*x454)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j4;\nvinfos[0].indices[0] = _ij4[0];\nvinfos[0].indices[1] = _ij4[1];\nvinfos[0].maxsolutions = _nj4;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j5;\nvinfos[1].indices[0] = _ij5[0];\nvinfos[1].indices[1] = _ij5[1];\nvinfos[1].maxsolutions = _nj5;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j6;\nvinfos[2].indices[0] = _ij6[0];\nvinfos[2].indices[1] = _ij6[1];\nvinfos[2].maxsolutions = _nj6;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j7;\nvinfos[3].indices[0] = _ij7[0];\nvinfos[3].indices[1] = _ij7[1];\nvinfos[3].maxsolutions = _nj7;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j8;\nvinfos[4].indices[0] = _ij8[0];\nvinfos[4].indices[1] = _ij8[1];\nvinfos[4].maxsolutions = _nj8;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j9;\nvinfos[5].indices[0] = _ij9[0];\nvinfos[5].indices[1] = _ij9[1];\nvinfos[5].maxsolutions = _nj9;\nvinfos[6].jointtype = 1;\nvinfos[6].foffset = j10;\nvinfos[6].indices[0] = _ij10[0];\nvinfos[6].indices[1] = _ij10[1];\nvinfos[6].maxsolutions = _nj10;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x456=((((-1.0)*new_r02*sj8))+((cj8*new_r12)));\nIkReal x457=(((new_r12*sj8))+((cj8*new_r02)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));\nevalcond[1]=((-1.0)+new_r22);\nevalcond[2]=new_r20;\nevalcond[3]=new_r02;\nevalcond[4]=new_r12;\nevalcond[5]=new_r21;\nevalcond[6]=x456;\nevalcond[7]=x456;\nevalcond[8]=x457;\nevalcond[9]=x457;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j10array[1], cj10array[1], sj10array[1];\nbool j10valid[1]={false};\n_nj10 = 1;\nIkReal x458=((1.0)*new_r01);\nif( IKabs(((((-1.0)*cj8*x458))+(((-1.0)*new_r00*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj8*x458))+((cj8*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj8*x458))+(((-1.0)*new_r00*sj8))))+IKsqr(((((-1.0)*sj8*x458))+((cj8*new_r00))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj10array[0]=IKatan2(((((-1.0)*cj8*x458))+(((-1.0)*new_r00*sj8))), ((((-1.0)*sj8*x458))+((cj8*new_r00))));\nsj10array[0]=IKsin(j10array[0]);\ncj10array[0]=IKcos(j10array[0]);\nif( j10array[0] > IKPI )\n{\n    j10array[0]-=IK2PI;\n}\nelse if( j10array[0] < -IKPI )\n{    j10array[0]+=IK2PI;\n}\nj10valid[0] = true;\nfor(int ij10 = 0; ij10 < 1; ++ij10)\n{\nif( !j10valid[ij10] )\n{\n    continue;\n}\n_ij10[0] = ij10; _ij10[1] = -1;\nfor(int iij10 = ij10+1; iij10 < 1; ++iij10)\n{\nif( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )\n{\n    j10valid[iij10]=false; _ij10[1] = iij10; break; \n}\n}\nj10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];\n{\nIkReal evalcond[8];\nIkReal x459=IKsin(j10);\nIkReal x460=IKcos(j10);\nIkReal x461=((1.0)*sj8);\nIkReal x462=((1.0)*x460);\nIkReal x463=(sj8*x459);\nIkReal x464=(cj8*x459);\nIkReal x465=(cj8*x462);\nevalcond[0]=(((new_r11*sj8))+((cj8*new_r01))+x459);\nevalcond[1]=(x464+new_r01+((sj8*x460)));\nevalcond[2]=(((new_r10*sj8))+(((-1.0)*x462))+((cj8*new_r00)));\nevalcond[3]=((((-1.0)*x459))+((cj8*new_r10))+(((-1.0)*new_r00*x461)));\nevalcond[4]=((((-1.0)*new_r01*x461))+(((-1.0)*x462))+((cj8*new_r11)));\nevalcond[5]=((((-1.0)*x465))+x463+new_r00);\nevalcond[6]=((((-1.0)*x465))+x463+new_r11);\nevalcond[7]=((((-1.0)*x460*x461))+(((-1.0)*x464))+new_r10);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j4;\nvinfos[0].indices[0] = _ij4[0];\nvinfos[0].indices[1] = _ij4[1];\nvinfos[0].maxsolutions = _nj4;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j5;\nvinfos[1].indices[0] = _ij5[0];\nvinfos[1].indices[1] = _ij5[1];\nvinfos[1].maxsolutions = _nj5;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j6;\nvinfos[2].indices[0] = _ij6[0];\nvinfos[2].indices[1] = _ij6[1];\nvinfos[2].maxsolutions = _nj6;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j7;\nvinfos[3].indices[0] = _ij7[0];\nvinfos[3].indices[1] = _ij7[1];\nvinfos[3].maxsolutions = _nj7;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j8;\nvinfos[4].indices[0] = _ij8[0];\nvinfos[4].indices[1] = _ij8[1];\nvinfos[4].maxsolutions = _nj8;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j9;\nvinfos[5].indices[0] = _ij9[0];\nvinfos[5].indices[1] = _ij9[1];\nvinfos[5].maxsolutions = _nj9;\nvinfos[6].jointtype = 1;\nvinfos[6].foffset = j10;\nvinfos[6].indices[0] = _ij10[0];\nvinfos[6].indices[1] = _ij10[1];\nvinfos[6].maxsolutions = _nj10;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x466=((1.0)*new_r02);\nIkReal x467=(new_r12*sj8);\nIkReal x468=((((-1.0)*sj8*x466))+((cj8*new_r12)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));\nevalcond[1]=((1.0)+new_r22);\nevalcond[2]=new_r20;\nevalcond[3]=new_r02;\nevalcond[4]=new_r12;\nevalcond[5]=new_r21;\nevalcond[6]=x468;\nevalcond[7]=x468;\nevalcond[8]=(((cj8*new_r02))+x467);\nevalcond[9]=((((-1.0)*x467))+(((-1.0)*cj8*x466)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j10array[1], cj10array[1], sj10array[1];\nbool j10valid[1]={false};\n_nj10 = 1;\nIkReal x469=((1.0)*new_r00);\nif( IKabs(((((-1.0)*sj8*x469))+((cj8*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj8))+(((-1.0)*cj8*x469)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj8*x469))+((cj8*new_r01))))+IKsqr(((((-1.0)*new_r01*sj8))+(((-1.0)*cj8*x469))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj10array[0]=IKatan2(((((-1.0)*sj8*x469))+((cj8*new_r01))), ((((-1.0)*new_r01*sj8))+(((-1.0)*cj8*x469))));\nsj10array[0]=IKsin(j10array[0]);\ncj10array[0]=IKcos(j10array[0]);\nif( j10array[0] > IKPI )\n{\n    j10array[0]-=IK2PI;\n}\nelse if( j10array[0] < -IKPI )\n{    j10array[0]+=IK2PI;\n}\nj10valid[0] = true;\nfor(int ij10 = 0; ij10 < 1; ++ij10)\n{\nif( !j10valid[ij10] )\n{\n    continue;\n}\n_ij10[0] = ij10; _ij10[1] = -1;\nfor(int iij10 = ij10+1; iij10 < 1; ++iij10)\n{\nif( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )\n{\n    j10valid[iij10]=false; _ij10[1] = iij10; break; \n}\n}\nj10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];\n{\nIkReal evalcond[8];\nIkReal x470=IKsin(j10);\nIkReal x471=IKcos(j10);\nIkReal x472=((1.0)*sj8);\nIkReal x473=((1.0)*x470);\nIkReal x474=(sj8*x471);\nIkReal x475=((1.0)*x471);\nIkReal x476=(cj8*x473);\nevalcond[0]=(((new_r10*sj8))+((cj8*new_r00))+x471);\nevalcond[1]=(((new_r11*sj8))+(((-1.0)*x473))+((cj8*new_r01)));\nevalcond[2]=(((cj8*x471))+((sj8*x470))+new_r00);\nevalcond[3]=((((-1.0)*new_r00*x472))+(((-1.0)*x473))+((cj8*new_r10)));\nevalcond[4]=((((-1.0)*x475))+(((-1.0)*new_r01*x472))+((cj8*new_r11)));\nevalcond[5]=((((-1.0)*x476))+x474+new_r01);\nevalcond[6]=((((-1.0)*x476))+x474+new_r10);\nevalcond[7]=((((-1.0)*cj8*x475))+new_r11+(((-1.0)*x470*x472)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j4;\nvinfos[0].indices[0] = _ij4[0];\nvinfos[0].indices[1] = _ij4[1];\nvinfos[0].maxsolutions = _nj4;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j5;\nvinfos[1].indices[0] = _ij5[0];\nvinfos[1].indices[1] = _ij5[1];\nvinfos[1].maxsolutions = _nj5;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j6;\nvinfos[2].indices[0] = _ij6[0];\nvinfos[2].indices[1] = _ij6[1];\nvinfos[2].maxsolutions = _nj6;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j7;\nvinfos[3].indices[0] = _ij7[0];\nvinfos[3].indices[1] = _ij7[1];\nvinfos[3].maxsolutions = _nj7;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j8;\nvinfos[4].indices[0] = _ij8[0];\nvinfos[4].indices[1] = _ij8[1];\nvinfos[4].maxsolutions = _nj8;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j9;\nvinfos[5].indices[0] = _ij9[0];\nvinfos[5].indices[1] = _ij9[1];\nvinfos[5].maxsolutions = _nj9;\nvinfos[6].jointtype = 1;\nvinfos[6].foffset = j10;\nvinfos[6].indices[0] = _ij10[0];\nvinfos[6].indices[1] = _ij10[1];\nvinfos[6].maxsolutions = _nj10;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x477=(new_r22+(((-1.0)*cj9)));\nIkReal x478=((((-1.0)*sj9))+new_r02);\nIkReal x479=((1.0)*sj9);\nIkReal x480=((1.0)*cj9);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));\nevalcond[1]=x477;\nevalcond[2]=x477;\nevalcond[3]=x478;\nevalcond[4]=new_r12;\nevalcond[5]=x478;\nevalcond[6]=((((-1.0)*new_r22*x479))+((cj9*new_r02)));\nevalcond[7]=((((-1.0)*new_r00*x479))+(((-1.0)*new_r20*x480)));\nevalcond[8]=((((-1.0)*new_r21*x480))+(((-1.0)*new_r01*x479)));\nevalcond[9]=((1.0)+(((-1.0)*new_r02*x479))+(((-1.0)*new_r22*x480)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j10array[1], cj10array[1], sj10array[1];\nbool j10valid[1]={false};\n_nj10 = 1;\nif( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj10array[0]=IKatan2(new_r10, new_r11);\nsj10array[0]=IKsin(j10array[0]);\ncj10array[0]=IKcos(j10array[0]);\nif( j10array[0] > IKPI )\n{\n    j10array[0]-=IK2PI;\n}\nelse if( j10array[0] < -IKPI )\n{    j10array[0]+=IK2PI;\n}\nj10valid[0] = true;\nfor(int ij10 = 0; ij10 < 1; ++ij10)\n{\nif( !j10valid[ij10] )\n{\n    continue;\n}\n_ij10[0] = ij10; _ij10[1] = -1;\nfor(int iij10 = ij10+1; iij10 < 1; ++iij10)\n{\nif( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )\n{\n    j10valid[iij10]=false; _ij10[1] = iij10; break; \n}\n}\nj10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];\n{\nIkReal evalcond[8];\nIkReal x481=IKcos(j10);\nIkReal x482=IKsin(j10);\nIkReal x483=((1.0)*new_r02);\nIkReal x484=((1.0)*x481);\nevalcond[0]=(((new_r02*x481))+new_r20);\nevalcond[1]=((((-1.0)*x482))+new_r10);\nevalcond[2]=((((-1.0)*x484))+new_r11);\nevalcond[3]=(new_r01+((new_r22*x482)));\nevalcond[4]=((((-1.0)*x482*x483))+new_r21);\nevalcond[5]=(new_r00+(((-1.0)*new_r22*x484)));\nevalcond[6]=((((-1.0)*new_r21*x483))+((new_r01*new_r22))+x482);\nevalcond[7]=((((-1.0)*x484))+((new_r00*new_r22))+(((-1.0)*new_r20*x483)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j4;\nvinfos[0].indices[0] = _ij4[0];\nvinfos[0].indices[1] = _ij4[1];\nvinfos[0].maxsolutions = _nj4;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j5;\nvinfos[1].indices[0] = _ij5[0];\nvinfos[1].indices[1] = _ij5[1];\nvinfos[1].maxsolutions = _nj5;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j6;\nvinfos[2].indices[0] = _ij6[0];\nvinfos[2].indices[1] = _ij6[1];\nvinfos[2].maxsolutions = _nj6;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j7;\nvinfos[3].indices[0] = _ij7[0];\nvinfos[3].indices[1] = _ij7[1];\nvinfos[3].maxsolutions = _nj7;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j8;\nvinfos[4].indices[0] = _ij8[0];\nvinfos[4].indices[1] = _ij8[1];\nvinfos[4].maxsolutions = _nj8;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j9;\nvinfos[5].indices[0] = _ij9[0];\nvinfos[5].indices[1] = _ij9[1];\nvinfos[5].maxsolutions = _nj9;\nvinfos[6].jointtype = 1;\nvinfos[6].foffset = j10;\nvinfos[6].indices[0] = _ij10[0];\nvinfos[6].indices[1] = _ij10[1];\nvinfos[6].maxsolutions = _nj10;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x485=(new_r22+(((-1.0)*cj9)));\nIkReal x486=((1.0)*cj9);\nIkReal x487=((1.0)*sj9);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));\nevalcond[1]=x485;\nevalcond[2]=x485;\nevalcond[3]=(sj9+new_r02);\nevalcond[4]=new_r12;\nevalcond[5]=((((-1.0)*x487))+(((-1.0)*new_r02)));\nevalcond[6]=((((-1.0)*new_r02*x486))+(((-1.0)*new_r22*x487)));\nevalcond[7]=((((-1.0)*new_r20*x486))+((new_r00*sj9)));\nevalcond[8]=((((-1.0)*new_r21*x486))+((new_r01*sj9)));\nevalcond[9]=((1.0)+((new_r02*sj9))+(((-1.0)*new_r22*x486)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j10array[1], cj10array[1], sj10array[1];\nbool j10valid[1]={false};\n_nj10 = 1;\nCheckValue<IkReal> x488 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);\nif(!x488.valid){\ncontinue;\n}\nCheckValue<IkReal> x489=IKPowWithIntegerCheck(IKsign(new_r02),-1);\nif(!x489.valid){\ncontinue;\n}\nj10array[0]=((-1.5707963267949)+(x488.value)+(((1.5707963267949)*(x489.value))));\nsj10array[0]=IKsin(j10array[0]);\ncj10array[0]=IKcos(j10array[0]);\nif( j10array[0] > IKPI )\n{\n    j10array[0]-=IK2PI;\n}\nelse if( j10array[0] < -IKPI )\n{    j10array[0]+=IK2PI;\n}\nj10valid[0] = true;\nfor(int ij10 = 0; ij10 < 1; ++ij10)\n{\nif( !j10valid[ij10] )\n{\n    continue;\n}\n_ij10[0] = ij10; _ij10[1] = -1;\nfor(int iij10 = ij10+1; iij10 < 1; ++iij10)\n{\nif( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )\n{\n    j10valid[iij10]=false; _ij10[1] = iij10; break; \n}\n}\nj10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];\n{\nIkReal evalcond[8];\nIkReal x490=IKsin(j10);\nIkReal x491=IKcos(j10);\nIkReal x492=((1.0)*new_r22);\nIkReal x493=((1.0)*x491);\nevalcond[0]=(((new_r02*x490))+new_r21);\nevalcond[1]=((((-1.0)*new_r02*x493))+new_r20);\nevalcond[2]=((((-1.0)*x490))+(((-1.0)*new_r10)));\nevalcond[3]=((((-1.0)*x493))+(((-1.0)*new_r11)));\nevalcond[4]=(((new_r22*x490))+(((-1.0)*new_r01)));\nevalcond[5]=((((-1.0)*x491*x492))+(((-1.0)*new_r00)));\nevalcond[6]=((((-1.0)*new_r01*x492))+x490+((new_r02*new_r21)));\nevalcond[7]=((((-1.0)*new_r00*x492))+(((-1.0)*x493))+((new_r02*new_r20)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j4;\nvinfos[0].indices[0] = _ij4[0];\nvinfos[0].indices[1] = _ij4[1];\nvinfos[0].maxsolutions = _nj4;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j5;\nvinfos[1].indices[0] = _ij5[0];\nvinfos[1].indices[1] = _ij5[1];\nvinfos[1].maxsolutions = _nj5;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j6;\nvinfos[2].indices[0] = _ij6[0];\nvinfos[2].indices[1] = _ij6[1];\nvinfos[2].maxsolutions = _nj6;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j7;\nvinfos[3].indices[0] = _ij7[0];\nvinfos[3].indices[1] = _ij7[1];\nvinfos[3].maxsolutions = _nj7;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j8;\nvinfos[4].indices[0] = _ij8[0];\nvinfos[4].indices[1] = _ij8[1];\nvinfos[4].maxsolutions = _nj8;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j9;\nvinfos[5].indices[0] = _ij9[0];\nvinfos[5].indices[1] = _ij9[1];\nvinfos[5].maxsolutions = _nj9;\nvinfos[6].jointtype = 1;\nvinfos[6].foffset = j10;\nvinfos[6].indices[0] = _ij10[0];\nvinfos[6].indices[1] = _ij10[1];\nvinfos[6].maxsolutions = _nj10;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j10]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j10array[1], cj10array[1], sj10array[1];\nbool j10valid[1]={false};\n_nj10 = 1;\nCheckValue<IkReal> x495=IKPowWithIntegerCheck(sj9,-1);\nif(!x495.valid){\ncontinue;\n}\nIkReal x494=x495.value;\nCheckValue<IkReal> x496=IKPowWithIntegerCheck(cj8,-1);\nif(!x496.valid){\ncontinue;\n}\nCheckValue<IkReal> x497=IKPowWithIntegerCheck(cj9,-1);\nif(!x497.valid){\ncontinue;\n}\nif( IKabs((x494*(x496.value)*(x497.value)*((((new_r20*sj8))+(((-1.0)*new_r01*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x494)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x494*(x496.value)*(x497.value)*((((new_r20*sj8))+(((-1.0)*new_r01*sj9))))))+IKsqr(((-1.0)*new_r20*x494))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj10array[0]=IKatan2((x494*(x496.value)*(x497.value)*((((new_r20*sj8))+(((-1.0)*new_r01*sj9))))), ((-1.0)*new_r20*x494));\nsj10array[0]=IKsin(j10array[0]);\ncj10array[0]=IKcos(j10array[0]);\nif( j10array[0] > IKPI )\n{\n    j10array[0]-=IK2PI;\n}\nelse if( j10array[0] < -IKPI )\n{    j10array[0]+=IK2PI;\n}\nj10valid[0] = true;\nfor(int ij10 = 0; ij10 < 1; ++ij10)\n{\nif( !j10valid[ij10] )\n{\n    continue;\n}\n_ij10[0] = ij10; _ij10[1] = -1;\nfor(int iij10 = ij10+1; iij10 < 1; ++iij10)\n{\nif( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )\n{\n    j10valid[iij10]=false; _ij10[1] = iij10; break; \n}\n}\nj10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];\n{\nIkReal evalcond[12];\nIkReal x498=IKsin(j10);\nIkReal x499=IKcos(j10);\nIkReal x500=(cj9*sj8);\nIkReal x501=((1.0)*sj9);\nIkReal x502=((1.0)*sj8);\nIkReal x503=((1.0)*cj8);\nIkReal x504=(cj8*new_r00);\nIkReal x505=(cj8*new_r01);\nIkReal x506=((1.0)*x499);\nIkReal x507=(cj9*x498);\nIkReal x508=(cj9*x506);\nevalcond[0]=(new_r20+((sj9*x499)));\nevalcond[1]=(new_r21+(((-1.0)*x498*x501)));\nevalcond[2]=(((new_r11*sj8))+x505+x507);\nevalcond[3]=((((-1.0)*new_r00*x502))+((cj8*new_r10))+(((-1.0)*x498)));\nevalcond[4]=((((-1.0)*new_r01*x502))+(((-1.0)*x506))+((cj8*new_r11)));\nevalcond[5]=(((cj8*x507))+((sj8*x499))+new_r01);\nevalcond[6]=(((new_r10*sj8))+(((-1.0)*x508))+x504);\nevalcond[7]=(((sj8*x498))+(((-1.0)*cj9*x499*x503))+new_r00);\nevalcond[8]=((((-1.0)*x499*x503))+((x498*x500))+new_r11);\nevalcond[9]=(new_r10+(((-1.0)*x498*x503))+(((-1.0)*x500*x506)));\nevalcond[10]=((((-1.0)*new_r21*x501))+((cj9*x505))+((new_r11*x500))+x498);\nevalcond[11]=(((cj9*x504))+(((-1.0)*new_r20*x501))+(((-1.0)*x506))+((new_r10*x500)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j4;\nvinfos[0].indices[0] = _ij4[0];\nvinfos[0].indices[1] = _ij4[1];\nvinfos[0].maxsolutions = _nj4;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j5;\nvinfos[1].indices[0] = _ij5[0];\nvinfos[1].indices[1] = _ij5[1];\nvinfos[1].maxsolutions = _nj5;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j6;\nvinfos[2].indices[0] = _ij6[0];\nvinfos[2].indices[1] = _ij6[1];\nvinfos[2].maxsolutions = _nj6;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j7;\nvinfos[3].indices[0] = _ij7[0];\nvinfos[3].indices[1] = _ij7[1];\nvinfos[3].maxsolutions = _nj7;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j8;\nvinfos[4].indices[0] = _ij8[0];\nvinfos[4].indices[1] = _ij8[1];\nvinfos[4].maxsolutions = _nj8;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j9;\nvinfos[5].indices[0] = _ij9[0];\nvinfos[5].indices[1] = _ij9[1];\nvinfos[5].maxsolutions = _nj9;\nvinfos[6].jointtype = 1;\nvinfos[6].foffset = j10;\nvinfos[6].indices[0] = _ij10[0];\nvinfos[6].indices[1] = _ij10[1];\nvinfos[6].maxsolutions = _nj10;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j10array[1], cj10array[1], sj10array[1];\nbool j10valid[1]={false};\n_nj10 = 1;\nCheckValue<IkReal> x510=IKPowWithIntegerCheck(sj9,-1);\nif(!x510.valid){\ncontinue;\n}\nIkReal x509=x510.value;\nCheckValue<IkReal> x511=IKPowWithIntegerCheck(sj8,-1);\nif(!x511.valid){\ncontinue;\n}\nif( IKabs((x509*(x511.value)*(((((-1.0)*cj8*cj9*new_r20))+(((-1.0)*new_r00*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x509)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x509*(x511.value)*(((((-1.0)*cj8*cj9*new_r20))+(((-1.0)*new_r00*sj9))))))+IKsqr(((-1.0)*new_r20*x509))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj10array[0]=IKatan2((x509*(x511.value)*(((((-1.0)*cj8*cj9*new_r20))+(((-1.0)*new_r00*sj9))))), ((-1.0)*new_r20*x509));\nsj10array[0]=IKsin(j10array[0]);\ncj10array[0]=IKcos(j10array[0]);\nif( j10array[0] > IKPI )\n{\n    j10array[0]-=IK2PI;\n}\nelse if( j10array[0] < -IKPI )\n{    j10array[0]+=IK2PI;\n}\nj10valid[0] = true;\nfor(int ij10 = 0; ij10 < 1; ++ij10)\n{\nif( !j10valid[ij10] )\n{\n    continue;\n}\n_ij10[0] = ij10; _ij10[1] = -1;\nfor(int iij10 = ij10+1; iij10 < 1; ++iij10)\n{\nif( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )\n{\n    j10valid[iij10]=false; _ij10[1] = iij10; break; \n}\n}\nj10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];\n{\nIkReal evalcond[12];\nIkReal x512=IKsin(j10);\nIkReal x513=IKcos(j10);\nIkReal x514=(cj9*sj8);\nIkReal x515=((1.0)*sj9);\nIkReal x516=((1.0)*sj8);\nIkReal x517=((1.0)*cj8);\nIkReal x518=(cj8*new_r00);\nIkReal x519=(cj8*new_r01);\nIkReal x520=((1.0)*x513);\nIkReal x521=(cj9*x512);\nIkReal x522=(cj9*x520);\nevalcond[0]=(((sj9*x513))+new_r20);\nevalcond[1]=((((-1.0)*x512*x515))+new_r21);\nevalcond[2]=(((new_r11*sj8))+x521+x519);\nevalcond[3]=((((-1.0)*x512))+((cj8*new_r10))+(((-1.0)*new_r00*x516)));\nevalcond[4]=((((-1.0)*x520))+((cj8*new_r11))+(((-1.0)*new_r01*x516)));\nevalcond[5]=(((sj8*x513))+((cj8*x521))+new_r01);\nevalcond[6]=(((new_r10*sj8))+(((-1.0)*x522))+x518);\nevalcond[7]=(((sj8*x512))+(((-1.0)*cj9*x513*x517))+new_r00);\nevalcond[8]=((((-1.0)*x513*x517))+((x512*x514))+new_r11);\nevalcond[9]=((((-1.0)*x512*x517))+new_r10+(((-1.0)*x514*x520)));\nevalcond[10]=(((new_r11*x514))+x512+(((-1.0)*new_r21*x515))+((cj9*x519)));\nevalcond[11]=(((new_r10*x514))+(((-1.0)*x520))+((cj9*x518))+(((-1.0)*new_r20*x515)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j4;\nvinfos[0].indices[0] = _ij4[0];\nvinfos[0].indices[1] = _ij4[1];\nvinfos[0].maxsolutions = _nj4;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j5;\nvinfos[1].indices[0] = _ij5[0];\nvinfos[1].indices[1] = _ij5[1];\nvinfos[1].maxsolutions = _nj5;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j6;\nvinfos[2].indices[0] = _ij6[0];\nvinfos[2].indices[1] = _ij6[1];\nvinfos[2].maxsolutions = _nj6;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j7;\nvinfos[3].indices[0] = _ij7[0];\nvinfos[3].indices[1] = _ij7[1];\nvinfos[3].maxsolutions = _nj7;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j8;\nvinfos[4].indices[0] = _ij8[0];\nvinfos[4].indices[1] = _ij8[1];\nvinfos[4].maxsolutions = _nj8;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j9;\nvinfos[5].indices[0] = _ij9[0];\nvinfos[5].indices[1] = _ij9[1];\nvinfos[5].maxsolutions = _nj9;\nvinfos[6].jointtype = 1;\nvinfos[6].foffset = j10;\nvinfos[6].indices[0] = _ij10[0];\nvinfos[6].indices[1] = _ij10[1];\nvinfos[6].maxsolutions = _nj10;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j10array[1], cj10array[1], sj10array[1];\nbool j10valid[1]={false};\n_nj10 = 1;\nCheckValue<IkReal> x523 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);\nif(!x523.valid){\ncontinue;\n}\nCheckValue<IkReal> x524=IKPowWithIntegerCheck(IKsign(sj9),-1);\nif(!x524.valid){\ncontinue;\n}\nj10array[0]=((-1.5707963267949)+(x523.value)+(((1.5707963267949)*(x524.value))));\nsj10array[0]=IKsin(j10array[0]);\ncj10array[0]=IKcos(j10array[0]);\nif( j10array[0] > IKPI )\n{\n    j10array[0]-=IK2PI;\n}\nelse if( j10array[0] < -IKPI )\n{    j10array[0]+=IK2PI;\n}\nj10valid[0] = true;\nfor(int ij10 = 0; ij10 < 1; ++ij10)\n{\nif( !j10valid[ij10] )\n{\n    continue;\n}\n_ij10[0] = ij10; _ij10[1] = -1;\nfor(int iij10 = ij10+1; iij10 < 1; ++iij10)\n{\nif( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )\n{\n    j10valid[iij10]=false; _ij10[1] = iij10; break; \n}\n}\nj10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];\n{\nIkReal evalcond[12];\nIkReal x525=IKsin(j10);\nIkReal x526=IKcos(j10);\nIkReal x527=(cj9*sj8);\nIkReal x528=((1.0)*sj9);\nIkReal x529=((1.0)*sj8);\nIkReal x530=((1.0)*cj8);\nIkReal x531=(cj8*new_r00);\nIkReal x532=(cj8*new_r01);\nIkReal x533=((1.0)*x526);\nIkReal x534=(cj9*x525);\nIkReal x535=(cj9*x533);\nevalcond[0]=(((sj9*x526))+new_r20);\nevalcond[1]=((((-1.0)*x525*x528))+new_r21);\nevalcond[2]=(((new_r11*sj8))+x532+x534);\nevalcond[3]=((((-1.0)*x525))+(((-1.0)*new_r00*x529))+((cj8*new_r10)));\nevalcond[4]=((((-1.0)*x533))+((cj8*new_r11))+(((-1.0)*new_r01*x529)));\nevalcond[5]=(((sj8*x526))+((cj8*x534))+new_r01);\nevalcond[6]=(((new_r10*sj8))+(((-1.0)*x535))+x531);\nevalcond[7]=(((sj8*x525))+new_r00+(((-1.0)*cj9*x526*x530)));\nevalcond[8]=((((-1.0)*x526*x530))+((x525*x527))+new_r11);\nevalcond[9]=((((-1.0)*x525*x530))+(((-1.0)*x527*x533))+new_r10);\nevalcond[10]=(((new_r11*x527))+(((-1.0)*new_r21*x528))+((cj9*x532))+x525);\nevalcond[11]=((((-1.0)*new_r20*x528))+(((-1.0)*x533))+((new_r10*x527))+((cj9*x531)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j4;\nvinfos[0].indices[0] = _ij4[0];\nvinfos[0].indices[1] = _ij4[1];\nvinfos[0].maxsolutions = _nj4;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j5;\nvinfos[1].indices[0] = _ij5[0];\nvinfos[1].indices[1] = _ij5[1];\nvinfos[1].maxsolutions = _nj5;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j6;\nvinfos[2].indices[0] = _ij6[0];\nvinfos[2].indices[1] = _ij6[1];\nvinfos[2].maxsolutions = _nj6;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j7;\nvinfos[3].indices[0] = _ij7[0];\nvinfos[3].indices[1] = _ij7[1];\nvinfos[3].maxsolutions = _nj7;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j8;\nvinfos[4].indices[0] = _ij8[0];\nvinfos[4].indices[1] = _ij8[1];\nvinfos[4].maxsolutions = _nj8;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j9;\nvinfos[5].indices[0] = _ij9[0];\nvinfos[5].indices[1] = _ij9[1];\nvinfos[5].maxsolutions = _nj9;\nvinfos[6].jointtype = 1;\nvinfos[6].foffset = j10;\nvinfos[6].indices[0] = _ij10[0];\nvinfos[6].indices[1] = _ij10[1];\nvinfos[6].maxsolutions = _nj10;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j8array[1], cj8array[1], sj8array[1];\nbool j8valid[1]={false};\n_nj8 = 1;\nCheckValue<IkReal> x536 = IKatan2WithCheck(IkReal(new_r12),new_r02,IKFAST_ATAN2_MAGTHRESH);\nif(!x536.valid){\ncontinue;\n}\nCheckValue<IkReal> x537=IKPowWithIntegerCheck(IKsign(sj9),-1);\nif(!x537.valid){\ncontinue;\n}\nj8array[0]=((-1.5707963267949)+(x536.value)+(((1.5707963267949)*(x537.value))));\nsj8array[0]=IKsin(j8array[0]);\ncj8array[0]=IKcos(j8array[0]);\nif( j8array[0] > IKPI )\n{\n    j8array[0]-=IK2PI;\n}\nelse if( j8array[0] < -IKPI )\n{    j8array[0]+=IK2PI;\n}\nj8valid[0] = true;\nfor(int ij8 = 0; ij8 < 1; ++ij8)\n{\nif( !j8valid[ij8] )\n{\n    continue;\n}\n_ij8[0] = ij8; _ij8[1] = -1;\nfor(int iij8 = ij8+1; iij8 < 1; ++iij8)\n{\nif( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )\n{\n    j8valid[iij8]=false; _ij8[1] = iij8; break; \n}\n}\nj8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];\n{\nIkReal evalcond[8];\nIkReal x538=IKcos(j8);\nIkReal x539=IKsin(j8);\nIkReal x540=((1.0)*cj9);\nIkReal x541=((1.0)*sj9);\nIkReal x542=((1.0)*x539);\nIkReal x543=(new_r12*x539);\nIkReal x544=(new_r02*x538);\nevalcond[0]=((((-1.0)*x538*x541))+new_r02);\nevalcond[1]=((((-1.0)*x539*x541))+new_r12);\nevalcond[2]=(((new_r12*x538))+(((-1.0)*new_r02*x542)));\nevalcond[3]=((((-1.0)*x541))+x544+x543);\nevalcond[4]=((((-1.0)*new_r22*x541))+((cj9*x544))+((cj9*x543)));\nevalcond[5]=((((-1.0)*new_r20*x540))+(((-1.0)*new_r10*x539*x541))+(((-1.0)*new_r00*x538*x541)));\nevalcond[6]=((((-1.0)*new_r01*x538*x541))+(((-1.0)*new_r21*x540))+(((-1.0)*new_r11*x539*x541)));\nevalcond[7]=((1.0)+(((-1.0)*x541*x543))+(((-1.0)*x541*x544))+(((-1.0)*new_r22*x540)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nIkReal j10eval[2];\nIkReal x545=((0.707106781186548)*cj6);\nIkReal x546=(sj5*sj6);\nIkReal x547=((0.707106781186548)*sj6);\nIkReal x548=(cj5*cj7);\nIkReal x549=(cj7*sj5);\nIkReal x550=((1.0)*cj6);\nIkReal x551=((1.0)*sj4);\nIkReal x552=(cj5*sj7);\nIkReal x553=(sj5*sj7);\nIkReal x554=(cj7*x547);\nIkReal x555=((0.707106781186548)*x553);\nIkReal x556=(cj5*x547);\nIkReal x557=((0.707106781186548)*x549);\nIkReal x558=(sj7*x547);\nIkReal x559=((-1.0)*sj4);\nIkReal x560=(x545*x548);\nIkReal x561=((((-1.0)*x556))+x545);\nIkReal x562=(x545*x552);\nIkReal x563=((((-1.0)*x545))+(((-1.0)*x556)));\nIkReal x564=((((-1.0)*x550*x553))+x548);\nIkReal x565=(cj4*x563);\nIkReal x566=x207;\nIkReal x567=(x557+x562);\nIkReal x568=((((-1.0)*x555))+x554+x560);\nIkReal x569=((((-1.0)*x554))+(((-1.0)*x555))+x560);\nIkReal x570=((((-1.0)*x558))+x567);\nIkReal x571=(x558+x567);\nIkReal x572=(cj4*x570);\nIkReal x573=(((sj4*x563))+((cj4*x561)));\nIkReal x574=(x565+(((-1.0)*x551*x561)));\nIkReal x575=(((sj4*x569))+((cj4*x568)));\nIkReal x576=(((cj4*x569))+((x559*x568)));\nIkReal x577=(((sj4*x570))+((cj4*x571)));\nIkReal x578=(((x559*x571))+x572);\nnew_r00=(((r00*x576))+((r20*x566))+((r10*x575)));\nnew_r01=(((r01*x576))+((r21*x566))+((r11*x575)));\nnew_r02=(((r12*x575))+((r22*x566))+((r02*x576)));\nnew_r10=(((r00*x574))+((r20*x546))+((r10*x573)));\nnew_r11=(((r21*x546))+((r01*((x565+((x559*x561))))))+((r11*x573)));\nnew_r12=(((r12*x573))+((r02*x574))+((r22*x546)));\nnew_r20=(((r00*x578))+((r20*x564))+((r10*x577)));\nnew_r21=(((r21*x564))+((r01*((x572+(((-1.0)*x551*x571))))))+((r11*x577)));\nnew_r22=(((r12*x577))+((r22*x564))+((r02*x578)));\nj10eval[0]=sj9;\nj10eval[1]=IKsign(sj9);\nif( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j10eval[2];\nIkReal x579=((0.707106781186548)*cj6);\nIkReal x580=(sj5*sj6);\nIkReal x581=((0.707106781186548)*sj6);\nIkReal x582=(cj5*cj7);\nIkReal x583=(cj7*sj5);\nIkReal x584=((1.0)*cj6);\nIkReal x585=((1.0)*sj4);\nIkReal x586=(cj5*sj7);\nIkReal x587=(sj5*sj7);\nIkReal x588=(cj7*x581);\nIkReal x589=((0.707106781186548)*x587);\nIkReal x590=(cj5*x581);\nIkReal x591=((0.707106781186548)*x583);\nIkReal x592=(sj7*x581);\nIkReal x593=((-1.0)*sj4);\nIkReal x594=(x579*x582);\nIkReal x595=((((-1.0)*x590))+x579);\nIkReal x596=(x579*x586);\nIkReal x597=((((-1.0)*x590))+(((-1.0)*x579)));\nIkReal x598=((((-1.0)*x584*x587))+x582);\nIkReal x599=(cj4*x597);\nIkReal x600=x207;\nIkReal x601=(x596+x591);\nIkReal x602=(x588+x594+(((-1.0)*x589)));\nIkReal x603=(x594+(((-1.0)*x589))+(((-1.0)*x588)));\nIkReal x604=((((-1.0)*x592))+x601);\nIkReal x605=(x592+x601);\nIkReal x606=(cj4*x604);\nIkReal x607=(((sj4*x597))+((cj4*x595)));\nIkReal x608=((((-1.0)*x585*x595))+x599);\nIkReal x609=(((sj4*x603))+((cj4*x602)));\nIkReal x610=(((x593*x602))+((cj4*x603)));\nIkReal x611=(((sj4*x604))+((cj4*x605)));\nIkReal x612=(((x593*x605))+x606);\nnew_r00=(((r00*x610))+((r20*x600))+((r10*x609)));\nnew_r01=(((r01*x610))+((r21*x600))+((r11*x609)));\nnew_r02=(((r12*x609))+((r02*x610))+((r22*x600)));\nnew_r10=(((r00*x608))+((r20*x580))+((r10*x607)));\nnew_r11=(((r01*((x599+((x593*x595))))))+((r11*x607))+((r21*x580)));\nnew_r12=(((r12*x607))+((r02*x608))+((r22*x580)));\nnew_r20=(((r00*x612))+((r20*x598))+((r10*x611)));\nnew_r21=(((r11*x611))+((r21*x598))+((r01*(((((-1.0)*x585*x605))+x606)))));\nnew_r22=(((r22*x598))+((r12*x611))+((r02*x612)));\nj10eval[0]=sj8;\nj10eval[1]=sj9;\nif( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )\n{\n{\nIkReal j10eval[3];\nIkReal x613=((0.707106781186548)*cj6);\nIkReal x614=(sj5*sj6);\nIkReal x615=((0.707106781186548)*sj6);\nIkReal x616=(cj5*cj7);\nIkReal x617=(cj7*sj5);\nIkReal x618=((1.0)*cj6);\nIkReal x619=((1.0)*sj4);\nIkReal x620=(cj5*sj7);\nIkReal x621=(sj5*sj7);\nIkReal x622=(cj7*x615);\nIkReal x623=((0.707106781186548)*x621);\nIkReal x624=(cj5*x615);\nIkReal x625=((0.707106781186548)*x617);\nIkReal x626=(sj7*x615);\nIkReal x627=((-1.0)*sj4);\nIkReal x628=(x613*x616);\nIkReal x629=((((-1.0)*x624))+x613);\nIkReal x630=(x613*x620);\nIkReal x631=((((-1.0)*x624))+(((-1.0)*x613)));\nIkReal x632=(x616+(((-1.0)*x618*x621)));\nIkReal x633=(cj4*x631);\nIkReal x634=x207;\nIkReal x635=(x625+x630);\nIkReal x636=((((-1.0)*x623))+x622+x628);\nIkReal x637=((((-1.0)*x622))+(((-1.0)*x623))+x628);\nIkReal x638=((((-1.0)*x626))+x635);\nIkReal x639=(x626+x635);\nIkReal x640=(cj4*x638);\nIkReal x641=(((sj4*x631))+((cj4*x629)));\nIkReal x642=(x633+(((-1.0)*x619*x629)));\nIkReal x643=(((sj4*x637))+((cj4*x636)));\nIkReal x644=(((cj4*x637))+((x627*x636)));\nIkReal x645=(((sj4*x638))+((cj4*x639)));\nIkReal x646=(x640+((x627*x639)));\nnew_r00=(((r10*x643))+((r00*x644))+((r20*x634)));\nnew_r01=(((r21*x634))+((r01*x644))+((r11*x643)));\nnew_r02=(((r22*x634))+((r02*x644))+((r12*x643)));\nnew_r10=(((r20*x614))+((r10*x641))+((r00*x642)));\nnew_r11=(((r01*((x633+((x627*x629))))))+((r21*x614))+((r11*x641)));\nnew_r12=(((r02*x642))+((r12*x641))+((r22*x614)));\nnew_r20=(((r10*x645))+((r00*x646))+((r20*x632)));\nnew_r21=(((r21*x632))+((r01*(((((-1.0)*x619*x639))+x640))))+((r11*x645)));\nnew_r22=(((r22*x632))+((r02*x646))+((r12*x645)));\nj10eval[0]=cj8;\nj10eval[1]=cj9;\nj10eval[2]=sj9;\nif( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )\n{\n{\nIkReal evalcond[12];\nbool bgotonextstatement = true;\ndo\n{\nIkReal x647=(new_r22+(((-1.0)*cj9)));\nIkReal x648=((((-1.0)*sj9))+new_r12);\nIkReal x649=((1.0)*sj9);\nIkReal x650=((1.0)*cj9);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));\nevalcond[1]=x647;\nevalcond[2]=x647;\nevalcond[3]=new_r02;\nevalcond[4]=x648;\nevalcond[5]=x648;\nevalcond[6]=(((cj9*new_r12))+(((-1.0)*new_r22*x649)));\nevalcond[7]=((((-1.0)*new_r10*x649))+(((-1.0)*new_r20*x650)));\nevalcond[8]=((((-1.0)*new_r11*x649))+(((-1.0)*new_r21*x650)));\nevalcond[9]=((1.0)+(((-1.0)*new_r12*x649))+(((-1.0)*new_r22*x650)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j10array[1], cj10array[1], sj10array[1];\nbool j10valid[1]={false};\n_nj10 = 1;\nCheckValue<IkReal> x651 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);\nif(!x651.valid){\ncontinue;\n}\nCheckValue<IkReal> x652=IKPowWithIntegerCheck(IKsign(new_r12),-1);\nif(!x652.valid){\ncontinue;\n}\nj10array[0]=((-1.5707963267949)+(x651.value)+(((1.5707963267949)*(x652.value))));\nsj10array[0]=IKsin(j10array[0]);\ncj10array[0]=IKcos(j10array[0]);\nif( j10array[0] > IKPI )\n{\n    j10array[0]-=IK2PI;\n}\nelse if( j10array[0] < -IKPI )\n{    j10array[0]+=IK2PI;\n}\nj10valid[0] = true;\nfor(int ij10 = 0; ij10 < 1; ++ij10)\n{\nif( !j10valid[ij10] )\n{\n    continue;\n}\n_ij10[0] = ij10; _ij10[1] = -1;\nfor(int iij10 = ij10+1; iij10 < 1; ++iij10)\n{\nif( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )\n{\n    j10valid[iij10]=false; _ij10[1] = iij10; break; \n}\n}\nj10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];\n{\nIkReal evalcond[8];\nIkReal x653=IKsin(j10);\nIkReal x654=IKcos(j10);\nIkReal x655=((1.0)*new_r12);\nIkReal x656=((1.0)*x654);\nIkReal x657=((1.0)*x653);\nevalcond[0]=(((new_r12*x654))+new_r20);\nevalcond[1]=(((new_r22*x653))+new_r11);\nevalcond[2]=(new_r21+(((-1.0)*x653*x655)));\nevalcond[3]=(new_r10+(((-1.0)*new_r22*x656)));\nevalcond[4]=((((-1.0)*x657))+(((-1.0)*new_r00)));\nevalcond[5]=((((-1.0)*x656))+(((-1.0)*new_r01)));\nevalcond[6]=(((new_r11*new_r22))+x653+(((-1.0)*new_r21*x655)));\nevalcond[7]=((((-1.0)*x656))+(((-1.0)*new_r20*x655))+((new_r10*new_r22)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j4;\nvinfos[0].indices[0] = _ij4[0];\nvinfos[0].indices[1] = _ij4[1];\nvinfos[0].maxsolutions = _nj4;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j5;\nvinfos[1].indices[0] = _ij5[0];\nvinfos[1].indices[1] = _ij5[1];\nvinfos[1].maxsolutions = _nj5;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j6;\nvinfos[2].indices[0] = _ij6[0];\nvinfos[2].indices[1] = _ij6[1];\nvinfos[2].maxsolutions = _nj6;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j7;\nvinfos[3].indices[0] = _ij7[0];\nvinfos[3].indices[1] = _ij7[1];\nvinfos[3].maxsolutions = _nj7;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j8;\nvinfos[4].indices[0] = _ij8[0];\nvinfos[4].indices[1] = _ij8[1];\nvinfos[4].maxsolutions = _nj8;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j9;\nvinfos[5].indices[0] = _ij9[0];\nvinfos[5].indices[1] = _ij9[1];\nvinfos[5].maxsolutions = _nj9;\nvinfos[6].jointtype = 1;\nvinfos[6].foffset = j10;\nvinfos[6].indices[0] = _ij10[0];\nvinfos[6].indices[1] = _ij10[1];\nvinfos[6].maxsolutions = _nj10;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x658=(new_r22+(((-1.0)*cj9)));\nIkReal x659=((1.0)*cj9);\nIkReal x660=((1.0)*sj9);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));\nevalcond[1]=x658;\nevalcond[2]=x658;\nevalcond[3]=new_r02;\nevalcond[4]=(sj9+new_r12);\nevalcond[5]=((((-1.0)*x660))+(((-1.0)*new_r12)));\nevalcond[6]=((((-1.0)*new_r12*x659))+(((-1.0)*new_r22*x660)));\nevalcond[7]=(((new_r10*sj9))+(((-1.0)*new_r20*x659)));\nevalcond[8]=(((new_r11*sj9))+(((-1.0)*new_r21*x659)));\nevalcond[9]=((1.0)+((new_r12*sj9))+(((-1.0)*new_r22*x659)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j10array[1], cj10array[1], sj10array[1];\nbool j10valid[1]={false};\n_nj10 = 1;\nif( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj10array[0]=IKatan2(new_r00, new_r01);\nsj10array[0]=IKsin(j10array[0]);\ncj10array[0]=IKcos(j10array[0]);\nif( j10array[0] > IKPI )\n{\n    j10array[0]-=IK2PI;\n}\nelse if( j10array[0] < -IKPI )\n{    j10array[0]+=IK2PI;\n}\nj10valid[0] = true;\nfor(int ij10 = 0; ij10 < 1; ++ij10)\n{\nif( !j10valid[ij10] )\n{\n    continue;\n}\n_ij10[0] = ij10; _ij10[1] = -1;\nfor(int iij10 = ij10+1; iij10 < 1; ++iij10)\n{\nif( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )\n{\n    j10valid[iij10]=false; _ij10[1] = iij10; break; \n}\n}\nj10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];\n{\nIkReal evalcond[8];\nIkReal x661=IKsin(j10);\nIkReal x662=IKcos(j10);\nIkReal x663=((1.0)*new_r11);\nIkReal x664=((1.0)*new_r10);\nIkReal x665=((1.0)*x662);\nevalcond[0]=(((new_r12*x661))+new_r21);\nevalcond[1]=((((-1.0)*x661))+new_r00);\nevalcond[2]=((((-1.0)*x665))+new_r01);\nevalcond[3]=((((-1.0)*new_r12*x665))+new_r20);\nevalcond[4]=(((new_r22*x661))+(((-1.0)*x663)));\nevalcond[5]=((((-1.0)*x664))+(((-1.0)*new_r22*x665)));\nevalcond[6]=(((new_r12*new_r21))+x661+(((-1.0)*new_r22*x663)));\nevalcond[7]=(((new_r12*new_r20))+(((-1.0)*x665))+(((-1.0)*new_r22*x664)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j4;\nvinfos[0].indices[0] = _ij4[0];\nvinfos[0].indices[1] = _ij4[1];\nvinfos[0].maxsolutions = _nj4;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j5;\nvinfos[1].indices[0] = _ij5[0];\nvinfos[1].indices[1] = _ij5[1];\nvinfos[1].maxsolutions = _nj5;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j6;\nvinfos[2].indices[0] = _ij6[0];\nvinfos[2].indices[1] = _ij6[1];\nvinfos[2].maxsolutions = _nj6;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j7;\nvinfos[3].indices[0] = _ij7[0];\nvinfos[3].indices[1] = _ij7[1];\nvinfos[3].maxsolutions = _nj7;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j8;\nvinfos[4].indices[0] = _ij8[0];\nvinfos[4].indices[1] = _ij8[1];\nvinfos[4].maxsolutions = _nj8;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j9;\nvinfos[5].indices[0] = _ij9[0];\nvinfos[5].indices[1] = _ij9[1];\nvinfos[5].maxsolutions = _nj9;\nvinfos[6].jointtype = 1;\nvinfos[6].foffset = j10;\nvinfos[6].indices[0] = _ij10[0];\nvinfos[6].indices[1] = _ij10[1];\nvinfos[6].maxsolutions = _nj10;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x666=((1.0)*sj8);\nIkReal x667=((1.0)*cj8);\nIkReal x668=((((-1.0)*new_r02*x666))+((cj8*new_r12)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));\nevalcond[1]=new_r22;\nevalcond[2]=((((-1.0)*x667))+new_r02);\nevalcond[3]=((((-1.0)*x666))+new_r12);\nevalcond[4]=x668;\nevalcond[5]=x668;\nevalcond[6]=((-1.0)+((new_r12*sj8))+((cj8*new_r02)));\nevalcond[7]=(((new_r11*sj8))+((cj8*new_r01)));\nevalcond[8]=(((new_r10*sj8))+((cj8*new_r00)));\nevalcond[9]=((((-1.0)*new_r10*x666))+(((-1.0)*new_r00*x667)));\nevalcond[10]=((((-1.0)*new_r11*x666))+(((-1.0)*new_r01*x667)));\nevalcond[11]=((1.0)+(((-1.0)*new_r02*x667))+(((-1.0)*new_r12*x666)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j10array[1], cj10array[1], sj10array[1];\nbool j10valid[1]={false};\n_nj10 = 1;\nif( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj10array[0]=IKatan2(new_r21, ((-1.0)*new_r20));\nsj10array[0]=IKsin(j10array[0]);\ncj10array[0]=IKcos(j10array[0]);\nif( j10array[0] > IKPI )\n{\n    j10array[0]-=IK2PI;\n}\nelse if( j10array[0] < -IKPI )\n{    j10array[0]+=IK2PI;\n}\nj10valid[0] = true;\nfor(int ij10 = 0; ij10 < 1; ++ij10)\n{\nif( !j10valid[ij10] )\n{\n    continue;\n}\n_ij10[0] = ij10; _ij10[1] = -1;\nfor(int iij10 = ij10+1; iij10 < 1; ++iij10)\n{\nif( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )\n{\n    j10valid[iij10]=false; _ij10[1] = iij10; break; \n}\n}\nj10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];\n{\nIkReal evalcond[8];\nIkReal x669=IKcos(j10);\nIkReal x670=IKsin(j10);\nIkReal x671=((1.0)*new_r12);\nIkReal x672=((1.0)*x670);\nIkReal x673=((1.0)*x669);\nevalcond[0]=(x669+new_r20);\nevalcond[1]=(new_r21+(((-1.0)*x672)));\nevalcond[2]=(((new_r12*x669))+new_r01);\nevalcond[3]=(((new_r12*x670))+new_r00);\nevalcond[4]=((((-1.0)*new_r02*x673))+new_r11);\nevalcond[5]=((((-1.0)*new_r02*x672))+new_r10);\nevalcond[6]=((((-1.0)*new_r00*x671))+((new_r02*new_r10))+(((-1.0)*x672)));\nevalcond[7]=((((-1.0)*new_r01*x671))+((new_r02*new_r11))+(((-1.0)*x673)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j4;\nvinfos[0].indices[0] = _ij4[0];\nvinfos[0].indices[1] = _ij4[1];\nvinfos[0].maxsolutions = _nj4;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j5;\nvinfos[1].indices[0] = _ij5[0];\nvinfos[1].indices[1] = _ij5[1];\nvinfos[1].maxsolutions = _nj5;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j6;\nvinfos[2].indices[0] = _ij6[0];\nvinfos[2].indices[1] = _ij6[1];\nvinfos[2].maxsolutions = _nj6;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j7;\nvinfos[3].indices[0] = _ij7[0];\nvinfos[3].indices[1] = _ij7[1];\nvinfos[3].maxsolutions = _nj7;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j8;\nvinfos[4].indices[0] = _ij8[0];\nvinfos[4].indices[1] = _ij8[1];\nvinfos[4].maxsolutions = _nj8;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j9;\nvinfos[5].indices[0] = _ij9[0];\nvinfos[5].indices[1] = _ij9[1];\nvinfos[5].maxsolutions = _nj9;\nvinfos[6].jointtype = 1;\nvinfos[6].foffset = j10;\nvinfos[6].indices[0] = _ij10[0];\nvinfos[6].indices[1] = _ij10[1];\nvinfos[6].maxsolutions = _nj10;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x674=((((-1.0)*new_r02*sj8))+((cj8*new_r12)));\nIkReal x675=(((new_r10*sj8))+((cj8*new_r00)));\nIkReal x676=(((new_r11*sj8))+((cj8*new_r01)));\nIkReal x677=((1.0)+((new_r12*sj8))+((cj8*new_r02)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));\nevalcond[1]=new_r22;\nevalcond[2]=(cj8+new_r02);\nevalcond[3]=(sj8+new_r12);\nevalcond[4]=x674;\nevalcond[5]=x674;\nevalcond[6]=x677;\nevalcond[7]=x676;\nevalcond[8]=x675;\nevalcond[9]=x675;\nevalcond[10]=x676;\nevalcond[11]=x677;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j10array[1], cj10array[1], sj10array[1];\nbool j10valid[1]={false};\n_nj10 = 1;\nif( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj10array[0]=IKatan2(((-1.0)*new_r21), new_r20);\nsj10array[0]=IKsin(j10array[0]);\ncj10array[0]=IKcos(j10array[0]);\nif( j10array[0] > IKPI )\n{\n    j10array[0]-=IK2PI;\n}\nelse if( j10array[0] < -IKPI )\n{    j10array[0]+=IK2PI;\n}\nj10valid[0] = true;\nfor(int ij10 = 0; ij10 < 1; ++ij10)\n{\nif( !j10valid[ij10] )\n{\n    continue;\n}\n_ij10[0] = ij10; _ij10[1] = -1;\nfor(int iij10 = ij10+1; iij10 < 1; ++iij10)\n{\nif( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )\n{\n    j10valid[iij10]=false; _ij10[1] = iij10; break; \n}\n}\nj10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];\n{\nIkReal evalcond[8];\nIkReal x678=IKcos(j10);\nIkReal x679=IKsin(j10);\nIkReal x680=((1.0)*new_r02);\nIkReal x681=((1.0)*x678);\nIkReal x682=((1.0)*x679);\nevalcond[0]=(x679+new_r21);\nevalcond[1]=((((-1.0)*x681))+new_r20);\nevalcond[2]=(((new_r02*x678))+new_r11);\nevalcond[3]=(((new_r02*x679))+new_r10);\nevalcond[4]=((((-1.0)*new_r12*x681))+new_r01);\nevalcond[5]=((((-1.0)*new_r12*x682))+new_r00);\nevalcond[6]=((((-1.0)*new_r10*x680))+(((-1.0)*x682))+((new_r00*new_r12)));\nevalcond[7]=((((-1.0)*x681))+((new_r01*new_r12))+(((-1.0)*new_r11*x680)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j4;\nvinfos[0].indices[0] = _ij4[0];\nvinfos[0].indices[1] = _ij4[1];\nvinfos[0].maxsolutions = _nj4;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j5;\nvinfos[1].indices[0] = _ij5[0];\nvinfos[1].indices[1] = _ij5[1];\nvinfos[1].maxsolutions = _nj5;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j6;\nvinfos[2].indices[0] = _ij6[0];\nvinfos[2].indices[1] = _ij6[1];\nvinfos[2].maxsolutions = _nj6;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j7;\nvinfos[3].indices[0] = _ij7[0];\nvinfos[3].indices[1] = _ij7[1];\nvinfos[3].maxsolutions = _nj7;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j8;\nvinfos[4].indices[0] = _ij8[0];\nvinfos[4].indices[1] = _ij8[1];\nvinfos[4].maxsolutions = _nj8;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j9;\nvinfos[5].indices[0] = _ij9[0];\nvinfos[5].indices[1] = _ij9[1];\nvinfos[5].maxsolutions = _nj9;\nvinfos[6].jointtype = 1;\nvinfos[6].foffset = j10;\nvinfos[6].indices[0] = _ij10[0];\nvinfos[6].indices[1] = _ij10[1];\nvinfos[6].maxsolutions = _nj10;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x683=((((-1.0)*new_r02*sj8))+((cj8*new_r12)));\nIkReal x684=(((new_r12*sj8))+((cj8*new_r02)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));\nevalcond[1]=((-1.0)+new_r22);\nevalcond[2]=new_r20;\nevalcond[3]=new_r02;\nevalcond[4]=new_r12;\nevalcond[5]=new_r21;\nevalcond[6]=x683;\nevalcond[7]=x683;\nevalcond[8]=x684;\nevalcond[9]=x684;\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j10array[1], cj10array[1], sj10array[1];\nbool j10valid[1]={false};\n_nj10 = 1;\nIkReal x685=((1.0)*new_r01);\nif( IKabs(((((-1.0)*cj8*x685))+(((-1.0)*new_r00*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj8*new_r00))+(((-1.0)*sj8*x685)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj8*x685))+(((-1.0)*new_r00*sj8))))+IKsqr((((cj8*new_r00))+(((-1.0)*sj8*x685))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj10array[0]=IKatan2(((((-1.0)*cj8*x685))+(((-1.0)*new_r00*sj8))), (((cj8*new_r00))+(((-1.0)*sj8*x685))));\nsj10array[0]=IKsin(j10array[0]);\ncj10array[0]=IKcos(j10array[0]);\nif( j10array[0] > IKPI )\n{\n    j10array[0]-=IK2PI;\n}\nelse if( j10array[0] < -IKPI )\n{    j10array[0]+=IK2PI;\n}\nj10valid[0] = true;\nfor(int ij10 = 0; ij10 < 1; ++ij10)\n{\nif( !j10valid[ij10] )\n{\n    continue;\n}\n_ij10[0] = ij10; _ij10[1] = -1;\nfor(int iij10 = ij10+1; iij10 < 1; ++iij10)\n{\nif( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )\n{\n    j10valid[iij10]=false; _ij10[1] = iij10; break; \n}\n}\nj10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];\n{\nIkReal evalcond[8];\nIkReal x686=IKsin(j10);\nIkReal x687=IKcos(j10);\nIkReal x688=((1.0)*sj8);\nIkReal x689=((1.0)*x687);\nIkReal x690=(sj8*x686);\nIkReal x691=(cj8*x686);\nIkReal x692=(cj8*x689);\nevalcond[0]=(((new_r11*sj8))+((cj8*new_r01))+x686);\nevalcond[1]=(((sj8*x687))+x691+new_r01);\nevalcond[2]=(((new_r10*sj8))+(((-1.0)*x689))+((cj8*new_r00)));\nevalcond[3]=(((cj8*new_r10))+(((-1.0)*x686))+(((-1.0)*new_r00*x688)));\nevalcond[4]=((((-1.0)*new_r01*x688))+(((-1.0)*x689))+((cj8*new_r11)));\nevalcond[5]=(x690+(((-1.0)*x692))+new_r00);\nevalcond[6]=(x690+(((-1.0)*x692))+new_r11);\nevalcond[7]=((((-1.0)*x687*x688))+new_r10+(((-1.0)*x691)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j4;\nvinfos[0].indices[0] = _ij4[0];\nvinfos[0].indices[1] = _ij4[1];\nvinfos[0].maxsolutions = _nj4;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j5;\nvinfos[1].indices[0] = _ij5[0];\nvinfos[1].indices[1] = _ij5[1];\nvinfos[1].maxsolutions = _nj5;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j6;\nvinfos[2].indices[0] = _ij6[0];\nvinfos[2].indices[1] = _ij6[1];\nvinfos[2].maxsolutions = _nj6;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j7;\nvinfos[3].indices[0] = _ij7[0];\nvinfos[3].indices[1] = _ij7[1];\nvinfos[3].maxsolutions = _nj7;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j8;\nvinfos[4].indices[0] = _ij8[0];\nvinfos[4].indices[1] = _ij8[1];\nvinfos[4].maxsolutions = _nj8;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j9;\nvinfos[5].indices[0] = _ij9[0];\nvinfos[5].indices[1] = _ij9[1];\nvinfos[5].maxsolutions = _nj9;\nvinfos[6].jointtype = 1;\nvinfos[6].foffset = j10;\nvinfos[6].indices[0] = _ij10[0];\nvinfos[6].indices[1] = _ij10[1];\nvinfos[6].maxsolutions = _nj10;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x693=((1.0)*new_r02);\nIkReal x694=(new_r12*sj8);\nIkReal x695=(((cj8*new_r12))+(((-1.0)*sj8*x693)));\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));\nevalcond[1]=((1.0)+new_r22);\nevalcond[2]=new_r20;\nevalcond[3]=new_r02;\nevalcond[4]=new_r12;\nevalcond[5]=new_r21;\nevalcond[6]=x695;\nevalcond[7]=x695;\nevalcond[8]=(((cj8*new_r02))+x694);\nevalcond[9]=((((-1.0)*cj8*x693))+(((-1.0)*x694)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j10array[1], cj10array[1], sj10array[1];\nbool j10valid[1]={false};\n_nj10 = 1;\nIkReal x696=((1.0)*new_r00);\nif( IKabs((((cj8*new_r01))+(((-1.0)*sj8*x696)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj8))+(((-1.0)*cj8*x696)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj8*new_r01))+(((-1.0)*sj8*x696))))+IKsqr(((((-1.0)*new_r01*sj8))+(((-1.0)*cj8*x696))))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj10array[0]=IKatan2((((cj8*new_r01))+(((-1.0)*sj8*x696))), ((((-1.0)*new_r01*sj8))+(((-1.0)*cj8*x696))));\nsj10array[0]=IKsin(j10array[0]);\ncj10array[0]=IKcos(j10array[0]);\nif( j10array[0] > IKPI )\n{\n    j10array[0]-=IK2PI;\n}\nelse if( j10array[0] < -IKPI )\n{    j10array[0]+=IK2PI;\n}\nj10valid[0] = true;\nfor(int ij10 = 0; ij10 < 1; ++ij10)\n{\nif( !j10valid[ij10] )\n{\n    continue;\n}\n_ij10[0] = ij10; _ij10[1] = -1;\nfor(int iij10 = ij10+1; iij10 < 1; ++iij10)\n{\nif( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )\n{\n    j10valid[iij10]=false; _ij10[1] = iij10; break; \n}\n}\nj10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];\n{\nIkReal evalcond[8];\nIkReal x697=IKsin(j10);\nIkReal x698=IKcos(j10);\nIkReal x699=((1.0)*sj8);\nIkReal x700=((1.0)*x697);\nIkReal x701=(sj8*x698);\nIkReal x702=((1.0)*x698);\nIkReal x703=(cj8*x700);\nevalcond[0]=(((new_r10*sj8))+((cj8*new_r00))+x698);\nevalcond[1]=(((new_r11*sj8))+((cj8*new_r01))+(((-1.0)*x700)));\nevalcond[2]=(((cj8*x698))+((sj8*x697))+new_r00);\nevalcond[3]=((((-1.0)*new_r00*x699))+((cj8*new_r10))+(((-1.0)*x700)));\nevalcond[4]=((((-1.0)*new_r01*x699))+((cj8*new_r11))+(((-1.0)*x702)));\nevalcond[5]=((((-1.0)*x703))+x701+new_r01);\nevalcond[6]=((((-1.0)*x703))+x701+new_r10);\nevalcond[7]=((((-1.0)*x697*x699))+(((-1.0)*cj8*x702))+new_r11);\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j4;\nvinfos[0].indices[0] = _ij4[0];\nvinfos[0].indices[1] = _ij4[1];\nvinfos[0].maxsolutions = _nj4;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j5;\nvinfos[1].indices[0] = _ij5[0];\nvinfos[1].indices[1] = _ij5[1];\nvinfos[1].maxsolutions = _nj5;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j6;\nvinfos[2].indices[0] = _ij6[0];\nvinfos[2].indices[1] = _ij6[1];\nvinfos[2].maxsolutions = _nj6;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j7;\nvinfos[3].indices[0] = _ij7[0];\nvinfos[3].indices[1] = _ij7[1];\nvinfos[3].maxsolutions = _nj7;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j8;\nvinfos[4].indices[0] = _ij8[0];\nvinfos[4].indices[1] = _ij8[1];\nvinfos[4].maxsolutions = _nj8;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j9;\nvinfos[5].indices[0] = _ij9[0];\nvinfos[5].indices[1] = _ij9[1];\nvinfos[5].maxsolutions = _nj9;\nvinfos[6].jointtype = 1;\nvinfos[6].foffset = j10;\nvinfos[6].indices[0] = _ij10[0];\nvinfos[6].indices[1] = _ij10[1];\nvinfos[6].maxsolutions = _nj10;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x704=(new_r22+(((-1.0)*cj9)));\nIkReal x705=((((-1.0)*sj9))+new_r02);\nIkReal x706=((1.0)*sj9);\nIkReal x707=((1.0)*cj9);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));\nevalcond[1]=x704;\nevalcond[2]=x704;\nevalcond[3]=x705;\nevalcond[4]=new_r12;\nevalcond[5]=x705;\nevalcond[6]=((((-1.0)*new_r22*x706))+((cj9*new_r02)));\nevalcond[7]=((((-1.0)*new_r20*x707))+(((-1.0)*new_r00*x706)));\nevalcond[8]=((((-1.0)*new_r21*x707))+(((-1.0)*new_r01*x706)));\nevalcond[9]=((1.0)+(((-1.0)*new_r22*x707))+(((-1.0)*new_r02*x706)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j10array[1], cj10array[1], sj10array[1];\nbool j10valid[1]={false};\n_nj10 = 1;\nif( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj10array[0]=IKatan2(new_r10, new_r11);\nsj10array[0]=IKsin(j10array[0]);\ncj10array[0]=IKcos(j10array[0]);\nif( j10array[0] > IKPI )\n{\n    j10array[0]-=IK2PI;\n}\nelse if( j10array[0] < -IKPI )\n{    j10array[0]+=IK2PI;\n}\nj10valid[0] = true;\nfor(int ij10 = 0; ij10 < 1; ++ij10)\n{\nif( !j10valid[ij10] )\n{\n    continue;\n}\n_ij10[0] = ij10; _ij10[1] = -1;\nfor(int iij10 = ij10+1; iij10 < 1; ++iij10)\n{\nif( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )\n{\n    j10valid[iij10]=false; _ij10[1] = iij10; break; \n}\n}\nj10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];\n{\nIkReal evalcond[8];\nIkReal x708=IKcos(j10);\nIkReal x709=IKsin(j10);\nIkReal x710=((1.0)*new_r02);\nIkReal x711=((1.0)*x708);\nevalcond[0]=(((new_r02*x708))+new_r20);\nevalcond[1]=((((-1.0)*x709))+new_r10);\nevalcond[2]=((((-1.0)*x711))+new_r11);\nevalcond[3]=(new_r01+((new_r22*x709)));\nevalcond[4]=((((-1.0)*x709*x710))+new_r21);\nevalcond[5]=((((-1.0)*new_r22*x711))+new_r00);\nevalcond[6]=((((-1.0)*new_r21*x710))+((new_r01*new_r22))+x709);\nevalcond[7]=(((new_r00*new_r22))+(((-1.0)*new_r20*x710))+(((-1.0)*x711)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j4;\nvinfos[0].indices[0] = _ij4[0];\nvinfos[0].indices[1] = _ij4[1];\nvinfos[0].maxsolutions = _nj4;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j5;\nvinfos[1].indices[0] = _ij5[0];\nvinfos[1].indices[1] = _ij5[1];\nvinfos[1].maxsolutions = _nj5;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j6;\nvinfos[2].indices[0] = _ij6[0];\nvinfos[2].indices[1] = _ij6[1];\nvinfos[2].maxsolutions = _nj6;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j7;\nvinfos[3].indices[0] = _ij7[0];\nvinfos[3].indices[1] = _ij7[1];\nvinfos[3].maxsolutions = _nj7;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j8;\nvinfos[4].indices[0] = _ij8[0];\nvinfos[4].indices[1] = _ij8[1];\nvinfos[4].maxsolutions = _nj8;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j9;\nvinfos[5].indices[0] = _ij9[0];\nvinfos[5].indices[1] = _ij9[1];\nvinfos[5].maxsolutions = _nj9;\nvinfos[6].jointtype = 1;\nvinfos[6].foffset = j10;\nvinfos[6].indices[0] = _ij10[0];\nvinfos[6].indices[1] = _ij10[1];\nvinfos[6].maxsolutions = _nj10;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nIkReal x712=(new_r22+(((-1.0)*cj9)));\nIkReal x713=((1.0)*cj9);\nIkReal x714=((1.0)*sj9);\nevalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));\nevalcond[1]=x712;\nevalcond[2]=x712;\nevalcond[3]=(sj9+new_r02);\nevalcond[4]=new_r12;\nevalcond[5]=((((-1.0)*x714))+(((-1.0)*new_r02)));\nevalcond[6]=((((-1.0)*new_r22*x714))+(((-1.0)*new_r02*x713)));\nevalcond[7]=((((-1.0)*new_r20*x713))+((new_r00*sj9)));\nevalcond[8]=((((-1.0)*new_r21*x713))+((new_r01*sj9)));\nevalcond[9]=((1.0)+((new_r02*sj9))+(((-1.0)*new_r22*x713)));\nif( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )\n{\nbgotonextstatement=false;\n{\nIkReal j10array[1], cj10array[1], sj10array[1];\nbool j10valid[1]={false};\n_nj10 = 1;\nCheckValue<IkReal> x715 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);\nif(!x715.valid){\ncontinue;\n}\nCheckValue<IkReal> x716=IKPowWithIntegerCheck(IKsign(new_r02),-1);\nif(!x716.valid){\ncontinue;\n}\nj10array[0]=((-1.5707963267949)+(x715.value)+(((1.5707963267949)*(x716.value))));\nsj10array[0]=IKsin(j10array[0]);\ncj10array[0]=IKcos(j10array[0]);\nif( j10array[0] > IKPI )\n{\n    j10array[0]-=IK2PI;\n}\nelse if( j10array[0] < -IKPI )\n{    j10array[0]+=IK2PI;\n}\nj10valid[0] = true;\nfor(int ij10 = 0; ij10 < 1; ++ij10)\n{\nif( !j10valid[ij10] )\n{\n    continue;\n}\n_ij10[0] = ij10; _ij10[1] = -1;\nfor(int iij10 = ij10+1; iij10 < 1; ++iij10)\n{\nif( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )\n{\n    j10valid[iij10]=false; _ij10[1] = iij10; break; \n}\n}\nj10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];\n{\nIkReal evalcond[8];\nIkReal x717=IKsin(j10);\nIkReal x718=IKcos(j10);\nIkReal x719=((1.0)*new_r22);\nIkReal x720=((1.0)*x718);\nevalcond[0]=(((new_r02*x717))+new_r21);\nevalcond[1]=((((-1.0)*new_r02*x720))+new_r20);\nevalcond[2]=((((-1.0)*x717))+(((-1.0)*new_r10)));\nevalcond[3]=((((-1.0)*x720))+(((-1.0)*new_r11)));\nevalcond[4]=((((-1.0)*new_r01))+((new_r22*x717)));\nevalcond[5]=((((-1.0)*x718*x719))+(((-1.0)*new_r00)));\nevalcond[6]=(x717+((new_r02*new_r21))+(((-1.0)*new_r01*x719)));\nevalcond[7]=((((-1.0)*x720))+((new_r02*new_r20))+(((-1.0)*new_r00*x719)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j4;\nvinfos[0].indices[0] = _ij4[0];\nvinfos[0].indices[1] = _ij4[1];\nvinfos[0].maxsolutions = _nj4;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j5;\nvinfos[1].indices[0] = _ij5[0];\nvinfos[1].indices[1] = _ij5[1];\nvinfos[1].maxsolutions = _nj5;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j6;\nvinfos[2].indices[0] = _ij6[0];\nvinfos[2].indices[1] = _ij6[1];\nvinfos[2].maxsolutions = _nj6;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j7;\nvinfos[3].indices[0] = _ij7[0];\nvinfos[3].indices[1] = _ij7[1];\nvinfos[3].maxsolutions = _nj7;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j8;\nvinfos[4].indices[0] = _ij8[0];\nvinfos[4].indices[1] = _ij8[1];\nvinfos[4].maxsolutions = _nj8;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j9;\nvinfos[5].indices[0] = _ij9[0];\nvinfos[5].indices[1] = _ij9[1];\nvinfos[5].maxsolutions = _nj9;\nvinfos[6].jointtype = 1;\nvinfos[6].foffset = j10;\nvinfos[6].indices[0] = _ij10[0];\nvinfos[6].indices[1] = _ij10[1];\nvinfos[6].maxsolutions = _nj10;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n} while(0);\nif( bgotonextstatement )\n{\nbool bgotonextstatement = true;\ndo\n{\nif( 1 )\n{\nbgotonextstatement=false;\ncontinue; // branch miss [j10]\n\n}\n} while(0);\nif( bgotonextstatement )\n{\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n\n} else\n{\n{\nIkReal j10array[1], cj10array[1], sj10array[1];\nbool j10valid[1]={false};\n_nj10 = 1;\nCheckValue<IkReal> x722=IKPowWithIntegerCheck(sj9,-1);\nif(!x722.valid){\ncontinue;\n}\nIkReal x721=x722.value;\nCheckValue<IkReal> x723=IKPowWithIntegerCheck(cj8,-1);\nif(!x723.valid){\ncontinue;\n}\nCheckValue<IkReal> x724=IKPowWithIntegerCheck(cj9,-1);\nif(!x724.valid){\ncontinue;\n}\nif( IKabs((x721*(x723.value)*(x724.value)*((((new_r20*sj8))+(((-1.0)*new_r01*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x721)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x721*(x723.value)*(x724.value)*((((new_r20*sj8))+(((-1.0)*new_r01*sj9))))))+IKsqr(((-1.0)*new_r20*x721))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj10array[0]=IKatan2((x721*(x723.value)*(x724.value)*((((new_r20*sj8))+(((-1.0)*new_r01*sj9))))), ((-1.0)*new_r20*x721));\nsj10array[0]=IKsin(j10array[0]);\ncj10array[0]=IKcos(j10array[0]);\nif( j10array[0] > IKPI )\n{\n    j10array[0]-=IK2PI;\n}\nelse if( j10array[0] < -IKPI )\n{    j10array[0]+=IK2PI;\n}\nj10valid[0] = true;\nfor(int ij10 = 0; ij10 < 1; ++ij10)\n{\nif( !j10valid[ij10] )\n{\n    continue;\n}\n_ij10[0] = ij10; _ij10[1] = -1;\nfor(int iij10 = ij10+1; iij10 < 1; ++iij10)\n{\nif( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )\n{\n    j10valid[iij10]=false; _ij10[1] = iij10; break; \n}\n}\nj10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];\n{\nIkReal evalcond[12];\nIkReal x725=IKsin(j10);\nIkReal x726=IKcos(j10);\nIkReal x727=(cj9*sj8);\nIkReal x728=((1.0)*sj9);\nIkReal x729=((1.0)*sj8);\nIkReal x730=((1.0)*cj8);\nIkReal x731=(cj8*new_r00);\nIkReal x732=(cj8*new_r01);\nIkReal x733=((1.0)*x726);\nIkReal x734=(cj9*x725);\nIkReal x735=(cj9*x733);\nevalcond[0]=(((sj9*x726))+new_r20);\nevalcond[1]=((((-1.0)*x725*x728))+new_r21);\nevalcond[2]=(((new_r11*sj8))+x734+x732);\nevalcond[3]=(((cj8*new_r10))+(((-1.0)*x725))+(((-1.0)*new_r00*x729)));\nevalcond[4]=(((cj8*new_r11))+(((-1.0)*x733))+(((-1.0)*new_r01*x729)));\nevalcond[5]=(((sj8*x726))+((cj8*x734))+new_r01);\nevalcond[6]=(((new_r10*sj8))+(((-1.0)*x735))+x731);\nevalcond[7]=((((-1.0)*cj9*x726*x730))+((sj8*x725))+new_r00);\nevalcond[8]=(((x725*x727))+new_r11+(((-1.0)*x726*x730)));\nevalcond[9]=((((-1.0)*x727*x733))+(((-1.0)*x725*x730))+new_r10);\nevalcond[10]=(((cj9*x732))+(((-1.0)*new_r21*x728))+x725+((new_r11*x727)));\nevalcond[11]=(((cj9*x731))+(((-1.0)*new_r20*x728))+(((-1.0)*x733))+((new_r10*x727)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j4;\nvinfos[0].indices[0] = _ij4[0];\nvinfos[0].indices[1] = _ij4[1];\nvinfos[0].maxsolutions = _nj4;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j5;\nvinfos[1].indices[0] = _ij5[0];\nvinfos[1].indices[1] = _ij5[1];\nvinfos[1].maxsolutions = _nj5;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j6;\nvinfos[2].indices[0] = _ij6[0];\nvinfos[2].indices[1] = _ij6[1];\nvinfos[2].maxsolutions = _nj6;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j7;\nvinfos[3].indices[0] = _ij7[0];\nvinfos[3].indices[1] = _ij7[1];\nvinfos[3].maxsolutions = _nj7;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j8;\nvinfos[4].indices[0] = _ij8[0];\nvinfos[4].indices[1] = _ij8[1];\nvinfos[4].maxsolutions = _nj8;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j9;\nvinfos[5].indices[0] = _ij9[0];\nvinfos[5].indices[1] = _ij9[1];\nvinfos[5].maxsolutions = _nj9;\nvinfos[6].jointtype = 1;\nvinfos[6].foffset = j10;\nvinfos[6].indices[0] = _ij10[0];\nvinfos[6].indices[1] = _ij10[1];\nvinfos[6].maxsolutions = _nj10;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j10array[1], cj10array[1], sj10array[1];\nbool j10valid[1]={false};\n_nj10 = 1;\nCheckValue<IkReal> x737=IKPowWithIntegerCheck(sj9,-1);\nif(!x737.valid){\ncontinue;\n}\nIkReal x736=x737.value;\nCheckValue<IkReal> x738=IKPowWithIntegerCheck(sj8,-1);\nif(!x738.valid){\ncontinue;\n}\nif( IKabs((x736*(x738.value)*(((((-1.0)*cj8*cj9*new_r20))+(((-1.0)*new_r00*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x736)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x736*(x738.value)*(((((-1.0)*cj8*cj9*new_r20))+(((-1.0)*new_r00*sj9))))))+IKsqr(((-1.0)*new_r20*x736))-1) <= IKFAST_SINCOS_THRESH )\n    continue;\nj10array[0]=IKatan2((x736*(x738.value)*(((((-1.0)*cj8*cj9*new_r20))+(((-1.0)*new_r00*sj9))))), ((-1.0)*new_r20*x736));\nsj10array[0]=IKsin(j10array[0]);\ncj10array[0]=IKcos(j10array[0]);\nif( j10array[0] > IKPI )\n{\n    j10array[0]-=IK2PI;\n}\nelse if( j10array[0] < -IKPI )\n{    j10array[0]+=IK2PI;\n}\nj10valid[0] = true;\nfor(int ij10 = 0; ij10 < 1; ++ij10)\n{\nif( !j10valid[ij10] )\n{\n    continue;\n}\n_ij10[0] = ij10; _ij10[1] = -1;\nfor(int iij10 = ij10+1; iij10 < 1; ++iij10)\n{\nif( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )\n{\n    j10valid[iij10]=false; _ij10[1] = iij10; break; \n}\n}\nj10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];\n{\nIkReal evalcond[12];\nIkReal x739=IKsin(j10);\nIkReal x740=IKcos(j10);\nIkReal x741=(cj9*sj8);\nIkReal x742=((1.0)*sj9);\nIkReal x743=((1.0)*sj8);\nIkReal x744=((1.0)*cj8);\nIkReal x745=(cj8*new_r00);\nIkReal x746=(cj8*new_r01);\nIkReal x747=((1.0)*x740);\nIkReal x748=(cj9*x739);\nIkReal x749=(cj9*x747);\nevalcond[0]=(((sj9*x740))+new_r20);\nevalcond[1]=((((-1.0)*x739*x742))+new_r21);\nevalcond[2]=(((new_r11*sj8))+x746+x748);\nevalcond[3]=((((-1.0)*new_r00*x743))+(((-1.0)*x739))+((cj8*new_r10)));\nevalcond[4]=((((-1.0)*new_r01*x743))+((cj8*new_r11))+(((-1.0)*x747)));\nevalcond[5]=(((cj8*x748))+((sj8*x740))+new_r01);\nevalcond[6]=(((new_r10*sj8))+x745+(((-1.0)*x749)));\nevalcond[7]=((((-1.0)*cj9*x740*x744))+((sj8*x739))+new_r00);\nevalcond[8]=(((x739*x741))+(((-1.0)*x740*x744))+new_r11);\nevalcond[9]=((((-1.0)*x741*x747))+(((-1.0)*x739*x744))+new_r10);\nevalcond[10]=(((cj9*x746))+(((-1.0)*new_r21*x742))+((new_r11*x741))+x739);\nevalcond[11]=(((cj9*x745))+(((-1.0)*new_r20*x742))+((new_r10*x741))+(((-1.0)*x747)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j4;\nvinfos[0].indices[0] = _ij4[0];\nvinfos[0].indices[1] = _ij4[1];\nvinfos[0].maxsolutions = _nj4;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j5;\nvinfos[1].indices[0] = _ij5[0];\nvinfos[1].indices[1] = _ij5[1];\nvinfos[1].maxsolutions = _nj5;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j6;\nvinfos[2].indices[0] = _ij6[0];\nvinfos[2].indices[1] = _ij6[1];\nvinfos[2].maxsolutions = _nj6;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j7;\nvinfos[3].indices[0] = _ij7[0];\nvinfos[3].indices[1] = _ij7[1];\nvinfos[3].maxsolutions = _nj7;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j8;\nvinfos[4].indices[0] = _ij8[0];\nvinfos[4].indices[1] = _ij8[1];\nvinfos[4].maxsolutions = _nj8;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j9;\nvinfos[5].indices[0] = _ij9[0];\nvinfos[5].indices[1] = _ij9[1];\nvinfos[5].maxsolutions = _nj9;\nvinfos[6].jointtype = 1;\nvinfos[6].foffset = j10;\nvinfos[6].indices[0] = _ij10[0];\nvinfos[6].indices[1] = _ij10[1];\nvinfos[6].maxsolutions = _nj10;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n\n} else\n{\n{\nIkReal j10array[1], cj10array[1], sj10array[1];\nbool j10valid[1]={false};\n_nj10 = 1;\nCheckValue<IkReal> x750 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);\nif(!x750.valid){\ncontinue;\n}\nCheckValue<IkReal> x751=IKPowWithIntegerCheck(IKsign(sj9),-1);\nif(!x751.valid){\ncontinue;\n}\nj10array[0]=((-1.5707963267949)+(x750.value)+(((1.5707963267949)*(x751.value))));\nsj10array[0]=IKsin(j10array[0]);\ncj10array[0]=IKcos(j10array[0]);\nif( j10array[0] > IKPI )\n{\n    j10array[0]-=IK2PI;\n}\nelse if( j10array[0] < -IKPI )\n{    j10array[0]+=IK2PI;\n}\nj10valid[0] = true;\nfor(int ij10 = 0; ij10 < 1; ++ij10)\n{\nif( !j10valid[ij10] )\n{\n    continue;\n}\n_ij10[0] = ij10; _ij10[1] = -1;\nfor(int iij10 = ij10+1; iij10 < 1; ++iij10)\n{\nif( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )\n{\n    j10valid[iij10]=false; _ij10[1] = iij10; break; \n}\n}\nj10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];\n{\nIkReal evalcond[12];\nIkReal x752=IKsin(j10);\nIkReal x753=IKcos(j10);\nIkReal x754=(cj9*sj8);\nIkReal x755=((1.0)*sj9);\nIkReal x756=((1.0)*sj8);\nIkReal x757=((1.0)*cj8);\nIkReal x758=(cj8*new_r00);\nIkReal x759=(cj8*new_r01);\nIkReal x760=((1.0)*x753);\nIkReal x761=(cj9*x752);\nIkReal x762=(cj9*x760);\nevalcond[0]=(new_r20+((sj9*x753)));\nevalcond[1]=((((-1.0)*x752*x755))+new_r21);\nevalcond[2]=(((new_r11*sj8))+x759+x761);\nevalcond[3]=((((-1.0)*new_r00*x756))+((cj8*new_r10))+(((-1.0)*x752)));\nevalcond[4]=((((-1.0)*new_r01*x756))+(((-1.0)*x760))+((cj8*new_r11)));\nevalcond[5]=(((cj8*x761))+((sj8*x753))+new_r01);\nevalcond[6]=(((new_r10*sj8))+(((-1.0)*x762))+x758);\nevalcond[7]=((((-1.0)*cj9*x753*x757))+((sj8*x752))+new_r00);\nevalcond[8]=(((x752*x754))+(((-1.0)*x753*x757))+new_r11);\nevalcond[9]=((((-1.0)*x754*x760))+(((-1.0)*x752*x757))+new_r10);\nevalcond[10]=(((cj9*x759))+(((-1.0)*new_r21*x755))+((new_r11*x754))+x752);\nevalcond[11]=(((cj9*x758))+(((-1.0)*x760))+((new_r10*x754))+(((-1.0)*new_r20*x755)));\nif( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )\n{\ncontinue;\n}\n}\n\n{\nstd::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);\nvinfos[0].jointtype = 1;\nvinfos[0].foffset = j4;\nvinfos[0].indices[0] = _ij4[0];\nvinfos[0].indices[1] = _ij4[1];\nvinfos[0].maxsolutions = _nj4;\nvinfos[1].jointtype = 1;\nvinfos[1].foffset = j5;\nvinfos[1].indices[0] = _ij5[0];\nvinfos[1].indices[1] = _ij5[1];\nvinfos[1].maxsolutions = _nj5;\nvinfos[2].jointtype = 1;\nvinfos[2].foffset = j6;\nvinfos[2].indices[0] = _ij6[0];\nvinfos[2].indices[1] = _ij6[1];\nvinfos[2].maxsolutions = _nj6;\nvinfos[3].jointtype = 1;\nvinfos[3].foffset = j7;\nvinfos[3].indices[0] = _ij7[0];\nvinfos[3].indices[1] = _ij7[1];\nvinfos[3].maxsolutions = _nj7;\nvinfos[4].jointtype = 1;\nvinfos[4].foffset = j8;\nvinfos[4].indices[0] = _ij8[0];\nvinfos[4].indices[1] = _ij8[1];\nvinfos[4].maxsolutions = _nj8;\nvinfos[5].jointtype = 1;\nvinfos[5].foffset = j9;\nvinfos[5].indices[0] = _ij9[0];\nvinfos[5].indices[1] = _ij9[1];\nvinfos[5].maxsolutions = _nj9;\nvinfos[6].jointtype = 1;\nvinfos[6].foffset = j10;\nvinfos[6].indices[0] = _ij10[0];\nvinfos[6].indices[1] = _ij10[1];\nvinfos[6].maxsolutions = _nj10;\nstd::vector<int> vfree(0);\nsolutions.AddSolution(vinfos,vfree);\n}\n}\n}\n\n}\n\n}\n}\n}\n\n}\n\n}\n}\n}\n}\n}static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {\n    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];\n    if( det < 0 ) {\n        numroots=0;\n    }\n    else if( det == 0 ) {\n        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];\n        numroots = 1;\n    }\n    else {\n        det = IKsqrt(det);\n        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);\n        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);\n        numroots = 2;\n    }\n}\n};\n\n\n/// solves the inverse kinematics equations.\n/// \\param pfree is an array specifying the free joints of the chain.\nIKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {\nIKSolver solver;\nreturn solver.ComputeIk(eetrans,eerot,pfree,solutions);\n}\n\nIKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {\nIKSolver solver;\nreturn solver.ComputeIk(eetrans,eerot,pfree,solutions);\n}\n\nIKFAST_API const char* GetKinematicsHash() { return \"34930a3a1995b5fb7c3b43862e0c04f2\"; }\n\nIKFAST_API const char* GetIkFastVersion() { return \"0x10000048\"; }\n\n#ifdef IKFAST_NAMESPACE\n} // end namespace\n#endif\n\n#ifndef IKFAST_NO_MAIN\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef IKFAST_NAMESPACE\nusing namespace IKFAST_NAMESPACE;\n#endif\nint main(int argc, char** argv)\n{\n    if( argc != 12+GetNumFreeParameters()+1 ) {\n        printf(\"\\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\\n\\n\"\n               \"Returns the ik solutions given the transformation of the end effector specified by\\n\"\n               \"a 3x3 rotation R (rXX), and a 3x1 translation (tX).\\n\"\n               \"There are %d free parameters that have to be specified.\\n\\n\",GetNumFreeParameters());\n        return 1;\n    }\n\n    IkSolutionList<IkReal> solutions;\n    std::vector<IkReal> vfree(GetNumFreeParameters());\n    IkReal eerot[9],eetrans[3];\n    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);\n    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);\n    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);\n    for(std::size_t i = 0; i < vfree.size(); ++i)\n        vfree[i] = atof(argv[13+i]);\n    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);\n\n    if( !bSuccess ) {\n        fprintf(stderr,\"Failed to get ik solution\\n\");\n        return -1;\n    }\n\n    printf(\"Found %d ik solutions:\\n\", (int)solutions.GetNumSolutions());\n    std::vector<IkReal> solvalues(GetNumJoints());\n    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {\n        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);\n        printf(\"sol%d (free=%d): \", (int)i, (int)sol.GetFree().size());\n        std::vector<IkReal> vsolfree(sol.GetFree().size());\n        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);\n        for( std::size_t j = 0; j < solvalues.size(); ++j)\n            printf(\"%.15f, \", solvalues[j]);\n        printf(\"\\n\");\n    }\n    return 0;\n}\n\n#endif\n\n#include \"emscripten.h\"\n\nextern \"C\" {\n\nint EMSCRIPTEN_KEEPALIVE _GetNumJoints() {\n    return GetNumJoints();\n}\n\nchar* EMSCRIPTEN_KEEPALIVE _ComputeFk(const IkReal* j) {\n    IkReal eetrans[3] = {0};\n    IkReal eerot[9] = {0};\n    char buffer [256] = {0};\n    ComputeFk(j, eetrans, eerot);\n    for(int i = 0; i < 3; ++i)\n        sprintf(buffer + strlen(buffer), \"%.15f,\", eetrans[i]);\n    for(int i = 0; i < 9 - 1; ++i)\n        sprintf(buffer + strlen(buffer), \"%.15f,\", eerot[i]);\n    sprintf(buffer + strlen(buffer), \"%.15f\", eerot[9 - 1]);\n    return buffer;\n}\n//\n//std::vector<IkReal> TrueComputeIk(int argc, char** argv) {\n//    std::vector<IkReal> solvalues(GetNumJoints());\n//    if( argc != 12+GetNumFreeParameters()+1 ) {\n//        printf(\"\\nKAKAKAK Usage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\\n\\n\"\n//               \"Returns the ik solutions given the transformation of the end effector specified by\\n\"\n//               \"a 3x3 rotation R (rXX), and a 3x1 translation (tX).\\n\"\n//               \"There are %d free parameters that have to be specified.\\n\\n\",GetNumFreeParameters());\n//    }\n//\n//    IkSolutionList<IkReal> solutions;\n//    std::vector<IkReal> vfree(GetNumFreeParameters());\n//    IkReal eerot[9],eetrans[3];\n//    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);\n//    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);\n//    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);\n//    for(std::size_t i = 0; i < vfree.size(); ++i)\n//        vfree[i] = atof(argv[13+i]);\n//    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);\n//\n//    if( !bSuccess ) {\n//        fprintf(stderr,\"Failed to get ik solution\\n\");\n//    }\n//\n//    printf(\"Found %d ik solutions:\\n\", (int)solutions.GetNumSolutions());\n//    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {\n//        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);\n//        printf(\"sol%d (free=%d): \", (int)i, (int)sol.GetFree().size());\n//        std::vector<IkReal> vsolfree(sol.GetFree().size());\n//        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);\n//        for( std::size_t j = 0; j < solvalues.size(); ++j)\n//            printf(\"%.15f, \", solvalues[j]);\n//        printf(\"\\n\");\n//    }\n//    return solvalues;\n//}\n\n}\n"]}