/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-05-18 22:48:18.290063
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKsin(j[6]);
x11=IKsin(j[5]);
x12=IKcos(j[5]);
x13=IKcos(j[6]);
x14=((0.1825)*x5);
x15=((0.1825)*x8);
x16=((0.2765)*x6);
x17=((0.1825)*x6);
x18=((1.0)*x5);
x19=((1.0)*x6);
x20=((1.0)*x4);
x21=((0.2765)*x0);
x22=((0.1825)*x9);
x23=((1.0)*x12);
x24=((1.0)*x3);
x25=((1.0)*x8);
x26=((0.2765)*x3);
x27=((1.0)*x11);
x28=((1.0)*x9);
x29=(x3*x7);
x30=(x2*x7);
x31=(x1*x2);
x32=(x0*x7);
x33=(x20*x3);
x34=(x18*x32);
x35=(x18*x29);
x36=(x20*x7*x9);
x37=((((-1.0)*x33))+((x0*x31)));
x38=(((x0*x4))+((x3*x31)));
x39=((((-1.0)*x1*x33))+((x0*x2)));
x40=((((-1.0)*x18*x30))+((x1*x6)));
x41=(((x1*x5))+((x30*x6)));
x42=((((-1.0)*x0*x31))+x33);
x43=((((-1.0)*x0*x1*x20))+(((-1.0)*x2*x24)));
x44=((((-1.0)*x0*x20))+(((-1.0)*x24*x31)));
x45=(x41*x8);
x46=(x37*x6);
x47=(x44*x5);
x48=(x43*x9);
x49=((((-1.0)*x34))+x46);
x50=((((-1.0)*x35))+((x38*x6)));
x51=((((-1.0)*x36))+x45);
x52=(((x42*x5))+(((-1.0)*x19*x32)));
x53=((((-1.0)*x19*x29))+x47);
x54=(((x9*(((((-1.0)*x1*x18))+(((-1.0)*x19*x30))))))+(((-1.0)*x20*x7*x8)));
x55=(x50*x8);
x56=(x11*x52);
x57=(x11*x53);
x58=(x55+((x39*x9)));
x59=(((x9*(((((-1.0)*x19*x38))+x35))))+((x39*x8)));
x60=(((x49*x8))+x48);
x61=(x12*x58);
x62=(((x9*(((((-1.0)*x46))+x34))))+((x43*x8)));
eerot[0]=(((x13*((((x12*x60))+x56))))+((x10*x62)));
eerot[1]=(((x13*x62))+((x10*(((((-1.0)*x27*x52))+(((-1.0)*x23*x60)))))));
eerot[2]=(((x12*x52))+((x11*(((((-1.0)*x25*x49))+(((-1.0)*x28*x43)))))));
IkReal x63=((1.0)*x32);
eetrans[0]=((((-0.328)*x32))+(((-1.0)*x16*x63))+((x11*(((((-1.0)*x15*x49))+(((-1.0)*x22*x43))))))+((x12*(((((-1.0)*x17*x63))+((x14*x42))))))+((x5*(((((-1.0)*x21*x31))+((x26*x4)))))));
eerot[3]=(((x13*((x57+x61))))+((x10*x59)));
eerot[4]=(((x13*x59))+((x10*(((((-1.0)*x27*x53))+(((-1.0)*x23*x58)))))));
eerot[5]=(((x12*x53))+((x11*(((((-1.0)*x28*x39))+(((-1.0)*x25*x50)))))));
IkReal x64=((1.0)*x29);
eetrans[1]=((((-1.0)*x16*x64))+((x11*(((((-1.0)*x22*x39))+(((-1.0)*x15*x50))))))+((x5*(((((-1.0)*x21*x4))+(((-1.0)*x26*x31))))))+((x12*(((((-1.0)*x17*x64))+((x14*x44))))))+(((-0.328)*x29)));
eerot[6]=(((x13*((((x12*x51))+((x11*x40))))))+((x10*x54)));
eerot[7]=(((x13*x54))+((x10*(((((-1.0)*x27*x40))+(((-1.0)*x23*x51)))))));
eerot[8]=(((x11*(((((-1.0)*x25*x41))+x36))))+((x12*x40)));
eetrans[2]=((0.3)+((x1*x16))+((x11*(((((-1.0)*x15*x41))+((x22*x4*x7))))))+(((-0.2765)*x30*x5))+(((0.328)*x1))+((x12*((((x1*x17))+(((-1.0)*x14*x30)))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij2[2], _nj2;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]), htj2=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.1825)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.1825)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.3)+pz+(((-0.1825)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x65=((1.0)*px);
IkReal x66=((1.0)*pz);
IkReal x67=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x67))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x66)));
rxp0_2=((((-1.0)*r10*x65))+((py*r00)));
rxp1_0=((((-1.0)*r21*x67))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x66)));
rxp1_2=((((-1.0)*r11*x65))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x67)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x66)));
rxp2_2=((((-1.0)*r12*x65))+((py*r02)));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((-1.01462229303577)+(((5.5131654390685)*pp)));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal j0eval[2];
j0eval[0]=((IKabs(px))+(IKabs(py)));
j0eval[1]=((px*px)+(py*py));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j1eval[0]=((1.40720515092754)+(cj3*cj3)+(((2.37251356238698)*cj3))+(((cj2*cj2)*(sj3*sj3))));
j1eval[1]=((((3.61663652802893)*(IKabs(((0.328)+(((0.2765)*cj3)))))))+(IKabs((cj2*sj3))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x68=sj2*sj2;
IkReal x69=cj2*cj2;
IkReal x70=py*py;
IkReal x71=px*px;
IkReal x72=py*py*py*py;
IkReal x73=sj2*sj2*sj2*sj2;
IkReal x74=cj2*cj2*cj2*cj2;
IkReal x75=(px*py);
IkReal x76=((1.0)*x70);
IkReal x77=(x70*x71);
IkReal x78=((2.0)*x68*x69);
j0eval[0]=((IKabs(((((-1.0)*x69*x76))+(((-1.0)*x68*x76)))))+(IKabs((((x69*x75))+((x68*x75))))));
j0eval[1]=(((x72*x78))+((x72*x73))+((x72*x74))+((x73*x77))+((x74*x77))+((x77*x78)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x79=py*py;
IkReal x80=sj2*sj2;
IkReal x81=cj2*cj2;
IkReal x82=(px*py);
IkReal x83=((1.0)*x79);
IkReal x84=(((x81*x82))+((x80*x82)));
IkReal x85=((((-1.0)*x81*x83))+(((-1.0)*x80*x83)));
CheckValue<IkReal> x88 = IKatan2WithCheck(IkReal(x85),x84,IKFAST_ATAN2_MAGTHRESH);
if(!x88.valid){
continue;
}
IkReal x86=((1.0)*(x88.value));
if((((x84*x84)+(x85*x85))) < -0.00001)
continue;
CheckValue<IkReal> x89=IKPowWithIntegerCheck(IKabs(IKsqrt(((x84*x84)+(x85*x85)))),-1);
if(!x89.valid){
continue;
}
if( (((0.2765)*py*sj2*sj3*(x89.value))) < -1-IKFAST_SINCOS_THRESH || (((0.2765)*py*sj2*sj3*(x89.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x87=IKasin(((0.2765)*py*sj2*sj3*(x89.value)));
j0array[0]=(x87+(((-1.0)*x86)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x87))+(((-1.0)*x86)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x90=px*px;
IkReal x91=IKsin(j0);
IkReal x92=IKcos(j0);
IkReal x93=cj2*cj2;
IkReal x94=sj2*sj2;
IkReal x95=((1.0)*px);
IkReal x96=((0.2765)*sj2*sj3);
evalcond[0]=((((-1.0)*x91*x95))+((py*x92))+x96);
evalcond[1]=(((x91*((((x90*x93))+((x90*x94))))))+((x92*(((((-1.0)*py*x94*x95))+(((-1.0)*py*x93*x95))))))+(((-1.0)*px*x96)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
IkReal x97=(py*sj0);
IkReal x98=((2000.0)*pz);
IkReal x99=(cj0*px);
IkReal x100=((553.0)*cj3);
IkReal x101=(cj2*sj3);
IkReal x102=((1.0)*cj3);
j1eval[0]=((((-1.0)*x102*x97))+(((-1.0)*x102*x99))+((pz*x101))+(((-1.18625678119349)*x99))+(((-1.18625678119349)*x97)));
j1eval[1]=IKsign(((((553.0)*pz*x101))+(((-656.0)*x97))+(((-656.0)*x99))+(((-1.0)*x100*x97))+(((-1.0)*x100*x99))));
j1eval[2]=((IKabs(((((152.9045)*cj3*x101))+(((-1.0)*x98*x99))+(((181.384)*x101))+(((-1.0)*x97*x98)))))+(IKabs(((215.168)+(((-1.0)*pz*x98))+(((152.9045)*(cj3*cj3)))+(((362.768)*cj3))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x103=cj2*cj2;
IkReal x104=cj3*cj3;
IkReal x105=(py*sj0);
IkReal x106=((1106000.0)*cj3);
IkReal x107=(cj0*px);
IkReal x108=((305809.0)*x104);
IkReal x109=((1106000.0)*cj2*sj3);
j1eval[0]=((1.40720515092754)+(((-1.0)*x103*x104))+(((2.37251356238698)*cj3))+x104+x103);
j1eval[1]=IKsign(((430336.0)+(((725536.0)*cj3))+(((305809.0)*x103))+x108+(((-1.0)*x103*x108))));
j1eval[2]=((IKabs((((pz*x106))+(((-1.0)*x107*x109))+(((1312000.0)*pz))+(((-1.0)*x105*x109)))))+(IKabs(((((-1.0)*pz*x109))+(((-1312000.0)*x107))+(((-1312000.0)*x105))+(((-1.0)*x106*x107))+(((-1.0)*x105*x106))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x110=(cj0*px);
IkReal x111=(cj3*pz);
IkReal x112=(py*sj0);
IkReal x113=(cj2*sj3);
IkReal x114=((553.0)*x113);
j1eval[0]=(((x110*x113))+((x112*x113))+(((1.18625678119349)*pz))+x111);
j1eval[1]=IKsign((((x110*x114))+((x112*x114))+(((656.0)*pz))+(((553.0)*x111))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x115=((0.2765)*sj3);
IkReal x116=(cj0*py);
IkReal x117=(px*sj0);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
evalcond[1]=((0.18403625)+(((0.181384)*cj3))+(((-1.0)*pp)));
evalcond[2]=(x116+x115+(((-1.0)*x117)));
evalcond[3]=((((-1.0)*x115))+x117+(((-1.0)*x116)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x118=((-1.0)*py);
pz=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x118);
rxp0_1=(px*r20);
rxp1_0=(r21*x118);
rxp1_1=(px*r21);
rxp2_0=(r22*x118);
rxp2_1=(px*r22);
j1eval[0]=((-1.18625678119349)+(((-1.0)*cj3)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x119=((-1.0)*py);
pz=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x119);
rxp0_1=(px*r20);
rxp1_0=(r21*x119);
rxp1_1=(px*r21);
rxp2_0=(r22*x119);
rxp2_1=(px*r22);
j1eval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x121 = ((px*px)+(py*py));
if(IKabs(x121)==0){
continue;
}
IkReal x120=pow(x121,-0.5);
CheckValue<IkReal> x122 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x122.valid){
continue;
}
IkReal gconst0=((-1.0)*(x122.value));
IkReal gconst1=((-1.0)*px*x120);
IkReal gconst2=(py*x120);
IkReal x123=((0.2765)*sj3);
IkReal x124=(gconst2*py);
IkReal x125=(gconst1*px);
CheckValue<IkReal> x126 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x126.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x126.value)+j0)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((-1.0)*(px*px)))+(((0.181384)*cj3))+(((-1.0)*(py*py))));
evalcond[2]=(x124+x123+(((-1.0)*x125)));
evalcond[3]=((((-1.0)*x123))+x125+(((-1.0)*x124)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x127=((-1.0)*py);
CheckValue<IkReal> x131 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x131.valid){
continue;
}
IkReal x128=((-1.0)*(x131.value));
IkReal x129=((px*px)+(py*py));
IkReal x130=x120;
pz=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
pp=x129;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x127);
rxp0_1=(px*r20);
rxp1_0=(r21*x127);
rxp1_1=(px*r21);
rxp2_0=(r22*x127);
rxp2_1=(px*r22);
sj0=gconst1;
cj0=gconst2;
j0=x128;
IkReal gconst0=x128;
IkReal gconst1=((-1.0)*px*x130);
IkReal gconst2=(py*x130);
j1eval[0]=((-1.18625678119349)+(((-1.0)*cj3)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x132=((-1.0)*py);
CheckValue<IkReal> x136 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x136.valid){
continue;
}
IkReal x133=((-1.0)*(x136.value));
IkReal x134=((px*px)+(py*py));
IkReal x135=x120;
pz=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
pp=x134;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x132);
rxp0_1=(px*r20);
rxp1_0=(r21*x132);
rxp1_1=(px*r21);
rxp2_0=(r22*x132);
rxp2_1=(px*r22);
sj0=gconst1;
cj0=gconst2;
j0=x133;
IkReal gconst0=x133;
IkReal gconst1=((-1.0)*px*x135);
IkReal gconst2=(py*x135);
j1eval[0]=0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x138=IKPowWithIntegerCheck((((gconst2*px))+((gconst1*py))),-1);
if(!x138.valid){
continue;
}
IkReal x137=x138.value;
sj1array[0]=((((-0.2765)*cj3*x137))+(((-0.328)*x137)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x139=IKcos(j1);
IkReal x140=IKsin(j1);
IkReal x141=px*px;
IkReal x142=py*py;
IkReal x143=(gconst1*py);
IkReal x144=((1.0)*gconst2*px);
IkReal x145=((1.52439024390244)*x139);
IkReal x146=((0.656)*x140);
evalcond[0]=((((-1.0)*x139*x144))+(((-1.0)*x139*x143)));
evalcond[1]=((((-1.0)*x144))+(((-0.2765)*cj3*x140))+(((-1.0)*x143))+(((-0.328)*x140)));
evalcond[2]=(((x142*x145))+((x141*x145))+(((0.0474569359756098)*x139)));
evalcond[3]=((-0.03113175)+(((-1.0)*x143*x146))+(((-1.0)*gconst2*px*x146))+(((-1.0)*x142))+(((-1.0)*x141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x449=IKPowWithIntegerCheck(((-0.328)+(((-0.2765)*cj3))),-1);
if(!x449.valid){
continue;
}
IkReal x448=x449.value;
sj1array[0]=(((gconst1*py*x448))+((gconst2*px*x448)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x450=IKcos(j1);
IkReal x451=IKsin(j1);
IkReal x452=px*px;
IkReal x453=py*py;
IkReal x454=(gconst2*px);
IkReal x455=((1.0)*x450);
IkReal x456=((1.52439024390244)*x450);
IkReal x457=(gconst1*py*x451);
evalcond[0]=((((-1.0)*x454*x455))+(((-1.0)*gconst1*py*x455)));
evalcond[1]=((0.328)+(((0.2765)*cj3))+x457+((x451*x454)));
evalcond[2]=(((x452*x456))+((x453*x456))+(((0.0474569359756098)*x450)));
evalcond[3]=((-0.03113175)+(((-0.656)*x457))+(((-1.0)*x452))+(((-1.0)*x453))+(((-0.656)*x451*x454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x459 = ((px*px)+(py*py));
if(IKabs(x459)==0){
continue;
}
IkReal x458=pow(x459,-0.5);
CheckValue<IkReal> x460 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x460.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x460.value))));
IkReal gconst4=((1.0)*px*x458);
IkReal gconst5=((-1.0)*py*x458);
IkReal x461=((0.2765)*sj3);
IkReal x462=(gconst4*px);
IkReal x463=(gconst5*py);
CheckValue<IkReal> x464 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x464.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x464.value)+j0)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((-1.0)*(px*px)))+(((0.181384)*cj3))+(((-1.0)*(py*py))));
evalcond[2]=((((-1.0)*x462))+x463+x461);
evalcond[3]=((((-1.0)*x463))+(((-1.0)*x461))+x462);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
CheckValue<IkReal> x469 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x469.valid){
continue;
}
IkReal x465=((1.0)*(x469.value));
IkReal x466=((-1.0)*py);
IkReal x467=((px*px)+(py*py));
IkReal x468=x458;
pz=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
pp=x467;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x466);
rxp0_1=(px*r20);
rxp1_0=(r21*x466);
rxp1_1=(px*r21);
rxp2_0=(r22*x466);
rxp2_1=(px*r22);
sj0=gconst4;
cj0=gconst5;
j0=((3.14159265)+(((-1.0)*x465)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x465)));
IkReal gconst4=((1.0)*px*x468);
IkReal gconst5=(x466*x468);
j1eval[0]=((-1.18625678119349)+(((-1.0)*cj3)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
CheckValue<IkReal> x474 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x474.valid){
continue;
}
IkReal x470=((1.0)*(x474.value));
IkReal x471=((-1.0)*py);
IkReal x472=((px*px)+(py*py));
IkReal x473=x458;
pz=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
pp=x472;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x471);
rxp0_1=(px*r20);
rxp1_0=(r21*x471);
rxp1_1=(px*r21);
rxp2_0=(r22*x471);
rxp2_1=(px*r22);
sj0=gconst4;
cj0=gconst5;
j0=((3.14159265)+(((-1.0)*x470)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x470)));
IkReal gconst4=((1.0)*px*x473);
IkReal gconst5=(x471*x473);
j1eval[0]=0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x476=IKPowWithIntegerCheck((((gconst5*px))+((gconst4*py))),-1);
if(!x476.valid){
continue;
}
IkReal x475=x476.value;
sj1array[0]=((((-0.2765)*cj3*x475))+(((-0.328)*x475)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x477=IKcos(j1);
IkReal x478=IKsin(j1);
IkReal x479=px*px;
IkReal x480=py*py;
IkReal x481=(gconst4*py);
IkReal x482=(gconst5*px);
IkReal x483=((0.656)*x478);
IkReal x484=((1.52439024390244)*x477);
IkReal x485=((1.0)*x477);
evalcond[0]=((((-1.0)*x481*x485))+(((-1.0)*x482*x485)));
evalcond[1]=((((-1.0)*x482))+(((-1.0)*x481))+(((-0.2765)*cj3*x478))+(((-0.328)*x478)));
evalcond[2]=((((0.0474569359756098)*x477))+((x480*x484))+((x479*x484)));
evalcond[3]=((-0.03113175)+(((-1.0)*x480))+(((-1.0)*x479))+(((-1.0)*x481*x483))+(((-1.0)*x482*x483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x487=IKPowWithIntegerCheck(((-0.328)+(((-0.2765)*cj3))),-1);
if(!x487.valid){
continue;
}
IkReal x486=x487.value;
sj1array[0]=(((gconst5*px*x486))+((gconst4*py*x486)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x488=IKcos(j1);
IkReal x489=IKsin(j1);
IkReal x490=px*px;
IkReal x491=py*py;
IkReal x492=(gconst5*px);
IkReal x493=((1.52439024390244)*x488);
IkReal x494=((1.0)*x488);
IkReal x495=(gconst4*py*x489);
evalcond[0]=((((-1.0)*gconst4*py*x494))+(((-1.0)*x492*x494)));
evalcond[1]=((0.328)+(((0.2765)*cj3))+((x489*x492))+x495);
evalcond[2]=(((x491*x493))+((x490*x493))+(((0.0474569359756098)*x488)));
evalcond[3]=((-0.03113175)+(((-1.0)*x490))+(((-1.0)*x491))+(((-0.656)*x489*x492))+(((-0.656)*x495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x497=IKPowWithIntegerCheck((((cj0*px))+((py*sj0))),-1);
if(!x497.valid){
continue;
}
IkReal x496=x497.value;
sj1array[0]=((((-0.328)*x496))+(((-0.2765)*cj3*x496)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x498=IKcos(j1);
IkReal x499=IKsin(j1);
IkReal x500=px*px;
IkReal x501=py*py;
IkReal x502=(cj0*px);
IkReal x503=(py*sj0);
IkReal x504=((0.656)*x499);
IkReal x505=((1.52439024390244)*x498);
IkReal x506=((1.0)*x498);
evalcond[0]=((((-1.0)*x502*x506))+(((-1.0)*x503*x506)));
evalcond[1]=((((-1.0)*x502))+(((-1.0)*x503))+(((-0.328)*x499))+(((-0.2765)*cj3*x499)));
evalcond[2]=(((x500*x505))+((x501*x505))+(((0.0474569359756098)*x498)));
evalcond[3]=((-0.03113175)+(((-1.0)*x502*x504))+(((-1.0)*x503*x504))+(((-1.0)*x501))+(((-1.0)*x500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x508=IKPowWithIntegerCheck(((-0.328)+(((-0.2765)*cj3))),-1);
if(!x508.valid){
continue;
}
IkReal x507=x508.value;
sj1array[0]=(((py*sj0*x507))+((cj0*px*x507)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x509=IKcos(j1);
IkReal x510=IKsin(j1);
IkReal x511=px*px;
IkReal x512=py*py;
IkReal x513=(py*sj0);
IkReal x514=(cj0*px);
IkReal x515=((1.0)*x509);
IkReal x516=((0.656)*x510);
IkReal x517=((1.52439024390244)*x509);
evalcond[0]=((((-1.0)*x514*x515))+(((-1.0)*x513*x515)));
evalcond[1]=((0.328)+((x510*x513))+((x510*x514))+(((0.2765)*cj3)));
evalcond[2]=(((x511*x517))+((x512*x517))+(((0.0474569359756098)*x509)));
evalcond[3]=((-0.03113175)+(((-1.0)*x514*x516))+(((-1.0)*x511))+(((-1.0)*x512))+(((-1.0)*x513*x516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x518=((((-0.2765)*sj3))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
evalcond[1]=((0.18403625)+(((0.181384)*cj3))+(((-1.0)*pp)));
evalcond[2]=x518;
evalcond[3]=x518;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x519=((-1.0)*py);
pz=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x519);
rxp0_1=(px*r20);
rxp1_0=(r21*x519);
rxp1_1=(px*r21);
rxp2_0=(r22*x519);
rxp2_1=(px*r22);
j1eval[0]=((-1.18625678119349)+(((-1.0)*cj3)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x520=((-1.0)*py);
pz=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x520);
rxp0_1=(px*r20);
rxp1_0=(r21*x520);
rxp1_1=(px*r21);
rxp2_0=(r22*x520);
rxp2_1=(px*r22);
j1eval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x522 = ((px*px)+(py*py));
if(IKabs(x522)==0){
continue;
}
IkReal x521=pow(x522,-0.5);
CheckValue<IkReal> x523 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x523.valid){
continue;
}
IkReal gconst6=((-1.0)*(x523.value));
IkReal gconst7=((-1.0)*px*x521);
IkReal gconst8=(py*x521);
IkReal x524=((((-0.2765)*sj3))+((gconst8*py))+(((-1.0)*gconst7*px)));
CheckValue<IkReal> x525 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x525.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x525.value)+j0)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((-1.0)*(px*px)))+(((0.181384)*cj3))+(((-1.0)*(py*py))));
evalcond[2]=x524;
evalcond[3]=x524;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x526=((-1.0)*py);
CheckValue<IkReal> x530 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x530.valid){
continue;
}
IkReal x527=((-1.0)*(x530.value));
IkReal x528=((px*px)+(py*py));
IkReal x529=x521;
pz=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
pp=x528;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x526);
rxp0_1=(px*r20);
rxp1_0=(r21*x526);
rxp1_1=(px*r21);
rxp2_0=(r22*x526);
rxp2_1=(px*r22);
sj0=gconst7;
cj0=gconst8;
j0=x527;
IkReal gconst6=x527;
IkReal gconst7=((-1.0)*px*x529);
IkReal gconst8=(py*x529);
j1eval[0]=((-1.18625678119349)+(((-1.0)*cj3)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x531=((-1.0)*py);
CheckValue<IkReal> x535 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x535.valid){
continue;
}
IkReal x532=((-1.0)*(x535.value));
IkReal x533=((px*px)+(py*py));
IkReal x534=x521;
pz=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
pp=x533;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x531);
rxp0_1=(px*r20);
rxp1_0=(r21*x531);
rxp1_1=(px*r21);
rxp2_0=(r22*x531);
rxp2_1=(px*r22);
sj0=gconst7;
cj0=gconst8;
j0=x532;
IkReal gconst6=x532;
IkReal gconst7=((-1.0)*px*x534);
IkReal gconst8=(py*x534);
j1eval[0]=0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x537=IKPowWithIntegerCheck((((gconst8*px))+((gconst7*py))),-1);
if(!x537.valid){
continue;
}
IkReal x536=x537.value;
sj1array[0]=((((-0.2765)*cj3*x536))+(((-0.328)*x536)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x538=IKcos(j1);
IkReal x539=IKsin(j1);
IkReal x540=px*px;
IkReal x541=py*py;
IkReal x542=(gconst8*px);
IkReal x543=(gconst7*py);
IkReal x544=((0.656)*x539);
IkReal x545=((1.52439024390244)*x538);
evalcond[0]=(((x538*x543))+((x538*x542)));
evalcond[1]=((((-1.0)*x543))+(((-1.0)*x542))+(((-0.2765)*cj3*x539))+(((-0.328)*x539)));
evalcond[2]=(((x541*x545))+((x540*x545))+(((0.0474569359756098)*x538)));
evalcond[3]=((-0.03113175)+(((-1.0)*x542*x544))+(((-1.0)*x540))+(((-1.0)*x541))+(((-1.0)*x543*x544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x547=IKPowWithIntegerCheck(((-0.328)+(((-0.2765)*cj3))),-1);
if(!x547.valid){
continue;
}
IkReal x546=x547.value;
sj1array[0]=(((gconst7*py*x546))+((gconst8*px*x546)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x548=IKcos(j1);
IkReal x549=IKsin(j1);
IkReal x550=px*px;
IkReal x551=py*py;
IkReal x552=(gconst8*px);
IkReal x553=((1.52439024390244)*x548);
IkReal x554=(gconst7*py*x549);
evalcond[0]=(((x548*x552))+((gconst7*py*x548)));
evalcond[1]=((0.328)+(((0.2765)*cj3))+x554+((x549*x552)));
evalcond[2]=((((0.0474569359756098)*x548))+((x550*x553))+((x551*x553)));
evalcond[3]=((-0.03113175)+(((-1.0)*x551))+(((-1.0)*x550))+(((-0.656)*x549*x552))+(((-0.656)*x554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x556 = ((px*px)+(py*py));
if(IKabs(x556)==0){
continue;
}
IkReal x555=pow(x556,-0.5);
CheckValue<IkReal> x557 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x557.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x557.value))));
IkReal gconst10=((1.0)*px*x555);
IkReal gconst11=((-1.0)*py*x555);
IkReal x558=((((-0.2765)*sj3))+(((-1.0)*gconst10*px))+((gconst11*py)));
CheckValue<IkReal> x559 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x559.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x559.value)+j0)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((-1.0)*(px*px)))+(((0.181384)*cj3))+(((-1.0)*(py*py))));
evalcond[2]=x558;
evalcond[3]=x558;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
CheckValue<IkReal> x564 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x564.valid){
continue;
}
IkReal x560=((1.0)*(x564.value));
IkReal x561=((-1.0)*py);
IkReal x562=((px*px)+(py*py));
IkReal x563=x555;
pz=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
pp=x562;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x561);
rxp0_1=(px*r20);
rxp1_0=(r21*x561);
rxp1_1=(px*r21);
rxp2_0=(r22*x561);
rxp2_1=(px*r22);
sj0=gconst10;
cj0=gconst11;
j0=((3.14159265)+(((-1.0)*x560)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x560)));
IkReal gconst10=((1.0)*px*x563);
IkReal gconst11=(x561*x563);
j1eval[0]=((-1.18625678119349)+(((-1.0)*cj3)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
CheckValue<IkReal> x569 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x569.valid){
continue;
}
IkReal x565=((1.0)*(x569.value));
IkReal x566=((-1.0)*py);
IkReal x567=((px*px)+(py*py));
IkReal x568=x555;
pz=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
pp=x567;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x566);
rxp0_1=(px*r20);
rxp1_0=(r21*x566);
rxp1_1=(px*r21);
rxp2_0=(r22*x566);
rxp2_1=(px*r22);
sj0=gconst10;
cj0=gconst11;
j0=((3.14159265)+(((-1.0)*x565)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x565)));
IkReal gconst10=((1.0)*px*x568);
IkReal gconst11=(x566*x568);
j1eval[0]=0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x571=IKPowWithIntegerCheck((((gconst10*py))+((gconst11*px))),-1);
if(!x571.valid){
continue;
}
IkReal x570=x571.value;
sj1array[0]=((((-0.328)*x570))+(((-0.2765)*cj3*x570)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x572=IKcos(j1);
IkReal x573=IKsin(j1);
IkReal x574=px*px;
IkReal x575=py*py;
IkReal x576=(gconst10*py);
IkReal x577=(gconst11*px);
IkReal x578=((1.52439024390244)*x572);
IkReal x579=((0.656)*x573);
evalcond[0]=(((x572*x577))+((x572*x576)));
evalcond[1]=((((-0.328)*x573))+(((-1.0)*x576))+(((-1.0)*x577))+(((-0.2765)*cj3*x573)));
evalcond[2]=(((x574*x578))+(((0.0474569359756098)*x572))+((x575*x578)));
evalcond[3]=((-0.03113175)+(((-1.0)*x577*x579))+(((-1.0)*x576*x579))+(((-1.0)*x575))+(((-1.0)*x574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x581=IKPowWithIntegerCheck(((-0.328)+(((-0.2765)*cj3))),-1);
if(!x581.valid){
continue;
}
IkReal x580=x581.value;
sj1array[0]=(((gconst11*px*x580))+((gconst10*py*x580)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x582=IKcos(j1);
IkReal x583=IKsin(j1);
IkReal x584=px*px;
IkReal x585=py*py;
IkReal x586=(gconst10*py);
IkReal x587=(gconst11*px);
IkReal x588=((1.52439024390244)*x582);
IkReal x589=((0.656)*x583);
evalcond[0]=(((x582*x587))+((x582*x586)));
evalcond[1]=((0.328)+((x583*x587))+((x583*x586))+(((0.2765)*cj3)));
evalcond[2]=(((x584*x588))+((x585*x588))+(((0.0474569359756098)*x582)));
evalcond[3]=((-0.03113175)+(((-1.0)*x585))+(((-1.0)*x584))+(((-1.0)*x586*x589))+(((-1.0)*x587*x589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x591=IKPowWithIntegerCheck((((cj0*px))+((py*sj0))),-1);
if(!x591.valid){
continue;
}
IkReal x590=x591.value;
sj1array[0]=((((-0.2765)*cj3*x590))+(((-0.328)*x590)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x592=IKcos(j1);
IkReal x593=IKsin(j1);
IkReal x594=px*px;
IkReal x595=py*py;
IkReal x596=(cj0*px);
IkReal x597=(py*sj0);
IkReal x598=((0.656)*x593);
IkReal x599=((1.52439024390244)*x592);
evalcond[0]=(((x592*x597))+((x592*x596)));
evalcond[1]=((((-1.0)*x597))+(((-1.0)*x596))+(((-0.2765)*cj3*x593))+(((-0.328)*x593)));
evalcond[2]=((((0.0474569359756098)*x592))+((x594*x599))+((x595*x599)));
evalcond[3]=((-0.03113175)+(((-1.0)*x597*x598))+(((-1.0)*x596*x598))+(((-1.0)*x595))+(((-1.0)*x594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x601=IKPowWithIntegerCheck(((-0.328)+(((-0.2765)*cj3))),-1);
if(!x601.valid){
continue;
}
IkReal x600=x601.value;
sj1array[0]=(((cj0*px*x600))+((py*sj0*x600)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x602=IKcos(j1);
IkReal x603=IKsin(j1);
IkReal x604=px*px;
IkReal x605=py*py;
IkReal x606=((1.52439024390244)*x602);
IkReal x607=(py*sj0*x603);
IkReal x608=(cj0*px*x603);
evalcond[0]=(((cj0*px*x602))+((py*sj0*x602)));
evalcond[1]=((0.328)+(((0.2765)*cj3))+x607+x608);
evalcond[2]=(((x605*x606))+((x604*x606))+(((0.0474569359756098)*x602)));
evalcond[3]=((-0.03113175)+(((-1.0)*x605))+(((-1.0)*x604))+(((-0.656)*x608))+(((-0.656)*x607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.36542025)+(((-1.0)*pp)));
evalcond[2]=((((-1.0)*px*sj0))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((((-1.65425971877585)*py*sj0))+(((-1.65425971877585)*cj0*px)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x609=IKsin(j1);
IkReal x610=IKcos(j1);
CheckValue<IkReal> x617=IKPowWithIntegerCheck(cj0,-1);
if(!x617.valid){
continue;
}
IkReal x611=x617.value;
IkReal x612=sj0*sj0;
IkReal x613=(x611*x612);
IkReal x614=(py*sj0*x609);
IkReal x615=((1.0)*px*x610);
IkReal x616=(cj0*px*x609);
evalcond[0]=((0.6045)*x610);
evalcond[1]=((0.6045)+x614+x616);
evalcond[2]=((-0.396552)+(((-0.656)*x616))+(((-0.656)*x614)));
evalcond[3]=((((-1.0)*sj2*x613*x615))+(((-1.0)*cj0*sj2*x615)));
evalcond[4]=((((-1.0)*cj0*cj2*x615))+(((-1.0)*cj2*x613*x615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(pz)));
evalcond[1]=((0.00265225)+(((-1.0)*pp)));
evalcond[2]=((((-1.0)*px*sj0))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((((-19.4174757281553)*py*sj0))+(((-19.4174757281553)*cj0*px)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x618=IKsin(j1);
IkReal x619=IKcos(j1);
CheckValue<IkReal> x626=IKPowWithIntegerCheck(cj0,-1);
if(!x626.valid){
continue;
}
IkReal x620=x626.value;
IkReal x621=sj0*sj0;
IkReal x622=(cj0*px);
IkReal x623=((1.0)*x619);
IkReal x624=(py*sj0*x618);
IkReal x625=(px*x620*x621*x623);
evalcond[0]=((0.0515)*x619);
evalcond[1]=((0.0515)+((x618*x622))+x624);
evalcond[2]=((-0.033784)+(((-0.656)*x624))+(((-0.656)*x618*x622)));
evalcond[3]=((((-1.0)*sj2*x622*x623))+(((-1.0)*sj2*x625)));
evalcond[4]=((((-1.0)*cj2*x625))+(((-1.0)*cj2*x622*x623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x627=py*py;
IkReal x628=cj0*cj0;
IkReal x629=(cj0*px);
IkReal x630=(py*sj0);
IkReal x631=((2000.0)*pz);
IkReal x632=(cj2*sj3);
IkReal x633=((2000.0)*x627);
CheckValue<IkReal> x634=IKPowWithIntegerCheck(IKsign(((((553.0)*x630*x632))+(((656.0)*pz))+(((553.0)*cj3*pz))+(((553.0)*x629*x632)))),-1);
if(!x634.valid){
continue;
}
CheckValue<IkReal> x635 = IKatan2WithCheck(IkReal(((((-1.0)*x629*x631))+(((-1.0)*x630*x631))+(((-181.384)*x632))+(((-152.9045)*cj3*x632)))),((215.168)+((x628*x633))+(((152.9045)*(cj3*cj3)))+(((-4000.0)*x629*x630))+(((-1.0)*x633))+(((-2000.0)*x628*(px*px)))+(((362.768)*cj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x635.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x634.value)))+(x635.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x636=IKcos(j1);
IkReal x637=IKsin(j1);
IkReal x638=((0.2765)*cj3);
IkReal x639=(cj0*px);
IkReal x640=((1.0)*sj0);
IkReal x641=(py*sj0);
IkReal x642=((1.0)*pz);
IkReal x643=((0.2765)*sj3);
IkReal x644=(cj0*py);
IkReal x645=((0.656)*x637);
IkReal x646=((1.0)*x636);
IkReal x647=(py*x636);
IkReal x648=(cj2*x637);
evalcond[0]=(((x636*x638))+(((0.328)*x636))+(((-1.0)*x642))+(((-1.0)*x643*x648)));
evalcond[1]=((0.328)+((x637*x641))+x638+(((-1.0)*x636*x642))+((x637*x639)));
evalcond[2]=((-0.03113175)+(((-1.0)*x641*x645))+(((-1.0)*x639*x645))+(((0.656)*pz*x636))+(((-1.0)*pp)));
evalcond[3]=((((-0.328)*x637))+(((-1.0)*x637*x638))+(((-1.0)*cj2*x636*x643))+(((-1.0)*x639))+(((-1.0)*py*x640)));
evalcond[4]=((((-1.0)*cj2*px*x640))+(((-1.0)*sj2*x640*x647))+(((-1.0)*sj2*x637*x642))+((cj2*x644))+(((-1.0)*sj2*x639*x646)));
evalcond[5]=((((-1.0)*x642*x648))+((px*sj0*sj2))+(((-1.0)*x643))+(((-1.0)*sj2*x644))+(((-1.0)*cj2*x639*x646))+(((-1.0)*cj2*x640*x647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x649=cj2*cj2;
IkReal x650=cj3*cj3;
IkReal x651=(py*sj0);
IkReal x652=((1106000.0)*cj3);
IkReal x653=(cj0*px);
IkReal x654=((305809.0)*x650);
IkReal x655=((1106000.0)*cj2*sj3);
CheckValue<IkReal> x656 = IKatan2WithCheck(IkReal(((((-1.0)*x651*x652))+(((-1312000.0)*x651))+(((-1312000.0)*x653))+(((-1.0)*pz*x655))+(((-1.0)*x652*x653)))),((((-1.0)*x651*x655))+((pz*x652))+(((1312000.0)*pz))+(((-1.0)*x653*x655))),IKFAST_ATAN2_MAGTHRESH);
if(!x656.valid){
continue;
}
CheckValue<IkReal> x657=IKPowWithIntegerCheck(IKsign(((430336.0)+(((725536.0)*cj3))+(((305809.0)*x649))+x654+(((-1.0)*x649*x654)))),-1);
if(!x657.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x656.value)+(((1.5707963267949)*(x657.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x658=IKcos(j1);
IkReal x659=IKsin(j1);
IkReal x660=((0.2765)*cj3);
IkReal x661=(cj0*px);
IkReal x662=((1.0)*sj0);
IkReal x663=(py*sj0);
IkReal x664=((1.0)*pz);
IkReal x665=((0.2765)*sj3);
IkReal x666=(cj0*py);
IkReal x667=((0.656)*x659);
IkReal x668=((1.0)*x658);
IkReal x669=(py*x658);
IkReal x670=(cj2*x659);
evalcond[0]=((((-1.0)*x665*x670))+(((0.328)*x658))+(((-1.0)*x664))+((x658*x660)));
evalcond[1]=((0.328)+(((-1.0)*x658*x664))+x660+((x659*x661))+((x659*x663)));
evalcond[2]=((-0.03113175)+(((-1.0)*x663*x667))+(((-1.0)*x661*x667))+(((-1.0)*pp))+(((0.656)*pz*x658)));
evalcond[3]=((((-1.0)*x659*x660))+(((-1.0)*cj2*x658*x665))+(((-1.0)*x661))+(((-1.0)*py*x662))+(((-0.328)*x659)));
evalcond[4]=(((cj2*x666))+(((-1.0)*sj2*x659*x664))+(((-1.0)*cj2*px*x662))+(((-1.0)*sj2*x661*x668))+(((-1.0)*sj2*x662*x669)));
evalcond[5]=((((-1.0)*cj2*x662*x669))+(((-1.0)*sj2*x666))+((px*sj0*sj2))+(((-1.0)*x664*x670))+(((-1.0)*cj2*x661*x668))+(((-1.0)*x665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x671=(cj0*px);
IkReal x672=((553.0)*cj3);
IkReal x673=(cj2*sj3);
IkReal x674=(py*sj0);
IkReal x675=((2000.0)*pz);
CheckValue<IkReal> x676 = IKatan2WithCheck(IkReal(((215.168)+(((152.9045)*(cj3*cj3)))+(((-1.0)*pz*x675))+(((362.768)*cj3)))),((((152.9045)*cj3*x673))+(((181.384)*x673))+(((-1.0)*x671*x675))+(((-1.0)*x674*x675))),IKFAST_ATAN2_MAGTHRESH);
if(!x676.valid){
continue;
}
CheckValue<IkReal> x677=IKPowWithIntegerCheck(IKsign(((((-656.0)*x674))+(((-656.0)*x671))+(((-1.0)*x671*x672))+(((-1.0)*x672*x674))+(((553.0)*pz*x673)))),-1);
if(!x677.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x676.value)+(((1.5707963267949)*(x677.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x678=IKcos(j1);
IkReal x679=IKsin(j1);
IkReal x680=((0.2765)*cj3);
IkReal x681=(cj0*px);
IkReal x682=((1.0)*sj0);
IkReal x683=(py*sj0);
IkReal x684=((1.0)*pz);
IkReal x685=((0.2765)*sj3);
IkReal x686=(cj0*py);
IkReal x687=((0.656)*x679);
IkReal x688=((1.0)*x678);
IkReal x689=(py*x678);
IkReal x690=(cj2*x679);
evalcond[0]=(((x678*x680))+(((-1.0)*x684))+(((-1.0)*x685*x690))+(((0.328)*x678)));
evalcond[1]=((0.328)+(((-1.0)*x678*x684))+((x679*x683))+((x679*x681))+x680);
evalcond[2]=((-0.03113175)+(((-1.0)*x681*x687))+(((-1.0)*pp))+(((0.656)*pz*x678))+(((-1.0)*x683*x687)));
evalcond[3]=((((-0.328)*x679))+(((-1.0)*x679*x680))+(((-1.0)*cj2*x678*x685))+(((-1.0)*py*x682))+(((-1.0)*x681)));
evalcond[4]=((((-1.0)*sj2*x682*x689))+(((-1.0)*sj2*x679*x684))+(((-1.0)*sj2*x681*x688))+(((-1.0)*cj2*px*x682))+((cj2*x686)));
evalcond[5]=((((-1.0)*x684*x690))+(((-1.0)*x685))+((px*sj0*sj2))+(((-1.0)*cj2*x681*x688))+(((-1.0)*cj2*x682*x689))+(((-1.0)*sj2*x686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x691=((0.328)+(((0.2765)*cj3)));
CheckValue<IkReal> x694 = IKatan2WithCheck(IkReal(x691),((-0.2765)*cj2*sj3),IKFAST_ATAN2_MAGTHRESH);
if(!x694.valid){
continue;
}
IkReal x692=((1.0)*(x694.value));
if((((x691*x691)+(((0.07645225)*(cj2*cj2)*(sj3*sj3))))) < -0.00001)
continue;
CheckValue<IkReal> x695=IKPowWithIntegerCheck(IKabs(IKsqrt(((x691*x691)+(((0.07645225)*(cj2*cj2)*(sj3*sj3)))))),-1);
if(!x695.valid){
continue;
}
if( ((pz*(x695.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x695.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x693=IKasin((pz*(x695.value)));
j1array[0]=(x693+(((-1.0)*x692)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x692))+(((-1.0)*x693)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j0eval[3];
IkReal x696=pz*pz;
IkReal x697=((553.0)*cj3);
IkReal x698=(pp*sj1);
IkReal x699=((2000.0)*cj1*pz);
IkReal x700=(sj1*x696);
IkReal x701=((553.0)*sj1*sj2*sj3);
j0eval[0]=((((-1.0)*x700))+x698);
j0eval[1]=((IKabs(((((-1.0)*py*x701))+(((-1.0)*px*x697))+((px*x699))+(((-656.0)*px)))))+(IKabs((((py*x699))+(((-656.0)*py))+((px*x701))+(((-1.0)*py*x697))))));
j0eval[2]=IKsign(((((2000.0)*x698))+(((-2000.0)*x700))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x702=pz*pz;
IkReal x703=(pp*sj1);
IkReal x704=((125000.0)*pp);
IkReal x705=(sj1*x702);
IkReal x706=((82000.0)*cj1*pz);
IkReal x707=((22673.0)*sj1*sj2*sj3);
j0eval[0]=((((-1.0)*x705))+x703);
j0eval[1]=IKsign(((((82000.0)*x703))+(((-82000.0)*x705))));
j0eval[2]=((IKabs(((((-1.0)*py*x704))+(((-3891.46875)*py))+((px*x707))+((py*x706)))))+(IKabs(((((-1.0)*py*x707))+(((-3891.46875)*px))+(((-1.0)*px*x704))+((px*x706))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x708=pz*pz;
IkReal x709=(px*sj1);
IkReal x710=((553.0)*cj3);
IkReal x711=(py*sj1);
IkReal x712=((553.0)*sj3);
IkReal x713=(cj1*cj2);
j0eval[0]=((((-1.0)*x708))+pp);
j0eval[1]=IKsign(((((-2000.0)*x708))+(((2000.0)*pp))));
j0eval[2]=((IKabs(((((-1.0)*py*x712*x713))+(((-1.0)*x710*x711))+((px*sj2*x712))+(((-656.0)*x711)))))+(IKabs(((((-1.0)*x709*x710))+(((-1.0)*px*x712*x713))+(((-1.0)*py*sj2*x712))+(((-656.0)*x709))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x714=((1.0)*pp);
IkReal x715=((0.328)+(((0.2765)*cj3))+(((-1.0)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((0.181384)*cj3))+(((-1.0)*x714)));
evalcond[2]=x715;
evalcond[3]=x715;
evalcond[4]=((-0.03113175)+(((-1.0)*x714))+(((0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
IkReal x716=pz*pz;
IkReal x717=(px*sj3);
IkReal x718=((1.0)*py*sj3);
j0eval[0]=((((-1.0)*x716))+pp);
j0eval[1]=IKsign(((((-2000.0)*x716))+(((2000.0)*pp))));
j0eval[2]=((IKabs(((((-1.0)*cj2*x717))+(((-1.0)*sj2*x718)))))+(IKabs(((((-1.0)*cj2*x718))+((sj2*x717))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
IkReal x719=cj2*cj2;
IkReal x720=pz*pz;
IkReal x721=((1.0)*cj2);
IkReal x722=(px*sj3);
IkReal x723=(py*sj3);
IkReal x724=(cj2*x720);
j0eval[0]=((((-1.0)*pp*x721))+x724);
j0eval[1]=((IKabs((((cj2*sj2*x723))+((x719*x722)))))+(IKabs((((x719*x723))+(((-1.0)*sj2*x721*x722))))));
j0eval[2]=IKsign(((((-2000.0)*cj2*pp))+(((2000.0)*x724))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
IkReal x725=pz*pz;
IkReal x726=cj2*cj2;
IkReal x727=(pp*sj2);
IkReal x728=(sj3*x726);
IkReal x729=(cj2*sj2*sj3);
IkReal x730=(sj2*x725);
j0eval[0]=((((-1.0)*x727))+x730);
j0eval[1]=IKsign(((((-2000.0)*x727))+(((2000.0)*x730))));
j0eval[2]=((IKabs((((py*x729))+((px*x728))+(((-1.0)*px*sj3)))))+(IKabs(((((-1.0)*py*x728))+((px*x729))+((py*sj3))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x731=((1.0)*pp);
IkReal x732=x715;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((0.181384)*cj3))+(((-1.0)*x731)));
evalcond[2]=x732;
evalcond[3]=x732;
evalcond[4]=((-0.03113175)+(((-1.0)*x731))+(((0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[4];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=1.0;
j2=0;
IkReal x733=pz*pz;
j0eval[0]=((((-1.0)*pp))+x733);
j0eval[1]=IKsign(((((2000.0)*x733))+(((-2000.0)*pp))));
j0eval[2]=305809.0;
j0eval[3]=sj3;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x734=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.36542025)+(((-1.0)*x734)));
evalcond[2]=((0.6045)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-1.0)*x734))+(((0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=1.0;
j2=0;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x736 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x736.valid){
continue;
}
IkReal x735=x736.value;
j0array[0]=((-1.0)*x735);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x735)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j0))))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x737=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((0.00265225)+(((-1.0)*x737)));
evalcond[2]=((0.0515)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-1.0)*x737))+(((0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=1.0;
j2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x739 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x739.valid){
continue;
}
IkReal x738=x739.value;
j0array[0]=((-1.0)*x738);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x738)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j0))))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x740=((553.0)*sj3);
CheckValue<IkReal> x741 = IKatan2WithCheck(IkReal((py*x740)),(px*x740),IKFAST_ATAN2_MAGTHRESH);
if(!x741.valid){
continue;
}
CheckValue<IkReal> x742=IKPowWithIntegerCheck(IKsign(((((2000.0)*(pz*pz)))+(((-2000.0)*pp)))),-1);
if(!x742.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x741.value)+(((1.5707963267949)*(x742.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x743=IKcos(j0);
IkReal x744=IKsin(j0);
IkReal x745=((1.0)*x744);
evalcond[0]=(((py*x743))+(((-1.0)*px*x745)));
evalcond[1]=((((-0.2765)*sj3))+(((-1.0)*px*x743))+(((-1.0)*py*x745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x746=((1.0)*pp);
IkReal x747=x715;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((0.181384)*cj3))+(((-1.0)*x746)));
evalcond[2]=x747;
evalcond[3]=x747;
evalcond[4]=((-0.03113175)+(((0.656)*pz))+(((-1.0)*x746)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[4];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x748=pz*pz;
j0eval[0]=(pp+(((-1.0)*x748)));
j0eval[1]=IKsign(((((-2000.0)*x748))+(((2000.0)*pp))));
j0eval[2]=305809.0;
j0eval[3]=sj3;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x749=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.36542025)+(((-1.0)*x749)));
evalcond[2]=((0.6045)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((0.656)*pz))+(((-1.0)*x749)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x751 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x751.valid){
continue;
}
IkReal x750=x751.value;
j0array[0]=((-1.0)*x750);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x750)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j0))))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x752=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((0.00265225)+(((-1.0)*x752)));
evalcond[2]=((0.0515)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((0.656)*pz))+(((-1.0)*x752)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x754 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x754.valid){
continue;
}
IkReal x753=x754.value;
j0array[0]=((-1.0)*x753);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x753)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j0))))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x755=((553.0)*sj3);
CheckValue<IkReal> x756=IKPowWithIntegerCheck(IKsign(((((2000.0)*pp))+(((-2000.0)*(pz*pz))))),-1);
if(!x756.valid){
continue;
}
CheckValue<IkReal> x757 = IKatan2WithCheck(IkReal((py*x755)),(px*x755),IKFAST_ATAN2_MAGTHRESH);
if(!x757.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x756.value)))+(x757.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x758=IKcos(j0);
IkReal x759=IKsin(j0);
IkReal x760=((1.0)*x759);
evalcond[0]=(((py*x758))+(((-1.0)*px*x760)));
evalcond[1]=((((-1.0)*py*x760))+(((0.2765)*sj3))+(((-1.0)*px*x758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x761=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.36542025)+(((-1.0)*x761)));
evalcond[2]=((0.6045)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-1.0)*x761))+(((0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x762=((1.0)*px);
j0eval[0]=((IKabs((((cj2*py))+(((-1.0)*sj2*x762)))))+(IKabs(((((-1.0)*cj2*x762))+(((-1.0)*py*sj2))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x763=((1.0)*py);
j0eval[0]=((IKabs(((((-1.0)*cj2*px))+(((-1.0)*sj2*x763)))))+(IKabs(((((-1.0)*cj2*x763))+((px*sj2))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x764=((1.0)*cj2);
CheckValue<IkReal> x766 = IKatan2WithCheck(IkReal(((((-1.0)*px*x764))+(((-1.0)*py*sj2)))),((((-1.0)*py*x764))+((px*sj2))),IKFAST_ATAN2_MAGTHRESH);
if(!x766.valid){
continue;
}
IkReal x765=x766.value;
j0array[0]=((-1.0)*x765);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x765)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x767=IKcos(j0);
IkReal x768=IKsin(j0);
IkReal x769=((1.0)*px);
IkReal x770=(py*x767);
IkReal x771=((1.0)*py*x768);
evalcond[0]=(x770+(((-1.0)*x768*x769)));
evalcond[1]=((((-1.0)*x767*x769))+(((-1.0)*x771)));
evalcond[2]=((((-1.0)*sj2*x771))+(((-1.0)*cj2*x768*x769))+((cj2*x770))+(((-1.0)*sj2*x767*x769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x772=((1.0)*px);
CheckValue<IkReal> x774 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x772))+((cj2*py)))),((((-1.0)*py*sj2))+(((-1.0)*cj2*x772))),IKFAST_ATAN2_MAGTHRESH);
if(!x774.valid){
continue;
}
IkReal x773=x774.value;
j0array[0]=((-1.0)*x773);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x773)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x775=IKcos(j0);
IkReal x776=IKsin(j0);
IkReal x777=((1.0)*x775);
IkReal x778=(px*x776);
IkReal x779=((1.0)*py*x776);
evalcond[0]=((((-1.0)*x778))+((py*x775)));
evalcond[1]=((((-1.0)*px*x777))+(((-1.0)*x779)));
evalcond[2]=((((-1.0)*py*sj2*x777))+(((-1.0)*cj2*px*x777))+((sj2*x778))+(((-1.0)*cj2*x779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x781 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x781.valid){
continue;
}
IkReal x780=x781.value;
j0array[0]=((-1.0)*x780);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x780)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x782=IKcos(j0);
IkReal x783=IKsin(j0);
IkReal x784=((1.0)*px);
IkReal x785=(cj2*x783);
IkReal x786=(py*x782);
IkReal x787=((1.0)*py*x783);
evalcond[0]=((((-1.0)*x787))+(((-1.0)*x782*x784)));
evalcond[1]=((((-1.0)*sj2*x782*x784))+(((-1.0)*x784*x785))+(((-1.0)*sj2*x787))+((cj2*x786)));
evalcond[2]=((((-1.0)*sj2*x786))+((px*sj2*x783))+(((-1.0)*cj2*x782*x784))+(((-1.0)*py*x785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x788=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((0.00265225)+(((-1.0)*x788)));
evalcond[2]=((0.0515)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-1.0)*x788))+(((0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x789=((1.0)*px);
j0eval[0]=((IKabs(((((-1.0)*cj2*x789))+(((-1.0)*py*sj2)))))+(IKabs((((cj2*py))+(((-1.0)*sj2*x789))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x790=((1.0)*py);
j0eval[0]=((IKabs(((((-1.0)*cj2*px))+(((-1.0)*sj2*x790)))))+(IKabs(((((-1.0)*cj2*x790))+((px*sj2))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x791=((1.0)*cj2);
CheckValue<IkReal> x793 = IKatan2WithCheck(IkReal(((((-1.0)*px*x791))+(((-1.0)*py*sj2)))),(((px*sj2))+(((-1.0)*py*x791))),IKFAST_ATAN2_MAGTHRESH);
if(!x793.valid){
continue;
}
IkReal x792=x793.value;
j0array[0]=((-1.0)*x792);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x792)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x794=IKcos(j0);
IkReal x795=IKsin(j0);
IkReal x796=((1.0)*px);
IkReal x797=(py*x794);
IkReal x798=((1.0)*py*x795);
evalcond[0]=((((-1.0)*x795*x796))+x797);
evalcond[1]=((((-1.0)*x794*x796))+(((-1.0)*x798)));
evalcond[2]=((((-1.0)*cj2*x795*x796))+(((-1.0)*sj2*x794*x796))+(((-1.0)*sj2*x798))+((cj2*x797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x799=((1.0)*px);
CheckValue<IkReal> x801 = IKatan2WithCheck(IkReal((((cj2*py))+(((-1.0)*sj2*x799)))),((((-1.0)*cj2*x799))+(((-1.0)*py*sj2))),IKFAST_ATAN2_MAGTHRESH);
if(!x801.valid){
continue;
}
IkReal x800=x801.value;
j0array[0]=((-1.0)*x800);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x800)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x802=IKcos(j0);
IkReal x803=IKsin(j0);
IkReal x804=((1.0)*x802);
IkReal x805=(px*x803);
IkReal x806=((1.0)*py*x803);
evalcond[0]=((((-1.0)*x805))+((py*x802)));
evalcond[1]=((((-1.0)*px*x804))+(((-1.0)*x806)));
evalcond[2]=(((sj2*x805))+(((-1.0)*py*sj2*x804))+(((-1.0)*cj2*x806))+(((-1.0)*cj2*px*x804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x808 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x808.valid){
continue;
}
IkReal x807=x808.value;
j0array[0]=((-1.0)*x807);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x807)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x809=IKcos(j0);
IkReal x810=IKsin(j0);
IkReal x811=((1.0)*px);
IkReal x812=(cj2*x810);
IkReal x813=(py*x809);
IkReal x814=((1.0)*py*x810);
evalcond[0]=((((-1.0)*x809*x811))+(((-1.0)*x814)));
evalcond[1]=((((-1.0)*x811*x812))+(((-1.0)*sj2*x809*x811))+(((-1.0)*sj2*x814))+((cj2*x813)));
evalcond[2]=((((-1.0)*cj2*x809*x811))+(((-1.0)*sj2*x813))+((px*sj2*x810))+(((-1.0)*py*x812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x815=((1.0)*pp);
IkReal x816=x715;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((-1.0)*x815))+(((0.181384)*cj3)));
evalcond[2]=x816;
evalcond[3]=x816;
evalcond[4]=((-0.03113175)+(((-1.0)*x815))+(((0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[4];
sj1=0;
cj1=1.0;
j1=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x817=pz*pz;
j0eval[0]=((((-1.0)*x817))+pp);
j0eval[1]=IKsign(((((-2000.0)*x817))+(((2000.0)*pp))));
j0eval[2]=305809.0;
j0eval[3]=sj3;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x818=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.36542025)+(((-1.0)*x818)));
evalcond[2]=((0.6045)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-1.0)*x818))+(((0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x820 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x820.valid){
continue;
}
IkReal x819=x820.value;
j0array[0]=((-1.0)*x819);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x819)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j0))))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x821=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((0.00265225)+(((-1.0)*x821)));
evalcond[2]=((0.0515)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-1.0)*x821))+(((0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x823 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x823.valid){
continue;
}
IkReal x822=x823.value;
j0array[0]=((-1.0)*x822);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x822)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j0))))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x824=IKPowWithIntegerCheck(IKsign(((((2000.0)*pp))+(((-2000.0)*(pz*pz))))),-1);
if(!x824.valid){
continue;
}
CheckValue<IkReal> x825 = IKatan2WithCheck(IkReal(((553.0)*px*sj3)),((-553.0)*py*sj3),IKFAST_ATAN2_MAGTHRESH);
if(!x825.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x824.value)))+(x825.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x826=IKcos(j0);
IkReal x827=IKsin(j0);
IkReal x828=((1.0)*px);
evalcond[0]=((((-1.0)*x826*x828))+(((-1.0)*py*x827)));
evalcond[1]=(((py*x826))+(((-1.0)*x827*x828))+(((0.2765)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x829=((1.0)*pp);
IkReal x830=x715;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((-1.0)*x829))+(((0.181384)*cj3)));
evalcond[2]=x830;
evalcond[3]=x830;
evalcond[4]=((-0.03113175)+(((-1.0)*x829))+(((0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[4];
sj1=0;
cj1=1.0;
j1=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x831=pz*pz;
j0eval[0]=((((-1.0)*pp))+x831);
j0eval[1]=IKsign(((((2000.0)*x831))+(((-2000.0)*pp))));
j0eval[2]=305809.0;
j0eval[3]=sj3;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x832=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.36542025)+(((-1.0)*x832)));
evalcond[2]=((0.6045)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-1.0)*x832))+(((0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x834 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x834.valid){
continue;
}
IkReal x833=x834.value;
j0array[0]=((-1.0)*x833);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x833)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j0))))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x835=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((0.00265225)+(((-1.0)*x835)));
evalcond[2]=((0.0515)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-1.0)*x835))+(((0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=1.0;
j1=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x837 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x837.valid){
continue;
}
IkReal x836=x837.value;
j0array[0]=((-1.0)*x836);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x836)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j0))))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x838=IKPowWithIntegerCheck(IKsign(((((2000.0)*(pz*pz)))+(((-2000.0)*pp)))),-1);
if(!x838.valid){
continue;
}
CheckValue<IkReal> x839 = IKatan2WithCheck(IkReal(((553.0)*px*sj3)),((-553.0)*py*sj3),IKFAST_ATAN2_MAGTHRESH);
if(!x839.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x838.value)))+(x839.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x840=IKcos(j0);
IkReal x841=IKsin(j0);
IkReal x842=((1.0)*px);
evalcond[0]=((((-1.0)*x840*x842))+(((-1.0)*py*x841)));
evalcond[1]=((((-0.2765)*sj3))+(((-1.0)*x841*x842))+((py*x840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x843=cj2*cj2;
IkReal x844=((553.0)*sj3);
IkReal x845=(cj2*sj2);
IkReal x846=((2000.0)*sj2);
CheckValue<IkReal> x847 = IKatan2WithCheck(IkReal((((py*x844*x845))+(((-1.0)*px*x844))+((px*x843*x844)))),((((-1.0)*py*x843*x844))+((py*x844))+((px*x844*x845))),IKFAST_ATAN2_MAGTHRESH);
if(!x847.valid){
continue;
}
CheckValue<IkReal> x848=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*x846))+((x846*(pz*pz))))),-1);
if(!x848.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x847.value)+(((1.5707963267949)*(x848.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x849=IKcos(j0);
IkReal x850=IKsin(j0);
IkReal x851=((1.0)*px);
IkReal x852=((0.2765)*sj3);
IkReal x853=(cj2*x850);
IkReal x854=(py*x849);
IkReal x855=((1.0)*py*x850);
evalcond[0]=(((sj2*x852))+(((-1.0)*x850*x851))+x854);
evalcond[1]=((((-1.0)*x855))+(((-1.0)*x849*x851))+(((-1.0)*cj2*x852)));
evalcond[2]=(((cj2*x854))+(((-1.0)*sj2*x849*x851))+(((-1.0)*sj2*x855))+(((-1.0)*x851*x853)));
evalcond[3]=(((px*sj2*x850))+(((-1.0)*x852))+(((-1.0)*py*x853))+(((-1.0)*sj2*x854))+(((-1.0)*cj2*x849*x851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x856=cj2*cj2;
IkReal x857=((2000.0)*cj2);
IkReal x858=((553.0)*sj3);
IkReal x859=(cj2*sj2);
CheckValue<IkReal> x860 = IKatan2WithCheck(IkReal(((((-1.0)*px*x858*x859))+((py*x856*x858)))),(((py*x858*x859))+((px*x856*x858))),IKFAST_ATAN2_MAGTHRESH);
if(!x860.valid){
continue;
}
CheckValue<IkReal> x861=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*x857))+((x857*(pz*pz))))),-1);
if(!x861.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x860.value)+(((1.5707963267949)*(x861.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x862=IKcos(j0);
IkReal x863=IKsin(j0);
IkReal x864=((1.0)*px);
IkReal x865=((0.2765)*sj3);
IkReal x866=(cj2*x863);
IkReal x867=(py*x862);
IkReal x868=((1.0)*py*x863);
evalcond[0]=(((sj2*x865))+x867+(((-1.0)*x863*x864)));
evalcond[1]=((((-1.0)*x868))+(((-1.0)*cj2*x865))+(((-1.0)*x862*x864)));
evalcond[2]=(((cj2*x867))+(((-1.0)*sj2*x868))+(((-1.0)*x864*x866))+(((-1.0)*sj2*x862*x864)));
evalcond[3]=((((-1.0)*x865))+(((-1.0)*sj2*x867))+(((-1.0)*py*x866))+(((-1.0)*cj2*x862*x864))+((px*sj2*x863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x869=((553.0)*sj3);
CheckValue<IkReal> x870=IKPowWithIntegerCheck(IKsign(((((2000.0)*pp))+(((-2000.0)*(pz*pz))))),-1);
if(!x870.valid){
continue;
}
CheckValue<IkReal> x871 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*py*x869))+((px*sj2*x869)))),((((-1.0)*cj2*px*x869))+(((-1.0)*py*sj2*x869))),IKFAST_ATAN2_MAGTHRESH);
if(!x871.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x870.value)))+(x871.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x872=IKcos(j0);
IkReal x873=IKsin(j0);
IkReal x874=((1.0)*px);
IkReal x875=((0.2765)*sj3);
IkReal x876=(cj2*x873);
IkReal x877=(py*x872);
IkReal x878=((1.0)*py*x873);
evalcond[0]=(((sj2*x875))+(((-1.0)*x873*x874))+x877);
evalcond[1]=((((-1.0)*x872*x874))+(((-1.0)*cj2*x875))+(((-1.0)*x878)));
evalcond[2]=(((cj2*x877))+(((-1.0)*sj2*x872*x874))+(((-1.0)*sj2*x878))+(((-1.0)*x874*x876)));
evalcond[3]=((((-1.0)*sj2*x877))+(((-1.0)*py*x876))+(((-1.0)*cj2*x872*x874))+((px*sj2*x873))+(((-1.0)*x875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x879=((0.2765)*cj3);
IkReal x880=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((0.181384)*cj3))+(((-1.0)*x880)));
evalcond[2]=((-0.328)+(((-1.0)*pz))+(((-1.0)*x879)));
evalcond[3]=((0.328)+pz+x879);
evalcond[4]=((-0.03113175)+(((-0.656)*pz))+(((-1.0)*x880)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x881=pz*pz;
IkReal x882=(px*sj3);
IkReal x883=(py*sj3);
j0eval[0]=((((-1.0)*x881))+pp);
j0eval[1]=IKsign(((((-2000.0)*x881))+(((2000.0)*pp))));
j0eval[2]=((IKabs((((cj2*x883))+((sj2*x882)))))+(IKabs((((cj2*x882))+(((-1.0)*sj2*x883))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x884=cj2*cj2;
IkReal x885=pz*pz;
IkReal x886=(px*sj3);
IkReal x887=(cj2*sj2);
IkReal x888=(py*sj3);
IkReal x889=(cj2*pp);
IkReal x890=(cj2*x885);
j0eval[0]=((((-1.0)*x890))+x889);
j0eval[1]=((IKabs(((((-1.0)*x887*x888))+((x884*x886)))))+(IKabs((((x886*x887))+((x884*x888))))));
j0eval[2]=IKsign(((((-2000.0)*x890))+(((2000.0)*x889))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x891=cj2*cj2;
IkReal x892=pz*pz;
IkReal x893=(pp*sj2);
IkReal x894=(px*sj3);
IkReal x895=(cj2*sj2);
IkReal x896=(py*sj3);
IkReal x897=(sj2*x892);
j0eval[0]=((((-1.0)*x897))+x893);
j0eval[1]=((IKabs((((x895*x896))+(((-1.0)*x891*x894))+x894)))+(IKabs((((x894*x895))+(((-1.0)*x896))+((x891*x896))))));
j0eval[2]=IKsign(((((-2000.0)*x897))+(((2000.0)*x893))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x898=((0.2765)*cj3);
IkReal x899=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((-1.0)*x899))+(((0.181384)*cj3)));
evalcond[2]=((-0.328)+(((-1.0)*x898))+(((-1.0)*pz)));
evalcond[3]=((0.328)+pz+x898);
evalcond[4]=((-0.03113175)+(((-1.0)*x899))+(((-0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[4];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x900=pz*pz;
j0eval[0]=(pp+(((-1.0)*x900)));
j0eval[1]=IKsign(((((-2000.0)*x900))+(((2000.0)*pp))));
j0eval[2]=305809.0;
j0eval[3]=sj3;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x901=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.36542025)+(((-1.0)*x901)));
evalcond[2]=((-0.6045)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-1.0)*x901))+(((-0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x903 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x903.valid){
continue;
}
IkReal x902=x903.value;
j0array[0]=((-1.0)*x902);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x902)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j0))))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x904=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((0.00265225)+(((-1.0)*x904)));
evalcond[2]=((-0.0515)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-1.0)*x904))+(((-0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x906 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x906.valid){
continue;
}
IkReal x905=x906.value;
j0array[0]=((-1.0)*x905);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x905)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j0))))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x907=((553.0)*sj3);
CheckValue<IkReal> x908 = IKatan2WithCheck(IkReal((py*x907)),(px*x907),IKFAST_ATAN2_MAGTHRESH);
if(!x908.valid){
continue;
}
CheckValue<IkReal> x909=IKPowWithIntegerCheck(IKsign(((((2000.0)*pp))+(((-2000.0)*(pz*pz))))),-1);
if(!x909.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x908.value)+(((1.5707963267949)*(x909.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x910=IKcos(j0);
IkReal x911=IKsin(j0);
IkReal x912=((1.0)*x911);
evalcond[0]=((((-1.0)*px*x912))+((py*x910)));
evalcond[1]=((((-1.0)*py*x912))+(((0.2765)*sj3))+(((-1.0)*px*x910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x913=((0.2765)*cj3);
IkReal x914=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((-1.0)*x914))+(((0.181384)*cj3)));
evalcond[2]=((-0.328)+(((-1.0)*x913))+(((-1.0)*pz)));
evalcond[3]=((0.328)+pz+x913);
evalcond[4]=((-0.03113175)+(((-1.0)*x914))+(((-0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[4];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x915=pz*pz;
j0eval[0]=((((-1.0)*pp))+x915);
j0eval[1]=IKsign(((((2000.0)*x915))+(((-2000.0)*pp))));
j0eval[2]=305809.0;
j0eval[3]=sj3;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x916=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.36542025)+(((-1.0)*x916)));
evalcond[2]=((-0.6045)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-1.0)*x916))+(((-0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x918 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x918.valid){
continue;
}
IkReal x917=x918.value;
j0array[0]=((-1.0)*x917);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x917)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j0))))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x919=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((0.00265225)+(((-1.0)*x919)));
evalcond[2]=((-0.0515)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-1.0)*x919))+(((-0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x921 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x921.valid){
continue;
}
IkReal x920=x921.value;
j0array[0]=((-1.0)*x920);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x920)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j0))))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x922=((553.0)*sj3);
CheckValue<IkReal> x923=IKPowWithIntegerCheck(IKsign(((((2000.0)*(pz*pz)))+(((-2000.0)*pp)))),-1);
if(!x923.valid){
continue;
}
CheckValue<IkReal> x924 = IKatan2WithCheck(IkReal((py*x922)),(px*x922),IKFAST_ATAN2_MAGTHRESH);
if(!x924.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x923.value)))+(x924.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x925=IKcos(j0);
IkReal x926=IKsin(j0);
IkReal x927=((1.0)*x926);
evalcond[0]=((((-1.0)*px*x927))+((py*x925)));
evalcond[1]=((((-0.2765)*sj3))+(((-1.0)*py*x927))+(((-1.0)*px*x925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x928=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.36542025)+(((-1.0)*x928)));
evalcond[2]=((-0.6045)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-1.0)*x928))+(((-0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(((((-1.0)*cj2*px))+((py*sj2)))))+(IKabs((((cj2*py))+((px*sj2))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs((((cj2*px))+(((-1.0)*py*sj2)))))+(IKabs((((cj2*py))+((px*sj2))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x930 = IKatan2WithCheck(IkReal((((cj2*px))+(((-1.0)*py*sj2)))),(((cj2*py))+((px*sj2))),IKFAST_ATAN2_MAGTHRESH);
if(!x930.valid){
continue;
}
IkReal x929=x930.value;
j0array[0]=((-1.0)*x929);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x929)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x931=IKcos(j0);
IkReal x932=IKsin(j0);
IkReal x933=((1.0)*px);
IkReal x934=(py*x931);
IkReal x935=(py*x932);
evalcond[0]=((((-1.0)*x932*x933))+x934);
evalcond[1]=((((-1.0)*x931*x933))+(((-1.0)*x935)));
evalcond[2]=((((-1.0)*cj2*x932*x933))+((cj2*x934))+((px*sj2*x931))+((sj2*x935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x937 = IKatan2WithCheck(IkReal((((cj2*py))+((px*sj2)))),((((-1.0)*cj2*px))+((py*sj2))),IKFAST_ATAN2_MAGTHRESH);
if(!x937.valid){
continue;
}
IkReal x936=x937.value;
j0array[0]=((-1.0)*x936);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x936)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x938=IKcos(j0);
IkReal x939=IKsin(j0);
IkReal x940=((1.0)*x938);
IkReal x941=(py*x939);
IkReal x942=(px*x939);
evalcond[0]=((((-1.0)*x942))+((py*x938)));
evalcond[1]=((((-1.0)*x941))+(((-1.0)*px*x940)));
evalcond[2]=(((sj2*x942))+((cj2*px*x938))+((cj2*x941))+(((-1.0)*py*sj2*x940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x944 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x944.valid){
continue;
}
IkReal x943=x944.value;
j0array[0]=((-1.0)*x943);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x943)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x945=IKcos(j0);
IkReal x946=IKsin(j0);
IkReal x947=((1.0)*px);
IkReal x948=(px*sj2);
IkReal x949=(cj2*x946);
IkReal x950=(py*x945);
IkReal x951=(py*x946);
evalcond[0]=((((-1.0)*x945*x947))+(((-1.0)*x951)));
evalcond[1]=(((x945*x948))+(((-1.0)*x947*x949))+((cj2*x950))+((sj2*x951)));
evalcond[2]=(((x946*x948))+((cj2*px*x945))+(((-1.0)*sj2*x950))+((py*x949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x952=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((0.00265225)+(((-1.0)*x952)));
evalcond[2]=((-0.0515)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-0.656)*pz))+(((-1.0)*x952)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((IKabs(((((-1.0)*cj2*px))+((py*sj2)))))+(IKabs((((cj2*py))+((px*sj2))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((IKabs((((cj2*px))+(((-1.0)*py*sj2)))))+(IKabs((((cj2*py))+((px*sj2))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x954 = IKatan2WithCheck(IkReal((((cj2*px))+(((-1.0)*py*sj2)))),(((cj2*py))+((px*sj2))),IKFAST_ATAN2_MAGTHRESH);
if(!x954.valid){
continue;
}
IkReal x953=x954.value;
j0array[0]=((-1.0)*x953);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x953)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x955=IKcos(j0);
IkReal x956=IKsin(j0);
IkReal x957=((1.0)*px);
IkReal x958=(py*x955);
IkReal x959=(py*x956);
evalcond[0]=((((-1.0)*x956*x957))+x958);
evalcond[1]=((((-1.0)*x959))+(((-1.0)*x955*x957)));
evalcond[2]=(((px*sj2*x955))+(((-1.0)*cj2*x956*x957))+((cj2*x958))+((sj2*x959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x961 = IKatan2WithCheck(IkReal((((cj2*py))+((px*sj2)))),((((-1.0)*cj2*px))+((py*sj2))),IKFAST_ATAN2_MAGTHRESH);
if(!x961.valid){
continue;
}
IkReal x960=x961.value;
j0array[0]=((-1.0)*x960);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x960)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x962=IKcos(j0);
IkReal x963=IKsin(j0);
IkReal x964=((1.0)*x962);
IkReal x965=(py*x963);
IkReal x966=(px*x963);
evalcond[0]=((((-1.0)*x966))+((py*x962)));
evalcond[1]=((((-1.0)*x965))+(((-1.0)*px*x964)));
evalcond[2]=(((cj2*px*x962))+(((-1.0)*py*sj2*x964))+((cj2*x965))+((sj2*x966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x968 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x968.valid){
continue;
}
IkReal x967=x968.value;
j0array[0]=((-1.0)*x967);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x967)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x969=IKcos(j0);
IkReal x970=IKsin(j0);
IkReal x971=((1.0)*px);
IkReal x972=(px*sj2);
IkReal x973=(cj2*x970);
IkReal x974=(py*x969);
IkReal x975=(py*x970);
evalcond[0]=((((-1.0)*x969*x971))+(((-1.0)*x975)));
evalcond[1]=(((x969*x972))+(((-1.0)*x971*x973))+((cj2*x974))+((sj2*x975)));
evalcond[2]=(((cj2*px*x969))+((py*x973))+((x970*x972))+(((-1.0)*sj2*x974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x976=((0.2765)*cj3);
IkReal x977=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((0.181384)*cj3))+(((-1.0)*x977)));
evalcond[2]=((-0.328)+(((-1.0)*pz))+(((-1.0)*x976)));
evalcond[3]=((0.328)+pz+x976);
evalcond[4]=((-0.03113175)+(((-0.656)*pz))+(((-1.0)*x977)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[4];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x978=pz*pz;
j0eval[0]=((((-1.0)*x978))+pp);
j0eval[1]=IKsign(((((2000.0)*pp))+(((-2000.0)*x978))));
j0eval[2]=305809.0;
j0eval[3]=sj3;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x979=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.36542025)+(((-1.0)*x979)));
evalcond[2]=((-0.6045)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-0.656)*pz))+(((-1.0)*x979)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x981 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x981.valid){
continue;
}
IkReal x980=x981.value;
j0array[0]=((-1.0)*x980);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x980)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j0))))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x982=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((0.00265225)+(((-1.0)*x982)));
evalcond[2]=((-0.0515)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-1.0)*x982))+(((-0.656)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x984 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x984.valid){
continue;
}
IkReal x983=x984.value;
j0array[0]=((-1.0)*x983);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x983)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j0))))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x985=IKPowWithIntegerCheck(IKsign(((((2000.0)*pp))+(((-2000.0)*(pz*pz))))),-1);
if(!x985.valid){
continue;
}
CheckValue<IkReal> x986 = IKatan2WithCheck(IkReal(((553.0)*px*sj3)),((-553.0)*py*sj3),IKFAST_ATAN2_MAGTHRESH);
if(!x986.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x985.value)))+(x986.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x987=IKcos(j0);
IkReal x988=IKsin(j0);
IkReal x989=((1.0)*px);
evalcond[0]=((((-1.0)*py*x988))+(((-1.0)*x987*x989)));
evalcond[1]=((((-1.0)*x988*x989))+(((0.2765)*sj3))+((py*x987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x990=((0.2765)*cj3);
IkReal x991=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((0.181384)*cj3))+(((-1.0)*x991)));
evalcond[2]=((-0.328)+(((-1.0)*pz))+(((-1.0)*x990)));
evalcond[3]=((0.328)+pz+x990);
evalcond[4]=((-0.03113175)+(((-0.656)*pz))+(((-1.0)*x991)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[4];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x992=pz*pz;
j0eval[0]=((((-1.0)*pp))+x992);
j0eval[1]=IKsign(((((2000.0)*x992))+(((-2000.0)*pp))));
j0eval[2]=305809.0;
j0eval[3]=sj3;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x993=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((0.36542025)+(((-1.0)*x993)));
evalcond[2]=((-0.6045)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-0.656)*pz))+(((-1.0)*x993)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x995 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x995.valid){
continue;
}
IkReal x994=x995.value;
j0array[0]=((-1.0)*x994);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x994)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j0))))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x996=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((0.00265225)+(((-1.0)*x996)));
evalcond[2]=((-0.0515)+(((-1.0)*pz)));
evalcond[3]=((-0.03113175)+(((-0.656)*pz))+(((-1.0)*x996)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x998 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x998.valid){
continue;
}
IkReal x997=x998.value;
j0array[0]=((-1.0)*x997);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x997)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKsin(j0))))+(((-1.0)*px*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x999=IKPowWithIntegerCheck(IKsign(((((2000.0)*(pz*pz)))+(((-2000.0)*pp)))),-1);
if(!x999.valid){
continue;
}
CheckValue<IkReal> x1000 = IKatan2WithCheck(IkReal(((553.0)*px*sj3)),((-553.0)*py*sj3),IKFAST_ATAN2_MAGTHRESH);
if(!x1000.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x999.value)))+(x1000.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1001=IKcos(j0);
IkReal x1002=IKsin(j0);
IkReal x1003=((1.0)*px);
evalcond[0]=((((-1.0)*py*x1002))+(((-1.0)*x1001*x1003)));
evalcond[1]=((((-0.2765)*sj3))+((py*x1001))+(((-1.0)*x1002*x1003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1004=cj2*cj2;
IkReal x1005=((553.0)*sj3);
IkReal x1006=(cj2*sj2);
IkReal x1007=((2000.0)*sj2);
CheckValue<IkReal> x1008=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1007*(pz*pz)))+((pp*x1007)))),-1);
if(!x1008.valid){
continue;
}
CheckValue<IkReal> x1009 = IKatan2WithCheck(IkReal((((px*x1005))+((py*x1005*x1006))+(((-1.0)*px*x1004*x1005)))),(((px*x1005*x1006))+(((-1.0)*py*x1005))+((py*x1004*x1005))),IKFAST_ATAN2_MAGTHRESH);
if(!x1009.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1008.value)))+(x1009.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1010=IKcos(j0);
IkReal x1011=IKsin(j0);
IkReal x1012=((1.0)*px);
IkReal x1013=((0.2765)*sj3);
IkReal x1014=(px*sj2);
IkReal x1015=(cj2*x1011);
IkReal x1016=(py*x1010);
IkReal x1017=(py*x1011);
evalcond[0]=((((-1.0)*x1011*x1012))+x1016+((sj2*x1013)));
evalcond[1]=((((-1.0)*x1010*x1012))+((cj2*x1013))+(((-1.0)*x1017)));
evalcond[2]=((((-1.0)*x1012*x1015))+((cj2*x1016))+((sj2*x1017))+((x1010*x1014)));
evalcond[3]=((((-1.0)*sj2*x1016))+(((-1.0)*x1013))+((py*x1015))+((cj2*px*x1010))+((x1011*x1014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1018=cj2*cj2;
IkReal x1019=((2000.0)*cj2);
IkReal x1020=((553.0)*sj3*x1018);
IkReal x1021=((553.0)*cj2*sj2*sj3);
CheckValue<IkReal> x1022 = IKatan2WithCheck(IkReal((((py*x1020))+((px*x1021)))),((((-1.0)*py*x1021))+((px*x1020))),IKFAST_ATAN2_MAGTHRESH);
if(!x1022.valid){
continue;
}
CheckValue<IkReal> x1023=IKPowWithIntegerCheck(IKsign((((pp*x1019))+(((-1.0)*x1019*(pz*pz))))),-1);
if(!x1023.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1022.value)+(((1.5707963267949)*(x1023.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1024=IKcos(j0);
IkReal x1025=IKsin(j0);
IkReal x1026=((1.0)*px);
IkReal x1027=((0.2765)*sj3);
IkReal x1028=(px*sj2);
IkReal x1029=(cj2*x1025);
IkReal x1030=(py*x1024);
IkReal x1031=(py*x1025);
evalcond[0]=(x1030+(((-1.0)*x1025*x1026))+((sj2*x1027)));
evalcond[1]=(((cj2*x1027))+(((-1.0)*x1031))+(((-1.0)*x1024*x1026)));
evalcond[2]=(((cj2*x1030))+(((-1.0)*x1026*x1029))+((sj2*x1031))+((x1024*x1028)));
evalcond[3]=(((cj2*px*x1024))+((py*x1029))+(((-1.0)*x1027))+((x1025*x1028))+(((-1.0)*sj2*x1030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1032=((553.0)*sj3);
CheckValue<IkReal> x1033 = IKatan2WithCheck(IkReal((((cj2*py*x1032))+((px*sj2*x1032)))),((((-1.0)*py*sj2*x1032))+((cj2*px*x1032))),IKFAST_ATAN2_MAGTHRESH);
if(!x1033.valid){
continue;
}
CheckValue<IkReal> x1034=IKPowWithIntegerCheck(IKsign(((((2000.0)*pp))+(((-2000.0)*(pz*pz))))),-1);
if(!x1034.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1033.value)+(((1.5707963267949)*(x1034.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1035=IKcos(j0);
IkReal x1036=IKsin(j0);
IkReal x1037=((1.0)*px);
IkReal x1038=((0.2765)*sj3);
IkReal x1039=(px*sj2);
IkReal x1040=(cj2*x1036);
IkReal x1041=(py*x1035);
IkReal x1042=(py*x1036);
evalcond[0]=(x1041+(((-1.0)*x1036*x1037))+((sj2*x1038)));
evalcond[1]=(((cj2*x1038))+(((-1.0)*x1035*x1037))+(((-1.0)*x1042)));
evalcond[2]=(((sj2*x1042))+((cj2*x1041))+(((-1.0)*x1037*x1040))+((x1035*x1039)));
evalcond[3]=(((x1036*x1039))+(((-1.0)*x1038))+(((-1.0)*sj2*x1041))+((py*x1040))+((cj2*px*x1035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1043=(px*sj1);
IkReal x1044=((553.0)*cj3);
IkReal x1045=(py*sj1);
IkReal x1046=((553.0)*sj3);
IkReal x1047=(cj1*cj2);
CheckValue<IkReal> x1048=IKPowWithIntegerCheck(IKsign(((((2000.0)*pp))+(((-2000.0)*(pz*pz))))),-1);
if(!x1048.valid){
continue;
}
CheckValue<IkReal> x1049 = IKatan2WithCheck(IkReal(((((-656.0)*x1045))+(((-1.0)*x1044*x1045))+((px*sj2*x1046))+(((-1.0)*py*x1046*x1047)))),((((-656.0)*x1043))+(((-1.0)*py*sj2*x1046))+(((-1.0)*px*x1046*x1047))+(((-1.0)*x1043*x1044))),IKFAST_ATAN2_MAGTHRESH);
if(!x1049.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1048.value)))+(x1049.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1050=IKcos(j0);
IkReal x1051=IKsin(j0);
IkReal x1052=((0.2765)*cj3);
IkReal x1053=((1.0)*px);
IkReal x1054=(cj1*pz);
IkReal x1055=((0.2765)*sj3);
IkReal x1056=(cj1*cj2);
IkReal x1057=(sj2*x1051);
IkReal x1058=((1.0)*cj1*py);
IkReal x1059=(cj2*x1051);
IkReal x1060=(py*x1050);
IkReal x1061=((1.0)*pz*sj1);
IkReal x1062=(py*sj1*x1051);
IkReal x1063=(px*sj1*x1050);
evalcond[0]=(x1060+((sj2*x1055))+(((-1.0)*x1051*x1053)));
evalcond[1]=((0.328)+x1052+x1063+x1062+(((-1.0)*x1054)));
evalcond[2]=((-0.03113175)+(((0.656)*x1054))+(((-1.0)*pp))+(((-0.656)*x1062))+(((-0.656)*x1063)));
evalcond[3]=((((-1.0)*py*x1051))+(((-0.328)*sj1))+(((-1.0)*x1055*x1056))+(((-1.0)*sj1*x1052))+(((-1.0)*x1050*x1053)));
evalcond[4]=((((-1.0)*cj1*sj2*x1050*x1053))+((cj2*x1060))+(((-1.0)*sj2*x1061))+(((-1.0)*x1057*x1058))+(((-1.0)*x1053*x1059)));
evalcond[5]=((((-1.0)*x1055))+((px*x1057))+(((-1.0)*sj2*x1060))+(((-1.0)*x1050*x1053*x1056))+(((-1.0)*py*x1051*x1056))+(((-1.0)*cj2*x1061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1064=((82000.0)*sj1);
IkReal x1065=((125000.0)*pp);
IkReal x1066=((82000.0)*cj1*pz);
IkReal x1067=((22673.0)*sj1*sj2*sj3);
CheckValue<IkReal> x1068 = IKatan2WithCheck(IkReal((((py*x1066))+(((-3891.46875)*py))+(((-1.0)*py*x1065))+((px*x1067)))),((((-1.0)*px*x1065))+(((-3891.46875)*px))+(((-1.0)*py*x1067))+((px*x1066))),IKFAST_ATAN2_MAGTHRESH);
if(!x1068.valid){
continue;
}
CheckValue<IkReal> x1069=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1064*(pz*pz)))+((pp*x1064)))),-1);
if(!x1069.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1068.value)+(((1.5707963267949)*(x1069.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1070=IKcos(j0);
IkReal x1071=IKsin(j0);
IkReal x1072=((0.2765)*cj3);
IkReal x1073=((1.0)*px);
IkReal x1074=(cj1*pz);
IkReal x1075=((0.2765)*sj3);
IkReal x1076=(cj1*cj2);
IkReal x1077=(sj2*x1071);
IkReal x1078=((1.0)*cj1*py);
IkReal x1079=(cj2*x1071);
IkReal x1080=(py*x1070);
IkReal x1081=((1.0)*pz*sj1);
IkReal x1082=(py*sj1*x1071);
IkReal x1083=(px*sj1*x1070);
evalcond[0]=(x1080+(((-1.0)*x1071*x1073))+((sj2*x1075)));
evalcond[1]=((0.328)+x1072+x1083+x1082+(((-1.0)*x1074)));
evalcond[2]=((-0.03113175)+(((-1.0)*pp))+(((0.656)*x1074))+(((-0.656)*x1082))+(((-0.656)*x1083)));
evalcond[3]=((((-1.0)*x1075*x1076))+(((-0.328)*sj1))+(((-1.0)*py*x1071))+(((-1.0)*x1070*x1073))+(((-1.0)*sj1*x1072)));
evalcond[4]=((((-1.0)*sj2*x1081))+(((-1.0)*x1077*x1078))+(((-1.0)*x1073*x1079))+(((-1.0)*cj1*sj2*x1070*x1073))+((cj2*x1080)));
evalcond[5]=((((-1.0)*sj2*x1080))+((px*x1077))+(((-1.0)*x1070*x1073*x1076))+(((-1.0)*x1075))+(((-1.0)*cj2*x1081))+(((-1.0)*py*x1071*x1076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1084=((553.0)*py);
IkReal x1085=((2000.0)*sj1);
IkReal x1086=((553.0)*px);
IkReal x1087=((2000.0)*cj1*pz);
IkReal x1088=(sj1*sj2*sj3);
CheckValue<IkReal> x1089 = IKatan2WithCheck(IkReal((((py*x1087))+(((-656.0)*py))+((x1086*x1088))+(((-1.0)*cj3*x1084)))),(((px*x1087))+(((-656.0)*px))+(((-1.0)*x1084*x1088))+(((-1.0)*cj3*x1086))),IKFAST_ATAN2_MAGTHRESH);
if(!x1089.valid){
continue;
}
CheckValue<IkReal> x1090=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1085*(pz*pz)))+((pp*x1085)))),-1);
if(!x1090.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1089.value)+(((1.5707963267949)*(x1090.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1091=IKcos(j0);
IkReal x1092=IKsin(j0);
IkReal x1093=((0.2765)*cj3);
IkReal x1094=((1.0)*px);
IkReal x1095=(cj1*pz);
IkReal x1096=((0.2765)*sj3);
IkReal x1097=(cj1*cj2);
IkReal x1098=(sj2*x1092);
IkReal x1099=((1.0)*cj1*py);
IkReal x1100=(cj2*x1092);
IkReal x1101=(py*x1091);
IkReal x1102=((1.0)*pz*sj1);
IkReal x1103=(py*sj1*x1092);
IkReal x1104=(px*sj1*x1091);
evalcond[0]=(x1101+(((-1.0)*x1092*x1094))+((sj2*x1096)));
evalcond[1]=((0.328)+x1104+x1103+x1093+(((-1.0)*x1095)));
evalcond[2]=((-0.03113175)+(((0.656)*x1095))+(((-1.0)*pp))+(((-0.656)*x1104))+(((-0.656)*x1103)));
evalcond[3]=((((-1.0)*x1091*x1094))+(((-0.328)*sj1))+(((-1.0)*x1096*x1097))+(((-1.0)*sj1*x1093))+(((-1.0)*py*x1092)));
evalcond[4]=((((-1.0)*cj1*sj2*x1091*x1094))+(((-1.0)*sj2*x1102))+(((-1.0)*x1094*x1100))+((cj2*x1101))+(((-1.0)*x1098*x1099)));
evalcond[5]=((((-1.0)*sj2*x1101))+(((-1.0)*x1091*x1094*x1097))+(((-1.0)*x1096))+(((-1.0)*py*x1092*x1097))+(((-1.0)*cj2*x1102))+((px*x1098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1107 = IKatan2WithCheck(IkReal(py),((-1.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x1107.valid){
continue;
}
IkReal x1105=((1.0)*(x1107.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x1108=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x1108.valid){
continue;
}
if( (((0.2765)*sj2*sj3*(x1108.value))) < -1-IKFAST_SINCOS_THRESH || (((0.2765)*sj2*sj3*(x1108.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1106=IKasin(((0.2765)*sj2*sj3*(x1108.value)));
j0array[0]=((((-1.0)*x1106))+(((-1.0)*x1105)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x1106+(((-1.0)*x1105)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1eval[3];
IkReal x1109=(py*sj0);
IkReal x1110=((2000.0)*pz);
IkReal x1111=(cj0*px);
IkReal x1112=((553.0)*cj3);
IkReal x1113=(cj2*sj3);
IkReal x1114=((1.0)*cj3);
j1eval[0]=((((-1.18625678119349)*x1111))+(((-1.18625678119349)*x1109))+(((-1.0)*x1109*x1114))+((pz*x1113))+(((-1.0)*x1111*x1114)));
j1eval[1]=IKsign(((((-656.0)*x1111))+(((-656.0)*x1109))+(((-1.0)*x1109*x1112))+(((553.0)*pz*x1113))+(((-1.0)*x1111*x1112))));
j1eval[2]=((IKabs(((215.168)+(((152.9045)*(cj3*cj3)))+(((-1.0)*pz*x1110))+(((362.768)*cj3)))))+(IKabs(((((-1.0)*x1109*x1110))+(((152.9045)*cj3*x1113))+(((181.384)*x1113))+(((-1.0)*x1110*x1111))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x1115=cj2*cj2;
IkReal x1116=cj3*cj3;
IkReal x1117=(py*sj0);
IkReal x1118=((1106000.0)*cj3);
IkReal x1119=(cj0*px);
IkReal x1120=((305809.0)*x1116);
IkReal x1121=((1106000.0)*cj2*sj3);
j1eval[0]=((1.40720515092754)+x1115+x1116+(((2.37251356238698)*cj3))+(((-1.0)*x1115*x1116)));
j1eval[1]=IKsign(((430336.0)+x1120+(((725536.0)*cj3))+(((305809.0)*x1115))+(((-1.0)*x1115*x1120))));
j1eval[2]=((IKabs(((((-1.0)*pz*x1121))+(((-1312000.0)*x1119))+(((-1312000.0)*x1117))+(((-1.0)*x1118*x1119))+(((-1.0)*x1117*x1118)))))+(IKabs(((((-1.0)*x1117*x1121))+((pz*x1118))+(((-1.0)*x1119*x1121))+(((1312000.0)*pz))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1122=(cj0*px);
IkReal x1123=(cj3*pz);
IkReal x1124=(py*sj0);
IkReal x1125=(cj2*sj3);
IkReal x1126=((553.0)*x1125);
j1eval[0]=(x1123+(((1.18625678119349)*pz))+((x1124*x1125))+((x1122*x1125)));
j1eval[1]=IKsign(((((553.0)*x1123))+((x1124*x1126))+(((656.0)*pz))+((x1122*x1126))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1127=((0.2765)*sj3);
IkReal x1128=(cj0*py);
IkReal x1129=(px*sj0);
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959))))));
evalcond[1]=((0.18403625)+(((0.181384)*cj3))+(((-1.0)*pp)));
evalcond[2]=(x1128+x1127+(((-1.0)*x1129)));
evalcond[3]=(x1129+(((-1.0)*x1128))+(((-1.0)*x1127)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1130=((-1.0)*py);
pz=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1130);
rxp0_1=(px*r20);
rxp1_0=(r21*x1130);
rxp1_1=(px*r21);
rxp2_0=(r22*x1130);
rxp2_1=(px*r22);
j1eval[0]=((-1.18625678119349)+(((-1.0)*cj3)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1131=((-1.0)*py);
pz=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1131);
rxp0_1=(px*r20);
rxp1_0=(r21*x1131);
rxp1_1=(px*r21);
rxp2_0=(r22*x1131);
rxp2_1=(px*r22);
j1eval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1133 = ((px*px)+(py*py));
if(IKabs(x1133)==0){
continue;
}
IkReal x1132=pow(x1133,-0.5);
CheckValue<IkReal> x1134 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1134.valid){
continue;
}
IkReal gconst0=((-1.0)*(x1134.value));
IkReal gconst1=((-1.0)*px*x1132);
IkReal gconst2=(py*x1132);
IkReal x1135=((0.2765)*sj3);
IkReal x1136=(gconst2*py);
IkReal x1137=(gconst1*px);
CheckValue<IkReal> x1138 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1138.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1138.value)+j0)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((-1.0)*(px*px)))+(((0.181384)*cj3))+(((-1.0)*(py*py))));
evalcond[2]=(x1136+x1135+(((-1.0)*x1137)));
evalcond[3]=(x1137+(((-1.0)*x1135))+(((-1.0)*x1136)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1139=((-1.0)*py);
CheckValue<IkReal> x1143 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1143.valid){
continue;
}
IkReal x1140=((-1.0)*(x1143.value));
IkReal x1141=((px*px)+(py*py));
IkReal x1142=x1132;
pz=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
pp=x1141;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1139);
rxp0_1=(px*r20);
rxp1_0=(r21*x1139);
rxp1_1=(px*r21);
rxp2_0=(r22*x1139);
rxp2_1=(px*r22);
sj0=gconst1;
cj0=gconst2;
j0=x1140;
IkReal gconst0=x1140;
IkReal gconst1=((-1.0)*px*x1142);
IkReal gconst2=(py*x1142);
j1eval[0]=((-1.18625678119349)+(((-1.0)*cj3)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1144=((-1.0)*py);
CheckValue<IkReal> x1148 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1148.valid){
continue;
}
IkReal x1145=((-1.0)*(x1148.value));
IkReal x1146=((px*px)+(py*py));
IkReal x1147=x1132;
pz=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
pp=x1146;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1144);
rxp0_1=(px*r20);
rxp1_0=(r21*x1144);
rxp1_1=(px*r21);
rxp2_0=(r22*x1144);
rxp2_1=(px*r22);
sj0=gconst1;
cj0=gconst2;
j0=x1145;
IkReal gconst0=x1145;
IkReal gconst1=((-1.0)*px*x1147);
IkReal gconst2=(py*x1147);
j1eval[0]=0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1150=IKPowWithIntegerCheck((((gconst2*px))+((gconst1*py))),-1);
if(!x1150.valid){
continue;
}
IkReal x1149=x1150.value;
sj1array[0]=((((-0.328)*x1149))+(((-0.2765)*cj3*x1149)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1151=IKcos(j1);
IkReal x1152=IKsin(j1);
IkReal x1153=px*px;
IkReal x1154=py*py;
IkReal x1155=(gconst1*py);
IkReal x1156=((1.0)*gconst2*px);
IkReal x1157=((1.52439024390244)*x1151);
IkReal x1158=((0.656)*x1152);
evalcond[0]=((((-1.0)*x1151*x1156))+(((-1.0)*x1151*x1155)));
evalcond[1]=((((-1.0)*x1156))+(((-0.2765)*cj3*x1152))+(((-0.328)*x1152))+(((-1.0)*x1155)));
evalcond[2]=(((x1153*x1157))+(((0.0474569359756098)*x1151))+((x1154*x1157)));
evalcond[3]=((-0.03113175)+(((-1.0)*x1155*x1158))+(((-1.0)*x1153))+(((-1.0)*x1154))+(((-1.0)*gconst2*px*x1158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1160=IKPowWithIntegerCheck(((-0.328)+(((-0.2765)*cj3))),-1);
if(!x1160.valid){
continue;
}
IkReal x1159=x1160.value;
sj1array[0]=(((gconst1*py*x1159))+((gconst2*px*x1159)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1161=IKcos(j1);
IkReal x1162=IKsin(j1);
IkReal x1163=px*px;
IkReal x1164=py*py;
IkReal x1165=(gconst2*px);
IkReal x1166=((1.0)*x1161);
IkReal x1167=((1.52439024390244)*x1161);
IkReal x1168=(gconst1*py*x1162);
evalcond[0]=((((-1.0)*gconst1*py*x1166))+(((-1.0)*x1165*x1166)));
evalcond[1]=((0.328)+x1168+((x1162*x1165))+(((0.2765)*cj3)));
evalcond[2]=(((x1164*x1167))+(((0.0474569359756098)*x1161))+((x1163*x1167)));
evalcond[3]=((-0.03113175)+(((-0.656)*x1168))+(((-0.656)*x1162*x1165))+(((-1.0)*x1163))+(((-1.0)*x1164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1170 = ((px*px)+(py*py));
if(IKabs(x1170)==0){
continue;
}
IkReal x1169=pow(x1170,-0.5);
CheckValue<IkReal> x1171 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1171.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x1171.value))));
IkReal gconst4=((1.0)*px*x1169);
IkReal gconst5=((-1.0)*py*x1169);
IkReal x1172=((0.2765)*sj3);
IkReal x1173=(gconst4*px);
IkReal x1174=(gconst5*py);
CheckValue<IkReal> x1175 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1175.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1175.value)+j0)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((-1.0)*(px*px)))+(((0.181384)*cj3))+(((-1.0)*(py*py))));
evalcond[2]=(x1174+x1172+(((-1.0)*x1173)));
evalcond[3]=(x1173+(((-1.0)*x1172))+(((-1.0)*x1174)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
CheckValue<IkReal> x1180 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1180.valid){
continue;
}
IkReal x1176=((1.0)*(x1180.value));
IkReal x1177=((-1.0)*py);
IkReal x1178=((px*px)+(py*py));
IkReal x1179=x1169;
pz=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
pp=x1178;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1177);
rxp0_1=(px*r20);
rxp1_0=(r21*x1177);
rxp1_1=(px*r21);
rxp2_0=(r22*x1177);
rxp2_1=(px*r22);
sj0=gconst4;
cj0=gconst5;
j0=((3.14159265)+(((-1.0)*x1176)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x1176)));
IkReal gconst4=((1.0)*px*x1179);
IkReal gconst5=(x1177*x1179);
j1eval[0]=((-1.18625678119349)+(((-1.0)*cj3)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
CheckValue<IkReal> x1185 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1185.valid){
continue;
}
IkReal x1181=((1.0)*(x1185.value));
IkReal x1182=((-1.0)*py);
IkReal x1183=((px*px)+(py*py));
IkReal x1184=x1169;
pz=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
pp=x1183;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1182);
rxp0_1=(px*r20);
rxp1_0=(r21*x1182);
rxp1_1=(px*r21);
rxp2_0=(r22*x1182);
rxp2_1=(px*r22);
sj0=gconst4;
cj0=gconst5;
j0=((3.14159265)+(((-1.0)*x1181)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x1181)));
IkReal gconst4=((1.0)*px*x1184);
IkReal gconst5=(x1182*x1184);
j1eval[0]=0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1187=IKPowWithIntegerCheck((((gconst5*px))+((gconst4*py))),-1);
if(!x1187.valid){
continue;
}
IkReal x1186=x1187.value;
sj1array[0]=((((-0.328)*x1186))+(((-0.2765)*cj3*x1186)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1188=IKcos(j1);
IkReal x1189=IKsin(j1);
IkReal x1190=px*px;
IkReal x1191=py*py;
IkReal x1192=(gconst4*py);
IkReal x1193=(gconst5*px);
IkReal x1194=((0.656)*x1189);
IkReal x1195=((1.52439024390244)*x1188);
IkReal x1196=((1.0)*x1188);
evalcond[0]=((((-1.0)*x1193*x1196))+(((-1.0)*x1192*x1196)));
evalcond[1]=((((-0.328)*x1189))+(((-0.2765)*cj3*x1189))+(((-1.0)*x1193))+(((-1.0)*x1192)));
evalcond[2]=((((0.0474569359756098)*x1188))+((x1191*x1195))+((x1190*x1195)));
evalcond[3]=((-0.03113175)+(((-1.0)*x1193*x1194))+(((-1.0)*x1192*x1194))+(((-1.0)*x1191))+(((-1.0)*x1190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1198=IKPowWithIntegerCheck(((-0.328)+(((-0.2765)*cj3))),-1);
if(!x1198.valid){
continue;
}
IkReal x1197=x1198.value;
sj1array[0]=(((gconst4*py*x1197))+((gconst5*px*x1197)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1199=IKcos(j1);
IkReal x1200=IKsin(j1);
IkReal x1201=px*px;
IkReal x1202=py*py;
IkReal x1203=(gconst5*px);
IkReal x1204=((1.52439024390244)*x1199);
IkReal x1205=((1.0)*x1199);
IkReal x1206=(gconst4*py*x1200);
evalcond[0]=((((-1.0)*x1203*x1205))+(((-1.0)*gconst4*py*x1205)));
evalcond[1]=((0.328)+x1206+(((0.2765)*cj3))+((x1200*x1203)));
evalcond[2]=(((x1202*x1204))+(((0.0474569359756098)*x1199))+((x1201*x1204)));
evalcond[3]=((-0.03113175)+(((-1.0)*x1202))+(((-1.0)*x1201))+(((-0.656)*x1200*x1203))+(((-0.656)*x1206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1208=IKPowWithIntegerCheck((((cj0*px))+((py*sj0))),-1);
if(!x1208.valid){
continue;
}
IkReal x1207=x1208.value;
sj1array[0]=((((-0.2765)*cj3*x1207))+(((-0.328)*x1207)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1209=IKcos(j1);
IkReal x1210=IKsin(j1);
IkReal x1211=px*px;
IkReal x1212=py*py;
IkReal x1213=(cj0*px);
IkReal x1214=(py*sj0);
IkReal x1215=((0.656)*x1210);
IkReal x1216=((1.52439024390244)*x1209);
IkReal x1217=((1.0)*x1209);
evalcond[0]=((((-1.0)*x1214*x1217))+(((-1.0)*x1213*x1217)));
evalcond[1]=((((-0.328)*x1210))+(((-0.2765)*cj3*x1210))+(((-1.0)*x1214))+(((-1.0)*x1213)));
evalcond[2]=(((x1212*x1216))+(((0.0474569359756098)*x1209))+((x1211*x1216)));
evalcond[3]=((-0.03113175)+(((-1.0)*x1214*x1215))+(((-1.0)*x1213*x1215))+(((-1.0)*x1212))+(((-1.0)*x1211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1219=IKPowWithIntegerCheck(((-0.328)+(((-0.2765)*cj3))),-1);
if(!x1219.valid){
continue;
}
IkReal x1218=x1219.value;
sj1array[0]=(((cj0*px*x1218))+((py*sj0*x1218)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1220=IKcos(j1);
IkReal x1221=IKsin(j1);
IkReal x1222=px*px;
IkReal x1223=py*py;
IkReal x1224=(py*sj0);
IkReal x1225=(cj0*px);
IkReal x1226=((1.0)*x1220);
IkReal x1227=((0.656)*x1221);
IkReal x1228=((1.52439024390244)*x1220);
evalcond[0]=((((-1.0)*x1224*x1226))+(((-1.0)*x1225*x1226)));
evalcond[1]=((0.328)+(((0.2765)*cj3))+((x1221*x1225))+((x1221*x1224)));
evalcond[2]=((((0.0474569359756098)*x1220))+((x1223*x1228))+((x1222*x1228)));
evalcond[3]=((-0.03113175)+(((-1.0)*x1224*x1227))+(((-1.0)*x1222))+(((-1.0)*x1223))+(((-1.0)*x1225*x1227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1229=((((-0.2765)*sj3))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
evalcond[1]=((0.18403625)+(((0.181384)*cj3))+(((-1.0)*pp)));
evalcond[2]=x1229;
evalcond[3]=x1229;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1230=((-1.0)*py);
pz=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1230);
rxp0_1=(px*r20);
rxp1_0=(r21*x1230);
rxp1_1=(px*r21);
rxp2_0=(r22*x1230);
rxp2_1=(px*r22);
j1eval[0]=((-1.18625678119349)+(((-1.0)*cj3)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1231=((-1.0)*py);
pz=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
pp=((px*px)+(py*py));
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1231);
rxp0_1=(px*r20);
rxp1_0=(r21*x1231);
rxp1_1=(px*r21);
rxp2_0=(r22*x1231);
rxp2_1=(px*r22);
j1eval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x1233 = ((px*px)+(py*py));
if(IKabs(x1233)==0){
continue;
}
IkReal x1232=pow(x1233,-0.5);
CheckValue<IkReal> x1234 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1234.valid){
continue;
}
IkReal gconst6=((-1.0)*(x1234.value));
IkReal gconst7=((-1.0)*px*x1232);
IkReal gconst8=(py*x1232);
IkReal x1235=((((-0.2765)*sj3))+((gconst8*py))+(((-1.0)*gconst7*px)));
CheckValue<IkReal> x1236 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1236.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1236.value)+j0)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((-1.0)*(px*px)))+(((0.181384)*cj3))+(((-1.0)*(py*py))));
evalcond[2]=x1235;
evalcond[3]=x1235;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1237=((-1.0)*py);
CheckValue<IkReal> x1241 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1241.valid){
continue;
}
IkReal x1238=((-1.0)*(x1241.value));
IkReal x1239=((px*px)+(py*py));
IkReal x1240=x1232;
pz=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
pp=x1239;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1237);
rxp0_1=(px*r20);
rxp1_0=(r21*x1237);
rxp1_1=(px*r21);
rxp2_0=(r22*x1237);
rxp2_1=(px*r22);
sj0=gconst7;
cj0=gconst8;
j0=x1238;
IkReal gconst6=x1238;
IkReal gconst7=((-1.0)*px*x1240);
IkReal gconst8=(py*x1240);
j1eval[0]=((-1.18625678119349)+(((-1.0)*cj3)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1242=((-1.0)*py);
CheckValue<IkReal> x1246 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1246.valid){
continue;
}
IkReal x1243=((-1.0)*(x1246.value));
IkReal x1244=((px*px)+(py*py));
IkReal x1245=x1232;
pz=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
pp=x1244;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1242);
rxp0_1=(px*r20);
rxp1_0=(r21*x1242);
rxp1_1=(px*r21);
rxp2_0=(r22*x1242);
rxp2_1=(px*r22);
sj0=gconst7;
cj0=gconst8;
j0=x1243;
IkReal gconst6=x1243;
IkReal gconst7=((-1.0)*px*x1245);
IkReal gconst8=(py*x1245);
j1eval[0]=0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1248=IKPowWithIntegerCheck((((gconst8*px))+((gconst7*py))),-1);
if(!x1248.valid){
continue;
}
IkReal x1247=x1248.value;
sj1array[0]=((((-0.2765)*cj3*x1247))+(((-0.328)*x1247)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1249=IKcos(j1);
IkReal x1250=IKsin(j1);
IkReal x1251=px*px;
IkReal x1252=py*py;
IkReal x1253=(gconst8*px);
IkReal x1254=(gconst7*py);
IkReal x1255=((0.656)*x1250);
IkReal x1256=((1.52439024390244)*x1249);
evalcond[0]=(((x1249*x1253))+((x1249*x1254)));
evalcond[1]=((((-0.328)*x1250))+(((-0.2765)*cj3*x1250))+(((-1.0)*x1253))+(((-1.0)*x1254)));
evalcond[2]=(((x1252*x1256))+((x1251*x1256))+(((0.0474569359756098)*x1249)));
evalcond[3]=((-0.03113175)+(((-1.0)*x1253*x1255))+(((-1.0)*x1254*x1255))+(((-1.0)*x1251))+(((-1.0)*x1252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1258=IKPowWithIntegerCheck(((-0.328)+(((-0.2765)*cj3))),-1);
if(!x1258.valid){
continue;
}
IkReal x1257=x1258.value;
sj1array[0]=(((gconst7*py*x1257))+((gconst8*px*x1257)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1259=IKcos(j1);
IkReal x1260=IKsin(j1);
IkReal x1261=px*px;
IkReal x1262=py*py;
IkReal x1263=(gconst8*px);
IkReal x1264=((1.52439024390244)*x1259);
IkReal x1265=(gconst7*py*x1260);
evalcond[0]=(((gconst7*py*x1259))+((x1259*x1263)));
evalcond[1]=((0.328)+x1265+(((0.2765)*cj3))+((x1260*x1263)));
evalcond[2]=(((x1261*x1264))+(((0.0474569359756098)*x1259))+((x1262*x1264)));
evalcond[3]=((-0.03113175)+(((-0.656)*x1265))+(((-1.0)*x1261))+(((-1.0)*x1262))+(((-0.656)*x1260*x1263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1267 = ((px*px)+(py*py));
if(IKabs(x1267)==0){
continue;
}
IkReal x1266=pow(x1267,-0.5);
CheckValue<IkReal> x1268 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1268.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x1268.value))));
IkReal gconst10=((1.0)*px*x1266);
IkReal gconst11=((-1.0)*py*x1266);
IkReal x1269=((((-0.2765)*sj3))+(((-1.0)*gconst10*px))+((gconst11*py)));
CheckValue<IkReal> x1270 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1270.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1270.value)+j0)))), 6.28318530717959)));
evalcond[1]=((0.18403625)+(((-1.0)*(px*px)))+(((0.181384)*cj3))+(((-1.0)*(py*py))));
evalcond[2]=x1269;
evalcond[3]=x1269;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
CheckValue<IkReal> x1275 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1275.valid){
continue;
}
IkReal x1271=((1.0)*(x1275.value));
IkReal x1272=((-1.0)*py);
IkReal x1273=((px*px)+(py*py));
IkReal x1274=x1266;
pz=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
pp=x1273;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1272);
rxp0_1=(px*r20);
rxp1_0=(r21*x1272);
rxp1_1=(px*r21);
rxp2_0=(r22*x1272);
rxp2_1=(px*r22);
sj0=gconst10;
cj0=gconst11;
j0=((3.14159265)+(((-1.0)*x1271)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x1271)));
IkReal gconst10=((1.0)*px*x1274);
IkReal gconst11=(x1272*x1274);
j1eval[0]=((-1.18625678119349)+(((-1.0)*cj3)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
CheckValue<IkReal> x1280 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1280.valid){
continue;
}
IkReal x1276=((1.0)*(x1280.value));
IkReal x1277=((-1.0)*py);
IkReal x1278=((px*px)+(py*py));
IkReal x1279=x1266;
pz=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
pp=x1278;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(r20*x1277);
rxp0_1=(px*r20);
rxp1_0=(r21*x1277);
rxp1_1=(px*r21);
rxp2_0=(r22*x1277);
rxp2_1=(px*r22);
sj0=gconst10;
cj0=gconst11;
j0=((3.14159265)+(((-1.0)*x1276)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x1276)));
IkReal gconst10=((1.0)*px*x1279);
IkReal gconst11=(x1277*x1279);
j1eval[0]=0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1282=IKPowWithIntegerCheck((((gconst10*py))+((gconst11*px))),-1);
if(!x1282.valid){
continue;
}
IkReal x1281=x1282.value;
sj1array[0]=((((-0.328)*x1281))+(((-0.2765)*cj3*x1281)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1283=IKcos(j1);
IkReal x1284=IKsin(j1);
IkReal x1285=px*px;
IkReal x1286=py*py;
IkReal x1287=(gconst10*py);
IkReal x1288=(gconst11*px);
IkReal x1289=((1.52439024390244)*x1283);
IkReal x1290=((0.656)*x1284);
evalcond[0]=(((x1283*x1288))+((x1283*x1287)));
evalcond[1]=((((-1.0)*x1288))+(((-1.0)*x1287))+(((-0.328)*x1284))+(((-0.2765)*cj3*x1284)));
evalcond[2]=(((x1285*x1289))+(((0.0474569359756098)*x1283))+((x1286*x1289)));
evalcond[3]=((-0.03113175)+(((-1.0)*x1286))+(((-1.0)*x1285))+(((-1.0)*x1287*x1290))+(((-1.0)*x1288*x1290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1292=IKPowWithIntegerCheck(((-0.328)+(((-0.2765)*cj3))),-1);
if(!x1292.valid){
continue;
}
IkReal x1291=x1292.value;
sj1array[0]=(((gconst11*px*x1291))+((gconst10*py*x1291)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1293=IKcos(j1);
IkReal x1294=IKsin(j1);
IkReal x1295=px*px;
IkReal x1296=py*py;
IkReal x1297=(gconst10*py);
IkReal x1298=(gconst11*px);
IkReal x1299=((1.52439024390244)*x1293);
IkReal x1300=((0.656)*x1294);
evalcond[0]=(((x1293*x1298))+((x1293*x1297)));
evalcond[1]=((0.328)+(((0.2765)*cj3))+((x1294*x1297))+((x1294*x1298)));
evalcond[2]=(((x1296*x1299))+((x1295*x1299))+(((0.0474569359756098)*x1293)));
evalcond[3]=((-0.03113175)+(((-1.0)*x1297*x1300))+(((-1.0)*x1296))+(((-1.0)*x1295))+(((-1.0)*x1298*x1300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1302=IKPowWithIntegerCheck((((cj0*px))+((py*sj0))),-1);
if(!x1302.valid){
continue;
}
IkReal x1301=x1302.value;
sj1array[0]=((((-0.2765)*cj3*x1301))+(((-0.328)*x1301)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1303=IKcos(j1);
IkReal x1304=IKsin(j1);
IkReal x1305=px*px;
IkReal x1306=py*py;
IkReal x1307=(cj0*px);
IkReal x1308=(py*sj0);
IkReal x1309=((0.656)*x1304);
IkReal x1310=((1.52439024390244)*x1303);
evalcond[0]=(((x1303*x1308))+((x1303*x1307)));
evalcond[1]=((((-0.2765)*cj3*x1304))+(((-1.0)*x1308))+(((-1.0)*x1307))+(((-0.328)*x1304)));
evalcond[2]=(((x1305*x1310))+((x1306*x1310))+(((0.0474569359756098)*x1303)));
evalcond[3]=((-0.03113175)+(((-1.0)*x1307*x1309))+(((-1.0)*x1305))+(((-1.0)*x1306))+(((-1.0)*x1308*x1309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x1312=IKPowWithIntegerCheck(((-0.328)+(((-0.2765)*cj3))),-1);
if(!x1312.valid){
continue;
}
IkReal x1311=x1312.value;
sj1array[0]=(((cj0*px*x1311))+((py*sj0*x1311)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1313=IKcos(j1);
IkReal x1314=IKsin(j1);
IkReal x1315=px*px;
IkReal x1316=py*py;
IkReal x1317=((1.52439024390244)*x1313);
IkReal x1318=(py*sj0*x1314);
IkReal x1319=(cj0*px*x1314);
evalcond[0]=(((cj0*px*x1313))+((py*sj0*x1313)));
evalcond[1]=((0.328)+x1319+x1318+(((0.2765)*cj3)));
evalcond[2]=(((x1316*x1317))+((x1315*x1317))+(((0.0474569359756098)*x1313)));
evalcond[3]=((-0.03113175)+(((-0.656)*x1318))+(((-0.656)*x1319))+(((-1.0)*x1316))+(((-1.0)*x1315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(pz))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j3), 6.28318530717959))))));
evalcond[1]=((0.36542025)+(((-1.0)*pp)));
evalcond[2]=((((-1.0)*px*sj0))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((((-1.65425971877585)*py*sj0))+(((-1.65425971877585)*cj0*px)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1320=IKsin(j1);
IkReal x1321=IKcos(j1);
CheckValue<IkReal> x1328=IKPowWithIntegerCheck(cj0,-1);
if(!x1328.valid){
continue;
}
IkReal x1322=x1328.value;
IkReal x1323=sj0*sj0;
IkReal x1324=(x1322*x1323);
IkReal x1325=(py*sj0*x1320);
IkReal x1326=((1.0)*px*x1321);
IkReal x1327=(cj0*px*x1320);
evalcond[0]=((0.6045)*x1321);
evalcond[1]=((0.6045)+x1327+x1325);
evalcond[2]=((-0.396552)+(((-0.656)*x1325))+(((-0.656)*x1327)));
evalcond[3]=((((-1.0)*sj2*x1324*x1326))+(((-1.0)*cj0*sj2*x1326)));
evalcond[4]=((((-1.0)*cj0*cj2*x1326))+(((-1.0)*cj2*x1324*x1326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j3, 6.28318530717959)))))+(IKabs(pz)));
evalcond[1]=((0.00265225)+(((-1.0)*pp)));
evalcond[2]=((((-1.0)*px*sj0))+((cj0*py)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((((-19.4174757281553)*py*sj0))+(((-19.4174757281553)*cj0*px)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1329=IKsin(j1);
IkReal x1330=IKcos(j1);
CheckValue<IkReal> x1337=IKPowWithIntegerCheck(cj0,-1);
if(!x1337.valid){
continue;
}
IkReal x1331=x1337.value;
IkReal x1332=sj0*sj0;
IkReal x1333=(cj0*px);
IkReal x1334=((1.0)*x1330);
IkReal x1335=(py*sj0*x1329);
IkReal x1336=(px*x1331*x1332*x1334);
evalcond[0]=((0.0515)*x1330);
evalcond[1]=((0.0515)+x1335+((x1329*x1333)));
evalcond[2]=((-0.033784)+(((-0.656)*x1329*x1333))+(((-0.656)*x1335)));
evalcond[3]=((((-1.0)*sj2*x1336))+(((-1.0)*sj2*x1333*x1334)));
evalcond[4]=((((-1.0)*cj2*x1336))+(((-1.0)*cj2*x1333*x1334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1338=py*py;
IkReal x1339=cj0*cj0;
IkReal x1340=(cj0*px);
IkReal x1341=(py*sj0);
IkReal x1342=((2000.0)*pz);
IkReal x1343=(cj2*sj3);
IkReal x1344=((2000.0)*x1338);
CheckValue<IkReal> x1345=IKPowWithIntegerCheck(IKsign(((((553.0)*x1341*x1343))+(((656.0)*pz))+(((553.0)*x1340*x1343))+(((553.0)*cj3*pz)))),-1);
if(!x1345.valid){
continue;
}
CheckValue<IkReal> x1346 = IKatan2WithCheck(IkReal(((((-1.0)*x1340*x1342))+(((-1.0)*x1341*x1342))+(((-181.384)*x1343))+(((-152.9045)*cj3*x1343)))),((215.168)+((x1339*x1344))+(((-1.0)*x1344))+(((152.9045)*(cj3*cj3)))+(((-4000.0)*x1340*x1341))+(((-2000.0)*x1339*(px*px)))+(((362.768)*cj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x1346.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1345.value)))+(x1346.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1347=IKcos(j1);
IkReal x1348=IKsin(j1);
IkReal x1349=((0.2765)*cj3);
IkReal x1350=(cj0*px);
IkReal x1351=((1.0)*sj0);
IkReal x1352=(py*sj0);
IkReal x1353=((1.0)*pz);
IkReal x1354=((0.2765)*sj3);
IkReal x1355=(cj0*py);
IkReal x1356=((0.656)*x1348);
IkReal x1357=((1.0)*x1347);
IkReal x1358=(py*x1347);
IkReal x1359=(cj2*x1348);
evalcond[0]=((((-1.0)*x1353))+(((-1.0)*x1354*x1359))+(((0.328)*x1347))+((x1347*x1349)));
evalcond[1]=((0.328)+x1349+(((-1.0)*x1347*x1353))+((x1348*x1352))+((x1348*x1350)));
evalcond[2]=((-0.03113175)+(((-1.0)*x1352*x1356))+(((-1.0)*x1350*x1356))+(((-1.0)*pp))+(((0.656)*pz*x1347)));
evalcond[3]=((((-1.0)*x1350))+(((-1.0)*x1348*x1349))+(((-0.328)*x1348))+(((-1.0)*cj2*x1347*x1354))+(((-1.0)*py*x1351)));
evalcond[4]=((((-1.0)*sj2*x1351*x1358))+(((-1.0)*cj2*px*x1351))+(((-1.0)*sj2*x1348*x1353))+((cj2*x1355))+(((-1.0)*sj2*x1350*x1357)));
evalcond[5]=((((-1.0)*x1354))+(((-1.0)*cj2*x1351*x1358))+(((-1.0)*cj2*x1350*x1357))+(((-1.0)*sj2*x1355))+((px*sj0*sj2))+(((-1.0)*x1353*x1359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1360=cj2*cj2;
IkReal x1361=cj3*cj3;
IkReal x1362=(py*sj0);
IkReal x1363=((1106000.0)*cj3);
IkReal x1364=(cj0*px);
IkReal x1365=((305809.0)*x1361);
IkReal x1366=((1106000.0)*cj2*sj3);
CheckValue<IkReal> x1367=IKPowWithIntegerCheck(IKsign(((430336.0)+x1365+(((305809.0)*x1360))+(((725536.0)*cj3))+(((-1.0)*x1360*x1365)))),-1);
if(!x1367.valid){
continue;
}
CheckValue<IkReal> x1368 = IKatan2WithCheck(IkReal(((((-1.0)*pz*x1366))+(((-1312000.0)*x1364))+(((-1312000.0)*x1362))+(((-1.0)*x1362*x1363))+(((-1.0)*x1363*x1364)))),((((-1.0)*x1364*x1366))+(((-1.0)*x1362*x1366))+((pz*x1363))+(((1312000.0)*pz))),IKFAST_ATAN2_MAGTHRESH);
if(!x1368.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1367.value)))+(x1368.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1369=IKcos(j1);
IkReal x1370=IKsin(j1);
IkReal x1371=((0.2765)*cj3);
IkReal x1372=(cj0*px);
IkReal x1373=((1.0)*sj0);
IkReal x1374=(py*sj0);
IkReal x1375=((1.0)*pz);
IkReal x1376=((0.2765)*sj3);
IkReal x1377=(cj0*py);
IkReal x1378=((0.656)*x1370);
IkReal x1379=((1.0)*x1369);
IkReal x1380=(py*x1369);
IkReal x1381=(cj2*x1370);
evalcond[0]=((((-1.0)*x1376*x1381))+(((-1.0)*x1375))+(((0.328)*x1369))+((x1369*x1371)));
evalcond[1]=((0.328)+x1371+((x1370*x1372))+((x1370*x1374))+(((-1.0)*x1369*x1375)));
evalcond[2]=((-0.03113175)+(((-1.0)*x1372*x1378))+(((-1.0)*x1374*x1378))+(((-1.0)*pp))+(((0.656)*pz*x1369)));
evalcond[3]=((((-1.0)*x1370*x1371))+(((-1.0)*x1372))+(((-1.0)*cj2*x1369*x1376))+(((-0.328)*x1370))+(((-1.0)*py*x1373)));
evalcond[4]=((((-1.0)*sj2*x1372*x1379))+(((-1.0)*sj2*x1373*x1380))+(((-1.0)*sj2*x1370*x1375))+((cj2*x1377))+(((-1.0)*cj2*px*x1373)));
evalcond[5]=((((-1.0)*sj2*x1377))+(((-1.0)*x1375*x1381))+(((-1.0)*cj2*x1372*x1379))+((px*sj0*sj2))+(((-1.0)*x1376))+(((-1.0)*cj2*x1373*x1380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1382=(cj0*px);
IkReal x1383=((553.0)*cj3);
IkReal x1384=(cj2*sj3);
IkReal x1385=(py*sj0);
IkReal x1386=((2000.0)*pz);
CheckValue<IkReal> x1387 = IKatan2WithCheck(IkReal(((215.168)+(((152.9045)*(cj3*cj3)))+(((-1.0)*pz*x1386))+(((362.768)*cj3)))),((((152.9045)*cj3*x1384))+(((-1.0)*x1382*x1386))+(((181.384)*x1384))+(((-1.0)*x1385*x1386))),IKFAST_ATAN2_MAGTHRESH);
if(!x1387.valid){
continue;
}
CheckValue<IkReal> x1388=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1383*x1385))+(((-1.0)*x1382*x1383))+(((-656.0)*x1385))+(((-656.0)*x1382))+(((553.0)*pz*x1384)))),-1);
if(!x1388.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1387.value)+(((1.5707963267949)*(x1388.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1389=IKcos(j1);
IkReal x1390=IKsin(j1);
IkReal x1391=((0.2765)*cj3);
IkReal x1392=(cj0*px);
IkReal x1393=((1.0)*sj0);
IkReal x1394=(py*sj0);
IkReal x1395=((1.0)*pz);
IkReal x1396=((0.2765)*sj3);
IkReal x1397=(cj0*py);
IkReal x1398=((0.656)*x1390);
IkReal x1399=((1.0)*x1389);
IkReal x1400=(py*x1389);
IkReal x1401=(cj2*x1390);
evalcond[0]=((((0.328)*x1389))+((x1389*x1391))+(((-1.0)*x1396*x1401))+(((-1.0)*x1395)));
evalcond[1]=((0.328)+x1391+(((-1.0)*x1389*x1395))+((x1390*x1392))+((x1390*x1394)));
evalcond[2]=((-0.03113175)+(((-1.0)*x1392*x1398))+(((-1.0)*x1394*x1398))+(((-1.0)*pp))+(((0.656)*pz*x1389)));
evalcond[3]=((((-0.328)*x1390))+(((-1.0)*cj2*x1389*x1396))+(((-1.0)*x1390*x1391))+(((-1.0)*x1392))+(((-1.0)*py*x1393)));
evalcond[4]=((((-1.0)*sj2*x1393*x1400))+(((-1.0)*cj2*px*x1393))+((cj2*x1397))+(((-1.0)*sj2*x1390*x1395))+(((-1.0)*sj2*x1392*x1399)));
evalcond[5]=((((-1.0)*cj2*x1393*x1400))+(((-1.0)*sj2*x1397))+((px*sj0*sj2))+(((-1.0)*cj2*x1392*x1399))+(((-1.0)*x1395*x1401))+(((-1.0)*x1396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x147=((1.0)*sj2);
IkReal x148=(cj3*sj0);
IkReal x149=(cj2*cj3);
IkReal x150=(cj0*sj2);
IkReal x151=(cj1*sj3);
IkReal x152=((1.0)*cj2);
IkReal x153=((1.0)*sj1*sj3);
IkReal x154=((((-1.0)*x153))+((cj1*x149)));
IkReal x155=(((sj1*x149))+x151);
IkReal x156=(((cj0*cj2))+(((-1.0)*cj1*sj0*x147)));
IkReal x157=(((cj1*cj3))+(((-1.0)*sj1*sj3*x152)));
IkReal x158=(cj0*x154);
IkReal x159=((((-1.0)*sj0*x152))+(((-1.0)*cj0*cj1*x147)));
IkReal x160=((((-1.0)*x151*x152))+(((-1.0)*cj3*sj1)));
IkReal x161=(((cj3*x150))+((sj0*x154)));
IkReal x162=((((-1.0)*sj2*x148))+x158);
IkReal x163=(((cj0*x160))+((sj0*sj2*sj3)));
IkReal x164=(((sj0*x160))+(((-1.0)*sj3*x150)));
new_r00=(((r00*((x158+(((-1.0)*x147*x148))))))+((r20*x155))+((r10*x161)));
new_r01=(((r01*x162))+((r21*x155))+((r11*x161)));
new_r02=(((r12*x161))+((r22*x155))+((r02*x162)));
new_r10=(((r00*x159))+((r10*x156))+(((-1.0)*r20*sj1*x147)));
new_r11=(((r01*x159))+(((-1.0)*r21*sj1*x147))+((r11*x156)));
new_r12=((((-1.0)*r22*sj1*x147))+((r02*x159))+((r12*x156)));
new_r20=(((r00*x163))+((r20*x157))+((r10*x164)));
new_r21=(((r01*x163))+((r21*x157))+((r11*x164)));
new_r22=(((r12*x164))+((r22*x157))+((r02*x163)));
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
cj5array[0]=new_r22;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j6eval[2];
IkReal x165=((1.0)*sj2);
IkReal x166=(cj3*sj0);
IkReal x167=(cj2*cj3);
IkReal x168=(cj0*sj2);
IkReal x169=(cj1*sj3);
IkReal x170=((1.0)*cj2);
IkReal x171=((1.0)*sj1*sj3);
IkReal x172=((((-1.0)*x171))+((cj1*x167)));
IkReal x173=(((sj1*x167))+x169);
IkReal x174=x156;
IkReal x175=x157;
IkReal x176=(cj0*x172);
IkReal x177=x159;
IkReal x178=x160;
IkReal x179=(((sj0*x172))+((cj3*x168)));
IkReal x180=((((-1.0)*sj2*x166))+x176);
IkReal x181=(((cj0*x178))+((sj0*sj2*sj3)));
IkReal x182=((((-1.0)*sj3*x168))+((sj0*x178)));
new_r00=(((r20*x173))+((r00*((x176+(((-1.0)*x165*x166))))))+((r10*x179)));
new_r01=(((r01*x180))+((r21*x173))+((r11*x179)));
new_r02=(((r22*x173))+((r02*x180))+((r12*x179)));
new_r10=(((r00*x177))+(((-1.0)*r20*sj1*x165))+((r10*x174)));
new_r11=(((r01*x177))+(((-1.0)*r21*sj1*x165))+((r11*x174)));
new_r12=((((-1.0)*r22*sj1*x165))+((r12*x174))+((r02*x177)));
new_r20=(((r00*x181))+((r20*x175))+((r10*x182)));
new_r21=(((r01*x181))+((r21*x175))+((r11*x182)));
new_r22=(((r22*x175))+((r12*x182))+((r02*x181)));
j6eval[0]=sj5;
j6eval[1]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x183=((1.0)*sj2);
IkReal x184=(cj3*sj0);
IkReal x185=(cj2*cj3);
IkReal x186=(cj0*sj2);
IkReal x187=(cj1*sj3);
IkReal x188=((1.0)*cj2);
IkReal x189=((1.0)*sj1*sj3);
IkReal x190=((((-1.0)*x189))+((cj1*x185)));
IkReal x191=(((sj1*x185))+x187);
IkReal x192=x156;
IkReal x193=x157;
IkReal x194=(cj0*x190);
IkReal x195=x159;
IkReal x196=x160;
IkReal x197=(((sj0*x190))+((cj3*x186)));
IkReal x198=((((-1.0)*sj2*x184))+x194);
IkReal x199=(((cj0*x196))+((sj0*sj2*sj3)));
IkReal x200=(((sj0*x196))+(((-1.0)*sj3*x186)));
new_r00=(((r00*((x194+(((-1.0)*x183*x184))))))+((r20*x191))+((r10*x197)));
new_r01=(((r01*x198))+((r21*x191))+((r11*x197)));
new_r02=(((r12*x197))+((r22*x191))+((r02*x198)));
new_r10=(((r00*x195))+((r10*x192))+(((-1.0)*r20*sj1*x183)));
new_r11=(((r01*x195))+((r11*x192))+(((-1.0)*r21*sj1*x183)));
new_r12=((((-1.0)*r22*sj1*x183))+((r12*x192))+((r02*x195)));
new_r20=(((r00*x199))+((r20*x193))+((r10*x200)));
new_r21=(((r11*x200))+((r01*x199))+((r21*x193)));
new_r22=(((r22*x193))+((r02*x199))+((r12*x200)));
j4eval[0]=sj5;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x202 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x202.valid){
continue;
}
IkReal x201=x202.value;
j4array[0]=((-1.0)*x201);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x201)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(((new_r12*(IKcos(j4))))+(((-1.0)*new_r02*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x203=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj4*x203))+(((-1.0)*new_r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*new_r00))+(((-1.0)*sj4*x203)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x203))+(((-1.0)*new_r00*sj4))))+IKsqr((((cj4*new_r00))+(((-1.0)*sj4*x203))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj4*x203))+(((-1.0)*new_r00*sj4))), (((cj4*new_r00))+(((-1.0)*sj4*x203))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x204=IKsin(j6);
IkReal x205=IKcos(j6);
IkReal x206=((1.0)*cj4);
IkReal x207=(sj4*x204);
IkReal x208=((1.0)*x205);
IkReal x209=(x205*x206);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x204);
evalcond[1]=(((new_r00*sj4))+x204+(((-1.0)*new_r10*x206)));
evalcond[2]=(((new_r01*sj4))+x205+(((-1.0)*new_r11*x206)));
evalcond[3]=(((cj4*x204))+((sj4*x205))+new_r01);
evalcond[4]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x208)));
evalcond[5]=((((-1.0)*x209))+x207+new_r00);
evalcond[6]=((((-1.0)*x209))+x207+new_r11);
evalcond[7]=((((-1.0)*x204*x206))+new_r10+(((-1.0)*sj4*x208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x211 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x211.valid){
continue;
}
IkReal x210=x211.value;
j4array[0]=((-1.0)*x210);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x210)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(((new_r12*(IKcos(j4))))+(((-1.0)*new_r02*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x212=((1.0)*new_r00);
if( IKabs((((cj4*new_r01))+(((-1.0)*sj4*x212)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x212)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*new_r01))+(((-1.0)*sj4*x212))))+IKsqr(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x212))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((cj4*new_r01))+(((-1.0)*sj4*x212))), ((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x212))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x213=IKcos(j6);
IkReal x214=IKsin(j6);
IkReal x215=((1.0)*cj4);
IkReal x216=(sj4*x213);
IkReal x217=((1.0)*x214);
IkReal x218=(x214*x215);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x213);
evalcond[1]=(((new_r00*sj4))+(((-1.0)*new_r10*x215))+x214);
evalcond[2]=((((-1.0)*new_r11*x215))+((new_r01*sj4))+x213);
evalcond[3]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x217)));
evalcond[4]=(((cj4*x213))+new_r00+((sj4*x214)));
evalcond[5]=(x216+new_r01+(((-1.0)*x218)));
evalcond[6]=(x216+new_r10+(((-1.0)*x218)));
evalcond[7]=((((-1.0)*sj4*x217))+(((-1.0)*x213*x215))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x220=IKPowWithIntegerCheck(sj5,-1);
if(!x220.valid){
continue;
}
IkReal x219=x220.value;
CheckValue<IkReal> x221=IKPowWithIntegerCheck(new_r12,-1);
if(!x221.valid){
continue;
}
if( IKabs((x219*(x221.value)*(((-1.0)+(new_r02*new_r02)+(cj5*cj5))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r02*x219)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x219*(x221.value)*(((-1.0)+(new_r02*new_r02)+(cj5*cj5)))))+IKsqr(((-1.0)*new_r02*x219))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x219*(x221.value)*(((-1.0)+(new_r02*new_r02)+(cj5*cj5)))), ((-1.0)*new_r02*x219));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x222=IKcos(j4);
IkReal x223=IKsin(j4);
IkReal x224=((1.0)*sj5);
IkReal x225=(new_r12*x223);
IkReal x226=(new_r02*x222);
IkReal x227=(sj5*x222);
evalcond[0]=(x227+new_r02);
evalcond[1]=(((sj5*x223))+new_r12);
evalcond[2]=(((new_r12*x222))+(((-1.0)*new_r02*x223)));
evalcond[3]=(sj5+x225+x226);
evalcond[4]=(((new_r22*sj5))+((cj5*x225))+((cj5*x226)));
evalcond[5]=(((cj5*new_r20))+(((-1.0)*new_r10*x223*x224))+(((-1.0)*new_r00*x222*x224)));
evalcond[6]=((((-1.0)*new_r01*x222*x224))+((cj5*new_r21))+(((-1.0)*new_r11*x223*x224)));
evalcond[7]=((-1.0)+(((-1.0)*x224*x226))+(((-1.0)*x224*x225))+((cj5*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[2];
IkReal x228=((1.0)*sj2);
IkReal x229=(cj3*sj0);
IkReal x230=(cj2*cj3);
IkReal x231=(cj0*sj2);
IkReal x232=(cj1*sj3);
IkReal x233=((1.0)*cj2);
IkReal x234=((1.0)*sj1*sj3);
IkReal x235=(((cj1*x230))+(((-1.0)*x234)));
IkReal x236=(((sj1*x230))+x232);
IkReal x237=x156;
IkReal x238=x157;
IkReal x239=(cj0*x235);
IkReal x240=x159;
IkReal x241=x160;
IkReal x242=(((cj3*x231))+((sj0*x235)));
IkReal x243=((((-1.0)*sj2*x229))+x239);
IkReal x244=(((cj0*x241))+((sj0*sj2*sj3)));
IkReal x245=((((-1.0)*sj3*x231))+((sj0*x241)));
new_r00=(((r00*(((((-1.0)*x228*x229))+x239))))+((r20*x236))+((r10*x242)));
new_r01=(((r01*x243))+((r11*x242))+((r21*x236)));
new_r02=(((r02*x243))+((r12*x242))+((r22*x236)));
new_r10=((((-1.0)*r20*sj1*x228))+((r10*x237))+((r00*x240)));
new_r11=(((r11*x237))+(((-1.0)*r21*sj1*x228))+((r01*x240)));
new_r12=((((-1.0)*r22*sj1*x228))+((r02*x240))+((r12*x237)));
new_r20=(((r20*x238))+((r00*x244))+((r10*x245)));
new_r21=(((r01*x244))+((r11*x245))+((r21*x238)));
new_r22=(((r02*x244))+((r12*x245))+((r22*x238)));
j6eval[0]=sj5;
j6eval[1]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x246=((1.0)*sj2);
IkReal x247=(cj3*sj0);
IkReal x248=(cj2*cj3);
IkReal x249=(cj0*sj2);
IkReal x250=(cj1*sj3);
IkReal x251=((1.0)*cj2);
IkReal x252=((1.0)*sj1*sj3);
IkReal x253=(((cj1*x248))+(((-1.0)*x252)));
IkReal x254=(x250+((sj1*x248)));
IkReal x255=x156;
IkReal x256=x157;
IkReal x257=(cj0*x253);
IkReal x258=x159;
IkReal x259=x160;
IkReal x260=(((sj0*x253))+((cj3*x249)));
IkReal x261=((((-1.0)*sj2*x247))+x257);
IkReal x262=(((cj0*x259))+((sj0*sj2*sj3)));
IkReal x263=((((-1.0)*sj3*x249))+((sj0*x259)));
new_r00=(((r20*x254))+((r10*x260))+((r00*((x257+(((-1.0)*x246*x247)))))));
new_r01=(((r21*x254))+((r11*x260))+((r01*x261)));
new_r02=(((r02*x261))+((r12*x260))+((r22*x254)));
new_r10=(((r00*x258))+((r10*x255))+(((-1.0)*r20*sj1*x246)));
new_r11=((((-1.0)*r21*sj1*x246))+((r11*x255))+((r01*x258)));
new_r12=((((-1.0)*r22*sj1*x246))+((r12*x255))+((r02*x258)));
new_r20=(((r20*x256))+((r00*x262))+((r10*x263)));
new_r21=(((r21*x256))+((r11*x263))+((r01*x262)));
new_r22=(((r02*x262))+((r12*x263))+((r22*x256)));
j6eval[0]=sj5;
j6eval[1]=sj4;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x264=((1.0)*sj2);
IkReal x265=(cj3*sj0);
IkReal x266=(cj2*cj3);
IkReal x267=(cj0*sj2);
IkReal x268=(cj1*sj3);
IkReal x269=((1.0)*cj2);
IkReal x270=((1.0)*sj1*sj3);
IkReal x271=(((cj1*x266))+(((-1.0)*x270)));
IkReal x272=(x268+((sj1*x266)));
IkReal x273=x156;
IkReal x274=x157;
IkReal x275=(cj0*x271);
IkReal x276=x159;
IkReal x277=x160;
IkReal x278=(((cj3*x267))+((sj0*x271)));
IkReal x279=((((-1.0)*sj2*x265))+x275);
IkReal x280=(((sj0*sj2*sj3))+((cj0*x277)));
IkReal x281=((((-1.0)*sj3*x267))+((sj0*x277)));
new_r00=(((r00*((x275+(((-1.0)*x264*x265))))))+((r10*x278))+((r20*x272)));
new_r01=(((r21*x272))+((r01*x279))+((r11*x278)));
new_r02=(((r02*x279))+((r22*x272))+((r12*x278)));
new_r10=((((-1.0)*r20*sj1*x264))+((r00*x276))+((r10*x273)));
new_r11=((((-1.0)*r21*sj1*x264))+((r01*x276))+((r11*x273)));
new_r12=((((-1.0)*r22*sj1*x264))+((r02*x276))+((r12*x273)));
new_r20=(((r00*x280))+((r10*x281))+((r20*x274)));
new_r21=(((r01*x280))+((r11*x281))+((r21*x274)));
new_r22=(((r22*x274))+((r02*x280))+((r12*x281)));
j6eval[0]=sj5;
j6eval[1]=cj4;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[10];
bool bgotonextstatement = true;
do
{
IkReal x282=(new_r02*sj4);
IkReal x283=(cj4*new_r12);
IkReal x284=(((new_r12*sj4))+((cj4*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
evalcond[5]=new_r20;
evalcond[6]=(x283+(((-1.0)*x282)));
evalcond[7]=(x282+(((-1.0)*x283)));
evalcond[8]=x284;
evalcond[9]=x284;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x285=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj4*x285))+(((-1.0)*new_r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*new_r00))+(((-1.0)*sj4*x285)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x285))+(((-1.0)*new_r00*sj4))))+IKsqr((((cj4*new_r00))+(((-1.0)*sj4*x285))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj4*x285))+(((-1.0)*new_r00*sj4))), (((cj4*new_r00))+(((-1.0)*sj4*x285))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x286=IKsin(j6);
IkReal x287=IKcos(j6);
IkReal x288=((1.0)*cj4);
IkReal x289=(sj4*x286);
IkReal x290=((1.0)*x287);
IkReal x291=(x287*x288);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x286);
evalcond[1]=(((new_r00*sj4))+x286+(((-1.0)*new_r10*x288)));
evalcond[2]=(((new_r01*sj4))+x287+(((-1.0)*new_r11*x288)));
evalcond[3]=(new_r01+((cj4*x286))+((sj4*x287)));
evalcond[4]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x290)));
evalcond[5]=((((-1.0)*x291))+x289+new_r00);
evalcond[6]=((((-1.0)*x291))+x289+new_r11);
evalcond[7]=(new_r10+(((-1.0)*sj4*x290))+(((-1.0)*x286*x288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x292=(cj4*new_r02);
IkReal x293=((1.0)*new_r12);
IkReal x294=(new_r02*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
evalcond[5]=new_r20;
evalcond[6]=((((-1.0)*x294))+((cj4*new_r12)));
evalcond[7]=((((-1.0)*cj4*x293))+x294);
evalcond[8]=(((new_r12*sj4))+x292);
evalcond[9]=((((-1.0)*x292))+(((-1.0)*sj4*x293)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x295=((1.0)*new_r00);
if( IKabs((((cj4*new_r01))+(((-1.0)*sj4*x295)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x295)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*new_r01))+(((-1.0)*sj4*x295))))+IKsqr(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x295))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((cj4*new_r01))+(((-1.0)*sj4*x295))), ((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x295))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x296=IKcos(j6);
IkReal x297=IKsin(j6);
IkReal x298=((1.0)*cj4);
IkReal x299=(sj4*x296);
IkReal x300=((1.0)*x297);
IkReal x301=(x297*x298);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x296);
evalcond[1]=((((-1.0)*new_r10*x298))+((new_r00*sj4))+x297);
evalcond[2]=((((-1.0)*new_r11*x298))+((new_r01*sj4))+x296);
evalcond[3]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x300)));
evalcond[4]=(((cj4*x296))+((sj4*x297))+new_r00);
evalcond[5]=(x299+new_r01+(((-1.0)*x301)));
evalcond[6]=(x299+new_r10+(((-1.0)*x301)));
evalcond[7]=((((-1.0)*sj4*x300))+(((-1.0)*x296*x298))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x302=(new_r22+(((-1.0)*cj5)));
IkReal x303=(sj5+new_r12);
IkReal x304=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=x302;
evalcond[2]=x302;
evalcond[3]=new_r02;
evalcond[4]=x303;
evalcond[5]=x303;
evalcond[6]=(((cj5*new_r12))+((new_r22*sj5)));
evalcond[7]=(((cj5*new_r20))+(((-1.0)*new_r10*x304)));
evalcond[8]=(((cj5*new_r21))+(((-1.0)*new_r11*x304)));
evalcond[9]=((-1.0)+((cj5*new_r22))+(((-1.0)*new_r12*x304)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x305=IKcos(j6);
IkReal x306=IKsin(j6);
IkReal x307=((1.0)*new_r12);
IkReal x308=((1.0)*x305);
evalcond[0]=(x306+new_r00);
evalcond[1]=(x305+new_r01);
evalcond[2]=(((new_r12*x305))+new_r20);
evalcond[3]=(((new_r22*x306))+new_r11);
evalcond[4]=((((-1.0)*x306*x307))+new_r21);
evalcond[5]=((((-1.0)*new_r22*x308))+new_r10);
evalcond[6]=((((-1.0)*new_r21*x307))+x306+((new_r11*new_r22)));
evalcond[7]=((((-1.0)*new_r20*x307))+((new_r10*new_r22))+(((-1.0)*x308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x309=(new_r22+(((-1.0)*cj5)));
IkReal x310=((1.0)*cj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=x309;
evalcond[2]=x309;
evalcond[3]=new_r02;
evalcond[4]=((((-1.0)*sj5))+new_r12);
evalcond[5]=(sj5+(((-1.0)*new_r12)));
evalcond[6]=((((-1.0)*new_r12*x310))+((new_r22*sj5)));
evalcond[7]=(((new_r10*sj5))+((cj5*new_r20)));
evalcond[8]=(((new_r11*sj5))+((cj5*new_r21)));
evalcond[9]=((-1.0)+((new_r12*sj5))+((cj5*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x311=IKsin(j6);
IkReal x312=IKcos(j6);
IkReal x313=((1.0)*new_r22);
IkReal x314=((1.0)*x312);
evalcond[0]=(((new_r12*x311))+new_r21);
evalcond[1]=(x311+(((-1.0)*new_r00)));
evalcond[2]=(x312+(((-1.0)*new_r01)));
evalcond[3]=((((-1.0)*new_r12*x314))+new_r20);
evalcond[4]=((((-1.0)*new_r11))+((new_r22*x311)));
evalcond[5]=((((-1.0)*x312*x313))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r11*x313))+x311+((new_r12*new_r21)));
evalcond[7]=(((new_r12*new_r20))+(((-1.0)*new_r10*x313))+(((-1.0)*x314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x315=(new_r22+(((-1.0)*cj5)));
IkReal x316=(sj5+new_r02);
IkReal x317=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=x315;
evalcond[2]=x315;
evalcond[3]=x316;
evalcond[4]=new_r12;
evalcond[5]=x316;
evalcond[6]=(((cj5*new_r02))+((new_r22*sj5)));
evalcond[7]=((((-1.0)*new_r00*x317))+((cj5*new_r20)));
evalcond[8]=(((cj5*new_r21))+(((-1.0)*new_r01*x317)));
evalcond[9]=((-1.0)+(((-1.0)*new_r02*x317))+((cj5*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x318=IKcos(j6);
IkReal x319=IKsin(j6);
IkReal x320=((1.0)*new_r02);
IkReal x321=((1.0)*x318);
evalcond[0]=(((new_r02*x318))+new_r20);
evalcond[1]=(x319+(((-1.0)*new_r10)));
evalcond[2]=(x318+(((-1.0)*new_r11)));
evalcond[3]=(new_r01+((new_r22*x319)));
evalcond[4]=((((-1.0)*x319*x320))+new_r21);
evalcond[5]=((((-1.0)*new_r22*x321))+new_r00);
evalcond[6]=(((new_r01*new_r22))+x319+(((-1.0)*new_r21*x320)));
evalcond[7]=(((new_r00*new_r22))+(((-1.0)*x321))+(((-1.0)*new_r20*x320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x322=(new_r22+(((-1.0)*cj5)));
IkReal x323=((1.0)*cj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=x322;
evalcond[2]=x322;
evalcond[3]=((((-1.0)*sj5))+new_r02);
evalcond[4]=new_r12;
evalcond[5]=(sj5+(((-1.0)*new_r02)));
evalcond[6]=((((-1.0)*new_r02*x323))+((new_r22*sj5)));
evalcond[7]=(((new_r00*sj5))+((cj5*new_r20)));
evalcond[8]=(((new_r01*sj5))+((cj5*new_r21)));
evalcond[9]=((-1.0)+((new_r02*sj5))+((cj5*new_r22)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x324=IKsin(j6);
IkReal x325=IKcos(j6);
IkReal x326=((1.0)*new_r22);
IkReal x327=((1.0)*x325);
evalcond[0]=(x324+new_r10);
evalcond[1]=(x325+new_r11);
evalcond[2]=(new_r21+((new_r02*x324)));
evalcond[3]=((((-1.0)*new_r02*x327))+new_r20);
evalcond[4]=(((new_r22*x324))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*x325*x326))+(((-1.0)*new_r00)));
evalcond[6]=(x324+(((-1.0)*new_r01*x326))+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*x327))+(((-1.0)*new_r00*x326))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x329=IKPowWithIntegerCheck(sj5,-1);
if(!x329.valid){
continue;
}
IkReal x328=x329.value;
CheckValue<IkReal> x330=IKPowWithIntegerCheck(cj4,-1);
if(!x330.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x328)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x328*(x330.value)*(((((-1.0)*cj5*new_r21*sj4))+((new_r11*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x328))+IKsqr((x328*(x330.value)*(((((-1.0)*cj5*new_r21*sj4))+((new_r11*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21*x328), (x328*(x330.value)*(((((-1.0)*cj5*new_r21*sj4))+((new_r11*sj5))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x331=IKsin(j6);
IkReal x332=IKcos(j6);
IkReal x333=(cj4*new_r01);
IkReal x334=(new_r10*sj4);
IkReal x335=(cj4*cj5);
IkReal x336=((1.0)*cj4);
IkReal x337=(new_r11*sj4);
IkReal x338=(cj5*x331);
IkReal x339=((1.0)*x332);
evalcond[0]=(((sj5*x331))+new_r21);
evalcond[1]=((((-1.0)*sj5*x339))+new_r20);
evalcond[2]=((((-1.0)*new_r10*x336))+((new_r00*sj4))+x331);
evalcond[3]=((((-1.0)*new_r11*x336))+((new_r01*sj4))+x332);
evalcond[4]=(x338+x333+x337);
evalcond[5]=(((x331*x335))+((sj4*x332))+new_r01);
evalcond[6]=(((cj4*new_r00))+(((-1.0)*cj5*x339))+x334);
evalcond[7]=(((sj4*x331))+new_r00+(((-1.0)*x335*x339)));
evalcond[8]=(((sj4*x338))+(((-1.0)*x332*x336))+new_r11);
evalcond[9]=((((-1.0)*cj5*sj4*x339))+(((-1.0)*x331*x336))+new_r10);
evalcond[10]=(x331+((cj5*x337))+((cj5*x333))+((new_r21*sj5)));
evalcond[11]=(((new_r20*sj5))+((new_r00*x335))+(((-1.0)*x339))+((cj5*x334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x341=IKPowWithIntegerCheck(sj5,-1);
if(!x341.valid){
continue;
}
IkReal x340=x341.value;
CheckValue<IkReal> x342=IKPowWithIntegerCheck(sj4,-1);
if(!x342.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x340)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x340*(x342.value)*(((((-1.0)*new_r01*sj5))+((cj4*cj5*new_r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x340))+IKsqr((x340*(x342.value)*(((((-1.0)*new_r01*sj5))+((cj4*cj5*new_r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21*x340), (x340*(x342.value)*(((((-1.0)*new_r01*sj5))+((cj4*cj5*new_r21))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x343=IKsin(j6);
IkReal x344=IKcos(j6);
IkReal x345=(cj4*new_r01);
IkReal x346=(new_r10*sj4);
IkReal x347=(cj4*cj5);
IkReal x348=((1.0)*cj4);
IkReal x349=(new_r11*sj4);
IkReal x350=(cj5*x343);
IkReal x351=((1.0)*x344);
evalcond[0]=(((sj5*x343))+new_r21);
evalcond[1]=(new_r20+(((-1.0)*sj5*x351)));
evalcond[2]=((((-1.0)*new_r10*x348))+((new_r00*sj4))+x343);
evalcond[3]=((((-1.0)*new_r11*x348))+((new_r01*sj4))+x344);
evalcond[4]=(x350+x345+x349);
evalcond[5]=(((sj4*x344))+new_r01+((x343*x347)));
evalcond[6]=(((cj4*new_r00))+x346+(((-1.0)*cj5*x351)));
evalcond[7]=((((-1.0)*x347*x351))+((sj4*x343))+new_r00);
evalcond[8]=(((sj4*x350))+(((-1.0)*x344*x348))+new_r11);
evalcond[9]=((((-1.0)*x343*x348))+new_r10+(((-1.0)*cj5*sj4*x351)));
evalcond[10]=(x343+((cj5*x349))+((cj5*x345))+((new_r21*sj5)));
evalcond[11]=(((new_r20*sj5))+(((-1.0)*x351))+((new_r00*x347))+((cj5*x346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x352 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x352.valid){
continue;
}
CheckValue<IkReal> x353=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x353.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x352.value)+(((1.5707963267949)*(x353.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x354=IKsin(j6);
IkReal x355=IKcos(j6);
IkReal x356=(cj4*new_r01);
IkReal x357=(new_r10*sj4);
IkReal x358=(cj4*cj5);
IkReal x359=((1.0)*cj4);
IkReal x360=(new_r11*sj4);
IkReal x361=(cj5*x354);
IkReal x362=((1.0)*x355);
evalcond[0]=(((sj5*x354))+new_r21);
evalcond[1]=((((-1.0)*sj5*x362))+new_r20);
evalcond[2]=(((new_r00*sj4))+x354+(((-1.0)*new_r10*x359)));
evalcond[3]=(((new_r01*sj4))+x355+(((-1.0)*new_r11*x359)));
evalcond[4]=(x356+x360+x361);
evalcond[5]=(((sj4*x355))+((x354*x358))+new_r01);
evalcond[6]=(((cj4*new_r00))+(((-1.0)*cj5*x362))+x357);
evalcond[7]=(((sj4*x354))+(((-1.0)*x358*x362))+new_r00);
evalcond[8]=(((sj4*x361))+new_r11+(((-1.0)*x355*x359)));
evalcond[9]=(new_r10+(((-1.0)*x354*x359))+(((-1.0)*cj5*sj4*x362)));
evalcond[10]=(x354+((cj5*x360))+((cj5*x356))+((new_r21*sj5)));
evalcond[11]=(((new_r20*sj5))+(((-1.0)*x362))+((cj5*x357))+((new_r00*x358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x363 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x363.valid){
continue;
}
CheckValue<IkReal> x364=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x364.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x363.value)+(((1.5707963267949)*(x364.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=(((sj5*(IKsin(j6))))+new_r21);
evalcond[1]=((((-1.0)*sj5*(IKcos(j6))))+new_r20);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x365=((1.0)*sj2);
IkReal x366=(cj3*sj0);
IkReal x367=(cj2*cj3);
IkReal x368=(cj0*sj2);
IkReal x369=(cj1*sj3);
IkReal x370=((1.0)*cj2);
IkReal x371=((1.0)*sj1*sj3);
IkReal x372=((((-1.0)*x371))+((cj1*x367)));
IkReal x373=(((sj1*x367))+x369);
IkReal x374=x156;
IkReal x375=x157;
IkReal x376=(cj0*x372);
IkReal x377=x159;
IkReal x378=x160;
IkReal x379=(((sj0*x372))+((cj3*x368)));
IkReal x380=((((-1.0)*sj2*x366))+x376);
IkReal x381=(((sj0*sj2*sj3))+((cj0*x378)));
IkReal x382=((((-1.0)*sj3*x368))+((sj0*x378)));
new_r00=(((r20*x373))+((r00*((x376+(((-1.0)*x365*x366))))))+((r10*x379)));
new_r01=(((r11*x379))+((r21*x373))+((r01*x380)));
new_r02=(((r02*x380))+((r12*x379))+((r22*x373)));
new_r10=((((-1.0)*r20*sj1*x365))+((r00*x377))+((r10*x374)));
new_r11=(((r01*x377))+((r11*x374))+(((-1.0)*r21*sj1*x365)));
new_r12=(((r02*x377))+(((-1.0)*r22*sj1*x365))+((r12*x374)));
new_r20=(((r20*x375))+((r10*x382))+((r00*x381)));
new_r21=(((r11*x382))+((r21*x375))+((r01*x381)));
new_r22=(((r12*x382))+((r02*x381))+((r22*x375)));
j4eval[0]=sj5;
j4eval[1]=IKsign(sj5);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x383=((1.0)*sj2);
IkReal x384=(cj3*sj0);
IkReal x385=(cj2*cj3);
IkReal x386=(cj0*sj2);
IkReal x387=(cj1*sj3);
IkReal x388=((1.0)*cj2);
IkReal x389=((1.0)*sj1*sj3);
IkReal x390=(((cj1*x385))+(((-1.0)*x389)));
IkReal x391=(x387+((sj1*x385)));
IkReal x392=x156;
IkReal x393=x157;
IkReal x394=(cj0*x390);
IkReal x395=x159;
IkReal x396=x160;
IkReal x397=(((cj3*x386))+((sj0*x390)));
IkReal x398=((((-1.0)*sj2*x384))+x394);
IkReal x399=(((cj0*x396))+((sj0*sj2*sj3)));
IkReal x400=(((sj0*x396))+(((-1.0)*sj3*x386)));
new_r00=(((r20*x391))+((r10*x397))+((r00*((x394+(((-1.0)*x383*x384)))))));
new_r01=(((r01*x398))+((r11*x397))+((r21*x391)));
new_r02=(((r22*x391))+((r12*x397))+((r02*x398)));
new_r10=(((r10*x392))+((r00*x395))+(((-1.0)*r20*sj1*x383)));
new_r11=(((r01*x395))+(((-1.0)*r21*sj1*x383))+((r11*x392)));
new_r12=((((-1.0)*r22*sj1*x383))+((r12*x392))+((r02*x395)));
new_r20=(((r20*x393))+((r00*x399))+((r10*x400)));
new_r21=(((r11*x400))+((r01*x399))+((r21*x393)));
new_r22=(((r12*x400))+((r22*x393))+((r02*x399)));
j4eval[0]=sj5;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x401=IKPowWithIntegerCheck(IKsign((((new_r01*new_r12))+(((-1.0)*new_r02*new_r11)))),-1);
if(!x401.valid){
continue;
}
CheckValue<IkReal> x402 = IKatan2WithCheck(IkReal((new_r02*sj6)),((-1.0)*new_r12*sj6),IKFAST_ATAN2_MAGTHRESH);
if(!x402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x401.value)))+(x402.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x403=IKcos(j4);
IkReal x404=IKsin(j4);
IkReal x405=(sj6*x404);
IkReal x406=((1.0)*x403);
IkReal x407=(cj6*x404);
IkReal x408=(cj6*x406);
evalcond[0]=(((new_r12*x404))+((new_r02*x403)));
evalcond[1]=((((-1.0)*new_r02*x404))+((new_r12*x403)));
evalcond[2]=(sj6+((new_r11*x404))+((new_r01*x403)));
evalcond[3]=(((sj6*x403))+x407+new_r01);
evalcond[4]=(sj6+(((-1.0)*new_r10*x406))+((new_r00*x404)));
evalcond[5]=(cj6+((new_r01*x404))+(((-1.0)*new_r11*x406)));
evalcond[6]=(x405+new_r00+(((-1.0)*x408)));
evalcond[7]=(x405+new_r11+(((-1.0)*x408)));
evalcond[8]=(((new_r10*x404))+((new_r00*x403))+(((-1.0)*cj6)));
evalcond[9]=(new_r10+(((-1.0)*x407))+(((-1.0)*sj6*x406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
evalcond[5]=new_r20;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x409=IKPowWithIntegerCheck(IKsign((((new_r00*new_r12))+(((-1.0)*new_r02*new_r10)))),-1);
if(!x409.valid){
continue;
}
CheckValue<IkReal> x410 = IKatan2WithCheck(IkReal((cj6*new_r02)),((-1.0)*cj6*new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x409.value)))+(x410.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x411=IKcos(j4);
IkReal x412=IKsin(j4);
IkReal x413=((1.0)*sj6);
IkReal x414=(cj6*x412);
IkReal x415=((1.0)*x411);
IkReal x416=(x411*x413);
evalcond[0]=(((new_r12*x412))+((new_r02*x411)));
evalcond[1]=((((-1.0)*new_r02*x412))+((new_r12*x411)));
evalcond[2]=(cj6+((new_r10*x412))+((new_r00*x411)));
evalcond[3]=(((cj6*x411))+((sj6*x412))+new_r00);
evalcond[4]=(sj6+((new_r00*x412))+(((-1.0)*new_r10*x415)));
evalcond[5]=(cj6+(((-1.0)*new_r11*x415))+((new_r01*x412)));
evalcond[6]=(x414+new_r01+(((-1.0)*x416)));
evalcond[7]=(x414+new_r10+(((-1.0)*x416)));
evalcond[8]=(((new_r11*x412))+(((-1.0)*x413))+((new_r01*x411)));
evalcond[9]=((((-1.0)*x412*x413))+(((-1.0)*cj6*x415))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x418=IKPowWithIntegerCheck(sj5,-1);
if(!x418.valid){
continue;
}
IkReal x417=x418.value;
CheckValue<IkReal> x419=IKPowWithIntegerCheck(new_r12,-1);
if(!x419.valid){
continue;
}
if( IKabs((x417*(x419.value)*(((-1.0)+(new_r02*new_r02)+(cj5*cj5))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r02*x417)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x417*(x419.value)*(((-1.0)+(new_r02*new_r02)+(cj5*cj5)))))+IKsqr(((-1.0)*new_r02*x417))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x417*(x419.value)*(((-1.0)+(new_r02*new_r02)+(cj5*cj5)))), ((-1.0)*new_r02*x417));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x420=IKcos(j4);
IkReal x421=IKsin(j4);
IkReal x422=((1.0)*cj6);
IkReal x423=((1.0)*new_r10);
IkReal x424=((1.0)*new_r02);
IkReal x425=((1.0)*sj5);
IkReal x426=(sj6*x420);
IkReal x427=(cj5*x421);
IkReal x428=(sj5*x420);
IkReal x429=(new_r11*x421);
IkReal x430=(cj5*x420);
IkReal x431=(new_r12*x421);
IkReal x432=(sj5*x421);
evalcond[0]=(x428+new_r02);
evalcond[1]=(x432+new_r12);
evalcond[2]=((((-1.0)*x421*x424))+((new_r12*x420)));
evalcond[3]=(sj5+x431+((new_r02*x420)));
evalcond[4]=((((-1.0)*x420*x423))+sj6+((new_r00*x421)));
evalcond[5]=(cj6+(((-1.0)*new_r11*x420))+((new_r01*x421)));
evalcond[6]=(((cj5*x426))+((cj6*x421))+new_r01);
evalcond[7]=(((cj5*sj6))+x429+((new_r01*x420)));
evalcond[8]=(((sj6*x421))+new_r00+(((-1.0)*x422*x430)));
evalcond[9]=((((-1.0)*x420*x422))+((sj6*x427))+new_r11);
evalcond[10]=(((new_r10*x421))+(((-1.0)*cj5*x422))+((new_r00*x420)));
evalcond[11]=((((-1.0)*x422*x427))+(((-1.0)*x426))+new_r10);
evalcond[12]=(((new_r22*sj5))+((new_r12*x427))+((new_r02*x430)));
evalcond[13]=(((new_r01*x430))+sj6+((new_r11*x427))+((new_r21*sj5)));
evalcond[14]=(((cj5*new_r20))+(((-1.0)*new_r00*x420*x425))+(((-1.0)*x423*x432)));
evalcond[15]=((((-1.0)*new_r01*x420*x425))+((cj5*new_r21))+(((-1.0)*x425*x429)));
evalcond[16]=((-1.0)+((cj5*new_r22))+(((-1.0)*x424*x428))+(((-1.0)*x425*x431)));
evalcond[17]=(((new_r00*x430))+((new_r20*sj5))+(((-1.0)*x422))+((new_r10*x427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x433=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x433.valid){
continue;
}
CheckValue<IkReal> x434 = IKatan2WithCheck(IkReal(((-1.0)*new_r12)),((-1.0)*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x433.value)))+(x434.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x435=IKcos(j4);
IkReal x436=IKsin(j4);
IkReal x437=((1.0)*cj6);
IkReal x438=((1.0)*new_r10);
IkReal x439=((1.0)*new_r02);
IkReal x440=((1.0)*sj5);
IkReal x441=(sj6*x435);
IkReal x442=(cj5*x436);
IkReal x443=(sj5*x435);
IkReal x444=(new_r11*x436);
IkReal x445=(cj5*x435);
IkReal x446=(new_r12*x436);
IkReal x447=(sj5*x436);
evalcond[0]=(x443+new_r02);
evalcond[1]=(x447+new_r12);
evalcond[2]=((((-1.0)*x436*x439))+((new_r12*x435)));
evalcond[3]=(sj5+x446+((new_r02*x435)));
evalcond[4]=(((new_r00*x436))+sj6+(((-1.0)*x435*x438)));
evalcond[5]=(((new_r01*x436))+cj6+(((-1.0)*new_r11*x435)));
evalcond[6]=(((cj5*x441))+((cj6*x436))+new_r01);
evalcond[7]=(((new_r01*x435))+((cj5*sj6))+x444);
evalcond[8]=((((-1.0)*x437*x445))+((sj6*x436))+new_r00);
evalcond[9]=((((-1.0)*x435*x437))+((sj6*x442))+new_r11);
evalcond[10]=(((new_r00*x435))+(((-1.0)*cj5*x437))+((new_r10*x436)));
evalcond[11]=((((-1.0)*x437*x442))+(((-1.0)*x441))+new_r10);
evalcond[12]=(((new_r12*x442))+((new_r22*sj5))+((new_r02*x445)));
evalcond[13]=(((new_r01*x445))+sj6+((new_r11*x442))+((new_r21*sj5)));
evalcond[14]=((((-1.0)*x438*x447))+((cj5*new_r20))+(((-1.0)*new_r00*x435*x440)));
evalcond[15]=(((cj5*new_r21))+(((-1.0)*x440*x444))+(((-1.0)*new_r01*x435*x440)));
evalcond[16]=((-1.0)+(((-1.0)*x439*x443))+((cj5*new_r22))+(((-1.0)*x440*x446)));
evalcond[17]=(((new_r00*x445))+(((-1.0)*x437))+((new_r20*sj5))+((new_r10*x442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "f1b4ece80cdeeec66467d9998ec73679"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
