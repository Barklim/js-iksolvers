/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-10-07 00:44:23.705464
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75;
x0=IKsin(j[0]);
x1=IKsin(j[5]);
x2=IKsin(j[2]);
x3=IKsin(j[3]);
x4=(x2*x3);
x5=IKcos(j[2]);
x6=IKcos(j[3]);
x7=(x5*x6);
x8=((1.0)*x7);
x9=(x4+(((-1.0)*(1.0)*x8)));
x10=(x1*x9);
x11=((0.258820142606703)*x10);
x12=IKcos(j[5]);
x13=((0.258820142606703)*x12);
x14=IKcos(j[4]);
x15=(x2*x6);
x16=((1.0)*x15);
x17=(x3*x5);
x18=((1.0)*x17);
x19=((((-1.0)*(1.0)*x16))+(((-1.0)*(1.0)*x18)));
x20=(x14*x19);
x21=(x13*x20);
x22=IKcos(j[0]);
x23=IKcos(j[1]);
IkReal x76=((1.0)*x23);
x24=((((-1.0)*x18*x76))+(((-1.0)*x16*x76)));
x25=IKsin(j[4]);
x26=IKsin(j[1]);
x27=((1.0)*x26);
x28=(x25*x27);
x29=((1.0)*x23*x4);
x30=(x14*(((((-1.0)*(1.0)*x29))+((x23*x7)))));
x31=(((x1*x24))+((x12*((x30+(((-1.0)*(1.0)*x28)))))));
x32=((0.965925532213041)*x1);
x33=(x2*x26*x6);
x34=((((-1.0)*(1.0)*x17*x27))+(((-1.0)*(1.0)*x33)));
x35=(x32*x34);
x36=((0.965925532213041)*x12);
x37=(x23*x25);
x38=(x26*x7);
x39=(x27*x4);
x40=(x14*((x38+(((-1.0)*(1.0)*x39)))));
x41=(x37+x40);
x42=(x36*x41);
x43=IKcos(j[6]);
x44=(x18+x16);
x45=(x25*x43*x44);
x46=((0.258820142606703)*x45);
x47=IKsin(j[6]);
x48=((1.0)*x12);
x49=((1.0)*x1);
x50=((((-1.0)*(1.0)*x14*x44*x49))+(((-1.0)*(1.0)*x48*x9)));
x51=(x47*x50);
x52=((0.258820142606703)*x51);
x53=(x14*x27);
x54=(x25*((x29+(((-1.0)*(1.0)*x23*x8)))));
x55=(((x49*(((((1.0)*x30))+(((-1.0)*(1.0)*x28))))))+(((-1.0)*(1.0)*x24*x48)));
x56=(((x43*(((((-1.0)*(1.0)*x53))+x54))))+((x47*x55)));
x57=(x14*x23);
x58=(x25*((x39+(((-1.0)*(1.0)*x27*x7)))));
x59=(x43*((x58+x57)));
x60=((0.965925532213041)*x59);
x61=(((x49*(((((1.0)*x37))+(((1.0)*x40))))))+(((-1.0)*(1.0)*x34*x48)));
x62=(x47*x61);
x63=((0.965925532213041)*x62);
x64=(x19*x25*x47);
x65=((0.258820142606703)*x64);
x66=(x43*x50);
x67=((0.258820142606703)*x66);
x68=(((x47*(((((-1.0)*(1.0)*x54))+x53))))+((x43*x55)));
x69=(x47*(((((-1.0)*(1.0)*x58))+(((-1.0)*(1.0)*x57)))));
x70=((0.965925532213041)*x69);
x71=(x43*x61);
x72=((0.965925532213041)*x71);
x73=((0.258820142606703)*x1);
x74=((0.04)*x17);
x75=((0.09)*x17);
eerot[0]=(((x0*(((((-1.0)*(1.0)*x21))+(((-1.0)*(1.0)*x11))))))+((x22*x31))+((x0*(((((-1.0)*(1.0)*x35))+(((-1.0)*(1.0)*x42)))))));
eerot[1]=(((x0*(((((-1.0)*(1.0)*x60))+(((-1.0)*(1.0)*x63))))))+((x0*(((((-1.0)*(1.0)*x52))+(((-1.0)*(1.0)*x46))))))+((x22*x56)));
eerot[2]=(((x22*x68))+((x0*(((((-1.0)*(1.0)*x70))+(((-1.0)*(1.0)*x72))))))+((x0*(((((-1.0)*(1.0)*x65))+(((-1.0)*(1.0)*x67)))))));
eetrans[0]=((((((((-0.235)*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[3]))))+(((-0.03)*(IKcos(j[1]))*(IKcos(j[2]))*(IKcos(j[3]))))+(((-0.25)*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((0.09)*(IKsin(j[1]))*(IKsin(j[4]))))+(((((((0.09)*(IKcos(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((-0.09)*(IKcos(j[1]))*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((0.04)*(IKsin(j[1]))*(IKsin(j[4]))))+(((((((0.04)*(IKcos(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((-0.04)*(IKcos(j[1]))*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((-0.09)*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[2]))))+(((-0.09)*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((-0.095)*(IKsin(j[1]))))+(((-0.235)*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[2]))))+(((0.03)*(IKcos(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((((((0.04)*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[3]))))+(((0.04)*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[2]))))))*(IKsin(j[5]))))))*(IKcos(j[0]))))+(((((((-0.00776460427820108)*(IKcos(j[3]))*(IKsin(j[2]))))+(((((((0.0103528057042681)*(IKsin(j[2]))*(IKsin(j[3]))))+(((-0.0103528057042681)*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((0.0608227335125751)*(IKcos(j[2]))*(IKcos(j[3]))))+(((((((-0.0232938128346032)*(IKsin(j[2]))*(IKsin(j[3]))))+(((0.0232938128346032)*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKcos(j[5]))))+(((((((-0.0103528057042681)*(IKcos(j[2]))*(IKsin(j[3]))))+(((-0.0103528057042681)*(IKcos(j[3]))*(IKsin(j[2]))))))*(IKcos(j[4]))*(IKcos(j[5]))))+(((-0.0608227335125751)*(IKsin(j[2]))*(IKsin(j[3]))))+(((0.0647050356516757)*(IKcos(j[2]))))+(((-0.00776460427820108)*(IKcos(j[2]))*(IKsin(j[3]))))+(((((((-0.0232938128346032)*(IKcos(j[3]))*(IKsin(j[2]))))+(((-0.0232938128346032)*(IKcos(j[2]))*(IKsin(j[3]))))))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[0]))))+(((-0.145)*(IKsin(j[0]))))+(((((((0.0289777659663912)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((((((-0.0386370212885216)*(IKcos(j[3]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.0386370212885216)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((((((0.0869332978991737)*(IKcos(j[1]))*(IKsin(j[4]))))+(((-0.965925532213041)*(((((-0.09)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((0.09)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((0.0386370212885216)*(IKcos(j[1]))*(IKsin(j[4]))))+(((-0.965925532213041)*(((((0.04)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((-0.04)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((0.0869332978991737)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((0.0869332978991737)*(IKcos(j[3]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[5]))))+(((-0.0917629255602389)*(IKcos(j[1]))))+(((0.226992500070065)*(IKcos(j[3]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.226992500070065)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-0.0289777659663912)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((0.24148138305326)*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[0])))));
eerot[3]=(((x22*((x35+x42))))+((x0*x31))+((x22*((x11+x21)))));
eerot[4]=(((x0*x56))+((x22*((x46+x52))))+((x22*((x60+x63)))));
eerot[5]=(((x22*((x67+x65))))+((x0*x68))+((x22*((x70+x72)))));
eetrans[1]=((((0.145)*(IKcos(j[0]))))+(((((((((((-0.0869332978991737)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((-0.0869332978991737)*(IKcos(j[3]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[5]))))+(((0.0917629255602389)*(IKcos(j[1]))))+(((-0.226992500070065)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((((((0.965925532213041)*(((((-0.09)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((0.09)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.0869332978991737)*(IKcos(j[1]))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((-0.226992500070065)*(IKcos(j[3]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.0289777659663912)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((((((-0.0386370212885216)*(IKcos(j[1]))*(IKsin(j[4]))))+(((0.965925532213041)*(((((0.04)*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((-0.04)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((0.0386370212885216)*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((0.0386370212885216)*(IKcos(j[3]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[5]))))+(((-0.0289777659663912)*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((-0.24148138305326)*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[0]))))+(((((((-0.0608227335125751)*(IKcos(j[2]))*(IKcos(j[3]))))+(((0.0608227335125751)*(IKsin(j[2]))*(IKsin(j[3]))))+(((0.00776460427820108)*(IKcos(j[3]))*(IKsin(j[2]))))+(((((((0.0232938128346032)*(IKcos(j[3]))*(IKsin(j[2]))))+(((0.0232938128346032)*(IKcos(j[2]))*(IKsin(j[3]))))))*(IKcos(j[4]))*(IKsin(j[5]))))+(((((((0.0103528057042681)*(IKcos(j[3]))*(IKsin(j[2]))))+(((0.0103528057042681)*(IKcos(j[2]))*(IKsin(j[3]))))))*(IKcos(j[4]))*(IKcos(j[5]))))+(((0.00776460427820108)*(IKcos(j[2]))*(IKsin(j[3]))))+(((((((0.0232938128346032)*(IKsin(j[2]))*(IKsin(j[3]))))+(((-0.0232938128346032)*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKcos(j[5]))))+(((((((0.0103528057042681)*(IKcos(j[2]))*(IKcos(j[3]))))+(((-0.0103528057042681)*(IKsin(j[2]))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((-0.0647050356516757)*(IKcos(j[2]))))))*(IKcos(j[0]))))+(((((((-0.235)*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[3]))))+(((-0.03)*(IKcos(j[1]))*(IKcos(j[2]))*(IKcos(j[3]))))+(((-0.25)*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((0.09)*(IKsin(j[1]))*(IKsin(j[4]))))+(((((((0.09)*(IKcos(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((-0.09)*(IKcos(j[1]))*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((0.04)*(IKsin(j[1]))*(IKsin(j[4]))))+(((((((0.04)*(IKcos(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((-0.04)*(IKcos(j[1]))*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((-0.09)*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[2]))))+(((-0.09)*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((-0.095)*(IKsin(j[1]))))+(((-0.235)*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[2]))))+(((0.03)*(IKcos(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((((((0.04)*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[3]))))+(((0.04)*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[2]))))))*(IKsin(j[5]))))))*(IKsin(j[0])))));
eerot[6]=((((-1.0)*(1.0)*x13*x41))+(((-1.0)*(1.0)*x34*x73))+(((0.965925532213041)*x10))+((x20*x36)));
eerot[7]=((((-1.0)*(0.258820142606703)*x59))+(((-1.0)*(0.258820142606703)*x62))+(((0.965925532213041)*x45))+(((0.965925532213041)*x51)));
eerot[8]=((((0.965925532213041)*x66))+(((-1.0)*(0.258820142606703)*x71))+(((-1.0)*(0.258820142606703)*x69))+(((0.965925532213041)*x64)));
IkReal x77=((1.0)*x13);
IkReal x78=((1.0)*x73);
eetrans[2]=((0.370296)+((x14*x36*(((((0.04)*x15))+x74))))+(((0.00776460427820108)*x38))+((x36*(((((0.09)*x4))+(((-1.0)*(0.09)*x7))))))+(((-1.0)*x78*(((((0.04)*x33))+((x26*x74))))))+(((0.0647050356516757)*x2*x26))+((x14*x32*((x75+(((0.09)*x15))))))+(((0.0608227335125751)*x33))+(((0.0289777659663912)*x17))+(((-1.0)*x77*(((((-1.0)*(0.04)*x37))+(((-1.0)*(0.04)*x40))))))+(((-1.0)*(0.24148138305326)*x5))+(((0.226992500070065)*x4))+(((-1.0)*x78*(((((-1.0)*(0.09)*x40))+(((-1.0)*(0.09)*x37))))))+(((-1.0)*x77*(((((-1.0)*(0.09)*x33))+(((-1.0)*(1.0)*x26*x75))))))+(((0.0608227335125751)*x17*x26))+(((-1.0)*(0.00776460427820108)*x26*x4))+((x32*(((((-1.0)*(0.04)*x4))+(((0.04)*x7))))))+(((0.0289777659663912)*x15))+(((-1.0)*(0.0245879135476367)*x23))+(((-1.0)*(0.226992500070065)*x7)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {0}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j11,cj11,sj11,htj11,j11mul,j12,cj12,sj12,htj12,j12mul,j13,cj13,sj13,htj13,j13mul,j14,cj14,sj14,htj14,j14mul,j15,cj15,sj15,htj15,j15mul,j16,cj16,sj16,htj16,j16mul,j0,cj0,sj0,htj0,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij11[2], _nj11,_ij12[2], _nj12,_ij13[2], _nj13,_ij14[2], _nj14,_ij15[2], _nj15,_ij16[2], _nj16,_ij0[2], _nj0;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j11=numeric_limits<IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; j13=numeric_limits<IkReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1; j14=numeric_limits<IkReal>::quiet_NaN(); _ij14[0] = -1; _ij14[1] = -1; _nj14 = -1; j15=numeric_limits<IkReal>::quiet_NaN(); _ij15[0] = -1; _ij15[1] = -1; _nj15 = -1; j16=numeric_limits<IkReal>::quiet_NaN(); _ij16[0] = -1; _ij16[1] = -1; _nj16 = -1;  _ij0[0] = -1; _ij0[1] = -1; _nj0 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]), htj0=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((-1.0)*(1.0)*r12*(IKsin(j0))))+(((-1.0)*(1.0)*r02*(IKcos(j0)))));
new_r01=(((r01*(IKcos(j0))))+((r11*(IKsin(j0)))));
new_r02=(((r00*(IKcos(j0))))+((r10*(IKsin(j0)))));
new_px=(((((px+(((0.04)*r00))))*(IKcos(j0))))+(((((((0.04)*r10))+py))*(IKsin(j0)))));
new_r10=((((0.965925532213041)*r02*(IKsin(j0))))+(((-1.0)*(0.965925532213041)*r12*(IKcos(j0))))+(((0.258820142606703)*r22)));
new_r11=((((-1.0)*(0.965925532213041)*r01*(IKsin(j0))))+(((-1.0)*(0.258820142606703)*r21))+(((0.965925532213041)*r11*(IKcos(j0)))));
new_r12=((((0.965925532213041)*r10*(IKcos(j0))))+(((-1.0)*(0.258820142606703)*r20))+(((-1.0)*(0.965925532213041)*r00*(IKsin(j0)))));
new_py=((-0.0442191386441994)+(((-1.0)*(0.258820142606703)*pz))+(((-1.0)*(0.0103528057042681)*r20))+(((((((0.0386370212885216)*r10))+(((0.965925532213041)*py))))*(IKcos(j0))))+(((((((-1.0)*(0.0386370212885216)*r00))+(((-1.0)*(0.965925532213041)*px))))*(IKsin(j0)))));
new_r20=((((-1.0)*(0.965925532213041)*r22))+(((-1.0)*(0.258820142606703)*r12*(IKcos(j0))))+(((0.258820142606703)*r02*(IKsin(j0)))));
new_r21=((((0.258820142606703)*r11*(IKcos(j0))))+(((-1.0)*(0.258820142606703)*r01*(IKsin(j0))))+(((0.965925532213041)*r21)));
new_r22=((((-1.0)*(0.258820142606703)*r00*(IKsin(j0))))+(((0.258820142606703)*r10*(IKcos(j0))))+(((0.965925532213041)*r20)));
new_pz=((-0.395207281554332)+(((((((-1.0)*(0.258820142606703)*px))+(((-1.0)*(0.0103528057042681)*r00))))*(IKsin(j0))))+(((0.965925532213041)*pz))+(((0.0386370212885216)*r20))+(((((((0.0103528057042681)*r10))+(((0.258820142606703)*py))))*(IKcos(j0)))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x79=((1.0)*py);
IkReal x80=((1.0)*pz);
IkReal x81=((1.0)*px);
pp=((pz*pz)+(py*py)+(px*px));
npx=(((pz*r20))+((py*r10))+((px*r00)));
npy=(((pz*r21))+((py*r11))+((px*r01)));
npz=(((px*r02))+((pz*r22))+((py*r12)));
rxp0_0=((((-1.0)*r20*x79))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x80)));
rxp0_2=((((-1.0)*r10*x81))+((py*r00)));
rxp1_0=((((-1.0)*r21*x79))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x80)));
rxp1_2=((((-1.0)*r11*x81))+((py*r01)));
rxp2_0=((((-1.0)*r22*x79))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x80))+((px*r22)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x81)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x82=(cj14*r21);
IkReal x83=(r22*sj14);
IkReal x84=((2.0)*r20);
IkReal x85=(cj14*x84);
IkReal x86=((-1.0)*x82);
IkReal x87=((0.57)*r20);
IkReal x88=((6.0)*rxp0_0);
IkReal x89=(x87+x88);
IkReal x90=((65.0)*npx);
IkReal x91=((100.0)*pp);
IkReal x92=((6.0)*rxp0_1);
IkReal x93=(x91+x92);
IkReal x94=((1.14)*r21);
IkReal x95=((12.0)*rxp1_0);
IkReal x96=((12.0)*rxp1_1);
IkReal x97=((((-1.0)*x88))+(((-1.0)*x87)));
IkReal x98=(x91+(((-1.0)*x92)));
IkReal x99=(r21*sj14);
IkReal x100=(cj14*r22);
IkReal x101=((-1.0)*x100);
IkReal x102=((2.0)*r01);
IkReal x103=(sj14*x84);
IkReal x104=((2.0)*r11);
IkReal x105=((-1.0)*(((1.0)*r00)));
IkReal x106=((-1.0)*x99);
IkReal x107=((-1.0)*(((1.0)*r10)));
IkReal x108=((0.095)*r00);
IkReal x109=((((-1.0)*x108))+rxp0_2);
IkReal x110=((0.095)*r10);
IkReal x111=((-1.0)*x110);
IkReal x112=((0.19)*r01);
IkReal x113=((2.0)*rxp1_2);
IkReal x114=((0.19)*r11);
IkReal x115=(x108+(((-1.0)*(1.0)*rxp0_2)));
IkReal x116=((1.08)*r01);
IkReal x117=((((1.14)*r22))+(((12.0)*rxp2_0)));
IkReal x118=((1.08)*r11);
IkReal x119=((((12.0)*rxp2_1))+(((-1.0)*(94.0)*npz)));
IkReal x120=((2.0)*r02);
IkReal x121=((2.0)*r12);
IkReal x122=((0.18)*r21);
IkReal x123=((((2.0)*rxp2_2))+(((-1.0)*(0.19)*r02)));
IkReal x124=((-1.0)*(((0.19)*r12)));
IkReal x125=((-1.0)*x83);
IkReal x126=((29.0)*npx);
op[0]=(x83+x82);
op[1]=0;
op[2]=x85;
op[3]=0;
op[4]=(x86+x83);
op[5]=0;
op[6]=x89;
op[7]=((3.5)+x93+(((-1.0)*x90)));
op[8]=((((-1.0)*x94))+(((-1.0)*x95)));
op[9]=((((130.0)*npy))+(((-1.0)*x96)));
op[10]=x97;
op[11]=((3.5)+x98+x90);
op[12]=(x101+x99+r00);
op[13]=r10;
op[14]=(x103+(((-1.0)*x102)));
op[15]=((-1.0)*x104);
op[16]=(x105+x106+x101);
op[17]=x107;
op[18]=x109;
op[19]=x111;
op[20]=((((-1.0)*x113))+x112);
op[21]=x114;
op[22]=x115;
op[23]=x110;
op[24]=((-1.0)*x103);
op[25]=0;
op[26]=((4.0)*x99);
op[27]=0;
op[28]=x103;
op[29]=0;
op[30]=((((-1.0)*x116))+x117);
op[31]=((((-1.0)*x118))+x119);
op[32]=((-1.0)*(((2.16)*r00)));
op[33]=((-1.0)*(((2.16)*r10)));
op[34]=(x117+x116);
op[35]=(x119+x118);
op[36]=(x120+x85);
op[37]=x121;
op[38]=((-4.0)*x82);
op[39]=0;
op[40]=(x120+(((-1.0)*x85)));
op[41]=x121;
op[42]=(x123+(((-1.0)*x122)));
op[43]=x124;
op[44]=((-1.0)*(((0.36)*r20)));
op[45]=0;
op[46]=(x122+x123);
op[47]=x124;
op[48]=(x125+x82);
op[49]=0;
op[50]=x85;
op[51]=0;
op[52]=(x125+x86);
op[53]=0;
op[54]=x97;
op[55]=((-4.96)+x126+x98);
op[56]=(x95+x94);
op[57]=(x96+(((-1.0)*(58.0)*npy)));
op[58]=x89;
op[59]=((-4.96)+x93+(((-1.0)*x126)));
op[60]=(x105+x100+x99);
op[61]=x107;
op[62]=(x102+x103);
op[63]=x104;
op[64]=(x106+x100+r00);
op[65]=r10;
op[66]=x115;
op[67]=x110;
op[68]=((((-1.0)*x112))+x113);
op[69]=((-1.0)*x114);
op[70]=x109;
op[71]=x111;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j15array[16], cj15array[16], sj15array[16], j16array[16], cj16array[16], sj16array[16], j11array[16], cj11array[16], sj11array[16];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ij15 += 3)
{
IkReal htj15 = zeror[ij15+0], htj16 = zeror[ij15+1], htj11 = zeror[ij15+2];
if(isnan(htj15)||isnan(htj16)||isnan(htj11)){
continue;
}
j15array[numsolutions]=((2.0)*(atan(htj15)));
j16array[numsolutions]=((2.0)*(atan(htj16)));
j11array[numsolutions]=((2.0)*(atan(htj11)));
if(isinf(htj15)){
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
}
else{
IkReal x127=htj15*htj15;
CheckValue<IkReal> x128=IKPowWithIntegerCheck(((1.0)+x127),-1);
if(!x128.valid){
continue;
}
cj15array[numsolutions]=((x128.value)*(((1.0)+(((-1.0)*x127)))));
CheckValue<IkReal> x129=IKPowWithIntegerCheck(((1.0)+(htj15*htj15)),-1);
if(!x129.valid){
continue;
}
sj15array[numsolutions]=((2.0)*htj15*(x129.value));
}
if(isinf(htj16)){
cj16array[numsolutions] = IKcos(j16array[numsolutions]);
sj16array[numsolutions] = IKsin(j16array[numsolutions]);
}
else{
IkReal x130=htj16*htj16;
CheckValue<IkReal> x131=IKPowWithIntegerCheck(((1.0)+x130),-1);
if(!x131.valid){
continue;
}
cj16array[numsolutions]=((x131.value)*(((1.0)+(((-1.0)*x130)))));
CheckValue<IkReal> x132=IKPowWithIntegerCheck(((1.0)+(htj16*htj16)),-1);
if(!x132.valid){
continue;
}
sj16array[numsolutions]=((2.0)*htj16*(x132.value));
}
if(isinf(htj11)){
cj11array[numsolutions] = IKcos(j11array[numsolutions]);
sj11array[numsolutions] = IKsin(j11array[numsolutions]);
}
else{
IkReal x133=htj11*htj11;
CheckValue<IkReal> x134=IKPowWithIntegerCheck(((1.0)+x133),-1);
if(!x134.valid){
continue;
}
cj11array[numsolutions]=((x134.value)*(((1.0)+(((-1.0)*x133)))));
CheckValue<IkReal> x135=IKPowWithIntegerCheck(((1.0)+(htj11*htj11)),-1);
if(!x135.valid){
continue;
}
sj11array[numsolutions]=((2.0)*htj11*(x135.value));
}
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
if( j16array[numsolutions] > IKPI )
{
    j16array[numsolutions]-=IK2PI;
}
else if( j16array[numsolutions] < -IKPI )
{
    j16array[numsolutions]+=IK2PI;
}
if( j11array[numsolutions] > IKPI )
{
    j11array[numsolutions]-=IK2PI;
}
else if( j11array[numsolutions] < -IKPI )
{
    j11array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j15valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj15 = 16;
_nj16 = 1;
_nj11 = 1;
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
_ij16[0] = 0; _ij16[1] = -1;
_ij11[0] = 0; _ij11[1] = -1;
for(int iij15 = ij15+1; iij15 < numsolutions; ++iij15)
{
if( !j15valid[iij15] ) { continue; }
if( IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(cj16array[ij15]-cj16array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij15]-sj16array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(cj11array[ij15]-cj11array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij15]-sj11array[iij15]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j15valid[iij15]=false; _ij15[1] = iij15; _ij16[1] = 0; _ij11[1] = 0;  break; 
}
}
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

    j16 = j16array[ij15]; cj16 = cj16array[ij15]; sj16 = sj16array[ij15];

    j11 = j11array[ij15]; cj11 = cj11array[ij15]; sj11 = sj11array[ij15];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j14eval[3];
IkReal x136=((1.0)*cj15);
IkReal x137=(((cj15*r01*sj16))+(((-1.0)*r02*sj15))+(((-1.0)*cj16*r00*x136)));
IkReal x138=(cj11*cj16);
IkReal x139=(cj11*sj16);
j14eval[0]=x137;
j14eval[1]=IKsign(x137);
j14eval[2]=((IKabs((((r20*x139))+((r21*x138)))))+(IKabs((((r20*sj15*x138))+(((-1.0)*cj11*r22*x136))+(((-1.0)*r21*sj15*x139))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x140=(((cj15*cj16*r10))+((r12*sj15))+(((-1.0)*(1.0)*cj15*r11*sj16)));
IkReal x141=(r21*sj11);
IkReal x142=(r20*sj11);
j14eval[0]=x140;
j14eval[1]=IKsign(x140);
j14eval[2]=((IKabs((((cj15*r22*sj11))+((sj15*sj16*x141))+(((-1.0)*cj16*sj15*x142)))))+(IKabs((((cj16*x141))+((sj16*x142))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x143=((((-1.0)*(1.0)*r22*sj15))+((cj15*r21*sj16))+(((-1.0)*(1.0)*cj15*cj16*r20)));
j14eval[0]=x143;
j14eval[1]=IKsign(x143);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
IkReal x144=(cj16*r10);
IkReal x145=(r11*sj16);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj15*x145))+((r12*sj15))+((cj15*x144)));
evalcond[2]=((0.095)+(((-1.0)*(1.0)*py))+(((-0.09)*x145))+(((0.09)*x144)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj11=0;
cj11=1.0;
j11=0;
IkReal x146=((1.0)*cj15);
IkReal x147=(((r22*sj15))+(((-1.0)*r21*sj16*x146))+((cj15*cj16*r20)));
j14eval[0]=x147;
j14eval[1]=((IKabs((((r00*sj16))+((cj16*r01)))))+(IKabs(((((-1.0)*(1.0)*r01*sj15*sj16))+(((-1.0)*r02*x146))+((cj16*r00*sj15))))));
j14eval[2]=IKsign(x147);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj11=0;
cj11=1.0;
j11=0;
IkReal x148=((1.0)*sj15);
IkReal x149=((1.0)*cj15);
IkReal x150=((((-1.0)*r02*x148))+((cj15*r01*sj16))+(((-1.0)*cj16*r00*x149)));
j14eval[0]=x150;
j14eval[1]=IKsign(x150);
j14eval[2]=((IKabs((((cj16*r21))+((r20*sj16)))))+(IKabs(((((-1.0)*r21*sj16*x148))+(((-1.0)*r22*x149))+((cj16*r20*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj11=0;
cj11=1.0;
j11=0;
IkReal x151=r10*r10;
IkReal x152=r11*r11;
IkReal x153=cj15*cj15;
IkReal x154=((2.0)*cj15*r12);
IkReal x155=(cj16*r10*sj15);
IkReal x156=(r11*sj15*sj16);
IkReal x157=(x152*x153);
IkReal x158=(r10*sj16);
IkReal x159=cj16*cj16;
IkReal x160=(((x153*(r12*r12)))+((x157*x159))+(((-1.0)*x157))+x152+x151+(((-1.0)*x154*x155))+((x154*x156))+(((-1.0)*x151*x153*x159))+(((2.0)*cj16*r11*x153*x158)));
j14eval[0]=x160;
j14eval[1]=((IKabs((x156+((cj15*r12))+(((-1.0)*x155)))))+(IKabs((x158+((cj16*r11))))));
j14eval[2]=IKsign(x160);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j12, j13, j14]

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x161=(r11*sj15*sj16);
IkReal x162=(cj16*r10*sj15);
IkReal x163=(r10*sj16);
IkReal x164=r10*r10;
IkReal x165=r11*r11;
IkReal x166=cj15*cj15;
IkReal x167=((2.0)*cj15*r12);
IkReal x168=(x165*x166);
IkReal x169=cj16*cj16;
CheckValue<IkReal> x170 = IKatan2WithCheck(IkReal(((((-1.0)*x162))+((cj15*r12))+x161)),IkReal((((cj16*r11))+x163)),IKFAST_ATAN2_MAGTHRESH);
if(!x170.valid){
continue;
}
CheckValue<IkReal> x171=IKPowWithIntegerCheck(IKsign(((((-1.0)*x162*x167))+(((-1.0)*x168))+(((-1.0)*x164*x166*x169))+((x166*(r12*r12)))+((x161*x167))+x164+x165+((x168*x169))+(((2.0)*cj16*r11*x163*x166)))),-1);
if(!x171.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x170.value)+(((1.5707963267949)*(x171.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x172=IKsin(j14);
IkReal x173=(cj16*r11);
IkReal x174=(r10*sj16);
IkReal x175=IKcos(j14);
IkReal x176=((1.0)*x175);
IkReal x177=((1.0)*sj16*x175);
IkReal x178=((1.0)*cj15*x172);
IkReal x179=((1.0)*cj16*x175);
IkReal x180=(cj16*sj15*x172);
IkReal x181=((1.0)*sj15*sj16*x172);
evalcond[0]=((((-1.0)*r11*sj15*x177))+(((-1.0)*cj15*r12*x176))+((x172*x173))+((cj16*r10*sj15*x175))+((x172*x174)));
evalcond[1]=((((-1.0)*r20*x177))+(((-1.0)*r21*x181))+(((-1.0)*r22*x178))+((r20*x180))+(((-1.0)*r21*x179)));
evalcond[2]=((((-1.0)*r01*x179))+(((-1.0)*r00*x177))+(((-1.0)*r02*x178))+(((-1.0)*r01*x181))+((r00*x180)));
evalcond[3]=((1.0)+(((-1.0)*x174*x176))+(((-1.0)*r12*x178))+(((-1.0)*x173*x176))+((r10*x180))+(((-1.0)*r11*x181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[1];
sj11=0;
cj11=1.0;
j11=0;
IkReal x182=(cj16*r20);
IkReal x183=(r02*sj15);
IkReal x184=(r21*sj16);
IkReal x185=(r22*sj15);
IkReal x186=(cj15*cj16*r00);
IkReal x187=(cj15*cj16*r20);
IkReal x188=(cj15*r01*sj16);
IkReal x189=(cj15*r21*sj16);
IkReal x190=((((-0.36)*x186))+(((2.82)*x187))+(((-1.0)*(12.0)*pz))+(((-2.82)*x189))+(((0.36)*x188))+(((-1.08)*x184))+(((1.08)*x182))+(((-0.36)*x183))+(((2.82)*x185)));
j12eval[0]=((IKabs(((-1.0)+x190)))+(IKabs(((1.0)+(((-0.12)*x186))+(((-0.94)*x189))+(((-1.0)*(4.0)*pz))+(((0.12)*x188))+(((-0.36)*x184))+(((0.94)*x185))+(((-0.12)*x183))+(((0.94)*x187))+(((0.36)*x182)))))+(IKabs(((1.0)+x190))));
if( IKabs(j12eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j12, j13]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j12evalpoly[1];
IkReal x191=(cj16*r20);
IkReal x192=(r02*sj15);
IkReal x193=(r21*sj16);
IkReal x194=(r22*sj15);
IkReal x195=(cj15*cj16*r00);
IkReal x196=(cj15*cj16*r20);
IkReal x197=(cj15*r01*sj16);
IkReal x198=(cj15*r21*sj16);
IkReal x199=((((-0.12)*x195))+(((-0.36)*x193))+(((-0.94)*x198))+(((-1.0)*(4.0)*pz))+(((-0.12)*x192))+(((0.94)*x194))+(((0.36)*x191))+(((0.94)*x196))+(((0.12)*x197)));
IkReal x200=((((-1.08)*x193))+(((-1.0)*(12.0)*pz))+(((0.36)*x197))+(((-0.36)*x192))+(((2.82)*x194))+(((-0.36)*x195))+(((1.08)*x191))+(((-2.82)*x198))+(((2.82)*x196)));
op[0]=((1.0)+x199);
op[1]=0;
op[2]=((1.0)+x200);
op[3]=0;
op[4]=((-1.0)+x200);
op[5]=0;
op[6]=((-1.0)+x199);
polyroots6(op,zeror,numroots);
IkReal j12array[6], cj12array[6], sj12array[6], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[6]={true,true,true,true,true,true};
_nj12 = 6;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

IkReal x201=(cj16*r00);
IkReal x202=(cj16*r20);
IkReal x203=(r01*sj16);
IkReal x204=(r21*sj16);
IkReal x205=(r22*sj15);
IkReal x206=(cj15*cj16*r20);
IkReal x207=(cj15*r21*sj16);
IkReal x208=((((-0.0846)*x204))+(((0.0108)*x201))+(((0.2245)*x206))+(((-1.0)*(0.94)*pz))+(((0.2245)*x205))+(((-0.2245)*x207))+(((0.0846)*x202))+(((-0.0108)*x203))+(((-1.0)*(0.12)*px)));
IkReal x209=((((-1.0)*(0.36)*px))+(((-0.6735)*x207))+(((0.6735)*x206))+(((0.6735)*x205))+(((0.0324)*x201))+(((-1.0)*(2.82)*pz))+(((-0.0324)*x203))+(((-0.2538)*x204))+(((0.2538)*x202)));
j12evalpoly[0]=((-0.235)+(((htj12*htj12*htj12*htj12*htj12*htj12)*(((0.235)+x208))))+(((-1.0)*(0.12)*(htj12*htj12*htj12)))+(((htj12*htj12*htj12*htj12)*(((0.235)+x209))))+(((-1.0)*(0.06)*htj12))+(((htj12*htj12)*(((-0.235)+x209))))+x208+(((-1.0)*(0.06)*(htj12*htj12*htj12*htj12*htj12))));
if( IKabs(j12evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x210=(r22*sj15);
IkReal x211=((1.0)*cj12);
IkReal x212=(r02*sj15);
IkReal x213=(cj12*cj15*sj16);
IkReal x214=(cj15*sj12);
IkReal x215=(cj16*r20);
IkReal x216=(cj16*r00);
IkReal x217=((1.0)*cj12*cj15);
IkReal x218=((1.0)*cj15*sj12);
if( IKabs((((sj12*x210))+((x214*x215))+(((-1.0)*x211*x212))+(((-1.0)*r21*sj16*x218))+(((-1.0)*x216*x217))+((r01*x213)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj12*x212))+(((-1.0)*x215*x217))+((r21*x213))+((r01*sj16*x214))+(((-1.0)*x216*x218))+(((-1.0)*x210*x211)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj12*x210))+((x214*x215))+(((-1.0)*x211*x212))+(((-1.0)*r21*sj16*x218))+(((-1.0)*x216*x217))+((r01*x213))))+IKsqr(((((-1.0)*sj12*x212))+(((-1.0)*x215*x217))+((r21*x213))+((r01*sj16*x214))+(((-1.0)*x216*x218))+(((-1.0)*x210*x211))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((sj12*x210))+((x214*x215))+(((-1.0)*x211*x212))+(((-1.0)*r21*sj16*x218))+(((-1.0)*x216*x217))+((r01*x213))), ((((-1.0)*sj12*x212))+(((-1.0)*x215*x217))+((r21*x213))+((r01*sj16*x214))+(((-1.0)*x216*x218))+(((-1.0)*x210*x211))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x219=IKsin(j13);
IkReal x220=(cj12*x219);
IkReal x221=IKcos(j13);
IkReal x222=(sj12*x221);
IkReal x223=(cj15*cj16);
IkReal x224=((1.0)*cj15*sj16);
IkReal x225=(cj12*x221);
IkReal x226=(sj12*x219);
IkReal x227=((((-1.0)*x226))+x225);
IkReal x228=(cj16*sj14);
IkReal x229=(sj14*sj16);
IkReal x230=((1.0)*cj14*cj15);
IkReal x231=(cj14*cj16*sj15);
IkReal x232=((1.0)*cj14*sj15*sj16);
IkReal x233=((0.09)*cj16);
IkReal x234=((0.09)*sj16);
evalcond[0]=(((r00*x223))+((r02*sj15))+(((-1.0)*r01*x224))+x220+x222);
evalcond[1]=(((r22*sj15))+(((-1.0)*r21*x224))+((r20*x223))+x227);
evalcond[2]=(((r00*x229))+((r01*x228))+(((-1.0)*r01*x232))+(((-1.0)*r02*x230))+((r00*x231))+x227);
evalcond[3]=(((r20*x231))+((r20*x229))+(((-1.0)*x222))+(((-1.0)*r22*x230))+((r21*x228))+(((-1.0)*r21*x232))+(((-1.0)*x220)));
evalcond[4]=((((-1.0)*(1.0)*pz))+((r20*x233))+(((0.03)*x222))+(((-0.235)*x225))+(((0.03)*x220))+(((-1.0)*(0.25)*cj12))+(((0.235)*x226))+(((-1.0)*r21*x234)));
evalcond[5]=((((-1.0)*r01*x234))+(((-1.0)*(1.0)*px))+(((-0.235)*x222))+(((-1.0)*(0.25)*sj12))+(((-0.235)*x220))+((r00*x233))+(((-0.03)*x225))+(((0.03)*x226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x235=((1.0)*sj15);
IkReal x236=((1.0)*cj15);
CheckValue<IkReal> x237 = IKatan2WithCheck(IkReal((((cj16*r21))+((r20*sj16)))),IkReal(((((-1.0)*r21*sj16*x235))+((cj16*r20*sj15))+(((-1.0)*r22*x236)))),IKFAST_ATAN2_MAGTHRESH);
if(!x237.valid){
continue;
}
CheckValue<IkReal> x238=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*x235))+((cj15*r01*sj16))+(((-1.0)*cj16*r00*x236)))),-1);
if(!x238.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x237.value)+(((1.5707963267949)*(x238.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x239=IKsin(j14);
IkReal x240=(cj16*r11);
IkReal x241=(r10*sj16);
IkReal x242=IKcos(j14);
IkReal x243=((1.0)*x242);
IkReal x244=((1.0)*sj16*x242);
IkReal x245=((1.0)*cj15*x239);
IkReal x246=((1.0)*cj16*x242);
IkReal x247=(cj16*sj15*x239);
IkReal x248=((1.0)*sj15*sj16*x239);
evalcond[0]=(((x239*x241))+(((-1.0)*r11*sj15*x244))+(((-1.0)*cj15*r12*x243))+((cj16*r10*sj15*x242))+((x239*x240)));
evalcond[1]=((((-1.0)*r21*x246))+(((-1.0)*r20*x244))+(((-1.0)*r22*x245))+((r20*x247))+(((-1.0)*r21*x248)));
evalcond[2]=((((-1.0)*r01*x248))+(((-1.0)*r01*x246))+(((-1.0)*r00*x244))+((r00*x247))+(((-1.0)*r02*x245)));
evalcond[3]=((1.0)+(((-1.0)*r12*x245))+(((-1.0)*x240*x243))+(((-1.0)*r11*x248))+(((-1.0)*x241*x243))+((r10*x247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[1];
sj11=0;
cj11=1.0;
j11=0;
IkReal x249=(cj16*r20);
IkReal x250=(r02*sj15);
IkReal x251=(r21*sj16);
IkReal x252=(r22*sj15);
IkReal x253=(cj15*cj16*r00);
IkReal x254=(cj15*cj16*r20);
IkReal x255=(cj15*r01*sj16);
IkReal x256=(cj15*r21*sj16);
IkReal x257=((((-1.0)*(12.0)*pz))+(((-1.08)*x251))+(((2.82)*x252))+(((-0.36)*x253))+(((2.82)*x254))+(((-2.82)*x256))+(((-0.36)*x250))+(((0.36)*x255))+(((1.08)*x249)));
j12eval[0]=((IKabs(((1.0)+x257)))+(IKabs(((1.0)+(((-0.94)*x256))+(((0.12)*x255))+(((-1.0)*(4.0)*pz))+(((0.94)*x252))+(((-0.12)*x250))+(((-0.12)*x253))+(((0.94)*x254))+(((-0.36)*x251))+(((0.36)*x249)))))+(IKabs(((-1.0)+x257))));
if( IKabs(j12eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j12, j13]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j12evalpoly[1];
IkReal x258=(cj16*r20);
IkReal x259=(r02*sj15);
IkReal x260=(r21*sj16);
IkReal x261=(r22*sj15);
IkReal x262=(cj15*cj16*r00);
IkReal x263=(cj15*cj16*r20);
IkReal x264=(cj15*r01*sj16);
IkReal x265=(cj15*r21*sj16);
IkReal x266=((((-0.12)*x262))+(((-0.36)*x260))+(((0.36)*x258))+(((-1.0)*(4.0)*pz))+(((-0.12)*x259))+(((0.94)*x263))+(((-0.94)*x265))+(((0.94)*x261))+(((0.12)*x264)));
IkReal x267=((((1.08)*x258))+(((0.36)*x264))+(((-1.0)*(12.0)*pz))+(((2.82)*x263))+(((-0.36)*x259))+(((-2.82)*x265))+(((-1.08)*x260))+(((2.82)*x261))+(((-0.36)*x262)));
op[0]=((1.0)+x266);
op[1]=0;
op[2]=((1.0)+x267);
op[3]=0;
op[4]=((-1.0)+x267);
op[5]=0;
op[6]=((-1.0)+x266);
polyroots6(op,zeror,numroots);
IkReal j12array[6], cj12array[6], sj12array[6], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[6]={true,true,true,true,true,true};
_nj12 = 6;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

IkReal x268=(cj16*r00);
IkReal x269=(cj16*r20);
IkReal x270=(r01*sj16);
IkReal x271=(r21*sj16);
IkReal x272=(r22*sj15);
IkReal x273=(cj15*cj16*r20);
IkReal x274=(cj15*r21*sj16);
IkReal x275=((((-0.0846)*x271))+(((0.0846)*x269))+(((-0.2245)*x274))+(((0.2245)*x273))+(((0.2245)*x272))+(((-1.0)*(0.94)*pz))+(((0.0108)*x268))+(((-0.0108)*x270))+(((-1.0)*(0.12)*px)));
IkReal x276=((((-1.0)*(0.36)*px))+(((-0.6735)*x274))+(((0.2538)*x269))+(((-0.2538)*x271))+(((0.6735)*x272))+(((0.0324)*x268))+(((-1.0)*(2.82)*pz))+(((0.6735)*x273))+(((-0.0324)*x270)));
j12evalpoly[0]=((-0.235)+(((-1.0)*(0.12)*(htj12*htj12*htj12)))+(((-1.0)*(0.06)*htj12))+x275+(((htj12*htj12*htj12*htj12)*(((0.235)+x276))))+(((htj12*htj12*htj12*htj12*htj12*htj12)*(((0.235)+x275))))+(((-1.0)*(0.06)*(htj12*htj12*htj12*htj12*htj12)))+(((htj12*htj12)*(((-0.235)+x276)))));
if( IKabs(j12evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x277=(r22*sj15);
IkReal x278=((1.0)*cj12);
IkReal x279=(r02*sj15);
IkReal x280=(cj12*cj15*sj16);
IkReal x281=(cj15*sj12);
IkReal x282=(cj16*r20);
IkReal x283=(cj16*r00);
IkReal x284=((1.0)*cj12*cj15);
IkReal x285=((1.0)*cj15*sj12);
if( IKabs((((sj12*x277))+((r01*x280))+(((-1.0)*x283*x284))+((x281*x282))+(((-1.0)*r21*sj16*x285))+(((-1.0)*x278*x279)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x283*x285))+(((-1.0)*x282*x284))+(((-1.0)*sj12*x279))+((r21*x280))+(((-1.0)*x277*x278))+((r01*sj16*x281)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj12*x277))+((r01*x280))+(((-1.0)*x283*x284))+((x281*x282))+(((-1.0)*r21*sj16*x285))+(((-1.0)*x278*x279))))+IKsqr(((((-1.0)*x283*x285))+(((-1.0)*x282*x284))+(((-1.0)*sj12*x279))+((r21*x280))+(((-1.0)*x277*x278))+((r01*sj16*x281))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((sj12*x277))+((r01*x280))+(((-1.0)*x283*x284))+((x281*x282))+(((-1.0)*r21*sj16*x285))+(((-1.0)*x278*x279))), ((((-1.0)*x283*x285))+(((-1.0)*x282*x284))+(((-1.0)*sj12*x279))+((r21*x280))+(((-1.0)*x277*x278))+((r01*sj16*x281))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x286=IKsin(j13);
IkReal x287=(cj12*x286);
IkReal x288=IKcos(j13);
IkReal x289=(sj12*x288);
IkReal x290=(cj15*cj16);
IkReal x291=((1.0)*cj15*sj16);
IkReal x292=(cj12*x288);
IkReal x293=(sj12*x286);
IkReal x294=(x292+(((-1.0)*x293)));
IkReal x295=(cj16*sj14);
IkReal x296=(sj14*sj16);
IkReal x297=((1.0)*cj14*cj15);
IkReal x298=(cj14*cj16*sj15);
IkReal x299=((1.0)*cj14*sj15*sj16);
IkReal x300=((0.09)*cj16);
IkReal x301=((0.09)*sj16);
evalcond[0]=(((r02*sj15))+((r00*x290))+(((-1.0)*r01*x291))+x287+x289);
evalcond[1]=((((-1.0)*r21*x291))+x294+((r22*sj15))+((r20*x290)));
evalcond[2]=(((r01*x295))+x294+((r00*x298))+(((-1.0)*r01*x299))+((r00*x296))+(((-1.0)*r02*x297)));
evalcond[3]=(((r20*x298))+(((-1.0)*r22*x297))+((r21*x295))+(((-1.0)*x287))+(((-1.0)*r21*x299))+((r20*x296))+(((-1.0)*x289)));
evalcond[4]=((((-1.0)*r21*x301))+(((-0.235)*x292))+(((0.235)*x293))+(((-1.0)*(1.0)*pz))+(((0.03)*x289))+((r20*x300))+(((-1.0)*(0.25)*cj12))+(((0.03)*x287)));
evalcond[5]=((((-1.0)*(1.0)*px))+(((-1.0)*(0.25)*sj12))+(((-1.0)*r01*x301))+(((-0.03)*x292))+((r00*x300))+(((-0.235)*x289))+(((0.03)*x293))+(((-0.235)*x287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x302=((1.0)*cj15);
CheckValue<IkReal> x303 = IKatan2WithCheck(IkReal((((r00*sj16))+((cj16*r01)))),IkReal(((((-1.0)*r02*x302))+(((-1.0)*(1.0)*r01*sj15*sj16))+((cj16*r00*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x303.valid){
continue;
}
CheckValue<IkReal> x304=IKPowWithIntegerCheck(IKsign((((r22*sj15))+(((-1.0)*r21*sj16*x302))+((cj15*cj16*r20)))),-1);
if(!x304.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x303.value)+(((1.5707963267949)*(x304.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x305=IKsin(j14);
IkReal x306=(cj16*r11);
IkReal x307=(r10*sj16);
IkReal x308=IKcos(j14);
IkReal x309=((1.0)*x308);
IkReal x310=((1.0)*sj16*x308);
IkReal x311=((1.0)*cj15*x305);
IkReal x312=((1.0)*cj16*x308);
IkReal x313=(cj16*sj15*x305);
IkReal x314=((1.0)*sj15*sj16*x305);
evalcond[0]=(((cj16*r10*sj15*x308))+((x305*x306))+(((-1.0)*cj15*r12*x309))+(((-1.0)*r11*sj15*x310))+((x305*x307)));
evalcond[1]=(((r20*x313))+(((-1.0)*r21*x314))+(((-1.0)*r20*x310))+(((-1.0)*r22*x311))+(((-1.0)*r21*x312)));
evalcond[2]=((((-1.0)*r01*x312))+(((-1.0)*r01*x314))+(((-1.0)*r00*x310))+((r00*x313))+(((-1.0)*r02*x311)));
evalcond[3]=((1.0)+(((-1.0)*x306*x309))+(((-1.0)*r12*x311))+((r10*x313))+(((-1.0)*x307*x309))+(((-1.0)*r11*x314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[1];
sj11=0;
cj11=1.0;
j11=0;
IkReal x315=(cj16*r20);
IkReal x316=(r02*sj15);
IkReal x317=(r21*sj16);
IkReal x318=(r22*sj15);
IkReal x319=(cj15*cj16*r00);
IkReal x320=(cj15*cj16*r20);
IkReal x321=(cj15*r01*sj16);
IkReal x322=(cj15*r21*sj16);
IkReal x323=((((-1.0)*(12.0)*pz))+(((-1.08)*x317))+(((0.36)*x321))+(((-0.36)*x319))+(((2.82)*x318))+(((-0.36)*x316))+(((1.08)*x315))+(((2.82)*x320))+(((-2.82)*x322)));
j12eval[0]=((IKabs(((1.0)+(((0.94)*x320))+(((-1.0)*(4.0)*pz))+(((-0.94)*x322))+(((-0.36)*x317))+(((-0.12)*x319))+(((0.36)*x315))+(((-0.12)*x316))+(((0.12)*x321))+(((0.94)*x318)))))+(IKabs(((-1.0)+x323)))+(IKabs(((1.0)+x323))));
if( IKabs(j12eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j12, j13]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j12evalpoly[1];
IkReal x324=(cj16*r20);
IkReal x325=(r02*sj15);
IkReal x326=(r21*sj16);
IkReal x327=(r22*sj15);
IkReal x328=(cj15*cj16*r00);
IkReal x329=(cj15*cj16*r20);
IkReal x330=(cj15*r01*sj16);
IkReal x331=(cj15*r21*sj16);
IkReal x332=((((0.94)*x327))+(((-0.36)*x326))+(((0.36)*x324))+(((-0.12)*x328))+(((-1.0)*(4.0)*pz))+(((0.94)*x329))+(((-0.94)*x331))+(((-0.12)*x325))+(((0.12)*x330)));
IkReal x333=((((0.36)*x330))+(((-1.0)*(12.0)*pz))+(((2.82)*x329))+(((-1.08)*x326))+(((-2.82)*x331))+(((1.08)*x324))+(((-0.36)*x325))+(((2.82)*x327))+(((-0.36)*x328)));
op[0]=((1.0)+x332);
op[1]=0;
op[2]=((1.0)+x333);
op[3]=0;
op[4]=((-1.0)+x333);
op[5]=0;
op[6]=((-1.0)+x332);
polyroots6(op,zeror,numroots);
IkReal j12array[6], cj12array[6], sj12array[6], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[6]={true,true,true,true,true,true};
_nj12 = 6;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

IkReal x334=(cj16*r00);
IkReal x335=(cj16*r20);
IkReal x336=(r01*sj16);
IkReal x337=(r21*sj16);
IkReal x338=(r22*sj15);
IkReal x339=(cj15*cj16*r20);
IkReal x340=(cj15*r21*sj16);
IkReal x341=((((-0.0846)*x337))+(((0.0846)*x335))+(((0.0108)*x334))+(((0.2245)*x339))+(((0.2245)*x338))+(((-1.0)*(0.94)*pz))+(((-0.0108)*x336))+(((-0.2245)*x340))+(((-1.0)*(0.12)*px)));
IkReal x342=((((0.6735)*x339))+(((0.6735)*x338))+(((0.2538)*x335))+(((-0.0324)*x336))+(((-0.2538)*x337))+(((-1.0)*(0.36)*px))+(((0.0324)*x334))+(((-1.0)*(2.82)*pz))+(((-0.6735)*x340)));
j12evalpoly[0]=((-0.235)+(((htj12*htj12*htj12*htj12)*(((0.235)+x342))))+(((-1.0)*(0.12)*(htj12*htj12*htj12)))+(((-1.0)*(0.06)*htj12))+x341+(((-1.0)*(0.06)*(htj12*htj12*htj12*htj12*htj12)))+(((htj12*htj12)*(((-0.235)+x342))))+(((htj12*htj12*htj12*htj12*htj12*htj12)*(((0.235)+x341)))));
if( IKabs(j12evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x343=(r22*sj15);
IkReal x344=((1.0)*cj12);
IkReal x345=(r02*sj15);
IkReal x346=(cj12*cj15*sj16);
IkReal x347=(cj15*sj12);
IkReal x348=(cj16*r20);
IkReal x349=(cj16*r00);
IkReal x350=((1.0)*cj12*cj15);
IkReal x351=((1.0)*cj15*sj12);
if( IKabs((((sj12*x343))+(((-1.0)*x344*x345))+(((-1.0)*x349*x350))+(((-1.0)*r21*sj16*x351))+((r01*x346))+((x347*x348)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x348*x350))+((r21*x346))+(((-1.0)*sj12*x345))+(((-1.0)*x343*x344))+((r01*sj16*x347))+(((-1.0)*x349*x351)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj12*x343))+(((-1.0)*x344*x345))+(((-1.0)*x349*x350))+(((-1.0)*r21*sj16*x351))+((r01*x346))+((x347*x348))))+IKsqr(((((-1.0)*x348*x350))+((r21*x346))+(((-1.0)*sj12*x345))+(((-1.0)*x343*x344))+((r01*sj16*x347))+(((-1.0)*x349*x351))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((sj12*x343))+(((-1.0)*x344*x345))+(((-1.0)*x349*x350))+(((-1.0)*r21*sj16*x351))+((r01*x346))+((x347*x348))), ((((-1.0)*x348*x350))+((r21*x346))+(((-1.0)*sj12*x345))+(((-1.0)*x343*x344))+((r01*sj16*x347))+(((-1.0)*x349*x351))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x352=IKsin(j13);
IkReal x353=(cj12*x352);
IkReal x354=IKcos(j13);
IkReal x355=(sj12*x354);
IkReal x356=(cj15*cj16);
IkReal x357=((1.0)*cj15*sj16);
IkReal x358=(cj12*x354);
IkReal x359=(sj12*x352);
IkReal x360=(x358+(((-1.0)*x359)));
IkReal x361=(cj16*sj14);
IkReal x362=(sj14*sj16);
IkReal x363=((1.0)*cj14*cj15);
IkReal x364=(cj14*cj16*sj15);
IkReal x365=((1.0)*cj14*sj15*sj16);
IkReal x366=((0.09)*cj16);
IkReal x367=((0.09)*sj16);
evalcond[0]=(((r00*x356))+(((-1.0)*r01*x357))+((r02*sj15))+x355+x353);
evalcond[1]=(((r22*sj15))+(((-1.0)*r21*x357))+((r20*x356))+x360);
evalcond[2]=(((r00*x364))+((r01*x361))+(((-1.0)*r01*x365))+((r00*x362))+(((-1.0)*r02*x363))+x360);
evalcond[3]=(((r20*x364))+(((-1.0)*r21*x365))+((r20*x362))+(((-1.0)*r22*x363))+(((-1.0)*x355))+((r21*x361))+(((-1.0)*x353)));
evalcond[4]=((((0.235)*x359))+(((0.03)*x353))+((r20*x366))+(((-1.0)*(1.0)*pz))+(((-1.0)*r21*x367))+(((0.03)*x355))+(((-0.235)*x358))+(((-1.0)*(0.25)*cj12)));
evalcond[5]=((((-1.0)*(1.0)*px))+(((-0.03)*x358))+(((-1.0)*(0.25)*sj12))+((r00*x366))+(((-0.235)*x353))+(((-0.235)*x355))+(((0.03)*x359))+(((-1.0)*r01*x367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x368=(cj16*r10);
IkReal x369=(r11*sj16);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
evalcond[1]=(((r12*sj15))+((cj15*x368))+(((-1.0)*cj15*x369)));
evalcond[2]=((-0.095)+(((-1.0)*(1.0)*py))+(((0.09)*x368))+(((-0.09)*x369)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
IkReal x370=((1.0)*sj16);
IkReal x371=(((r22*sj15))+(((-1.0)*cj15*r21*x370))+((cj15*cj16*r20)));
IkReal x372=((1.0)*cj16);
j14eval[0]=x371;
j14eval[1]=((IKabs((((r01*sj15*sj16))+(((-1.0)*r00*sj15*x372))+((cj15*r02)))))+(IKabs(((((-1.0)*r01*x372))+(((-1.0)*r00*x370))))));
j14eval[2]=IKsign(x371);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
IkReal x373=((1.0)*cj16);
IkReal x374=((((-1.0)*(1.0)*r02*sj15))+((cj15*r01*sj16))+(((-1.0)*cj15*r00*x373)));
j14eval[0]=x374;
j14eval[1]=IKsign(x374);
j14eval[2]=((IKabs(((((-1.0)*(1.0)*r20*sj16))+(((-1.0)*r21*x373)))))+(IKabs((((r21*sj15*sj16))+((cj15*r22))+(((-1.0)*r20*sj15*x373))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
IkReal x375=r10*r10;
IkReal x376=r11*r11;
IkReal x377=cj15*cj15;
IkReal x378=((2.0)*cj15*r12);
IkReal x379=(cj16*r10*sj15);
IkReal x380=(x376*x377);
IkReal x381=(r10*sj16);
IkReal x382=cj16*cj16;
IkReal x383=((((-1.0)*x380))+(((-1.0)*x375*x377*x382))+((r11*sj15*sj16*x378))+((x377*(r12*r12)))+((x380*x382))+x376+x375+(((-1.0)*x378*x379))+(((2.0)*cj16*r11*x377*x381)));
IkReal x384=((1.0)*r11);
j14eval[0]=x383;
j14eval[1]=((IKabs(((((-1.0)*x381))+(((-1.0)*cj16*x384)))))+(IKabs(((((-1.0)*sj15*sj16*x384))+x379+(((-1.0)*cj15*r12))))));
j14eval[2]=IKsign(x383);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j12, j13, j14]

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x385=(cj16*r10*sj15);
IkReal x386=((1.0)*r11);
IkReal x387=(r10*sj16);
IkReal x388=r10*r10;
IkReal x389=r11*r11;
IkReal x390=cj15*cj15;
IkReal x391=((2.0)*cj15*r12);
IkReal x392=(x389*x390);
IkReal x393=cj16*cj16;
CheckValue<IkReal> x394=IKPowWithIntegerCheck(IKsign(((((-1.0)*x388*x390*x393))+((x392*x393))+(((2.0)*cj16*r11*x387*x390))+((x390*(r12*r12)))+(((-1.0)*x385*x391))+x388+x389+((r11*sj15*sj16*x391))+(((-1.0)*x392)))),-1);
if(!x394.valid){
continue;
}
CheckValue<IkReal> x395 = IKatan2WithCheck(IkReal((x385+(((-1.0)*sj15*sj16*x386))+(((-1.0)*cj15*r12)))),IkReal(((((-1.0)*cj16*x386))+(((-1.0)*x387)))),IKFAST_ATAN2_MAGTHRESH);
if(!x395.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x394.value)))+(x395.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x396=IKsin(j14);
IkReal x397=(cj16*r11);
IkReal x398=(r10*sj16);
IkReal x399=IKcos(j14);
IkReal x400=((1.0)*x399);
IkReal x401=((1.0)*sj16*x399);
IkReal x402=((1.0)*cj15*x396);
IkReal x403=((1.0)*cj16*x399);
IkReal x404=(cj16*sj15*x396);
IkReal x405=((1.0)*sj15*sj16*x396);
evalcond[0]=((((-1.0)*cj15*r12*x400))+((x396*x397))+(((-1.0)*r11*sj15*x401))+((x396*x398))+((cj16*r10*sj15*x399)));
evalcond[1]=((((-1.0)*r20*x401))+(((-1.0)*r21*x403))+((r20*x404))+(((-1.0)*r22*x402))+(((-1.0)*r21*x405)));
evalcond[2]=((((-1.0)*r01*x403))+((r00*x404))+(((-1.0)*r01*x405))+(((-1.0)*r02*x402))+(((-1.0)*r00*x401)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x402))+((r10*x404))+(((-1.0)*r11*x405))+(((-1.0)*x397*x400))+(((-1.0)*x398*x400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[1];
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
IkReal x406=(cj16*r20);
IkReal x407=(r02*sj15);
IkReal x408=(r21*sj16);
IkReal x409=(r22*sj15);
IkReal x410=(cj15*cj16*r00);
IkReal x411=(cj15*cj16*r20);
IkReal x412=(cj15*r01*sj16);
IkReal x413=(cj15*r21*sj16);
IkReal x414=((((-0.36)*x410))+(((-2.82)*x409))+(((0.36)*x412))+(((2.82)*x413))+(((-0.36)*x407))+(((12.0)*pz))+(((1.08)*x408))+(((-2.82)*x411))+(((-1.08)*x406)));
j12eval[0]=((IKabs(((1.0)+x414)))+(IKabs(((-1.0)+(((-0.94)*x409))+(((0.94)*x413))+(((0.12)*x412))+(((-0.94)*x411))+(((4.0)*pz))+(((0.36)*x408))+(((-0.12)*x410))+(((-0.36)*x406))+(((-0.12)*x407)))))+(IKabs(((-1.0)+x414))));
if( IKabs(j12eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j12, j13]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j12evalpoly[1];
IkReal x415=(cj16*r20);
IkReal x416=(r02*sj15);
IkReal x417=(r21*sj16);
IkReal x418=(r22*sj15);
IkReal x419=(cj15*cj16*r00);
IkReal x420=(cj15*cj16*r20);
IkReal x421=(cj15*r01*sj16);
IkReal x422=(cj15*r21*sj16);
IkReal x423=((((-0.94)*x420))+(((-0.36)*x415))+(((-0.12)*x416))+(((-0.94)*x418))+(((4.0)*pz))+(((0.12)*x421))+(((0.94)*x422))+(((-0.12)*x419))+(((0.36)*x417)));
IkReal x424=((((-0.36)*x419))+(((0.36)*x421))+(((-2.82)*x420))+(((-0.36)*x416))+(((2.82)*x422))+(((-1.08)*x415))+(((12.0)*pz))+(((1.08)*x417))+(((-2.82)*x418)));
op[0]=((-1.0)+x423);
op[1]=0;
op[2]=((-1.0)+x424);
op[3]=0;
op[4]=((1.0)+x424);
op[5]=0;
op[6]=((1.0)+x423);
polyroots6(op,zeror,numroots);
IkReal j12array[6], cj12array[6], sj12array[6], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[6]={true,true,true,true,true,true};
_nj12 = 6;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

IkReal x425=(cj16*r20);
IkReal x426=((0.36)*x425);
IkReal x427=(r21*sj16);
IkReal x428=((0.36)*x427);
IkReal x429=(r22*sj15);
IkReal x430=(cj14*cj15*r22);
IkReal x431=(cj15*cj16*r20);
IkReal x432=(cj15*r21*sj16);
IkReal x433=(cj16*r21*sj14);
IkReal x434=(r20*sj14*sj16);
IkReal x435=((0.12)*cj14*sj15);
IkReal x436=((((-0.94)*x432))+(((-1.0)*(4.0)*pz))+(((-1.0)*x428))+(((-1.0)*x427*x435))+(((0.12)*x433))+x426+(((0.94)*x431))+(((0.12)*x434))+((x425*x435))+(((0.94)*x429))+(((-0.12)*x430)));
IkReal x437=(cj14*sj15);
IkReal x438=((((2.82)*x431))+(((-1.0)*(12.0)*pz))+(((0.36)*x434))+((x426*x437))+(((0.36)*x433))+(((-1.0)*x428*x437))+(((1.08)*x425))+(((-2.82)*x432))+(((-1.08)*x427))+(((-0.36)*x430))+(((2.82)*x429)));
j12evalpoly[0]=((-1.0)+(((htj12*htj12*htj12*htj12*htj12*htj12)*(((1.0)+x436))))+(((htj12*htj12*htj12*htj12)*(((1.0)+x438))))+x436+(((htj12*htj12)*(((-1.0)+x438)))));
if( IKabs(j12evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x439=(r02*sj15);
IkReal x440=(r22*sj15);
IkReal x441=(cj12*cj15);
IkReal x442=(cj16*r00);
IkReal x443=(cj15*sj12);
IkReal x444=(cj16*r20);
IkReal x445=(r01*sj16);
IkReal x446=((1.0)*cj12*cj15);
IkReal x447=(r21*sj16);
IkReal x448=((1.0)*cj15*sj12);
if( IKabs((((x443*x444))+(((-1.0)*x447*x448))+((x441*x442))+((cj12*x439))+((sj12*x440))+(((-1.0)*x445*x446)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj12*x439))+(((-1.0)*cj12*x440))+((x441*x447))+((x442*x443))+(((-1.0)*x445*x448))+(((-1.0)*x444*x446)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x443*x444))+(((-1.0)*x447*x448))+((x441*x442))+((cj12*x439))+((sj12*x440))+(((-1.0)*x445*x446))))+IKsqr((((sj12*x439))+(((-1.0)*cj12*x440))+((x441*x447))+((x442*x443))+(((-1.0)*x445*x448))+(((-1.0)*x444*x446))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((x443*x444))+(((-1.0)*x447*x448))+((x441*x442))+((cj12*x439))+((sj12*x440))+(((-1.0)*x445*x446))), (((sj12*x439))+(((-1.0)*cj12*x440))+((x441*x447))+((x442*x443))+(((-1.0)*x445*x448))+(((-1.0)*x444*x446))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x449=IKcos(j13);
IkReal x450=(cj12*x449);
IkReal x451=(cj15*cj16);
IkReal x452=IKsin(j13);
IkReal x453=(sj12*x452);
IkReal x454=((1.0)*cj15*sj16);
IkReal x455=(cj12*x452);
IkReal x456=(sj12*x449);
IkReal x457=((((-1.0)*x456))+(((-1.0)*x455)));
IkReal x458=(cj16*sj14);
IkReal x459=(sj14*sj16);
IkReal x460=((1.0)*cj14*cj15);
IkReal x461=(cj14*cj16*sj15);
IkReal x462=((1.0)*cj14*sj15*sj16);
IkReal x463=((0.09)*cj16);
IkReal x464=((0.09)*sj16);
evalcond[0]=(((r22*sj15))+(((-1.0)*r21*x454))+x450+(((-1.0)*x453))+((r20*x451)));
evalcond[1]=((((-1.0)*r01*x454))+((r02*sj15))+x457+((r00*x451)));
evalcond[2]=((((-1.0)*r01*x462))+(((-1.0)*r02*x460))+(((-1.0)*x450))+((r00*x459))+x453+((r01*x458))+((r00*x461)));
evalcond[3]=(((r20*x461))+((r20*x459))+(((-1.0)*r21*x462))+(((-1.0)*r22*x460))+x457+((r21*x458)));
evalcond[4]=((((-0.235)*x450))+(((0.03)*x456))+(((-1.0)*(1.0)*pz))+(((0.03)*x455))+(((-1.0)*r21*x464))+(((0.235)*x453))+(((-1.0)*(0.25)*cj12))+((r20*x463)));
evalcond[5]=((((-1.0)*(1.0)*px))+(((-0.03)*x453))+(((-1.0)*r01*x464))+(((0.25)*sj12))+(((0.235)*x456))+(((0.235)*x455))+(((0.03)*x450))+((r00*x463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x465=((1.0)*cj16);
CheckValue<IkReal> x466 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r20*sj16))+(((-1.0)*r21*x465)))),IkReal((((r21*sj15*sj16))+((cj15*r22))+(((-1.0)*r20*sj15*x465)))),IKFAST_ATAN2_MAGTHRESH);
if(!x466.valid){
continue;
}
CheckValue<IkReal> x467=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r02*sj15))+((cj15*r01*sj16))+(((-1.0)*cj15*r00*x465)))),-1);
if(!x467.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x466.value)+(((1.5707963267949)*(x467.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x468=IKsin(j14);
IkReal x469=(cj16*r11);
IkReal x470=(r10*sj16);
IkReal x471=IKcos(j14);
IkReal x472=((1.0)*x471);
IkReal x473=((1.0)*sj16*x471);
IkReal x474=((1.0)*cj15*x468);
IkReal x475=((1.0)*cj16*x471);
IkReal x476=(cj16*sj15*x468);
IkReal x477=((1.0)*sj15*sj16*x468);
evalcond[0]=((((-1.0)*cj15*r12*x472))+((x468*x470))+((x468*x469))+(((-1.0)*r11*sj15*x473))+((cj16*r10*sj15*x471)));
evalcond[1]=(((r20*x476))+(((-1.0)*r22*x474))+(((-1.0)*r21*x477))+(((-1.0)*r20*x473))+(((-1.0)*r21*x475)));
evalcond[2]=((((-1.0)*r01*x477))+(((-1.0)*r02*x474))+((r00*x476))+(((-1.0)*r00*x473))+(((-1.0)*r01*x475)));
evalcond[3]=((-1.0)+(((-1.0)*x469*x472))+((r10*x476))+(((-1.0)*x470*x472))+(((-1.0)*r11*x477))+(((-1.0)*r12*x474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[1];
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
IkReal x478=(cj16*r20);
IkReal x479=(r02*sj15);
IkReal x480=(r21*sj16);
IkReal x481=(r22*sj15);
IkReal x482=(cj15*cj16*r00);
IkReal x483=(cj15*cj16*r20);
IkReal x484=(cj15*r01*sj16);
IkReal x485=(cj15*r21*sj16);
IkReal x486=((((0.36)*x484))+(((-2.82)*x483))+(((-0.36)*x482))+(((-0.36)*x479))+(((2.82)*x485))+(((-1.08)*x478))+(((12.0)*pz))+(((-2.82)*x481))+(((1.08)*x480)));
j12eval[0]=((IKabs(((-1.0)+(((0.36)*x480))+(((-0.94)*x483))+(((0.12)*x484))+(((-0.12)*x482))+(((-0.36)*x478))+(((4.0)*pz))+(((-0.94)*x481))+(((-0.12)*x479))+(((0.94)*x485)))))+(IKabs(((-1.0)+x486)))+(IKabs(((1.0)+x486))));
if( IKabs(j12eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j12, j13]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j12evalpoly[1];
IkReal x487=(cj16*r20);
IkReal x488=(r02*sj15);
IkReal x489=(r21*sj16);
IkReal x490=(r22*sj15);
IkReal x491=(cj15*cj16*r00);
IkReal x492=(cj15*cj16*r20);
IkReal x493=(cj15*r01*sj16);
IkReal x494=(cj15*r21*sj16);
IkReal x495=((((-0.94)*x492))+(((0.36)*x489))+(((0.12)*x493))+(((-0.36)*x487))+(((4.0)*pz))+(((-0.12)*x491))+(((-0.12)*x488))+(((-0.94)*x490))+(((0.94)*x494)));
IkReal x496=((((0.36)*x493))+(((2.82)*x494))+(((-1.08)*x487))+(((-2.82)*x490))+(((-0.36)*x488))+(((-0.36)*x491))+(((1.08)*x489))+(((12.0)*pz))+(((-2.82)*x492)));
op[0]=((-1.0)+x495);
op[1]=0;
op[2]=((-1.0)+x496);
op[3]=0;
op[4]=((1.0)+x496);
op[5]=0;
op[6]=((1.0)+x495);
polyroots6(op,zeror,numroots);
IkReal j12array[6], cj12array[6], sj12array[6], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[6]={true,true,true,true,true,true};
_nj12 = 6;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

IkReal x497=(cj16*r20);
IkReal x498=((0.36)*x497);
IkReal x499=(r21*sj16);
IkReal x500=((0.36)*x499);
IkReal x501=(r22*sj15);
IkReal x502=(cj14*cj15*r22);
IkReal x503=(cj15*cj16*r20);
IkReal x504=(cj15*r21*sj16);
IkReal x505=(cj16*r21*sj14);
IkReal x506=(r20*sj14*sj16);
IkReal x507=((0.12)*cj14*sj15);
IkReal x508=((((-1.0)*x500))+(((-1.0)*x499*x507))+(((-1.0)*(4.0)*pz))+(((0.94)*x501))+(((0.12)*x505))+(((0.12)*x506))+(((-0.94)*x504))+((x497*x507))+(((0.94)*x503))+(((-0.12)*x502))+x498);
IkReal x509=(cj14*sj15);
IkReal x510=((((-1.08)*x499))+(((-1.0)*(12.0)*pz))+(((2.82)*x501))+(((1.08)*x497))+((x498*x509))+(((2.82)*x503))+(((-1.0)*x500*x509))+(((0.36)*x506))+(((-2.82)*x504))+(((0.36)*x505))+(((-0.36)*x502)));
j12evalpoly[0]=((-1.0)+(((htj12*htj12)*(((-1.0)+x510))))+x508+(((htj12*htj12*htj12*htj12*htj12*htj12)*(((1.0)+x508))))+(((htj12*htj12*htj12*htj12)*(((1.0)+x510)))));
if( IKabs(j12evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x511=(r02*sj15);
IkReal x512=(r22*sj15);
IkReal x513=(cj12*cj15);
IkReal x514=(cj16*r00);
IkReal x515=(cj15*sj12);
IkReal x516=(cj16*r20);
IkReal x517=(r01*sj16);
IkReal x518=((1.0)*cj12*cj15);
IkReal x519=(r21*sj16);
IkReal x520=((1.0)*cj15*sj12);
if( IKabs(((((-1.0)*x519*x520))+((x515*x516))+((sj12*x512))+(((-1.0)*x517*x518))+((x513*x514))+((cj12*x511)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x513*x519))+(((-1.0)*x517*x520))+((x514*x515))+(((-1.0)*x516*x518))+(((-1.0)*cj12*x512))+((sj12*x511)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x519*x520))+((x515*x516))+((sj12*x512))+(((-1.0)*x517*x518))+((x513*x514))+((cj12*x511))))+IKsqr((((x513*x519))+(((-1.0)*x517*x520))+((x514*x515))+(((-1.0)*x516*x518))+(((-1.0)*cj12*x512))+((sj12*x511))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*x519*x520))+((x515*x516))+((sj12*x512))+(((-1.0)*x517*x518))+((x513*x514))+((cj12*x511))), (((x513*x519))+(((-1.0)*x517*x520))+((x514*x515))+(((-1.0)*x516*x518))+(((-1.0)*cj12*x512))+((sj12*x511))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x521=IKcos(j13);
IkReal x522=(cj12*x521);
IkReal x523=(cj15*cj16);
IkReal x524=IKsin(j13);
IkReal x525=(sj12*x524);
IkReal x526=((1.0)*cj15*sj16);
IkReal x527=(cj12*x524);
IkReal x528=(sj12*x521);
IkReal x529=((((-1.0)*x528))+(((-1.0)*x527)));
IkReal x530=(cj16*sj14);
IkReal x531=(sj14*sj16);
IkReal x532=((1.0)*cj14*cj15);
IkReal x533=(cj14*cj16*sj15);
IkReal x534=((1.0)*cj14*sj15*sj16);
IkReal x535=((0.09)*cj16);
IkReal x536=((0.09)*sj16);
evalcond[0]=(((r20*x523))+(((-1.0)*r21*x526))+((r22*sj15))+(((-1.0)*x525))+x522);
evalcond[1]=(((r00*x523))+((r02*sj15))+x529+(((-1.0)*r01*x526)));
evalcond[2]=((((-1.0)*r01*x534))+((r00*x533))+(((-1.0)*r02*x532))+(((-1.0)*x522))+((r01*x530))+((r00*x531))+x525);
evalcond[3]=(((r21*x530))+(((-1.0)*r21*x534))+((r20*x533))+((r20*x531))+(((-1.0)*r22*x532))+x529);
evalcond[4]=((((-1.0)*r21*x536))+(((0.03)*x528))+(((0.235)*x525))+(((-1.0)*(1.0)*pz))+(((-0.235)*x522))+(((-1.0)*(0.25)*cj12))+(((0.03)*x527))+((r20*x535)));
evalcond[5]=((((-1.0)*(1.0)*px))+((r00*x535))+(((-1.0)*r01*x536))+(((0.235)*x527))+(((0.03)*x522))+(((0.235)*x528))+(((0.25)*sj12))+(((-0.03)*x525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x537=((1.0)*sj16);
IkReal x538=((1.0)*cj16);
CheckValue<IkReal> x539=IKPowWithIntegerCheck(IKsign((((r22*sj15))+((cj15*cj16*r20))+(((-1.0)*cj15*r21*x537)))),-1);
if(!x539.valid){
continue;
}
CheckValue<IkReal> x540 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x537))+(((-1.0)*r01*x538)))),IkReal((((r01*sj15*sj16))+(((-1.0)*r00*sj15*x538))+((cj15*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x540.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x539.value)))+(x540.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x541=IKsin(j14);
IkReal x542=(cj16*r11);
IkReal x543=(r10*sj16);
IkReal x544=IKcos(j14);
IkReal x545=((1.0)*x544);
IkReal x546=((1.0)*sj16*x544);
IkReal x547=((1.0)*cj15*x541);
IkReal x548=((1.0)*cj16*x544);
IkReal x549=(cj16*sj15*x541);
IkReal x550=((1.0)*sj15*sj16*x541);
evalcond[0]=((((-1.0)*r11*sj15*x546))+(((-1.0)*cj15*r12*x545))+((x541*x542))+((cj16*r10*sj15*x544))+((x541*x543)));
evalcond[1]=((((-1.0)*r20*x546))+((r20*x549))+(((-1.0)*r21*x550))+(((-1.0)*r21*x548))+(((-1.0)*r22*x547)));
evalcond[2]=((((-1.0)*r02*x547))+(((-1.0)*r01*x550))+(((-1.0)*r00*x546))+((r00*x549))+(((-1.0)*r01*x548)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x550))+(((-1.0)*r12*x547))+((r10*x549))+(((-1.0)*x543*x545))+(((-1.0)*x542*x545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[1];
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
IkReal x551=(cj16*r20);
IkReal x552=(r02*sj15);
IkReal x553=(r21*sj16);
IkReal x554=(r22*sj15);
IkReal x555=(cj15*cj16*r00);
IkReal x556=(cj15*cj16*r20);
IkReal x557=(cj15*r01*sj16);
IkReal x558=(cj15*r21*sj16);
IkReal x559=((((-2.82)*x554))+(((1.08)*x553))+(((-1.08)*x551))+(((-0.36)*x552))+(((-0.36)*x555))+(((2.82)*x558))+(((-2.82)*x556))+(((0.36)*x557))+(((12.0)*pz)));
j12eval[0]=((IKabs(((-1.0)+(((0.36)*x553))+(((0.12)*x557))+(((-0.94)*x556))+(((4.0)*pz))+(((-0.36)*x551))+(((-0.12)*x552))+(((0.94)*x558))+(((-0.94)*x554))+(((-0.12)*x555)))))+(IKabs(((1.0)+x559)))+(IKabs(((-1.0)+x559))));
if( IKabs(j12eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j12, j13]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j12evalpoly[1];
IkReal x560=(cj16*r20);
IkReal x561=(r02*sj15);
IkReal x562=(r21*sj16);
IkReal x563=(r22*sj15);
IkReal x564=(cj15*cj16*r00);
IkReal x565=(cj15*cj16*r20);
IkReal x566=(cj15*r01*sj16);
IkReal x567=(cj15*r21*sj16);
IkReal x568=((((-0.36)*x560))+(((0.94)*x567))+(((-0.12)*x561))+(((4.0)*pz))+(((0.36)*x562))+(((0.12)*x566))+(((-0.94)*x565))+(((-0.12)*x564))+(((-0.94)*x563)));
IkReal x569=((((-2.82)*x563))+(((-2.82)*x565))+(((1.08)*x562))+(((2.82)*x567))+(((-0.36)*x564))+(((0.36)*x566))+(((-0.36)*x561))+(((12.0)*pz))+(((-1.08)*x560)));
op[0]=((-1.0)+x568);
op[1]=0;
op[2]=((-1.0)+x569);
op[3]=0;
op[4]=((1.0)+x569);
op[5]=0;
op[6]=((1.0)+x568);
polyroots6(op,zeror,numroots);
IkReal j12array[6], cj12array[6], sj12array[6], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[6]={true,true,true,true,true,true};
_nj12 = 6;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

IkReal x570=(cj16*r20);
IkReal x571=((0.36)*x570);
IkReal x572=(r21*sj16);
IkReal x573=((0.36)*x572);
IkReal x574=(r22*sj15);
IkReal x575=(cj14*cj15*r22);
IkReal x576=(cj15*cj16*r20);
IkReal x577=(cj15*r21*sj16);
IkReal x578=(cj16*r21*sj14);
IkReal x579=(r20*sj14*sj16);
IkReal x580=((0.12)*cj14*sj15);
IkReal x581=((((0.12)*x579))+x571+(((-1.0)*(4.0)*pz))+(((-1.0)*x572*x580))+(((-0.94)*x577))+(((0.94)*x574))+((x570*x580))+(((0.94)*x576))+(((-1.0)*x573))+(((-0.12)*x575))+(((0.12)*x578)));
IkReal x582=(cj14*sj15);
IkReal x583=((((0.36)*x578))+(((-1.0)*x573*x582))+(((0.36)*x579))+(((-1.0)*(12.0)*pz))+(((-1.08)*x572))+(((2.82)*x574))+(((-0.36)*x575))+(((2.82)*x576))+((x571*x582))+(((-2.82)*x577))+(((1.08)*x570)));
j12evalpoly[0]=((-1.0)+(((htj12*htj12)*(((-1.0)+x583))))+(((htj12*htj12*htj12*htj12*htj12*htj12)*(((1.0)+x581))))+(((htj12*htj12*htj12*htj12)*(((1.0)+x583))))+x581);
if( IKabs(j12evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x584=(r02*sj15);
IkReal x585=(r22*sj15);
IkReal x586=(cj12*cj15);
IkReal x587=(cj16*r00);
IkReal x588=(cj15*sj12);
IkReal x589=(cj16*r20);
IkReal x590=(r01*sj16);
IkReal x591=((1.0)*cj12*cj15);
IkReal x592=(r21*sj16);
IkReal x593=((1.0)*cj15*sj12);
if( IKabs((((sj12*x585))+((x588*x589))+(((-1.0)*x592*x593))+((cj12*x584))+((x586*x587))+(((-1.0)*x590*x591)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x590*x593))+(((-1.0)*cj12*x585))+((x586*x592))+((sj12*x584))+(((-1.0)*x589*x591))+((x587*x588)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj12*x585))+((x588*x589))+(((-1.0)*x592*x593))+((cj12*x584))+((x586*x587))+(((-1.0)*x590*x591))))+IKsqr(((((-1.0)*x590*x593))+(((-1.0)*cj12*x585))+((x586*x592))+((sj12*x584))+(((-1.0)*x589*x591))+((x587*x588))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((sj12*x585))+((x588*x589))+(((-1.0)*x592*x593))+((cj12*x584))+((x586*x587))+(((-1.0)*x590*x591))), ((((-1.0)*x590*x593))+(((-1.0)*cj12*x585))+((x586*x592))+((sj12*x584))+(((-1.0)*x589*x591))+((x587*x588))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x594=IKcos(j13);
IkReal x595=(cj12*x594);
IkReal x596=(cj15*cj16);
IkReal x597=IKsin(j13);
IkReal x598=(sj12*x597);
IkReal x599=((1.0)*cj15*sj16);
IkReal x600=(cj12*x597);
IkReal x601=(sj12*x594);
IkReal x602=((((-1.0)*x600))+(((-1.0)*x601)));
IkReal x603=(cj16*sj14);
IkReal x604=(sj14*sj16);
IkReal x605=((1.0)*cj14*cj15);
IkReal x606=(cj14*cj16*sj15);
IkReal x607=((1.0)*cj14*sj15*sj16);
IkReal x608=((0.09)*cj16);
IkReal x609=((0.09)*sj16);
evalcond[0]=((((-1.0)*x598))+((r22*sj15))+(((-1.0)*r21*x599))+((r20*x596))+x595);
evalcond[1]=(((r00*x596))+(((-1.0)*r01*x599))+((r02*sj15))+x602);
evalcond[2]=(((r00*x606))+(((-1.0)*x595))+(((-1.0)*r01*x607))+((r01*x603))+(((-1.0)*r02*x605))+((r00*x604))+x598);
evalcond[3]=((((-1.0)*r21*x607))+((r20*x606))+(((-1.0)*r22*x605))+((r21*x603))+((r20*x604))+x602);
evalcond[4]=((((0.235)*x598))+(((-1.0)*(1.0)*pz))+(((-1.0)*r21*x609))+(((-0.235)*x595))+(((0.03)*x600))+((r20*x608))+(((-1.0)*(0.25)*cj12))+(((0.03)*x601)));
evalcond[5]=(((r00*x608))+(((-1.0)*(1.0)*px))+(((0.235)*x600))+(((0.03)*x595))+(((0.25)*sj12))+(((0.235)*x601))+(((-0.03)*x598))+(((-1.0)*r01*x609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x610=(cj16*r00);
IkReal x611=(r01*sj16);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j11)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj15*x611))+((r02*sj15))+((cj15*x610)));
evalcond[2]=((-0.095)+(((-1.0)*(1.0)*px))+(((-0.09)*x611))+(((0.09)*x610)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x612=((1.0)*sj16);
IkReal x613=(((cj15*cj16*r10))+((r12*sj15))+(((-1.0)*cj15*r11*x612)));
IkReal x614=((1.0)*cj16);
j14eval[0]=x613;
j14eval[1]=IKsign(x613);
j14eval[2]=((IKabs(((((-1.0)*r21*x614))+(((-1.0)*r20*x612)))))+(IKabs(((((-1.0)*r20*sj15*x614))+((r21*sj15*sj16))+((cj15*r22))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x615=((1.0)*cj16);
IkReal x616=((((-1.0)*(1.0)*r22*sj15))+((cj15*r21*sj16))+(((-1.0)*cj15*r20*x615)));
j14eval[0]=x616;
j14eval[1]=IKsign(x616);
j14eval[2]=((IKabs((((r11*sj15*sj16))+(((-1.0)*r10*sj15*x615))+((cj15*r12)))))+(IKabs(((((-1.0)*r11*x615))+(((-1.0)*(1.0)*r10*sj16))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x617=r00*r00;
IkReal x618=r01*r01;
IkReal x619=cj15*cj15;
IkReal x620=((2.0)*cj15*r02);
IkReal x621=(cj16*r00*sj15);
IkReal x622=(x618*x619);
IkReal x623=(r00*sj16);
IkReal x624=cj16*cj16;
IkReal x625=(x617+x618+(((-1.0)*x622))+(((2.0)*cj16*r01*x619*x623))+((x622*x624))+(((-1.0)*x617*x619*x624))+((x619*(r02*r02)))+(((-1.0)*x620*x621))+((r01*sj15*sj16*x620)));
IkReal x626=((1.0)*r01);
j14eval[0]=x625;
j14eval[1]=IKsign(x625);
j14eval[2]=((IKabs(((((-1.0)*x623))+(((-1.0)*cj16*x626)))))+(IKabs(((((-1.0)*cj15*r02))+x621+(((-1.0)*sj15*sj16*x626))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j12, j13, j14]

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x627=(cj16*r00*sj15);
IkReal x628=((1.0)*r01);
IkReal x629=(r00*sj16);
IkReal x630=r00*r00;
IkReal x631=r01*r01;
IkReal x632=cj15*cj15;
IkReal x633=((2.0)*cj15*r02);
IkReal x634=(x631*x632);
IkReal x635=cj16*cj16;
CheckValue<IkReal> x636=IKPowWithIntegerCheck(IKsign((((x632*(r02*r02)))+(((-1.0)*x627*x633))+(((-1.0)*x634))+x630+x631+((r01*sj15*sj16*x633))+(((2.0)*cj16*r01*x629*x632))+(((-1.0)*x630*x632*x635))+((x634*x635)))),-1);
if(!x636.valid){
continue;
}
CheckValue<IkReal> x637 = IKatan2WithCheck(IkReal(((((-1.0)*sj15*sj16*x628))+(((-1.0)*cj15*r02))+x627)),IkReal(((((-1.0)*x629))+(((-1.0)*cj16*x628)))),IKFAST_ATAN2_MAGTHRESH);
if(!x637.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x636.value)))+(x637.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x638=IKsin(j14);
IkReal x639=(cj16*r01);
IkReal x640=(r00*sj16);
IkReal x641=IKcos(j14);
IkReal x642=((1.0)*cj15*r02);
IkReal x643=(cj16*r00*sj15);
IkReal x644=(r01*sj15);
IkReal x645=((1.0)*sj16*x641);
IkReal x646=((1.0)*cj15*x638);
IkReal x647=((1.0)*cj16*x641);
IkReal x648=(cj16*sj15*x638);
IkReal x649=((1.0)*sj15*sj16*x638);
IkReal x650=((1.0)*x641);
evalcond[0]=(((x638*x639))+((x641*x643))+((x638*x640))+(((-1.0)*x644*x645))+(((-1.0)*x641*x642)));
evalcond[1]=((((-1.0)*r21*x649))+(((-1.0)*r21*x647))+(((-1.0)*r20*x645))+((r20*x648))+(((-1.0)*r22*x646)));
evalcond[2]=((((-1.0)*r10*x645))+(((-1.0)*r12*x646))+(((-1.0)*r11*x649))+(((-1.0)*r11*x647))+((r10*x648)));
evalcond[3]=((-1.0)+(((-1.0)*x640*x650))+(((-1.0)*x638*x642))+(((-1.0)*sj16*x638*x644))+((x638*x643))+(((-1.0)*x639*x650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[1];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x651=(cj16*r20);
IkReal x652=(r12*sj15);
IkReal x653=(r21*sj16);
IkReal x654=(r22*sj15);
IkReal x655=(cj15*cj16*r10);
IkReal x656=(cj15*cj16*r20);
IkReal x657=(cj15*r11*sj16);
IkReal x658=(cj15*r21*sj16);
IkReal x659=((((1.08)*x651))+(((-1.0)*(12.0)*pz))+(((-0.36)*x655))+(((2.82)*x654))+(((-1.08)*x653))+(((-2.82)*x658))+(((2.82)*x656))+(((0.36)*x657))+(((-0.36)*x652)));
j12eval[0]=((IKabs(((1.0)+(((0.12)*x657))+(((0.94)*x654))+(((-0.12)*x655))+(((-1.0)*(4.0)*pz))+(((0.94)*x656))+(((-0.94)*x658))+(((-0.36)*x653))+(((-0.12)*x652))+(((0.36)*x651)))))+(IKabs(((1.0)+x659)))+(IKabs(((-1.0)+x659))));
if( IKabs(j12eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j12, j13]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j12evalpoly[1];
IkReal x660=(cj16*r20);
IkReal x661=(r12*sj15);
IkReal x662=(r21*sj16);
IkReal x663=(r22*sj15);
IkReal x664=(cj15*cj16*r10);
IkReal x665=(cj15*cj16*r20);
IkReal x666=(cj15*r11*sj16);
IkReal x667=(cj15*r21*sj16);
IkReal x668=((((0.94)*x663))+(((-1.0)*(4.0)*pz))+(((0.36)*x660))+(((0.12)*x666))+(((-0.12)*x664))+(((-0.94)*x667))+(((-0.12)*x661))+(((-0.36)*x662))+(((0.94)*x665)));
IkReal x669=((((-1.0)*(12.0)*pz))+(((-1.08)*x662))+(((0.36)*x666))+(((-0.36)*x664))+(((2.82)*x665))+(((1.08)*x660))+(((2.82)*x663))+(((-2.82)*x667))+(((-0.36)*x661)));
op[0]=((1.0)+x668);
op[1]=0;
op[2]=((1.0)+x669);
op[3]=0;
op[4]=((-1.0)+x669);
op[5]=0;
op[6]=((-1.0)+x668);
polyroots6(op,zeror,numroots);
IkReal j12array[6], cj12array[6], sj12array[6], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[6]={true,true,true,true,true,true};
_nj12 = 6;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

IkReal x670=(cj16*r10);
IkReal x671=(cj16*r20);
IkReal x672=(r11*sj16);
IkReal x673=(r21*sj16);
IkReal x674=(r22*sj15);
IkReal x675=(cj15*cj16*r20);
IkReal x676=(cj15*r21*sj16);
IkReal x677=((((0.0108)*x670))+(((-1.0)*(0.12)*py))+(((-0.2245)*x676))+(((0.2245)*x675))+(((0.2245)*x674))+(((-0.0846)*x673))+(((-1.0)*(0.94)*pz))+(((0.0846)*x671))+(((-0.0108)*x672)));
IkReal x678=((((0.6735)*x674))+(((-1.0)*(0.36)*py))+(((-0.2538)*x673))+(((0.6735)*x675))+(((0.2538)*x671))+(((0.0324)*x670))+(((-0.0324)*x672))+(((-1.0)*(2.82)*pz))+(((-0.6735)*x676)));
j12evalpoly[0]=((-0.235)+(((-1.0)*(0.12)*(htj12*htj12*htj12)))+(((-1.0)*(0.06)*htj12))+(((htj12*htj12*htj12*htj12)*(((0.235)+x678))))+(((htj12*htj12*htj12*htj12*htj12*htj12)*(((0.235)+x677))))+(((htj12*htj12)*(((-0.235)+x678))))+(((-1.0)*(0.06)*(htj12*htj12*htj12*htj12*htj12)))+x677);
if( IKabs(j12evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x679=(r22*sj15);
IkReal x680=((1.0)*cj12);
IkReal x681=(r12*sj15);
IkReal x682=(cj12*cj15*sj16);
IkReal x683=(cj15*sj12);
IkReal x684=(cj16*r20);
IkReal x685=(cj16*r10);
IkReal x686=((1.0)*cj12*cj15);
IkReal x687=((1.0)*cj15*sj12);
if( IKabs((((r11*x682))+(((-1.0)*x680*x681))+(((-1.0)*x685*x686))+((x683*x684))+((sj12*x679))+(((-1.0)*r21*sj16*x687)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x679*x680))+(((-1.0)*x685*x687))+((r11*sj16*x683))+((r21*x682))+(((-1.0)*x684*x686))+(((-1.0)*sj12*x681)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x682))+(((-1.0)*x680*x681))+(((-1.0)*x685*x686))+((x683*x684))+((sj12*x679))+(((-1.0)*r21*sj16*x687))))+IKsqr(((((-1.0)*x679*x680))+(((-1.0)*x685*x687))+((r11*sj16*x683))+((r21*x682))+(((-1.0)*x684*x686))+(((-1.0)*sj12*x681))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((r11*x682))+(((-1.0)*x680*x681))+(((-1.0)*x685*x686))+((x683*x684))+((sj12*x679))+(((-1.0)*r21*sj16*x687))), ((((-1.0)*x679*x680))+(((-1.0)*x685*x687))+((r11*sj16*x683))+((r21*x682))+(((-1.0)*x684*x686))+(((-1.0)*sj12*x681))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x688=IKsin(j13);
IkReal x689=(cj12*x688);
IkReal x690=IKcos(j13);
IkReal x691=(sj12*x690);
IkReal x692=(cj15*cj16);
IkReal x693=((1.0)*cj15*sj16);
IkReal x694=(cj12*x690);
IkReal x695=(sj12*x688);
IkReal x696=((((-1.0)*x695))+x694);
IkReal x697=(cj16*sj14);
IkReal x698=(sj14*sj16);
IkReal x699=((1.0)*cj14*cj15);
IkReal x700=(cj14*cj16*sj15);
IkReal x701=((1.0)*cj14*sj15*sj16);
IkReal x702=((0.09)*cj16);
IkReal x703=((0.09)*sj16);
evalcond[0]=((((-1.0)*r11*x693))+((r12*sj15))+x691+x689+((r10*x692)));
evalcond[1]=((((-1.0)*r21*x693))+((r22*sj15))+((r20*x692))+x696);
evalcond[2]=((((-1.0)*r12*x699))+(((-1.0)*r11*x701))+((r10*x700))+((r11*x697))+x696+((r10*x698)));
evalcond[3]=((((-1.0)*x689))+((r20*x700))+(((-1.0)*r21*x701))+(((-1.0)*x691))+(((-1.0)*r22*x699))+((r21*x697))+((r20*x698)));
evalcond[4]=((((-1.0)*(1.0)*pz))+(((-0.235)*x694))+(((0.235)*x695))+(((0.03)*x691))+((r20*x702))+(((-1.0)*(0.25)*cj12))+(((0.03)*x689))+(((-1.0)*r21*x703)));
evalcond[5]=((((-0.235)*x691))+(((-1.0)*(1.0)*py))+(((-0.03)*x694))+(((-0.235)*x689))+(((-1.0)*(0.25)*sj12))+(((0.03)*x695))+(((-1.0)*r11*x703))+((r10*x702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x704=((1.0)*cj16);
CheckValue<IkReal> x705=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj15*r20*x704))+(((-1.0)*(1.0)*r22*sj15))+((cj15*r21*sj16)))),-1);
if(!x705.valid){
continue;
}
CheckValue<IkReal> x706 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x704))+(((-1.0)*(1.0)*r10*sj16)))),IkReal(((((-1.0)*r10*sj15*x704))+((r11*sj15*sj16))+((cj15*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x706.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x705.value)))+(x706.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x707=IKsin(j14);
IkReal x708=(cj16*r01);
IkReal x709=(r00*sj16);
IkReal x710=IKcos(j14);
IkReal x711=((1.0)*cj15*r02);
IkReal x712=(cj16*r00*sj15);
IkReal x713=(r01*sj15);
IkReal x714=((1.0)*sj16*x710);
IkReal x715=((1.0)*cj15*x707);
IkReal x716=((1.0)*cj16*x710);
IkReal x717=(cj16*sj15*x707);
IkReal x718=((1.0)*sj15*sj16*x707);
IkReal x719=((1.0)*x710);
evalcond[0]=(((x710*x712))+((x707*x708))+((x707*x709))+(((-1.0)*x713*x714))+(((-1.0)*x710*x711)));
evalcond[1]=((((-1.0)*r20*x714))+(((-1.0)*r21*x716))+(((-1.0)*r21*x718))+((r20*x717))+(((-1.0)*r22*x715)));
evalcond[2]=(((r10*x717))+(((-1.0)*r12*x715))+(((-1.0)*r10*x714))+(((-1.0)*r11*x716))+(((-1.0)*r11*x718)));
evalcond[3]=((-1.0)+(((-1.0)*x707*x711))+(((-1.0)*x708*x719))+((x707*x712))+(((-1.0)*x709*x719))+(((-1.0)*sj16*x707*x713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[1];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x720=(cj16*r20);
IkReal x721=(r12*sj15);
IkReal x722=(r21*sj16);
IkReal x723=(r22*sj15);
IkReal x724=(cj15*cj16*r10);
IkReal x725=(cj15*cj16*r20);
IkReal x726=(cj15*r11*sj16);
IkReal x727=(cj15*r21*sj16);
IkReal x728=((((-1.0)*(12.0)*pz))+(((-2.82)*x727))+(((2.82)*x725))+(((1.08)*x720))+(((2.82)*x723))+(((-0.36)*x724))+(((-0.36)*x721))+(((-1.08)*x722))+(((0.36)*x726)));
j12eval[0]=((IKabs(((1.0)+(((0.94)*x723))+(((-0.12)*x724))+(((-0.94)*x727))+(((-1.0)*(4.0)*pz))+(((0.36)*x720))+(((0.94)*x725))+(((-0.36)*x722))+(((0.12)*x726))+(((-0.12)*x721)))))+(IKabs(((1.0)+x728)))+(IKabs(((-1.0)+x728))));
if( IKabs(j12eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j12, j13]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j12evalpoly[1];
IkReal x729=(cj16*r20);
IkReal x730=(r12*sj15);
IkReal x731=(r21*sj16);
IkReal x732=(r22*sj15);
IkReal x733=(cj15*cj16*r10);
IkReal x734=(cj15*cj16*r20);
IkReal x735=(cj15*r11*sj16);
IkReal x736=(cj15*r21*sj16);
IkReal x737=((((-1.0)*(4.0)*pz))+(((0.36)*x729))+(((0.12)*x735))+(((-0.12)*x733))+(((-0.94)*x736))+(((0.94)*x734))+(((-0.12)*x730))+(((-0.36)*x731))+(((0.94)*x732)));
IkReal x738=((((-1.0)*(12.0)*pz))+(((-0.36)*x730))+(((-1.08)*x731))+(((-0.36)*x733))+(((-2.82)*x736))+(((1.08)*x729))+(((2.82)*x734))+(((0.36)*x735))+(((2.82)*x732)));
op[0]=((1.0)+x737);
op[1]=0;
op[2]=((1.0)+x738);
op[3]=0;
op[4]=((-1.0)+x738);
op[5]=0;
op[6]=((-1.0)+x737);
polyroots6(op,zeror,numroots);
IkReal j12array[6], cj12array[6], sj12array[6], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[6]={true,true,true,true,true,true};
_nj12 = 6;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

IkReal x739=(cj16*r10);
IkReal x740=(cj16*r20);
IkReal x741=(r11*sj16);
IkReal x742=(r21*sj16);
IkReal x743=(r22*sj15);
IkReal x744=(cj15*cj16*r20);
IkReal x745=(cj15*r21*sj16);
IkReal x746=((((0.0108)*x739))+(((-1.0)*(0.12)*py))+(((0.0846)*x740))+(((-1.0)*(0.94)*pz))+(((0.2245)*x744))+(((-0.2245)*x745))+(((-0.0108)*x741))+(((-0.0846)*x742))+(((0.2245)*x743)));
IkReal x747=((((-1.0)*(0.36)*py))+(((-0.0324)*x741))+(((-0.6735)*x745))+(((0.2538)*x740))+(((0.6735)*x743))+(((-1.0)*(2.82)*pz))+(((-0.2538)*x742))+(((0.6735)*x744))+(((0.0324)*x739)));
j12evalpoly[0]=((-0.235)+(((htj12*htj12*htj12*htj12)*(((0.235)+x747))))+(((-1.0)*(0.12)*(htj12*htj12*htj12)))+(((-1.0)*(0.06)*htj12))+(((htj12*htj12*htj12*htj12*htj12*htj12)*(((0.235)+x746))))+x746+(((-1.0)*(0.06)*(htj12*htj12*htj12*htj12*htj12)))+(((htj12*htj12)*(((-0.235)+x747)))));
if( IKabs(j12evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x748=(r22*sj15);
IkReal x749=((1.0)*cj12);
IkReal x750=(r12*sj15);
IkReal x751=(cj12*cj15*sj16);
IkReal x752=(cj15*sj12);
IkReal x753=(cj16*r20);
IkReal x754=(cj16*r10);
IkReal x755=((1.0)*cj12*cj15);
IkReal x756=((1.0)*cj15*sj12);
if( IKabs((((sj12*x748))+((r11*x751))+(((-1.0)*r21*sj16*x756))+(((-1.0)*x754*x755))+((x752*x753))+(((-1.0)*x749*x750)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x754*x756))+(((-1.0)*x748*x749))+(((-1.0)*x753*x755))+((r21*x751))+(((-1.0)*sj12*x750))+((r11*sj16*x752)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj12*x748))+((r11*x751))+(((-1.0)*r21*sj16*x756))+(((-1.0)*x754*x755))+((x752*x753))+(((-1.0)*x749*x750))))+IKsqr(((((-1.0)*x754*x756))+(((-1.0)*x748*x749))+(((-1.0)*x753*x755))+((r21*x751))+(((-1.0)*sj12*x750))+((r11*sj16*x752))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((sj12*x748))+((r11*x751))+(((-1.0)*r21*sj16*x756))+(((-1.0)*x754*x755))+((x752*x753))+(((-1.0)*x749*x750))), ((((-1.0)*x754*x756))+(((-1.0)*x748*x749))+(((-1.0)*x753*x755))+((r21*x751))+(((-1.0)*sj12*x750))+((r11*sj16*x752))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x757=IKsin(j13);
IkReal x758=(cj12*x757);
IkReal x759=IKcos(j13);
IkReal x760=(sj12*x759);
IkReal x761=(cj15*cj16);
IkReal x762=((1.0)*cj15*sj16);
IkReal x763=(cj12*x759);
IkReal x764=(sj12*x757);
IkReal x765=((((-1.0)*x764))+x763);
IkReal x766=(cj16*sj14);
IkReal x767=(sj14*sj16);
IkReal x768=((1.0)*cj14*cj15);
IkReal x769=(cj14*cj16*sj15);
IkReal x770=((1.0)*cj14*sj15*sj16);
IkReal x771=((0.09)*cj16);
IkReal x772=((0.09)*sj16);
evalcond[0]=(((r10*x761))+((r12*sj15))+x760+(((-1.0)*r11*x762))+x758);
evalcond[1]=(((r20*x761))+((r22*sj15))+x765+(((-1.0)*r21*x762)));
evalcond[2]=(((r11*x766))+(((-1.0)*r12*x768))+((r10*x767))+(((-1.0)*r11*x770))+x765+((r10*x769)));
evalcond[3]=((((-1.0)*r22*x768))+((r20*x767))+(((-1.0)*x760))+((r21*x766))+((r20*x769))+(((-1.0)*x758))+(((-1.0)*r21*x770)));
evalcond[4]=((((-1.0)*r21*x772))+(((0.235)*x764))+(((-1.0)*(1.0)*pz))+(((-0.235)*x763))+((r20*x771))+(((0.03)*x758))+(((-1.0)*(0.25)*cj12))+(((0.03)*x760)));
evalcond[5]=((((-1.0)*(1.0)*py))+((r10*x771))+(((-1.0)*(0.25)*sj12))+(((-0.03)*x763))+(((-0.235)*x758))+(((-1.0)*r11*x772))+(((0.03)*x764))+(((-0.235)*x760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x773=((1.0)*sj16);
IkReal x774=((1.0)*cj16);
CheckValue<IkReal> x775=IKPowWithIntegerCheck(IKsign((((cj15*cj16*r10))+((r12*sj15))+(((-1.0)*cj15*r11*x773)))),-1);
if(!x775.valid){
continue;
}
CheckValue<IkReal> x776 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x773))+(((-1.0)*r21*x774)))),IkReal(((((-1.0)*r20*sj15*x774))+((r21*sj15*sj16))+((cj15*r22)))),IKFAST_ATAN2_MAGTHRESH);
if(!x776.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x775.value)))+(x776.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x777=IKsin(j14);
IkReal x778=(cj16*r01);
IkReal x779=(r00*sj16);
IkReal x780=IKcos(j14);
IkReal x781=((1.0)*cj15*r02);
IkReal x782=(cj16*r00*sj15);
IkReal x783=(r01*sj15);
IkReal x784=((1.0)*sj16*x780);
IkReal x785=((1.0)*cj15*x777);
IkReal x786=((1.0)*cj16*x780);
IkReal x787=(cj16*sj15*x777);
IkReal x788=((1.0)*sj15*sj16*x777);
IkReal x789=((1.0)*x780);
evalcond[0]=((((-1.0)*x783*x784))+(((-1.0)*x780*x781))+((x777*x778))+((x777*x779))+((x780*x782)));
evalcond[1]=((((-1.0)*r21*x786))+((r20*x787))+(((-1.0)*r22*x785))+(((-1.0)*r21*x788))+(((-1.0)*r20*x784)));
evalcond[2]=((((-1.0)*r11*x788))+(((-1.0)*r12*x785))+((r10*x787))+(((-1.0)*r11*x786))+(((-1.0)*r10*x784)));
evalcond[3]=((-1.0)+(((-1.0)*x778*x789))+(((-1.0)*sj16*x777*x783))+(((-1.0)*x779*x789))+(((-1.0)*x777*x781))+((x777*x782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[1];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x790=(cj16*r20);
IkReal x791=(r12*sj15);
IkReal x792=(r21*sj16);
IkReal x793=(r22*sj15);
IkReal x794=(cj15*cj16*r10);
IkReal x795=(cj15*cj16*r20);
IkReal x796=(cj15*r11*sj16);
IkReal x797=(cj15*r21*sj16);
IkReal x798=((((2.82)*x795))+(((-0.36)*x791))+(((-1.0)*(12.0)*pz))+(((-1.08)*x792))+(((-0.36)*x794))+(((0.36)*x796))+(((1.08)*x790))+(((2.82)*x793))+(((-2.82)*x797)));
j12eval[0]=((IKabs(((1.0)+(((0.36)*x790))+(((-0.94)*x797))+(((-1.0)*(4.0)*pz))+(((-0.12)*x794))+(((-0.36)*x792))+(((0.12)*x796))+(((0.94)*x793))+(((0.94)*x795))+(((-0.12)*x791)))))+(IKabs(((-1.0)+x798)))+(IKabs(((1.0)+x798))));
if( IKabs(j12eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j12, j13]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j12evalpoly[1];
IkReal x799=(cj16*r20);
IkReal x800=(r12*sj15);
IkReal x801=(r21*sj16);
IkReal x802=(r22*sj15);
IkReal x803=(cj15*cj16*r10);
IkReal x804=(cj15*cj16*r20);
IkReal x805=(cj15*r11*sj16);
IkReal x806=(cj15*r21*sj16);
IkReal x807=((((0.12)*x805))+(((0.94)*x802))+(((-1.0)*(4.0)*pz))+(((0.36)*x799))+(((-0.12)*x800))+(((-0.12)*x803))+(((0.94)*x804))+(((-0.94)*x806))+(((-0.36)*x801)));
IkReal x808=((((0.36)*x805))+(((-1.08)*x801))+(((2.82)*x804))+(((-1.0)*(12.0)*pz))+(((1.08)*x799))+(((-2.82)*x806))+(((2.82)*x802))+(((-0.36)*x800))+(((-0.36)*x803)));
op[0]=((1.0)+x807);
op[1]=0;
op[2]=((1.0)+x808);
op[3]=0;
op[4]=((-1.0)+x808);
op[5]=0;
op[6]=((-1.0)+x807);
polyroots6(op,zeror,numroots);
IkReal j12array[6], cj12array[6], sj12array[6], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[6]={true,true,true,true,true,true};
_nj12 = 6;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

IkReal x809=(cj16*r10);
IkReal x810=(cj16*r20);
IkReal x811=(r11*sj16);
IkReal x812=(r21*sj16);
IkReal x813=(r22*sj15);
IkReal x814=(cj15*cj16*r20);
IkReal x815=(cj15*r21*sj16);
IkReal x816=((((-1.0)*(0.12)*py))+(((-0.0846)*x812))+(((0.0108)*x809))+(((-0.0108)*x811))+(((0.2245)*x813))+(((-0.2245)*x815))+(((0.2245)*x814))+(((-1.0)*(0.94)*pz))+(((0.0846)*x810)));
IkReal x817=((((-1.0)*(0.36)*py))+(((0.0324)*x809))+(((-0.2538)*x812))+(((-0.0324)*x811))+(((0.2538)*x810))+(((0.6735)*x813))+(((0.6735)*x814))+(((-1.0)*(2.82)*pz))+(((-0.6735)*x815)));
j12evalpoly[0]=((-0.235)+(((htj12*htj12*htj12*htj12*htj12*htj12)*(((0.235)+x816))))+(((-1.0)*(0.12)*(htj12*htj12*htj12)))+(((-1.0)*(0.06)*htj12))+(((htj12*htj12)*(((-0.235)+x817))))+(((htj12*htj12*htj12*htj12)*(((0.235)+x817))))+x816+(((-1.0)*(0.06)*(htj12*htj12*htj12*htj12*htj12))));
if( IKabs(j12evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x818=(r22*sj15);
IkReal x819=((1.0)*cj12);
IkReal x820=(r12*sj15);
IkReal x821=(cj12*cj15*sj16);
IkReal x822=(cj15*sj12);
IkReal x823=(cj16*r20);
IkReal x824=(cj16*r10);
IkReal x825=((1.0)*cj12*cj15);
IkReal x826=((1.0)*cj15*sj12);
if( IKabs(((((-1.0)*x819*x820))+((sj12*x818))+(((-1.0)*x824*x825))+(((-1.0)*r21*sj16*x826))+((r11*x821))+((x822*x823)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj16*x822))+(((-1.0)*x818*x819))+(((-1.0)*x823*x825))+(((-1.0)*x824*x826))+((r21*x821))+(((-1.0)*sj12*x820)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x819*x820))+((sj12*x818))+(((-1.0)*x824*x825))+(((-1.0)*r21*sj16*x826))+((r11*x821))+((x822*x823))))+IKsqr((((r11*sj16*x822))+(((-1.0)*x818*x819))+(((-1.0)*x823*x825))+(((-1.0)*x824*x826))+((r21*x821))+(((-1.0)*sj12*x820))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*x819*x820))+((sj12*x818))+(((-1.0)*x824*x825))+(((-1.0)*r21*sj16*x826))+((r11*x821))+((x822*x823))), (((r11*sj16*x822))+(((-1.0)*x818*x819))+(((-1.0)*x823*x825))+(((-1.0)*x824*x826))+((r21*x821))+(((-1.0)*sj12*x820))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x827=IKsin(j13);
IkReal x828=(cj12*x827);
IkReal x829=IKcos(j13);
IkReal x830=(sj12*x829);
IkReal x831=(cj15*cj16);
IkReal x832=((1.0)*cj15*sj16);
IkReal x833=(cj12*x829);
IkReal x834=(sj12*x827);
IkReal x835=((((-1.0)*x834))+x833);
IkReal x836=(cj16*sj14);
IkReal x837=(sj14*sj16);
IkReal x838=((1.0)*cj14*cj15);
IkReal x839=(cj14*cj16*sj15);
IkReal x840=((1.0)*cj14*sj15*sj16);
IkReal x841=((0.09)*cj16);
IkReal x842=((0.09)*sj16);
evalcond[0]=(x830+((r12*sj15))+x828+((r10*x831))+(((-1.0)*r11*x832)));
evalcond[1]=(((r22*sj15))+x835+(((-1.0)*r21*x832))+((r20*x831)));
evalcond[2]=((((-1.0)*r11*x840))+((r11*x836))+x835+((r10*x839))+((r10*x837))+(((-1.0)*r12*x838)));
evalcond[3]=(((r20*x837))+((r21*x836))+(((-1.0)*r22*x838))+(((-1.0)*x830))+((r20*x839))+(((-1.0)*x828))+(((-1.0)*r21*x840)));
evalcond[4]=((((-1.0)*(1.0)*pz))+(((0.235)*x834))+(((0.03)*x830))+(((0.03)*x828))+(((-0.235)*x833))+((r20*x841))+(((-1.0)*r21*x842))+(((-1.0)*(0.25)*cj12)));
evalcond[5]=((((-0.03)*x833))+(((-1.0)*(1.0)*py))+(((0.03)*x834))+((r10*x841))+(((-1.0)*(0.25)*sj12))+(((-0.235)*x828))+(((-1.0)*r11*x842))+(((-0.235)*x830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x843=(cj16*r00);
IkReal x844=(r01*sj16);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j11)))), 6.28318530717959)));
evalcond[1]=(((r02*sj15))+((cj15*x843))+(((-1.0)*cj15*x844)));
evalcond[2]=((0.095)+(((-1.0)*(1.0)*px))+(((-0.09)*x844))+(((0.09)*x843)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x845=((1.0)*cj15);
IkReal x846=(((cj15*cj16*r10))+((r12*sj15))+(((-1.0)*r11*sj16*x845)));
j14eval[0]=x846;
j14eval[1]=IKsign(x846);
j14eval[2]=((IKabs((((cj16*r21))+((r20*sj16)))))+(IKabs((((cj16*r20*sj15))+(((-1.0)*r22*x845))+(((-1.0)*(1.0)*r21*sj15*sj16))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x847=((1.0)*sj15);
IkReal x848=((1.0)*cj15);
IkReal x849=((((-1.0)*cj16*r20*x848))+(((-1.0)*r22*x847))+((cj15*r21*sj16)));
j14eval[0]=x849;
j14eval[1]=IKsign(x849);
j14eval[2]=((IKabs(((((-1.0)*r11*sj16*x847))+(((-1.0)*r12*x848))+((cj16*r10*sj15)))))+(IKabs((((r10*sj16))+((cj16*r11))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x850=r00*r00;
IkReal x851=r01*r01;
IkReal x852=cj15*cj15;
IkReal x853=((2.0)*cj15*r02);
IkReal x854=(cj16*r00*sj15);
IkReal x855=(r01*sj15*sj16);
IkReal x856=(x851*x852);
IkReal x857=(r00*sj16);
IkReal x858=cj16*cj16;
IkReal x859=((((-1.0)*x853*x854))+((x852*(r02*r02)))+x850+x851+((x856*x858))+(((2.0)*cj16*r01*x852*x857))+((x853*x855))+(((-1.0)*x856))+(((-1.0)*x850*x852*x858)));
j14eval[0]=x859;
j14eval[1]=IKsign(x859);
j14eval[2]=((IKabs((x857+((cj16*r01)))))+(IKabs((x855+(((-1.0)*x854))+((cj15*r02))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j12, j13, j14]

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x860=(r01*sj15*sj16);
IkReal x861=(cj16*r00*sj15);
IkReal x862=(r00*sj16);
IkReal x863=r00*r00;
IkReal x864=r01*r01;
IkReal x865=cj15*cj15;
IkReal x866=((2.0)*cj15*r02);
IkReal x867=(x864*x865);
IkReal x868=cj16*cj16;
CheckValue<IkReal> x869 = IKatan2WithCheck(IkReal((x860+((cj15*r02))+(((-1.0)*x861)))),IkReal((x862+((cj16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x869.valid){
continue;
}
CheckValue<IkReal> x870=IKPowWithIntegerCheck(IKsign(((((2.0)*cj16*r01*x862*x865))+(((-1.0)*x867))+((x867*x868))+(((-1.0)*x863*x865*x868))+x863+x864+((x860*x866))+((x865*(r02*r02)))+(((-1.0)*x861*x866)))),-1);
if(!x870.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x869.value)+(((1.5707963267949)*(x870.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x871=IKsin(j14);
IkReal x872=(cj16*r01);
IkReal x873=(r00*sj16);
IkReal x874=IKcos(j14);
IkReal x875=((1.0)*cj15*r02);
IkReal x876=(cj16*r00*sj15);
IkReal x877=(r01*sj15);
IkReal x878=((1.0)*sj16*x874);
IkReal x879=((1.0)*cj15*x871);
IkReal x880=((1.0)*cj16*x874);
IkReal x881=(cj16*sj15*x871);
IkReal x882=((1.0)*sj15*sj16*x871);
IkReal x883=((1.0)*x874);
evalcond[0]=(((x871*x872))+((x871*x873))+(((-1.0)*x877*x878))+((x874*x876))+(((-1.0)*x874*x875)));
evalcond[1]=((((-1.0)*r21*x880))+(((-1.0)*r21*x882))+((r20*x881))+(((-1.0)*r20*x878))+(((-1.0)*r22*x879)));
evalcond[2]=((((-1.0)*r11*x882))+(((-1.0)*r12*x879))+(((-1.0)*r10*x878))+((r10*x881))+(((-1.0)*r11*x880)));
evalcond[3]=((1.0)+(((-1.0)*x871*x875))+(((-1.0)*sj16*x871*x877))+(((-1.0)*x872*x883))+((x871*x876))+(((-1.0)*x873*x883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[1];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x884=(cj16*r20);
IkReal x885=(r12*sj15);
IkReal x886=(r21*sj16);
IkReal x887=(r22*sj15);
IkReal x888=(cj15*cj16*r10);
IkReal x889=(cj15*cj16*r20);
IkReal x890=(cj15*r11*sj16);
IkReal x891=(cj15*r21*sj16);
IkReal x892=((((-1.08)*x884))+(((1.08)*x886))+(((-0.36)*x885))+(((2.82)*x891))+(((-0.36)*x888))+(((-2.82)*x889))+(((12.0)*pz))+(((-2.82)*x887))+(((0.36)*x890)));
j12eval[0]=((IKabs(((-1.0)+x892)))+(IKabs(((1.0)+x892)))+(IKabs(((-1.0)+(((0.12)*x890))+(((-0.94)*x887))+(((-0.94)*x889))+(((-0.36)*x884))+(((0.36)*x886))+(((4.0)*pz))+(((-0.12)*x885))+(((-0.12)*x888))+(((0.94)*x891))))));
if( IKabs(j12eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j12, j13]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j12evalpoly[1];
IkReal x893=(cj16*r20);
IkReal x894=(r12*sj15);
IkReal x895=(r21*sj16);
IkReal x896=(r22*sj15);
IkReal x897=(cj15*cj16*r10);
IkReal x898=(cj15*cj16*r20);
IkReal x899=(cj15*r11*sj16);
IkReal x900=(cj15*r21*sj16);
IkReal x901=((((0.12)*x899))+(((-0.36)*x893))+(((-0.94)*x896))+(((0.94)*x900))+(((4.0)*pz))+(((-0.12)*x894))+(((0.36)*x895))+(((-0.94)*x898))+(((-0.12)*x897)));
IkReal x902=((((2.82)*x900))+(((1.08)*x895))+(((-0.36)*x894))+(((0.36)*x899))+(((-2.82)*x896))+(((-2.82)*x898))+(((-1.08)*x893))+(((12.0)*pz))+(((-0.36)*x897)));
op[0]=((-1.0)+x901);
op[1]=0;
op[2]=((-1.0)+x902);
op[3]=0;
op[4]=((1.0)+x902);
op[5]=0;
op[6]=((1.0)+x901);
polyroots6(op,zeror,numroots);
IkReal j12array[6], cj12array[6], sj12array[6], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[6]={true,true,true,true,true,true};
_nj12 = 6;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

IkReal x903=(cj16*r20);
IkReal x904=((0.36)*x903);
IkReal x905=(r21*sj16);
IkReal x906=((0.36)*x905);
IkReal x907=(r22*sj15);
IkReal x908=(cj14*cj15*r22);
IkReal x909=(cj15*cj16*r20);
IkReal x910=(cj15*r21*sj16);
IkReal x911=(cj16*r21*sj14);
IkReal x912=(r20*sj14*sj16);
IkReal x913=((0.12)*cj14*sj15);
IkReal x914=((((-0.12)*x908))+(((-1.0)*(4.0)*pz))+(((-1.0)*x905*x913))+x904+((x903*x913))+(((-0.94)*x910))+(((0.94)*x907))+(((0.94)*x909))+(((-1.0)*x906))+(((0.12)*x911))+(((0.12)*x912)));
IkReal x915=(cj14*sj15);
IkReal x916=((((-2.82)*x910))+(((-1.0)*(12.0)*pz))+(((-0.36)*x908))+(((0.36)*x912))+(((2.82)*x907))+(((2.82)*x909))+(((0.36)*x911))+(((-1.08)*x905))+(((1.08)*x903))+(((-1.0)*x906*x915))+((x904*x915)));
j12evalpoly[0]=((-1.0)+(((htj12*htj12*htj12*htj12)*(((1.0)+x916))))+x914+(((htj12*htj12)*(((-1.0)+x916))))+(((htj12*htj12*htj12*htj12*htj12*htj12)*(((1.0)+x914)))));
if( IKabs(j12evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x917=(r12*sj15);
IkReal x918=(r22*sj15);
IkReal x919=(cj12*cj15);
IkReal x920=(cj16*r10);
IkReal x921=(cj15*sj12);
IkReal x922=(cj16*r20);
IkReal x923=(r11*sj16);
IkReal x924=((1.0)*cj12*cj15);
IkReal x925=(r21*sj16);
IkReal x926=((1.0)*cj15*sj12);
if( IKabs(((((-1.0)*x923*x924))+(((-1.0)*x925*x926))+((sj12*x918))+((cj12*x917))+((x921*x922))+((x919*x920)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x920*x921))+((sj12*x917))+(((-1.0)*x923*x926))+(((-1.0)*x922*x924))+((x919*x925))+(((-1.0)*cj12*x918)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x923*x924))+(((-1.0)*x925*x926))+((sj12*x918))+((cj12*x917))+((x921*x922))+((x919*x920))))+IKsqr((((x920*x921))+((sj12*x917))+(((-1.0)*x923*x926))+(((-1.0)*x922*x924))+((x919*x925))+(((-1.0)*cj12*x918))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*x923*x924))+(((-1.0)*x925*x926))+((sj12*x918))+((cj12*x917))+((x921*x922))+((x919*x920))), (((x920*x921))+((sj12*x917))+(((-1.0)*x923*x926))+(((-1.0)*x922*x924))+((x919*x925))+(((-1.0)*cj12*x918))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x927=IKcos(j13);
IkReal x928=(cj12*x927);
IkReal x929=(cj15*cj16);
IkReal x930=IKsin(j13);
IkReal x931=(sj12*x930);
IkReal x932=((1.0)*cj15*sj16);
IkReal x933=(cj12*x930);
IkReal x934=(sj12*x927);
IkReal x935=((((-1.0)*x934))+(((-1.0)*x933)));
IkReal x936=(cj16*sj14);
IkReal x937=(sj14*sj16);
IkReal x938=((1.0)*cj14*cj15);
IkReal x939=(cj14*cj16*sj15);
IkReal x940=((1.0)*cj14*sj15*sj16);
IkReal x941=((0.09)*cj16);
IkReal x942=((0.09)*sj16);
evalcond[0]=((((-1.0)*r21*x932))+((r22*sj15))+(((-1.0)*x931))+x928+((r20*x929)));
evalcond[1]=(((r12*sj15))+(((-1.0)*r11*x932))+((r10*x929))+x935);
evalcond[2]=((((-1.0)*x928))+((r11*x936))+(((-1.0)*r12*x938))+((r10*x939))+(((-1.0)*r11*x940))+((r10*x937))+x931);
evalcond[3]=(((r20*x939))+(((-1.0)*r22*x938))+((r21*x936))+((r20*x937))+(((-1.0)*r21*x940))+x935);
evalcond[4]=((((0.235)*x931))+(((-1.0)*(1.0)*pz))+(((-1.0)*r21*x942))+(((0.03)*x933))+(((-0.235)*x928))+((r20*x941))+(((0.03)*x934))+(((-1.0)*(0.25)*cj12)));
evalcond[5]=((((-1.0)*(1.0)*py))+(((0.235)*x933))+(((0.03)*x928))+(((-0.03)*x931))+(((-1.0)*r11*x942))+(((0.25)*sj12))+((r10*x941))+(((0.235)*x934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x943=((1.0)*sj15);
IkReal x944=((1.0)*cj15);
CheckValue<IkReal> x945 = IKatan2WithCheck(IkReal((((r10*sj16))+((cj16*r11)))),IkReal(((((-1.0)*r12*x944))+((cj16*r10*sj15))+(((-1.0)*r11*sj16*x943)))),IKFAST_ATAN2_MAGTHRESH);
if(!x945.valid){
continue;
}
CheckValue<IkReal> x946=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*x943))+(((-1.0)*cj16*r20*x944))+((cj15*r21*sj16)))),-1);
if(!x946.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x945.value)+(((1.5707963267949)*(x946.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x947=IKsin(j14);
IkReal x948=(cj16*r01);
IkReal x949=(r00*sj16);
IkReal x950=IKcos(j14);
IkReal x951=((1.0)*cj15*r02);
IkReal x952=(cj16*r00*sj15);
IkReal x953=(r01*sj15);
IkReal x954=((1.0)*sj16*x950);
IkReal x955=((1.0)*cj15*x947);
IkReal x956=((1.0)*cj16*x950);
IkReal x957=(cj16*sj15*x947);
IkReal x958=((1.0)*sj15*sj16*x947);
IkReal x959=((1.0)*x950);
evalcond[0]=((((-1.0)*x953*x954))+((x950*x952))+(((-1.0)*x950*x951))+((x947*x949))+((x947*x948)));
evalcond[1]=((((-1.0)*r21*x958))+(((-1.0)*r21*x956))+(((-1.0)*r22*x955))+(((-1.0)*r20*x954))+((r20*x957)));
evalcond[2]=(((r10*x957))+(((-1.0)*r12*x955))+(((-1.0)*r11*x958))+(((-1.0)*r11*x956))+(((-1.0)*r10*x954)));
evalcond[3]=((1.0)+(((-1.0)*sj16*x947*x953))+(((-1.0)*x947*x951))+(((-1.0)*x949*x959))+((x947*x952))+(((-1.0)*x948*x959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[1];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x960=(cj16*r20);
IkReal x961=(r12*sj15);
IkReal x962=(r21*sj16);
IkReal x963=(r22*sj15);
IkReal x964=(cj15*cj16*r10);
IkReal x965=(cj15*cj16*r20);
IkReal x966=(cj15*r11*sj16);
IkReal x967=(cj15*r21*sj16);
IkReal x968=((((-0.36)*x964))+(((-2.82)*x965))+(((1.08)*x962))+(((2.82)*x967))+(((-0.36)*x961))+(((0.36)*x966))+(((-2.82)*x963))+(((12.0)*pz))+(((-1.08)*x960)));
j12eval[0]=((IKabs(((-1.0)+(((0.94)*x967))+(((-0.12)*x961))+(((-0.94)*x965))+(((0.36)*x962))+(((-0.36)*x960))+(((0.12)*x966))+(((4.0)*pz))+(((-0.12)*x964))+(((-0.94)*x963)))))+(IKabs(((1.0)+x968)))+(IKabs(((-1.0)+x968))));
if( IKabs(j12eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j12, j13]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j12evalpoly[1];
IkReal x969=(cj16*r20);
IkReal x970=(r12*sj15);
IkReal x971=(r21*sj16);
IkReal x972=(r22*sj15);
IkReal x973=(cj15*cj16*r10);
IkReal x974=(cj15*cj16*r20);
IkReal x975=(cj15*r11*sj16);
IkReal x976=(cj15*r21*sj16);
IkReal x977=((((-0.12)*x970))+(((0.12)*x975))+(((-0.94)*x974))+(((0.36)*x971))+(((4.0)*pz))+(((-0.94)*x972))+(((0.94)*x976))+(((-0.12)*x973))+(((-0.36)*x969)));
IkReal x978=((((1.08)*x971))+(((-0.36)*x973))+(((-0.36)*x970))+(((2.82)*x976))+(((0.36)*x975))+(((-1.08)*x969))+(((-2.82)*x974))+(((12.0)*pz))+(((-2.82)*x972)));
op[0]=((-1.0)+x977);
op[1]=0;
op[2]=((-1.0)+x978);
op[3]=0;
op[4]=((1.0)+x978);
op[5]=0;
op[6]=((1.0)+x977);
polyroots6(op,zeror,numroots);
IkReal j12array[6], cj12array[6], sj12array[6], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[6]={true,true,true,true,true,true};
_nj12 = 6;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

IkReal x979=(cj16*r20);
IkReal x980=((0.36)*x979);
IkReal x981=(r21*sj16);
IkReal x982=((0.36)*x981);
IkReal x983=(r22*sj15);
IkReal x984=(cj14*cj15*r22);
IkReal x985=(cj15*cj16*r20);
IkReal x986=(cj15*r21*sj16);
IkReal x987=(cj16*r21*sj14);
IkReal x988=(r20*sj14*sj16);
IkReal x989=((0.12)*cj14*sj15);
IkReal x990=(((x979*x989))+(((0.12)*x988))+(((0.94)*x985))+(((-1.0)*(4.0)*pz))+(((-1.0)*x981*x989))+(((-1.0)*x982))+(((0.94)*x983))+x980+(((0.12)*x987))+(((-0.12)*x984))+(((-0.94)*x986)));
IkReal x991=(cj14*sj15);
IkReal x992=((((-1.08)*x981))+(((-1.0)*(12.0)*pz))+(((0.36)*x988))+(((-2.82)*x986))+(((-1.0)*x982*x991))+(((0.36)*x987))+(((-0.36)*x984))+(((2.82)*x985))+((x980*x991))+(((2.82)*x983))+(((1.08)*x979)));
j12evalpoly[0]=((-1.0)+(((htj12*htj12*htj12*htj12*htj12*htj12)*(((1.0)+x990))))+(((htj12*htj12)*(((-1.0)+x992))))+(((htj12*htj12*htj12*htj12)*(((1.0)+x992))))+x990);
if( IKabs(j12evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x993=(r12*sj15);
IkReal x994=(r22*sj15);
IkReal x995=(cj12*cj15);
IkReal x996=(cj16*r10);
IkReal x997=(cj15*sj12);
IkReal x998=(cj16*r20);
IkReal x999=(r11*sj16);
IkReal x1000=((1.0)*cj12*cj15);
IkReal x1001=(r21*sj16);
IkReal x1002=((1.0)*cj15*sj12);
if( IKabs((((cj12*x993))+((x997*x998))+((x995*x996))+((sj12*x994))+(((-1.0)*x1000*x999))+(((-1.0)*x1001*x1002)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj12*x993))+((x1001*x995))+(((-1.0)*cj12*x994))+((x996*x997))+(((-1.0)*x1002*x999))+(((-1.0)*x1000*x998)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj12*x993))+((x997*x998))+((x995*x996))+((sj12*x994))+(((-1.0)*x1000*x999))+(((-1.0)*x1001*x1002))))+IKsqr((((sj12*x993))+((x1001*x995))+(((-1.0)*cj12*x994))+((x996*x997))+(((-1.0)*x1002*x999))+(((-1.0)*x1000*x998))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((cj12*x993))+((x997*x998))+((x995*x996))+((sj12*x994))+(((-1.0)*x1000*x999))+(((-1.0)*x1001*x1002))), (((sj12*x993))+((x1001*x995))+(((-1.0)*cj12*x994))+((x996*x997))+(((-1.0)*x1002*x999))+(((-1.0)*x1000*x998))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1003=IKcos(j13);
IkReal x1004=(cj12*x1003);
IkReal x1005=(cj15*cj16);
IkReal x1006=IKsin(j13);
IkReal x1007=(sj12*x1006);
IkReal x1008=((1.0)*cj15*sj16);
IkReal x1009=(cj12*x1006);
IkReal x1010=(sj12*x1003);
IkReal x1011=((((-1.0)*x1010))+(((-1.0)*x1009)));
IkReal x1012=(cj16*sj14);
IkReal x1013=(sj14*sj16);
IkReal x1014=((1.0)*cj14*cj15);
IkReal x1015=(cj14*cj16*sj15);
IkReal x1016=((1.0)*cj14*sj15*sj16);
IkReal x1017=((0.09)*cj16);
IkReal x1018=((0.09)*sj16);
evalcond[0]=(((r22*sj15))+x1004+(((-1.0)*x1007))+(((-1.0)*r21*x1008))+((r20*x1005)));
evalcond[1]=(((r12*sj15))+((r10*x1005))+x1011+(((-1.0)*r11*x1008)));
evalcond[2]=((((-1.0)*r11*x1016))+(((-1.0)*x1004))+((r10*x1013))+x1007+((r10*x1015))+(((-1.0)*r12*x1014))+((r11*x1012)));
evalcond[3]=(((r20*x1015))+((r21*x1012))+(((-1.0)*r21*x1016))+x1011+(((-1.0)*r22*x1014))+((r20*x1013)));
evalcond[4]=(((r20*x1017))+(((-1.0)*(1.0)*pz))+(((0.03)*x1009))+(((-0.235)*x1004))+(((0.03)*x1010))+(((-1.0)*(0.25)*cj12))+(((0.235)*x1007))+(((-1.0)*r21*x1018)));
evalcond[5]=((((-0.03)*x1007))+((r10*x1017))+(((-1.0)*(1.0)*py))+(((0.235)*x1009))+(((0.03)*x1004))+(((0.235)*x1010))+(((0.25)*sj12))+(((-1.0)*r11*x1018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1019=((1.0)*cj15);
CheckValue<IkReal> x1020 = IKatan2WithCheck(IkReal((((cj16*r21))+((r20*sj16)))),IkReal(((((-1.0)*r22*x1019))+((cj16*r20*sj15))+(((-1.0)*(1.0)*r21*sj15*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1020.valid){
continue;
}
CheckValue<IkReal> x1021=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj16*x1019))+((cj15*cj16*r10))+((r12*sj15)))),-1);
if(!x1021.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1020.value)+(((1.5707963267949)*(x1021.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x1022=IKsin(j14);
IkReal x1023=(cj16*r01);
IkReal x1024=(r00*sj16);
IkReal x1025=IKcos(j14);
IkReal x1026=((1.0)*cj15*r02);
IkReal x1027=(cj16*r00*sj15);
IkReal x1028=(r01*sj15);
IkReal x1029=((1.0)*sj16*x1025);
IkReal x1030=((1.0)*cj15*x1022);
IkReal x1031=((1.0)*cj16*x1025);
IkReal x1032=(cj16*sj15*x1022);
IkReal x1033=((1.0)*sj15*sj16*x1022);
IkReal x1034=((1.0)*x1025);
evalcond[0]=(((x1022*x1024))+(((-1.0)*x1028*x1029))+((x1022*x1023))+(((-1.0)*x1025*x1026))+((x1025*x1027)));
evalcond[1]=((((-1.0)*r21*x1031))+((r20*x1032))+(((-1.0)*r22*x1030))+(((-1.0)*r20*x1029))+(((-1.0)*r21*x1033)));
evalcond[2]=(((r10*x1032))+(((-1.0)*r11*x1031))+(((-1.0)*r10*x1029))+(((-1.0)*r12*x1030))+(((-1.0)*r11*x1033)));
evalcond[3]=((1.0)+(((-1.0)*x1022*x1026))+(((-1.0)*x1024*x1034))+(((-1.0)*sj16*x1022*x1028))+(((-1.0)*x1023*x1034))+((x1022*x1027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[1];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x1035=(cj16*r20);
IkReal x1036=(r12*sj15);
IkReal x1037=(r21*sj16);
IkReal x1038=(r22*sj15);
IkReal x1039=(cj15*cj16*r10);
IkReal x1040=(cj15*cj16*r20);
IkReal x1041=(cj15*r11*sj16);
IkReal x1042=(cj15*r21*sj16);
IkReal x1043=((((-2.82)*x1040))+(((-2.82)*x1038))+(((2.82)*x1042))+(((-1.08)*x1035))+(((-0.36)*x1039))+(((1.08)*x1037))+(((12.0)*pz))+(((-0.36)*x1036))+(((0.36)*x1041)));
j12eval[0]=((IKabs(((-1.0)+x1043)))+(IKabs(((1.0)+x1043)))+(IKabs(((-1.0)+(((0.36)*x1037))+(((-0.12)*x1039))+(((0.94)*x1042))+(((0.12)*x1041))+(((-0.94)*x1038))+(((4.0)*pz))+(((-0.94)*x1040))+(((-0.36)*x1035))+(((-0.12)*x1036))))));
if( IKabs(j12eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j12, j13]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j12evalpoly[1];
IkReal x1044=(cj16*r20);
IkReal x1045=(r12*sj15);
IkReal x1046=(r21*sj16);
IkReal x1047=(r22*sj15);
IkReal x1048=(cj15*cj16*r10);
IkReal x1049=(cj15*cj16*r20);
IkReal x1050=(cj15*r11*sj16);
IkReal x1051=(cj15*r21*sj16);
IkReal x1052=((((-0.36)*x1044))+(((0.12)*x1050))+(((-0.94)*x1047))+(((0.94)*x1051))+(((4.0)*pz))+(((-0.12)*x1045))+(((-0.12)*x1048))+(((-0.94)*x1049))+(((0.36)*x1046)));
IkReal x1053=((((-2.82)*x1047))+(((0.36)*x1050))+(((-1.08)*x1044))+(((-2.82)*x1049))+(((1.08)*x1046))+(((12.0)*pz))+(((2.82)*x1051))+(((-0.36)*x1045))+(((-0.36)*x1048)));
op[0]=((-1.0)+x1052);
op[1]=0;
op[2]=((-1.0)+x1053);
op[3]=0;
op[4]=((1.0)+x1053);
op[5]=0;
op[6]=((1.0)+x1052);
polyroots6(op,zeror,numroots);
IkReal j12array[6], cj12array[6], sj12array[6], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[6]={true,true,true,true,true,true};
_nj12 = 6;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

IkReal x1054=(cj16*r20);
IkReal x1055=((0.36)*x1054);
IkReal x1056=(r21*sj16);
IkReal x1057=((0.36)*x1056);
IkReal x1058=(r22*sj15);
IkReal x1059=(cj14*cj15*r22);
IkReal x1060=(cj15*cj16*r20);
IkReal x1061=(cj15*r21*sj16);
IkReal x1062=(cj16*r21*sj14);
IkReal x1063=(r20*sj14*sj16);
IkReal x1064=((0.12)*cj14*sj15);
IkReal x1065=((((0.12)*x1062))+(((0.12)*x1063))+(((-1.0)*(4.0)*pz))+x1055+((x1054*x1064))+(((-0.12)*x1059))+(((0.94)*x1058))+(((-0.94)*x1061))+(((-1.0)*x1056*x1064))+(((0.94)*x1060))+(((-1.0)*x1057)));
IkReal x1066=(cj14*sj15);
IkReal x1067=((((-1.0)*(12.0)*pz))+(((-1.08)*x1056))+(((2.82)*x1058))+(((-1.0)*x1057*x1066))+(((2.82)*x1060))+(((0.36)*x1063))+(((1.08)*x1054))+(((-0.36)*x1059))+((x1055*x1066))+(((0.36)*x1062))+(((-2.82)*x1061)));
j12evalpoly[0]=((-1.0)+x1065+(((htj12*htj12*htj12*htj12)*(((1.0)+x1067))))+(((htj12*htj12)*(((-1.0)+x1067))))+(((htj12*htj12*htj12*htj12*htj12*htj12)*(((1.0)+x1065)))));
if( IKabs(j12evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1068=(r12*sj15);
IkReal x1069=(r22*sj15);
IkReal x1070=(cj12*cj15);
IkReal x1071=(cj16*r10);
IkReal x1072=(cj15*sj12);
IkReal x1073=(cj16*r20);
IkReal x1074=(r11*sj16);
IkReal x1075=((1.0)*cj12*cj15);
IkReal x1076=(r21*sj16);
IkReal x1077=((1.0)*cj15*sj12);
if( IKabs((((x1072*x1073))+(((-1.0)*x1076*x1077))+((sj12*x1069))+(((-1.0)*x1074*x1075))+((cj12*x1068))+((x1070*x1071)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1071*x1072))+((x1070*x1076))+((sj12*x1068))+(((-1.0)*x1074*x1077))+(((-1.0)*cj12*x1069))+(((-1.0)*x1073*x1075)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1072*x1073))+(((-1.0)*x1076*x1077))+((sj12*x1069))+(((-1.0)*x1074*x1075))+((cj12*x1068))+((x1070*x1071))))+IKsqr((((x1071*x1072))+((x1070*x1076))+((sj12*x1068))+(((-1.0)*x1074*x1077))+(((-1.0)*cj12*x1069))+(((-1.0)*x1073*x1075))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((x1072*x1073))+(((-1.0)*x1076*x1077))+((sj12*x1069))+(((-1.0)*x1074*x1075))+((cj12*x1068))+((x1070*x1071))), (((x1071*x1072))+((x1070*x1076))+((sj12*x1068))+(((-1.0)*x1074*x1077))+(((-1.0)*cj12*x1069))+(((-1.0)*x1073*x1075))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1078=IKcos(j13);
IkReal x1079=(cj12*x1078);
IkReal x1080=(cj15*cj16);
IkReal x1081=IKsin(j13);
IkReal x1082=(sj12*x1081);
IkReal x1083=((1.0)*cj15*sj16);
IkReal x1084=(cj12*x1081);
IkReal x1085=(sj12*x1078);
IkReal x1086=((((-1.0)*x1085))+(((-1.0)*x1084)));
IkReal x1087=(cj16*sj14);
IkReal x1088=(sj14*sj16);
IkReal x1089=((1.0)*cj14*cj15);
IkReal x1090=(cj14*cj16*sj15);
IkReal x1091=((1.0)*cj14*sj15*sj16);
IkReal x1092=((0.09)*cj16);
IkReal x1093=((0.09)*sj16);
evalcond[0]=(((r22*sj15))+x1079+(((-1.0)*r21*x1083))+((r20*x1080))+(((-1.0)*x1082)));
evalcond[1]=(((r10*x1080))+((r12*sj15))+x1086+(((-1.0)*r11*x1083)));
evalcond[2]=((((-1.0)*r11*x1091))+((r10*x1090))+((r11*x1087))+((r10*x1088))+x1082+(((-1.0)*r12*x1089))+(((-1.0)*x1079)));
evalcond[3]=(((r20*x1090))+(((-1.0)*r21*x1091))+((r20*x1088))+x1086+(((-1.0)*r22*x1089))+((r21*x1087)));
evalcond[4]=(((r20*x1092))+(((-1.0)*(1.0)*pz))+(((0.03)*x1085))+(((0.03)*x1084))+(((-1.0)*r21*x1093))+(((-0.235)*x1079))+(((0.235)*x1082))+(((-1.0)*(0.25)*cj12)));
evalcond[5]=((((-1.0)*(1.0)*py))+(((-1.0)*r11*x1093))+(((0.25)*sj12))+(((0.235)*x1085))+(((0.235)*x1084))+(((0.03)*x1079))+((r10*x1092))+(((-0.03)*x1082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12, j13, j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1094=((1.0)*cj16);
IkReal x1095=((1.0)*cj11);
IkReal x1096=(r11*sj11);
IkReal x1097=(r10*sj11);
IkReal x1098=(sj15*sj16);
IkReal x1099=((1.0)*cj16*sj15);
CheckValue<IkReal> x1100=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*sj15))+((cj15*r21*sj16))+(((-1.0)*cj15*r20*x1094)))),-1);
if(!x1100.valid){
continue;
}
CheckValue<IkReal> x1101 = IKatan2WithCheck(IkReal(((((-1.0)*cj16*r01*x1095))+(((-1.0)*r00*sj16*x1095))+(((-1.0)*x1094*x1096))+(((-1.0)*sj16*x1097)))),IkReal((((cj11*cj15*r02))+((cj11*r01*x1098))+((cj15*r12*sj11))+((x1096*x1098))+(((-1.0)*x1097*x1099))+(((-1.0)*cj11*r00*x1099)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1101.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1100.value)))+(x1101.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x1102=IKsin(j14);
IkReal x1103=((1.0)*cj15*x1102);
IkReal x1104=IKcos(j14);
IkReal x1105=((1.0)*cj16*x1104);
IkReal x1106=((1.0)*sj16*x1104);
IkReal x1107=(cj16*sj15*x1102);
IkReal x1108=((1.0)*sj15*sj16*x1102);
evalcond[0]=((((-1.0)*r21*x1105))+((r20*x1107))+(((-1.0)*r22*x1103))+(((-1.0)*r21*x1108))+(((-1.0)*r20*x1106)));
evalcond[1]=((((-1.0)*r10*x1106))+cj11+((r10*x1107))+(((-1.0)*r11*x1105))+(((-1.0)*r12*x1103))+(((-1.0)*r11*x1108)));
evalcond[2]=((((-1.0)*r01*x1108))+(((-1.0)*r00*x1106))+(((-1.0)*r02*x1103))+(((-1.0)*r01*x1105))+((r00*x1107))+(((-1.0)*(1.0)*sj11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[1];
IkReal x1109=(cj11*pz);
IkReal x1110=(r02*sj15);
IkReal x1111=(cj11*cj16*r20);
IkReal x1112=(cj11*r21*sj16);
IkReal x1113=(cj11*r22*sj15);
IkReal x1114=(cj15*cj16*r00);
IkReal x1115=(cj15*r01*sj16);
IkReal x1116=(cj11*cj15*cj16*r20);
IkReal x1117=(cj11*cj15*r21*sj16);
IkReal x1118=((((2.82)*x1116))+(((1.08)*x1111))+(((-2.82)*x1117))+(((-0.36)*x1114))+(((-1.08)*x1112))+(((-0.36)*x1110))+(((0.36)*x1115))+(((-12.0)*x1109))+(((2.82)*x1113)));
j12eval[0]=((IKabs(((((-1.0)*(1.0)*cj11))+x1118)))+(IKabs(((((-0.36)*x1112))+(((0.94)*x1116))+(((-0.12)*x1110))+(((0.36)*x1111))+(((-4.0)*x1109))+(((-0.94)*x1117))+(((-0.12)*x1114))+cj11+(((0.12)*x1115))+(((0.94)*x1113)))))+(IKabs((x1118+cj11))));
if( IKabs(j12eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j12, j13]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j12evalpoly[1];
IkReal x1119=(cj11*pz);
IkReal x1120=(r02*sj15);
IkReal x1121=(cj11*cj16*r20);
IkReal x1122=(cj11*r21*sj16);
IkReal x1123=(cj11*r22*sj15);
IkReal x1124=(cj15*cj16*r00);
IkReal x1125=(cj15*r01*sj16);
IkReal x1126=(cj11*cj15*cj16*r20);
IkReal x1127=(cj11*cj15*r21*sj16);
IkReal x1128=((((0.12)*x1125))+(((-0.36)*x1122))+(((-0.94)*x1127))+(((0.94)*x1123))+(((0.94)*x1126))+(((-0.12)*x1120))+(((0.36)*x1121))+(((-4.0)*x1119))+(((-0.12)*x1124)));
IkReal x1129=((((-0.36)*x1120))+(((-1.08)*x1122))+(((2.82)*x1123))+(((1.08)*x1121))+(((2.82)*x1126))+(((-2.82)*x1127))+(((-0.36)*x1124))+(((0.36)*x1125))+(((-12.0)*x1119)));
IkReal x1130=((-1.0)*(((1.0)*cj11)));
op[0]=(x1128+cj11);
op[1]=0;
op[2]=(x1129+cj11);
op[3]=0;
op[4]=(x1129+x1130);
op[5]=0;
op[6]=(x1128+x1130);
polyroots6(op,zeror,numroots);
IkReal j12array[6], cj12array[6], sj12array[6], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[6]={true,true,true,true,true,true};
_nj12 = 6;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

IkReal x1131=(pz*sj11);
IkReal x1132=(r12*sj15);
IkReal x1133=(cj15*cj16*r10);
IkReal x1134=(cj15*r11*sj16);
IkReal x1135=(cj16*r20*sj11);
IkReal x1136=(r21*sj11*sj16);
IkReal x1137=(r22*sj11*sj15);
IkReal x1138=(cj15*cj16*r20*sj11);
IkReal x1139=(cj15*r21*sj11*sj16);
IkReal x1140=((((-0.36)*x1136))+(((0.94)*x1137))+(((0.12)*x1134))+(((-4.0)*x1131))+(((-0.12)*x1133))+(((0.36)*x1135))+(((0.94)*x1138))+(((-0.94)*x1139))+(((-0.12)*x1132)));
IkReal x1141=((-1.0)*(((1.0)*sj11)));
IkReal x1142=((((-2.82)*x1139))+(((-12.0)*x1131))+(((-1.08)*x1136))+(((-0.36)*x1132))+(((-0.36)*x1133))+(((1.08)*x1135))+(((2.82)*x1138))+(((0.36)*x1134))+(((2.82)*x1137)));
j12evalpoly[0]=((((htj12*htj12*htj12*htj12*htj12*htj12)*((sj11+x1140))))+(((htj12*htj12*htj12*htj12)*((sj11+x1142))))+x1141+x1140+(((htj12*htj12)*((x1141+x1142)))));
if( IKabs(j12evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1143=(r22*sj15);
IkReal x1144=(cj12*r21);
IkReal x1145=(cj16*sj14);
IkReal x1146=(r20*sj14*sj16);
IkReal x1147=(cj15*cj16*r20);
IkReal x1148=((1.0)*cj12);
IkReal x1149=(cj14*cj15*r22);
IkReal x1150=(cj15*sj16);
IkReal x1151=((1.0)*r21*sj12);
IkReal x1152=(cj14*cj16*r20*sj15);
IkReal x1153=(cj14*sj15*sj16);
if( IKabs((((cj12*x1146))+(((-1.0)*x1148*x1149))+(((-1.0)*x1150*x1151))+(((-1.0)*cj12*r21*x1153))+((x1144*x1145))+((sj12*x1147))+((cj12*x1152))+((sj12*x1143)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1144*x1150))+(((-1.0)*x1151*x1153))+(((-1.0)*x1143*x1148))+(((-1.0)*x1147*x1148))+((r21*sj12*x1145))+((sj12*x1152))+((sj12*x1146))+(((-1.0)*sj12*x1149)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj12*x1146))+(((-1.0)*x1148*x1149))+(((-1.0)*x1150*x1151))+(((-1.0)*cj12*r21*x1153))+((x1144*x1145))+((sj12*x1147))+((cj12*x1152))+((sj12*x1143))))+IKsqr((((x1144*x1150))+(((-1.0)*x1151*x1153))+(((-1.0)*x1143*x1148))+(((-1.0)*x1147*x1148))+((r21*sj12*x1145))+((sj12*x1152))+((sj12*x1146))+(((-1.0)*sj12*x1149))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((cj12*x1146))+(((-1.0)*x1148*x1149))+(((-1.0)*x1150*x1151))+(((-1.0)*cj12*r21*x1153))+((x1144*x1145))+((sj12*x1147))+((cj12*x1152))+((sj12*x1143))), (((x1144*x1150))+(((-1.0)*x1151*x1153))+(((-1.0)*x1143*x1148))+(((-1.0)*x1147*x1148))+((r21*sj12*x1145))+((sj12*x1152))+((sj12*x1146))+(((-1.0)*sj12*x1149))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x1154=IKcos(j13);
IkReal x1155=(cj12*x1154);
IkReal x1156=(cj15*cj16);
IkReal x1157=IKsin(j13);
IkReal x1158=(sj12*x1157);
IkReal x1159=((1.0)*x1158);
IkReal x1160=((1.0)*cj15*sj16);
IkReal x1161=(cj12*x1157);
IkReal x1162=(cj11*x1161);
IkReal x1163=(sj12*x1154);
IkReal x1164=(cj11*x1163);
IkReal x1165=(sj11*x1161);
IkReal x1166=(sj11*x1163);
IkReal x1167=(cj16*sj14);
IkReal x1168=(sj14*sj16);
IkReal x1169=((1.0)*cj14*cj15);
IkReal x1170=(cj14*cj16*sj15);
IkReal x1171=((1.0)*cj14*sj15*sj16);
IkReal x1172=((0.09)*cj16);
IkReal x1173=((0.09)*sj16);
IkReal x1174=(cj11*x1155);
IkReal x1175=(sj11*x1155);
IkReal x1176=((0.25)*sj12);
IkReal x1177=((0.03)*sj12*x1157);
evalcond[0]=(((r22*sj15))+x1155+(((-1.0)*x1159))+((r20*x1156))+(((-1.0)*r21*x1160)));
evalcond[1]=((((-1.0)*r01*x1160))+((r02*sj15))+x1162+x1164+((r00*x1156)));
evalcond[2]=(((r10*x1156))+((r12*sj15))+x1166+x1165+(((-1.0)*r11*x1160)));
evalcond[3]=((((-1.0)*x1161))+(((-1.0)*r22*x1169))+((r20*x1168))+((r20*x1170))+(((-1.0)*x1163))+(((-1.0)*r21*x1171))+((r21*x1167)));
evalcond[4]=((((0.03)*x1163))+(((-1.0)*(1.0)*pz))+(((-1.0)*r21*x1173))+(((0.03)*x1161))+(((0.235)*x1158))+(((-0.235)*x1155))+(((-1.0)*(0.25)*cj12))+((r20*x1172)));
evalcond[5]=(((r00*x1170))+(((-1.0)*cj11*x1159))+((r00*x1168))+(((-1.0)*r01*x1171))+(((-1.0)*r02*x1169))+x1174+((r01*x1167)));
evalcond[6]=(((r11*x1167))+((r10*x1168))+(((-1.0)*sj11*x1159))+(((-1.0)*r12*x1169))+((r10*x1170))+x1175+(((-1.0)*r11*x1171)));
evalcond[7]=((((-1.0)*(1.0)*px))+(((-1.0)*(0.095)*sj11))+(((-1.0)*r01*x1173))+(((-0.03)*x1174))+((cj11*x1177))+(((-0.235)*x1164))+((r00*x1172))+(((-1.0)*cj11*x1176))+(((-0.235)*x1162)));
evalcond[8]=((((-0.235)*x1166))+(((-1.0)*(1.0)*py))+((r10*x1172))+(((-0.235)*x1165))+(((-0.03)*x1175))+((sj11*x1177))+(((-1.0)*sj11*x1176))+(((0.095)*cj11))+(((-1.0)*r11*x1173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1178=((1.0)*sj16);
IkReal x1179=(r21*sj11);
IkReal x1180=(r20*sj11);
CheckValue<IkReal> x1181 = IKatan2WithCheck(IkReal(((((-1.0)*cj16*x1179))+(((-1.0)*x1178*x1180)))),IkReal((((cj15*r22*sj11))+(((-1.0)*cj16*sj15*x1180))+((sj15*sj16*x1179)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1181.valid){
continue;
}
CheckValue<IkReal> x1182=IKPowWithIntegerCheck(IKsign((((cj15*cj16*r10))+((r12*sj15))+(((-1.0)*cj15*r11*x1178)))),-1);
if(!x1182.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1181.value)+(((1.5707963267949)*(x1182.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x1183=IKsin(j14);
IkReal x1184=((1.0)*cj15*x1183);
IkReal x1185=IKcos(j14);
IkReal x1186=((1.0)*cj16*x1185);
IkReal x1187=((1.0)*sj16*x1185);
IkReal x1188=(cj16*sj15*x1183);
IkReal x1189=((1.0)*sj15*sj16*x1183);
evalcond[0]=((((-1.0)*r20*x1187))+(((-1.0)*r21*x1189))+(((-1.0)*r22*x1184))+(((-1.0)*r21*x1186))+((r20*x1188)));
evalcond[1]=((((-1.0)*r11*x1189))+cj11+((r10*x1188))+(((-1.0)*r10*x1187))+(((-1.0)*r11*x1186))+(((-1.0)*r12*x1184)));
evalcond[2]=((((-1.0)*r01*x1186))+(((-1.0)*r00*x1187))+((r00*x1188))+(((-1.0)*r01*x1189))+(((-1.0)*(1.0)*sj11))+(((-1.0)*r02*x1184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[1];
IkReal x1190=(cj11*pz);
IkReal x1191=(r02*sj15);
IkReal x1192=(cj11*cj16*r20);
IkReal x1193=(cj11*r21*sj16);
IkReal x1194=(cj11*r22*sj15);
IkReal x1195=(cj15*cj16*r00);
IkReal x1196=(cj15*r01*sj16);
IkReal x1197=(cj11*cj15*cj16*r20);
IkReal x1198=(cj11*cj15*r21*sj16);
IkReal x1199=((((-1.08)*x1193))+(((2.82)*x1197))+(((-12.0)*x1190))+(((-2.82)*x1198))+(((1.08)*x1192))+(((-0.36)*x1195))+(((2.82)*x1194))+(((0.36)*x1196))+(((-0.36)*x1191)));
j12eval[0]=((IKabs(((((-0.12)*x1191))+(((-0.12)*x1195))+(((-0.36)*x1193))+(((0.94)*x1194))+cj11+(((0.94)*x1197))+(((0.36)*x1192))+(((0.12)*x1196))+(((-4.0)*x1190))+(((-0.94)*x1198)))))+(IKabs(((((-1.0)*(1.0)*cj11))+x1199)))+(IKabs((cj11+x1199))));
if( IKabs(j12eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j12, j13]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j12evalpoly[1];
IkReal x1200=(cj11*pz);
IkReal x1201=(r02*sj15);
IkReal x1202=(cj11*cj16*r20);
IkReal x1203=(cj11*r21*sj16);
IkReal x1204=(cj11*r22*sj15);
IkReal x1205=(cj15*cj16*r00);
IkReal x1206=(cj15*r01*sj16);
IkReal x1207=(cj11*cj15*cj16*r20);
IkReal x1208=(cj11*cj15*r21*sj16);
IkReal x1209=((((0.94)*x1204))+(((-4.0)*x1200))+(((-0.12)*x1205))+(((-0.12)*x1201))+(((-0.94)*x1208))+(((0.12)*x1206))+(((-0.36)*x1203))+(((0.94)*x1207))+(((0.36)*x1202)));
IkReal x1210=((((0.36)*x1206))+(((2.82)*x1204))+(((2.82)*x1207))+(((-0.36)*x1201))+(((-1.08)*x1203))+(((-2.82)*x1208))+(((-12.0)*x1200))+(((1.08)*x1202))+(((-0.36)*x1205)));
IkReal x1211=((-1.0)*(((1.0)*cj11)));
op[0]=(x1209+cj11);
op[1]=0;
op[2]=(cj11+x1210);
op[3]=0;
op[4]=(x1210+x1211);
op[5]=0;
op[6]=(x1209+x1211);
polyroots6(op,zeror,numroots);
IkReal j12array[6], cj12array[6], sj12array[6], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[6]={true,true,true,true,true,true};
_nj12 = 6;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

IkReal x1212=(pz*sj11);
IkReal x1213=(r12*sj15);
IkReal x1214=(cj15*cj16*r10);
IkReal x1215=(cj15*r11*sj16);
IkReal x1216=(cj16*r20*sj11);
IkReal x1217=(r21*sj11*sj16);
IkReal x1218=(r22*sj11*sj15);
IkReal x1219=(cj15*cj16*r20*sj11);
IkReal x1220=(cj15*r21*sj11*sj16);
IkReal x1221=((((-0.12)*x1214))+(((-4.0)*x1212))+(((0.94)*x1218))+(((-0.94)*x1220))+(((-0.36)*x1217))+(((-0.12)*x1213))+(((0.36)*x1216))+(((0.94)*x1219))+(((0.12)*x1215)));
IkReal x1222=((-1.0)*(((1.0)*sj11)));
IkReal x1223=((((-12.0)*x1212))+(((2.82)*x1218))+(((-1.08)*x1217))+(((-0.36)*x1214))+(((1.08)*x1216))+(((-0.36)*x1213))+(((-2.82)*x1220))+(((2.82)*x1219))+(((0.36)*x1215)));
j12evalpoly[0]=((((htj12*htj12)*((x1222+x1223))))+(((htj12*htj12*htj12*htj12)*((sj11+x1223))))+x1222+x1221+(((htj12*htj12*htj12*htj12*htj12*htj12)*((sj11+x1221)))));
if( IKabs(j12evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1224=(r22*sj15);
IkReal x1225=(cj12*r21);
IkReal x1226=(cj16*sj14);
IkReal x1227=(r20*sj14*sj16);
IkReal x1228=(cj15*cj16*r20);
IkReal x1229=((1.0)*cj12);
IkReal x1230=(cj14*cj15*r22);
IkReal x1231=(cj15*sj16);
IkReal x1232=((1.0)*r21*sj12);
IkReal x1233=(cj14*cj16*r20*sj15);
IkReal x1234=(cj14*sj15*sj16);
if( IKabs((((sj12*x1228))+(((-1.0)*x1229*x1230))+((x1225*x1226))+((cj12*x1227))+((cj12*x1233))+((sj12*x1224))+(((-1.0)*x1231*x1232))+(((-1.0)*cj12*r21*x1234)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1228*x1229))+((sj12*x1227))+(((-1.0)*sj12*x1230))+((x1225*x1231))+(((-1.0)*x1232*x1234))+((r21*sj12*x1226))+(((-1.0)*x1224*x1229))+((sj12*x1233)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj12*x1228))+(((-1.0)*x1229*x1230))+((x1225*x1226))+((cj12*x1227))+((cj12*x1233))+((sj12*x1224))+(((-1.0)*x1231*x1232))+(((-1.0)*cj12*r21*x1234))))+IKsqr(((((-1.0)*x1228*x1229))+((sj12*x1227))+(((-1.0)*sj12*x1230))+((x1225*x1231))+(((-1.0)*x1232*x1234))+((r21*sj12*x1226))+(((-1.0)*x1224*x1229))+((sj12*x1233))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((sj12*x1228))+(((-1.0)*x1229*x1230))+((x1225*x1226))+((cj12*x1227))+((cj12*x1233))+((sj12*x1224))+(((-1.0)*x1231*x1232))+(((-1.0)*cj12*r21*x1234))), ((((-1.0)*x1228*x1229))+((sj12*x1227))+(((-1.0)*sj12*x1230))+((x1225*x1231))+(((-1.0)*x1232*x1234))+((r21*sj12*x1226))+(((-1.0)*x1224*x1229))+((sj12*x1233))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x1235=IKcos(j13);
IkReal x1236=(cj12*x1235);
IkReal x1237=(cj15*cj16);
IkReal x1238=IKsin(j13);
IkReal x1239=(sj12*x1238);
IkReal x1240=((1.0)*x1239);
IkReal x1241=((1.0)*cj15*sj16);
IkReal x1242=(cj12*x1238);
IkReal x1243=(cj11*x1242);
IkReal x1244=(sj12*x1235);
IkReal x1245=(cj11*x1244);
IkReal x1246=(sj11*x1242);
IkReal x1247=(sj11*x1244);
IkReal x1248=(cj16*sj14);
IkReal x1249=(sj14*sj16);
IkReal x1250=((1.0)*cj14*cj15);
IkReal x1251=(cj14*cj16*sj15);
IkReal x1252=((1.0)*cj14*sj15*sj16);
IkReal x1253=((0.09)*cj16);
IkReal x1254=((0.09)*sj16);
IkReal x1255=(cj11*x1236);
IkReal x1256=(sj11*x1236);
IkReal x1257=((0.25)*sj12);
IkReal x1258=((0.03)*sj12*x1238);
evalcond[0]=(((r22*sj15))+(((-1.0)*r21*x1241))+x1236+((r20*x1237))+(((-1.0)*x1240)));
evalcond[1]=(((r02*sj15))+(((-1.0)*r01*x1241))+((r00*x1237))+x1245+x1243);
evalcond[2]=(((r12*sj15))+(((-1.0)*r11*x1241))+x1247+x1246+((r10*x1237)));
evalcond[3]=((((-1.0)*r22*x1250))+((r20*x1249))+(((-1.0)*r21*x1252))+(((-1.0)*x1242))+((r20*x1251))+(((-1.0)*x1244))+((r21*x1248)));
evalcond[4]=(((r20*x1253))+(((-1.0)*(1.0)*pz))+(((0.03)*x1242))+(((0.235)*x1239))+(((0.03)*x1244))+(((-0.235)*x1236))+(((-1.0)*r21*x1254))+(((-1.0)*(0.25)*cj12)));
evalcond[5]=(((r00*x1251))+(((-1.0)*r01*x1252))+((r01*x1248))+x1255+(((-1.0)*r02*x1250))+((r00*x1249))+(((-1.0)*cj11*x1240)));
evalcond[6]=((((-1.0)*sj11*x1240))+((r10*x1251))+x1256+(((-1.0)*r11*x1252))+((r10*x1249))+((r11*x1248))+(((-1.0)*r12*x1250)));
evalcond[7]=((((-1.0)*(1.0)*px))+(((-1.0)*(0.095)*sj11))+((r00*x1253))+(((-1.0)*cj11*x1257))+(((-0.235)*x1243))+((cj11*x1258))+(((-0.235)*x1245))+(((-0.03)*x1255))+(((-1.0)*r01*x1254)));
evalcond[8]=((((-1.0)*(1.0)*py))+(((-0.235)*x1246))+(((-1.0)*r11*x1254))+(((-0.235)*x1247))+((r10*x1253))+(((-1.0)*sj11*x1257))+(((0.095)*cj11))+((sj11*x1258))+(((-0.03)*x1256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1259=((1.0)*cj15);
IkReal x1260=(cj11*cj16);
IkReal x1261=(cj11*sj16);
CheckValue<IkReal> x1262=IKPowWithIntegerCheck(IKsign((((cj15*r01*sj16))+(((-1.0)*r02*sj15))+(((-1.0)*cj16*r00*x1259)))),-1);
if(!x1262.valid){
continue;
}
CheckValue<IkReal> x1263 = IKatan2WithCheck(IkReal((((r21*x1260))+((r20*x1261)))),IkReal((((r20*sj15*x1260))+(((-1.0)*r21*sj15*x1261))+(((-1.0)*cj11*r22*x1259)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1263.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1262.value)))+(x1263.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x1264=IKsin(j14);
IkReal x1265=((1.0)*cj15*x1264);
IkReal x1266=IKcos(j14);
IkReal x1267=((1.0)*cj16*x1266);
IkReal x1268=((1.0)*sj16*x1266);
IkReal x1269=(cj16*sj15*x1264);
IkReal x1270=((1.0)*sj15*sj16*x1264);
evalcond[0]=((((-1.0)*r21*x1270))+(((-1.0)*r22*x1265))+((r20*x1269))+(((-1.0)*r20*x1268))+(((-1.0)*r21*x1267)));
evalcond[1]=((((-1.0)*r10*x1268))+(((-1.0)*r11*x1270))+cj11+(((-1.0)*r11*x1267))+((r10*x1269))+(((-1.0)*r12*x1265)));
evalcond[2]=((((-1.0)*r01*x1270))+(((-1.0)*r00*x1268))+((r00*x1269))+(((-1.0)*r01*x1267))+(((-1.0)*r02*x1265))+(((-1.0)*(1.0)*sj11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[1];
IkReal x1271=(cj11*pz);
IkReal x1272=(r02*sj15);
IkReal x1273=(cj11*cj16*r20);
IkReal x1274=(cj11*r21*sj16);
IkReal x1275=(cj11*r22*sj15);
IkReal x1276=(cj15*cj16*r00);
IkReal x1277=(cj15*r01*sj16);
IkReal x1278=(cj11*cj15*cj16*r20);
IkReal x1279=(cj11*cj15*r21*sj16);
IkReal x1280=((((-12.0)*x1271))+(((-2.82)*x1279))+(((2.82)*x1275))+(((2.82)*x1278))+(((0.36)*x1277))+(((1.08)*x1273))+(((-0.36)*x1276))+(((-1.08)*x1274))+(((-0.36)*x1272)));
j12eval[0]=((IKabs((cj11+x1280)))+(IKabs(((((-1.0)*(1.0)*cj11))+x1280)))+(IKabs(((((0.12)*x1277))+(((-4.0)*x1271))+(((-0.12)*x1276))+(((-0.12)*x1272))+cj11+(((0.36)*x1273))+(((-0.94)*x1279))+(((0.94)*x1275))+(((0.94)*x1278))+(((-0.36)*x1274))))));
if( IKabs(j12eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j12, j13]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j12evalpoly[1];
IkReal x1281=(cj11*pz);
IkReal x1282=(r02*sj15);
IkReal x1283=(cj11*cj16*r20);
IkReal x1284=(cj11*r21*sj16);
IkReal x1285=(cj11*r22*sj15);
IkReal x1286=(cj15*cj16*r00);
IkReal x1287=(cj15*r01*sj16);
IkReal x1288=(cj11*cj15*cj16*r20);
IkReal x1289=(cj11*cj15*r21*sj16);
IkReal x1290=((((-0.36)*x1284))+(((0.94)*x1285))+(((0.94)*x1288))+(((-0.12)*x1286))+(((0.12)*x1287))+(((-0.12)*x1282))+(((0.36)*x1283))+(((-4.0)*x1281))+(((-0.94)*x1289)));
IkReal x1291=((((-2.82)*x1289))+(((-1.08)*x1284))+(((1.08)*x1283))+(((-0.36)*x1282))+(((2.82)*x1285))+(((-0.36)*x1286))+(((2.82)*x1288))+(((0.36)*x1287))+(((-12.0)*x1281)));
IkReal x1292=((-1.0)*(((1.0)*cj11)));
op[0]=(x1290+cj11);
op[1]=0;
op[2]=(x1291+cj11);
op[3]=0;
op[4]=(x1291+x1292);
op[5]=0;
op[6]=(x1290+x1292);
polyroots6(op,zeror,numroots);
IkReal j12array[6], cj12array[6], sj12array[6], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[6]={true,true,true,true,true,true};
_nj12 = 6;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

IkReal x1293=(pz*sj11);
IkReal x1294=(r12*sj15);
IkReal x1295=(cj15*cj16*r10);
IkReal x1296=(cj15*r11*sj16);
IkReal x1297=(cj16*r20*sj11);
IkReal x1298=(r21*sj11*sj16);
IkReal x1299=(r22*sj11*sj15);
IkReal x1300=(cj15*cj16*r20*sj11);
IkReal x1301=(cj15*r21*sj11*sj16);
IkReal x1302=((((0.36)*x1297))+(((0.94)*x1299))+(((0.94)*x1300))+(((0.12)*x1296))+(((-0.36)*x1298))+(((-0.12)*x1294))+(((-0.94)*x1301))+(((-0.12)*x1295))+(((-4.0)*x1293)));
IkReal x1303=((-1.0)*(((1.0)*sj11)));
IkReal x1304=((((1.08)*x1297))+(((0.36)*x1296))+(((-12.0)*x1293))+(((-0.36)*x1294))+(((-2.82)*x1301))+(((2.82)*x1300))+(((-1.08)*x1298))+(((2.82)*x1299))+(((-0.36)*x1295)));
j12evalpoly[0]=(x1302+x1303+(((htj12*htj12)*((x1304+x1303))))+(((htj12*htj12*htj12*htj12)*((x1304+sj11))))+(((htj12*htj12*htj12*htj12*htj12*htj12)*((x1302+sj11)))));
if( IKabs(j12evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1305=(r22*sj15);
IkReal x1306=(cj12*r21);
IkReal x1307=(cj16*sj14);
IkReal x1308=(r20*sj14*sj16);
IkReal x1309=(cj15*cj16*r20);
IkReal x1310=((1.0)*cj12);
IkReal x1311=(cj14*cj15*r22);
IkReal x1312=(cj15*sj16);
IkReal x1313=((1.0)*r21*sj12);
IkReal x1314=(cj14*cj16*r20*sj15);
IkReal x1315=(cj14*sj15*sj16);
if( IKabs(((((-1.0)*x1312*x1313))+((sj12*x1305))+(((-1.0)*cj12*r21*x1315))+((sj12*x1309))+((cj12*x1314))+((cj12*x1308))+((x1306*x1307))+(((-1.0)*x1310*x1311)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj12*x1314))+(((-1.0)*x1309*x1310))+((x1306*x1312))+(((-1.0)*x1305*x1310))+(((-1.0)*sj12*x1311))+(((-1.0)*x1313*x1315))+((r21*sj12*x1307))+((sj12*x1308)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1312*x1313))+((sj12*x1305))+(((-1.0)*cj12*r21*x1315))+((sj12*x1309))+((cj12*x1314))+((cj12*x1308))+((x1306*x1307))+(((-1.0)*x1310*x1311))))+IKsqr((((sj12*x1314))+(((-1.0)*x1309*x1310))+((x1306*x1312))+(((-1.0)*x1305*x1310))+(((-1.0)*sj12*x1311))+(((-1.0)*x1313*x1315))+((r21*sj12*x1307))+((sj12*x1308))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*x1312*x1313))+((sj12*x1305))+(((-1.0)*cj12*r21*x1315))+((sj12*x1309))+((cj12*x1314))+((cj12*x1308))+((x1306*x1307))+(((-1.0)*x1310*x1311))), (((sj12*x1314))+(((-1.0)*x1309*x1310))+((x1306*x1312))+(((-1.0)*x1305*x1310))+(((-1.0)*sj12*x1311))+(((-1.0)*x1313*x1315))+((r21*sj12*x1307))+((sj12*x1308))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x1316=IKcos(j13);
IkReal x1317=(cj12*x1316);
IkReal x1318=(cj15*cj16);
IkReal x1319=IKsin(j13);
IkReal x1320=(sj12*x1319);
IkReal x1321=((1.0)*x1320);
IkReal x1322=((1.0)*cj15*sj16);
IkReal x1323=(cj12*x1319);
IkReal x1324=(cj11*x1323);
IkReal x1325=(sj12*x1316);
IkReal x1326=(cj11*x1325);
IkReal x1327=(sj11*x1323);
IkReal x1328=(sj11*x1325);
IkReal x1329=(cj16*sj14);
IkReal x1330=(sj14*sj16);
IkReal x1331=((1.0)*cj14*cj15);
IkReal x1332=(cj14*cj16*sj15);
IkReal x1333=((1.0)*cj14*sj15*sj16);
IkReal x1334=((0.09)*cj16);
IkReal x1335=((0.09)*sj16);
IkReal x1336=(cj11*x1317);
IkReal x1337=(sj11*x1317);
IkReal x1338=((0.25)*sj12);
IkReal x1339=((0.03)*sj12*x1319);
evalcond[0]=(((r22*sj15))+(((-1.0)*r21*x1322))+(((-1.0)*x1321))+((r20*x1318))+x1317);
evalcond[1]=(x1326+x1324+((r00*x1318))+((r02*sj15))+(((-1.0)*r01*x1322)));
evalcond[2]=(x1328+x1327+((r12*sj15))+(((-1.0)*r11*x1322))+((r10*x1318)));
evalcond[3]=((((-1.0)*r22*x1331))+(((-1.0)*x1325))+((r20*x1332))+((r20*x1330))+(((-1.0)*r21*x1333))+(((-1.0)*x1323))+((r21*x1329)));
evalcond[4]=((((-0.235)*x1317))+(((-1.0)*(1.0)*pz))+(((0.235)*x1320))+((r20*x1334))+(((0.03)*x1325))+(((-1.0)*(0.25)*cj12))+(((-1.0)*r21*x1335))+(((0.03)*x1323)));
evalcond[5]=(((r00*x1332))+(((-1.0)*r02*x1331))+((r01*x1329))+x1336+(((-1.0)*cj11*x1321))+((r00*x1330))+(((-1.0)*r01*x1333)));
evalcond[6]=((((-1.0)*r11*x1333))+((r10*x1330))+(((-1.0)*r12*x1331))+x1337+((r10*x1332))+(((-1.0)*sj11*x1321))+((r11*x1329)));
evalcond[7]=((((-1.0)*(1.0)*px))+(((-1.0)*(0.095)*sj11))+(((-0.03)*x1336))+((cj11*x1339))+(((-1.0)*r01*x1335))+(((-1.0)*cj11*x1338))+((r00*x1334))+(((-0.235)*x1324))+(((-0.235)*x1326)));
evalcond[8]=((((-0.03)*x1337))+(((-1.0)*(1.0)*py))+((sj11*x1339))+(((-0.235)*x1328))+(((-1.0)*r11*x1335))+((r10*x1334))+(((0.095)*cj11))+(((-0.235)*x1327))+(((-1.0)*sj11*x1338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "73b00fade606224fff41ab84a072b721"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
