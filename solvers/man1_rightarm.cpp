/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-05-22 07:14:02.384568
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53;
x0=IKcos(j[1]);
x1=IKsin(j[1]);
x2=IKsin(j[3]);
x3=IKcos(j[3]);
x4=IKsin(j[2]);
x5=IKsin(j[4]);
x6=IKcos(j[2]);
x7=IKcos(j[4]);
x8=IKsin(j[6]);
x9=IKcos(j[6]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=IKcos(j[0]);
x13=IKsin(j[0]);
x14=((1.0)*x2);
x15=((0.2617)*x13);
x16=((1.0)*x4);
x17=((1.0)*x13);
x18=((1.0)*x3);
x19=((1.0)*x7);
x20=((1.0)*x5);
x21=((0.2617)*x12);
x22=((1.0)*x10);
x23=(x0*x3);
x24=(x0*x2);
x25=(x1*x4);
x26=(x0*x13);
x27=(x0*x6);
x28=(x1*x3);
x29=(x12*x6);
x30=(x0*x12);
x31=(x1*x14);
x32=(x1*x13*x16);
x33=(x14*x26);
x34=((((-1.0)*x13*x16))+((x1*x29)));
x35=(((x12*x25))+((x13*x6)));
x36=((((-1.0)*x32))+x29);
x37=(((x1*x18))+((x0*x14*x4)));
x38=((((-1.0)*x17*x6))+(((-1.0)*x1*x12*x16)));
x39=((((-1.0)*x12*x16))+(((-1.0)*x1*x17*x6)));
x40=(x3*x36);
x41=(x39*x5);
x42=(x11*x37);
x43=(((x27*x7))+((x5*(((((-1.0)*x31))+((x23*x4)))))));
x44=(((x27*x5))+((x7*(((((-1.0)*x16*x23))+x31)))));
x45=((((-1.0)*x18*x36))+x33);
x46=(((x17*x23))+((x14*(((((-1.0)*x32))+(((1.0)*x29)))))));
x47=(x10*x44);
x48=((((-1.0)*x18*x30))+(((-1.0)*x14*x38)));
x49=(x11*x46);
x50=(x11*x48);
x51=(((x5*((((x3*x35))+((x12*x24))))))+((x34*x7)));
x52=(((x7*(((((-1.0)*x18*x35))+(((-1.0)*x14*x30))))))+((x34*x5)));
x53=(x10*x52);
eerot[0]=(((x8*((x47+x42))))+((x43*x9)));
eerot[1]=(((x9*(((((-1.0)*x42))+(((-1.0)*x22*x44))))))+((x43*x8)));
eerot[2]=(((x11*x44))+(((-1.0)*x10*x37)));
eetrans[0]=((-0.1744)+(((0.2617)*x24*x4))+(((0.3102)*x1))+(((0.2617)*x28)));
eerot[3]=(((x51*x9))+((x8*((x50+x53)))));
eerot[4]=(((x9*(((((-1.0)*x50))+(((-1.0)*x53))))))+((x51*x8)));
eerot[5]=(((x11*x52))+((x10*((((x2*x38))+((x12*x23)))))));
eetrans[1]=((((-1.0)*x21*x23))+((x2*((((x21*x25))+((x15*x6))))))+(((-0.3102)*x30)));
eerot[6]=((((-1.0)*x9*(((((1.0)*x39*x7))+(((1.0)*x5*(((((-1.0)*x13*x24))+x40))))))))+((x8*(((((-1.0)*x49))+(((-1.0)*x22*((x41+((x45*x7)))))))))));
eerot[7]=(((x9*((x49+((x10*((x41+((x7*(((((-1.0)*x40))+x33))))))))))))+(((-1.0)*x8*((((x19*x39))+((x20*(((((-1.0)*x33))+x40)))))))));
eerot[8]=(((x10*x46))+((x11*(((((-1.0)*x20*x39))+(((-1.0)*x19*x45)))))));
eetrans[2]=((((-1.0)*x15*x23))+((x2*(((((-1.0)*x21*x6))+((x15*x25))))))+(((-0.3102)*x26)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j35,cj35,sj35,htj35,j35mul,j36,cj36,sj36,htj36,j36mul,j38,cj38,sj38,htj38,j38mul,j39,cj39,sj39,htj39,j39mul,j40,cj40,sj40,htj40,j40mul,j41,cj41,sj41,htj41,j41mul,j37,cj37,sj37,htj37,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij35[2], _nj35,_ij36[2], _nj36,_ij38[2], _nj38,_ij39[2], _nj39,_ij40[2], _nj40,_ij41[2], _nj41,_ij37[2], _nj37;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j35=numeric_limits<IkReal>::quiet_NaN(); _ij35[0] = -1; _ij35[1] = -1; _nj35 = -1; j36=numeric_limits<IkReal>::quiet_NaN(); _ij36[0] = -1; _ij36[1] = -1; _nj36 = -1; j38=numeric_limits<IkReal>::quiet_NaN(); _ij38[0] = -1; _ij38[1] = -1; _nj38 = -1; j39=numeric_limits<IkReal>::quiet_NaN(); _ij39[0] = -1; _ij39[1] = -1; _nj39 = -1; j40=numeric_limits<IkReal>::quiet_NaN(); _ij40[0] = -1; _ij40[1] = -1; _nj40 = -1; j41=numeric_limits<IkReal>::quiet_NaN(); _ij41[0] = -1; _ij41[1] = -1; _nj41 = -1;  _ij37[0] = -1; _ij37[1] = -1; _nj37 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j37=pfree[0]; cj37=cos(pfree[0]); sj37=sin(pfree[0]), htj37=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r20);
new_r01=r21;
new_r02=r22;
new_px=((-1.0)*pz);
new_r10=r10;
new_r11=((-1.0)*r11);
new_r12=((-1.0)*r12);
new_py=py;
new_r20=r00;
new_r21=((-1.0)*r01);
new_r22=((-1.0)*r02);
new_pz=((0.1744)+px);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x54=((1.0)*px);
IkReal x55=((1.0)*pz);
IkReal x56=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x56))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x55)));
rxp0_2=((((-1.0)*r10*x54))+((py*r00)));
rxp1_0=((((-1.0)*r21*x56))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x55)));
rxp1_2=((((-1.0)*r11*x54))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x56)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x55)));
rxp2_2=((((-1.0)*r12*x54))+((py*r02)));
{
IkReal j38array[2], cj38array[2], sj38array[2];
bool j38valid[2]={false};
_nj38 = 2;
cj38array[0]=((-1.01448798425806)+(((6.1592025754336)*pp)));
if( cj38array[0] >= -1-IKFAST_SINCOS_THRESH && cj38array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j38valid[0] = j38valid[1] = true;
    j38array[0] = IKacos(cj38array[0]);
    sj38array[0] = IKsin(j38array[0]);
    cj38array[1] = cj38array[0];
    j38array[1] = -j38array[0];
    sj38array[1] = -sj38array[0];
}
else if( isnan(cj38array[0]) )
{
    // probably any value will work
    j38valid[0] = true;
    cj38array[0] = 1; sj38array[0] = 0; j38array[0] = 0;
}
for(int ij38 = 0; ij38 < 2; ++ij38)
{
if( !j38valid[ij38] )
{
    continue;
}
_ij38[0] = ij38; _ij38[1] = -1;
for(int iij38 = ij38+1; iij38 < 2; ++iij38)
{
if( j38valid[iij38] && IKabs(cj38array[ij38]-cj38array[iij38]) < IKFAST_SOLUTION_THRESH && IKabs(sj38array[ij38]-sj38array[iij38]) < IKFAST_SOLUTION_THRESH )
{
    j38valid[iij38]=false; _ij38[1] = iij38; break; 
}
}
j38 = j38array[ij38]; cj38 = cj38array[ij38]; sj38 = sj38array[ij38];

{
IkReal j35eval[2];
j35eval[0]=((px*px)+(py*py));
j35eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j35eval[0]) < 0.0000010000000000  || IKabs(j35eval[1]) < 0.0000010000000000  )
{
{
IkReal j36eval[2];
j36eval[0]=((IKabs((sj37*sj38)))+(((3.82116927779901)*(IKabs(((0.3102)+(((0.2617)*cj38))))))));
j36eval[1]=((1.40499940937601)+(cj38*cj38)+(((sj37*sj37)*(sj38*sj38)))+(((2.3706534199465)*cj38)));
if( IKabs(j36eval[0]) < 0.0000010000000000  || IKabs(j36eval[1]) < 0.0000010000000000  )
{
{
IkReal j35eval[2];
IkReal x57=px*px;
IkReal x58=py*py;
IkReal x59=cj37*cj37;
IkReal x60=px*px*px*px;
IkReal x61=sj37*sj37;
IkReal x62=sj37*sj37*sj37*sj37;
IkReal x63=cj37*cj37*cj37*cj37;
IkReal x64=(px*py);
IkReal x65=(x57*x58);
IkReal x66=((2.0)*x59*x61);
j35eval[0]=(((x60*x66))+((x60*x62))+((x60*x63))+((x62*x65))+((x63*x65))+((x65*x66)));
j35eval[1]=((IKabs((((x59*x64))+((x61*x64)))))+(IKabs((((x57*x59))+((x57*x61))))));
if( IKabs(j35eval[0]) < 0.0000010000000000  || IKabs(j35eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j35, j36]

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
IkReal x67=px*px;
IkReal x68=sj37*sj37;
IkReal x69=cj37*cj37;
IkReal x70=(px*py);
IkReal x71=(((x67*x68))+((x67*x69)));
IkReal x72=(((x69*x70))+((x68*x70)));
CheckValue<IkReal> x75 = IKatan2WithCheck(IkReal(x71),x72,IKFAST_ATAN2_MAGTHRESH);
if(!x75.valid){
continue;
}
IkReal x73=((1.0)*(x75.value));
if((((x71*x71)+(x72*x72))) < -0.00001)
continue;
CheckValue<IkReal> x76=IKPowWithIntegerCheck(IKabs(IKsqrt(((x71*x71)+(x72*x72)))),-1);
if(!x76.valid){
continue;
}
if( (((0.2617)*cj37*px*sj38*(x76.value))) < -1-IKFAST_SINCOS_THRESH || (((0.2617)*cj37*px*sj38*(x76.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x74=IKasin(((0.2617)*cj37*px*sj38*(x76.value)));
j35array[0]=((((-1.0)*x73))+x74);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x73))+(((-1.0)*x74)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[2];
IkReal x77=IKsin(j35);
IkReal x78=py*py;
IkReal x79=IKcos(j35);
IkReal x80=cj37*cj37;
IkReal x81=sj37*sj37;
IkReal x82=(px*py);
IkReal x83=((1.0)*x80);
IkReal x84=((1.0)*x81);
IkReal x85=((0.2617)*cj37*sj38);
evalcond[0]=(((py*x77))+((px*x79))+(((-1.0)*x85)));
evalcond[1]=(((x79*(((((-1.0)*x82*x83))+(((-1.0)*x82*x84))))))+((py*x85))+((x77*(((((-1.0)*x78*x84))+(((-1.0)*x78*x83)))))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j36eval[3];
IkReal x86=(sj37*sj38);
IkReal x87=(px*sj35);
IkReal x88=((10000.0)*pz);
IkReal x89=(cj35*py);
IkReal x90=((2617.0)*cj38);
j36eval[0]=((((-1.0)*pz*x86))+(((-1.18532670997325)*x89))+(((-1.0)*cj38*x89))+((cj38*x87))+(((1.18532670997325)*x87)));
j36eval[1]=IKsign((((x87*x90))+(((3102.0)*x87))+(((-3102.0)*x89))+(((-2617.0)*pz*x86))+(((-1.0)*x89*x90))));
j36eval[2]=((IKabs(((962.2404)+(((684.8689)*(cj38*cj38)))+(((1623.5868)*cj38))+(((-1.0)*pz*x88)))))+(IKabs(((((-684.8689)*cj38*x86))+(((-811.7934)*x86))+(((-1.0)*x88*x89))+((x87*x88))))));
if( IKabs(j36eval[0]) < 0.0000010000000000  || IKabs(j36eval[1]) < 0.0000010000000000  || IKabs(j36eval[2]) < 0.0000010000000000  )
{
{
IkReal j36eval[3];
IkReal x91=(px*sj35);
IkReal x92=((6542500.0)*pp);
IkReal x93=(sj37*sj38);
IkReal x94=(cj35*py);
IkReal x95=((15510000.0)*pz);
IkReal x96=((4058967.0)*cj38);
j36eval[0]=((((1.18532670997325)*x91))+(((-1.0)*pz*x93))+(((-1.18532670997325)*x94))+(((-1.0)*cj38*x94))+((cj38*x91)));
j36eval[1]=((IKabs(((((-1.0)*x94*x95))+(((-181470.303875)*x93))+(((-1.0)*x92*x93))+((x91*x95)))))+(IKabs(((215101.59825)+(((-1.0)*pz*x95))+(((181470.303875)*cj38))+((cj38*x92))+(((7755000.0)*pp))))));
j36eval[2]=IKsign(((((-1.0)*x94*x96))+(((-4811202.0)*x94))+(((-4058967.0)*pz*x93))+(((4811202.0)*x91))+((x91*x96))));
if( IKabs(j36eval[0]) < 0.0000010000000000  || IKabs(j36eval[1]) < 0.0000010000000000  || IKabs(j36eval[2]) < 0.0000010000000000  )
{
{
IkReal j36eval[3];
IkReal x97=cj37*cj37;
IkReal x98=cj38*cj38;
IkReal x99=(px*sj35);
IkReal x100=((26170000.0)*cj38);
IkReal x101=(cj35*py);
IkReal x102=((26170000.0)*sj37*sj38);
IkReal x103=(x97*x98);
j36eval[0]=((-2.40499940937601)+x97+(((-1.0)*x103))+(((-2.3706534199465)*cj38)));
j36eval[1]=IKsign(((-16471093.0)+(((6848689.0)*x97))+(((-6848689.0)*x103))+(((-16235868.0)*cj38))));
j36eval[2]=((IKabs(((((-1.0)*pz*x100))+(((-1.0)*x101*x102))+((x102*x99))+(((-31020000.0)*pz)))))+(IKabs(((((-1.0)*pz*x102))+(((31020000.0)*x101))+(((-1.0)*x100*x99))+(((-31020000.0)*x99))+((x100*x101))))));
if( IKabs(j36eval[0]) < 0.0000010000000000  || IKabs(j36eval[1]) < 0.0000010000000000  || IKabs(j36eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j36]

} else
{
{
IkReal j36array[1], cj36array[1], sj36array[1];
bool j36valid[1]={false};
_nj36 = 1;
IkReal x104=cj37*cj37;
IkReal x105=(cj35*py);
IkReal x106=(px*sj35);
IkReal x107=((26170000.0)*cj38);
IkReal x108=((6848689.0)*x104);
IkReal x109=((26170000.0)*sj37*sj38);
CheckValue<IkReal> x110 = IKatan2WithCheck(IkReal(((((-1.0)*pz*x107))+((x106*x109))+(((-31020000.0)*pz))+(((-1.0)*x105*x109)))),((((-1.0)*pz*x109))+(((31020000.0)*x105))+(((-1.0)*x106*x107))+((x105*x107))+(((-31020000.0)*x106))),IKFAST_ATAN2_MAGTHRESH);
if(!x110.valid){
continue;
}
CheckValue<IkReal> x111=IKPowWithIntegerCheck(IKsign(((-16471093.0)+(((-1.0)*x108*(cj38*cj38)))+x108+(((-16235868.0)*cj38)))),-1);
if(!x111.valid){
continue;
}
j36array[0]=((-1.5707963267949)+(x110.value)+(((1.5707963267949)*(x111.value))));
sj36array[0]=IKsin(j36array[0]);
cj36array[0]=IKcos(j36array[0]);
if( j36array[0] > IKPI )
{
    j36array[0]-=IK2PI;
}
else if( j36array[0] < -IKPI )
{    j36array[0]+=IK2PI;
}
j36valid[0] = true;
for(int ij36 = 0; ij36 < 1; ++ij36)
{
if( !j36valid[ij36] )
{
    continue;
}
_ij36[0] = ij36; _ij36[1] = -1;
for(int iij36 = ij36+1; iij36 < 1; ++iij36)
{
if( j36valid[iij36] && IKabs(cj36array[ij36]-cj36array[iij36]) < IKFAST_SOLUTION_THRESH && IKabs(sj36array[ij36]-sj36array[iij36]) < IKFAST_SOLUTION_THRESH )
{
    j36valid[iij36]=false; _ij36[1] = iij36; break; 
}
}
j36 = j36array[ij36]; cj36 = cj36array[ij36]; sj36 = sj36array[ij36];
{
IkReal evalcond[6];
IkReal x112=IKsin(j36);
IkReal x113=IKcos(j36);
IkReal x114=((0.2617)*sj38);
IkReal x115=((0.2617)*cj38);
IkReal x116=((1.0)*pz);
IkReal x117=(py*sj35);
IkReal x118=((1.0)*cj37);
IkReal x119=(px*sj35);
IkReal x120=(cj35*py);
IkReal x121=(cj35*px);
IkReal x122=(sj37*x113);
IkReal x123=(pz*x112);
IkReal x124=((0.6204)*x113);
IkReal x125=(sj37*x112);
evalcond[0]=(((x112*x115))+((x114*x122))+(((-1.0)*x116))+(((0.3102)*x112)));
evalcond[1]=((-0.3102)+((x113*x119))+(((-1.0)*x115))+x123+(((-1.0)*x113*x120)));
evalcond[2]=((-0.02773715)+(((-1.0)*x120*x124))+(((-1.0)*pp))+(((0.6204)*x123))+((x119*x124)));
evalcond[3]=((((-1.0)*x113*x115))+((x114*x125))+(((-0.3102)*x113))+x119+(((-1.0)*x120)));
evalcond[4]=(((sj37*x117))+(((-1.0)*x112*x118*x120))+((sj37*x121))+(((-1.0)*cj37*x113*x116))+((cj37*x112*x119)));
evalcond[5]=((((-1.0)*x118*x121))+(((-1.0)*x117*x118))+(((-1.0)*x116*x122))+x114+(((-1.0)*x120*x125))+((x119*x125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j36array[1], cj36array[1], sj36array[1];
bool j36valid[1]={false};
_nj36 = 1;
IkReal x564=(cj35*py);
IkReal x565=((4058967.0)*cj38);
IkReal x566=((6542500.0)*pp);
IkReal x567=(px*sj35);
IkReal x568=((15510000.0)*pz);
IkReal x569=(sj37*sj38);
CheckValue<IkReal> x570=IKPowWithIntegerCheck(IKsign(((((4811202.0)*x567))+(((-1.0)*x564*x565))+((x565*x567))+(((-4058967.0)*pz*x569))+(((-4811202.0)*x564)))),-1);
if(!x570.valid){
continue;
}
CheckValue<IkReal> x571 = IKatan2WithCheck(IkReal(((((-1.0)*x564*x568))+(((-181470.303875)*x569))+(((-1.0)*x566*x569))+((x567*x568)))),((215101.59825)+(((181470.303875)*cj38))+(((-1.0)*pz*x568))+((cj38*x566))+(((7755000.0)*pp))),IKFAST_ATAN2_MAGTHRESH);
if(!x571.valid){
continue;
}
j36array[0]=((-1.5707963267949)+(((1.5707963267949)*(x570.value)))+(x571.value));
sj36array[0]=IKsin(j36array[0]);
cj36array[0]=IKcos(j36array[0]);
if( j36array[0] > IKPI )
{
    j36array[0]-=IK2PI;
}
else if( j36array[0] < -IKPI )
{    j36array[0]+=IK2PI;
}
j36valid[0] = true;
for(int ij36 = 0; ij36 < 1; ++ij36)
{
if( !j36valid[ij36] )
{
    continue;
}
_ij36[0] = ij36; _ij36[1] = -1;
for(int iij36 = ij36+1; iij36 < 1; ++iij36)
{
if( j36valid[iij36] && IKabs(cj36array[ij36]-cj36array[iij36]) < IKFAST_SOLUTION_THRESH && IKabs(sj36array[ij36]-sj36array[iij36]) < IKFAST_SOLUTION_THRESH )
{
    j36valid[iij36]=false; _ij36[1] = iij36; break; 
}
}
j36 = j36array[ij36]; cj36 = cj36array[ij36]; sj36 = sj36array[ij36];
{
IkReal evalcond[6];
IkReal x572=IKsin(j36);
IkReal x573=IKcos(j36);
IkReal x574=((0.2617)*sj38);
IkReal x575=((0.2617)*cj38);
IkReal x576=((1.0)*pz);
IkReal x577=(py*sj35);
IkReal x578=((1.0)*cj37);
IkReal x579=(px*sj35);
IkReal x580=(cj35*py);
IkReal x581=(cj35*px);
IkReal x582=(sj37*x573);
IkReal x583=(pz*x572);
IkReal x584=((0.6204)*x573);
IkReal x585=(sj37*x572);
evalcond[0]=((((0.3102)*x572))+((x574*x582))+(((-1.0)*x576))+((x572*x575)));
evalcond[1]=((-0.3102)+((x573*x579))+(((-1.0)*x575))+x583+(((-1.0)*x573*x580)));
evalcond[2]=((-0.02773715)+(((-1.0)*x580*x584))+((x579*x584))+(((-1.0)*pp))+(((0.6204)*x583)));
evalcond[3]=((((-1.0)*x580))+(((-1.0)*x573*x575))+((x574*x585))+x579+(((-0.3102)*x573)));
evalcond[4]=(((cj37*x572*x579))+((sj37*x577))+(((-1.0)*cj37*x573*x576))+((sj37*x581))+(((-1.0)*x572*x578*x580)));
evalcond[5]=(((x579*x585))+(((-1.0)*x580*x585))+(((-1.0)*x578*x581))+(((-1.0)*x577*x578))+x574+(((-1.0)*x576*x582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j36array[1], cj36array[1], sj36array[1];
bool j36valid[1]={false};
_nj36 = 1;
IkReal x586=(sj37*sj38);
IkReal x587=(cj35*py);
IkReal x588=((10000.0)*pz);
IkReal x589=(px*sj35);
IkReal x590=((2617.0)*cj38);
CheckValue<IkReal> x591=IKPowWithIntegerCheck(IKsign(((((3102.0)*x589))+(((-1.0)*x587*x590))+(((-2617.0)*pz*x586))+(((-3102.0)*x587))+((x589*x590)))),-1);
if(!x591.valid){
continue;
}
CheckValue<IkReal> x592 = IKatan2WithCheck(IkReal(((((-811.7934)*x586))+((x588*x589))+(((-1.0)*x587*x588))+(((-684.8689)*cj38*x586)))),((962.2404)+(((-1.0)*pz*x588))+(((684.8689)*(cj38*cj38)))+(((1623.5868)*cj38))),IKFAST_ATAN2_MAGTHRESH);
if(!x592.valid){
continue;
}
j36array[0]=((-1.5707963267949)+(((1.5707963267949)*(x591.value)))+(x592.value));
sj36array[0]=IKsin(j36array[0]);
cj36array[0]=IKcos(j36array[0]);
if( j36array[0] > IKPI )
{
    j36array[0]-=IK2PI;
}
else if( j36array[0] < -IKPI )
{    j36array[0]+=IK2PI;
}
j36valid[0] = true;
for(int ij36 = 0; ij36 < 1; ++ij36)
{
if( !j36valid[ij36] )
{
    continue;
}
_ij36[0] = ij36; _ij36[1] = -1;
for(int iij36 = ij36+1; iij36 < 1; ++iij36)
{
if( j36valid[iij36] && IKabs(cj36array[ij36]-cj36array[iij36]) < IKFAST_SOLUTION_THRESH && IKabs(sj36array[ij36]-sj36array[iij36]) < IKFAST_SOLUTION_THRESH )
{
    j36valid[iij36]=false; _ij36[1] = iij36; break; 
}
}
j36 = j36array[ij36]; cj36 = cj36array[ij36]; sj36 = sj36array[ij36];
{
IkReal evalcond[6];
IkReal x593=IKsin(j36);
IkReal x594=IKcos(j36);
IkReal x595=((0.2617)*sj38);
IkReal x596=((0.2617)*cj38);
IkReal x597=((1.0)*pz);
IkReal x598=(py*sj35);
IkReal x599=((1.0)*cj37);
IkReal x600=(px*sj35);
IkReal x601=(cj35*py);
IkReal x602=(cj35*px);
IkReal x603=(sj37*x594);
IkReal x604=(pz*x593);
IkReal x605=((0.6204)*x594);
IkReal x606=(sj37*x593);
evalcond[0]=(((x595*x603))+(((-1.0)*x597))+((x593*x596))+(((0.3102)*x593)));
evalcond[1]=((-0.3102)+((x594*x600))+(((-1.0)*x594*x601))+(((-1.0)*x596))+x604);
evalcond[2]=((-0.02773715)+(((0.6204)*x604))+((x600*x605))+(((-1.0)*pp))+(((-1.0)*x601*x605)));
evalcond[3]=(((x595*x606))+(((-1.0)*x601))+(((-1.0)*x594*x596))+x600+(((-0.3102)*x594)));
evalcond[4]=((((-1.0)*cj37*x594*x597))+((sj37*x598))+(((-1.0)*x593*x599*x601))+((cj37*x593*x600))+((sj37*x602)));
evalcond[5]=((((-1.0)*x598*x599))+(((-1.0)*x601*x606))+(((-1.0)*x597*x603))+((x600*x606))+(((-1.0)*x599*x602))+x595);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j36array[2], cj36array[2], sj36array[2];
bool j36valid[2]={false};
_nj36 = 2;
IkReal x607=((0.3102)+(((0.2617)*cj38)));
CheckValue<IkReal> x610 = IKatan2WithCheck(IkReal(((0.2617)*sj37*sj38)),x607,IKFAST_ATAN2_MAGTHRESH);
if(!x610.valid){
continue;
}
IkReal x608=((1.0)*(x610.value));
if((((x607*x607)+(((0.06848689)*(sj37*sj37)*(sj38*sj38))))) < -0.00001)
continue;
CheckValue<IkReal> x611=IKPowWithIntegerCheck(IKabs(IKsqrt(((x607*x607)+(((0.06848689)*(sj37*sj37)*(sj38*sj38)))))),-1);
if(!x611.valid){
continue;
}
if( ((pz*(x611.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x611.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x609=IKasin((pz*(x611.value)));
j36array[0]=(x609+(((-1.0)*x608)));
sj36array[0]=IKsin(j36array[0]);
cj36array[0]=IKcos(j36array[0]);
j36array[1]=((3.14159265358979)+(((-1.0)*x609))+(((-1.0)*x608)));
sj36array[1]=IKsin(j36array[1]);
cj36array[1]=IKcos(j36array[1]);
if( j36array[0] > IKPI )
{
    j36array[0]-=IK2PI;
}
else if( j36array[0] < -IKPI )
{    j36array[0]+=IK2PI;
}
j36valid[0] = true;
if( j36array[1] > IKPI )
{
    j36array[1]-=IK2PI;
}
else if( j36array[1] < -IKPI )
{    j36array[1]+=IK2PI;
}
j36valid[1] = true;
for(int ij36 = 0; ij36 < 2; ++ij36)
{
if( !j36valid[ij36] )
{
    continue;
}
_ij36[0] = ij36; _ij36[1] = -1;
for(int iij36 = ij36+1; iij36 < 2; ++iij36)
{
if( j36valid[iij36] && IKabs(cj36array[ij36]-cj36array[iij36]) < IKFAST_SOLUTION_THRESH && IKabs(sj36array[ij36]-sj36array[iij36]) < IKFAST_SOLUTION_THRESH )
{
    j36valid[iij36]=false; _ij36[1] = iij36; break; 
}
}
j36 = j36array[ij36]; cj36 = cj36array[ij36]; sj36 = sj36array[ij36];

{
IkReal j35eval[3];
IkReal x612=pz*pz;
IkReal x613=((2617.0)*py);
IkReal x614=((10000.0)*cj36);
IkReal x615=((2617.0)*px);
IkReal x616=(cj36*cj37*sj38);
IkReal x617=((10000.0)*pz*sj36);
j35eval[0]=(((cj36*pp))+(((-1.0)*cj36*x612)));
j35eval[1]=((IKabs((((py*x617))+(((-3102.0)*py))+((x615*x616))+(((-1.0)*cj38*x613)))))+(IKabs((((cj38*x615))+(((3102.0)*px))+((x613*x616))+(((-1.0)*px*x617))))));
j35eval[2]=IKsign(((((-1.0)*x612*x614))+((pp*x614))));
if( IKabs(j35eval[0]) < 0.0000010000000000  || IKabs(j35eval[1]) < 0.0000010000000000  || IKabs(j35eval[2]) < 0.0000010000000000  )
{
{
IkReal j35eval[3];
IkReal x618=pz*pz;
IkReal x619=((25000000.0)*pp);
IkReal x620=(cj36*pp);
IkReal x621=((15510000.0)*pz*sj36);
IkReal x622=(cj36*x618);
IkReal x623=((4058967.0)*cj36*cj37*sj38);
j35eval[0]=(x620+(((-1.0)*x622)));
j35eval[1]=IKsign(((((15510000.0)*x620))+(((-15510000.0)*x622))));
j35eval[2]=((IKabs((((py*x621))+(((-693428.75)*py))+(((-1.0)*py*x619))+((px*x623)))))+(IKabs((((py*x623))+((px*x619))+(((693428.75)*px))+(((-1.0)*px*x621))))));
if( IKabs(j35eval[0]) < 0.0000010000000000  || IKabs(j35eval[1]) < 0.0000010000000000  || IKabs(j35eval[2]) < 0.0000010000000000  )
{
{
IkReal j35eval[3];
IkReal x624=pz*pz;
IkReal x625=((3102.0)*cj36);
IkReal x626=(sj36*sj37);
IkReal x627=((2617.0)*py*sj38);
IkReal x628=((2617.0)*px*sj38);
IkReal x629=((2617.0)*cj36*cj38);
j35eval[0]=(pp+(((-1.0)*x624)));
j35eval[1]=((IKabs((((cj37*x628))+(((-1.0)*py*x625))+(((-1.0)*py*x629))+((x626*x627)))))+(IKabs(((((-1.0)*x626*x628))+((cj37*x627))+((px*x625))+((px*x629))))));
j35eval[2]=IKsign(((((10000.0)*pp))+(((-10000.0)*x624))));
if( IKabs(j35eval[0]) < 0.0000010000000000  || IKabs(j35eval[1]) < 0.0000010000000000  || IKabs(j35eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x630=((0.2617)*cj38);
IkReal x631=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j36)))), 6.28318530717959)));
evalcond[1]=((0.16471093)+(((0.16235868)*cj38))+(((-1.0)*x631)));
evalcond[2]=((0.3102)+(((-1.0)*pz))+x630);
evalcond[3]=((-0.3102)+(((-1.0)*x630))+pz);
evalcond[4]=((-0.02773715)+(((-1.0)*x631))+(((0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[3];
sj36=1.0;
cj36=0;
j36=1.5707963267949;
IkReal x632=pz*pz;
IkReal x633=(sj37*sj38);
IkReal x634=(cj37*sj38);
j35eval[0]=(pp+(((-1.0)*x632)));
j35eval[1]=IKsign(((((10000.0)*pp))+(((-10000.0)*x632))));
j35eval[2]=((IKabs((((py*x634))+(((-1.0)*px*x633)))))+(IKabs((((py*x633))+((px*x634))))));
if( IKabs(j35eval[0]) < 0.0000010000000000  || IKabs(j35eval[1]) < 0.0000010000000000  || IKabs(j35eval[2]) < 0.0000010000000000  )
{
{
IkReal j35eval[3];
sj36=1.0;
cj36=0;
j36=1.5707963267949;
IkReal x635=pz*pz;
IkReal x636=cj37*cj37;
IkReal x637=((10000.0)*cj37);
IkReal x638=((1.0)*cj37);
IkReal x639=(sj37*sj38);
IkReal x640=((1.0)*sj38*x636);
j35eval[0]=((((-1.0)*pp*x638))+((cj37*x635)));
j35eval[1]=IKsign(((((-1.0)*pp*x637))+((x635*x637))));
j35eval[2]=((IKabs(((((-1.0)*px*x640))+(((-1.0)*py*x638*x639)))))+(IKabs((((cj37*px*x639))+(((-1.0)*py*x640))))));
if( IKabs(j35eval[0]) < 0.0000010000000000  || IKabs(j35eval[1]) < 0.0000010000000000  || IKabs(j35eval[2]) < 0.0000010000000000  )
{
{
IkReal j35eval[3];
sj36=1.0;
cj36=0;
j36=1.5707963267949;
IkReal x641=cj37*cj37;
IkReal x642=pz*pz;
IkReal x643=((1.0)*sj37);
IkReal x644=(px*sj38);
IkReal x645=(py*sj38);
IkReal x646=(sj37*x642);
j35eval[0]=((((-1.0)*pp*x643))+x646);
j35eval[1]=((IKabs(((((-1.0)*x645))+((x641*x645))+(((-1.0)*cj37*x643*x644)))))+(IKabs(((((-1.0)*x641*x644))+x644+(((-1.0)*cj37*x643*x645))))));
j35eval[2]=IKsign(((((-10000.0)*pp*sj37))+(((10000.0)*x646))));
if( IKabs(j35eval[0]) < 0.0000010000000000  || IKabs(j35eval[1]) < 0.0000010000000000  || IKabs(j35eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x647=((0.2617)*cj38);
IkReal x648=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j37))), 6.28318530717959)));
evalcond[1]=((0.16471093)+(((0.16235868)*cj38))+(((-1.0)*x648)));
evalcond[2]=((0.3102)+(((-1.0)*pz))+x647);
evalcond[3]=((-0.3102)+(((-1.0)*x647))+pz);
evalcond[4]=((-0.02773715)+(((0.6204)*pz))+(((-1.0)*x648)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[4];
sj36=1.0;
cj36=0;
j36=1.5707963267949;
sj37=0;
cj37=1.0;
j37=0;
IkReal x649=pz*pz;
j35eval[0]=((((-1.0)*x649))+pp);
j35eval[1]=IKsign(((((-10000.0)*x649))+(((10000.0)*pp))));
j35eval[2]=6848689.0;
j35eval[3]=sj38;
if( IKabs(j35eval[0]) < 0.0000010000000000  || IKabs(j35eval[1]) < 0.0000010000000000  || IKabs(j35eval[2]) < 0.0000010000000000  || IKabs(j35eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x650=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j38))), 6.28318530717959)));
evalcond[1]=((0.32706961)+(((-1.0)*x650)));
evalcond[2]=((0.5719)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((0.6204)*pz))+(((-1.0)*x650)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[1];
sj36=1.0;
cj36=0;
j36=1.5707963267949;
sj37=0;
cj37=1.0;
j37=0;
sj38=0;
cj38=1.0;
j38=0;
j35eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j35eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
CheckValue<IkReal> x652 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x652.valid){
continue;
}
IkReal x651=x652.value;
j35array[0]=((-1.0)*x651);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x651)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[1];
evalcond[0]=(((px*(IKsin(j35))))+(((-1.0)*py*(IKcos(j35)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x653=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j38)))), 6.28318530717959)));
evalcond[1]=((0.00235225)+(((-1.0)*x653)));
evalcond[2]=((0.0485)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((0.6204)*pz))+(((-1.0)*x653)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[1];
sj36=1.0;
cj36=0;
j36=1.5707963267949;
sj37=0;
cj37=1.0;
j37=0;
sj38=0;
cj38=-1.0;
j38=3.14159265358979;
j35eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j35eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
CheckValue<IkReal> x655 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x655.valid){
continue;
}
IkReal x654=x655.value;
j35array[0]=((-1.0)*x654);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x654)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[1];
evalcond[0]=(((px*(IKsin(j35))))+(((-1.0)*py*(IKcos(j35)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j35]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j35array[1], cj35array[1], sj35array[1];
bool j35valid[1]={false};
_nj35 = 1;
IkReal x656=((2617.0)*sj38);
CheckValue<IkReal> x657 = IKatan2WithCheck(IkReal((py*x656)),(px*x656),IKFAST_ATAN2_MAGTHRESH);
if(!x657.valid){
continue;
}
CheckValue<IkReal> x658=IKPowWithIntegerCheck(IKsign(((((-10000.0)*(pz*pz)))+(((10000.0)*pp)))),-1);
if(!x658.valid){
continue;
}
j35array[0]=((-1.5707963267949)+(x657.value)+(((1.5707963267949)*(x658.value))));
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
for(int ij35 = 0; ij35 < 1; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 1; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[2];
IkReal x659=IKcos(j35);
IkReal x660=IKsin(j35);
evalcond[0]=((((-1.0)*py*x659))+((px*x660)));
evalcond[1]=((((-0.2617)*sj38))+((py*x660))+((px*x659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x661=((0.2617)*cj38);
IkReal x662=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j37)))), 6.28318530717959)));
evalcond[1]=((0.16471093)+(((0.16235868)*cj38))+(((-1.0)*x662)));
evalcond[2]=((0.3102)+(((-1.0)*pz))+x661);
evalcond[3]=((-0.3102)+(((-1.0)*x661))+pz);
evalcond[4]=((-0.02773715)+(((0.6204)*pz))+(((-1.0)*x662)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[4];
sj36=1.0;
cj36=0;
j36=1.5707963267949;
sj37=0;
cj37=-1.0;
j37=3.14159265358979;
IkReal x663=pz*pz;
j35eval[0]=((((-1.0)*pp))+x663);
j35eval[1]=6848689.0;
j35eval[2]=sj38;
j35eval[3]=IKsign(((((-10000.0)*pp))+(((10000.0)*x663))));
if( IKabs(j35eval[0]) < 0.0000010000000000  || IKabs(j35eval[1]) < 0.0000010000000000  || IKabs(j35eval[2]) < 0.0000010000000000  || IKabs(j35eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x664=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j38))), 6.28318530717959)));
evalcond[1]=((0.32706961)+(((-1.0)*x664)));
evalcond[2]=((0.5719)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((0.6204)*pz))+(((-1.0)*x664)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[1];
sj36=1.0;
cj36=0;
j36=1.5707963267949;
sj37=0;
cj37=-1.0;
j37=3.14159265358979;
sj38=0;
cj38=1.0;
j38=0;
j35eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j35eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
CheckValue<IkReal> x666 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x666.valid){
continue;
}
IkReal x665=x666.value;
j35array[0]=((-1.0)*x665);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x665)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[1];
evalcond[0]=(((px*(IKsin(j35))))+(((-1.0)*py*(IKcos(j35)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x667=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j38)))), 6.28318530717959)));
evalcond[1]=((0.00235225)+(((-1.0)*x667)));
evalcond[2]=((0.0485)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((0.6204)*pz))+(((-1.0)*x667)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[1];
sj36=1.0;
cj36=0;
j36=1.5707963267949;
sj37=0;
cj37=-1.0;
j37=3.14159265358979;
sj38=0;
cj38=-1.0;
j38=3.14159265358979;
j35eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j35eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
CheckValue<IkReal> x669 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x669.valid){
continue;
}
IkReal x668=x669.value;
j35array[0]=((-1.0)*x668);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x668)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[1];
evalcond[0]=(((px*(IKsin(j35))))+(((-1.0)*py*(IKcos(j35)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j35]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j35array[1], cj35array[1], sj35array[1];
bool j35valid[1]={false};
_nj35 = 1;
IkReal x670=((2617.0)*sj38);
CheckValue<IkReal> x671 = IKatan2WithCheck(IkReal((py*x670)),(px*x670),IKFAST_ATAN2_MAGTHRESH);
if(!x671.valid){
continue;
}
CheckValue<IkReal> x672=IKPowWithIntegerCheck(IKsign(((((10000.0)*(pz*pz)))+(((-10000.0)*pp)))),-1);
if(!x672.valid){
continue;
}
j35array[0]=((-1.5707963267949)+(x671.value)+(((1.5707963267949)*(x672.value))));
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
for(int ij35 = 0; ij35 < 1; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 1; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[2];
IkReal x673=IKcos(j35);
IkReal x674=IKsin(j35);
evalcond[0]=((((-1.0)*py*x673))+((px*x674)));
evalcond[1]=(((py*x674))+(((0.2617)*sj38))+((px*x673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x675=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j38))), 6.28318530717959)));
evalcond[1]=((0.32706961)+(((-1.0)*x675)));
evalcond[2]=((0.5719)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((0.6204)*pz))+(((-1.0)*x675)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[1];
sj36=1.0;
cj36=0;
j36=1.5707963267949;
sj38=0;
cj38=1.0;
j38=0;
j35eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j35eval[0]) < 0.0000010000000000  )
{
{
IkReal j35eval[1];
sj36=1.0;
cj36=0;
j36=1.5707963267949;
sj38=0;
cj38=1.0;
j38=0;
j35eval[0]=((IKabs((((px*sj37))+(((-1.0)*cj37*py)))))+(IKabs((((py*sj37))+((cj37*px))))));
if( IKabs(j35eval[0]) < 0.0000010000000000  )
{
{
IkReal j35eval[1];
sj36=1.0;
cj36=0;
j36=1.5707963267949;
sj38=0;
cj38=1.0;
j38=0;
IkReal x676=((1.0)*py);
j35eval[0]=((IKabs((((px*sj37))+(((-1.0)*cj37*x676)))))+(IKabs(((((-1.0)*cj37*px))+(((-1.0)*sj37*x676))))));
if( IKabs(j35eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j35]

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
IkReal x677=((1.0)*cj37);
CheckValue<IkReal> x679 = IKatan2WithCheck(IkReal(((((-1.0)*px*x677))+(((-1.0)*py*sj37)))),((((-1.0)*py*x677))+((px*sj37))),IKFAST_ATAN2_MAGTHRESH);
if(!x679.valid){
continue;
}
IkReal x678=x679.value;
j35array[0]=((-1.0)*x678);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x678)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[3];
IkReal x680=IKsin(j35);
IkReal x681=IKcos(j35);
IkReal x682=(py*x680);
IkReal x683=(px*x681);
IkReal x684=(px*x680);
IkReal x685=((1.0)*py*x681);
evalcond[0]=(x683+x682);
evalcond[1]=((((-1.0)*x685))+x684);
evalcond[2]=(((sj37*x682))+((sj37*x683))+((cj37*x684))+(((-1.0)*cj37*x685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
CheckValue<IkReal> x687 = IKatan2WithCheck(IkReal((((px*sj37))+(((-1.0)*cj37*py)))),(((py*sj37))+((cj37*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x687.valid){
continue;
}
IkReal x686=x687.value;
j35array[0]=((-1.0)*x686);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x686)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[3];
IkReal x688=IKsin(j35);
IkReal x689=IKcos(j35);
IkReal x690=((1.0)*cj37);
IkReal x691=(px*x689);
IkReal x692=(py*x688);
IkReal x693=(px*x688);
IkReal x694=((1.0)*py*x689);
evalcond[0]=(x691+x692);
evalcond[1]=(x693+(((-1.0)*x694)));
evalcond[2]=(((sj37*x693))+(((-1.0)*sj37*x694))+(((-1.0)*x690*x691))+(((-1.0)*x690*x692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
CheckValue<IkReal> x696 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x696.valid){
continue;
}
IkReal x695=x696.value;
j35array[0]=((-1.0)*x695);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x695)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[3];
IkReal x697=IKcos(j35);
IkReal x698=IKsin(j35);
IkReal x699=(py*sj37);
IkReal x700=(px*x698);
IkReal x701=((1.0)*x697);
IkReal x702=(py*x701);
evalcond[0]=((((-1.0)*x702))+x700);
evalcond[1]=(((cj37*x700))+((px*sj37*x697))+(((-1.0)*cj37*x702))+((x698*x699)));
evalcond[2]=((((-1.0)*cj37*px*x701))+((sj37*x700))+(((-1.0)*x699*x701))+(((-1.0)*cj37*py*x698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x703=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j38)))), 6.28318530717959)));
evalcond[1]=((0.00235225)+(((-1.0)*x703)));
evalcond[2]=((0.0485)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((0.6204)*pz))+(((-1.0)*x703)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[1];
sj36=1.0;
cj36=0;
j36=1.5707963267949;
sj38=0;
cj38=-1.0;
j38=3.14159265358979;
j35eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j35eval[0]) < 0.0000010000000000  )
{
{
IkReal j35eval[1];
sj36=1.0;
cj36=0;
j36=1.5707963267949;
sj38=0;
cj38=-1.0;
j38=3.14159265358979;
j35eval[0]=((IKabs((((px*sj37))+(((-1.0)*cj37*py)))))+(IKabs((((py*sj37))+((cj37*px))))));
if( IKabs(j35eval[0]) < 0.0000010000000000  )
{
{
IkReal j35eval[1];
sj36=1.0;
cj36=0;
j36=1.5707963267949;
sj38=0;
cj38=-1.0;
j38=3.14159265358979;
IkReal x704=((1.0)*py);
j35eval[0]=((IKabs(((((-1.0)*sj37*x704))+(((-1.0)*cj37*px)))))+(IKabs((((px*sj37))+(((-1.0)*cj37*x704))))));
if( IKabs(j35eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j35]

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
IkReal x705=((1.0)*cj37);
CheckValue<IkReal> x707 = IKatan2WithCheck(IkReal(((((-1.0)*px*x705))+(((-1.0)*py*sj37)))),((((-1.0)*py*x705))+((px*sj37))),IKFAST_ATAN2_MAGTHRESH);
if(!x707.valid){
continue;
}
IkReal x706=x707.value;
j35array[0]=((-1.0)*x706);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x706)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[3];
IkReal x708=IKsin(j35);
IkReal x709=IKcos(j35);
IkReal x710=(py*x708);
IkReal x711=(px*x709);
IkReal x712=(px*x708);
IkReal x713=((1.0)*py*x709);
evalcond[0]=(x711+x710);
evalcond[1]=((((-1.0)*x713))+x712);
evalcond[2]=(((sj37*x711))+((sj37*x710))+(((-1.0)*cj37*x713))+((cj37*x712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
CheckValue<IkReal> x715 = IKatan2WithCheck(IkReal((((px*sj37))+(((-1.0)*cj37*py)))),(((py*sj37))+((cj37*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x715.valid){
continue;
}
IkReal x714=x715.value;
j35array[0]=((-1.0)*x714);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x714)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[3];
IkReal x716=IKsin(j35);
IkReal x717=IKcos(j35);
IkReal x718=((1.0)*cj37);
IkReal x719=(px*x717);
IkReal x720=(py*x716);
IkReal x721=(px*x716);
IkReal x722=((1.0)*py*x717);
evalcond[0]=(x719+x720);
evalcond[1]=((((-1.0)*x722))+x721);
evalcond[2]=(((sj37*x721))+(((-1.0)*x718*x719))+(((-1.0)*sj37*x722))+(((-1.0)*x718*x720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
CheckValue<IkReal> x724 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x724.valid){
continue;
}
IkReal x723=x724.value;
j35array[0]=((-1.0)*x723);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x723)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[3];
IkReal x725=IKcos(j35);
IkReal x726=IKsin(j35);
IkReal x727=(py*sj37);
IkReal x728=(px*x726);
IkReal x729=((1.0)*x725);
IkReal x730=(py*x729);
evalcond[0]=((((-1.0)*x730))+x728);
evalcond[1]=(((px*sj37*x725))+(((-1.0)*cj37*x730))+((x726*x727))+((cj37*x728)));
evalcond[2]=((((-1.0)*x727*x729))+(((-1.0)*cj37*py*x726))+((sj37*x728))+(((-1.0)*cj37*px*x729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x731=((0.2617)*cj38);
IkReal x732=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j37)))), 6.28318530717959)));
evalcond[1]=((0.16471093)+(((0.16235868)*cj38))+(((-1.0)*x732)));
evalcond[2]=((0.3102)+(((-1.0)*pz))+x731);
evalcond[3]=((-0.3102)+(((-1.0)*x731))+pz);
evalcond[4]=((-0.02773715)+(((0.6204)*pz))+(((-1.0)*x732)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[4];
sj36=1.0;
cj36=0;
j36=1.5707963267949;
sj37=1.0;
cj37=0;
j37=1.5707963267949;
IkReal x733=pz*pz;
j35eval[0]=((((-1.0)*pp))+x733);
j35eval[1]=6848689.0;
j35eval[2]=sj38;
j35eval[3]=IKsign(((((-10000.0)*pp))+(((10000.0)*x733))));
if( IKabs(j35eval[0]) < 0.0000010000000000  || IKabs(j35eval[1]) < 0.0000010000000000  || IKabs(j35eval[2]) < 0.0000010000000000  || IKabs(j35eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x734=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j38))), 6.28318530717959)));
evalcond[1]=((0.32706961)+(((-1.0)*x734)));
evalcond[2]=((0.5719)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((0.6204)*pz))+(((-1.0)*x734)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[1];
sj36=1.0;
cj36=0;
j36=1.5707963267949;
sj37=1.0;
cj37=0;
j37=1.5707963267949;
sj38=0;
cj38=1.0;
j38=0;
j35eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j35eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
CheckValue<IkReal> x736 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x736.valid){
continue;
}
IkReal x735=x736.value;
j35array[0]=((-1.0)*x735);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x735)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[1];
evalcond[0]=(((px*(IKsin(j35))))+(((-1.0)*py*(IKcos(j35)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x737=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j38)))), 6.28318530717959)));
evalcond[1]=((0.00235225)+(((-1.0)*x737)));
evalcond[2]=((0.0485)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((0.6204)*pz))+(((-1.0)*x737)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[1];
sj36=1.0;
cj36=0;
j36=1.5707963267949;
sj37=1.0;
cj37=0;
j37=1.5707963267949;
sj38=0;
cj38=-1.0;
j38=3.14159265358979;
j35eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j35eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
CheckValue<IkReal> x739 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x739.valid){
continue;
}
IkReal x738=x739.value;
j35array[0]=((-1.0)*x738);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x738)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[1];
evalcond[0]=(((px*(IKsin(j35))))+(((-1.0)*py*(IKcos(j35)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j35]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j35array[1], cj35array[1], sj35array[1];
bool j35valid[1]={false};
_nj35 = 1;
CheckValue<IkReal> x740=IKPowWithIntegerCheck(IKsign(((((10000.0)*(pz*pz)))+(((-10000.0)*pp)))),-1);
if(!x740.valid){
continue;
}
CheckValue<IkReal> x741 = IKatan2WithCheck(IkReal(((2617.0)*px*sj38)),((-2617.0)*py*sj38),IKFAST_ATAN2_MAGTHRESH);
if(!x741.valid){
continue;
}
j35array[0]=((-1.5707963267949)+(((1.5707963267949)*(x740.value)))+(x741.value));
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
for(int ij35 = 0; ij35 < 1; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 1; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[2];
IkReal x742=IKsin(j35);
IkReal x743=IKcos(j35);
evalcond[0]=(((py*x742))+((px*x743)));
evalcond[1]=((((-1.0)*py*x743))+((px*x742))+(((0.2617)*sj38)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x744=((0.2617)*cj38);
IkReal x745=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j37)))), 6.28318530717959)));
evalcond[1]=((0.16471093)+(((0.16235868)*cj38))+(((-1.0)*x745)));
evalcond[2]=((0.3102)+(((-1.0)*pz))+x744);
evalcond[3]=((-0.3102)+pz+(((-1.0)*x744)));
evalcond[4]=((-0.02773715)+(((0.6204)*pz))+(((-1.0)*x745)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[4];
sj36=1.0;
cj36=0;
j36=1.5707963267949;
sj37=-1.0;
cj37=0;
j37=-1.5707963267949;
IkReal x746=pz*pz;
j35eval[0]=(pp+(((-1.0)*x746)));
j35eval[1]=IKsign(((((10000.0)*pp))+(((-10000.0)*x746))));
j35eval[2]=6848689.0;
j35eval[3]=sj38;
if( IKabs(j35eval[0]) < 0.0000010000000000  || IKabs(j35eval[1]) < 0.0000010000000000  || IKabs(j35eval[2]) < 0.0000010000000000  || IKabs(j35eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x747=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j38))), 6.28318530717959)));
evalcond[1]=((0.32706961)+(((-1.0)*x747)));
evalcond[2]=((0.5719)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((0.6204)*pz))+(((-1.0)*x747)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[1];
sj36=1.0;
cj36=0;
j36=1.5707963267949;
sj37=-1.0;
cj37=0;
j37=-1.5707963267949;
sj38=0;
cj38=1.0;
j38=0;
j35eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j35eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
CheckValue<IkReal> x749 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x749.valid){
continue;
}
IkReal x748=x749.value;
j35array[0]=((-1.0)*x748);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x748)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[1];
evalcond[0]=(((px*(IKsin(j35))))+(((-1.0)*py*(IKcos(j35)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x750=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j38)))), 6.28318530717959)));
evalcond[1]=((0.00235225)+(((-1.0)*x750)));
evalcond[2]=((0.0485)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((0.6204)*pz))+(((-1.0)*x750)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[1];
sj36=1.0;
cj36=0;
j36=1.5707963267949;
sj37=-1.0;
cj37=0;
j37=-1.5707963267949;
sj38=0;
cj38=-1.0;
j38=3.14159265358979;
j35eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j35eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
CheckValue<IkReal> x752 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x752.valid){
continue;
}
IkReal x751=x752.value;
j35array[0]=((-1.0)*x751);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x751)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[1];
evalcond[0]=(((px*(IKsin(j35))))+(((-1.0)*py*(IKcos(j35)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j35]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j35array[1], cj35array[1], sj35array[1];
bool j35valid[1]={false};
_nj35 = 1;
CheckValue<IkReal> x753 = IKatan2WithCheck(IkReal(((2617.0)*px*sj38)),((-2617.0)*py*sj38),IKFAST_ATAN2_MAGTHRESH);
if(!x753.valid){
continue;
}
CheckValue<IkReal> x754=IKPowWithIntegerCheck(IKsign(((((-10000.0)*(pz*pz)))+(((10000.0)*pp)))),-1);
if(!x754.valid){
continue;
}
j35array[0]=((-1.5707963267949)+(x753.value)+(((1.5707963267949)*(x754.value))));
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
for(int ij35 = 0; ij35 < 1; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 1; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[2];
IkReal x755=IKsin(j35);
IkReal x756=IKcos(j35);
evalcond[0]=(((py*x755))+((px*x756)));
evalcond[1]=(((px*x755))+(((-0.2617)*sj38))+(((-1.0)*py*x756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j35]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j35array[1], cj35array[1], sj35array[1];
bool j35valid[1]={false};
_nj35 = 1;
IkReal x757=cj37*cj37;
IkReal x758=(cj37*sj37);
IkReal x759=((10000.0)*sj37);
IkReal x760=((2617.0)*py*sj38);
IkReal x761=((2617.0)*px*sj38);
CheckValue<IkReal> x762=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*x759))+((x759*(pz*pz))))),-1);
if(!x762.valid){
continue;
}
CheckValue<IkReal> x763 = IKatan2WithCheck(IkReal(((((-1.0)*x758*x760))+(((-1.0)*x757*x761))+x761)),(((x757*x760))+(((-1.0)*x758*x761))+(((-1.0)*x760))),IKFAST_ATAN2_MAGTHRESH);
if(!x763.valid){
continue;
}
j35array[0]=((-1.5707963267949)+(((1.5707963267949)*(x762.value)))+(x763.value));
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
for(int ij35 = 0; ij35 < 1; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 1; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[4];
IkReal x764=IKsin(j35);
IkReal x765=IKcos(j35);
IkReal x766=((0.2617)*sj38);
IkReal x767=((1.0)*cj37);
IkReal x768=(py*x764);
IkReal x769=(px*x765);
IkReal x770=(px*x764);
IkReal x771=((1.0)*py*x765);
evalcond[0]=((((-1.0)*cj37*x766))+x768+x769);
evalcond[1]=(((sj37*x766))+x770+(((-1.0)*x771)));
evalcond[2]=((((-1.0)*py*x765*x767))+((sj37*x769))+((sj37*x768))+((cj37*x770)));
evalcond[3]=(((sj37*x770))+(((-1.0)*x767*x769))+(((-1.0)*x767*x768))+(((-1.0)*sj37*x771))+x766);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j35array[1], cj35array[1], sj35array[1];
bool j35valid[1]={false};
_nj35 = 1;
IkReal x772=cj37*cj37;
IkReal x773=((10000.0)*cj37);
IkReal x774=(cj37*sj37);
IkReal x775=((2617.0)*py*sj38);
IkReal x776=((2617.0)*px*sj38);
CheckValue<IkReal> x777 = IKatan2WithCheck(IkReal((((x774*x776))+(((-1.0)*x772*x775)))),((((-1.0)*x774*x775))+(((-1.0)*x772*x776))),IKFAST_ATAN2_MAGTHRESH);
if(!x777.valid){
continue;
}
CheckValue<IkReal> x778=IKPowWithIntegerCheck(IKsign((((x773*(pz*pz)))+(((-1.0)*pp*x773)))),-1);
if(!x778.valid){
continue;
}
j35array[0]=((-1.5707963267949)+(x777.value)+(((1.5707963267949)*(x778.value))));
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
for(int ij35 = 0; ij35 < 1; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 1; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[4];
IkReal x779=IKsin(j35);
IkReal x780=IKcos(j35);
IkReal x781=((0.2617)*sj38);
IkReal x782=((1.0)*cj37);
IkReal x783=(py*x779);
IkReal x784=(px*x780);
IkReal x785=(px*x779);
IkReal x786=((1.0)*py*x780);
evalcond[0]=((((-1.0)*cj37*x781))+x783+x784);
evalcond[1]=((((-1.0)*x786))+((sj37*x781))+x785);
evalcond[2]=(((cj37*x785))+(((-1.0)*py*x780*x782))+((sj37*x784))+((sj37*x783)));
evalcond[3]=((((-1.0)*x782*x784))+(((-1.0)*x782*x783))+(((-1.0)*sj37*x786))+((sj37*x785))+x781);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j35array[1], cj35array[1], sj35array[1];
bool j35valid[1]={false};
_nj35 = 1;
IkReal x787=((2617.0)*sj38);
CheckValue<IkReal> x788 = IKatan2WithCheck(IkReal((((cj37*py*x787))+(((-1.0)*px*sj37*x787)))),(((cj37*px*x787))+((py*sj37*x787))),IKFAST_ATAN2_MAGTHRESH);
if(!x788.valid){
continue;
}
CheckValue<IkReal> x789=IKPowWithIntegerCheck(IKsign(((((-10000.0)*(pz*pz)))+(((10000.0)*pp)))),-1);
if(!x789.valid){
continue;
}
j35array[0]=((-1.5707963267949)+(x788.value)+(((1.5707963267949)*(x789.value))));
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
for(int ij35 = 0; ij35 < 1; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 1; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[4];
IkReal x790=IKsin(j35);
IkReal x791=IKcos(j35);
IkReal x792=((0.2617)*sj38);
IkReal x793=((1.0)*cj37);
IkReal x794=(py*x790);
IkReal x795=(px*x791);
IkReal x796=(px*x790);
IkReal x797=((1.0)*py*x791);
evalcond[0]=((((-1.0)*cj37*x792))+x795+x794);
evalcond[1]=((((-1.0)*x797))+((sj37*x792))+x796);
evalcond[2]=(((cj37*x796))+((sj37*x795))+((sj37*x794))+(((-1.0)*py*x791*x793)));
evalcond[3]=((((-1.0)*x793*x794))+(((-1.0)*x793*x795))+(((-1.0)*sj37*x797))+((sj37*x796))+x792);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x798=((1.0)*pp);
IkReal x799=((-0.3102)+(((-1.0)*pz))+(((-0.2617)*cj38)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j36)))), 6.28318530717959)));
evalcond[1]=((0.16471093)+(((-1.0)*x798))+(((0.16235868)*cj38)));
evalcond[2]=x799;
evalcond[3]=x799;
evalcond[4]=((-0.02773715)+(((-1.0)*x798))+(((-0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[3];
sj36=-1.0;
cj36=0;
j36=-1.5707963267949;
IkReal x800=pz*pz;
IkReal x801=(cj37*sj38);
IkReal x802=(sj37*sj38);
j35eval[0]=((((-1.0)*x800))+pp);
j35eval[1]=IKsign(((((-10000.0)*x800))+(((10000.0)*pp))));
j35eval[2]=((IKabs((((px*x802))+((py*x801)))))+(IKabs(((((-1.0)*py*x802))+((px*x801))))));
if( IKabs(j35eval[0]) < 0.0000010000000000  || IKabs(j35eval[1]) < 0.0000010000000000  || IKabs(j35eval[2]) < 0.0000010000000000  )
{
{
IkReal j35eval[3];
sj36=-1.0;
cj36=0;
j36=-1.5707963267949;
IkReal x803=pz*pz;
IkReal x804=cj37*cj37;
IkReal x805=(cj37*pp);
IkReal x806=((1.0)*cj37);
IkReal x807=(sj37*sj38);
IkReal x808=(sj38*x804);
j35eval[0]=((((-1.0)*x803*x806))+x805);
j35eval[1]=IKsign(((((-10000.0)*cj37*x803))+(((10000.0)*x805))));
j35eval[2]=((IKabs((((cj37*px*x807))+((py*x808)))))+(IKabs((((px*x808))+(((-1.0)*py*x806*x807))))));
if( IKabs(j35eval[0]) < 0.0000010000000000  || IKabs(j35eval[1]) < 0.0000010000000000  || IKabs(j35eval[2]) < 0.0000010000000000  )
{
{
IkReal j35eval[3];
sj36=-1.0;
cj36=0;
j36=-1.5707963267949;
IkReal x809=cj37*cj37;
IkReal x810=pz*pz;
IkReal x811=(pp*sj37);
IkReal x812=(px*sj38);
IkReal x813=(py*sj38);
IkReal x814=(cj37*sj37);
IkReal x815=(sj37*x810);
j35eval[0]=((((-1.0)*x815))+x811);
j35eval[1]=((IKabs((((x813*x814))+(((-1.0)*x809*x812))+x812)))+(IKabs((((x809*x813))+((x812*x814))+(((-1.0)*x813))))));
j35eval[2]=IKsign(((((10000.0)*x811))+(((-10000.0)*x815))));
if( IKabs(j35eval[0]) < 0.0000010000000000  || IKabs(j35eval[1]) < 0.0000010000000000  || IKabs(j35eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x816=((1.0)*pp);
IkReal x817=x799;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j37))), 6.28318530717959)));
evalcond[1]=((0.16471093)+(((0.16235868)*cj38))+(((-1.0)*x816)));
evalcond[2]=x817;
evalcond[3]=x817;
evalcond[4]=((-0.02773715)+(((-1.0)*x816))+(((-0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[4];
sj36=-1.0;
cj36=0;
j36=-1.5707963267949;
sj37=0;
cj37=1.0;
j37=0;
IkReal x818=pz*pz;
j35eval[0]=((((-1.0)*x818))+pp);
j35eval[1]=IKsign(((((10000.0)*pp))+(((-10000.0)*x818))));
j35eval[2]=6848689.0;
j35eval[3]=sj38;
if( IKabs(j35eval[0]) < 0.0000010000000000  || IKabs(j35eval[1]) < 0.0000010000000000  || IKabs(j35eval[2]) < 0.0000010000000000  || IKabs(j35eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x819=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j38))), 6.28318530717959)));
evalcond[1]=((0.32706961)+(((-1.0)*x819)));
evalcond[2]=((-0.5719)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((-1.0)*x819))+(((-0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[1];
sj36=-1.0;
cj36=0;
j36=-1.5707963267949;
sj37=0;
cj37=1.0;
j37=0;
sj38=0;
cj38=1.0;
j38=0;
j35eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j35eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
CheckValue<IkReal> x821 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x821.valid){
continue;
}
IkReal x820=x821.value;
j35array[0]=((-1.0)*x820);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x820)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[1];
evalcond[0]=(((px*(IKsin(j35))))+(((-1.0)*py*(IKcos(j35)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x822=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j38)))), 6.28318530717959)));
evalcond[1]=((0.00235225)+(((-1.0)*x822)));
evalcond[2]=((-0.0485)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((-1.0)*x822))+(((-0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[1];
sj36=-1.0;
cj36=0;
j36=-1.5707963267949;
sj37=0;
cj37=1.0;
j37=0;
sj38=0;
cj38=-1.0;
j38=3.14159265358979;
j35eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j35eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
CheckValue<IkReal> x824 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x824.valid){
continue;
}
IkReal x823=x824.value;
j35array[0]=((-1.0)*x823);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x823)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[1];
evalcond[0]=(((px*(IKsin(j35))))+(((-1.0)*py*(IKcos(j35)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j35]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j35array[1], cj35array[1], sj35array[1];
bool j35valid[1]={false};
_nj35 = 1;
IkReal x825=((2617.0)*sj38);
CheckValue<IkReal> x826 = IKatan2WithCheck(IkReal((py*x825)),(px*x825),IKFAST_ATAN2_MAGTHRESH);
if(!x826.valid){
continue;
}
CheckValue<IkReal> x827=IKPowWithIntegerCheck(IKsign(((((-10000.0)*(pz*pz)))+(((10000.0)*pp)))),-1);
if(!x827.valid){
continue;
}
j35array[0]=((-1.5707963267949)+(x826.value)+(((1.5707963267949)*(x827.value))));
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
for(int ij35 = 0; ij35 < 1; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 1; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[2];
IkReal x828=IKcos(j35);
IkReal x829=IKsin(j35);
evalcond[0]=(((px*x829))+(((-1.0)*py*x828)));
evalcond[1]=(((py*x829))+((px*x828))+(((-0.2617)*sj38)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x830=((1.0)*pp);
IkReal x831=x799;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j37)))), 6.28318530717959)));
evalcond[1]=((0.16471093)+(((0.16235868)*cj38))+(((-1.0)*x830)));
evalcond[2]=x831;
evalcond[3]=x831;
evalcond[4]=((-0.02773715)+(((-1.0)*x830))+(((-0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[4];
sj36=-1.0;
cj36=0;
j36=-1.5707963267949;
sj37=0;
cj37=-1.0;
j37=3.14159265358979;
IkReal x832=pz*pz;
j35eval[0]=((((-1.0)*pp))+x832);
j35eval[1]=6848689.0;
j35eval[2]=sj38;
j35eval[3]=IKsign(((((10000.0)*x832))+(((-10000.0)*pp))));
if( IKabs(j35eval[0]) < 0.0000010000000000  || IKabs(j35eval[1]) < 0.0000010000000000  || IKabs(j35eval[2]) < 0.0000010000000000  || IKabs(j35eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x833=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j38))), 6.28318530717959)));
evalcond[1]=((0.32706961)+(((-1.0)*x833)));
evalcond[2]=((-0.5719)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((-1.0)*x833))+(((-0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[1];
sj36=-1.0;
cj36=0;
j36=-1.5707963267949;
sj37=0;
cj37=-1.0;
j37=3.14159265358979;
sj38=0;
cj38=1.0;
j38=0;
j35eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j35eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
CheckValue<IkReal> x835 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x835.valid){
continue;
}
IkReal x834=x835.value;
j35array[0]=((-1.0)*x834);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x834)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[1];
evalcond[0]=(((px*(IKsin(j35))))+(((-1.0)*py*(IKcos(j35)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x836=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j38)))), 6.28318530717959)));
evalcond[1]=((0.00235225)+(((-1.0)*x836)));
evalcond[2]=((-0.0485)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((-1.0)*x836))+(((-0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[1];
sj36=-1.0;
cj36=0;
j36=-1.5707963267949;
sj37=0;
cj37=-1.0;
j37=3.14159265358979;
sj38=0;
cj38=-1.0;
j38=3.14159265358979;
j35eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j35eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
CheckValue<IkReal> x838 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x838.valid){
continue;
}
IkReal x837=x838.value;
j35array[0]=((-1.0)*x837);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x837)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[1];
evalcond[0]=(((px*(IKsin(j35))))+(((-1.0)*py*(IKcos(j35)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j35]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j35array[1], cj35array[1], sj35array[1];
bool j35valid[1]={false};
_nj35 = 1;
IkReal x839=((2617.0)*sj38);
CheckValue<IkReal> x840=IKPowWithIntegerCheck(IKsign(((((10000.0)*(pz*pz)))+(((-10000.0)*pp)))),-1);
if(!x840.valid){
continue;
}
CheckValue<IkReal> x841 = IKatan2WithCheck(IkReal((py*x839)),(px*x839),IKFAST_ATAN2_MAGTHRESH);
if(!x841.valid){
continue;
}
j35array[0]=((-1.5707963267949)+(((1.5707963267949)*(x840.value)))+(x841.value));
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
for(int ij35 = 0; ij35 < 1; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 1; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[2];
IkReal x842=IKcos(j35);
IkReal x843=IKsin(j35);
evalcond[0]=((((-1.0)*py*x842))+((px*x843)));
evalcond[1]=(((py*x843))+(((0.2617)*sj38))+((px*x842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x844=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j38))), 6.28318530717959)));
evalcond[1]=((0.32706961)+(((-1.0)*x844)));
evalcond[2]=((-0.5719)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((-1.0)*x844))+(((-0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[1];
sj36=-1.0;
cj36=0;
j36=-1.5707963267949;
sj38=0;
cj38=1.0;
j38=0;
j35eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j35eval[0]) < 0.0000010000000000  )
{
{
IkReal j35eval[1];
sj36=-1.0;
cj36=0;
j36=-1.5707963267949;
sj38=0;
cj38=1.0;
j38=0;
j35eval[0]=((IKabs((((py*sj37))+(((-1.0)*cj37*px)))))+(IKabs((((px*sj37))+((cj37*py))))));
if( IKabs(j35eval[0]) < 0.0000010000000000  )
{
{
IkReal j35eval[1];
sj36=-1.0;
cj36=0;
j36=-1.5707963267949;
sj38=0;
cj38=1.0;
j38=0;
IkReal x845=((1.0)*cj37);
j35eval[0]=((IKabs(((((-1.0)*py*x845))+(((-1.0)*px*sj37)))))+(IKabs((((py*sj37))+(((-1.0)*px*x845))))));
if( IKabs(j35eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j35]

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
IkReal x846=((1.0)*cj37);
CheckValue<IkReal> x848 = IKatan2WithCheck(IkReal((((py*sj37))+(((-1.0)*px*x846)))),((((-1.0)*py*x846))+(((-1.0)*px*sj37))),IKFAST_ATAN2_MAGTHRESH);
if(!x848.valid){
continue;
}
IkReal x847=x848.value;
j35array[0]=((-1.0)*x847);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x847)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[3];
IkReal x849=IKsin(j35);
IkReal x850=IKcos(j35);
IkReal x851=(py*x849);
IkReal x852=(px*x850);
IkReal x853=(px*x849);
IkReal x854=(py*x850);
evalcond[0]=(x852+x851);
evalcond[1]=((((-1.0)*x854))+x853);
evalcond[2]=(((sj37*x851))+((sj37*x852))+((cj37*x854))+(((-1.0)*cj37*x853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
CheckValue<IkReal> x856 = IKatan2WithCheck(IkReal((((px*sj37))+((cj37*py)))),(((py*sj37))+(((-1.0)*cj37*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x856.valid){
continue;
}
IkReal x855=x856.value;
j35array[0]=((-1.0)*x855);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x855)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[3];
IkReal x857=IKsin(j35);
IkReal x858=IKcos(j35);
IkReal x859=((1.0)*cj37);
IkReal x860=(px*x858);
IkReal x861=(py*x857);
IkReal x862=(py*x858);
IkReal x863=(px*x857);
evalcond[0]=(x861+x860);
evalcond[1]=((((-1.0)*x862))+x863);
evalcond[2]=(((sj37*x862))+(((-1.0)*sj37*x863))+(((-1.0)*x859*x860))+(((-1.0)*x859*x861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
CheckValue<IkReal> x865 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x865.valid){
continue;
}
IkReal x864=x865.value;
j35array[0]=((-1.0)*x864);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x864)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[3];
IkReal x866=IKcos(j35);
IkReal x867=IKsin(j35);
IkReal x868=(py*sj37);
IkReal x869=((1.0)*py);
IkReal x870=(px*x866);
IkReal x871=((1.0)*px*x867);
evalcond[0]=((((-1.0)*x866*x869))+((px*x867)));
evalcond[1]=(((x867*x868))+((cj37*py*x866))+((sj37*x870))+(((-1.0)*cj37*x871)));
evalcond[2]=((((-1.0)*cj37*x867*x869))+(((-1.0)*sj37*x871))+((x866*x868))+(((-1.0)*cj37*x870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x872=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j38)))), 6.28318530717959)));
evalcond[1]=((0.00235225)+(((-1.0)*x872)));
evalcond[2]=((-0.0485)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((-0.6204)*pz))+(((-1.0)*x872)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[1];
sj36=-1.0;
cj36=0;
j36=-1.5707963267949;
sj38=0;
cj38=-1.0;
j38=3.14159265358979;
j35eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j35eval[0]) < 0.0000010000000000  )
{
{
IkReal j35eval[1];
sj36=-1.0;
cj36=0;
j36=-1.5707963267949;
sj38=0;
cj38=-1.0;
j38=3.14159265358979;
j35eval[0]=((IKabs((((py*sj37))+(((-1.0)*cj37*px)))))+(IKabs((((px*sj37))+((cj37*py))))));
if( IKabs(j35eval[0]) < 0.0000010000000000  )
{
{
IkReal j35eval[1];
sj36=-1.0;
cj36=0;
j36=-1.5707963267949;
sj38=0;
cj38=-1.0;
j38=3.14159265358979;
IkReal x873=((1.0)*cj37);
j35eval[0]=((IKabs((((py*sj37))+(((-1.0)*px*x873)))))+(IKabs(((((-1.0)*px*sj37))+(((-1.0)*py*x873))))));
if( IKabs(j35eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j35]

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
IkReal x874=((1.0)*cj37);
CheckValue<IkReal> x876 = IKatan2WithCheck(IkReal((((py*sj37))+(((-1.0)*px*x874)))),((((-1.0)*px*sj37))+(((-1.0)*py*x874))),IKFAST_ATAN2_MAGTHRESH);
if(!x876.valid){
continue;
}
IkReal x875=x876.value;
j35array[0]=((-1.0)*x875);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x875)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[3];
IkReal x877=IKsin(j35);
IkReal x878=IKcos(j35);
IkReal x879=(py*x877);
IkReal x880=(px*x878);
IkReal x881=(px*x877);
IkReal x882=(py*x878);
evalcond[0]=(x879+x880);
evalcond[1]=((((-1.0)*x882))+x881);
evalcond[2]=(((sj37*x880))+(((-1.0)*cj37*x881))+((cj37*x882))+((sj37*x879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
CheckValue<IkReal> x884 = IKatan2WithCheck(IkReal((((px*sj37))+((cj37*py)))),(((py*sj37))+(((-1.0)*cj37*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x884.valid){
continue;
}
IkReal x883=x884.value;
j35array[0]=((-1.0)*x883);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x883)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[3];
IkReal x885=IKsin(j35);
IkReal x886=IKcos(j35);
IkReal x887=((1.0)*cj37);
IkReal x888=(px*x886);
IkReal x889=(py*x885);
IkReal x890=(py*x886);
IkReal x891=(px*x885);
evalcond[0]=(x889+x888);
evalcond[1]=((((-1.0)*x890))+x891);
evalcond[2]=((((-1.0)*x887*x889))+(((-1.0)*x887*x888))+((sj37*x890))+(((-1.0)*sj37*x891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
CheckValue<IkReal> x893 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x893.valid){
continue;
}
IkReal x892=x893.value;
j35array[0]=((-1.0)*x892);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x892)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[3];
IkReal x894=IKcos(j35);
IkReal x895=IKsin(j35);
IkReal x896=(py*sj37);
IkReal x897=((1.0)*py);
IkReal x898=(px*x894);
IkReal x899=((1.0)*px*x895);
evalcond[0]=(((px*x895))+(((-1.0)*x894*x897)));
evalcond[1]=(((sj37*x898))+(((-1.0)*cj37*x899))+((x895*x896))+((cj37*py*x894)));
evalcond[2]=((((-1.0)*sj37*x899))+(((-1.0)*cj37*x898))+((x894*x896))+(((-1.0)*cj37*x895*x897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x900=((1.0)*pp);
IkReal x901=x799;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j37)))), 6.28318530717959)));
evalcond[1]=((0.16471093)+(((-1.0)*x900))+(((0.16235868)*cj38)));
evalcond[2]=x901;
evalcond[3]=x901;
evalcond[4]=((-0.02773715)+(((-1.0)*x900))+(((-0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[4];
sj36=-1.0;
cj36=0;
j36=-1.5707963267949;
sj37=1.0;
cj37=0;
j37=1.5707963267949;
IkReal x902=pz*pz;
j35eval[0]=(pp+(((-1.0)*x902)));
j35eval[1]=IKsign(((((-10000.0)*x902))+(((10000.0)*pp))));
j35eval[2]=6848689.0;
j35eval[3]=sj38;
if( IKabs(j35eval[0]) < 0.0000010000000000  || IKabs(j35eval[1]) < 0.0000010000000000  || IKabs(j35eval[2]) < 0.0000010000000000  || IKabs(j35eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x903=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j38))), 6.28318530717959)));
evalcond[1]=((0.32706961)+(((-1.0)*x903)));
evalcond[2]=((-0.5719)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((-1.0)*x903))+(((-0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[1];
sj36=-1.0;
cj36=0;
j36=-1.5707963267949;
sj37=1.0;
cj37=0;
j37=1.5707963267949;
sj38=0;
cj38=1.0;
j38=0;
j35eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j35eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
CheckValue<IkReal> x905 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x905.valid){
continue;
}
IkReal x904=x905.value;
j35array[0]=((-1.0)*x904);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x904)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[1];
evalcond[0]=(((px*(IKsin(j35))))+(((-1.0)*py*(IKcos(j35)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x906=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j38)))), 6.28318530717959)));
evalcond[1]=((0.00235225)+(((-1.0)*x906)));
evalcond[2]=((-0.0485)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((-1.0)*x906))+(((-0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[1];
sj36=-1.0;
cj36=0;
j36=-1.5707963267949;
sj37=1.0;
cj37=0;
j37=1.5707963267949;
sj38=0;
cj38=-1.0;
j38=3.14159265358979;
j35eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j35eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
CheckValue<IkReal> x908 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x908.valid){
continue;
}
IkReal x907=x908.value;
j35array[0]=((-1.0)*x907);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x907)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[1];
evalcond[0]=(((px*(IKsin(j35))))+(((-1.0)*py*(IKcos(j35)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j35]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j35array[1], cj35array[1], sj35array[1];
bool j35valid[1]={false};
_nj35 = 1;
CheckValue<IkReal> x909 = IKatan2WithCheck(IkReal(((2617.0)*px*sj38)),((-2617.0)*py*sj38),IKFAST_ATAN2_MAGTHRESH);
if(!x909.valid){
continue;
}
CheckValue<IkReal> x910=IKPowWithIntegerCheck(IKsign(((((-10000.0)*(pz*pz)))+(((10000.0)*pp)))),-1);
if(!x910.valid){
continue;
}
j35array[0]=((-1.5707963267949)+(x909.value)+(((1.5707963267949)*(x910.value))));
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
for(int ij35 = 0; ij35 < 1; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 1; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[2];
IkReal x911=IKsin(j35);
IkReal x912=IKcos(j35);
evalcond[0]=(((px*x912))+((py*x911)));
evalcond[1]=(((px*x911))+(((-0.2617)*sj38))+(((-1.0)*py*x912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x913=((1.0)*pp);
IkReal x914=x799;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j37)))), 6.28318530717959)));
evalcond[1]=((0.16471093)+(((0.16235868)*cj38))+(((-1.0)*x913)));
evalcond[2]=x914;
evalcond[3]=x914;
evalcond[4]=((-0.02773715)+(((-1.0)*x913))+(((-0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[4];
sj36=-1.0;
cj36=0;
j36=-1.5707963267949;
sj37=-1.0;
cj37=0;
j37=-1.5707963267949;
IkReal x915=pz*pz;
j35eval[0]=((((-1.0)*pp))+x915);
j35eval[1]=6848689.0;
j35eval[2]=sj38;
j35eval[3]=IKsign(((((-10000.0)*pp))+(((10000.0)*x915))));
if( IKabs(j35eval[0]) < 0.0000010000000000  || IKabs(j35eval[1]) < 0.0000010000000000  || IKabs(j35eval[2]) < 0.0000010000000000  || IKabs(j35eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x916=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j38))), 6.28318530717959)));
evalcond[1]=((0.32706961)+(((-1.0)*x916)));
evalcond[2]=((-0.5719)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((-1.0)*x916))+(((-0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[1];
sj36=-1.0;
cj36=0;
j36=-1.5707963267949;
sj37=-1.0;
cj37=0;
j37=-1.5707963267949;
sj38=0;
cj38=1.0;
j38=0;
j35eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j35eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
CheckValue<IkReal> x918 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x918.valid){
continue;
}
IkReal x917=x918.value;
j35array[0]=((-1.0)*x917);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x917)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[1];
evalcond[0]=(((px*(IKsin(j35))))+(((-1.0)*py*(IKcos(j35)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x919=((1.0)*pp);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j38)))), 6.28318530717959)));
evalcond[1]=((0.00235225)+(((-1.0)*x919)));
evalcond[2]=((-0.0485)+(((-1.0)*pz)));
evalcond[3]=((-0.02773715)+(((-1.0)*x919))+(((-0.6204)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j35eval[1];
sj36=-1.0;
cj36=0;
j36=-1.5707963267949;
sj37=-1.0;
cj37=0;
j37=-1.5707963267949;
sj38=0;
cj38=-1.0;
j38=3.14159265358979;
j35eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j35eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
CheckValue<IkReal> x921 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x921.valid){
continue;
}
IkReal x920=x921.value;
j35array[0]=((-1.0)*x920);
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x920)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[1];
evalcond[0]=(((px*(IKsin(j35))))+(((-1.0)*py*(IKcos(j35)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j35]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j35array[1], cj35array[1], sj35array[1];
bool j35valid[1]={false};
_nj35 = 1;
CheckValue<IkReal> x922=IKPowWithIntegerCheck(IKsign(((((10000.0)*(pz*pz)))+(((-10000.0)*pp)))),-1);
if(!x922.valid){
continue;
}
CheckValue<IkReal> x923 = IKatan2WithCheck(IkReal(((2617.0)*px*sj38)),((-2617.0)*py*sj38),IKFAST_ATAN2_MAGTHRESH);
if(!x923.valid){
continue;
}
j35array[0]=((-1.5707963267949)+(((1.5707963267949)*(x922.value)))+(x923.value));
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
for(int ij35 = 0; ij35 < 1; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 1; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[2];
IkReal x924=IKsin(j35);
IkReal x925=IKcos(j35);
evalcond[0]=(((py*x924))+((px*x925)));
evalcond[1]=((((0.2617)*sj38))+(((-1.0)*py*x925))+((px*x924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j35]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j35array[1], cj35array[1], sj35array[1];
bool j35valid[1]={false};
_nj35 = 1;
IkReal x926=cj37*cj37;
IkReal x927=(cj37*sj37);
IkReal x928=((10000.0)*sj37);
IkReal x929=((2617.0)*py*sj38);
IkReal x930=((2617.0)*px*sj38);
CheckValue<IkReal> x931=IKPowWithIntegerCheck(IKsign((((pp*x928))+(((-1.0)*x928*(pz*pz))))),-1);
if(!x931.valid){
continue;
}
CheckValue<IkReal> x932 = IKatan2WithCheck(IkReal((((x927*x929))+(((-1.0)*x926*x930))+x930)),((((-1.0)*x929))+((x927*x930))+((x926*x929))),IKFAST_ATAN2_MAGTHRESH);
if(!x932.valid){
continue;
}
j35array[0]=((-1.5707963267949)+(((1.5707963267949)*(x931.value)))+(x932.value));
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
for(int ij35 = 0; ij35 < 1; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 1; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[4];
IkReal x933=IKsin(j35);
IkReal x934=IKcos(j35);
IkReal x935=((0.2617)*sj38);
IkReal x936=((1.0)*cj37);
IkReal x937=(py*x933);
IkReal x938=(px*x934);
IkReal x939=(py*x934);
IkReal x940=((1.0)*px*x933);
evalcond[0]=((((-1.0)*cj37*x935))+x938+x937);
evalcond[1]=((((-1.0)*sj37*x935))+(((-1.0)*x939))+((px*x933)));
evalcond[2]=(((cj37*x939))+(((-1.0)*px*x933*x936))+((sj37*x938))+((sj37*x937)));
evalcond[3]=(((sj37*x939))+(((-1.0)*sj37*x940))+(((-1.0)*x936*x938))+(((-1.0)*x936*x937))+x935);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j35array[1], cj35array[1], sj35array[1];
bool j35valid[1]={false};
_nj35 = 1;
IkReal x941=cj37*cj37;
IkReal x942=((10000.0)*cj37);
IkReal x943=(cj37*sj37);
IkReal x944=((2617.0)*py*sj38);
IkReal x945=((2617.0)*px*sj38);
CheckValue<IkReal> x946=IKPowWithIntegerCheck(IKsign((((pp*x942))+(((-1.0)*x942*(pz*pz))))),-1);
if(!x946.valid){
continue;
}
CheckValue<IkReal> x947 = IKatan2WithCheck(IkReal((((x941*x944))+((x943*x945)))),(((x941*x945))+(((-1.0)*x943*x944))),IKFAST_ATAN2_MAGTHRESH);
if(!x947.valid){
continue;
}
j35array[0]=((-1.5707963267949)+(((1.5707963267949)*(x946.value)))+(x947.value));
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
for(int ij35 = 0; ij35 < 1; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 1; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[4];
IkReal x948=IKsin(j35);
IkReal x949=IKcos(j35);
IkReal x950=((0.2617)*sj38);
IkReal x951=((1.0)*cj37);
IkReal x952=(py*x948);
IkReal x953=(px*x949);
IkReal x954=(py*x949);
IkReal x955=((1.0)*px*x948);
evalcond[0]=((((-1.0)*cj37*x950))+x953+x952);
evalcond[1]=((((-1.0)*x954))+(((-1.0)*sj37*x950))+((px*x948)));
evalcond[2]=(((cj37*x954))+((sj37*x952))+((sj37*x953))+(((-1.0)*px*x948*x951)));
evalcond[3]=(((sj37*x954))+(((-1.0)*sj37*x955))+(((-1.0)*x951*x953))+(((-1.0)*x951*x952))+x950);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j35array[1], cj35array[1], sj35array[1];
bool j35valid[1]={false};
_nj35 = 1;
IkReal x956=((2617.0)*sj38);
CheckValue<IkReal> x957 = IKatan2WithCheck(IkReal((((px*sj37*x956))+((cj37*py*x956)))),((((-1.0)*py*sj37*x956))+((cj37*px*x956))),IKFAST_ATAN2_MAGTHRESH);
if(!x957.valid){
continue;
}
CheckValue<IkReal> x958=IKPowWithIntegerCheck(IKsign(((((-10000.0)*(pz*pz)))+(((10000.0)*pp)))),-1);
if(!x958.valid){
continue;
}
j35array[0]=((-1.5707963267949)+(x957.value)+(((1.5707963267949)*(x958.value))));
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
for(int ij35 = 0; ij35 < 1; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 1; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[4];
IkReal x959=IKsin(j35);
IkReal x960=IKcos(j35);
IkReal x961=((0.2617)*sj38);
IkReal x962=((1.0)*cj37);
IkReal x963=(py*x959);
IkReal x964=(px*x960);
IkReal x965=(py*x960);
IkReal x966=((1.0)*px*x959);
evalcond[0]=((((-1.0)*cj37*x961))+x963+x964);
evalcond[1]=(((px*x959))+(((-1.0)*x965))+(((-1.0)*sj37*x961)));
evalcond[2]=((((-1.0)*px*x959*x962))+((sj37*x964))+((sj37*x963))+((cj37*x965)));
evalcond[3]=((((-1.0)*x962*x964))+(((-1.0)*x962*x963))+((sj37*x965))+(((-1.0)*sj37*x966))+x961);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j35]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j35array[1], cj35array[1], sj35array[1];
bool j35valid[1]={false};
_nj35 = 1;
IkReal x967=((3102.0)*cj36);
IkReal x968=(sj36*sj37);
IkReal x969=((2617.0)*py*sj38);
IkReal x970=((2617.0)*px*sj38);
IkReal x971=((2617.0)*cj36*cj38);
CheckValue<IkReal> x972 = IKatan2WithCheck(IkReal((((px*x967))+((px*x971))+(((-1.0)*x968*x970))+((cj37*x969)))),((((-1.0)*py*x967))+((cj37*x970))+(((-1.0)*py*x971))+((x968*x969))),IKFAST_ATAN2_MAGTHRESH);
if(!x972.valid){
continue;
}
CheckValue<IkReal> x973=IKPowWithIntegerCheck(IKsign(((((-10000.0)*(pz*pz)))+(((10000.0)*pp)))),-1);
if(!x973.valid){
continue;
}
j35array[0]=((-1.5707963267949)+(x972.value)+(((1.5707963267949)*(x973.value))));
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
for(int ij35 = 0; ij35 < 1; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 1; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[6];
IkReal x974=IKsin(j35);
IkReal x975=IKcos(j35);
IkReal x976=((0.2617)*sj38);
IkReal x977=((0.2617)*cj38);
IkReal x978=((1.0)*cj36);
IkReal x979=(px*sj36);
IkReal x980=((1.0)*cj37);
IkReal x981=(sj36*sj37);
IkReal x982=(pz*sj36);
IkReal x983=(py*x975);
IkReal x984=(cj37*x974);
IkReal x985=(px*x975);
IkReal x986=(py*x974);
IkReal x987=(cj36*px*x974);
evalcond[0]=((((-1.0)*cj37*x976))+x985+x986);
evalcond[1]=((-0.3102)+(((-1.0)*x978*x983))+x987+x982+(((-1.0)*x977)));
evalcond[2]=((-0.02773715)+(((0.6204)*x982))+(((0.6204)*x987))+(((-0.6204)*cj36*x983))+(((-1.0)*pp)));
evalcond[3]=((((-1.0)*x983))+(((-0.3102)*cj36))+((x976*x981))+(((-1.0)*cj36*x977))+((px*x974)));
evalcond[4]=(((sj37*x986))+((sj37*x985))+((x979*x984))+(((-1.0)*cj37*pz*x978))+(((-1.0)*sj36*x980*x983)));
evalcond[5]=(((sj37*x974*x979))+(((-1.0)*x980*x986))+(((-1.0)*x980*x985))+x976+(((-1.0)*x981*x983))+(((-1.0)*pz*sj37*x978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j35array[1], cj35array[1], sj35array[1];
bool j35valid[1]={false};
_nj35 = 1;
IkReal x988=((25000000.0)*pp);
IkReal x989=((15510000.0)*cj36);
IkReal x990=((15510000.0)*pz*sj36);
IkReal x991=((4058967.0)*cj36*cj37*sj38);
CheckValue<IkReal> x992 = IKatan2WithCheck(IkReal(((((-1.0)*px*x990))+((py*x991))+(((693428.75)*px))+((px*x988)))),(((py*x990))+(((-1.0)*py*x988))+((px*x991))+(((-693428.75)*py))),IKFAST_ATAN2_MAGTHRESH);
if(!x992.valid){
continue;
}
CheckValue<IkReal> x993=IKPowWithIntegerCheck(IKsign(((((-1.0)*x989*(pz*pz)))+((pp*x989)))),-1);
if(!x993.valid){
continue;
}
j35array[0]=((-1.5707963267949)+(x992.value)+(((1.5707963267949)*(x993.value))));
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
for(int ij35 = 0; ij35 < 1; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 1; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[6];
IkReal x994=IKsin(j35);
IkReal x995=IKcos(j35);
IkReal x996=((0.2617)*sj38);
IkReal x997=((0.2617)*cj38);
IkReal x998=((1.0)*cj36);
IkReal x999=(px*sj36);
IkReal x1000=((1.0)*cj37);
IkReal x1001=(sj36*sj37);
IkReal x1002=(pz*sj36);
IkReal x1003=(py*x995);
IkReal x1004=(cj37*x994);
IkReal x1005=(px*x995);
IkReal x1006=(py*x994);
IkReal x1007=(cj36*px*x994);
evalcond[0]=(x1006+x1005+(((-1.0)*cj37*x996)));
evalcond[1]=((-0.3102)+x1007+x1002+(((-1.0)*x1003*x998))+(((-1.0)*x997)));
evalcond[2]=((-0.02773715)+(((-0.6204)*cj36*x1003))+(((0.6204)*x1007))+(((0.6204)*x1002))+(((-1.0)*pp)));
evalcond[3]=((((-1.0)*x1003))+((px*x994))+(((-0.3102)*cj36))+((x1001*x996))+(((-1.0)*cj36*x997)));
evalcond[4]=((((-1.0)*cj37*pz*x998))+((sj37*x1006))+((sj37*x1005))+(((-1.0)*sj36*x1000*x1003))+((x1004*x999)));
evalcond[5]=((((-1.0)*x1001*x1003))+(((-1.0)*pz*sj37*x998))+((sj37*x994*x999))+(((-1.0)*x1000*x1006))+(((-1.0)*x1000*x1005))+x996);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j35array[1], cj35array[1], sj35array[1];
bool j35valid[1]={false};
_nj35 = 1;
IkReal x1008=((2617.0)*py);
IkReal x1009=((10000.0)*cj36);
IkReal x1010=((2617.0)*px);
IkReal x1011=((10000.0)*pz*sj36);
IkReal x1012=(cj36*cj37*sj38);
CheckValue<IkReal> x1013 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1011))+(((3102.0)*px))+((cj38*x1010))+((x1008*x1012)))),((((-3102.0)*py))+((py*x1011))+(((-1.0)*cj38*x1008))+((x1010*x1012))),IKFAST_ATAN2_MAGTHRESH);
if(!x1013.valid){
continue;
}
CheckValue<IkReal> x1014=IKPowWithIntegerCheck(IKsign((((pp*x1009))+(((-1.0)*x1009*(pz*pz))))),-1);
if(!x1014.valid){
continue;
}
j35array[0]=((-1.5707963267949)+(x1013.value)+(((1.5707963267949)*(x1014.value))));
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
for(int ij35 = 0; ij35 < 1; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 1; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];
{
IkReal evalcond[6];
IkReal x1015=IKsin(j35);
IkReal x1016=IKcos(j35);
IkReal x1017=((0.2617)*sj38);
IkReal x1018=((0.2617)*cj38);
IkReal x1019=((1.0)*cj36);
IkReal x1020=(px*sj36);
IkReal x1021=((1.0)*cj37);
IkReal x1022=(sj36*sj37);
IkReal x1023=(pz*sj36);
IkReal x1024=(py*x1016);
IkReal x1025=(cj37*x1015);
IkReal x1026=(px*x1016);
IkReal x1027=(py*x1015);
IkReal x1028=(cj36*px*x1015);
evalcond[0]=((((-1.0)*cj37*x1017))+x1027+x1026);
evalcond[1]=((-0.3102)+x1023+x1028+(((-1.0)*x1018))+(((-1.0)*x1019*x1024)));
evalcond[2]=((-0.02773715)+(((0.6204)*x1023))+(((0.6204)*x1028))+(((-1.0)*pp))+(((-0.6204)*cj36*x1024)));
evalcond[3]=(((x1017*x1022))+(((-1.0)*cj36*x1018))+(((-1.0)*x1024))+(((-0.3102)*cj36))+((px*x1015)));
evalcond[4]=(((sj37*x1027))+((sj37*x1026))+(((-1.0)*sj36*x1021*x1024))+(((-1.0)*cj37*pz*x1019))+((x1020*x1025)));
evalcond[5]=(((sj37*x1015*x1020))+(((-1.0)*pz*sj37*x1019))+x1017+(((-1.0)*x1021*x1027))+(((-1.0)*x1021*x1026))+(((-1.0)*x1022*x1024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j35array[2], cj35array[2], sj35array[2];
bool j35valid[2]={false};
_nj35 = 2;
CheckValue<IkReal> x1031 = IKatan2WithCheck(IkReal(px),py,IKFAST_ATAN2_MAGTHRESH);
if(!x1031.valid){
continue;
}
IkReal x1029=((1.0)*(x1031.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x1032=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x1032.valid){
continue;
}
if( (((0.2617)*cj37*sj38*(x1032.value))) < -1-IKFAST_SINCOS_THRESH || (((0.2617)*cj37*sj38*(x1032.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1030=IKasin(((0.2617)*cj37*sj38*(x1032.value)));
j35array[0]=(x1030+(((-1.0)*x1029)));
sj35array[0]=IKsin(j35array[0]);
cj35array[0]=IKcos(j35array[0]);
j35array[1]=((3.14159265358979)+(((-1.0)*x1030))+(((-1.0)*x1029)));
sj35array[1]=IKsin(j35array[1]);
cj35array[1]=IKcos(j35array[1]);
if( j35array[0] > IKPI )
{
    j35array[0]-=IK2PI;
}
else if( j35array[0] < -IKPI )
{    j35array[0]+=IK2PI;
}
j35valid[0] = true;
if( j35array[1] > IKPI )
{
    j35array[1]-=IK2PI;
}
else if( j35array[1] < -IKPI )
{    j35array[1]+=IK2PI;
}
j35valid[1] = true;
for(int ij35 = 0; ij35 < 2; ++ij35)
{
if( !j35valid[ij35] )
{
    continue;
}
_ij35[0] = ij35; _ij35[1] = -1;
for(int iij35 = ij35+1; iij35 < 2; ++iij35)
{
if( j35valid[iij35] && IKabs(cj35array[ij35]-cj35array[iij35]) < IKFAST_SOLUTION_THRESH && IKabs(sj35array[ij35]-sj35array[iij35]) < IKFAST_SOLUTION_THRESH )
{
    j35valid[iij35]=false; _ij35[1] = iij35; break; 
}
}
j35 = j35array[ij35]; cj35 = cj35array[ij35]; sj35 = sj35array[ij35];

{
IkReal j36eval[3];
IkReal x1033=(sj37*sj38);
IkReal x1034=(px*sj35);
IkReal x1035=((10000.0)*pz);
IkReal x1036=(cj35*py);
IkReal x1037=((2617.0)*cj38);
j36eval[0]=((((1.18532670997325)*x1034))+(((-1.18532670997325)*x1036))+(((-1.0)*pz*x1033))+(((-1.0)*cj38*x1036))+((cj38*x1034)));
j36eval[1]=IKsign(((((-3102.0)*x1036))+(((-1.0)*x1036*x1037))+(((3102.0)*x1034))+(((-2617.0)*pz*x1033))+((x1034*x1037))));
j36eval[2]=((IKabs(((962.2404)+(((-1.0)*pz*x1035))+(((684.8689)*(cj38*cj38)))+(((1623.5868)*cj38)))))+(IKabs(((((-1.0)*x1035*x1036))+(((-684.8689)*cj38*x1033))+((x1034*x1035))+(((-811.7934)*x1033))))));
if( IKabs(j36eval[0]) < 0.0000010000000000  || IKabs(j36eval[1]) < 0.0000010000000000  || IKabs(j36eval[2]) < 0.0000010000000000  )
{
{
IkReal j36eval[3];
IkReal x1038=(px*sj35);
IkReal x1039=((6542500.0)*pp);
IkReal x1040=(sj37*sj38);
IkReal x1041=(cj35*py);
IkReal x1042=((15510000.0)*pz);
IkReal x1043=((4058967.0)*cj38);
j36eval[0]=((((-1.0)*pz*x1040))+(((1.18532670997325)*x1038))+(((-1.0)*cj38*x1041))+(((-1.18532670997325)*x1041))+((cj38*x1038)));
j36eval[1]=((IKabs(((215101.59825)+(((181470.303875)*cj38))+(((-1.0)*pz*x1042))+(((7755000.0)*pp))+((cj38*x1039)))))+(IKabs((((x1038*x1042))+(((-1.0)*x1039*x1040))+(((-1.0)*x1041*x1042))+(((-181470.303875)*x1040))))));
j36eval[2]=IKsign((((x1038*x1043))+(((-4811202.0)*x1041))+(((-1.0)*x1041*x1043))+(((-4058967.0)*pz*x1040))+(((4811202.0)*x1038))));
if( IKabs(j36eval[0]) < 0.0000010000000000  || IKabs(j36eval[1]) < 0.0000010000000000  || IKabs(j36eval[2]) < 0.0000010000000000  )
{
{
IkReal j36eval[3];
IkReal x1044=cj37*cj37;
IkReal x1045=cj38*cj38;
IkReal x1046=(px*sj35);
IkReal x1047=((26170000.0)*cj38);
IkReal x1048=(cj35*py);
IkReal x1049=((26170000.0)*sj37*sj38);
IkReal x1050=(x1044*x1045);
j36eval[0]=((-2.40499940937601)+x1044+(((-1.0)*x1050))+(((-2.3706534199465)*cj38)));
j36eval[1]=IKsign(((-16471093.0)+(((6848689.0)*x1044))+(((-16235868.0)*cj38))+(((-6848689.0)*x1050))));
j36eval[2]=((IKabs(((((-1.0)*x1046*x1047))+(((-31020000.0)*x1046))+(((31020000.0)*x1048))+(((-1.0)*pz*x1049))+((x1047*x1048)))))+(IKabs(((((-31020000.0)*pz))+(((-1.0)*pz*x1047))+(((-1.0)*x1048*x1049))+((x1046*x1049))))));
if( IKabs(j36eval[0]) < 0.0000010000000000  || IKabs(j36eval[1]) < 0.0000010000000000  || IKabs(j36eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j36]

} else
{
{
IkReal j36array[1], cj36array[1], sj36array[1];
bool j36valid[1]={false};
_nj36 = 1;
IkReal x1051=cj37*cj37;
IkReal x1052=(cj35*py);
IkReal x1053=(px*sj35);
IkReal x1054=((26170000.0)*cj38);
IkReal x1055=((6848689.0)*x1051);
IkReal x1056=((26170000.0)*sj37*sj38);
CheckValue<IkReal> x1057=IKPowWithIntegerCheck(IKsign(((-16471093.0)+x1055+(((-16235868.0)*cj38))+(((-1.0)*x1055*(cj38*cj38))))),-1);
if(!x1057.valid){
continue;
}
CheckValue<IkReal> x1058 = IKatan2WithCheck(IkReal(((((-1.0)*x1052*x1056))+((x1053*x1056))+(((-1.0)*pz*x1054))+(((-31020000.0)*pz)))),((((31020000.0)*x1052))+(((-31020000.0)*x1053))+((x1052*x1054))+(((-1.0)*pz*x1056))+(((-1.0)*x1053*x1054))),IKFAST_ATAN2_MAGTHRESH);
if(!x1058.valid){
continue;
}
j36array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1057.value)))+(x1058.value));
sj36array[0]=IKsin(j36array[0]);
cj36array[0]=IKcos(j36array[0]);
if( j36array[0] > IKPI )
{
    j36array[0]-=IK2PI;
}
else if( j36array[0] < -IKPI )
{    j36array[0]+=IK2PI;
}
j36valid[0] = true;
for(int ij36 = 0; ij36 < 1; ++ij36)
{
if( !j36valid[ij36] )
{
    continue;
}
_ij36[0] = ij36; _ij36[1] = -1;
for(int iij36 = ij36+1; iij36 < 1; ++iij36)
{
if( j36valid[iij36] && IKabs(cj36array[ij36]-cj36array[iij36]) < IKFAST_SOLUTION_THRESH && IKabs(sj36array[ij36]-sj36array[iij36]) < IKFAST_SOLUTION_THRESH )
{
    j36valid[iij36]=false; _ij36[1] = iij36; break; 
}
}
j36 = j36array[ij36]; cj36 = cj36array[ij36]; sj36 = sj36array[ij36];
{
IkReal evalcond[6];
IkReal x1059=IKsin(j36);
IkReal x1060=IKcos(j36);
IkReal x1061=((0.2617)*sj38);
IkReal x1062=((0.2617)*cj38);
IkReal x1063=((1.0)*pz);
IkReal x1064=(py*sj35);
IkReal x1065=((1.0)*cj37);
IkReal x1066=(px*sj35);
IkReal x1067=(cj35*py);
IkReal x1068=(cj35*px);
IkReal x1069=(sj37*x1060);
IkReal x1070=(pz*x1059);
IkReal x1071=((0.6204)*x1060);
IkReal x1072=(sj37*x1059);
evalcond[0]=(((x1061*x1069))+(((0.3102)*x1059))+((x1059*x1062))+(((-1.0)*x1063)));
evalcond[1]=((-0.3102)+x1070+((x1060*x1066))+(((-1.0)*x1060*x1067))+(((-1.0)*x1062)));
evalcond[2]=((-0.02773715)+((x1066*x1071))+(((-1.0)*pp))+(((-1.0)*x1067*x1071))+(((0.6204)*x1070)));
evalcond[3]=((((-1.0)*x1060*x1062))+x1066+((x1061*x1072))+(((-0.3102)*x1060))+(((-1.0)*x1067)));
evalcond[4]=((((-1.0)*cj37*x1060*x1063))+((sj37*x1064))+((sj37*x1068))+((cj37*x1059*x1066))+(((-1.0)*x1059*x1065*x1067)));
evalcond[5]=((((-1.0)*x1063*x1069))+x1061+(((-1.0)*x1067*x1072))+((x1066*x1072))+(((-1.0)*x1064*x1065))+(((-1.0)*x1065*x1068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j36array[1], cj36array[1], sj36array[1];
bool j36valid[1]={false};
_nj36 = 1;
IkReal x1073=(cj35*py);
IkReal x1074=((4058967.0)*cj38);
IkReal x1075=((6542500.0)*pp);
IkReal x1076=(px*sj35);
IkReal x1077=((15510000.0)*pz);
IkReal x1078=(sj37*sj38);
CheckValue<IkReal> x1079 = IKatan2WithCheck(IkReal(((((-1.0)*x1075*x1078))+(((-1.0)*x1073*x1077))+((x1076*x1077))+(((-181470.303875)*x1078)))),((215101.59825)+((cj38*x1075))+(((181470.303875)*cj38))+(((-1.0)*pz*x1077))+(((7755000.0)*pp))),IKFAST_ATAN2_MAGTHRESH);
if(!x1079.valid){
continue;
}
CheckValue<IkReal> x1080=IKPowWithIntegerCheck(IKsign((((x1074*x1076))+(((-1.0)*x1073*x1074))+(((-4811202.0)*x1073))+(((-4058967.0)*pz*x1078))+(((4811202.0)*x1076)))),-1);
if(!x1080.valid){
continue;
}
j36array[0]=((-1.5707963267949)+(x1079.value)+(((1.5707963267949)*(x1080.value))));
sj36array[0]=IKsin(j36array[0]);
cj36array[0]=IKcos(j36array[0]);
if( j36array[0] > IKPI )
{
    j36array[0]-=IK2PI;
}
else if( j36array[0] < -IKPI )
{    j36array[0]+=IK2PI;
}
j36valid[0] = true;
for(int ij36 = 0; ij36 < 1; ++ij36)
{
if( !j36valid[ij36] )
{
    continue;
}
_ij36[0] = ij36; _ij36[1] = -1;
for(int iij36 = ij36+1; iij36 < 1; ++iij36)
{
if( j36valid[iij36] && IKabs(cj36array[ij36]-cj36array[iij36]) < IKFAST_SOLUTION_THRESH && IKabs(sj36array[ij36]-sj36array[iij36]) < IKFAST_SOLUTION_THRESH )
{
    j36valid[iij36]=false; _ij36[1] = iij36; break; 
}
}
j36 = j36array[ij36]; cj36 = cj36array[ij36]; sj36 = sj36array[ij36];
{
IkReal evalcond[6];
IkReal x1081=IKsin(j36);
IkReal x1082=IKcos(j36);
IkReal x1083=((0.2617)*sj38);
IkReal x1084=((0.2617)*cj38);
IkReal x1085=((1.0)*pz);
IkReal x1086=(py*sj35);
IkReal x1087=((1.0)*cj37);
IkReal x1088=(px*sj35);
IkReal x1089=(cj35*py);
IkReal x1090=(cj35*px);
IkReal x1091=(sj37*x1082);
IkReal x1092=(pz*x1081);
IkReal x1093=((0.6204)*x1082);
IkReal x1094=(sj37*x1081);
evalcond[0]=(((x1083*x1091))+((x1081*x1084))+(((0.3102)*x1081))+(((-1.0)*x1085)));
evalcond[1]=((-0.3102)+((x1082*x1088))+(((-1.0)*x1082*x1089))+x1092+(((-1.0)*x1084)));
evalcond[2]=((-0.02773715)+(((-1.0)*x1089*x1093))+((x1088*x1093))+(((0.6204)*x1092))+(((-1.0)*pp)));
evalcond[3]=(((x1083*x1094))+x1088+(((-0.3102)*x1082))+(((-1.0)*x1089))+(((-1.0)*x1082*x1084)));
evalcond[4]=(((sj37*x1090))+(((-1.0)*x1081*x1087*x1089))+(((-1.0)*cj37*x1082*x1085))+((sj37*x1086))+((cj37*x1081*x1088)));
evalcond[5]=((((-1.0)*x1089*x1094))+x1083+((x1088*x1094))+(((-1.0)*x1085*x1091))+(((-1.0)*x1087*x1090))+(((-1.0)*x1086*x1087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j36array[1], cj36array[1], sj36array[1];
bool j36valid[1]={false};
_nj36 = 1;
IkReal x1095=(sj37*sj38);
IkReal x1096=(cj35*py);
IkReal x1097=((10000.0)*pz);
IkReal x1098=(px*sj35);
IkReal x1099=((2617.0)*cj38);
CheckValue<IkReal> x1100 = IKatan2WithCheck(IkReal(((((-1.0)*x1096*x1097))+(((-811.7934)*x1095))+(((-684.8689)*cj38*x1095))+((x1097*x1098)))),((962.2404)+(((-1.0)*pz*x1097))+(((684.8689)*(cj38*cj38)))+(((1623.5868)*cj38))),IKFAST_ATAN2_MAGTHRESH);
if(!x1100.valid){
continue;
}
CheckValue<IkReal> x1101=IKPowWithIntegerCheck(IKsign(((((-3102.0)*x1096))+(((-2617.0)*pz*x1095))+(((3102.0)*x1098))+(((-1.0)*x1096*x1099))+((x1098*x1099)))),-1);
if(!x1101.valid){
continue;
}
j36array[0]=((-1.5707963267949)+(x1100.value)+(((1.5707963267949)*(x1101.value))));
sj36array[0]=IKsin(j36array[0]);
cj36array[0]=IKcos(j36array[0]);
if( j36array[0] > IKPI )
{
    j36array[0]-=IK2PI;
}
else if( j36array[0] < -IKPI )
{    j36array[0]+=IK2PI;
}
j36valid[0] = true;
for(int ij36 = 0; ij36 < 1; ++ij36)
{
if( !j36valid[ij36] )
{
    continue;
}
_ij36[0] = ij36; _ij36[1] = -1;
for(int iij36 = ij36+1; iij36 < 1; ++iij36)
{
if( j36valid[iij36] && IKabs(cj36array[ij36]-cj36array[iij36]) < IKFAST_SOLUTION_THRESH && IKabs(sj36array[ij36]-sj36array[iij36]) < IKFAST_SOLUTION_THRESH )
{
    j36valid[iij36]=false; _ij36[1] = iij36; break; 
}
}
j36 = j36array[ij36]; cj36 = cj36array[ij36]; sj36 = sj36array[ij36];
{
IkReal evalcond[6];
IkReal x1102=IKsin(j36);
IkReal x1103=IKcos(j36);
IkReal x1104=((0.2617)*sj38);
IkReal x1105=((0.2617)*cj38);
IkReal x1106=((1.0)*pz);
IkReal x1107=(py*sj35);
IkReal x1108=((1.0)*cj37);
IkReal x1109=(px*sj35);
IkReal x1110=(cj35*py);
IkReal x1111=(cj35*px);
IkReal x1112=(sj37*x1103);
IkReal x1113=(pz*x1102);
IkReal x1114=((0.6204)*x1103);
IkReal x1115=(sj37*x1102);
evalcond[0]=(((x1102*x1105))+((x1104*x1112))+(((0.3102)*x1102))+(((-1.0)*x1106)));
evalcond[1]=((-0.3102)+x1113+(((-1.0)*x1103*x1110))+(((-1.0)*x1105))+((x1103*x1109)));
evalcond[2]=((-0.02773715)+((x1109*x1114))+(((0.6204)*x1113))+(((-1.0)*pp))+(((-1.0)*x1110*x1114)));
evalcond[3]=((((-1.0)*x1103*x1105))+x1109+(((-0.3102)*x1103))+(((-1.0)*x1110))+((x1104*x1115)));
evalcond[4]=(((sj37*x1111))+((sj37*x1107))+(((-1.0)*cj37*x1103*x1106))+(((-1.0)*x1102*x1108*x1110))+((cj37*x1102*x1109)));
evalcond[5]=(((x1109*x1115))+(((-1.0)*x1110*x1115))+x1104+(((-1.0)*x1108*x1111))+(((-1.0)*x1107*x1108))+(((-1.0)*x1106*x1112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x126=((1.0)*sj37);
IkReal x127=(sj36*sj38);
IkReal x128=(cj36*cj38);
IkReal x129=(cj37*sj35);
IkReal x130=((1.0)*sj36);
IkReal x131=(cj36*cj37);
IkReal x132=((1.0)*sj38);
IkReal x133=(cj35*cj37);
IkReal x134=(cj36*sj38);
IkReal x135=((1.0)*sj35);
IkReal x136=((-1.0)*sj38);
IkReal x137=((((-1.0)*sj35*x126))+((sj36*x133)));
IkReal x138=(((cj38*sj36*sj37))+x134);
IkReal x139=((((-1.0)*x127))+((sj37*x128)));
IkReal x140=((((-1.0)*x126*x127))+x128);
IkReal x141=(cj35*x140);
IkReal x142=(sj35*x140);
IkReal x143=((((-1.0)*x129*x130))+(((-1.0)*cj35*x126)));
IkReal x144=((((-1.0)*x126*x134))+(((-1.0)*cj38*x130)));
IkReal x145=(((cj38*x129))+((cj35*x138)));
IkReal x146=((((-1.0)*x135*x138))+((cj38*x133)));
IkReal x147=(x141+(((-1.0)*x129*x132)));
IkReal x148=((((-1.0)*x142))+((x133*x136)));
new_r00=(((r00*x143))+((r20*x131))+((r10*x137)));
new_r01=(((r01*x143))+((r21*x131))+((r11*x137)));
new_r02=(((r22*x131))+((r12*x137))+((r02*x143)));
new_r10=(((r00*x146))+((r20*x139))+((r10*x145)));
new_r11=(((r01*x146))+((r21*x139))+((r11*x145)));
new_r12=(((r22*x139))+((r02*x146))+((r12*x145)));
new_r20=(((r20*x144))+((r00*x148))+((r10*x147)));
new_r21=(((r21*x144))+((r01*(((((-1.0)*x132*x133))+(((-1.0)*x135*x140))))))+((r11*((((x129*x136))+x141)))));
new_r22=(((r02*x148))+((r22*x144))+((r12*x147)));
{
IkReal j40array[2], cj40array[2], sj40array[2];
bool j40valid[2]={false};
_nj40 = 2;
sj40array[0]=((-1.0)*new_r22);
if( sj40array[0] >= -1-IKFAST_SINCOS_THRESH && sj40array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j40valid[0] = j40valid[1] = true;
    j40array[0] = IKasin(sj40array[0]);
    cj40array[0] = IKcos(j40array[0]);
    sj40array[1] = sj40array[0];
    j40array[1] = j40array[0] > 0 ? (IKPI-j40array[0]) : (-IKPI-j40array[0]);
    cj40array[1] = -cj40array[0];
}
else if( isnan(sj40array[0]) )
{
    // probably any value will work
    j40valid[0] = true;
    cj40array[0] = 1; sj40array[0] = 0; j40array[0] = 0;
}
for(int ij40 = 0; ij40 < 2; ++ij40)
{
if( !j40valid[ij40] )
{
    continue;
}
_ij40[0] = ij40; _ij40[1] = -1;
for(int iij40 = ij40+1; iij40 < 2; ++iij40)
{
if( j40valid[iij40] && IKabs(cj40array[ij40]-cj40array[iij40]) < IKFAST_SOLUTION_THRESH && IKabs(sj40array[ij40]-sj40array[iij40]) < IKFAST_SOLUTION_THRESH )
{
    j40valid[iij40]=false; _ij40[1] = iij40; break; 
}
}
j40 = j40array[ij40]; cj40 = cj40array[ij40]; sj40 = sj40array[ij40];

{
IkReal j39eval[2];
IkReal x149=((1.0)*sj37);
IkReal x150=(sj36*sj38);
IkReal x151=(cj36*cj38);
IkReal x152=(cj37*sj35);
IkReal x153=((1.0)*sj36);
IkReal x154=(cj36*cj37);
IkReal x155=((1.0)*sj38);
IkReal x156=(cj35*cj37);
IkReal x157=(cj36*sj38);
IkReal x158=((1.0)*sj35);
IkReal x159=((-1.0)*sj38);
IkReal x160=x137;
IkReal x161=x138;
IkReal x162=x139;
IkReal x163=(x151+(((-1.0)*x149*x150)));
IkReal x164=(cj35*x163);
IkReal x165=(sj35*x163);
IkReal x166=x143;
IkReal x167=x144;
IkReal x168=(((cj35*x161))+((cj38*x152)));
IkReal x169=((((-1.0)*x158*x161))+((cj38*x156)));
IkReal x170=(x164+(((-1.0)*x152*x155)));
IkReal x171=((((-1.0)*x165))+((x156*x159)));
new_r00=(((r00*x166))+((r20*x154))+((r10*x160)));
new_r01=(((r01*x166))+((r21*x154))+((r11*x160)));
new_r02=(((r12*x160))+((r22*x154))+((r02*x166)));
new_r10=(((r00*x169))+((r20*x162))+((r10*x168)));
new_r11=(((r01*x169))+((r21*x162))+((r11*x168)));
new_r12=(((r22*x162))+((r12*x168))+((r02*x169)));
new_r20=(((r00*x171))+((r20*x167))+((r10*x170)));
new_r21=(((r11*((((x152*x159))+x164))))+((r21*x167))+((r01*(((((-1.0)*x158*x163))+(((-1.0)*x155*x156)))))));
new_r22=(((r22*x167))+((r12*x170))+((r02*x171)));
j39eval[0]=cj40;
j39eval[1]=IKsign(cj40);
if( IKabs(j39eval[0]) < 0.0000010000000000  || IKabs(j39eval[1]) < 0.0000010000000000  )
{
{
IkReal j39eval[1];
IkReal x172=((1.0)*sj37);
IkReal x173=(sj36*sj38);
IkReal x174=(cj36*cj38);
IkReal x175=(cj37*sj35);
IkReal x176=((1.0)*sj36);
IkReal x177=(cj36*cj37);
IkReal x178=((1.0)*sj38);
IkReal x179=(cj35*cj37);
IkReal x180=(cj36*sj38);
IkReal x181=((1.0)*sj35);
IkReal x182=((-1.0)*sj38);
IkReal x183=x137;
IkReal x184=x138;
IkReal x185=x139;
IkReal x186=(x174+(((-1.0)*x172*x173)));
IkReal x187=(cj35*x186);
IkReal x188=(sj35*x186);
IkReal x189=x143;
IkReal x190=x144;
IkReal x191=(((cj38*x175))+((cj35*x184)));
IkReal x192=(((cj38*x179))+(((-1.0)*x181*x184)));
IkReal x193=((((-1.0)*x175*x178))+x187);
IkReal x194=(((x179*x182))+(((-1.0)*x188)));
new_r00=(((r00*x189))+((r20*x177))+((r10*x183)));
new_r01=(((r01*x189))+((r21*x177))+((r11*x183)));
new_r02=(((r22*x177))+((r12*x183))+((r02*x189)));
new_r10=(((r00*x192))+((r20*x185))+((r10*x191)));
new_r11=(((r01*x192))+((r21*x185))+((r11*x191)));
new_r12=(((r12*x191))+((r02*x192))+((r22*x185)));
new_r20=(((r00*x194))+((r20*x190))+((r10*x193)));
new_r21=(((r21*x190))+((r11*((((x175*x182))+x187))))+((r01*(((((-1.0)*x178*x179))+(((-1.0)*x181*x186)))))));
new_r22=(((r12*x193))+((r22*x190))+((r02*x194)));
j39eval[0]=cj40;
if( IKabs(j39eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j40)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
evalcond[5]=new_r12;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j39array[2], cj39array[2], sj39array[2];
bool j39valid[2]={false};
_nj39 = 2;
CheckValue<IkReal> x196 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x196.valid){
continue;
}
IkReal x195=x196.value;
j39array[0]=((-1.0)*x195);
sj39array[0]=IKsin(j39array[0]);
cj39array[0]=IKcos(j39array[0]);
j39array[1]=((3.14159265358979)+(((-1.0)*x195)));
sj39array[1]=IKsin(j39array[1]);
cj39array[1]=IKcos(j39array[1]);
if( j39array[0] > IKPI )
{
    j39array[0]-=IK2PI;
}
else if( j39array[0] < -IKPI )
{    j39array[0]+=IK2PI;
}
j39valid[0] = true;
if( j39array[1] > IKPI )
{
    j39array[1]-=IK2PI;
}
else if( j39array[1] < -IKPI )
{    j39array[1]+=IK2PI;
}
j39valid[1] = true;
for(int ij39 = 0; ij39 < 2; ++ij39)
{
if( !j39valid[ij39] )
{
    continue;
}
_ij39[0] = ij39; _ij39[1] = -1;
for(int iij39 = ij39+1; iij39 < 2; ++iij39)
{
if( j39valid[iij39] && IKabs(cj39array[ij39]-cj39array[iij39]) < IKFAST_SOLUTION_THRESH && IKabs(sj39array[ij39]-sj39array[iij39]) < IKFAST_SOLUTION_THRESH )
{
    j39valid[iij39]=false; _ij39[1] = iij39; break; 
}
}
j39 = j39array[ij39]; cj39 = cj39array[ij39]; sj39 = sj39array[ij39];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j39))))+((new_r12*(IKcos(j39)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j41array[1], cj41array[1], sj41array[1];
bool j41valid[1]={false};
_nj41 = 1;
IkReal x197=((1.0)*cj39);
if( IKabs(((((-1.0)*new_r11*sj39))+(((-1.0)*new_r01*x197)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj39))+(((-1.0)*new_r11*x197)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj39))+(((-1.0)*new_r01*x197))))+IKsqr((((new_r01*sj39))+(((-1.0)*new_r11*x197))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j41array[0]=IKatan2(((((-1.0)*new_r11*sj39))+(((-1.0)*new_r01*x197))), (((new_r01*sj39))+(((-1.0)*new_r11*x197))));
sj41array[0]=IKsin(j41array[0]);
cj41array[0]=IKcos(j41array[0]);
if( j41array[0] > IKPI )
{
    j41array[0]-=IK2PI;
}
else if( j41array[0] < -IKPI )
{    j41array[0]+=IK2PI;
}
j41valid[0] = true;
for(int ij41 = 0; ij41 < 1; ++ij41)
{
if( !j41valid[ij41] )
{
    continue;
}
_ij41[0] = ij41; _ij41[1] = -1;
for(int iij41 = ij41+1; iij41 < 1; ++iij41)
{
if( j41valid[iij41] && IKabs(cj41array[ij41]-cj41array[iij41]) < IKFAST_SOLUTION_THRESH && IKabs(sj41array[ij41]-sj41array[iij41]) < IKFAST_SOLUTION_THRESH )
{
    j41valid[iij41]=false; _ij41[1] = iij41; break; 
}
}
j41 = j41array[ij41]; cj41 = cj41array[ij41]; sj41 = sj41array[ij41];
{
IkReal evalcond[8];
IkReal x198=IKsin(j41);
IkReal x199=IKcos(j41);
IkReal x200=((1.0)*sj39);
IkReal x201=(cj39*x198);
IkReal x202=(cj39*x199);
IkReal x203=(x199*x200);
evalcond[0]=(((cj39*new_r01))+((new_r11*sj39))+x198);
evalcond[1]=((((-1.0)*new_r00*x200))+x198+((cj39*new_r10)));
evalcond[2]=(x199+(((-1.0)*new_r01*x200))+((cj39*new_r11)));
evalcond[3]=(((cj39*new_r00))+(((-1.0)*x199))+((new_r10*sj39)));
evalcond[4]=(x202+((sj39*x198))+new_r11);
evalcond[5]=((((-1.0)*x203))+x201+new_r01);
evalcond[6]=((((-1.0)*x203))+x201+new_r10);
evalcond[7]=((((-1.0)*x198*x200))+new_r00+(((-1.0)*x202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j35;
vinfos[0].indices[0] = _ij35[0];
vinfos[0].indices[1] = _ij35[1];
vinfos[0].maxsolutions = _nj35;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j36;
vinfos[1].indices[0] = _ij36[0];
vinfos[1].indices[1] = _ij36[1];
vinfos[1].maxsolutions = _nj36;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j37;
vinfos[2].indices[0] = _ij37[0];
vinfos[2].indices[1] = _ij37[1];
vinfos[2].maxsolutions = _nj37;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j38;
vinfos[3].indices[0] = _ij38[0];
vinfos[3].indices[1] = _ij38[1];
vinfos[3].maxsolutions = _nj38;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j39;
vinfos[4].indices[0] = _ij39[0];
vinfos[4].indices[1] = _ij39[1];
vinfos[4].maxsolutions = _nj39;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j40;
vinfos[5].indices[0] = _ij40[0];
vinfos[5].indices[1] = _ij40[1];
vinfos[5].maxsolutions = _nj40;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j41;
vinfos[6].indices[0] = _ij41[0];
vinfos[6].indices[1] = _ij41[1];
vinfos[6].maxsolutions = _nj41;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j40)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
evalcond[5]=new_r12;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j39array[2], cj39array[2], sj39array[2];
bool j39valid[2]={false};
_nj39 = 2;
CheckValue<IkReal> x205 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x205.valid){
continue;
}
IkReal x204=x205.value;
j39array[0]=((-1.0)*x204);
sj39array[0]=IKsin(j39array[0]);
cj39array[0]=IKcos(j39array[0]);
j39array[1]=((3.14159265358979)+(((-1.0)*x204)));
sj39array[1]=IKsin(j39array[1]);
cj39array[1]=IKcos(j39array[1]);
if( j39array[0] > IKPI )
{
    j39array[0]-=IK2PI;
}
else if( j39array[0] < -IKPI )
{    j39array[0]+=IK2PI;
}
j39valid[0] = true;
if( j39array[1] > IKPI )
{
    j39array[1]-=IK2PI;
}
else if( j39array[1] < -IKPI )
{    j39array[1]+=IK2PI;
}
j39valid[1] = true;
for(int ij39 = 0; ij39 < 2; ++ij39)
{
if( !j39valid[ij39] )
{
    continue;
}
_ij39[0] = ij39; _ij39[1] = -1;
for(int iij39 = ij39+1; iij39 < 2; ++iij39)
{
if( j39valid[iij39] && IKabs(cj39array[ij39]-cj39array[iij39]) < IKFAST_SOLUTION_THRESH && IKabs(sj39array[ij39]-sj39array[iij39]) < IKFAST_SOLUTION_THRESH )
{
    j39valid[iij39]=false; _ij39[1] = iij39; break; 
}
}
j39 = j39array[ij39]; cj39 = cj39array[ij39]; sj39 = sj39array[ij39];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j39))))+((new_r12*(IKcos(j39)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j41array[1], cj41array[1], sj41array[1];
bool j41valid[1]={false};
_nj41 = 1;
IkReal x206=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj39*x206))+(((-1.0)*new_r11*sj39)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj39*x206))+((cj39*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj39*x206))+(((-1.0)*new_r11*sj39))))+IKsqr(((((-1.0)*sj39*x206))+((cj39*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j41array[0]=IKatan2(((((-1.0)*cj39*x206))+(((-1.0)*new_r11*sj39))), ((((-1.0)*sj39*x206))+((cj39*new_r11))));
sj41array[0]=IKsin(j41array[0]);
cj41array[0]=IKcos(j41array[0]);
if( j41array[0] > IKPI )
{
    j41array[0]-=IK2PI;
}
else if( j41array[0] < -IKPI )
{    j41array[0]+=IK2PI;
}
j41valid[0] = true;
for(int ij41 = 0; ij41 < 1; ++ij41)
{
if( !j41valid[ij41] )
{
    continue;
}
_ij41[0] = ij41; _ij41[1] = -1;
for(int iij41 = ij41+1; iij41 < 1; ++iij41)
{
if( j41valid[iij41] && IKabs(cj41array[ij41]-cj41array[iij41]) < IKFAST_SOLUTION_THRESH && IKabs(sj41array[ij41]-sj41array[iij41]) < IKFAST_SOLUTION_THRESH )
{
    j41valid[iij41]=false; _ij41[1] = iij41; break; 
}
}
j41 = j41array[ij41]; cj41 = cj41array[ij41]; sj41 = sj41array[ij41];
{
IkReal evalcond[8];
IkReal x207=IKcos(j41);
IkReal x208=IKsin(j41);
IkReal x209=((1.0)*sj39);
IkReal x210=((1.0)*x207);
IkReal x211=(sj39*x208);
IkReal x212=(cj39*x208);
IkReal x213=(cj39*x210);
evalcond[0]=(((cj39*new_r01))+((new_r11*sj39))+x208);
evalcond[1]=(((cj39*new_r00))+((new_r10*sj39))+(((-1.0)*x210)));
evalcond[2]=(((sj39*x207))+x212+new_r01);
evalcond[3]=(x211+new_r11+(((-1.0)*x213)));
evalcond[4]=((((-1.0)*new_r00*x209))+(((-1.0)*x208))+((cj39*new_r10)));
evalcond[5]=((((-1.0)*x210))+(((-1.0)*new_r01*x209))+((cj39*new_r11)));
evalcond[6]=(x211+new_r00+(((-1.0)*x213)));
evalcond[7]=((((-1.0)*x207*x209))+(((-1.0)*x212))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j35;
vinfos[0].indices[0] = _ij35[0];
vinfos[0].indices[1] = _ij35[1];
vinfos[0].maxsolutions = _nj35;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j36;
vinfos[1].indices[0] = _ij36[0];
vinfos[1].indices[1] = _ij36[1];
vinfos[1].maxsolutions = _nj36;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j37;
vinfos[2].indices[0] = _ij37[0];
vinfos[2].indices[1] = _ij37[1];
vinfos[2].maxsolutions = _nj37;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j38;
vinfos[3].indices[0] = _ij38[0];
vinfos[3].indices[1] = _ij38[1];
vinfos[3].maxsolutions = _nj38;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j39;
vinfos[4].indices[0] = _ij39[0];
vinfos[4].indices[1] = _ij39[1];
vinfos[4].maxsolutions = _nj39;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j40;
vinfos[5].indices[0] = _ij40[0];
vinfos[5].indices[1] = _ij40[1];
vinfos[5].maxsolutions = _nj40;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j41;
vinfos[6].indices[0] = _ij41[0];
vinfos[6].indices[1] = _ij41[1];
vinfos[6].maxsolutions = _nj41;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j39, j41]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j39array[1], cj39array[1], sj39array[1];
bool j39valid[1]={false};
_nj39 = 1;
CheckValue<IkReal> x215=IKPowWithIntegerCheck(cj40,-1);
if(!x215.valid){
continue;
}
IkReal x214=x215.value;
CheckValue<IkReal> x216=IKPowWithIntegerCheck(new_r12,-1);
if(!x216.valid){
continue;
}
CheckValue<IkReal> x217=IKPowWithIntegerCheck(x214,-2);
if(!x217.valid){
continue;
}
if( IKabs(((-1.0)*new_r02*x214)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x214*(x216.value)*(((((-1.0)*(new_r02*new_r02)))+(x217.value))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r02*x214))+IKsqr((x214*(x216.value)*(((((-1.0)*(new_r02*new_r02)))+(x217.value)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j39array[0]=IKatan2(((-1.0)*new_r02*x214), (x214*(x216.value)*(((((-1.0)*(new_r02*new_r02)))+(x217.value)))));
sj39array[0]=IKsin(j39array[0]);
cj39array[0]=IKcos(j39array[0]);
if( j39array[0] > IKPI )
{
    j39array[0]-=IK2PI;
}
else if( j39array[0] < -IKPI )
{    j39array[0]+=IK2PI;
}
j39valid[0] = true;
for(int ij39 = 0; ij39 < 1; ++ij39)
{
if( !j39valid[ij39] )
{
    continue;
}
_ij39[0] = ij39; _ij39[1] = -1;
for(int iij39 = ij39+1; iij39 < 1; ++iij39)
{
if( j39valid[iij39] && IKabs(cj39array[ij39]-cj39array[iij39]) < IKFAST_SOLUTION_THRESH && IKabs(sj39array[ij39]-sj39array[iij39]) < IKFAST_SOLUTION_THRESH )
{
    j39valid[iij39]=false; _ij39[1] = iij39; break; 
}
}
j39 = j39array[ij39]; cj39 = cj39array[ij39]; sj39 = sj39array[ij39];
{
IkReal evalcond[8];
IkReal x218=IKsin(j39);
IkReal x219=IKcos(j39);
IkReal x220=((1.0)*cj40);
IkReal x221=(cj40*x218);
IkReal x222=(new_r12*x219);
IkReal x223=((1.0)*new_r02*x218);
evalcond[0]=(x221+new_r02);
evalcond[1]=((((-1.0)*x219*x220))+new_r12);
evalcond[2]=(((new_r02*x219))+((new_r12*x218)));
evalcond[3]=(x222+(((-1.0)*x223))+(((-1.0)*x220)));
evalcond[4]=(((new_r20*sj40))+((new_r00*x221))+(((-1.0)*new_r10*x219*x220)));
evalcond[5]=(((new_r01*x221))+(((-1.0)*new_r11*x219*x220))+((new_r21*sj40)));
evalcond[6]=(((sj40*x222))+((cj40*new_r22))+(((-1.0)*sj40*x223)));
evalcond[7]=((1.0)+((new_r02*x221))+(((-1.0)*x220*x222))+((new_r22*sj40)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j41eval[2];
IkReal x224=((1.0)*sj37);
IkReal x225=(sj36*sj38);
IkReal x226=(cj36*cj38);
IkReal x227=(cj37*sj35);
IkReal x228=((1.0)*sj36);
IkReal x229=(cj36*cj37);
IkReal x230=((1.0)*sj38);
IkReal x231=(cj35*cj37);
IkReal x232=(cj36*sj38);
IkReal x233=((1.0)*sj35);
IkReal x234=((-1.0)*sj38);
IkReal x235=x137;
IkReal x236=x138;
IkReal x237=x139;
IkReal x238=((((-1.0)*x224*x225))+x226);
IkReal x239=(cj35*x238);
IkReal x240=(sj35*x238);
IkReal x241=x143;
IkReal x242=x144;
IkReal x243=(((cj35*x236))+((cj38*x227)));
IkReal x244=((((-1.0)*x233*x236))+((cj38*x231)));
IkReal x245=((((-1.0)*x227*x230))+x239);
IkReal x246=((((-1.0)*x240))+((x231*x234)));
new_r00=(((r20*x229))+((r10*x235))+((r00*x241)));
new_r01=(((r11*x235))+((r01*x241))+((r21*x229)));
new_r02=(((r02*x241))+((r22*x229))+((r12*x235)));
new_r10=(((r20*x237))+((r00*x244))+((r10*x243)));
new_r11=(((r01*x244))+((r11*x243))+((r21*x237)));
new_r12=(((r02*x244))+((r12*x243))+((r22*x237)));
new_r20=(((r00*x246))+((r10*x245))+((r20*x242)));
new_r21=(((r01*(((((-1.0)*x233*x238))+(((-1.0)*x230*x231))))))+((r21*x242))+((r11*((x239+((x227*x234)))))));
new_r22=(((r02*x246))+((r22*x242))+((r12*x245)));
j41eval[0]=cj40;
j41eval[1]=IKsign(cj40);
if( IKabs(j41eval[0]) < 0.0000010000000000  || IKabs(j41eval[1]) < 0.0000010000000000  )
{
{
IkReal j41eval[2];
IkReal x247=((1.0)*sj37);
IkReal x248=(sj36*sj38);
IkReal x249=(cj36*cj38);
IkReal x250=(cj37*sj35);
IkReal x251=((1.0)*sj36);
IkReal x252=(cj36*cj37);
IkReal x253=((1.0)*sj38);
IkReal x254=(cj35*cj37);
IkReal x255=(cj36*sj38);
IkReal x256=((1.0)*sj35);
IkReal x257=((-1.0)*sj38);
IkReal x258=x137;
IkReal x259=x138;
IkReal x260=x139;
IkReal x261=(x249+(((-1.0)*x247*x248)));
IkReal x262=(cj35*x261);
IkReal x263=(sj35*x261);
IkReal x264=x143;
IkReal x265=x144;
IkReal x266=(((cj38*x250))+((cj35*x259)));
IkReal x267=(((cj38*x254))+(((-1.0)*x256*x259)));
IkReal x268=((((-1.0)*x250*x253))+x262);
IkReal x269=((((-1.0)*x263))+((x254*x257)));
new_r00=(((r20*x252))+((r10*x258))+((r00*x264)));
new_r01=(((r21*x252))+((r11*x258))+((r01*x264)));
new_r02=(((r02*x264))+((r12*x258))+((r22*x252)));
new_r10=(((r00*x267))+((r10*x266))+((r20*x260)));
new_r11=(((r21*x260))+((r11*x266))+((r01*x267)));
new_r12=(((r22*x260))+((r02*x267))+((r12*x266)));
new_r20=(((r00*x269))+((r10*x268))+((r20*x265)));
new_r21=(((r01*(((((-1.0)*x256*x261))+(((-1.0)*x253*x254))))))+((r21*x265))+((r11*((((x250*x257))+x262)))));
new_r22=(((r22*x265))+((r02*x269))+((r12*x268)));
j41eval[0]=cj40;
j41eval[1]=sj39;
if( IKabs(j41eval[0]) < 0.0000010000000000  || IKabs(j41eval[1]) < 0.0000010000000000  )
{
{
IkReal j41eval[3];
IkReal x270=((1.0)*sj37);
IkReal x271=(sj36*sj38);
IkReal x272=(cj36*cj38);
IkReal x273=(cj37*sj35);
IkReal x274=((1.0)*sj36);
IkReal x275=(cj36*cj37);
IkReal x276=((1.0)*sj38);
IkReal x277=(cj35*cj37);
IkReal x278=(cj36*sj38);
IkReal x279=((1.0)*sj35);
IkReal x280=((-1.0)*sj38);
IkReal x281=x137;
IkReal x282=x138;
IkReal x283=x139;
IkReal x284=(x272+(((-1.0)*x270*x271)));
IkReal x285=(cj35*x284);
IkReal x286=(sj35*x284);
IkReal x287=x143;
IkReal x288=x144;
IkReal x289=(((cj35*x282))+((cj38*x273)));
IkReal x290=(((cj38*x277))+(((-1.0)*x279*x282)));
IkReal x291=((((-1.0)*x273*x276))+x285);
IkReal x292=((((-1.0)*x286))+((x277*x280)));
new_r00=(((r00*x287))+((r10*x281))+((r20*x275)));
new_r01=(((r01*x287))+((r11*x281))+((r21*x275)));
new_r02=(((r22*x275))+((r02*x287))+((r12*x281)));
new_r10=(((r10*x289))+((r00*x290))+((r20*x283)));
new_r11=(((r21*x283))+((r11*x289))+((r01*x290)));
new_r12=(((r22*x283))+((r12*x289))+((r02*x290)));
new_r20=(((r00*x292))+((r10*x291))+((r20*x288)));
new_r21=(((r21*x288))+((r01*(((((-1.0)*x279*x284))+(((-1.0)*x276*x277))))))+((r11*((x285+((x273*x280)))))));
new_r22=(((r12*x291))+((r22*x288))+((r02*x292)));
j41eval[0]=cj40;
j41eval[1]=cj39;
j41eval[2]=sj40;
if( IKabs(j41eval[0]) < 0.0000010000000000  || IKabs(j41eval[1]) < 0.0000010000000000  || IKabs(j41eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x293=(new_r12*sj39);
IkReal x294=((1.0)*new_r02);
IkReal x295=((((-1.0)*sj39*x294))+((cj39*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j40)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
evalcond[5]=new_r12;
evalcond[6]=(((cj39*new_r02))+x293);
evalcond[7]=((((-1.0)*x293))+(((-1.0)*cj39*x294)));
evalcond[8]=x295;
evalcond[9]=x295;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j41array[1], cj41array[1], sj41array[1];
bool j41valid[1]={false};
_nj41 = 1;
IkReal x296=((1.0)*cj39);
if( IKabs(((((-1.0)*new_r01*x296))+(((-1.0)*new_r11*sj39)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r11*x296))+((new_r01*sj39)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x296))+(((-1.0)*new_r11*sj39))))+IKsqr(((((-1.0)*new_r11*x296))+((new_r01*sj39))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j41array[0]=IKatan2(((((-1.0)*new_r01*x296))+(((-1.0)*new_r11*sj39))), ((((-1.0)*new_r11*x296))+((new_r01*sj39))));
sj41array[0]=IKsin(j41array[0]);
cj41array[0]=IKcos(j41array[0]);
if( j41array[0] > IKPI )
{
    j41array[0]-=IK2PI;
}
else if( j41array[0] < -IKPI )
{    j41array[0]+=IK2PI;
}
j41valid[0] = true;
for(int ij41 = 0; ij41 < 1; ++ij41)
{
if( !j41valid[ij41] )
{
    continue;
}
_ij41[0] = ij41; _ij41[1] = -1;
for(int iij41 = ij41+1; iij41 < 1; ++iij41)
{
if( j41valid[iij41] && IKabs(cj41array[ij41]-cj41array[iij41]) < IKFAST_SOLUTION_THRESH && IKabs(sj41array[ij41]-sj41array[iij41]) < IKFAST_SOLUTION_THRESH )
{
    j41valid[iij41]=false; _ij41[1] = iij41; break; 
}
}
j41 = j41array[ij41]; cj41 = cj41array[ij41]; sj41 = sj41array[ij41];
{
IkReal evalcond[8];
IkReal x297=IKsin(j41);
IkReal x298=IKcos(j41);
IkReal x299=((1.0)*sj39);
IkReal x300=(cj39*x297);
IkReal x301=(cj39*x298);
IkReal x302=(x298*x299);
evalcond[0]=(((cj39*new_r01))+((new_r11*sj39))+x297);
evalcond[1]=(x297+(((-1.0)*new_r00*x299))+((cj39*new_r10)));
evalcond[2]=((((-1.0)*new_r01*x299))+x298+((cj39*new_r11)));
evalcond[3]=((((-1.0)*x298))+((cj39*new_r00))+((new_r10*sj39)));
evalcond[4]=(((sj39*x297))+x301+new_r11);
evalcond[5]=(x300+new_r01+(((-1.0)*x302)));
evalcond[6]=(x300+new_r10+(((-1.0)*x302)));
evalcond[7]=((((-1.0)*x297*x299))+(((-1.0)*x301))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j35;
vinfos[0].indices[0] = _ij35[0];
vinfos[0].indices[1] = _ij35[1];
vinfos[0].maxsolutions = _nj35;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j36;
vinfos[1].indices[0] = _ij36[0];
vinfos[1].indices[1] = _ij36[1];
vinfos[1].maxsolutions = _nj36;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j37;
vinfos[2].indices[0] = _ij37[0];
vinfos[2].indices[1] = _ij37[1];
vinfos[2].maxsolutions = _nj37;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j38;
vinfos[3].indices[0] = _ij38[0];
vinfos[3].indices[1] = _ij38[1];
vinfos[3].maxsolutions = _nj38;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j39;
vinfos[4].indices[0] = _ij39[0];
vinfos[4].indices[1] = _ij39[1];
vinfos[4].maxsolutions = _nj39;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j40;
vinfos[5].indices[0] = _ij40[0];
vinfos[5].indices[1] = _ij40[1];
vinfos[5].maxsolutions = _nj40;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j41;
vinfos[6].indices[0] = _ij41[0];
vinfos[6].indices[1] = _ij41[1];
vinfos[6].maxsolutions = _nj41;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x303=(new_r12*sj39);
IkReal x304=(new_r02*sj39);
IkReal x305=(cj39*new_r12);
IkReal x306=(cj39*new_r02);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j40)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
evalcond[5]=new_r12;
evalcond[6]=(x306+x303);
evalcond[7]=((((-1.0)*x306))+(((-1.0)*x303)));
evalcond[8]=((((-1.0)*x304))+x305);
evalcond[9]=((((-1.0)*x305))+x304);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j41array[1], cj41array[1], sj41array[1];
bool j41valid[1]={false};
_nj41 = 1;
IkReal x307=((1.0)*new_r01);
if( IKabs(((((-1.0)*new_r11*sj39))+(((-1.0)*cj39*x307)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj39*x307))+((cj39*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj39))+(((-1.0)*cj39*x307))))+IKsqr(((((-1.0)*sj39*x307))+((cj39*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j41array[0]=IKatan2(((((-1.0)*new_r11*sj39))+(((-1.0)*cj39*x307))), ((((-1.0)*sj39*x307))+((cj39*new_r11))));
sj41array[0]=IKsin(j41array[0]);
cj41array[0]=IKcos(j41array[0]);
if( j41array[0] > IKPI )
{
    j41array[0]-=IK2PI;
}
else if( j41array[0] < -IKPI )
{    j41array[0]+=IK2PI;
}
j41valid[0] = true;
for(int ij41 = 0; ij41 < 1; ++ij41)
{
if( !j41valid[ij41] )
{
    continue;
}
_ij41[0] = ij41; _ij41[1] = -1;
for(int iij41 = ij41+1; iij41 < 1; ++iij41)
{
if( j41valid[iij41] && IKabs(cj41array[ij41]-cj41array[iij41]) < IKFAST_SOLUTION_THRESH && IKabs(sj41array[ij41]-sj41array[iij41]) < IKFAST_SOLUTION_THRESH )
{
    j41valid[iij41]=false; _ij41[1] = iij41; break; 
}
}
j41 = j41array[ij41]; cj41 = cj41array[ij41]; sj41 = sj41array[ij41];
{
IkReal evalcond[8];
IkReal x308=IKcos(j41);
IkReal x309=IKsin(j41);
IkReal x310=((1.0)*sj39);
IkReal x311=((1.0)*x308);
IkReal x312=(sj39*x309);
IkReal x313=(cj39*x309);
IkReal x314=(cj39*x311);
evalcond[0]=(((cj39*new_r01))+((new_r11*sj39))+x309);
evalcond[1]=(((cj39*new_r00))+((new_r10*sj39))+(((-1.0)*x311)));
evalcond[2]=(x313+((sj39*x308))+new_r01);
evalcond[3]=(x312+(((-1.0)*x314))+new_r11);
evalcond[4]=((((-1.0)*new_r00*x310))+(((-1.0)*x309))+((cj39*new_r10)));
evalcond[5]=((((-1.0)*x311))+(((-1.0)*new_r01*x310))+((cj39*new_r11)));
evalcond[6]=(x312+(((-1.0)*x314))+new_r00);
evalcond[7]=((((-1.0)*x308*x310))+(((-1.0)*x313))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j35;
vinfos[0].indices[0] = _ij35[0];
vinfos[0].indices[1] = _ij35[1];
vinfos[0].maxsolutions = _nj35;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j36;
vinfos[1].indices[0] = _ij36[0];
vinfos[1].indices[1] = _ij36[1];
vinfos[1].maxsolutions = _nj36;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j37;
vinfos[2].indices[0] = _ij37[0];
vinfos[2].indices[1] = _ij37[1];
vinfos[2].maxsolutions = _nj37;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j38;
vinfos[3].indices[0] = _ij38[0];
vinfos[3].indices[1] = _ij38[1];
vinfos[3].maxsolutions = _nj38;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j39;
vinfos[4].indices[0] = _ij39[0];
vinfos[4].indices[1] = _ij39[1];
vinfos[4].maxsolutions = _nj39;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j40;
vinfos[5].indices[0] = _ij40[0];
vinfos[5].indices[1] = _ij40[1];
vinfos[5].maxsolutions = _nj40;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j41;
vinfos[6].indices[0] = _ij41[0];
vinfos[6].indices[1] = _ij41[1];
vinfos[6].maxsolutions = _nj41;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x315=(sj40+new_r22);
IkReal x316=((1.0)*new_r02);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j39)))), 6.28318530717959)));
evalcond[1]=x315;
evalcond[2]=x315;
evalcond[3]=(cj40+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*x316))+(((-1.0)*cj40)));
evalcond[6]=(((new_r20*sj40))+((cj40*new_r00)));
evalcond[7]=(((new_r21*sj40))+((cj40*new_r01)));
evalcond[8]=(((cj40*new_r22))+(((-1.0)*sj40*x316)));
evalcond[9]=((1.0)+((new_r22*sj40))+((cj40*new_r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j41array[1], cj41array[1], sj41array[1];
bool j41valid[1]={false};
_nj41 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j41array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj41array[0]=IKsin(j41array[0]);
cj41array[0]=IKcos(j41array[0]);
if( j41array[0] > IKPI )
{
    j41array[0]-=IK2PI;
}
else if( j41array[0] < -IKPI )
{    j41array[0]+=IK2PI;
}
j41valid[0] = true;
for(int ij41 = 0; ij41 < 1; ++ij41)
{
if( !j41valid[ij41] )
{
    continue;
}
_ij41[0] = ij41; _ij41[1] = -1;
for(int iij41 = ij41+1; iij41 < 1; ++iij41)
{
if( j41valid[iij41] && IKabs(cj41array[ij41]-cj41array[iij41]) < IKFAST_SOLUTION_THRESH && IKabs(sj41array[ij41]-sj41array[iij41]) < IKFAST_SOLUTION_THRESH )
{
    j41valid[iij41]=false; _ij41[1] = iij41; break; 
}
}
j41 = j41array[ij41]; cj41 = cj41array[ij41]; sj41 = sj41array[ij41];
{
IkReal evalcond[8];
IkReal x317=IKsin(j41);
IkReal x318=IKcos(j41);
IkReal x319=((1.0)*new_r02);
IkReal x320=((1.0)*x318);
evalcond[0]=(x317+new_r11);
evalcond[1]=((((-1.0)*x320))+new_r10);
evalcond[2]=(new_r20+(((-1.0)*x317*x319)));
evalcond[3]=((((-1.0)*x318*x319))+new_r21);
evalcond[4]=((((-1.0)*new_r22*x317))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*new_r22*x320))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r20*x319))+((new_r00*new_r22))+x317);
evalcond[7]=((((-1.0)*new_r21*x319))+((new_r01*new_r22))+x318);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j35;
vinfos[0].indices[0] = _ij35[0];
vinfos[0].indices[1] = _ij35[1];
vinfos[0].maxsolutions = _nj35;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j36;
vinfos[1].indices[0] = _ij36[0];
vinfos[1].indices[1] = _ij36[1];
vinfos[1].maxsolutions = _nj36;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j37;
vinfos[2].indices[0] = _ij37[0];
vinfos[2].indices[1] = _ij37[1];
vinfos[2].maxsolutions = _nj37;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j38;
vinfos[3].indices[0] = _ij38[0];
vinfos[3].indices[1] = _ij38[1];
vinfos[3].maxsolutions = _nj38;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j39;
vinfos[4].indices[0] = _ij39[0];
vinfos[4].indices[1] = _ij39[1];
vinfos[4].maxsolutions = _nj39;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j40;
vinfos[5].indices[0] = _ij40[0];
vinfos[5].indices[1] = _ij40[1];
vinfos[5].maxsolutions = _nj40;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j41;
vinfos[6].indices[0] = _ij41[0];
vinfos[6].indices[1] = _ij41[1];
vinfos[6].maxsolutions = _nj41;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x321=(sj40+new_r22);
IkReal x322=((((-1.0)*cj40))+new_r02);
IkReal x323=((1.0)*cj40);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j39)))), 6.28318530717959)));
evalcond[1]=x321;
evalcond[2]=x321;
evalcond[3]=x322;
evalcond[4]=new_r12;
evalcond[5]=x322;
evalcond[6]=(((new_r20*sj40))+(((-1.0)*new_r00*x323)));
evalcond[7]=(((new_r21*sj40))+(((-1.0)*new_r01*x323)));
evalcond[8]=(((cj40*new_r22))+((new_r02*sj40)));
evalcond[9]=((1.0)+(((-1.0)*new_r02*x323))+((new_r22*sj40)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j41array[1], cj41array[1], sj41array[1];
bool j41valid[1]={false};
_nj41 = 1;
CheckValue<IkReal> x324=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x324.valid){
continue;
}
CheckValue<IkReal> x325 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),((-1.0)*new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x325.valid){
continue;
}
j41array[0]=((-1.5707963267949)+(((1.5707963267949)*(x324.value)))+(x325.value));
sj41array[0]=IKsin(j41array[0]);
cj41array[0]=IKcos(j41array[0]);
if( j41array[0] > IKPI )
{
    j41array[0]-=IK2PI;
}
else if( j41array[0] < -IKPI )
{    j41array[0]+=IK2PI;
}
j41valid[0] = true;
for(int ij41 = 0; ij41 < 1; ++ij41)
{
if( !j41valid[ij41] )
{
    continue;
}
_ij41[0] = ij41; _ij41[1] = -1;
for(int iij41 = ij41+1; iij41 < 1; ++iij41)
{
if( j41valid[iij41] && IKabs(cj41array[ij41]-cj41array[iij41]) < IKFAST_SOLUTION_THRESH && IKabs(sj41array[ij41]-sj41array[iij41]) < IKFAST_SOLUTION_THRESH )
{
    j41valid[iij41]=false; _ij41[1] = iij41; break; 
}
}
j41 = j41array[ij41]; cj41 = cj41array[ij41]; sj41 = sj41array[ij41];
{
IkReal evalcond[8];
IkReal x326=IKsin(j41);
IkReal x327=IKcos(j41);
IkReal x328=((1.0)*new_r22);
evalcond[0]=(new_r20+((new_r02*x326)));
evalcond[1]=(new_r21+((new_r02*x327)));
evalcond[2]=(x326+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x326*x328))+new_r00);
evalcond[4]=((((-1.0)*x327*x328))+new_r01);
evalcond[5]=((((-1.0)*x327))+(((-1.0)*new_r10)));
evalcond[6]=(x326+(((-1.0)*new_r00*x328))+((new_r02*new_r20)));
evalcond[7]=(x327+(((-1.0)*new_r01*x328))+((new_r02*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j35;
vinfos[0].indices[0] = _ij35[0];
vinfos[0].indices[1] = _ij35[1];
vinfos[0].maxsolutions = _nj35;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j36;
vinfos[1].indices[0] = _ij36[0];
vinfos[1].indices[1] = _ij36[1];
vinfos[1].maxsolutions = _nj36;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j37;
vinfos[2].indices[0] = _ij37[0];
vinfos[2].indices[1] = _ij37[1];
vinfos[2].maxsolutions = _nj37;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j38;
vinfos[3].indices[0] = _ij38[0];
vinfos[3].indices[1] = _ij38[1];
vinfos[3].maxsolutions = _nj38;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j39;
vinfos[4].indices[0] = _ij39[0];
vinfos[4].indices[1] = _ij39[1];
vinfos[4].maxsolutions = _nj39;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j40;
vinfos[5].indices[0] = _ij40[0];
vinfos[5].indices[1] = _ij40[1];
vinfos[5].maxsolutions = _nj40;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j41;
vinfos[6].indices[0] = _ij41[0];
vinfos[6].indices[1] = _ij41[1];
vinfos[6].maxsolutions = _nj41;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x329=(new_r12*sj39);
IkReal x330=((1.0)*sj39);
IkReal x331=((1.0)*cj39);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j40))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(sj39+new_r02);
evalcond[3]=((((-1.0)*x331))+new_r12);
evalcond[4]=(((cj39*new_r02))+x329);
evalcond[5]=((((-1.0)*x329))+(((-1.0)*new_r02*x331)));
evalcond[6]=((-1.0)+(((-1.0)*new_r02*x330))+((cj39*new_r12)));
evalcond[7]=((((-1.0)*new_r00*x330))+((cj39*new_r10)));
evalcond[8]=((((-1.0)*new_r01*x330))+((cj39*new_r11)));
evalcond[9]=((((-1.0)*new_r10*x331))+((new_r00*sj39)));
evalcond[10]=((((-1.0)*new_r11*x331))+((new_r01*sj39)));
evalcond[11]=((1.0)+((new_r02*sj39))+(((-1.0)*new_r12*x331)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j41array[1], cj41array[1], sj41array[1];
bool j41valid[1]={false};
_nj41 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j41array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj41array[0]=IKsin(j41array[0]);
cj41array[0]=IKcos(j41array[0]);
if( j41array[0] > IKPI )
{
    j41array[0]-=IK2PI;
}
else if( j41array[0] < -IKPI )
{    j41array[0]+=IK2PI;
}
j41valid[0] = true;
for(int ij41 = 0; ij41 < 1; ++ij41)
{
if( !j41valid[ij41] )
{
    continue;
}
_ij41[0] = ij41; _ij41[1] = -1;
for(int iij41 = ij41+1; iij41 < 1; ++iij41)
{
if( j41valid[iij41] && IKabs(cj41array[ij41]-cj41array[iij41]) < IKFAST_SOLUTION_THRESH && IKabs(sj41array[ij41]-sj41array[iij41]) < IKFAST_SOLUTION_THRESH )
{
    j41valid[iij41]=false; _ij41[1] = iij41; break; 
}
}
j41 = j41array[ij41]; cj41 = cj41array[ij41]; sj41 = sj41array[ij41];
{
IkReal evalcond[8];
IkReal x332=IKsin(j41);
IkReal x333=IKcos(j41);
IkReal x334=((1.0)*new_r02);
IkReal x335=((1.0)*x333);
evalcond[0]=(x332+new_r20);
evalcond[1]=(x333+new_r21);
evalcond[2]=(((new_r12*x332))+new_r01);
evalcond[3]=(((new_r02*x333))+new_r10);
evalcond[4]=((((-1.0)*x332*x334))+new_r11);
evalcond[5]=((((-1.0)*new_r12*x335))+new_r00);
evalcond[6]=((((-1.0)*new_r11*x334))+((new_r01*new_r12))+x332);
evalcond[7]=((((-1.0)*new_r10*x334))+((new_r00*new_r12))+(((-1.0)*x335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j35;
vinfos[0].indices[0] = _ij35[0];
vinfos[0].indices[1] = _ij35[1];
vinfos[0].maxsolutions = _nj35;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j36;
vinfos[1].indices[0] = _ij36[0];
vinfos[1].indices[1] = _ij36[1];
vinfos[1].maxsolutions = _nj36;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j37;
vinfos[2].indices[0] = _ij37[0];
vinfos[2].indices[1] = _ij37[1];
vinfos[2].maxsolutions = _nj37;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j38;
vinfos[3].indices[0] = _ij38[0];
vinfos[3].indices[1] = _ij38[1];
vinfos[3].maxsolutions = _nj38;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j39;
vinfos[4].indices[0] = _ij39[0];
vinfos[4].indices[1] = _ij39[1];
vinfos[4].maxsolutions = _nj39;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j40;
vinfos[5].indices[0] = _ij40[0];
vinfos[5].indices[1] = _ij40[1];
vinfos[5].maxsolutions = _nj40;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j41;
vinfos[6].indices[0] = _ij41[0];
vinfos[6].indices[1] = _ij41[1];
vinfos[6].maxsolutions = _nj41;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x336=(new_r12*sj39);
IkReal x337=((1.0)*sj39);
IkReal x338=(cj39*new_r02);
IkReal x339=((((-1.0)*new_r00*x337))+((cj39*new_r10)));
IkReal x340=((((-1.0)*new_r01*x337))+((cj39*new_r11)));
IkReal x341=((1.0)+(((-1.0)*new_r02*x337))+((cj39*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j40)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x337))+new_r02);
evalcond[3]=(cj39+new_r12);
evalcond[4]=(x338+x336);
evalcond[5]=((((-1.0)*x336))+(((-1.0)*x338)));
evalcond[6]=x341;
evalcond[7]=x339;
evalcond[8]=x340;
evalcond[9]=x339;
evalcond[10]=x340;
evalcond[11]=x341;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j41array[1], cj41array[1], sj41array[1];
bool j41valid[1]={false};
_nj41 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j41array[0]=IKatan2(new_r20, new_r21);
sj41array[0]=IKsin(j41array[0]);
cj41array[0]=IKcos(j41array[0]);
if( j41array[0] > IKPI )
{
    j41array[0]-=IK2PI;
}
else if( j41array[0] < -IKPI )
{    j41array[0]+=IK2PI;
}
j41valid[0] = true;
for(int ij41 = 0; ij41 < 1; ++ij41)
{
if( !j41valid[ij41] )
{
    continue;
}
_ij41[0] = ij41; _ij41[1] = -1;
for(int iij41 = ij41+1; iij41 < 1; ++iij41)
{
if( j41valid[iij41] && IKabs(cj41array[ij41]-cj41array[iij41]) < IKFAST_SOLUTION_THRESH && IKabs(sj41array[ij41]-sj41array[iij41]) < IKFAST_SOLUTION_THRESH )
{
    j41valid[iij41]=false; _ij41[1] = iij41; break; 
}
}
j41 = j41array[ij41]; cj41 = cj41array[ij41]; sj41 = sj41array[ij41];
{
IkReal evalcond[8];
IkReal x342=IKsin(j41);
IkReal x343=IKcos(j41);
IkReal x344=((1.0)*new_r12);
IkReal x345=((1.0)*x343);
evalcond[0]=(new_r20+(((-1.0)*x342)));
evalcond[1]=(new_r21+(((-1.0)*x345)));
evalcond[2]=(((new_r02*x342))+new_r11);
evalcond[3]=(((new_r12*x343))+new_r00);
evalcond[4]=(new_r01+(((-1.0)*x342*x344)));
evalcond[5]=((((-1.0)*new_r02*x345))+new_r10);
evalcond[6]=(x342+((new_r02*new_r11))+(((-1.0)*new_r01*x344)));
evalcond[7]=((((-1.0)*new_r00*x344))+((new_r02*new_r10))+(((-1.0)*x345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j35;
vinfos[0].indices[0] = _ij35[0];
vinfos[0].indices[1] = _ij35[1];
vinfos[0].maxsolutions = _nj35;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j36;
vinfos[1].indices[0] = _ij36[0];
vinfos[1].indices[1] = _ij36[1];
vinfos[1].maxsolutions = _nj36;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j37;
vinfos[2].indices[0] = _ij37[0];
vinfos[2].indices[1] = _ij37[1];
vinfos[2].maxsolutions = _nj37;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j38;
vinfos[3].indices[0] = _ij38[0];
vinfos[3].indices[1] = _ij38[1];
vinfos[3].maxsolutions = _nj38;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j39;
vinfos[4].indices[0] = _ij39[0];
vinfos[4].indices[1] = _ij39[1];
vinfos[4].maxsolutions = _nj39;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j40;
vinfos[5].indices[0] = _ij40[0];
vinfos[5].indices[1] = _ij40[1];
vinfos[5].maxsolutions = _nj40;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j41;
vinfos[6].indices[0] = _ij41[0];
vinfos[6].indices[1] = _ij41[1];
vinfos[6].maxsolutions = _nj41;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x346=(sj40+new_r22);
IkReal x347=((((-1.0)*cj40))+new_r12);
IkReal x348=((1.0)*cj40);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j39))), 6.28318530717959)));
evalcond[1]=x346;
evalcond[2]=x346;
evalcond[3]=new_r02;
evalcond[4]=x347;
evalcond[5]=x347;
evalcond[6]=(((new_r20*sj40))+(((-1.0)*new_r10*x348)));
evalcond[7]=((((-1.0)*new_r11*x348))+((new_r21*sj40)));
evalcond[8]=(((new_r12*sj40))+((cj40*new_r22)));
evalcond[9]=((1.0)+(((-1.0)*new_r12*x348))+((new_r22*sj40)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j41array[1], cj41array[1], sj41array[1];
bool j41valid[1]={false};
_nj41 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j41array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj41array[0]=IKsin(j41array[0]);
cj41array[0]=IKcos(j41array[0]);
if( j41array[0] > IKPI )
{
    j41array[0]-=IK2PI;
}
else if( j41array[0] < -IKPI )
{    j41array[0]+=IK2PI;
}
j41valid[0] = true;
for(int ij41 = 0; ij41 < 1; ++ij41)
{
if( !j41valid[ij41] )
{
    continue;
}
_ij41[0] = ij41; _ij41[1] = -1;
for(int iij41 = ij41+1; iij41 < 1; ++iij41)
{
if( j41valid[iij41] && IKabs(cj41array[ij41]-cj41array[iij41]) < IKFAST_SOLUTION_THRESH && IKabs(sj41array[ij41]-sj41array[iij41]) < IKFAST_SOLUTION_THRESH )
{
    j41valid[iij41]=false; _ij41[1] = iij41; break; 
}
}
j41 = j41array[ij41]; cj41 = cj41array[ij41]; sj41 = sj41array[ij41];
{
IkReal evalcond[8];
IkReal x349=IKsin(j41);
IkReal x350=IKcos(j41);
IkReal x351=((1.0)*new_r22);
evalcond[0]=(x349+new_r01);
evalcond[1]=(((new_r12*x349))+new_r20);
evalcond[2]=(new_r21+((new_r12*x350)));
evalcond[3]=((((-1.0)*x350))+new_r00);
evalcond[4]=(new_r11+(((-1.0)*x350*x351)));
evalcond[5]=((((-1.0)*x349*x351))+new_r10);
evalcond[6]=(x349+((new_r12*new_r20))+(((-1.0)*new_r10*x351)));
evalcond[7]=(x350+((new_r12*new_r21))+(((-1.0)*new_r11*x351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j35;
vinfos[0].indices[0] = _ij35[0];
vinfos[0].indices[1] = _ij35[1];
vinfos[0].maxsolutions = _nj35;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j36;
vinfos[1].indices[0] = _ij36[0];
vinfos[1].indices[1] = _ij36[1];
vinfos[1].maxsolutions = _nj36;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j37;
vinfos[2].indices[0] = _ij37[0];
vinfos[2].indices[1] = _ij37[1];
vinfos[2].maxsolutions = _nj37;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j38;
vinfos[3].indices[0] = _ij38[0];
vinfos[3].indices[1] = _ij38[1];
vinfos[3].maxsolutions = _nj38;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j39;
vinfos[4].indices[0] = _ij39[0];
vinfos[4].indices[1] = _ij39[1];
vinfos[4].maxsolutions = _nj39;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j40;
vinfos[5].indices[0] = _ij40[0];
vinfos[5].indices[1] = _ij40[1];
vinfos[5].maxsolutions = _nj40;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j41;
vinfos[6].indices[0] = _ij41[0];
vinfos[6].indices[1] = _ij41[1];
vinfos[6].maxsolutions = _nj41;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x352=(sj40+new_r22);
IkReal x353=((1.0)*new_r12);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j39)))), 6.28318530717959)));
evalcond[1]=x352;
evalcond[2]=x352;
evalcond[3]=new_r02;
evalcond[4]=(cj40+new_r12);
evalcond[5]=((((-1.0)*x353))+(((-1.0)*cj40)));
evalcond[6]=(((cj40*new_r10))+((new_r20*sj40)));
evalcond[7]=(((cj40*new_r11))+((new_r21*sj40)));
evalcond[8]=((((-1.0)*sj40*x353))+((cj40*new_r22)));
evalcond[9]=((1.0)+((cj40*new_r12))+((new_r22*sj40)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j41array[1], cj41array[1], sj41array[1];
bool j41valid[1]={false};
_nj41 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j41array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj41array[0]=IKsin(j41array[0]);
cj41array[0]=IKcos(j41array[0]);
if( j41array[0] > IKPI )
{
    j41array[0]-=IK2PI;
}
else if( j41array[0] < -IKPI )
{    j41array[0]+=IK2PI;
}
j41valid[0] = true;
for(int ij41 = 0; ij41 < 1; ++ij41)
{
if( !j41valid[ij41] )
{
    continue;
}
_ij41[0] = ij41; _ij41[1] = -1;
for(int iij41 = ij41+1; iij41 < 1; ++iij41)
{
if( j41valid[iij41] && IKabs(cj41array[ij41]-cj41array[iij41]) < IKFAST_SOLUTION_THRESH && IKabs(sj41array[ij41]-sj41array[iij41]) < IKFAST_SOLUTION_THRESH )
{
    j41valid[iij41]=false; _ij41[1] = iij41; break; 
}
}
j41 = j41array[ij41]; cj41 = cj41array[ij41]; sj41 = sj41array[ij41];
{
IkReal evalcond[8];
IkReal x354=IKsin(j41);
IkReal x355=IKcos(j41);
IkReal x356=((1.0)*new_r12);
evalcond[0]=(x354+(((-1.0)*new_r01)));
evalcond[1]=(((new_r22*x355))+new_r11);
evalcond[2]=(new_r20+(((-1.0)*x354*x356)));
evalcond[3]=(new_r21+(((-1.0)*x355*x356)));
evalcond[4]=((((-1.0)*x355))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*new_r22*x354))+(((-1.0)*new_r10)));
evalcond[6]=(x354+((new_r10*new_r22))+(((-1.0)*new_r20*x356)));
evalcond[7]=(x355+((new_r11*new_r22))+(((-1.0)*new_r21*x356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j35;
vinfos[0].indices[0] = _ij35[0];
vinfos[0].indices[1] = _ij35[1];
vinfos[0].maxsolutions = _nj35;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j36;
vinfos[1].indices[0] = _ij36[0];
vinfos[1].indices[1] = _ij36[1];
vinfos[1].maxsolutions = _nj36;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j37;
vinfos[2].indices[0] = _ij37[0];
vinfos[2].indices[1] = _ij37[1];
vinfos[2].maxsolutions = _nj37;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j38;
vinfos[3].indices[0] = _ij38[0];
vinfos[3].indices[1] = _ij38[1];
vinfos[3].maxsolutions = _nj38;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j39;
vinfos[4].indices[0] = _ij39[0];
vinfos[4].indices[1] = _ij39[1];
vinfos[4].maxsolutions = _nj39;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j40;
vinfos[5].indices[0] = _ij40[0];
vinfos[5].indices[1] = _ij40[1];
vinfos[5].maxsolutions = _nj40;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j41;
vinfos[6].indices[0] = _ij41[0];
vinfos[6].indices[1] = _ij41[1];
vinfos[6].maxsolutions = _nj41;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j41]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j41array[1], cj41array[1], sj41array[1];
bool j41valid[1]={false};
_nj41 = 1;
CheckValue<IkReal> x358=IKPowWithIntegerCheck(cj40,-1);
if(!x358.valid){
continue;
}
IkReal x357=x358.value;
CheckValue<IkReal> x359=IKPowWithIntegerCheck(cj39,-1);
if(!x359.valid){
continue;
}
CheckValue<IkReal> x360=IKPowWithIntegerCheck(sj40,-1);
if(!x360.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*x357)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x357*(x359.value)*(x360.value)*((((new_r20*sj39))+(((-1.0)*cj40*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*x357))+IKsqr((x357*(x359.value)*(x360.value)*((((new_r20*sj39))+(((-1.0)*cj40*new_r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j41array[0]=IKatan2(((-1.0)*new_r20*x357), (x357*(x359.value)*(x360.value)*((((new_r20*sj39))+(((-1.0)*cj40*new_r11))))));
sj41array[0]=IKsin(j41array[0]);
cj41array[0]=IKcos(j41array[0]);
if( j41array[0] > IKPI )
{
    j41array[0]-=IK2PI;
}
else if( j41array[0] < -IKPI )
{    j41array[0]+=IK2PI;
}
j41valid[0] = true;
for(int ij41 = 0; ij41 < 1; ++ij41)
{
if( !j41valid[ij41] )
{
    continue;
}
_ij41[0] = ij41; _ij41[1] = -1;
for(int iij41 = ij41+1; iij41 < 1; ++iij41)
{
if( j41valid[iij41] && IKabs(cj41array[ij41]-cj41array[iij41]) < IKFAST_SOLUTION_THRESH && IKabs(sj41array[ij41]-sj41array[iij41]) < IKFAST_SOLUTION_THRESH )
{
    j41valid[iij41]=false; _ij41[1] = iij41; break; 
}
}
j41 = j41array[ij41]; cj41 = cj41array[ij41]; sj41 = sj41array[ij41];
{
IkReal evalcond[12];
IkReal x361=IKsin(j41);
IkReal x362=IKcos(j41);
IkReal x363=((1.0)*sj39);
IkReal x364=(cj39*new_r10);
IkReal x365=(cj39*new_r11);
IkReal x366=(sj40*x362);
IkReal x367=(sj40*x361);
IkReal x368=((1.0)*x362);
evalcond[0]=(((cj40*x361))+new_r20);
evalcond[1]=(((cj40*x362))+new_r21);
evalcond[2]=(((cj39*new_r01))+((new_r11*sj39))+x361);
evalcond[3]=(((cj39*new_r00))+(((-1.0)*x368))+((new_r10*sj39)));
evalcond[4]=(((sj39*x361))+new_r11+((cj39*x366)));
evalcond[5]=((((-1.0)*new_r00*x363))+x364+x367);
evalcond[6]=(x365+x366+(((-1.0)*new_r01*x363)));
evalcond[7]=((((-1.0)*x363*x366))+new_r01+((cj39*x361)));
evalcond[8]=((((-1.0)*x362*x363))+new_r10+((cj39*x367)));
evalcond[9]=((((-1.0)*x363*x367))+(((-1.0)*cj39*x368))+new_r00);
evalcond[10]=((((-1.0)*new_r00*sj40*x363))+((sj40*x364))+((cj40*new_r20))+x361);
evalcond[11]=(((sj40*x365))+((cj40*new_r21))+(((-1.0)*new_r01*sj40*x363))+x362);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j35;
vinfos[0].indices[0] = _ij35[0];
vinfos[0].indices[1] = _ij35[1];
vinfos[0].maxsolutions = _nj35;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j36;
vinfos[1].indices[0] = _ij36[0];
vinfos[1].indices[1] = _ij36[1];
vinfos[1].maxsolutions = _nj36;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j37;
vinfos[2].indices[0] = _ij37[0];
vinfos[2].indices[1] = _ij37[1];
vinfos[2].maxsolutions = _nj37;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j38;
vinfos[3].indices[0] = _ij38[0];
vinfos[3].indices[1] = _ij38[1];
vinfos[3].maxsolutions = _nj38;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j39;
vinfos[4].indices[0] = _ij39[0];
vinfos[4].indices[1] = _ij39[1];
vinfos[4].maxsolutions = _nj39;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j40;
vinfos[5].indices[0] = _ij40[0];
vinfos[5].indices[1] = _ij40[1];
vinfos[5].maxsolutions = _nj40;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j41;
vinfos[6].indices[0] = _ij41[0];
vinfos[6].indices[1] = _ij41[1];
vinfos[6].maxsolutions = _nj41;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j41array[1], cj41array[1], sj41array[1];
bool j41valid[1]={false};
_nj41 = 1;
CheckValue<IkReal> x370=IKPowWithIntegerCheck(cj40,-1);
if(!x370.valid){
continue;
}
IkReal x369=x370.value;
CheckValue<IkReal> x371=IKPowWithIntegerCheck(sj39,-1);
if(!x371.valid){
continue;
}
if( IKabs((x369*(x371.value)*((((cj39*new_r21*sj40))+(((-1.0)*cj40*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*x369)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x369*(x371.value)*((((cj39*new_r21*sj40))+(((-1.0)*cj40*new_r11))))))+IKsqr(((-1.0)*new_r21*x369))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j41array[0]=IKatan2((x369*(x371.value)*((((cj39*new_r21*sj40))+(((-1.0)*cj40*new_r11))))), ((-1.0)*new_r21*x369));
sj41array[0]=IKsin(j41array[0]);
cj41array[0]=IKcos(j41array[0]);
if( j41array[0] > IKPI )
{
    j41array[0]-=IK2PI;
}
else if( j41array[0] < -IKPI )
{    j41array[0]+=IK2PI;
}
j41valid[0] = true;
for(int ij41 = 0; ij41 < 1; ++ij41)
{
if( !j41valid[ij41] )
{
    continue;
}
_ij41[0] = ij41; _ij41[1] = -1;
for(int iij41 = ij41+1; iij41 < 1; ++iij41)
{
if( j41valid[iij41] && IKabs(cj41array[ij41]-cj41array[iij41]) < IKFAST_SOLUTION_THRESH && IKabs(sj41array[ij41]-sj41array[iij41]) < IKFAST_SOLUTION_THRESH )
{
    j41valid[iij41]=false; _ij41[1] = iij41; break; 
}
}
j41 = j41array[ij41]; cj41 = cj41array[ij41]; sj41 = sj41array[ij41];
{
IkReal evalcond[12];
IkReal x372=IKsin(j41);
IkReal x373=IKcos(j41);
IkReal x374=((1.0)*sj39);
IkReal x375=(cj39*new_r10);
IkReal x376=(cj39*new_r11);
IkReal x377=(sj40*x373);
IkReal x378=(sj40*x372);
IkReal x379=((1.0)*x373);
evalcond[0]=(((cj40*x372))+new_r20);
evalcond[1]=(((cj40*x373))+new_r21);
evalcond[2]=(((cj39*new_r01))+((new_r11*sj39))+x372);
evalcond[3]=(((cj39*new_r00))+(((-1.0)*x379))+((new_r10*sj39)));
evalcond[4]=(((sj39*x372))+new_r11+((cj39*x377)));
evalcond[5]=((((-1.0)*new_r00*x374))+x378+x375);
evalcond[6]=(x377+x376+(((-1.0)*new_r01*x374)));
evalcond[7]=((((-1.0)*x374*x377))+new_r01+((cj39*x372)));
evalcond[8]=((((-1.0)*x373*x374))+new_r10+((cj39*x378)));
evalcond[9]=((((-1.0)*cj39*x379))+(((-1.0)*x374*x378))+new_r00);
evalcond[10]=((((-1.0)*new_r00*sj40*x374))+((sj40*x375))+((cj40*new_r20))+x372);
evalcond[11]=(((sj40*x376))+((cj40*new_r21))+x373+(((-1.0)*new_r01*sj40*x374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j35;
vinfos[0].indices[0] = _ij35[0];
vinfos[0].indices[1] = _ij35[1];
vinfos[0].maxsolutions = _nj35;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j36;
vinfos[1].indices[0] = _ij36[0];
vinfos[1].indices[1] = _ij36[1];
vinfos[1].maxsolutions = _nj36;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j37;
vinfos[2].indices[0] = _ij37[0];
vinfos[2].indices[1] = _ij37[1];
vinfos[2].maxsolutions = _nj37;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j38;
vinfos[3].indices[0] = _ij38[0];
vinfos[3].indices[1] = _ij38[1];
vinfos[3].maxsolutions = _nj38;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j39;
vinfos[4].indices[0] = _ij39[0];
vinfos[4].indices[1] = _ij39[1];
vinfos[4].maxsolutions = _nj39;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j40;
vinfos[5].indices[0] = _ij40[0];
vinfos[5].indices[1] = _ij40[1];
vinfos[5].maxsolutions = _nj40;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j41;
vinfos[6].indices[0] = _ij41[0];
vinfos[6].indices[1] = _ij41[1];
vinfos[6].maxsolutions = _nj41;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j41array[1], cj41array[1], sj41array[1];
bool j41valid[1]={false};
_nj41 = 1;
CheckValue<IkReal> x380=IKPowWithIntegerCheck(IKsign(cj40),-1);
if(!x380.valid){
continue;
}
CheckValue<IkReal> x381 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),((-1.0)*new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x381.valid){
continue;
}
j41array[0]=((-1.5707963267949)+(((1.5707963267949)*(x380.value)))+(x381.value));
sj41array[0]=IKsin(j41array[0]);
cj41array[0]=IKcos(j41array[0]);
if( j41array[0] > IKPI )
{
    j41array[0]-=IK2PI;
}
else if( j41array[0] < -IKPI )
{    j41array[0]+=IK2PI;
}
j41valid[0] = true;
for(int ij41 = 0; ij41 < 1; ++ij41)
{
if( !j41valid[ij41] )
{
    continue;
}
_ij41[0] = ij41; _ij41[1] = -1;
for(int iij41 = ij41+1; iij41 < 1; ++iij41)
{
if( j41valid[iij41] && IKabs(cj41array[ij41]-cj41array[iij41]) < IKFAST_SOLUTION_THRESH && IKabs(sj41array[ij41]-sj41array[iij41]) < IKFAST_SOLUTION_THRESH )
{
    j41valid[iij41]=false; _ij41[1] = iij41; break; 
}
}
j41 = j41array[ij41]; cj41 = cj41array[ij41]; sj41 = sj41array[ij41];
{
IkReal evalcond[12];
IkReal x382=IKsin(j41);
IkReal x383=IKcos(j41);
IkReal x384=((1.0)*sj39);
IkReal x385=(cj39*new_r10);
IkReal x386=(cj39*new_r11);
IkReal x387=(sj40*x383);
IkReal x388=(sj40*x382);
IkReal x389=((1.0)*x383);
evalcond[0]=(new_r20+((cj40*x382)));
evalcond[1]=(new_r21+((cj40*x383)));
evalcond[2]=(((cj39*new_r01))+((new_r11*sj39))+x382);
evalcond[3]=(((cj39*new_r00))+((new_r10*sj39))+(((-1.0)*x389)));
evalcond[4]=(((cj39*x387))+((sj39*x382))+new_r11);
evalcond[5]=((((-1.0)*new_r00*x384))+x385+x388);
evalcond[6]=((((-1.0)*new_r01*x384))+x386+x387);
evalcond[7]=((((-1.0)*x384*x387))+((cj39*x382))+new_r01);
evalcond[8]=(((cj39*x388))+new_r10+(((-1.0)*x383*x384)));
evalcond[9]=((((-1.0)*cj39*x389))+(((-1.0)*x384*x388))+new_r00);
evalcond[10]=(((cj40*new_r20))+x382+((sj40*x385))+(((-1.0)*new_r00*sj40*x384)));
evalcond[11]=(((cj40*new_r21))+x383+((sj40*x386))+(((-1.0)*new_r01*sj40*x384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j35;
vinfos[0].indices[0] = _ij35[0];
vinfos[0].indices[1] = _ij35[1];
vinfos[0].maxsolutions = _nj35;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j36;
vinfos[1].indices[0] = _ij36[0];
vinfos[1].indices[1] = _ij36[1];
vinfos[1].maxsolutions = _nj36;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j37;
vinfos[2].indices[0] = _ij37[0];
vinfos[2].indices[1] = _ij37[1];
vinfos[2].maxsolutions = _nj37;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j38;
vinfos[3].indices[0] = _ij38[0];
vinfos[3].indices[1] = _ij38[1];
vinfos[3].maxsolutions = _nj38;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j39;
vinfos[4].indices[0] = _ij39[0];
vinfos[4].indices[1] = _ij39[1];
vinfos[4].maxsolutions = _nj39;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j40;
vinfos[5].indices[0] = _ij40[0];
vinfos[5].indices[1] = _ij40[1];
vinfos[5].maxsolutions = _nj40;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j41;
vinfos[6].indices[0] = _ij41[0];
vinfos[6].indices[1] = _ij41[1];
vinfos[6].maxsolutions = _nj41;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j39array[1], cj39array[1], sj39array[1];
bool j39valid[1]={false};
_nj39 = 1;
CheckValue<IkReal> x390=IKPowWithIntegerCheck(IKsign(cj40),-1);
if(!x390.valid){
continue;
}
CheckValue<IkReal> x391 = IKatan2WithCheck(IkReal(((-1.0)*new_r02)),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x391.valid){
continue;
}
j39array[0]=((-1.5707963267949)+(((1.5707963267949)*(x390.value)))+(x391.value));
sj39array[0]=IKsin(j39array[0]);
cj39array[0]=IKcos(j39array[0]);
if( j39array[0] > IKPI )
{
    j39array[0]-=IK2PI;
}
else if( j39array[0] < -IKPI )
{    j39array[0]+=IK2PI;
}
j39valid[0] = true;
for(int ij39 = 0; ij39 < 1; ++ij39)
{
if( !j39valid[ij39] )
{
    continue;
}
_ij39[0] = ij39; _ij39[1] = -1;
for(int iij39 = ij39+1; iij39 < 1; ++iij39)
{
if( j39valid[iij39] && IKabs(cj39array[ij39]-cj39array[iij39]) < IKFAST_SOLUTION_THRESH && IKabs(sj39array[ij39]-sj39array[iij39]) < IKFAST_SOLUTION_THRESH )
{
    j39valid[iij39]=false; _ij39[1] = iij39; break; 
}
}
j39 = j39array[ij39]; cj39 = cj39array[ij39]; sj39 = sj39array[ij39];
{
IkReal evalcond[8];
IkReal x392=IKsin(j39);
IkReal x393=IKcos(j39);
IkReal x394=((1.0)*cj40);
IkReal x395=(cj40*x392);
IkReal x396=(new_r12*x393);
IkReal x397=((1.0)*new_r02*x392);
evalcond[0]=(x395+new_r02);
evalcond[1]=(new_r12+(((-1.0)*x393*x394)));
evalcond[2]=(((new_r02*x393))+((new_r12*x392)));
evalcond[3]=((((-1.0)*x394))+(((-1.0)*x397))+x396);
evalcond[4]=(((new_r20*sj40))+(((-1.0)*new_r10*x393*x394))+((new_r00*x395)));
evalcond[5]=(((new_r21*sj40))+((new_r01*x395))+(((-1.0)*new_r11*x393*x394)));
evalcond[6]=(((sj40*x396))+((cj40*new_r22))+(((-1.0)*sj40*x397)));
evalcond[7]=((1.0)+(((-1.0)*x394*x396))+((new_r22*sj40))+((new_r02*x395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j41eval[2];
IkReal x398=((1.0)*sj37);
IkReal x399=(sj36*sj38);
IkReal x400=(cj36*cj38);
IkReal x401=(cj37*sj35);
IkReal x402=((1.0)*sj36);
IkReal x403=(cj36*cj37);
IkReal x404=((1.0)*sj38);
IkReal x405=(cj35*cj37);
IkReal x406=(cj36*sj38);
IkReal x407=((1.0)*sj35);
IkReal x408=((-1.0)*sj38);
IkReal x409=x137;
IkReal x410=x138;
IkReal x411=x139;
IkReal x412=((((-1.0)*x398*x399))+x400);
IkReal x413=(cj35*x412);
IkReal x414=(sj35*x412);
IkReal x415=x143;
IkReal x416=x144;
IkReal x417=(((cj35*x410))+((cj38*x401)));
IkReal x418=((((-1.0)*x407*x410))+((cj38*x405)));
IkReal x419=((((-1.0)*x401*x404))+x413);
IkReal x420=(((x405*x408))+(((-1.0)*x414)));
new_r00=(((r00*x415))+((r10*x409))+((r20*x403)));
new_r01=(((r11*x409))+((r01*x415))+((r21*x403)));
new_r02=(((r22*x403))+((r12*x409))+((r02*x415)));
new_r10=(((r00*x418))+((r20*x411))+((r10*x417)));
new_r11=(((r11*x417))+((r01*x418))+((r21*x411)));
new_r12=(((r12*x417))+((r22*x411))+((r02*x418)));
new_r20=(((r00*x420))+((r20*x416))+((r10*x419)));
new_r21=(((r21*x416))+((r11*((x413+((x401*x408))))))+((r01*(((((-1.0)*x404*x405))+(((-1.0)*x407*x412)))))));
new_r22=(((r12*x419))+((r22*x416))+((r02*x420)));
j41eval[0]=cj40;
j41eval[1]=IKsign(cj40);
if( IKabs(j41eval[0]) < 0.0000010000000000  || IKabs(j41eval[1]) < 0.0000010000000000  )
{
{
IkReal j41eval[2];
IkReal x421=((1.0)*sj37);
IkReal x422=(sj36*sj38);
IkReal x423=(cj36*cj38);
IkReal x424=(cj37*sj35);
IkReal x425=((1.0)*sj36);
IkReal x426=(cj36*cj37);
IkReal x427=((1.0)*sj38);
IkReal x428=(cj35*cj37);
IkReal x429=(cj36*sj38);
IkReal x430=((1.0)*sj35);
IkReal x431=((-1.0)*sj38);
IkReal x432=x137;
IkReal x433=x138;
IkReal x434=x139;
IkReal x435=((((-1.0)*x421*x422))+x423);
IkReal x436=(cj35*x435);
IkReal x437=(sj35*x435);
IkReal x438=x143;
IkReal x439=x144;
IkReal x440=(((cj35*x433))+((cj38*x424)));
IkReal x441=((((-1.0)*x430*x433))+((cj38*x428)));
IkReal x442=(x436+(((-1.0)*x424*x427)));
IkReal x443=((((-1.0)*x437))+((x428*x431)));
new_r00=(((r20*x426))+((r00*x438))+((r10*x432)));
new_r01=(((r21*x426))+((r01*x438))+((r11*x432)));
new_r02=(((r12*x432))+((r02*x438))+((r22*x426)));
new_r10=(((r00*x441))+((r10*x440))+((r20*x434)));
new_r11=(((r21*x434))+((r01*x441))+((r11*x440)));
new_r12=(((r02*x441))+((r22*x434))+((r12*x440)));
new_r20=(((r00*x443))+((r10*x442))+((r20*x439)));
new_r21=(((r21*x439))+((r11*((((x424*x431))+x436))))+((r01*(((((-1.0)*x430*x435))+(((-1.0)*x427*x428)))))));
new_r22=(((r02*x443))+((r22*x439))+((r12*x442)));
j41eval[0]=cj40;
j41eval[1]=sj39;
if( IKabs(j41eval[0]) < 0.0000010000000000  || IKabs(j41eval[1]) < 0.0000010000000000  )
{
{
IkReal j41eval[3];
IkReal x444=((1.0)*sj37);
IkReal x445=(sj36*sj38);
IkReal x446=(cj36*cj38);
IkReal x447=(cj37*sj35);
IkReal x448=((1.0)*sj36);
IkReal x449=(cj36*cj37);
IkReal x450=((1.0)*sj38);
IkReal x451=(cj35*cj37);
IkReal x452=(cj36*sj38);
IkReal x453=((1.0)*sj35);
IkReal x454=((-1.0)*sj38);
IkReal x455=x137;
IkReal x456=x138;
IkReal x457=x139;
IkReal x458=((((-1.0)*x444*x445))+x446);
IkReal x459=(cj35*x458);
IkReal x460=(sj35*x458);
IkReal x461=x143;
IkReal x462=x144;
IkReal x463=(((cj35*x456))+((cj38*x447)));
IkReal x464=(((cj38*x451))+(((-1.0)*x453*x456)));
IkReal x465=((((-1.0)*x447*x450))+x459);
IkReal x466=((((-1.0)*x460))+((x451*x454)));
new_r00=(((r00*x461))+((r20*x449))+((r10*x455)));
new_r01=(((r21*x449))+((r11*x455))+((r01*x461)));
new_r02=(((r22*x449))+((r02*x461))+((r12*x455)));
new_r10=(((r20*x457))+((r00*x464))+((r10*x463)));
new_r11=(((r11*x463))+((r01*x464))+((r21*x457)));
new_r12=(((r12*x463))+((r02*x464))+((r22*x457)));
new_r20=(((r20*x462))+((r00*x466))+((r10*x465)));
new_r21=(((r01*(((((-1.0)*x453*x458))+(((-1.0)*x450*x451))))))+((r21*x462))+((r11*((((x447*x454))+x459)))));
new_r22=(((r22*x462))+((r12*x465))+((r02*x466)));
j41eval[0]=cj40;
j41eval[1]=cj39;
j41eval[2]=sj40;
if( IKabs(j41eval[0]) < 0.0000010000000000  || IKabs(j41eval[1]) < 0.0000010000000000  || IKabs(j41eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x467=(new_r12*sj39);
IkReal x468=((1.0)*new_r02);
IkReal x469=((((-1.0)*sj39*x468))+((cj39*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j40)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
evalcond[5]=new_r12;
evalcond[6]=(((cj39*new_r02))+x467);
evalcond[7]=((((-1.0)*x467))+(((-1.0)*cj39*x468)));
evalcond[8]=x469;
evalcond[9]=x469;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j41array[1], cj41array[1], sj41array[1];
bool j41valid[1]={false};
_nj41 = 1;
IkReal x470=((1.0)*cj39);
if( IKabs(((((-1.0)*new_r11*sj39))+(((-1.0)*new_r01*x470)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj39))+(((-1.0)*new_r11*x470)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj39))+(((-1.0)*new_r01*x470))))+IKsqr((((new_r01*sj39))+(((-1.0)*new_r11*x470))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j41array[0]=IKatan2(((((-1.0)*new_r11*sj39))+(((-1.0)*new_r01*x470))), (((new_r01*sj39))+(((-1.0)*new_r11*x470))));
sj41array[0]=IKsin(j41array[0]);
cj41array[0]=IKcos(j41array[0]);
if( j41array[0] > IKPI )
{
    j41array[0]-=IK2PI;
}
else if( j41array[0] < -IKPI )
{    j41array[0]+=IK2PI;
}
j41valid[0] = true;
for(int ij41 = 0; ij41 < 1; ++ij41)
{
if( !j41valid[ij41] )
{
    continue;
}
_ij41[0] = ij41; _ij41[1] = -1;
for(int iij41 = ij41+1; iij41 < 1; ++iij41)
{
if( j41valid[iij41] && IKabs(cj41array[ij41]-cj41array[iij41]) < IKFAST_SOLUTION_THRESH && IKabs(sj41array[ij41]-sj41array[iij41]) < IKFAST_SOLUTION_THRESH )
{
    j41valid[iij41]=false; _ij41[1] = iij41; break; 
}
}
j41 = j41array[ij41]; cj41 = cj41array[ij41]; sj41 = sj41array[ij41];
{
IkReal evalcond[8];
IkReal x471=IKsin(j41);
IkReal x472=IKcos(j41);
IkReal x473=((1.0)*sj39);
IkReal x474=(cj39*x471);
IkReal x475=(cj39*x472);
IkReal x476=(x472*x473);
evalcond[0]=(((cj39*new_r01))+((new_r11*sj39))+x471);
evalcond[1]=((((-1.0)*new_r00*x473))+x471+((cj39*new_r10)));
evalcond[2]=((((-1.0)*new_r01*x473))+x472+((cj39*new_r11)));
evalcond[3]=(((cj39*new_r00))+(((-1.0)*x472))+((new_r10*sj39)));
evalcond[4]=(((sj39*x471))+x475+new_r11);
evalcond[5]=((((-1.0)*x476))+x474+new_r01);
evalcond[6]=((((-1.0)*x476))+x474+new_r10);
evalcond[7]=((((-1.0)*x475))+(((-1.0)*x471*x473))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j35;
vinfos[0].indices[0] = _ij35[0];
vinfos[0].indices[1] = _ij35[1];
vinfos[0].maxsolutions = _nj35;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j36;
vinfos[1].indices[0] = _ij36[0];
vinfos[1].indices[1] = _ij36[1];
vinfos[1].maxsolutions = _nj36;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j37;
vinfos[2].indices[0] = _ij37[0];
vinfos[2].indices[1] = _ij37[1];
vinfos[2].maxsolutions = _nj37;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j38;
vinfos[3].indices[0] = _ij38[0];
vinfos[3].indices[1] = _ij38[1];
vinfos[3].maxsolutions = _nj38;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j39;
vinfos[4].indices[0] = _ij39[0];
vinfos[4].indices[1] = _ij39[1];
vinfos[4].maxsolutions = _nj39;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j40;
vinfos[5].indices[0] = _ij40[0];
vinfos[5].indices[1] = _ij40[1];
vinfos[5].maxsolutions = _nj40;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j41;
vinfos[6].indices[0] = _ij41[0];
vinfos[6].indices[1] = _ij41[1];
vinfos[6].maxsolutions = _nj41;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x477=(new_r12*sj39);
IkReal x478=(new_r02*sj39);
IkReal x479=(cj39*new_r12);
IkReal x480=(cj39*new_r02);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j40)))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r02;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
evalcond[5]=new_r12;
evalcond[6]=(x480+x477);
evalcond[7]=((((-1.0)*x480))+(((-1.0)*x477)));
evalcond[8]=((((-1.0)*x478))+x479);
evalcond[9]=((((-1.0)*x479))+x478);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j41array[1], cj41array[1], sj41array[1];
bool j41valid[1]={false};
_nj41 = 1;
IkReal x481=((1.0)*new_r01);
if( IKabs(((((-1.0)*new_r11*sj39))+(((-1.0)*cj39*x481)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj39*x481))+((cj39*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj39))+(((-1.0)*cj39*x481))))+IKsqr(((((-1.0)*sj39*x481))+((cj39*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j41array[0]=IKatan2(((((-1.0)*new_r11*sj39))+(((-1.0)*cj39*x481))), ((((-1.0)*sj39*x481))+((cj39*new_r11))));
sj41array[0]=IKsin(j41array[0]);
cj41array[0]=IKcos(j41array[0]);
if( j41array[0] > IKPI )
{
    j41array[0]-=IK2PI;
}
else if( j41array[0] < -IKPI )
{    j41array[0]+=IK2PI;
}
j41valid[0] = true;
for(int ij41 = 0; ij41 < 1; ++ij41)
{
if( !j41valid[ij41] )
{
    continue;
}
_ij41[0] = ij41; _ij41[1] = -1;
for(int iij41 = ij41+1; iij41 < 1; ++iij41)
{
if( j41valid[iij41] && IKabs(cj41array[ij41]-cj41array[iij41]) < IKFAST_SOLUTION_THRESH && IKabs(sj41array[ij41]-sj41array[iij41]) < IKFAST_SOLUTION_THRESH )
{
    j41valid[iij41]=false; _ij41[1] = iij41; break; 
}
}
j41 = j41array[ij41]; cj41 = cj41array[ij41]; sj41 = sj41array[ij41];
{
IkReal evalcond[8];
IkReal x482=IKcos(j41);
IkReal x483=IKsin(j41);
IkReal x484=((1.0)*sj39);
IkReal x485=((1.0)*x482);
IkReal x486=(sj39*x483);
IkReal x487=(cj39*x483);
IkReal x488=(cj39*x485);
evalcond[0]=(((cj39*new_r01))+((new_r11*sj39))+x483);
evalcond[1]=(((cj39*new_r00))+(((-1.0)*x485))+((new_r10*sj39)));
evalcond[2]=(((sj39*x482))+x487+new_r01);
evalcond[3]=((((-1.0)*x488))+x486+new_r11);
evalcond[4]=((((-1.0)*new_r00*x484))+(((-1.0)*x483))+((cj39*new_r10)));
evalcond[5]=((((-1.0)*new_r01*x484))+(((-1.0)*x485))+((cj39*new_r11)));
evalcond[6]=((((-1.0)*x488))+x486+new_r00);
evalcond[7]=((((-1.0)*x487))+(((-1.0)*x482*x484))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j35;
vinfos[0].indices[0] = _ij35[0];
vinfos[0].indices[1] = _ij35[1];
vinfos[0].maxsolutions = _nj35;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j36;
vinfos[1].indices[0] = _ij36[0];
vinfos[1].indices[1] = _ij36[1];
vinfos[1].maxsolutions = _nj36;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j37;
vinfos[2].indices[0] = _ij37[0];
vinfos[2].indices[1] = _ij37[1];
vinfos[2].maxsolutions = _nj37;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j38;
vinfos[3].indices[0] = _ij38[0];
vinfos[3].indices[1] = _ij38[1];
vinfos[3].maxsolutions = _nj38;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j39;
vinfos[4].indices[0] = _ij39[0];
vinfos[4].indices[1] = _ij39[1];
vinfos[4].maxsolutions = _nj39;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j40;
vinfos[5].indices[0] = _ij40[0];
vinfos[5].indices[1] = _ij40[1];
vinfos[5].maxsolutions = _nj40;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j41;
vinfos[6].indices[0] = _ij41[0];
vinfos[6].indices[1] = _ij41[1];
vinfos[6].maxsolutions = _nj41;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x489=(sj40+new_r22);
IkReal x490=((1.0)*new_r02);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j39)))), 6.28318530717959)));
evalcond[1]=x489;
evalcond[2]=x489;
evalcond[3]=(cj40+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*x490))+(((-1.0)*cj40)));
evalcond[6]=(((new_r20*sj40))+((cj40*new_r00)));
evalcond[7]=(((new_r21*sj40))+((cj40*new_r01)));
evalcond[8]=(((cj40*new_r22))+(((-1.0)*sj40*x490)));
evalcond[9]=((1.0)+((new_r22*sj40))+((cj40*new_r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j41array[1], cj41array[1], sj41array[1];
bool j41valid[1]={false};
_nj41 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j41array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj41array[0]=IKsin(j41array[0]);
cj41array[0]=IKcos(j41array[0]);
if( j41array[0] > IKPI )
{
    j41array[0]-=IK2PI;
}
else if( j41array[0] < -IKPI )
{    j41array[0]+=IK2PI;
}
j41valid[0] = true;
for(int ij41 = 0; ij41 < 1; ++ij41)
{
if( !j41valid[ij41] )
{
    continue;
}
_ij41[0] = ij41; _ij41[1] = -1;
for(int iij41 = ij41+1; iij41 < 1; ++iij41)
{
if( j41valid[iij41] && IKabs(cj41array[ij41]-cj41array[iij41]) < IKFAST_SOLUTION_THRESH && IKabs(sj41array[ij41]-sj41array[iij41]) < IKFAST_SOLUTION_THRESH )
{
    j41valid[iij41]=false; _ij41[1] = iij41; break; 
}
}
j41 = j41array[ij41]; cj41 = cj41array[ij41]; sj41 = sj41array[ij41];
{
IkReal evalcond[8];
IkReal x491=IKsin(j41);
IkReal x492=IKcos(j41);
IkReal x493=((1.0)*new_r02);
IkReal x494=((1.0)*x492);
evalcond[0]=(x491+new_r11);
evalcond[1]=((((-1.0)*x494))+new_r10);
evalcond[2]=((((-1.0)*x491*x493))+new_r20);
evalcond[3]=(new_r21+(((-1.0)*x492*x493)));
evalcond[4]=((((-1.0)*new_r22*x491))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*new_r22*x494))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r20*x493))+((new_r00*new_r22))+x491);
evalcond[7]=((((-1.0)*new_r21*x493))+((new_r01*new_r22))+x492);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j35;
vinfos[0].indices[0] = _ij35[0];
vinfos[0].indices[1] = _ij35[1];
vinfos[0].maxsolutions = _nj35;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j36;
vinfos[1].indices[0] = _ij36[0];
vinfos[1].indices[1] = _ij36[1];
vinfos[1].maxsolutions = _nj36;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j37;
vinfos[2].indices[0] = _ij37[0];
vinfos[2].indices[1] = _ij37[1];
vinfos[2].maxsolutions = _nj37;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j38;
vinfos[3].indices[0] = _ij38[0];
vinfos[3].indices[1] = _ij38[1];
vinfos[3].maxsolutions = _nj38;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j39;
vinfos[4].indices[0] = _ij39[0];
vinfos[4].indices[1] = _ij39[1];
vinfos[4].maxsolutions = _nj39;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j40;
vinfos[5].indices[0] = _ij40[0];
vinfos[5].indices[1] = _ij40[1];
vinfos[5].maxsolutions = _nj40;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j41;
vinfos[6].indices[0] = _ij41[0];
vinfos[6].indices[1] = _ij41[1];
vinfos[6].maxsolutions = _nj41;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x495=(sj40+new_r22);
IkReal x496=((((-1.0)*cj40))+new_r02);
IkReal x497=((1.0)*cj40);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j39)))), 6.28318530717959)));
evalcond[1]=x495;
evalcond[2]=x495;
evalcond[3]=x496;
evalcond[4]=new_r12;
evalcond[5]=x496;
evalcond[6]=((((-1.0)*new_r00*x497))+((new_r20*sj40)));
evalcond[7]=((((-1.0)*new_r01*x497))+((new_r21*sj40)));
evalcond[8]=(((cj40*new_r22))+((new_r02*sj40)));
evalcond[9]=((1.0)+(((-1.0)*new_r02*x497))+((new_r22*sj40)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j41array[1], cj41array[1], sj41array[1];
bool j41valid[1]={false};
_nj41 = 1;
CheckValue<IkReal> x498=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x498.valid){
continue;
}
CheckValue<IkReal> x499 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),((-1.0)*new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x499.valid){
continue;
}
j41array[0]=((-1.5707963267949)+(((1.5707963267949)*(x498.value)))+(x499.value));
sj41array[0]=IKsin(j41array[0]);
cj41array[0]=IKcos(j41array[0]);
if( j41array[0] > IKPI )
{
    j41array[0]-=IK2PI;
}
else if( j41array[0] < -IKPI )
{    j41array[0]+=IK2PI;
}
j41valid[0] = true;
for(int ij41 = 0; ij41 < 1; ++ij41)
{
if( !j41valid[ij41] )
{
    continue;
}
_ij41[0] = ij41; _ij41[1] = -1;
for(int iij41 = ij41+1; iij41 < 1; ++iij41)
{
if( j41valid[iij41] && IKabs(cj41array[ij41]-cj41array[iij41]) < IKFAST_SOLUTION_THRESH && IKabs(sj41array[ij41]-sj41array[iij41]) < IKFAST_SOLUTION_THRESH )
{
    j41valid[iij41]=false; _ij41[1] = iij41; break; 
}
}
j41 = j41array[ij41]; cj41 = cj41array[ij41]; sj41 = sj41array[ij41];
{
IkReal evalcond[8];
IkReal x500=IKsin(j41);
IkReal x501=IKcos(j41);
IkReal x502=((1.0)*new_r22);
evalcond[0]=(((new_r02*x500))+new_r20);
evalcond[1]=(((new_r02*x501))+new_r21);
evalcond[2]=(x500+(((-1.0)*new_r11)));
evalcond[3]=(new_r00+(((-1.0)*x500*x502)));
evalcond[4]=((((-1.0)*x501*x502))+new_r01);
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x501)));
evalcond[6]=((((-1.0)*new_r00*x502))+x500+((new_r02*new_r20)));
evalcond[7]=((((-1.0)*new_r01*x502))+x501+((new_r02*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j35;
vinfos[0].indices[0] = _ij35[0];
vinfos[0].indices[1] = _ij35[1];
vinfos[0].maxsolutions = _nj35;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j36;
vinfos[1].indices[0] = _ij36[0];
vinfos[1].indices[1] = _ij36[1];
vinfos[1].maxsolutions = _nj36;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j37;
vinfos[2].indices[0] = _ij37[0];
vinfos[2].indices[1] = _ij37[1];
vinfos[2].maxsolutions = _nj37;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j38;
vinfos[3].indices[0] = _ij38[0];
vinfos[3].indices[1] = _ij38[1];
vinfos[3].maxsolutions = _nj38;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j39;
vinfos[4].indices[0] = _ij39[0];
vinfos[4].indices[1] = _ij39[1];
vinfos[4].maxsolutions = _nj39;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j40;
vinfos[5].indices[0] = _ij40[0];
vinfos[5].indices[1] = _ij40[1];
vinfos[5].maxsolutions = _nj40;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j41;
vinfos[6].indices[0] = _ij41[0];
vinfos[6].indices[1] = _ij41[1];
vinfos[6].maxsolutions = _nj41;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x503=(new_r12*sj39);
IkReal x504=((1.0)*sj39);
IkReal x505=((1.0)*cj39);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j40))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(sj39+new_r02);
evalcond[3]=((((-1.0)*x505))+new_r12);
evalcond[4]=(((cj39*new_r02))+x503);
evalcond[5]=((((-1.0)*new_r02*x505))+(((-1.0)*x503)));
evalcond[6]=((-1.0)+(((-1.0)*new_r02*x504))+((cj39*new_r12)));
evalcond[7]=((((-1.0)*new_r00*x504))+((cj39*new_r10)));
evalcond[8]=((((-1.0)*new_r01*x504))+((cj39*new_r11)));
evalcond[9]=(((new_r00*sj39))+(((-1.0)*new_r10*x505)));
evalcond[10]=(((new_r01*sj39))+(((-1.0)*new_r11*x505)));
evalcond[11]=((1.0)+((new_r02*sj39))+(((-1.0)*new_r12*x505)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j41array[1], cj41array[1], sj41array[1];
bool j41valid[1]={false};
_nj41 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j41array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj41array[0]=IKsin(j41array[0]);
cj41array[0]=IKcos(j41array[0]);
if( j41array[0] > IKPI )
{
    j41array[0]-=IK2PI;
}
else if( j41array[0] < -IKPI )
{    j41array[0]+=IK2PI;
}
j41valid[0] = true;
for(int ij41 = 0; ij41 < 1; ++ij41)
{
if( !j41valid[ij41] )
{
    continue;
}
_ij41[0] = ij41; _ij41[1] = -1;
for(int iij41 = ij41+1; iij41 < 1; ++iij41)
{
if( j41valid[iij41] && IKabs(cj41array[ij41]-cj41array[iij41]) < IKFAST_SOLUTION_THRESH && IKabs(sj41array[ij41]-sj41array[iij41]) < IKFAST_SOLUTION_THRESH )
{
    j41valid[iij41]=false; _ij41[1] = iij41; break; 
}
}
j41 = j41array[ij41]; cj41 = cj41array[ij41]; sj41 = sj41array[ij41];
{
IkReal evalcond[8];
IkReal x506=IKsin(j41);
IkReal x507=IKcos(j41);
IkReal x508=((1.0)*new_r02);
IkReal x509=((1.0)*x507);
evalcond[0]=(x506+new_r20);
evalcond[1]=(x507+new_r21);
evalcond[2]=(((new_r12*x506))+new_r01);
evalcond[3]=(((new_r02*x507))+new_r10);
evalcond[4]=((((-1.0)*x506*x508))+new_r11);
evalcond[5]=(new_r00+(((-1.0)*new_r12*x509)));
evalcond[6]=(((new_r01*new_r12))+(((-1.0)*new_r11*x508))+x506);
evalcond[7]=((((-1.0)*x509))+((new_r00*new_r12))+(((-1.0)*new_r10*x508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j35;
vinfos[0].indices[0] = _ij35[0];
vinfos[0].indices[1] = _ij35[1];
vinfos[0].maxsolutions = _nj35;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j36;
vinfos[1].indices[0] = _ij36[0];
vinfos[1].indices[1] = _ij36[1];
vinfos[1].maxsolutions = _nj36;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j37;
vinfos[2].indices[0] = _ij37[0];
vinfos[2].indices[1] = _ij37[1];
vinfos[2].maxsolutions = _nj37;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j38;
vinfos[3].indices[0] = _ij38[0];
vinfos[3].indices[1] = _ij38[1];
vinfos[3].maxsolutions = _nj38;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j39;
vinfos[4].indices[0] = _ij39[0];
vinfos[4].indices[1] = _ij39[1];
vinfos[4].maxsolutions = _nj39;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j40;
vinfos[5].indices[0] = _ij40[0];
vinfos[5].indices[1] = _ij40[1];
vinfos[5].maxsolutions = _nj40;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j41;
vinfos[6].indices[0] = _ij41[0];
vinfos[6].indices[1] = _ij41[1];
vinfos[6].maxsolutions = _nj41;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x510=(new_r12*sj39);
IkReal x511=((1.0)*sj39);
IkReal x512=(cj39*new_r02);
IkReal x513=((((-1.0)*new_r00*x511))+((cj39*new_r10)));
IkReal x514=((((-1.0)*new_r01*x511))+((cj39*new_r11)));
IkReal x515=((1.0)+(((-1.0)*new_r02*x511))+((cj39*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j40)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(new_r02+(((-1.0)*x511)));
evalcond[3]=(cj39+new_r12);
evalcond[4]=(x512+x510);
evalcond[5]=((((-1.0)*x510))+(((-1.0)*x512)));
evalcond[6]=x515;
evalcond[7]=x513;
evalcond[8]=x514;
evalcond[9]=x513;
evalcond[10]=x514;
evalcond[11]=x515;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j41array[1], cj41array[1], sj41array[1];
bool j41valid[1]={false};
_nj41 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j41array[0]=IKatan2(new_r20, new_r21);
sj41array[0]=IKsin(j41array[0]);
cj41array[0]=IKcos(j41array[0]);
if( j41array[0] > IKPI )
{
    j41array[0]-=IK2PI;
}
else if( j41array[0] < -IKPI )
{    j41array[0]+=IK2PI;
}
j41valid[0] = true;
for(int ij41 = 0; ij41 < 1; ++ij41)
{
if( !j41valid[ij41] )
{
    continue;
}
_ij41[0] = ij41; _ij41[1] = -1;
for(int iij41 = ij41+1; iij41 < 1; ++iij41)
{
if( j41valid[iij41] && IKabs(cj41array[ij41]-cj41array[iij41]) < IKFAST_SOLUTION_THRESH && IKabs(sj41array[ij41]-sj41array[iij41]) < IKFAST_SOLUTION_THRESH )
{
    j41valid[iij41]=false; _ij41[1] = iij41; break; 
}
}
j41 = j41array[ij41]; cj41 = cj41array[ij41]; sj41 = sj41array[ij41];
{
IkReal evalcond[8];
IkReal x516=IKsin(j41);
IkReal x517=IKcos(j41);
IkReal x518=((1.0)*new_r12);
IkReal x519=((1.0)*x517);
evalcond[0]=((((-1.0)*x516))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x519)));
evalcond[2]=(((new_r02*x516))+new_r11);
evalcond[3]=(((new_r12*x517))+new_r00);
evalcond[4]=((((-1.0)*x516*x518))+new_r01);
evalcond[5]=((((-1.0)*new_r02*x519))+new_r10);
evalcond[6]=((((-1.0)*new_r01*x518))+x516+((new_r02*new_r11)));
evalcond[7]=(((new_r02*new_r10))+(((-1.0)*new_r00*x518))+(((-1.0)*x519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j35;
vinfos[0].indices[0] = _ij35[0];
vinfos[0].indices[1] = _ij35[1];
vinfos[0].maxsolutions = _nj35;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j36;
vinfos[1].indices[0] = _ij36[0];
vinfos[1].indices[1] = _ij36[1];
vinfos[1].maxsolutions = _nj36;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j37;
vinfos[2].indices[0] = _ij37[0];
vinfos[2].indices[1] = _ij37[1];
vinfos[2].maxsolutions = _nj37;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j38;
vinfos[3].indices[0] = _ij38[0];
vinfos[3].indices[1] = _ij38[1];
vinfos[3].maxsolutions = _nj38;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j39;
vinfos[4].indices[0] = _ij39[0];
vinfos[4].indices[1] = _ij39[1];
vinfos[4].maxsolutions = _nj39;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j40;
vinfos[5].indices[0] = _ij40[0];
vinfos[5].indices[1] = _ij40[1];
vinfos[5].maxsolutions = _nj40;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j41;
vinfos[6].indices[0] = _ij41[0];
vinfos[6].indices[1] = _ij41[1];
vinfos[6].maxsolutions = _nj41;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x520=(sj40+new_r22);
IkReal x521=((((-1.0)*cj40))+new_r12);
IkReal x522=((1.0)*cj40);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j39))), 6.28318530717959)));
evalcond[1]=x520;
evalcond[2]=x520;
evalcond[3]=new_r02;
evalcond[4]=x521;
evalcond[5]=x521;
evalcond[6]=(((new_r20*sj40))+(((-1.0)*new_r10*x522)));
evalcond[7]=((((-1.0)*new_r11*x522))+((new_r21*sj40)));
evalcond[8]=(((new_r12*sj40))+((cj40*new_r22)));
evalcond[9]=((1.0)+(((-1.0)*new_r12*x522))+((new_r22*sj40)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j41array[1], cj41array[1], sj41array[1];
bool j41valid[1]={false};
_nj41 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j41array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj41array[0]=IKsin(j41array[0]);
cj41array[0]=IKcos(j41array[0]);
if( j41array[0] > IKPI )
{
    j41array[0]-=IK2PI;
}
else if( j41array[0] < -IKPI )
{    j41array[0]+=IK2PI;
}
j41valid[0] = true;
for(int ij41 = 0; ij41 < 1; ++ij41)
{
if( !j41valid[ij41] )
{
    continue;
}
_ij41[0] = ij41; _ij41[1] = -1;
for(int iij41 = ij41+1; iij41 < 1; ++iij41)
{
if( j41valid[iij41] && IKabs(cj41array[ij41]-cj41array[iij41]) < IKFAST_SOLUTION_THRESH && IKabs(sj41array[ij41]-sj41array[iij41]) < IKFAST_SOLUTION_THRESH )
{
    j41valid[iij41]=false; _ij41[1] = iij41; break; 
}
}
j41 = j41array[ij41]; cj41 = cj41array[ij41]; sj41 = sj41array[ij41];
{
IkReal evalcond[8];
IkReal x523=IKsin(j41);
IkReal x524=IKcos(j41);
IkReal x525=((1.0)*new_r22);
evalcond[0]=(x523+new_r01);
evalcond[1]=(((new_r12*x523))+new_r20);
evalcond[2]=(((new_r12*x524))+new_r21);
evalcond[3]=((((-1.0)*x524))+new_r00);
evalcond[4]=((((-1.0)*x524*x525))+new_r11);
evalcond[5]=((((-1.0)*x523*x525))+new_r10);
evalcond[6]=(((new_r12*new_r20))+(((-1.0)*new_r10*x525))+x523);
evalcond[7]=((((-1.0)*new_r11*x525))+((new_r12*new_r21))+x524);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j35;
vinfos[0].indices[0] = _ij35[0];
vinfos[0].indices[1] = _ij35[1];
vinfos[0].maxsolutions = _nj35;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j36;
vinfos[1].indices[0] = _ij36[0];
vinfos[1].indices[1] = _ij36[1];
vinfos[1].maxsolutions = _nj36;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j37;
vinfos[2].indices[0] = _ij37[0];
vinfos[2].indices[1] = _ij37[1];
vinfos[2].maxsolutions = _nj37;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j38;
vinfos[3].indices[0] = _ij38[0];
vinfos[3].indices[1] = _ij38[1];
vinfos[3].maxsolutions = _nj38;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j39;
vinfos[4].indices[0] = _ij39[0];
vinfos[4].indices[1] = _ij39[1];
vinfos[4].maxsolutions = _nj39;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j40;
vinfos[5].indices[0] = _ij40[0];
vinfos[5].indices[1] = _ij40[1];
vinfos[5].maxsolutions = _nj40;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j41;
vinfos[6].indices[0] = _ij41[0];
vinfos[6].indices[1] = _ij41[1];
vinfos[6].maxsolutions = _nj41;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x526=(sj40+new_r22);
IkReal x527=((1.0)*new_r12);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j39)))), 6.28318530717959)));
evalcond[1]=x526;
evalcond[2]=x526;
evalcond[3]=new_r02;
evalcond[4]=(cj40+new_r12);
evalcond[5]=((((-1.0)*x527))+(((-1.0)*cj40)));
evalcond[6]=(((cj40*new_r10))+((new_r20*sj40)));
evalcond[7]=(((cj40*new_r11))+((new_r21*sj40)));
evalcond[8]=(((cj40*new_r22))+(((-1.0)*sj40*x527)));
evalcond[9]=((1.0)+((cj40*new_r12))+((new_r22*sj40)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j41array[1], cj41array[1], sj41array[1];
bool j41valid[1]={false};
_nj41 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j41array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj41array[0]=IKsin(j41array[0]);
cj41array[0]=IKcos(j41array[0]);
if( j41array[0] > IKPI )
{
    j41array[0]-=IK2PI;
}
else if( j41array[0] < -IKPI )
{    j41array[0]+=IK2PI;
}
j41valid[0] = true;
for(int ij41 = 0; ij41 < 1; ++ij41)
{
if( !j41valid[ij41] )
{
    continue;
}
_ij41[0] = ij41; _ij41[1] = -1;
for(int iij41 = ij41+1; iij41 < 1; ++iij41)
{
if( j41valid[iij41] && IKabs(cj41array[ij41]-cj41array[iij41]) < IKFAST_SOLUTION_THRESH && IKabs(sj41array[ij41]-sj41array[iij41]) < IKFAST_SOLUTION_THRESH )
{
    j41valid[iij41]=false; _ij41[1] = iij41; break; 
}
}
j41 = j41array[ij41]; cj41 = cj41array[ij41]; sj41 = sj41array[ij41];
{
IkReal evalcond[8];
IkReal x528=IKsin(j41);
IkReal x529=IKcos(j41);
IkReal x530=((1.0)*new_r12);
evalcond[0]=(x528+(((-1.0)*new_r01)));
evalcond[1]=(new_r11+((new_r22*x529)));
evalcond[2]=((((-1.0)*x528*x530))+new_r20);
evalcond[3]=((((-1.0)*x529*x530))+new_r21);
evalcond[4]=((((-1.0)*x529))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*new_r22*x528)));
evalcond[6]=((((-1.0)*new_r20*x530))+x528+((new_r10*new_r22)));
evalcond[7]=((((-1.0)*new_r21*x530))+x529+((new_r11*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j35;
vinfos[0].indices[0] = _ij35[0];
vinfos[0].indices[1] = _ij35[1];
vinfos[0].maxsolutions = _nj35;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j36;
vinfos[1].indices[0] = _ij36[0];
vinfos[1].indices[1] = _ij36[1];
vinfos[1].maxsolutions = _nj36;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j37;
vinfos[2].indices[0] = _ij37[0];
vinfos[2].indices[1] = _ij37[1];
vinfos[2].maxsolutions = _nj37;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j38;
vinfos[3].indices[0] = _ij38[0];
vinfos[3].indices[1] = _ij38[1];
vinfos[3].maxsolutions = _nj38;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j39;
vinfos[4].indices[0] = _ij39[0];
vinfos[4].indices[1] = _ij39[1];
vinfos[4].maxsolutions = _nj39;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j40;
vinfos[5].indices[0] = _ij40[0];
vinfos[5].indices[1] = _ij40[1];
vinfos[5].maxsolutions = _nj40;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j41;
vinfos[6].indices[0] = _ij41[0];
vinfos[6].indices[1] = _ij41[1];
vinfos[6].maxsolutions = _nj41;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j41]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j41array[1], cj41array[1], sj41array[1];
bool j41valid[1]={false};
_nj41 = 1;
CheckValue<IkReal> x532=IKPowWithIntegerCheck(cj40,-1);
if(!x532.valid){
continue;
}
IkReal x531=x532.value;
CheckValue<IkReal> x533=IKPowWithIntegerCheck(cj39,-1);
if(!x533.valid){
continue;
}
CheckValue<IkReal> x534=IKPowWithIntegerCheck(sj40,-1);
if(!x534.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*x531)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x531*(x533.value)*(x534.value)*((((new_r20*sj39))+(((-1.0)*cj40*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*x531))+IKsqr((x531*(x533.value)*(x534.value)*((((new_r20*sj39))+(((-1.0)*cj40*new_r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j41array[0]=IKatan2(((-1.0)*new_r20*x531), (x531*(x533.value)*(x534.value)*((((new_r20*sj39))+(((-1.0)*cj40*new_r11))))));
sj41array[0]=IKsin(j41array[0]);
cj41array[0]=IKcos(j41array[0]);
if( j41array[0] > IKPI )
{
    j41array[0]-=IK2PI;
}
else if( j41array[0] < -IKPI )
{    j41array[0]+=IK2PI;
}
j41valid[0] = true;
for(int ij41 = 0; ij41 < 1; ++ij41)
{
if( !j41valid[ij41] )
{
    continue;
}
_ij41[0] = ij41; _ij41[1] = -1;
for(int iij41 = ij41+1; iij41 < 1; ++iij41)
{
if( j41valid[iij41] && IKabs(cj41array[ij41]-cj41array[iij41]) < IKFAST_SOLUTION_THRESH && IKabs(sj41array[ij41]-sj41array[iij41]) < IKFAST_SOLUTION_THRESH )
{
    j41valid[iij41]=false; _ij41[1] = iij41; break; 
}
}
j41 = j41array[ij41]; cj41 = cj41array[ij41]; sj41 = sj41array[ij41];
{
IkReal evalcond[12];
IkReal x535=IKsin(j41);
IkReal x536=IKcos(j41);
IkReal x537=((1.0)*sj39);
IkReal x538=(cj39*new_r10);
IkReal x539=(cj39*new_r11);
IkReal x540=(sj40*x536);
IkReal x541=(sj40*x535);
IkReal x542=((1.0)*x536);
evalcond[0]=(new_r20+((cj40*x535)));
evalcond[1]=(new_r21+((cj40*x536)));
evalcond[2]=(((cj39*new_r01))+((new_r11*sj39))+x535);
evalcond[3]=(((cj39*new_r00))+(((-1.0)*x542))+((new_r10*sj39)));
evalcond[4]=(((sj39*x535))+((cj39*x540))+new_r11);
evalcond[5]=((((-1.0)*new_r00*x537))+x541+x538);
evalcond[6]=((((-1.0)*new_r01*x537))+x540+x539);
evalcond[7]=((((-1.0)*x537*x540))+((cj39*x535))+new_r01);
evalcond[8]=(((cj39*x541))+new_r10+(((-1.0)*x536*x537)));
evalcond[9]=((((-1.0)*cj39*x542))+(((-1.0)*x537*x541))+new_r00);
evalcond[10]=(((sj40*x538))+(((-1.0)*new_r00*sj40*x537))+((cj40*new_r20))+x535);
evalcond[11]=((((-1.0)*new_r01*sj40*x537))+((sj40*x539))+((cj40*new_r21))+x536);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j35;
vinfos[0].indices[0] = _ij35[0];
vinfos[0].indices[1] = _ij35[1];
vinfos[0].maxsolutions = _nj35;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j36;
vinfos[1].indices[0] = _ij36[0];
vinfos[1].indices[1] = _ij36[1];
vinfos[1].maxsolutions = _nj36;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j37;
vinfos[2].indices[0] = _ij37[0];
vinfos[2].indices[1] = _ij37[1];
vinfos[2].maxsolutions = _nj37;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j38;
vinfos[3].indices[0] = _ij38[0];
vinfos[3].indices[1] = _ij38[1];
vinfos[3].maxsolutions = _nj38;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j39;
vinfos[4].indices[0] = _ij39[0];
vinfos[4].indices[1] = _ij39[1];
vinfos[4].maxsolutions = _nj39;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j40;
vinfos[5].indices[0] = _ij40[0];
vinfos[5].indices[1] = _ij40[1];
vinfos[5].maxsolutions = _nj40;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j41;
vinfos[6].indices[0] = _ij41[0];
vinfos[6].indices[1] = _ij41[1];
vinfos[6].maxsolutions = _nj41;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j41array[1], cj41array[1], sj41array[1];
bool j41valid[1]={false};
_nj41 = 1;
CheckValue<IkReal> x544=IKPowWithIntegerCheck(cj40,-1);
if(!x544.valid){
continue;
}
IkReal x543=x544.value;
CheckValue<IkReal> x545=IKPowWithIntegerCheck(sj39,-1);
if(!x545.valid){
continue;
}
if( IKabs((x543*(x545.value)*((((cj39*new_r21*sj40))+(((-1.0)*cj40*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*x543)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x543*(x545.value)*((((cj39*new_r21*sj40))+(((-1.0)*cj40*new_r11))))))+IKsqr(((-1.0)*new_r21*x543))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j41array[0]=IKatan2((x543*(x545.value)*((((cj39*new_r21*sj40))+(((-1.0)*cj40*new_r11))))), ((-1.0)*new_r21*x543));
sj41array[0]=IKsin(j41array[0]);
cj41array[0]=IKcos(j41array[0]);
if( j41array[0] > IKPI )
{
    j41array[0]-=IK2PI;
}
else if( j41array[0] < -IKPI )
{    j41array[0]+=IK2PI;
}
j41valid[0] = true;
for(int ij41 = 0; ij41 < 1; ++ij41)
{
if( !j41valid[ij41] )
{
    continue;
}
_ij41[0] = ij41; _ij41[1] = -1;
for(int iij41 = ij41+1; iij41 < 1; ++iij41)
{
if( j41valid[iij41] && IKabs(cj41array[ij41]-cj41array[iij41]) < IKFAST_SOLUTION_THRESH && IKabs(sj41array[ij41]-sj41array[iij41]) < IKFAST_SOLUTION_THRESH )
{
    j41valid[iij41]=false; _ij41[1] = iij41; break; 
}
}
j41 = j41array[ij41]; cj41 = cj41array[ij41]; sj41 = sj41array[ij41];
{
IkReal evalcond[12];
IkReal x546=IKsin(j41);
IkReal x547=IKcos(j41);
IkReal x548=((1.0)*sj39);
IkReal x549=(cj39*new_r10);
IkReal x550=(cj39*new_r11);
IkReal x551=(sj40*x547);
IkReal x552=(sj40*x546);
IkReal x553=((1.0)*x547);
evalcond[0]=(new_r20+((cj40*x546)));
evalcond[1]=(new_r21+((cj40*x547)));
evalcond[2]=(((cj39*new_r01))+((new_r11*sj39))+x546);
evalcond[3]=(((cj39*new_r00))+((new_r10*sj39))+(((-1.0)*x553)));
evalcond[4]=(((sj39*x546))+((cj39*x551))+new_r11);
evalcond[5]=((((-1.0)*new_r00*x548))+x552+x549);
evalcond[6]=((((-1.0)*new_r01*x548))+x551+x550);
evalcond[7]=(((cj39*x546))+(((-1.0)*x548*x551))+new_r01);
evalcond[8]=(((cj39*x552))+(((-1.0)*x547*x548))+new_r10);
evalcond[9]=((((-1.0)*x548*x552))+new_r00+(((-1.0)*cj39*x553)));
evalcond[10]=((((-1.0)*new_r00*sj40*x548))+((sj40*x549))+((cj40*new_r20))+x546);
evalcond[11]=((((-1.0)*new_r01*sj40*x548))+((sj40*x550))+((cj40*new_r21))+x547);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j35;
vinfos[0].indices[0] = _ij35[0];
vinfos[0].indices[1] = _ij35[1];
vinfos[0].maxsolutions = _nj35;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j36;
vinfos[1].indices[0] = _ij36[0];
vinfos[1].indices[1] = _ij36[1];
vinfos[1].maxsolutions = _nj36;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j37;
vinfos[2].indices[0] = _ij37[0];
vinfos[2].indices[1] = _ij37[1];
vinfos[2].maxsolutions = _nj37;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j38;
vinfos[3].indices[0] = _ij38[0];
vinfos[3].indices[1] = _ij38[1];
vinfos[3].maxsolutions = _nj38;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j39;
vinfos[4].indices[0] = _ij39[0];
vinfos[4].indices[1] = _ij39[1];
vinfos[4].maxsolutions = _nj39;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j40;
vinfos[5].indices[0] = _ij40[0];
vinfos[5].indices[1] = _ij40[1];
vinfos[5].maxsolutions = _nj40;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j41;
vinfos[6].indices[0] = _ij41[0];
vinfos[6].indices[1] = _ij41[1];
vinfos[6].maxsolutions = _nj41;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j41array[1], cj41array[1], sj41array[1];
bool j41valid[1]={false};
_nj41 = 1;
CheckValue<IkReal> x554=IKPowWithIntegerCheck(IKsign(cj40),-1);
if(!x554.valid){
continue;
}
CheckValue<IkReal> x555 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),((-1.0)*new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x555.valid){
continue;
}
j41array[0]=((-1.5707963267949)+(((1.5707963267949)*(x554.value)))+(x555.value));
sj41array[0]=IKsin(j41array[0]);
cj41array[0]=IKcos(j41array[0]);
if( j41array[0] > IKPI )
{
    j41array[0]-=IK2PI;
}
else if( j41array[0] < -IKPI )
{    j41array[0]+=IK2PI;
}
j41valid[0] = true;
for(int ij41 = 0; ij41 < 1; ++ij41)
{
if( !j41valid[ij41] )
{
    continue;
}
_ij41[0] = ij41; _ij41[1] = -1;
for(int iij41 = ij41+1; iij41 < 1; ++iij41)
{
if( j41valid[iij41] && IKabs(cj41array[ij41]-cj41array[iij41]) < IKFAST_SOLUTION_THRESH && IKabs(sj41array[ij41]-sj41array[iij41]) < IKFAST_SOLUTION_THRESH )
{
    j41valid[iij41]=false; _ij41[1] = iij41; break; 
}
}
j41 = j41array[ij41]; cj41 = cj41array[ij41]; sj41 = sj41array[ij41];
{
IkReal evalcond[12];
IkReal x556=IKsin(j41);
IkReal x557=IKcos(j41);
IkReal x558=((1.0)*sj39);
IkReal x559=(cj39*new_r10);
IkReal x560=(cj39*new_r11);
IkReal x561=(sj40*x557);
IkReal x562=(sj40*x556);
IkReal x563=((1.0)*x557);
evalcond[0]=(((cj40*x556))+new_r20);
evalcond[1]=(((cj40*x557))+new_r21);
evalcond[2]=(((cj39*new_r01))+((new_r11*sj39))+x556);
evalcond[3]=(((cj39*new_r00))+((new_r10*sj39))+(((-1.0)*x563)));
evalcond[4]=(((sj39*x556))+((cj39*x561))+new_r11);
evalcond[5]=((((-1.0)*new_r00*x558))+x559+x562);
evalcond[6]=((((-1.0)*new_r01*x558))+x560+x561);
evalcond[7]=(((cj39*x556))+(((-1.0)*x558*x561))+new_r01);
evalcond[8]=(((cj39*x562))+new_r10+(((-1.0)*x557*x558)));
evalcond[9]=((((-1.0)*x558*x562))+(((-1.0)*cj39*x563))+new_r00);
evalcond[10]=(((sj40*x559))+((cj40*new_r20))+x556+(((-1.0)*new_r00*sj40*x558)));
evalcond[11]=((((-1.0)*new_r01*sj40*x558))+((cj40*new_r21))+x557+((sj40*x560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j35;
vinfos[0].indices[0] = _ij35[0];
vinfos[0].indices[1] = _ij35[1];
vinfos[0].maxsolutions = _nj35;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j36;
vinfos[1].indices[0] = _ij36[0];
vinfos[1].indices[1] = _ij36[1];
vinfos[1].maxsolutions = _nj36;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j37;
vinfos[2].indices[0] = _ij37[0];
vinfos[2].indices[1] = _ij37[1];
vinfos[2].maxsolutions = _nj37;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j38;
vinfos[3].indices[0] = _ij38[0];
vinfos[3].indices[1] = _ij38[1];
vinfos[3].maxsolutions = _nj38;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j39;
vinfos[4].indices[0] = _ij39[0];
vinfos[4].indices[1] = _ij39[1];
vinfos[4].maxsolutions = _nj39;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j40;
vinfos[5].indices[0] = _ij40[0];
vinfos[5].indices[1] = _ij40[1];
vinfos[5].maxsolutions = _nj40;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j41;
vinfos[6].indices[0] = _ij41[0];
vinfos[6].indices[1] = _ij41[1];
vinfos[6].maxsolutions = _nj41;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "35fe0337ca3afc2d90bba8543ebceff2"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
